function yy(n, e) {
  for (var t = 0; t < e.length; t++) {
    const s = e[t];
    if (typeof s != "string" && !Array.isArray(s)) {
      for (const r in s) if (r !== "default" && !(r in n)) {
        const a = Object.getOwnPropertyDescriptor(s, r);
        a && Object.defineProperty(n, r, a.get ? a : { enumerable: true, get: () => s[r] });
      }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const c_ = 1e-7, d_ = 1e-4;
class Cd {
  constructor(e, t) {
    this.backend = e, this.dataMover = t, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(e) {
    return this.data.has(e) || this.dataMover.moveData(this.backend, e), this.data.get(e);
  }
  set(e, t) {
    this.dataIdsCount++, this.data.set(e, t);
  }
  has(e) {
    return this.data.has(e);
  }
  delete(e) {
    return this.dataIdsCount--, this.data.delete(e);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
}
class Pl {
  refCount(e) {
    return Jn("refCount");
  }
  incRef(e) {
    return Jn("incRef");
  }
  timerAvailable() {
    return true;
  }
  time(e) {
    return Jn("time");
  }
  read(e) {
    return Jn("read");
  }
  readSync(e) {
    return Jn("readSync");
  }
  readToGPU(e, t) {
    return Jn("readToGPU");
  }
  numDataIds() {
    return Jn("numDataIds");
  }
  disposeData(e, t) {
    return Jn("disposeData");
  }
  write(e, t, s) {
    return Jn("write");
  }
  move(e, t, s, r, a) {
    return Jn("move");
  }
  createTensorFromGPUData(e, t, s) {
    return Jn("createTensorFromGPUData");
  }
  memory() {
    return Jn("memory");
  }
  floatPrecision() {
    return Jn("floatPrecision");
  }
  epsilon() {
    return this.floatPrecision() === 32 ? c_ : d_;
  }
  dispose() {
    return Jn("dispose");
  }
}
function Jn(n) {
  throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function by(n) {
  let e = n.length, t = 0;
  for (; e > 0; ) t = Math.random() * e | 0, e--, Dr(n, e, t);
}
function h_(n, e) {
  if (n.length !== e.length) throw new Error(`Array sizes must match to be shuffled together First array length was ${n.length}Second array length was ${e.length}`);
  let t = n.length, s = 0;
  for (; t > 0; ) s = Math.random() * t | 0, t--, Dr(n, t, s), Dr(e, t, s);
}
function ga(n, e, t) {
  return Math.max(n, Math.min(e, t));
}
function af(n) {
  return n % 2 === 0 ? n : n + 1;
}
function Dr(n, e, t) {
  const s = n[e];
  n[e] = n[t], n[t] = s;
}
function xy(n) {
  let e = 0;
  for (let t = 0; t < n.length; t++) e += n[t];
  return e;
}
function p_(n, e) {
  const t = Math.random();
  return e * t + (1 - t) * n;
}
function f_(n, e) {
  let t = 0;
  for (let s = 0; s < n.length; s++) {
    const r = Number(n[s]) - Number(e[s]);
    t += r * r;
  }
  return t;
}
function $(n, e) {
  if (!n) throw new Error(typeof e == "string" ? e : e());
}
function nn(n, e, t = "") {
  $(Be(n, e), () => t + ` Shapes ${n} and ${e} must match`);
}
function Ki(n) {
  $(n != null, () => "The input to the tensor constructor must be a non-null value.");
}
function A(n) {
  if (n.length === 0) return 1;
  let e = n[0];
  for (let t = 1; t < n.length; t++) e *= n[t];
  return e;
}
function pg(n) {
  return n.length === 0;
}
function QC(n, e) {
  if (n === e) return true;
  if (n == null || e == null || n.length !== e.length) return false;
  for (let t = 0; t < n.length; t++) if (n[t] !== null && e[t] !== null && n[t] !== e[t]) return false;
  return true;
}
function Be(n, e) {
  if (n === e) return true;
  if (n == null || e == null || n.length !== e.length) return false;
  for (let t = 0; t < n.length; t++) if (n[t] !== e[t]) return false;
  return true;
}
function Ni(n) {
  return n % 1 === 0;
}
function m_(n) {
  if (Math.tanh != null) return Math.tanh(n);
  if (n === 1 / 0) return 1;
  if (n === -1 / 0) return -1;
  {
    const e = Math.exp(2 * n);
    return (e - 1) / (e + 1);
  }
}
function Np(n) {
  const e = Math.ceil(Math.sqrt(n));
  return [e, Math.ceil(n / e)];
}
function g_(n) {
  const e = new Uint32Array(n);
  for (let t = 0; t < n; ++t) e[t] = t;
  return by(e), e;
}
function Ii(n, e) {
  return e <= n.length ? n : n + " ".repeat(e - n.length);
}
function fg(n, e = (r) => 0, t, s) {
  return new Promise((r, a) => {
    let o = 0;
    const i = () => {
      if (n()) {
        r();
        return;
      }
      o++;
      const u = e(o);
      if (t != null && o >= t) {
        a();
        return;
      }
      s != null ? s(i, u) : setTimeout(i, u);
    };
    i();
  });
}
function Id(n, e) {
  let t = 1, s = -1;
  for (let a = 0; a < n.length; ++a) if (n[a] >= 0) t *= n[a];
  else if (n[a] === -1) {
    if (s !== -1) throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${a}`);
    s = a;
  } else if (n[a] < 0) throw Error(`Shapes can not be < 0. Found ${n[a]} at dim ${a}`);
  if (s === -1) {
    if (e > 0 && e !== t) throw Error(`Size(${e}) must match the product of shape ${n}`);
    return n;
  }
  if (t === 0) throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);
  if (e % t !== 0) throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${t}`);
  const r = n.slice();
  return r[s] = e / t, r;
}
function Ee(n, e) {
  const t = e.length;
  return n = n == null ? e.map((s, r) => r) : [].concat(n), $(n.every((s) => s >= -t && s < t), () => `All values in axis param must be in range [-${t}, ${t}) but got axis ${n}`), $(n.every((s) => Ni(s)), () => `All values in axis param must be integers but got axis ${n}`), n.map((s) => s < 0 ? t + s : s);
}
function Wr(n, e) {
  const t = [], s = [], r = e != null && Array.isArray(e) && e.length === 0, a = e == null || r ? null : Ee(e, n).sort();
  let o = 0;
  for (let i = 0; i < n.length; ++i) {
    if (a != null) {
      if (a[o] === i && n[i] !== 1) throw new Error(`Can't squeeze axis ${i} since its dim '${n[i]}' is not 1`);
      (a[o] == null || a[o] > i) && n[i] === 1 && (t.push(n[i]), s.push(i)), a[o] <= i && o++;
    }
    n[i] !== 1 && (t.push(n[i]), s.push(i));
  }
  return { newShape: t, keptDims: s };
}
function Ht(n, e) {
  return Dt(n, e);
}
function Dt(n, e) {
  let t = null;
  if (n == null || n === "float32") t = new Float32Array(e);
  else if (n === "int32") t = new Int32Array(e);
  else if (n === "bool") t = new Uint8Array(e);
  else if (n === "string") t = new Array(e);
  else throw new Error(`Unknown data type ${n}`);
  return t;
}
function ZC(n, e) {
  for (let t = 0; t < n.length; t++) {
    const s = n[t];
    if (isNaN(s) || !isFinite(s)) throw Error(`A tensor of type ${e} being uploaded contains ${s}.`);
  }
}
function JC(n) {
  return n === "bool" || n === "complex64" || n === "float32" || n === "int32" || n === "string";
}
function of(n, e) {
  return !(e === "complex64" || e === "float32" && n !== "complex64" || e === "int32" && n !== "float32" && n !== "complex64" || e === "bool" && n === "bool");
}
function Ti(n) {
  if (n === "float32" || n === "int32") return 4;
  if (n === "complex64") return 8;
  if (n === "bool") return 1;
  throw new Error(`Unknown dtype ${n}`);
}
function eI(n) {
  if (n == null) return 0;
  let e = 0;
  return n.forEach((t) => e += t.length), e;
}
function Hs(n) {
  return typeof n == "string" || n instanceof String;
}
function tI(n) {
  return typeof n == "boolean";
}
function Tp(n) {
  return typeof n == "number";
}
function Vr(n) {
  return Array.isArray(n) ? Vr(n[0]) : n instanceof Float32Array ? "float32" : n instanceof Int32Array || n instanceof Uint8Array || n instanceof Uint8ClampedArray ? "int32" : Tp(n) ? "float32" : Hs(n) ? "string" : tI(n) ? "bool" : "float32";
}
function ya(n) {
  return !!(n && n.constructor && n.call && n.apply);
}
function Rp(n, e) {
  for (let t = e; t < n; ++t) if (n % t === 0) return t;
  return n;
}
function me(n) {
  const e = n.length;
  if (e < 2) return [];
  const t = new Array(e - 1);
  t[e - 2] = n[e - 1];
  for (let s = e - 3; s >= 0; --s) t[s] = t[s + 1] * n[s + 1];
  return t;
}
function nI(n, e, t, s = false) {
  const r = new Array();
  if (e.length === 1) {
    const a = e[0] * (s ? 2 : 1);
    for (let o = 0; o < a; o++) r[o] = t[n + o];
  } else {
    const a = e[0], o = e.slice(1), i = o.reduce((u, c) => u * c) * (s ? 2 : 1);
    for (let u = 0; u < a; u++) r[u] = nI(n + u * i, o, t, s);
  }
  return r;
}
function Cs(n, e, t = false) {
  if (n.length === 0) return e[0];
  const s = n.reduce((r, a) => r * a) * (t ? 2 : 1);
  if (s === 0) return [];
  if (s !== e.length) throw new Error(`[${n}] does not match the input size ${e.length}${t ? " for a complex tensor" : ""}.`);
  return nI(0, n, e, t);
}
function Xc(n, e) {
  if (Array.isArray(n)) return n;
  if (e === "float32") return n instanceof Float32Array ? n : new Float32Array(n);
  if (e === "int32") return n instanceof Int32Array ? n : new Int32Array(n);
  if (e === "bool" || e === "string") return Uint8Array.from(new Int32Array(n));
  throw new Error(`Unknown dtype ${e}`);
}
function uf(n, e) {
  const t = un(n, e);
  for (let s = 0; s < t.length; s++) t[s] = 1;
  return t;
}
function un(n, e) {
  if (e == null || e === "float32" || e === "complex64") return new Float32Array(n);
  if (e === "int32") return new Int32Array(n);
  if (e === "bool") return new Uint8Array(n);
  throw new Error(`Unknown data type ${e}`);
}
function wy(n, e) {
  const t = n.reduce((s, r) => s * r, 1);
  if (e == null || e === "float32") return Cs(n, new Float32Array(t));
  if (e === "int32") return Cs(n, new Int32Array(t));
  if (e === "bool") return Cs(n, new Uint8Array(t));
  throw new Error(`Unknown data type ${e}`);
}
function ls(n) {
  n.forEach((e) => {
    $(Number.isInteger(e) && e >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${n}].`);
  });
}
function js(n, e, t) {
  if (e === 0) return 0;
  if (e === 1) return n[0];
  let s = n[n.length - 1];
  for (let r = 0; r < n.length - 1; ++r) s += t[r] * n[r];
  return s;
}
function Xi(n, e, t) {
  if (e === 0) return [];
  if (e === 1) return [n];
  const s = new Array(e);
  for (let r = 0; r < s.length - 1; ++r) s[r] = Math.floor(n / t[r]), n -= s[r] * t[r];
  return s[s.length - 1] = n, s;
}
function Pr(n) {
  return n && n.then && typeof n.then == "function";
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const V0 = "tfjsflags";
class sI {
  constructor(e) {
    this.global = e, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = y_, this.populateURLFlags();
  }
  setPlatform(e, t) {
    this.platform != null && (U().getBool("IS_TEST") || U().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)), this.platformName = e, this.platform = t;
  }
  registerFlag(e, t, s) {
    if (this.flagRegistry[e] = { evaluationFn: t, setHook: s }, this.urlFlags[e] != null) {
      const r = this.urlFlags[e];
      U().getBool("IS_TEST") || U().getBool("PROD") || console.warn(`Setting feature override from URL ${e}: ${r}.`), this.set(e, r);
    }
  }
  async getAsync(e) {
    return e in this.flags ? this.flags[e] : (this.flags[e] = await this.evaluateFlag(e), this.flags[e]);
  }
  get(e) {
    if (e in this.flags) return this.flags[e];
    const t = this.evaluateFlag(e);
    if (Pr(t)) throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[e] = t, this.flags[e];
  }
  getNumber(e) {
    return this.get(e);
  }
  getBool(e) {
    return this.get(e);
  }
  getString(e) {
    return this.get(e);
  }
  getFlags() {
    return this.flags;
  }
  get features() {
    return this.flags;
  }
  set(e, t) {
    if (this.flagRegistry[e] == null) throw new Error(`Cannot set flag ${e} as it has not been registered.`);
    this.flags[e] = t, this.flagRegistry[e].setHook != null && this.flagRegistry[e].setHook(t);
  }
  evaluateFlag(e) {
    if (this.flagRegistry[e] == null) throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);
    return this.flagRegistry[e].evaluationFn();
  }
  setFlags(e) {
    this.flags = Object.assign({}, e);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global > "u" || typeof this.global.location > "u" || typeof this.global.location.search > "u") return;
    const e = this.getQueryParams(this.global.location.search);
    V0 in e && e[V0].split(",").forEach((s) => {
      const [r, a] = s.split(":");
      this.urlFlags[r] = x_(r, a);
    });
  }
}
function y_(n) {
  const e = {};
  return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (t, ...s) => (b_(e, s[0], s[1]), s.join("="))), e;
}
function b_(n, e, t) {
  n[decodeURIComponent(e)] = decodeURIComponent(t || "");
}
function x_(n, e) {
  const t = e.toLowerCase();
  return t === "true" || t === "false" ? t === "true" : `${+t}` === t ? +t : e;
}
function U() {
  return Cy;
}
let Cy = null;
function w_(n) {
  Cy = n;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let jm;
function rI() {
  if (jm == null) {
    let n;
    if (typeof window < "u") n = window;
    else if (typeof global < "u") n = global;
    else if (typeof process < "u") n = process;
    else if (typeof self < "u") n = self;
    else throw new Error("Could not find a global object");
    jm = n;
  }
  return jm;
}
function C_() {
  const n = rI();
  return n._tfGlobals == null && (n._tfGlobals = /* @__PURE__ */ new Map()), n._tfGlobals;
}
function Iy(n, e) {
  const t = C_();
  if (t.has(n)) return t.get(n);
  {
    const s = e();
    return t.set(n, s), t.get(n);
  }
}
const Yi = "Abs", Ea = "Acos", Da = "Acosh", Ur = "Add", Aa = "AddN", Qi = "All", Zi = "Any", Ji = "ArgMax", eu = "ArgMin", Fa = "Asin", Oa = "Asinh", Pa = "Atan", La = "Atanh", za = "Atan2", Ma = "AvgPool", Ll = "AvgPoolGrad", tu = "AvgPool3D", zl = "AvgPool3DGrad", Ba = "BatchMatMul", nu = "BatchToSpaceND", su = "Bincount", Ml = "BitwiseAnd", aI = "BroadcastTo", Bl = "BroadcastArgs", Wa = "Cast", Va = "Ceil", Gr = "ClipByValue", Sd = "Complex", Wl = "ComplexAbs", ru = "Concat", Ua = "Conv2D", vd = "Conv2DBackpropFilter", Ga = "Conv2DBackpropInput", Ha = "Conv3D", au = "Conv3DBackpropFilterV2", ou = "Conv3DBackpropInputV2", ja = "Cos", qa = "Cosh", iu = "Cumprod", Ka = "Cumsum", uu = "CropAndResize", Vl = "DenseBincount", lu = "DepthToSpace", Xa = "DepthwiseConv2dNative", $d = "DepthwiseConv2dNativeBackpropFilter", kd = "DepthwiseConv2dNativeBackpropInput", Ul = "Diag", Ya = "Dilation2D", Ri = "Dilation2DBackpropInput", _i = "Dilation2DBackpropFilter", Nd = "Draw", Qa = "RealDiv", Td = "Einsum", Za = "Elu", cu = "EluGrad", Ja = "Erf", du = "Equal", eo = "Exp", hu = "ExpandDims", to = "Expm1", Rd = "FFT", Gl = "Fill", pu = "FlipLeftRight", no = "Floor", so = "FloorDiv", ro = "FusedBatchNorm", fu = "GatherV2", mu = "GatherNd", gu = "Greater", ao = "GreaterEqual", oo = "Identity", _d = "IFFT", Ed = "Imag", io = "IsFinite", uo = "IsInf", lo = "IsNan", co = "LeakyRelu", yu = "Less", bu = "LessEqual", xu = "LinSpace", ho = "Log", po = "Log1p", wu = "LogicalAnd", Cu = "LogicalNot", Iu = "LogicalOr", oI = "LogicalXor", iI = "LogSoftmax", I_ = "LowerBound", fo = "LRN", Su = "LRNGrad", S_ = "MatrixBandPart", mo = "Max", go = "Maximum", yo = "MaxPool", Hl = "MaxPoolGrad", vu = "MaxPool3D", jl = "MaxPool3DGrad", ql = "MaxPoolWithArgmax", bo = "Mean", xo = "Min", wo = "Minimum", Co = "MirrorPad", Io = "Mod", $u = "Multinomial", So = "Multiply", ku = "Neg", Nu = "NotEqual", Tu = "NonMaxSuppressionV3", Kl = "NonMaxSuppressionV4", Ru = "NonMaxSuppressionV5", _u = "OnesLike", vo = "OneHot", Eu = "Pack", $o = "PadV2", v_ = "Pool", ko = "Pow", No = "Prelu", To = "Prod", lf = "RaggedGather", cf = "RaggedRange", df = "RaggedTensorToTensor", Xl = "Range", Dd = "Real", Ro = "Reciprocal", _o = "Relu", Du = "Reshape", Eo = "ResizeNearestNeighbor", Au = "ResizeNearestNeighborGrad", Do = "ResizeBilinear", Fu = "ResizeBilinearGrad", Ao = "Relu6", Fo = "Reverse", Oo = "Round", Po = "Rsqrt", Ou = "ScatterNd", Pu = "TensorScatterUpdate", Lu = "SearchSorted", zu = "Select", Lo = "Selu", Mu = "Slice", zo = "Sin", Mo = "Sinh", Bo = "Sign", Wo = "Sigmoid", Vo = "Softplus", Uo = "Sqrt", Go = "Sum", Bu = "SpaceToBatchND", Wu = "SplitV", Ho = "Softmax", Ad = "SparseFillEmptyRows", Yl = "SparseReshape", Ql = "SparseSegmentMean", Zl = "SparseSegmentSum", Vu = "SparseToDense", jo = "SquaredDifference", Jl = "Square", Fd = "StaticRegexReplace", Uu = "StridedSlice", ec = "StringNGrams", Od = "StringSplit", Pd = "StringToHashBucketFast", qo = "Sub", Ko = "Tan", Xo = "Tanh", Hr = "Tile", Gu = "TopK", Hu = "Transform", fr = "Transpose", Ld = "Unique", ju = "Unpack", tc = "UnsortedSegmentSum", $_ = "UpperBound", qu = "ZerosLike", jr = "Step", ed = "FromPixels", Ku = "RotateWithOffset", ba = "_FusedMatMul", xa = "FusedConv2D", wa = "FusedDepthwiseConv2D";
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function gs(...n) {
  U().getBool("IS_TEST") || U().getBool("PROD") || console.warn(...n);
}
function k_(...n) {
  U().getBool("IS_TEST") || U().getBool("PROD") || console.log(...n);
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Cl = Iy("kernelRegistry", () => /* @__PURE__ */ new Map()), td = Iy("gradRegistry", () => /* @__PURE__ */ new Map());
function nd(n, e) {
  const t = Sy(n, e);
  return Cl.get(t);
}
function mg(n) {
  return td.get(n);
}
function _p(n) {
  const e = Cl.entries(), t = [];
  for (; ; ) {
    const { done: s, value: r } = e.next();
    if (s) break;
    const [a, o] = r, [i] = a.split("_");
    i === n && t.push(o);
  }
  return t;
}
function nc(n) {
  const { kernelName: e, backendName: t } = n, s = Sy(e, t);
  Cl.has(s) && gs(`The kernel '${e}' for backend '${t}' is already registered`), Cl.set(s, n);
}
function uI(n) {
  const { kernelName: e } = n;
  td.has(e) && U().getBool("DEBUG") && gs(`Overriding the gradient for '${e}'`), td.set(e, n);
}
function N_(n, e) {
  const t = Sy(n, e);
  if (!Cl.has(t)) throw new Error(`The kernel '${n}' for backend '${e}' is not registered`);
  Cl.delete(t);
}
function T_(n) {
  if (!td.has(n)) throw new Error(`The gradient '${n}' for backend is not registered`);
  td.delete(n);
}
function R_(n, e) {
  _p(n).forEach((s) => {
    const r = Object.assign({}, s, { backendName: e });
    nc(r);
  });
}
function Sy(n, e) {
  return `${e}_${n}`;
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function lI(n) {
  return n instanceof Float32Array || n instanceof Int32Array || n instanceof Uint8Array || n instanceof Uint8ClampedArray;
}
var U0 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function vy(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
function __(n) {
  if (Object.prototype.hasOwnProperty.call(n, "__esModule")) return n;
  var e = n.default;
  if (typeof e == "function") {
    var t = function s() {
      return this instanceof s ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    t.prototype = e.prototype;
  } else t = {};
  return Object.defineProperty(t, "__esModule", { value: true }), Object.keys(n).forEach(function(s) {
    var r = Object.getOwnPropertyDescriptor(n, s);
    Object.defineProperty(t, s, r.get ? r : { enumerable: true, get: function() {
      return n[s];
    } });
  }), t;
}
var qm, G0;
function E_() {
  if (G0) return qm;
  G0 = 1, qm = e;
  var n = null;
  try {
    n = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
  } catch {
  }
  function e(T, S, E) {
    this.low = T | 0, this.high = S | 0, this.unsigned = !!E;
  }
  e.prototype.__isLong__, Object.defineProperty(e.prototype, "__isLong__", { value: true });
  function t(T) {
    return (T && T.__isLong__) === true;
  }
  e.isLong = t;
  var s = {}, r = {};
  function a(T, S) {
    var E, P, M;
    return S ? (T >>>= 0, (M = 0 <= T && T < 256) && (P = r[T], P) ? P : (E = i(T, (T | 0) < 0 ? -1 : 0, true), M && (r[T] = E), E)) : (T |= 0, (M = -128 <= T && T < 128) && (P = s[T], P) ? P : (E = i(T, T < 0 ? -1 : 0, false), M && (s[T] = E), E));
  }
  e.fromInt = a;
  function o(T, S) {
    if (isNaN(T)) return S ? b : y;
    if (S) {
      if (T < 0) return b;
      if (T >= f) return k;
    } else {
      if (T <= -9223372036854776e3) return R;
      if (T + 1 >= m) return v;
    }
    return T < 0 ? o(-T, S).neg() : i(T % p | 0, T / p | 0, S);
  }
  e.fromNumber = o;
  function i(T, S, E) {
    return new e(T, S, E);
  }
  e.fromBits = i;
  var u = Math.pow;
  function c(T, S, E) {
    if (T.length === 0) throw Error("empty string");
    if (T === "NaN" || T === "Infinity" || T === "+Infinity" || T === "-Infinity") return y;
    if (typeof S == "number" ? (E = S, S = false) : S = !!S, E = E || 10, E < 2 || 36 < E) throw RangeError("radix");
    var P;
    if ((P = T.indexOf("-")) > 0) throw Error("interior hyphen");
    if (P === 0) return c(T.substring(1), S, E).neg();
    for (var M = o(u(E, 8)), L = y, V = 0; V < T.length; V += 8) {
      var q = Math.min(8, T.length - V), G = parseInt(T.substring(V, V + q), E);
      if (q < 8) {
        var K = o(u(E, q));
        L = L.mul(K).add(o(G));
      } else L = L.mul(M), L = L.add(o(G));
    }
    return L.unsigned = S, L;
  }
  e.fromString = c;
  function l(T, S) {
    return typeof T == "number" ? o(T, S) : typeof T == "string" ? c(T, S) : i(T.low, T.high, typeof S == "boolean" ? S : T.unsigned);
  }
  e.fromValue = l;
  var d = 65536, h = 1 << 24, p = d * d, f = p * p, m = f / 2, g = a(h), y = a(0);
  e.ZERO = y;
  var b = a(0, true);
  e.UZERO = b;
  var x = a(1);
  e.ONE = x;
  var w = a(1, true);
  e.UONE = w;
  var C = a(-1);
  e.NEG_ONE = C;
  var v = i(-1, 2147483647, false);
  e.MAX_VALUE = v;
  var k = i(-1, -1, true);
  e.MAX_UNSIGNED_VALUE = k;
  var R = i(0, -2147483648, false);
  e.MIN_VALUE = R;
  var N = e.prototype;
  return N.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  }, N.toNumber = function() {
    return this.unsigned ? (this.high >>> 0) * p + (this.low >>> 0) : this.high * p + (this.low >>> 0);
  }, N.toString = function(S) {
    if (S = S || 10, S < 2 || 36 < S) throw RangeError("radix");
    if (this.isZero()) return "0";
    if (this.isNegative()) if (this.eq(R)) {
      var E = o(S), P = this.div(E), M = P.mul(E).sub(this);
      return P.toString(S) + M.toInt().toString(S);
    } else return "-" + this.neg().toString(S);
    for (var L = o(u(S, 6), this.unsigned), V = this, q = ""; ; ) {
      var G = V.div(L), K = V.sub(G.mul(L)).toInt() >>> 0, X = K.toString(S);
      if (V = G, V.isZero()) return X + q;
      for (; X.length < 6; ) X = "0" + X;
      q = "" + X + q;
    }
  }, N.getHighBits = function() {
    return this.high;
  }, N.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  }, N.getLowBits = function() {
    return this.low;
  }, N.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  }, N.getNumBitsAbs = function() {
    if (this.isNegative()) return this.eq(R) ? 64 : this.neg().getNumBitsAbs();
    for (var S = this.high != 0 ? this.high : this.low, E = 31; E > 0 && (S & 1 << E) == 0; E--) ;
    return this.high != 0 ? E + 33 : E + 1;
  }, N.isZero = function() {
    return this.high === 0 && this.low === 0;
  }, N.eqz = N.isZero, N.isNegative = function() {
    return !this.unsigned && this.high < 0;
  }, N.isPositive = function() {
    return this.unsigned || this.high >= 0;
  }, N.isOdd = function() {
    return (this.low & 1) === 1;
  }, N.isEven = function() {
    return (this.low & 1) === 0;
  }, N.equals = function(S) {
    return t(S) || (S = l(S)), this.unsigned !== S.unsigned && this.high >>> 31 === 1 && S.high >>> 31 === 1 ? false : this.high === S.high && this.low === S.low;
  }, N.eq = N.equals, N.notEquals = function(S) {
    return !this.eq(S);
  }, N.neq = N.notEquals, N.ne = N.notEquals, N.lessThan = function(S) {
    return this.comp(S) < 0;
  }, N.lt = N.lessThan, N.lessThanOrEqual = function(S) {
    return this.comp(S) <= 0;
  }, N.lte = N.lessThanOrEqual, N.le = N.lessThanOrEqual, N.greaterThan = function(S) {
    return this.comp(S) > 0;
  }, N.gt = N.greaterThan, N.greaterThanOrEqual = function(S) {
    return this.comp(S) >= 0;
  }, N.gte = N.greaterThanOrEqual, N.ge = N.greaterThanOrEqual, N.compare = function(S) {
    if (t(S) || (S = l(S)), this.eq(S)) return 0;
    var E = this.isNegative(), P = S.isNegative();
    return E && !P ? -1 : !E && P ? 1 : this.unsigned ? S.high >>> 0 > this.high >>> 0 || S.high === this.high && S.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(S).isNegative() ? -1 : 1;
  }, N.comp = N.compare, N.negate = function() {
    return !this.unsigned && this.eq(R) ? R : this.not().add(x);
  }, N.neg = N.negate, N.add = function(S) {
    t(S) || (S = l(S));
    var E = this.high >>> 16, P = this.high & 65535, M = this.low >>> 16, L = this.low & 65535, V = S.high >>> 16, q = S.high & 65535, G = S.low >>> 16, K = S.low & 65535, X = 0, Z = 0, ee = 0, J = 0;
    return J += L + K, ee += J >>> 16, J &= 65535, ee += M + G, Z += ee >>> 16, ee &= 65535, Z += P + q, X += Z >>> 16, Z &= 65535, X += E + V, X &= 65535, i(ee << 16 | J, X << 16 | Z, this.unsigned);
  }, N.subtract = function(S) {
    return t(S) || (S = l(S)), this.add(S.neg());
  }, N.sub = N.subtract, N.multiply = function(S) {
    if (this.isZero()) return y;
    if (t(S) || (S = l(S)), n) {
      var E = n.mul(this.low, this.high, S.low, S.high);
      return i(E, n.get_high(), this.unsigned);
    }
    if (S.isZero()) return y;
    if (this.eq(R)) return S.isOdd() ? R : y;
    if (S.eq(R)) return this.isOdd() ? R : y;
    if (this.isNegative()) return S.isNegative() ? this.neg().mul(S.neg()) : this.neg().mul(S).neg();
    if (S.isNegative()) return this.mul(S.neg()).neg();
    if (this.lt(g) && S.lt(g)) return o(this.toNumber() * S.toNumber(), this.unsigned);
    var P = this.high >>> 16, M = this.high & 65535, L = this.low >>> 16, V = this.low & 65535, q = S.high >>> 16, G = S.high & 65535, K = S.low >>> 16, X = S.low & 65535, Z = 0, ee = 0, J = 0, re = 0;
    return re += V * X, J += re >>> 16, re &= 65535, J += L * X, ee += J >>> 16, J &= 65535, J += V * K, ee += J >>> 16, J &= 65535, ee += M * X, Z += ee >>> 16, ee &= 65535, ee += L * K, Z += ee >>> 16, ee &= 65535, ee += V * G, Z += ee >>> 16, ee &= 65535, Z += P * X + M * K + L * G + V * q, Z &= 65535, i(J << 16 | re, Z << 16 | ee, this.unsigned);
  }, N.mul = N.multiply, N.divide = function(S) {
    if (t(S) || (S = l(S)), S.isZero()) throw Error("division by zero");
    if (n) {
      if (!this.unsigned && this.high === -2147483648 && S.low === -1 && S.high === -1) return this;
      var E = (this.unsigned ? n.div_u : n.div_s)(this.low, this.high, S.low, S.high);
      return i(E, n.get_high(), this.unsigned);
    }
    if (this.isZero()) return this.unsigned ? b : y;
    var P, M, L;
    if (this.unsigned) {
      if (S.unsigned || (S = S.toUnsigned()), S.gt(this)) return b;
      if (S.gt(this.shru(1))) return w;
      L = b;
    } else {
      if (this.eq(R)) {
        if (S.eq(x) || S.eq(C)) return R;
        if (S.eq(R)) return x;
        var V = this.shr(1);
        return P = V.div(S).shl(1), P.eq(y) ? S.isNegative() ? x : C : (M = this.sub(S.mul(P)), L = P.add(M.div(S)), L);
      } else if (S.eq(R)) return this.unsigned ? b : y;
      if (this.isNegative()) return S.isNegative() ? this.neg().div(S.neg()) : this.neg().div(S).neg();
      if (S.isNegative()) return this.div(S.neg()).neg();
      L = y;
    }
    for (M = this; M.gte(S); ) {
      P = Math.max(1, Math.floor(M.toNumber() / S.toNumber()));
      for (var q = Math.ceil(Math.log(P) / Math.LN2), G = q <= 48 ? 1 : u(2, q - 48), K = o(P), X = K.mul(S); X.isNegative() || X.gt(M); ) P -= G, K = o(P, this.unsigned), X = K.mul(S);
      K.isZero() && (K = x), L = L.add(K), M = M.sub(X);
    }
    return L;
  }, N.div = N.divide, N.modulo = function(S) {
    if (t(S) || (S = l(S)), n) {
      var E = (this.unsigned ? n.rem_u : n.rem_s)(this.low, this.high, S.low, S.high);
      return i(E, n.get_high(), this.unsigned);
    }
    return this.sub(this.div(S).mul(S));
  }, N.mod = N.modulo, N.rem = N.modulo, N.not = function() {
    return i(~this.low, ~this.high, this.unsigned);
  }, N.and = function(S) {
    return t(S) || (S = l(S)), i(this.low & S.low, this.high & S.high, this.unsigned);
  }, N.or = function(S) {
    return t(S) || (S = l(S)), i(this.low | S.low, this.high | S.high, this.unsigned);
  }, N.xor = function(S) {
    return t(S) || (S = l(S)), i(this.low ^ S.low, this.high ^ S.high, this.unsigned);
  }, N.shiftLeft = function(S) {
    return t(S) && (S = S.toInt()), (S &= 63) === 0 ? this : S < 32 ? i(this.low << S, this.high << S | this.low >>> 32 - S, this.unsigned) : i(0, this.low << S - 32, this.unsigned);
  }, N.shl = N.shiftLeft, N.shiftRight = function(S) {
    return t(S) && (S = S.toInt()), (S &= 63) === 0 ? this : S < 32 ? i(this.low >>> S | this.high << 32 - S, this.high >> S, this.unsigned) : i(this.high >> S - 32, this.high >= 0 ? 0 : -1, this.unsigned);
  }, N.shr = N.shiftRight, N.shiftRightUnsigned = function(S) {
    if (t(S) && (S = S.toInt()), S &= 63, S === 0) return this;
    var E = this.high;
    if (S < 32) {
      var P = this.low;
      return i(P >>> S | E << 32 - S, E >>> S, this.unsigned);
    } else return S === 32 ? i(E, 0, this.unsigned) : i(E >>> S - 32, 0, this.unsigned);
  }, N.shru = N.shiftRightUnsigned, N.shr_u = N.shiftRightUnsigned, N.toSigned = function() {
    return this.unsigned ? i(this.low, this.high, false) : this;
  }, N.toUnsigned = function() {
    return this.unsigned ? this : i(this.low, this.high, true);
  }, N.toBytes = function(S) {
    return S ? this.toBytesLE() : this.toBytesBE();
  }, N.toBytesLE = function() {
    var S = this.high, E = this.low;
    return [E & 255, E >>> 8 & 255, E >>> 16 & 255, E >>> 24, S & 255, S >>> 8 & 255, S >>> 16 & 255, S >>> 24];
  }, N.toBytesBE = function() {
    var S = this.high, E = this.low;
    return [S >>> 24, S >>> 16 & 255, S >>> 8 & 255, S & 255, E >>> 24, E >>> 16 & 255, E >>> 8 & 255, E & 255];
  }, e.fromBytes = function(S, E, P) {
    return P ? e.fromBytesLE(S, E) : e.fromBytesBE(S, E);
  }, e.fromBytesLE = function(S, E) {
    return new e(S[0] | S[1] << 8 | S[2] << 16 | S[3] << 24, S[4] | S[5] << 8 | S[6] << 16 | S[7] << 24, E);
  }, e.fromBytesBE = function(S, E) {
    return new e(S[4] << 24 | S[5] << 16 | S[6] << 8 | S[7], S[0] << 24 | S[1] << 16 | S[2] << 8 | S[3], E);
  }, qm;
}
var cI = E_();
const dI = vy(cI), D_ = yy({ __proto__: null, default: dI }, [cI]);
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const fi = dI || D_;
function zd(n) {
  return fi.fromString(n, true, 16);
}
const hI = zd("c3a5c85c97cb3127"), di = zd("b492b66fbe98f273"), Tn = zd("9ae16a3b2f90404f");
function gg(n) {
  return n.xor(n.shru(47));
}
function pI(n, e, t) {
  const s = n.slice(e, e + t);
  return fi.fromBytes(Array.from(s), true, true);
}
function It(n, e) {
  return pI(n, e, 8);
}
function H0(n, e) {
  return pI(n, e, 4);
}
function rn(n, e) {
  return e === 0 ? n : n.shru(e).or(n.shl(64 - e));
}
function ha(n, e, t = zd("9ddfea08eb382d69")) {
  let s = n.xor(e).mul(t);
  s = s.xor(s.shru(47));
  let r = e.xor(s).mul(t);
  return r = r.xor(r.shru(47)), r = r.mul(t), r;
}
function A_(n, e, t, s, r, a) {
  r = r.add(n), a = rn(a.add(r).add(s), 21);
  const o = r;
  return r = r.add(e), r = r.add(t), a = a.add(rn(r, 44)), [r.add(s), a.add(o)];
}
function Xh(n, e, t, s) {
  return A_(It(n, e), It(n, e + 8), It(n, e + 16), It(n, e + 24), t, s);
}
function F_(n, e = n.length) {
  if (e >= 8) {
    const t = Tn.add(e * 2), s = It(n, 0).add(Tn), r = It(n, e - 8), a = rn(r, 37).mul(t).add(s), o = rn(s, 25).add(r).mul(t);
    return ha(a, o, t);
  }
  if (e >= 4) {
    const t = Tn.add(e * 2), s = H0(n, 0);
    return ha(s.shl(3).add(e), H0(n, e - 4), t);
  }
  if (e > 0) {
    const t = n[0], s = n[e >> 1], r = n[e - 1], a = t + (s << 8), o = e + (r << 2);
    return gg(Tn.mul(a).xor(hI.mul(o))).mul(Tn);
  }
  return Tn;
}
function O_(n, e = n.length) {
  const t = Tn.add(e * 2), s = It(n, 0).mul(di), r = It(n, 8), a = It(n, e - 8).mul(t), o = It(n, e - 16).mul(Tn);
  return ha(rn(s.add(r), 43).add(rn(a, 30)).add(o), s.add(rn(r.add(Tn), 18)).add(a), t);
}
function P_(n, e = n.length) {
  const t = Tn.add(e * 2), s = It(n, 0).mul(Tn), r = It(n, 8), a = It(n, e - 8).mul(t), o = It(n, e - 16).mul(Tn), i = rn(s.add(r), 43).add(rn(a, 30)).add(o), u = ha(i, s.add(rn(r.add(Tn), 18)).add(a), t), c = It(n, 16).mul(t), l = It(n, 24), d = i.add(It(n, e - 32)).mul(t), h = u.add(It(n, e - 24)).mul(t);
  return ha(rn(c.add(l), 43).add(rn(d, 30)).add(h), c.add(rn(l.add(s), 18)).add(d), t);
}
function fI(n, e = n.length) {
  const t = fi.fromNumber(81, true);
  if (e <= 32) return e <= 16 ? F_(n, e) : O_(n, e);
  if (e <= 64) return P_(n, e);
  let s = t, r = t.mul(di).add(113), a = gg(r.mul(Tn).add(113)).mul(Tn), o = [fi.UZERO, fi.UZERO], i = [fi.UZERO, fi.UZERO];
  s = s.mul(Tn).add(It(n, 0));
  let u = 0;
  const c = (e - 1 >> 6) * 64, l = c + (e - 1 & 63) - 63;
  do
    s = rn(s.add(r).add(o[0]).add(It(n, u + 8)), 37).mul(di), r = rn(r.add(o[1]).add(It(n, u + 48)), 42).mul(di), s = s.xor(i[1]), r = r.add(o[0]).add(It(n, u + 40)), a = rn(a.add(i[0]), 33).mul(di), o = Xh(n, u, o[1].mul(di), s.add(i[0])), i = Xh(n, u + 32, a.add(i[1]), r.add(It(n, u + 16))), [a, s] = [s, a], u += 64;
  while (u !== c);
  const d = di.add(a.and(255).shl(1));
  return u = l, i[0] = i[0].add(e - 1 & 63), o[0] = o[0].add(i[0]), i[0] = i[0].add(o[0]), s = rn(s.add(r).add(o[0]).add(It(n, u + 8)), 37).mul(d), r = rn(r.add(o[1]).add(It(n, u + 48)), 42).mul(d), s = s.xor(i[1].mul(9)), r = r.add(o[0].mul(9).add(It(n, u + 40))), a = rn(a.add(i[0]), 33).mul(d), o = Xh(n, u, o[1].mul(d), s.add(i[0])), i = Xh(n, u + 32, a.add(i[1]), r.add(It(n, u + 16))), [a, s] = [s, a], ha(ha(o[0], i[0], d).add(gg(r).mul(hI)).add(a), ha(o[1], i[1], d).add(s), d);
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function qr(n, e) {
  return e === "string" ? qs(n) : Yo([n], e);
}
function L_(n, e) {
  return n instanceof Float32Array && e === "float32" || n instanceof Int32Array && e === "int32" || n instanceof Uint8Array && e === "bool";
}
function Yo(n, e) {
  if (e === "string") throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(n) && (n = Os(n)), U().getBool("DEBUG") && ZC(n, e), L_(n, e)) return n;
  if (e == null || e === "float32" || e === "complex64") return new Float32Array(n);
  if (e === "int32") return new Int32Array(n);
  if (e === "bool") {
    const t = new Uint8Array(n.length);
    for (let s = 0; s < t.length; ++s) Math.round(n[s]) !== 0 && (t[s] = 1);
    return t;
  } else throw new Error(`Unknown data type ${e}`);
}
function Xt() {
  return U().platform.now();
}
function $y(n, e) {
  return U().platform.fetch(n, e);
}
function qs(n, e = "utf-8") {
  return e = e || "utf-8", U().platform.encode(n, e);
}
function Fs(n, e = "utf-8") {
  return e = e || "utf-8", U().platform.decode(n, e);
}
function Yt(n) {
  return U().platform.isTypedArray != null ? U().platform.isTypedArray(n) : lI(n);
}
function Os(n, e = [], t = false) {
  if (e == null && (e = []), typeof n == "boolean" || typeof n == "number" || typeof n == "string" || Pr(n) || n == null || Yt(n) && t) e.push(n);
  else if (Array.isArray(n) || Yt(n)) for (let s = 0; s < n.length; ++s) Os(n[s], e, t);
  else {
    let s = -1;
    for (const r of Object.keys(n)) /^([1-9]+[0-9]*|0)$/.test(r) && (s = Math.max(s, Number(r)));
    for (let r = 0; r <= s; r++) Os(n[r], e, t);
  }
  return e;
}
const z_ = Object.freeze(Object.defineProperty({ __proto__: null, arraysEqual: Be, arraysEqualWithNull: QC, assert: $, assertNonNegativeIntegerDimensions: ls, assertNonNull: Ki, assertShapesMatch: nn, bytesFromStringArray: eI, bytesPerElement: Ti, checkConversionForErrors: ZC, clamp: ga, computeStrides: me, convertBackendValuesAndArrayBuffer: Xc, createScalarValue: qr, createShuffledIndices: g_, decodeString: Fs, distSquared: f_, encodeString: qs, fetch: $y, fingerPrint64: fI, flatten: Os, getArrayFromDType: Dt, getTypedArrayFromDType: Ht, hasEncodingLoss: of, hexToLong: zd, indexToLoc: Xi, inferDtype: Vr, inferFromImplicitShape: Id, isBoolean: tI, isFunction: ya, isInt: Ni, isNumber: Tp, isPromise: Pr, isScalarShape: pg, isString: Hs, isTypedArray: Yt, isValidDtype: JC, locToIndex: js, makeOnesTypedArray: uf, makeZerosNestedTypedArray: wy, makeZerosTypedArray: un, nearestDivisor: Rp, nearestLargerEven: af, now: Xt, parseAxisParam: Ee, randUniform: p_, repeatedTry: fg, rightPad: Ii, shuffle: by, shuffleCombo: h_, sizeFromShape: A, sizeToSquarishShape: Np, squeezeShape: Wr, sum: xy, swap: Dr, tanh: m_, toNestedArray: Cs, toTypedArray: Yo }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class M_ {
  constructor(e, t) {
    this.backendTimer = e, this.logger = t, t == null && (this.logger = new W_());
  }
  profileKernel(e, t, s) {
    let r;
    const a = () => {
      r = s();
    };
    let o;
    const i = Xt();
    if (this.backendTimer.timerAvailable()) o = this.backendTimer.time(a);
    else {
      a();
      for (const c of r) c.dataSync();
      o = Promise.resolve({ kernelMs: Xt() - i });
    }
    if (U().getBool("CHECK_COMPUTATION_FOR_ERRORS")) for (let c = 0; c < r.length; c++) {
      const l = r[c];
      l.data().then((d) => {
        B_(d, l.dtype, e);
      });
    }
    return { kernelName: e, outputs: r, inputs: t, timeMs: o.then((c) => c.kernelMs), extraInfo: o.then((c) => c.getExtraProfileInfo != null ? c.getExtraProfileInfo() : "") };
  }
  logKernelProfile(e) {
    const { kernelName: t, outputs: s, timeMs: r, inputs: a, extraInfo: o } = e;
    s.forEach((i) => {
      Promise.all([i.data(), r, o]).then((u) => {
        this.logger.logKernelProfile(t, i, u[0], u[1], a, u[2]);
      });
    });
  }
}
function B_(n, e, t) {
  if (e !== "float32") return false;
  for (let s = 0; s < n.length; s++) {
    const r = n[s];
    if (isNaN(r) || !isFinite(r)) return console.warn(`Found ${r} in the result of '${t}'`), true;
  }
  return false;
}
class W_ {
  logKernelProfile(e, t, s, r, a, o) {
    const i = typeof r == "number" ? Ii(`${r}ms`, 9) : r.error, u = Ii(e, 25), c = t.rank, l = t.size, d = Ii(t.shape.toString(), 14);
    let h = "";
    for (const p in a) {
      const f = a[p];
      if (f != null) {
        const m = f.shape || t.shape, g = m.length;
        h += `${p}: ${g}D ${g > 0 ? m : ""} `;
      }
    }
    console.log(`%c${u}	%c${i}	%c${c}D ${d}	%c${l}	%c${h}	%c${o}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function V_(n, e, t) {
  const s = {}, r = {};
  for (let u = 0; u < e.length; u++) s[e[u].id] = true;
  for (let u = 0; u < n.length; u++) {
    const c = n[u], l = c.inputs;
    for (const d in l) {
      const h = l[d];
      let p = false;
      for (let f = 0; f < e.length; f++) if (s[h.id]) {
        c.outputs.forEach((m) => s[m.id] = true), p = true, r[c.id] = true;
        break;
      }
      if (p) break;
    }
  }
  const a = {};
  a[t.id] = true;
  const o = {};
  for (let u = n.length - 1; u >= 0; u--) {
    const c = n[u], l = c.inputs;
    for (let d = 0; d < c.outputs.length; d++) if (a[c.outputs[d].id]) {
      for (const h in l) a[l[h].id] = true, o[c.id] = true;
      break;
    }
  }
  const i = [];
  for (let u = 0; u < n.length; u++) {
    const c = n[u];
    if (r[c.id] && o[c.id]) {
      const l = {};
      for (const h in c.inputs) {
        const p = c.inputs[h];
        s[p.id] && (l[h] = p);
      }
      const d = Object.assign({}, c);
      d.inputs = l, d.outputs = c.outputs, i.push(d);
    }
  }
  return i;
}
function U_(n, e, t, s) {
  for (let r = e.length - 1; r >= 0; r--) {
    const a = e[r], o = [];
    if (a.outputs.forEach((u) => {
      const c = n[u.id];
      c != null ? o.push(c) : o.push(null);
    }), a.gradient == null) throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);
    const i = a.gradient(o);
    for (const u in a.inputs) {
      if (!(u in i)) throw new Error(`Cannot backprop through input ${u}. Available gradients found: ${Object.keys(i)}.`);
      const c = t(() => i[u]());
      if (c.dtype !== "float32") throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${u} must have 'float32' dtype, but has '${c.dtype}'`);
      const l = a.inputs[u];
      if (!Be(c.shape, l.shape)) throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${u}' has shape '${c.shape}', which does not match the shape of the input '${l.shape}'`);
      if (n[l.id] == null) n[l.id] = c;
      else {
        const d = n[l.id];
        n[l.id] = s(d, c), d.dispose();
      }
    }
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const j0 = 20, Ac = 3, Km = 7;
function G_(n, e, t, s) {
  const r = me(e), a = H_(n, e, t, r), o = e.length, i = cp(n, e, t, r, a), u = ["Tensor"];
  return s && (u.push(`  dtype: ${t}`), u.push(`  rank: ${o}`), u.push(`  shape: [${e}]`), u.push("  values:")), u.push(i.map((c) => "    " + c).join(`
`)), u.join(`
`);
}
function H_(n, e, t, s) {
  const r = A(e), a = s[s.length - 1], o = new Array(a).fill(0), i = e.length, u = t === "complex64" ? Mc(n) : n;
  if (i > 1) for (let c = 0; c < r / a; c++) {
    const l = c * a;
    for (let d = 0; d < a; d++) o[d] = Math.max(o[d], zc(u[l + d], 0, t).length);
  }
  return o;
}
function zc(n, e, t) {
  let s;
  return Array.isArray(n) ? s = `${parseFloat(n[0].toFixed(Km))} + ${parseFloat(n[1].toFixed(Km))}j` : Hs(n) ? s = `'${n}'` : t === "bool" ? s = mI(n) : s = parseFloat(n.toFixed(Km)).toString(), Ii(s, e);
}
function mI(n) {
  return n === 0 ? "false" : "true";
}
function cp(n, e, t, s, r, a = true) {
  const o = t === "complex64" ? 2 : 1, i = e[0], u = e.length;
  if (u === 0) {
    if (t === "complex64") {
      const m = Mc(n);
      return [zc(m[0], 0, t)];
    }
    return t === "bool" ? [mI(n[0])] : [n[0].toString()];
  }
  if (u === 1) {
    if (i > j0) {
      const g = Ac * o;
      let y = Array.from(n.slice(0, g)), b = Array.from(n.slice((i - Ac) * o, i * o));
      return t === "complex64" && (y = Mc(y), b = Mc(b)), ["[" + y.map((x, w) => zc(x, r[w], t)).join(", ") + ", ..., " + b.map((x, w) => zc(x, r[i - Ac + w], t)).join(", ") + "]"];
    }
    return ["[" + (t === "complex64" ? Mc(n) : Array.from(n)).map((g, y) => zc(g, r[y], t)).join(", ") + "]"];
  }
  const c = e.slice(1), l = s.slice(1), d = s[0] * o, h = [];
  if (i > j0) {
    for (let m = 0; m < Ac; m++) {
      const g = m * d, y = g + d;
      h.push(...cp(n.slice(g, y), c, t, l, r, false));
    }
    h.push("...");
    for (let m = i - Ac; m < i; m++) {
      const g = m * d, y = g + d;
      h.push(...cp(n.slice(g, y), c, t, l, r, m === i - 1));
    }
  } else for (let m = 0; m < i; m++) {
    const g = m * d, y = g + d;
    h.push(...cp(n.slice(g, y), c, t, l, r, m === i - 1));
  }
  const p = u === 2 ? "," : "";
  h[0] = "[" + (i > 0 ? h[0] + p : "");
  for (let m = 1; m < h.length - 1; m++) h[m] = " " + h[m] + p;
  let f = `,
`;
  for (let m = 2; m < u; m++) f += `
`;
  return h[h.length - 1] = " " + h[h.length - 1] + "]" + (a ? "" : f), h;
}
function Mc(n) {
  const e = [];
  for (let t = 0; t < n.length; t += 2) e.push([n[t], n[t + 1]]);
  return e;
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Gt {
  constructor(e, t, s) {
    if (this.dtype = t, this.shape = e.slice(), this.size = A(e), s != null) {
      const r = s.length;
      $(r === this.size, () => `Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (t === "complex64") throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = s || Dt(t, this.size), this.strides = me(e);
  }
  set(e, ...t) {
    t.length === 0 && (t = [0]), $(t.length === this.rank, () => `The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);
    const s = this.locToIndex(t);
    this.values[s] = e;
  }
  get(...e) {
    e.length === 0 && (e = [0]);
    let t = 0;
    for (const r of e) {
      if (r < 0 || r >= this.shape[t]) {
        const a = `Requested out of range element at ${e}.   Buffer shape=${this.shape}`;
        throw new Error(a);
      }
      t++;
    }
    let s = e[e.length - 1];
    for (let r = 0; r < e.length - 1; ++r) s += this.strides[r] * e[r];
    return this.values[s];
  }
  locToIndex(e) {
    if (this.rank === 0) return 0;
    if (this.rank === 1) return e[0];
    let t = e[e.length - 1];
    for (let s = 0; s < e.length - 1; ++s) t += this.strides[s] * e[s];
    return t;
  }
  indexToLoc(e) {
    if (this.rank === 0) return [];
    if (this.rank === 1) return [e];
    const t = new Array(this.shape.length);
    for (let s = 0; s < t.length - 1; ++s) t[s] = Math.floor(e / this.strides[s]), e -= t[s] * this.strides[s];
    return t[t.length - 1] = e, t;
  }
  get rank() {
    return this.shape.length;
  }
  toTensor() {
    return Us().makeTensor(this.values, this.shape, this.dtype);
  }
}
let Us = null, gl = null;
function j_(n) {
  Us = n;
}
function q_(n) {
  gl = n;
}
class tt {
  constructor(e, t, s, r) {
    this.kept = false, this.isDisposedInternal = false, this.shape = e.slice(), this.dtype = t || "float32", this.size = A(e), this.strides = me(e), this.dataId = s, this.id = r, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  async buffer() {
    const e = await this.data();
    return gl.buffer(this.shape, this.dtype, e);
  }
  bufferSync() {
    return gl.buffer(this.shape, this.dtype, this.dataSync());
  }
  async array() {
    const e = await this.data();
    return Cs(this.shape, e, this.dtype === "complex64");
  }
  arraySync() {
    return Cs(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  async data() {
    this.throwIfDisposed();
    const e = Us().read(this.dataId);
    if (this.dtype === "string") {
      const t = await e;
      try {
        return t.map((s) => Fs(s));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return e;
  }
  dataToGPU(e) {
    return this.throwIfDisposed(), Us().readToGPU(this.dataId, e);
  }
  dataSync() {
    this.throwIfDisposed();
    const e = Us().readSync(this.dataId);
    if (this.dtype === "string") try {
      return e.map((t) => Fs(t));
    } catch {
      throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
    }
    return e;
  }
  async bytes() {
    this.throwIfDisposed();
    const e = await Us().read(this.dataId);
    return this.dtype === "string" ? e : new Uint8Array(e.buffer);
  }
  dispose() {
    this.isDisposed || (this.kerasMask && this.kerasMask.dispose(), Us().disposeTensor(this), this.isDisposedInternal = true);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed) throw new Error("Tensor is disposed.");
  }
  print(e = false) {
    return gl.print(this, e);
  }
  clone() {
    return this.throwIfDisposed(), gl.clone(this);
  }
  toString(e = false) {
    const t = this.dataSync();
    return G_(t, this.shape, this.dtype, e);
  }
  cast(e) {
    return this.throwIfDisposed(), gl.cast(this, e);
  }
  variable(e = true, t, s) {
    return this.throwIfDisposed(), Us().makeVariable(this, e, t, s);
  }
}
Object.defineProperty(tt, Symbol.hasInstance, { value: (n) => !!n && n.data != null && n.dataSync != null && n.throwIfDisposed != null });
function Y() {
  return Iy("Tensor", () => tt);
}
Y();
class sd extends tt {
  constructor(e, t, s, r) {
    super(e.shape, e.dtype, e.dataId, r), this.trainable = t, this.name = s;
  }
  assign(e) {
    if (e.dtype !== this.dtype) throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);
    if (!Be(e.shape, this.shape)) throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);
    Us().disposeTensor(this), this.dataId = e.dataId, Us().incRef(this, null);
  }
  dispose() {
    Us().disposeVariable(this), this.isDisposedInternal = true;
  }
}
Object.defineProperty(sd, Symbol.hasInstance, { value: (n) => n instanceof tt && n.assign != null && n.assign instanceof Function });
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var yg;
(function(n) {
  n.R0 = "R0", n.R1 = "R1", n.R2 = "R2", n.R3 = "R3", n.R4 = "R4", n.R5 = "R5", n.R6 = "R6";
})(yg || (yg = {}));
var bg;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "int32", n.complex64 = "complex64";
})(bg || (bg = {}));
var xg;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "bool", n.complex64 = "complex64";
})(xg || (xg = {}));
var wg;
(function(n) {
  n.float32 = "float32", n.int32 = "float32", n.bool = "float32", n.complex64 = "complex64";
})(wg || (wg = {}));
var Cg;
(function(n) {
  n.float32 = "complex64", n.int32 = "complex64", n.bool = "complex64", n.complex64 = "complex64";
})(Cg || (Cg = {}));
const K_ = { float32: wg, int32: bg, bool: xg, complex64: Cg };
function tn(n, e) {
  if (n === "string" || e === "string") {
    if (n === "string" && e === "string") return "string";
    throw new Error(`Can not upcast ${n} with ${e}`);
  }
  return K_[n][e];
}
function Md(n) {
  return tn(n, "int32");
}
function gI(n) {
  return n != null && typeof n == "object" && "texture" in n && n.texture instanceof WebGLTexture;
}
function yI(n) {
  return typeof GPUBuffer < "u" && n != null && typeof n == "object" && "buffer" in n && n.buffer instanceof GPUBuffer;
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ft(n, e) {
  if (n.dtype === e.dtype) return [n, e];
  const t = tn(n.dtype, e.dtype);
  return [n.cast(t), e.cast(t)];
}
function bI(n, e) {
  $(n.dtype === e.dtype, () => `The dtypes of the first(${n.dtype}) and second(${e.dtype}) input must match`);
}
function hf(n, e) {
  return e.some((t) => t.id === n.id);
}
function Lr(n) {
  const e = [];
  return xI(n, e, /* @__PURE__ */ new Set()), e;
}
function xI(n, e, t) {
  if (n == null) return;
  if (n instanceof tt) {
    e.push(n);
    return;
  }
  if (!X_(n)) return;
  const s = n;
  for (const r in s) {
    const a = s[r];
    t.has(a) || (t.add(a), xI(a, e, t));
  }
}
function X_(n) {
  return Array.isArray(n) || typeof n == "object";
}
const Y_ = Object.freeze(Object.defineProperty({ __proto__: null, assertTypesMatch: bI, getTensorsInContainer: Lr, isTensorInList: hf, makeTypesMatch: Ft }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Xm(n) {
  return n.kernelName != null;
}
class q0 {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = false, this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null, get kernelNames() {
      return Array.from(new Set(this.kernels.map((e) => e.name)));
    } };
  }
  dispose() {
    for (const e in this.registeredVariables) this.registeredVariables[e].dispose();
  }
}
class Il {
  constructor(e) {
    this.ENV = e, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new q0();
  }
  async ready() {
    if (this.pendingBackendInit != null) return this.pendingBackendInit.then(() => {
    });
    if (this.backendInstance != null) return;
    const e = this.getSortedBackends();
    for (let t = 0; t < e.length; t++) {
      const s = e[t];
      if (await this.initializeBackend(s).success) {
        await this.setBackend(s);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null) throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      const { name: e, asyncInit: t } = this.initializeBackendsAndReturnBest();
      if (t) throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(e);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(e) {
    if (!(e in this.registry)) if (e in this.registryFactory) {
      const { asyncInit: t } = this.initializeBackend(e);
      if (t) return null;
    } else return null;
    return this.registry[e];
  }
  findBackendFactory(e) {
    return e in this.registryFactory ? this.registryFactory[e].factory : null;
  }
  registerBackend(e, t, s = 1) {
    return e in this.registryFactory ? (gs(`${e} backend was already registered. Reusing existing backend factory.`), false) : (this.registryFactory[e] = { factory: t, priority: s }, true);
  }
  async setBackend(e) {
    if (this.registryFactory[e] == null) throw new Error(`Backend name '${e}' not found in registry`);
    if (this.backendName = e, this.registry[e] == null) {
      this.backendInstance = null;
      const { success: t, asyncInit: s } = this.initializeBackend(e);
      if (!(s ? await t : t)) return false;
    }
    return this.backendInstance = this.registry[e], this.setupRegisteredKernels(), this.profiler = new M_(this.backendInstance), true;
  }
  setupRegisteredKernels() {
    _p(this.backendName).forEach((t) => {
      t.setupFunc != null && t.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(e) {
    _p(e).forEach((s) => {
      s.disposeFunc != null && s.disposeFunc(this.registry[e]);
    });
  }
  initializeBackend(e) {
    const t = this.registryFactory[e];
    if (t == null) throw new Error(`Cannot initialize backend ${e}, no registration found.`);
    try {
      const s = t.factory();
      if (s && !(s instanceof Pl) && typeof s.then == "function") {
        const r = ++this.pendingBackendInitId, a = s.then((o) => r < this.pendingBackendInitId ? false : (this.registry[e] = o, this.pendingBackendInit = null, true)).catch((o) => (r < this.pendingBackendInitId || (this.pendingBackendInit = null, gs(`Initialization of backend ${e} failed`), gs(o.stack || o.message)), false));
        return this.pendingBackendInit = a, { success: a, asyncInit: true };
      } else return this.registry[e] = s, { success: true, asyncInit: false };
    } catch (s) {
      return gs(`Initialization of backend ${e} failed`), gs(s.stack || s.message), { success: false, asyncInit: false };
    }
  }
  removeBackend(e) {
    if (!(e in this.registryFactory)) throw new Error(`${e} backend not found in registry`);
    this.backendName === e && this.pendingBackendInit != null && this.pendingBackendInitId++, e in this.registry && (this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e]), delete this.registryFactory[e], this.backendName === e && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0) throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((e, t) => this.registryFactory[t].priority - this.registryFactory[e].priority);
  }
  initializeBackendsAndReturnBest() {
    const e = this.getSortedBackends();
    for (let t = 0; t < e.length; t++) {
      const s = e[t], { success: r, asyncInit: a } = this.initializeBackend(s);
      if (a || r) return { name: s, asyncInit: a };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(e, t) {
    const s = this.state.tensorInfo.get(t), r = s.backend, a = this.readSync(t), o = r.refCount(t);
    r.disposeData(t, true), s.backend = e, e.move(t, a, s.shape, s.dtype, o), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(e, t) {
    let s = null;
    if (t == null) {
      if (typeof e != "function") throw new Error("Please provide a function to tidy()");
      t = e;
    } else {
      if (typeof e != "string" && !(e instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof t != "function") throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      s = e;
    }
    let r;
    return this.scopedRun(() => this.startScope(s), () => this.endScope(r), () => (r = t(), r instanceof Promise && console.error("Cannot return a Promise inside of tidy."), r));
  }
  scopedRun(e, t, s) {
    e();
    try {
      const r = s();
      return t(), r;
    } catch (r) {
      throw t(), r;
    }
  }
  nextTensorId() {
    return Il.nextTensorId++;
  }
  nextVariableId() {
    return Il.nextVariableId++;
  }
  clone(e) {
    const t = F.runKernel(oo, { x: e }), s = { x: e }, r = (o) => ({ x: () => {
      const i = "float32", u = { x: o }, c = { dtype: i };
      return F.runKernel(Wa, u, c);
    } }), a = [];
    return this.addTapeNode(this.state.activeScope.name, s, [t], r, a, {}), t;
  }
  runKernel(e, t, s) {
    if (this.backendName == null && this.backend, !(nd(e, this.backendName) != null)) throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: e, inputs: t, attrs: s });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(e, t, s) {
    const r = this.backend.numDataIds();
    let a = 0;
    s.forEach((u) => {
      a += u.dtype === "complex64" ? 3 : 1;
    });
    const o = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i = r - t - a - o;
    if (i > 0) throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`);
  }
  runKernelFunc(e) {
    let t, s = [];
    const r = this.isTapeOn(), a = this.state.numBytes, o = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let i;
    this.backendName == null && this.backend;
    let u;
    const c = Xm(e) ? e.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (Xm(e)) {
      const { kernelName: f, inputs: m, attrs: g } = e;
      this.backendName == null && this.backend;
      const y = nd(f, this.backendName);
      $(y != null, () => `Cannot find registered kernel '${f}' for backend '${this.backendName}'`), i = () => {
        const b = this.backend.numDataIds();
        u = y.kernelFunc({ inputs: m, attrs: g, backend: this.backend });
        const x = Array.isArray(u) ? u : [u];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(f, b, x);
        const w = x.map((C) => C.rank != null ? C : this.makeTensorFromTensorInfo(C));
        if (r) {
          const C = this.getTensorsForGradient(f, m, w);
          s = this.saveTensorsForBackwardMode(C);
        }
        return w;
      };
    } else {
      const { forwardFunc: f } = e, m = (g) => {
        r && (s = g.map((y) => this.keep(this.clone(y))));
      };
      i = () => {
        const g = this.backend.numDataIds();
        u = this.tidy(() => f(this.backend, m));
        const y = Array.isArray(u) ? u : [u];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(c, g, y), y;
      };
    }
    const { inputs: l, attrs: d } = e, h = Xm(e) ? null : e.backwardsFunc;
    let p;
    return this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
      !this.ENV.getBool("DEBUG") && !this.state.profiling ? t = i() : (p = this.profiler.profileKernel(c, l, () => i()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(p), t = p.outputs);
    }), r && this.addTapeNode(c, l, t, h, s, d), this.state.profiling && this.state.activeProfile.kernels.push({ name: c, bytesAdded: this.state.numBytes - a, totalBytesSnapshot: this.state.numBytes, tensorsAdded: this.state.numTensors - o, totalTensorsSnapshot: this.state.numTensors, inputShapes: Object.keys(l).map((f) => l[f] != null ? l[f].shape : null), outputShapes: t.map((f) => f.shape), kernelTimeMs: p.timeMs, extraInfo: p.extraInfo }), Array.isArray(u) ? t : t[0];
  }
  saveTensorsForBackwardMode(e) {
    return e.map((s) => this.keep(this.clone(s)));
  }
  getTensorsForGradient(e, t, s) {
    const r = mg(e);
    if (r != null) {
      const a = r.inputsToSave || [], o = r.outputsToSave || [];
      let i;
      r.saveAllInputs ? ($(Array.isArray(t), () => "saveAllInputs is true, expected inputs to be an array."), i = Object.keys(t).map((c) => t[c])) : i = a.map((c) => t[c]);
      const u = s.filter((c, l) => o[l]);
      return i.concat(u);
    }
    return [];
  }
  makeTensor(e, t, s, r) {
    if (e == null) throw new Error("Values passed to engine.makeTensor() are null");
    s = s || "float32", r = r || this.backend;
    let a = e;
    s === "string" && Hs(e[0]) && (a = e.map((u) => qs(u)));
    const o = r.write(a, t, s), i = new tt(t, s, o, this.nextTensorId());
    if (this.trackTensor(i, r), s === "string") {
      const u = this.state.tensorInfo.get(o), c = eI(a);
      this.state.numBytes += c - u.bytes, u.bytes = c;
    }
    return i;
  }
  makeTensorFromDataId(e, t, s, r) {
    s = s || "float32";
    const a = { dataId: e, shape: t, dtype: s };
    return this.makeTensorFromTensorInfo(a, r);
  }
  makeTensorFromTensorInfo(e, t) {
    const { dataId: s, shape: r, dtype: a } = e, o = new tt(r, a, s, this.nextTensorId());
    return this.trackTensor(o, t), o;
  }
  makeVariable(e, t = true, s, r) {
    s = s || this.nextVariableId().toString(), r != null && r !== e.dtype && (e = e.cast(r));
    const a = new sd(e, t, s, this.nextTensorId());
    if (this.state.registeredVariables[a.name] != null) throw new Error(`Variable with name ${a.name} was already registered`);
    return this.state.registeredVariables[a.name] = a, this.incRef(a, this.backend), a;
  }
  trackTensor(e, t) {
    this.state.numTensors++, e.dtype === "string" && this.state.numStringTensors++;
    let s = 0;
    e.dtype !== "complex64" && e.dtype !== "string" && (s = e.size * Ti(e.dtype)), this.state.numBytes += s, this.state.tensorInfo.has(e.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(e.dataId, { backend: t || this.backend, dtype: e.dtype, shape: e.shape, bytes: s })), e instanceof sd || this.track(e);
  }
  incRef(e, t) {
    this.trackTensor(e, t), this.backend.incRef(e.dataId);
  }
  removeDataId(e, t) {
    this.state.tensorInfo.has(e) && this.state.tensorInfo.get(e).backend === t && (this.state.tensorInfo.delete(e), this.state.numDataBuffers--);
  }
  disposeTensor(e) {
    if (!this.state.tensorInfo.has(e.dataId)) return;
    const t = this.state.tensorInfo.get(e.dataId);
    if (this.state.numTensors--, e.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= t.bytes), e.dtype !== "complex64" && e.dtype !== "string") {
      const s = e.size * Ti(e.dtype);
      this.state.numBytes -= s;
    }
    t.backend.disposeData(e.dataId) && this.removeDataId(e.dataId, t.backend);
  }
  disposeVariables() {
    for (const e in this.state.registeredVariables) {
      const t = this.state.registeredVariables[e];
      this.disposeVariable(t);
    }
  }
  disposeVariable(e) {
    this.disposeTensor(e), this.state.registeredVariables[e.name] != null && delete this.state.registeredVariables[e.name];
  }
  memory() {
    const e = this.backend.memory();
    return e.numTensors = this.state.numTensors, e.numDataBuffers = this.state.numDataBuffers, e.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (e.unreliable = true, e.reasons == null && (e.reasons = []), e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), e;
  }
  async profile(e) {
    this.state.profiling = true;
    const t = this.state.numBytes, s = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await e(), this.state.profiling = false, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((r) => r.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - t, this.state.activeProfile.newTensors = this.state.numTensors - s;
    for (const r of this.state.activeProfile.kernels) r.kernelTimeMs = await r.kernelTimeMs, r.extraInfo = await r.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(e, t, s, r, a, o) {
    const i = { id: this.state.nextTapeNodeId++, kernelName: e, inputs: t, outputs: s, saved: a }, u = mg(e);
    u != null && (r = u.gradFunc), r != null && (i.gradient = (c) => (c = c.map((l, d) => {
      if (l == null) {
        const h = s[d], p = un(h.size, h.dtype);
        return this.makeTensor(p, h.shape, h.dtype);
      }
      return l;
    }), r(c.length > 1 ? c : c[0], a, o))), this.state.activeTape.push(i);
  }
  keep(e) {
    return e.kept = true, e;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  startScope(e) {
    const t = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ };
    e && (t.name = e), this.state.scopeStack.push(t), this.state.activeScope = t;
  }
  endScope(e) {
    const t = Lr(e), s = new Set(t.map((a) => a.id));
    for (let a = 0; a < this.state.activeScope.track.length; a++) {
      const o = this.state.activeScope.track[a];
      !o.kept && !s.has(o.id) && o.dispose();
    }
    const r = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], t.forEach((a) => {
      !a.kept && a.scopeId === r.id && this.track(a);
    });
  }
  gradients(e, t, s, r = false) {
    if ($(t.length > 0, () => "gradients() received an empty list of xs."), s != null && s.dtype !== "float32") throw new Error(`dy must have 'float32' dtype, but has '${s.dtype}'`);
    const a = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", e));
    $(a instanceof tt, () => "The result y returned by f() must be a tensor.");
    const o = V_(this.state.activeTape, t, a);
    if (!r && o.length === 0 && t.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      const i = {};
      i[a.id] = s ?? Q_(a.shape), U_(i, o, (c) => this.tidy(c), Z_);
      const u = t.map((c) => i[c.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((c) => {
        for (const l of c.saved) l.dispose();
      }), this.state.activeTape = null), { value: a, grads: u };
    });
  }
  customGrad(e) {
    return $(ya(e), () => "The f passed in customGrad(f) must be a function."), (...t) => {
      $(t.every((i) => i instanceof tt), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let s;
      const r = {};
      t.forEach((i, u) => {
        r[u] = i;
      });
      const a = (i, u) => (s = e(...t, u), $(s.value instanceof tt, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), $(ya(s.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), s.value), o = (i, u) => {
        const c = s.gradFunc(i, u), l = Array.isArray(c) ? c : [c];
        $(l.length === t.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), $(l.every((h) => h instanceof tt), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        const d = {};
        return l.forEach((h, p) => {
          d[p] = () => h;
        }), d;
      };
      return this.runKernelFunc({ forwardFunc: a, backwardsFunc: o, inputs: r });
    };
  }
  readSync(e) {
    return this.state.tensorInfo.get(e).backend.readSync(e);
  }
  read(e) {
    return this.state.tensorInfo.get(e).backend.read(e);
  }
  readToGPU(e, t) {
    return this.state.tensorInfo.get(e).backend.readToGPU(e, t);
  }
  async time(e) {
    const t = Xt(), s = await this.backend.time(e);
    return s.wallMs = Xt() - t, s;
  }
  track(e) {
    return this.state.activeScope != null && (e.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(e)), e;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new q0();
    for (const e in this.registry) this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
}
Il.nextTensorId = 0;
Il.nextVariableId = 0;
function Q_(n) {
  const e = uf(A(n), "float32");
  return F.makeTensor(e, n, "float32");
}
function wI() {
  const n = rI();
  if (n._tfengine == null) {
    const e = new sI(n);
    n._tfengine = new Il(e);
  }
  return w_(n._tfengine.ENV), j_(() => n._tfengine), n._tfengine;
}
const F = wI();
function Z_(n, e) {
  const t = { a: n, b: e };
  return F.runKernel(Ur, t);
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function J_() {
  return typeof navigator < "u" && navigator != null;
}
let Ig;
function eE(n) {
  Ig = n;
}
function ky(n) {
  if (Ig !== void 0) return Ig;
  if (n || J_()) {
    if (n || (n = navigator), n.product === "ReactNative") return true;
    const e = n.userAgent || n.vendor || (typeof window < "u" ? window.opera : "");
    if (!e) {
      const t = n;
      return t.userAgentData && t.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4));
  }
  return false;
}
function Ny() {
  return typeof window < "u" && window.document != null || typeof WorkerGlobalScope < "u";
}
const tE = Object.freeze(Object.defineProperty({ __proto__: null, isBrowser: Ny, isMobile: ky, mockIsMobile: eE }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Hn = U();
Hn.registerFlag("DEBUG", () => false, (n) => {
  n && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
Hn.registerFlag("IS_BROWSER", () => Ny());
Hn.registerFlag("IS_NODE", () => typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u");
Hn.registerFlag("IS_CHROME", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
Hn.registerFlag("IS_SAFARI", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Safari/.test(navigator.userAgent) && /Apple/.test(navigator.vendor));
Hn.registerFlag("PROD", () => false);
Hn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => Hn.getBool("DEBUG"));
Hn.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => true);
Hn.registerFlag("IS_TEST", () => false);
Hn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => Hn.getBool("DEBUG"));
Hn.registerFlag("WRAP_TO_IMAGEBITMAP", () => false);
Hn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => false);
Hn.registerFlag("USE_SETTIMEOUTCUSTOM", () => false);
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function br(n, e) {
  let t = n;
  if (Yt(n)) return e === "string" ? [] : [n.length];
  if (gI(n)) {
    const r = n.channels || "RGBA";
    return [n.height, n.width * r.length];
  } else if (yI(n)) return [n.buffer.size / (e == null ? 4 : Ti(e))];
  if (!Array.isArray(n)) return [];
  const s = [];
  for (; Array.isArray(t) || Yt(t) && e !== "string"; ) s.push(t.length), t = t[0];
  return Array.isArray(n) && U().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && CI(n, s, []), s;
}
function CI(n, e, t) {
  if (t = t || [], !Array.isArray(n) && !Yt(n)) {
    $(e.length === 0, () => `Element arr[${t.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);
    return;
  }
  $(e.length > 0, () => `Element arr[${t.join("][")}] should be a primitive, but is an array of ${n.length} elements`), $(n.length === e[0], () => `Element arr[${t.join("][")}] should have ${e[0]} elements, but has ${n.length} elements`);
  const s = e.slice(1);
  for (let r = 0; r < n.length; ++r) CI(n[r], s, t.concat(r));
}
function K0(n, e, t, s) {
  if (n !== "string_or_numeric") {
    if (n == null) throw new Error("Expected dtype cannot be null.");
    if (n !== "numeric" && n !== e || n === "numeric" && e === "string") throw new Error(`Argument '${t}' passed to '${s}' must be ${n} tensor, but got ${e} tensor`);
  }
}
function _(n, e, t, s = "numeric") {
  if (n instanceof Y()) return K0(s, n.dtype, e, t), n;
  let r = Vr(n);
  if (r !== "string" && ["bool", "int32", "float32"].indexOf(s) >= 0 && (r = s), K0(s, r, e, t), n == null || !Yt(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string") {
    const u = n == null ? "null" : n.constructor.name;
    throw new Error(`Argument '${e}' passed to '${t}' must be a Tensor or TensorLike, but got '${u}'`);
  }
  const a = br(n, r);
  !Yt(n) && !Array.isArray(n) && (n = [n]);
  const i = r !== "string" ? Yo(n, r) : Os(n, [], true);
  return F.makeTensor(i, a, r);
}
function rd(n, e, t, s = "numeric") {
  if (!Array.isArray(n)) throw new Error(`Argument ${e} passed to ${t} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return n.map((a, o) => _(a, `${e}[${o}]`, t, s));
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ty = "__op";
function O(n) {
  const e = Object.keys(n);
  if (e.length !== 1) throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);
  let t = e[0];
  const s = n[t];
  t.endsWith("_") && (t = t.substring(0, t.length - 1)), t = t + Ty;
  const r = (...a) => {
    F.startScope(t);
    try {
      const o = s(...a);
      return Pr(o) && console.error("Cannot return a Promise inside of tidy."), F.endScope(o), o;
    } catch (o) {
      throw F.endScope(null), o;
    }
  };
  return Object.defineProperty(r, "name", { value: t, configurable: true }), r;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nE(n, e) {
  const t = _(n, "real", "complex"), s = _(e, "imag", "complex");
  nn(t.shape, s.shape, `real and imag shapes, ${t.shape} and ${s.shape}, must match in call to tf.complex().`);
  const r = { real: t, imag: s };
  return F.runKernel(Sd, r);
}
const zr = O({ complex_: nE });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Qo(n, e, t, s) {
  if (s == null) s = Vr(n);
  else if (s === "complex64") throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (yI(n) || gI(n)) {
    if (s !== "float32" && s !== "int32") throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);
    return F.backend.createTensorFromGPUData(n, e || t, s);
  }
  if (!Yt(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string") throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (e != null) {
    ls(e);
    const r = A(e), a = A(t);
    $(r === a, () => `Based on the provided shape, [${e}], the tensor should have ${r} values but has ${a}`);
    for (let o = 0; o < t.length; ++o) {
      const i = t[o], u = o === t.length - 1 ? i !== A(e.slice(o)) : true;
      $(t[o] === e[o] || !u, () => `Error creating a new Tensor. Inferred shape (${t}) does not match the provided shape (${e}). `);
    }
  }
  return !Yt(n) && !Array.isArray(n) && (n = [n]), e = e || t, n = s !== "string" ? Yo(n, s) : Os(n, [], true), F.makeTensor(n, e, s);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Wn(n, e, t) {
  const s = br(n, t);
  return Qo(n, e, s, t);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ei = { float32: 4, float16: 2, int32: 4, uint16: 2, uint8: 1, bool: 1, complex64: 8 };
class sr {
  static join(e) {
    return new sr(e).slice();
  }
  constructor(e) {
    if (this.shards = [], this.previousShardIndex = 0, e == null || (e instanceof Array || (e = [e]), e = e.map((s) => Yt(s) ? s.buffer : s), e.length === 0)) return;
    this.bufferUniformSize = e[0].byteLength;
    let t = 0;
    for (let s = 0; s < e.length; s++) {
      const r = e[s];
      s !== e.length - 1 && r.byteLength !== this.bufferUniformSize && (this.bufferUniformSize = void 0);
      const a = t + r.byteLength;
      this.shards.push({ buffer: r, start: t, end: a }), t = a;
    }
    this.shards.length === 0 && (this.byteLength = 0), this.byteLength = this.shards[this.shards.length - 1].end;
  }
  slice(e = 0, t = this.byteLength) {
    if (this.shards.length === 0) return new ArrayBuffer(0);
    if (e = isNaN(Number(e)) ? 0 : e, t = isNaN(Number(t)) ? 0 : t, e = Math.max(0, e), t = Math.min(this.byteLength, t), t <= e) return new ArrayBuffer(0);
    const s = this.findShardForByte(e);
    if (s === -1) throw new Error(`Could not find start shard for byte ${e}`);
    const r = t - e, a = new ArrayBuffer(r), o = new Uint8Array(a);
    let i = 0;
    for (let u = s; u < this.shards.length; u++) {
      const c = this.shards[u], d = e + i - c.start, h = i, f = Math.min(t, c.end) - c.start, m = new Uint8Array(c.buffer, d, f - d);
      if (o.set(m, h), i += m.length, t < c.end) break;
    }
    return a;
  }
  findShardForByte(e) {
    if (this.shards.length === 0 || e < 0 || e >= this.byteLength) return -1;
    if (this.bufferUniformSize != null) return this.previousShardIndex = Math.floor(e / this.bufferUniformSize), this.previousShardIndex;
    function t(r) {
      return e < r.start ? -1 : e >= r.end ? 1 : 0;
    }
    if (t(this.shards[this.previousShardIndex]) === 0) return this.previousShardIndex;
    const s = sE(this.shards, t);
    return s === -1 ? -1 : (this.previousShardIndex = s, this.previousShardIndex);
  }
}
function sE(n, e) {
  let t = 0, s = n.length;
  for (; t <= s; ) {
    const r = Math.floor((s - t) / 2) + t, a = e(n[r]);
    if (a === 0) return r;
    a < 0 ? s = r : t = r + 1;
  }
  return -1;
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function rE() {
  U().set("PROD", true);
}
function aE() {
  U().set("DEBUG", true);
}
function oE() {
  U().set("DEPRECATION_WARNINGS_ENABLED", false), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function II(n) {
  U().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(n + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
function iE() {
  F.disposeVariables();
}
function zn() {
  return F;
}
function Sg() {
  return F.memory();
}
function uE(n) {
  return F.profile(n);
}
function H(n, e) {
  return F.tidy(n, e);
}
function Me(n) {
  Lr(n).forEach((t) => t.dispose());
}
function Qt(n) {
  return F.keep(n);
}
function lE(n) {
  return F.time(n);
}
function cE(n) {
  return F.setBackend(n);
}
function dE() {
  return F.ready();
}
function SI() {
  return F.backendName;
}
function hE(n) {
  F.removeBackend(n);
}
function pE(n) {
  return F.findBackend(n);
}
function fE(n) {
  return F.findBackendFactory(n);
}
function Bd(n, e, t = 1) {
  return F.registerBackend(n, e, t);
}
function Ry() {
  return F.backend;
}
function mE(n, e) {
  U().setPlatform(n, e);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ca = 4;
async function vg(n, e) {
  const t = [], s = [], r = Array.isArray(n) ? n.map((o) => o.name) : Object.keys(n);
  for (let o = 0; o < r.length; ++o) {
    const i = r[o], u = Array.isArray(n) ? n[o].tensor : n[i];
    if (u.dtype !== "float32" && u.dtype !== "int32" && u.dtype !== "bool" && u.dtype !== "string" && u.dtype !== "complex64") throw new Error(`Unsupported dtype in weight '${i}': ${u.dtype}`);
    const c = { name: i, shape: u.shape, dtype: u.dtype };
    if (u.dtype === "string") {
      const l = new Promise(async (d) => {
        const h = await u.bytes(), p = h.reduce((g, y) => g + y.length, 0) + Ca * h.length, f = new Uint8Array(p);
        let m = 0;
        for (let g = 0; g < h.length; g++) {
          const y = h[g], b = new Uint8Array(new Uint32Array([y.length]).buffer);
          f.set(b, m), m += Ca, f.set(y, m), m += y.length;
        }
        d(f);
      });
      s.push(l);
    } else s.push(u.data());
    e != null && (c.group = e), t.push(c);
  }
  const a = await Promise.all(s);
  return { data: bE(a), specs: t };
}
function _y(n, e) {
  const t = new sr(n), s = {};
  let r = 0;
  for (const a of e) {
    const o = gE(a, (i, u) => t.slice(r + i, r + u));
    s[a.name] = vI(a, t.slice(r, r + o)), r += o;
  }
  return s;
}
function gE(n, e) {
  const t = A(n.shape);
  let s;
  if ("quantization" in n) {
    const r = n.quantization;
    s = Ei[r.dtype];
  } else if (n.dtype === "string") {
    let r = 0;
    for (let a = 0; a < t; a++) r += Ca + new Uint32Array(e(r, r + Ca))[0];
    return r;
  } else s = Ei[n.dtype];
  return t * s;
}
async function yE(n, e) {
  const t = A(n.shape);
  let s;
  if ("quantization" in n) {
    const r = n.quantization;
    s = Ei[r.dtype];
  } else if (n.dtype === "string") {
    let r = 0;
    for (let a = 0; a < t; a++) r += Ca + new Uint32Array(await e(r, r + Ca))[0];
    return r;
  } else s = Ei[n.dtype];
  return t * s;
}
function vI(n, e) {
  const t = n.name, s = n.dtype, r = n.shape, a = A(r);
  let o, i = 0;
  if ("quantization" in n) {
    const u = n.quantization;
    if (u.dtype === "uint8" || u.dtype === "uint16") {
      if (!("min" in u && "scale" in u)) throw new Error(`Weight ${n.name} with quantization ${u.dtype} doesn't have corresponding metadata min and scale.`);
    } else if (u.dtype === "float16") {
      if (s !== "float32") throw new Error(`Weight ${n.name} is quantized with ${u.dtype} which only supports weights of type float32 not ${s}.`);
    } else throw new Error(`Weight ${n.name} has unknown quantization dtype ${u.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
    const c = Ei[u.dtype], l = u.dtype === "uint8" ? new Uint8Array(e) : new Uint16Array(e);
    if (s === "float32") if (u.dtype === "uint8" || u.dtype === "uint16") {
      o = new Float32Array(l.length);
      for (let d = 0; d < l.length; d++) {
        const h = l[d];
        o[d] = h * u.scale + u.min;
      }
    } else if (u.dtype === "float16") o = vE()(l);
    else throw new Error(`Unsupported quantization type ${u.dtype} for weight type float32.`);
    else if (s === "int32") {
      if (u.dtype !== "uint8" && u.dtype !== "uint16") throw new Error(`Unsupported quantization type ${u.dtype} for weight type int32.`);
      o = new Int32Array(l.length);
      for (let d = 0; d < l.length; d++) {
        const h = l[d];
        o[d] = Math.round(h * u.scale + u.min);
      }
    } else throw new Error(`Unsupported dtype in weight '${t}': ${s}`);
    i += a * c;
  } else if (s === "string") {
    const u = A(n.shape);
    o = [];
    for (let c = 0; c < u; c++) {
      const l = new Uint32Array(e.slice(i, i + Ca))[0];
      i += Ca;
      const d = new Uint8Array(e.slice(i, i + l));
      o.push(d), i += l;
    }
  } else {
    const u = Ei[s];
    if (s === "float32") o = new Float32Array(e);
    else if (s === "int32") o = new Int32Array(e);
    else if (s === "bool") o = new Uint8Array(e);
    else if (s === "complex64") {
      o = new Float32Array(e);
      const c = new Float32Array(o.length / 2), l = new Float32Array(o.length / 2);
      for (let f = 0; f < c.length; f++) c[f] = o[f * 2], l[f] = o[f * 2 + 1];
      const d = Wn(c, r, "float32"), h = Wn(l, r, "float32"), p = zr(d, h);
      return d.dispose(), h.dispose(), p;
    } else throw new Error(`Unsupported dtype in weight '${t}': ${s}`);
    i += a * u;
  }
  return Wn(o, r, s);
}
async function X0(n, e, t) {
  let s = new Uint8Array(e);
  for (; s.byteLength < t; ) {
    const { done: r, value: a } = await n.read();
    if (r && a == null) {
      const i = t - s.byteLength;
      throw new Error(`Reader is done but ${i} bytes are still expected`);
    }
    const o = new Uint8Array(s.length + a.byteLength);
    o.set(s, 0), o.set(new Uint8Array(a), s.length), s = o;
  }
  return s.buffer;
}
async function $I(n, e) {
  const t = {}, s = n.getReader();
  let r = new ArrayBuffer(0);
  for (const a of e) {
    const o = await yE(a, async (c, l) => (r = await X0(s, r, l), r.slice(c, l)));
    r = await X0(s, r, o);
    const i = r.slice(0, o);
    r = r.slice(o);
    const u = vI(a, i);
    if (t[a.name] = u, SI() === "webgpu") {
      const c = Ry();
      "uploadToGPU" in c && A(u.shape) >= U().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD") && c.uploadToGPU(u.dataId);
    }
  }
  return t;
}
function bE(n) {
  if (n === null) throw new Error(`Invalid input value: ${JSON.stringify(n)}`);
  let e = 0;
  const t = [];
  n.forEach((a) => {
    if (e += a.byteLength, t.push(a.byteLength === a.buffer.byteLength ? a : new a.constructor(a)), !(a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array)) throw new Error(`Unsupported TypedArray subtype: ${a.constructor.name}`);
  });
  const s = new Uint8Array(e);
  let r = 0;
  return t.forEach((a) => {
    s.set(new Uint8Array(a.buffer), r), r += a.byteLength;
  }), s.buffer;
}
const Ey = typeof Buffer < "u" && (typeof Blob > "u" || typeof atob > "u" || typeof btoa > "u");
function Y0(n) {
  return Ey ? Buffer.byteLength(n, "utf8") : new Blob([n]).size;
}
function xE(n) {
  if (Ey) return Buffer.from(n).toString("base64");
  const e = new Uint8Array(n);
  let t = "";
  for (let s = 0, r = e.length; s < r; s++) t += String.fromCharCode(e[s]);
  return btoa(t);
}
function wE(n) {
  if (Ey) {
    const s = Buffer.from(n, "base64");
    return s.buffer.slice(s.byteOffset, s.byteOffset + s.byteLength);
  }
  const e = atob(n), t = new Uint8Array(e.length);
  for (let s = 0; s < e.length; ++s) t.set([e.charCodeAt(s)], s);
  return t.buffer;
}
function kI(n) {
  return sr.join(n);
}
function Q0(n) {
  const e = "/";
  for (n = n.trim(); n.endsWith(e); ) n = n.slice(0, n.length - 1);
  const t = n.split(e);
  return t[t.length - 1];
}
function NI(n, e) {
  const t = { modelTopology: n.modelTopology, format: n.format, generatedBy: n.generatedBy, convertedBy: n.convertedBy, weightsManifest: e };
  return n.signature != null && (t.signature = n.signature), n.userDefinedMetadata != null && (t.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (t.modelInitializer = n.modelInitializer), n.initializerSignature != null && (t.initializerSignature = n.initializerSignature), n.trainingConfig != null && (t.trainingConfig = n.trainingConfig), t;
}
function Dy(n, e, t) {
  const s = { modelTopology: n.modelTopology, format: n.format, generatedBy: n.generatedBy, convertedBy: n.convertedBy };
  if (n.trainingConfig != null && (s.trainingConfig = n.trainingConfig), n.weightsManifest != null) {
    if (!e) throw new Error("modelJSON has weightsManifest but weightSpecs is null");
    if (!t) throw new Error("modelJSON has weightsManifest but weightData is null");
    s.weightSpecs = e, s.weightData = t;
  }
  return n.signature != null && (s.signature = n.signature), n.userDefinedMetadata != null && (s.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (s.modelInitializer = n.modelInitializer), n.initializerSignature != null && (s.initializerSignature = n.initializerSignature), s;
}
async function Ay(n, e) {
  let t, s;
  return n.weightsManifest != null && ([t, s] = await e(n.weightsManifest)), Dy(n, t, s);
}
function Wd(n) {
  if (n.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return { dateSaved: /* @__PURE__ */ new Date(), modelTopologyType: "JSON", modelTopologyBytes: n.modelTopology == null ? 0 : Y0(JSON.stringify(n.modelTopology)), weightSpecsBytes: n.weightSpecs == null ? 0 : Y0(JSON.stringify(n.weightSpecs)), weightDataBytes: n.weightData == null ? 0 : new sr(n.weightData).byteLength };
}
function Ep(n) {
  const e = [];
  for (const t of n) e.push(...t.weights);
  return e;
}
function CE() {
  const n = (t) => {
    let s = t << 13, r = 0;
    for (; (s & 8388608) === 0; ) r -= 8388608, s <<= 1;
    return s &= -8388609, r += 947912704, s | r;
  }, e = new Uint32Array(2048);
  e[0] = 0;
  for (let t = 1; t < 1024; t++) e[t] = n(t);
  for (let t = 1024; t < 2048; t++) e[t] = 939524096 + (t - 1024 << 13);
  return e;
}
function IE() {
  const n = new Uint32Array(64);
  n[0] = 0, n[31] = 1199570944, n[32] = 2147483648, n[63] = 3347054592;
  for (let e = 1; e < 31; e++) n[e] = e << 23;
  for (let e = 33; e < 63; e++) n[e] = 2147483648 + (e - 32 << 23);
  return n;
}
function SE() {
  const n = new Uint32Array(64);
  for (let e = 0; e < 64; e++) n[e] = 1024;
  return n[0] = n[32] = 0, n;
}
function vE() {
  const n = CE(), e = IE(), t = SE();
  return (s) => {
    const r = new ArrayBuffer(4 * s.length), a = new Uint32Array(r);
    for (let o = 0; o < s.length; o++) {
      const i = s[o], u = n[t[i >> 10] + (i & 1023)] + e[i >> 10];
      a[o] = u;
    }
    return new Float32Array(r);
  };
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class _t {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return _t.instance == null && (_t.instance = new _t()), _t.instance;
  }
  static registerSaveRouter(e) {
    _t.getInstance().saveRouters.push(e);
  }
  static registerLoadRouter(e) {
    _t.getInstance().loadRouters.push(e);
  }
  static getSaveHandlers(e) {
    return _t.getHandlers(e, "save");
  }
  static getLoadHandlers(e, t) {
    return _t.getHandlers(e, "load", t);
  }
  static getHandlers(e, t, s) {
    const r = [];
    return (t === "load" ? _t.getInstance().loadRouters : _t.getInstance().saveRouters).forEach((o) => {
      const i = o(e, s);
      i !== null && r.push(i);
    }), r;
  }
}
const $E = (n) => _t.registerSaveRouter(n), kE = (n) => _t.registerLoadRouter(n), TI = (n) => _t.getSaveHandlers(n), RI = (n, e) => _t.getLoadHandlers(n, e);
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $g = "tensorflowjs", kg = 1, wi = "models_store", ua = "model_info_store";
function _I() {
  if (!U().getBool("IS_BROWSER")) throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  const n = typeof window > "u" ? self : window, e = n.indexedDB || n.mozIndexedDB || n.webkitIndexedDB || n.msIndexedDB || n.shimIndexedDB;
  if (e == null) throw new Error("The current browser does not appear to support IndexedDB.");
  return e;
}
function Ng(n) {
  const e = n.result;
  e.createObjectStore(wi, { keyPath: "modelPath" }), e.createObjectStore(ua, { keyPath: "modelPath" });
}
class Di {
  constructor(e) {
    if (this.indexedDB = _I(), e == null || !e) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = e;
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, e);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  databaseAction(e, t) {
    return new Promise((s, r) => {
      const a = this.indexedDB.open($g, kg);
      a.onupgradeneeded = () => Ng(a), a.onsuccess = () => {
        const o = a.result;
        if (t == null) {
          const i = o.transaction(wi, "readonly"), c = i.objectStore(wi).get(this.modelPath);
          c.onsuccess = () => {
            if (c.result == null) return o.close(), r(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            s(c.result.modelArtifacts);
          }, c.onerror = (l) => (o.close(), r(c.error)), i.oncomplete = () => o.close();
        } else {
          t.weightData = sr.join(t.weightData);
          const i = Wd(t), u = o.transaction(ua, "readwrite");
          let c = u.objectStore(ua), l;
          try {
            l = c.put({ modelPath: this.modelPath, modelArtifactsInfo: i });
          } catch (h) {
            return r(h);
          }
          let d;
          l.onsuccess = () => {
            d = o.transaction(wi, "readwrite");
            const h = d.objectStore(wi);
            let p;
            try {
              p = h.put({ modelPath: this.modelPath, modelArtifacts: t, modelArtifactsInfo: i });
            } catch (f) {
              return r(f);
            }
            p.onsuccess = () => s({ modelArtifactsInfo: i }), p.onerror = (f) => {
              c = u.objectStore(ua);
              const m = c.delete(this.modelPath);
              m.onsuccess = () => (o.close(), r(p.error)), m.onerror = (g) => (o.close(), r(p.error));
            };
          }, l.onerror = (h) => (o.close(), r(l.error)), u.oncomplete = () => {
            d == null ? o.close() : d.oncomplete = () => o.close();
          };
        }
      }, a.onerror = (o) => r(a.error);
    });
  }
}
Di.URL_SCHEME = "indexeddb://";
const EI = (n) => U().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(Di.URL_SCHEME) ? NE(n.slice(Di.URL_SCHEME.length)) : null;
_t.registerSaveRouter(EI);
_t.registerLoadRouter(EI);
function NE(n) {
  return new Di(n);
}
function TE(n) {
  return n.startsWith(Di.URL_SCHEME) ? n.slice(Di.URL_SCHEME.length) : n;
}
class RE {
  constructor() {
    this.indexedDB = _I();
  }
  async listModels() {
    return new Promise((e, t) => {
      const s = this.indexedDB.open($g, kg);
      s.onupgradeneeded = () => Ng(s), s.onsuccess = () => {
        const r = s.result, a = r.transaction(ua, "readonly"), i = a.objectStore(ua).getAll();
        i.onsuccess = () => {
          const u = {};
          for (const c of i.result) u[c.modelPath] = c.modelArtifactsInfo;
          e(u);
        }, i.onerror = (u) => (r.close(), t(i.error)), a.oncomplete = () => r.close();
      }, s.onerror = (r) => t(s.error);
    });
  }
  async removeModel(e) {
    return e = TE(e), new Promise((t, s) => {
      const r = this.indexedDB.open($g, kg);
      r.onupgradeneeded = () => Ng(r), r.onsuccess = () => {
        const a = r.result, o = a.transaction(ua, "readwrite"), i = o.objectStore(ua), u = i.get(e);
        let c;
        u.onsuccess = () => {
          if (u.result == null) return a.close(), s(new Error(`Cannot find model with path '${e}' in IndexedDB.`));
          {
            const l = i.delete(e), d = () => {
              c = a.transaction(wi, "readwrite");
              const p = c.objectStore(wi).delete(e);
              p.onsuccess = () => t(u.result.modelArtifactsInfo), p.onerror = (f) => s(u.error);
            };
            l.onsuccess = d, l.onerror = (h) => (d(), a.close(), s(u.error));
          }
        }, u.onerror = (l) => (a.close(), s(u.error)), o.oncomplete = () => {
          c == null ? a.close() : c.oncomplete = () => a.close();
        };
      }, r.onerror = (a) => s(r.error);
    });
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ar = "/", yl = "tensorflowjs_models", DI = "info", _E = "model_topology", EE = "weight_specs", DE = "weight_data", AE = "model_metadata";
function AI(n) {
  return { info: [yl, n, DI].join(Ar), topology: [yl, n, _E].join(Ar), weightSpecs: [yl, n, EE].join(Ar), weightData: [yl, n, DE].join(Ar), modelMetadata: [yl, n, AE].join(Ar) };
}
function FI(n) {
  for (const e of Object.values(n)) window.localStorage.removeItem(e);
}
function FE(n) {
  const e = n.split(Ar);
  if (e.length < 3) throw new Error(`Invalid key format: ${n}`);
  return e.slice(1, e.length - 1).join(Ar);
}
function OE(n) {
  return n.startsWith(Ai.URL_SCHEME) ? n.slice(Ai.URL_SCHEME.length) : n;
}
class Ai {
  constructor(e) {
    if (!U().getBool("IS_BROWSER") || typeof window > "u" || typeof window.localStorage > "u") throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, e == null || !e) throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = e, this.keys = AI(this.modelPath);
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      const t = JSON.stringify(e.modelTopology), s = JSON.stringify(e.weightSpecs), r = Wd(e), a = sr.join(e.weightData);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(r)), this.LS.setItem(this.keys.topology, t), this.LS.setItem(this.keys.weightSpecs, s), this.LS.setItem(this.keys.weightData, xE(a));
        const o = { format: e.format, generatedBy: e.generatedBy, convertedBy: e.convertedBy, signature: e.signature != null ? e.signature : void 0, userDefinedMetadata: e.userDefinedMetadata != null ? e.userDefinedMetadata : void 0, modelInitializer: e.modelInitializer != null ? e.modelInitializer : void 0, initializerSignature: e.initializerSignature != null ? e.initializerSignature : void 0, trainingConfig: e.trainingConfig != null ? e.trainingConfig : void 0 };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(o)), { modelArtifactsInfo: r };
      } catch {
        throw FI(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`);
      }
    }
  }
  async load() {
    const e = JSON.parse(this.LS.getItem(this.keys.info));
    if (e == null) throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (e.modelTopologyType !== "JSON") throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    const t = {}, s = JSON.parse(this.LS.getItem(this.keys.topology));
    if (s == null) throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    t.modelTopology = s;
    const r = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (r == null) throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    t.weightSpecs = r;
    const a = this.LS.getItem(this.keys.modelMetadata);
    if (a != null) {
      const i = JSON.parse(a);
      t.format = i.format, t.generatedBy = i.generatedBy, t.convertedBy = i.convertedBy, i.signature != null && (t.signature = i.signature), i.userDefinedMetadata != null && (t.userDefinedMetadata = i.userDefinedMetadata), i.modelInitializer != null && (t.modelInitializer = i.modelInitializer), i.initializerSignature != null && (t.initializerSignature = i.initializerSignature), i.trainingConfig != null && (t.trainingConfig = i.trainingConfig);
    }
    const o = this.LS.getItem(this.keys.weightData);
    if (o == null) throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return t.weightData = wE(o), t;
  }
}
Ai.URL_SCHEME = "localstorage://";
const OI = (n) => U().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(Ai.URL_SCHEME) ? PE(n.slice(Ai.URL_SCHEME.length)) : null;
_t.registerSaveRouter(OI);
_t.registerLoadRouter(OI);
function PE(n) {
  return new Ai(n);
}
class LE {
  constructor() {
    $(U().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), $(typeof window > "u" || typeof window.localStorage < "u", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    const e = {}, t = yl + Ar, s = Ar + DI;
    for (let r = 0; r < this.LS.length; ++r) {
      const a = this.LS.key(r);
      if (a.startsWith(t) && a.endsWith(s)) {
        const o = FE(a);
        e[o] = JSON.parse(this.LS.getItem(a));
      }
    }
    return e;
  }
  async removeModel(e) {
    e = OE(e);
    const t = AI(e);
    if (this.LS.getItem(t.info) == null) throw new Error(`Cannot find model at path '${e}'`);
    const s = JSON.parse(this.LS.getItem(t.info));
    return FI(t), s;
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bl = "://";
class Nn {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return Nn.instance == null && (Nn.instance = new Nn()), Nn.instance;
  }
  static registerManager(e, t) {
    $(e != null, () => "scheme must not be undefined or null."), e.endsWith(bl) && (e = e.slice(0, e.indexOf(bl))), $(e.length > 0, () => "scheme must not be an empty string.");
    const s = Nn.getInstance();
    $(s.managers[e] == null, () => `A model store manager is already registered for scheme '${e}'.`), s.managers[e] = t;
  }
  static getManager(e) {
    const t = Nn.getInstance().managers[e];
    if (t == null) throw new Error(`Cannot find model manager for scheme '${e}'`);
    return t;
  }
  static getSchemes() {
    return Object.keys(Nn.getInstance().managers);
  }
}
function dp(n) {
  if (n.indexOf(bl) === -1) throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Nn.getSchemes().join(",")}`);
  return { scheme: n.split(bl)[0], path: n.split(bl)[1] };
}
async function PI(n, e, t = false) {
  $(n !== e, () => `Old path and new path are the same: '${n}'`);
  const s = _t.getLoadHandlers(n);
  $(s.length > 0, () => `Copying failed because no load handler is found for source URL ${n}.`), $(s.length < 2, () => `Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`);
  const r = s[0], a = _t.getSaveHandlers(e);
  $(a.length > 0, () => `Copying failed because no save handler is found for destination URL ${e}.`), $(a.length < 2, () => `Copying failed because more than one (${s.length}) save handlers for destination URL ${e}.`);
  const o = a[0], i = dp(n).scheme, u = dp(n).path, c = i === dp(n).scheme, l = await r.load();
  t && c && await Nn.getManager(i).removeModel(u);
  const d = await o.save(l);
  return t && !c && await Nn.getManager(i).removeModel(u), d.modelArtifactsInfo;
}
async function zE() {
  const n = Nn.getSchemes(), e = {};
  for (const t of n) {
    const s = await Nn.getManager(t).listModels();
    for (const r in s) {
      const a = t + bl + r;
      e[a] = s[r];
    }
  }
  return e;
}
async function ME(n) {
  const e = dp(n);
  return Nn.getManager(e.scheme).removeModel(e.path);
}
async function BE(n, e) {
  return PI(n, e, false);
}
async function WE(n, e) {
  return PI(n, e, true);
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class VE {
  constructor() {
    this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = false;
  }
  fetch(e, t) {
    return fetch(e, t);
  }
  now() {
    return performance.now();
  }
  encode(e, t) {
    if (t !== "utf-8" && t !== "utf8") throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(e);
  }
  decode(e, t) {
    return new TextDecoder(t).decode(e);
  }
  setTimeoutCustom(e, t) {
    if (typeof window > "u" || !U().getBool("USE_SETTIMEOUTCUSTOM")) {
      setTimeout(e, t);
      return;
    }
    this.functionRefs.push(e), setTimeout(() => {
      window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*");
    }, t), this.hasEventListener || (this.hasEventListener = true, window.addEventListener("message", (s) => {
      if (s.source === window && s.data.name === this.messageName) {
        s.stopPropagation();
        const r = this.functionRefs[s.data.index];
        r(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0);
      }
    }, true));
  }
  isTypedArray(e) {
    return lI(e);
  }
}
if (U().get("IS_BROWSER")) {
  U().setPlatform("browser", new VE());
  try {
    Nn.registerManager(Ai.URL_SCHEME, new LE());
  } catch {
  }
  try {
    Nn.registerManager(Di.URL_SCHEME, new RE());
  } catch {
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const UE = { importFetch: () => require("node-fetch") };
let Ym;
class GE {
  constructor() {
    this.util = require("util"), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(e, t) {
    return U().global.fetch != null ? U().global.fetch(e, t) : (Ym == null && (Ym = UE.importFetch()), Ym(e, t));
  }
  now() {
    const e = process.hrtime();
    return e[0] * 1e3 + e[1] / 1e6;
  }
  encode(e, t) {
    if (t !== "utf-8" && t !== "utf8") throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);
    return this.textEncoder.encode(e);
  }
  decode(e, t) {
    return e.length === 0 ? "" : new this.util.TextDecoder(t).decode(e);
  }
  isTypedArray(e) {
    return this.util.types.isFloat32Array(e) || this.util.types.isInt32Array(e) || this.util.types.isUint8Array(e) || this.util.types.isUint8ClampedArray(e);
  }
}
U().get("IS_NODE") && !U().get("IS_BROWSER") && U().setPlatform("node", new GE());
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Oe(n, e = "float32", t) {
  return e = e || "float32", ls(n), new Gt(n, e, t);
}
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function HE(n, e) {
  const t = _(n, "x", "cast");
  if (!JC(e)) throw new Error(`Failed to cast to unknown dtype ${e}`);
  if (e === "string" && t.dtype !== "string" || e !== "string" && t.dtype === "string") throw new Error("Only strings can be casted to strings");
  const s = { x: t }, r = { dtype: e };
  return F.runKernel(Wa, s, r);
}
const ue = O({ cast_: HE });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function jE(n) {
  const t = { x: _(n, "x", "clone", "string_or_numeric") };
  return F.runKernel(oo, t);
}
const mr = O({ clone_: jE });
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Fy(n, e = false) {
  console.log(n.toString(e));
}
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
wI();
const qE = { buffer: Oe, cast: ue, clone: mr, print: Fy };
q_(qE);
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function KE(n, e) {
  let t = _(n, "a", "add"), s = _(e, "b", "add");
  [t, s] = Ft(t, s);
  const r = { a: t, b: s };
  return F.runKernel(Ur, r);
}
const te = O({ add_: KE });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function XE(n, e) {
  let t = _(n, "a", "floorDiv"), s = _(e, "b", "floorDiv");
  [t, s] = Ft(t, s);
  const r = { a: t, b: s };
  return F.runKernel(so, r);
}
const pf = O({ floorDiv_: XE });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function YE(n, e) {
  let t = _(n, "a", "div"), s = _(e, "b", "div");
  if ([t, s] = Ft(t, s), t.dtype === "int32" && s.dtype === "int32") return pf(t, s);
  const r = { a: t, b: s }, a = {};
  return F.runKernel(Qa, r, a);
}
const ve = O({ div_: YE });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function QE(n, e) {
  let t = _(n, "a", "mul"), s = _(e, "b", "mul");
  [t, s] = Ft(t, s);
  const r = { a: t, b: s };
  return F.runKernel(So, r);
}
const z = O({ mul_: QE });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ZE(n) {
  const e = _(n, "x", "abs");
  if (e.dtype === "complex64") {
    const t = { x: e };
    return F.runKernel(Wl, t);
  } else {
    const t = { x: e };
    return F.runKernel(Yi, t);
  }
}
const Vt = O({ abs_: ZE });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function JE(n) {
  const t = { x: _(n, "x", "acos") };
  return F.runKernel(Ea, t);
}
const Oy = O({ acos_: JE });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function eD(n) {
  const t = { x: _(n, "x", "acosh") };
  return F.runKernel(Da, t);
}
const Py = O({ acosh_: eD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function tD(n) {
  $(Array.isArray(n), () => "The argument passed to tf.addN() must be a list of tensors"), $(n.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${n.length}`);
  const e = n.map((r, a) => _(r, `tensors${a}`, "addN")), t = e[0];
  e.forEach((r) => {
    if (r.dtype !== t.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), e.forEach((r) => {
    if (!Be(r.shape, t.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  const s = e;
  return F.runKernel(Aa, s);
}
const LI = O({ addN_: tD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nD(n, e = null, t = false) {
  const r = { x: _(n, "x", "all", "bool") }, a = { axis: e, keepDims: t };
  return F.runKernel(Qi, r, a);
}
const ff = O({ all_: nD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sD(n, e = null, t = false) {
  const r = { x: _(n, "x", "any", "bool") }, a = { axis: e, keepDims: t };
  return F.runKernel(Zi, r, a);
}
const ad = O({ any_: sD });
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function rD(n, e = 0) {
  const s = { x: _(n, "x", "argMax") }, r = { axis: e };
  return F.runKernel(Ji, s, r);
}
const Fi = O({ argMax_: rD });
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function aD(n, e = 0) {
  const s = { x: _(n, "x", "argMin") }, r = { axis: e };
  return F.runKernel(eu, s, r);
}
const Ly = O({ argMin_: aD });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function oD(n) {
  const t = { x: _(n, "x", "asin") };
  return F.runKernel(Fa, t);
}
const zy = O({ asin_: oD });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function iD(n) {
  const t = { x: _(n, "x", "asinh") };
  return F.runKernel(Oa, t);
}
const My = O({ asinh_: iD });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function uD(n) {
  const t = { x: _(n, "x", "atan") };
  return F.runKernel(Pa, t);
}
const By = O({ atan_: uD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function lD(n, e) {
  let t = _(n, "a", "atan2"), s = _(e, "b", "atan2");
  [t, s] = Ft(t, s);
  const r = { a: t, b: s };
  return F.runKernel(za, r);
}
const Wy = O({ atan2_: lD });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function cD(n) {
  const t = { x: _(n, "x", "atanh") };
  return F.runKernel(La, t);
}
const Vy = O({ atanh_: cD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function rr(n, e, t, s, r = "NHWC", a) {
  const o = n[3], i = [...e, o], u = An(r);
  return lt(n, i, t, a, s, null, null, u);
}
function zt(n, e, t, s, r, a, o = "channelsLast") {
  const [i, u] = od(e);
  let c;
  if (o === "channelsLast") c = [i, u, n[3], n[3]];
  else if (o === "channelsFirst") c = [i, u, n[1], n[1]];
  else throw new Error(`Unknown dataFormat ${o}`);
  return lt(n, c, t, s, r, a, false, o);
}
function Sn(n, e, t, s, r, a, o = "NDHWC") {
  const [i, u, c] = Tg(e);
  let l, d;
  if (o === "NDHWC") d = "channelsLast", l = [i, u, c, n[4], n[4]];
  else if (o === "NCDHW") d = "channelsFirst", l = [i, u, c, n[1], n[1]];
  else throw new Error(`Unknown dataFormat ${o}`);
  return cs(n, l, t, s, r, false, d, a);
}
function lt(n, e, t, s, r, a, o = false, i = "channelsLast") {
  let [u, c, l, d] = [-1, -1, -1, -1];
  if (i === "channelsLast") [u, c, l, d] = n;
  else if (i === "channelsFirst") [u, d, c, l] = n;
  else throw new Error(`Unknown dataFormat ${i}`);
  const [h, p, , f] = e, [m, g] = od(t), [y, b] = od(s), x = xl(h, y), w = xl(p, b), { padInfo: C, outHeight: v, outWidth: k } = pD(r, c, l, m, g, x, w, a, i), R = o ? f * d : f;
  let N;
  return i === "channelsFirst" ? N = [u, R, v, k] : i === "channelsLast" && (N = [u, v, k, R]), { batchSize: u, dataFormat: i, inHeight: c, inWidth: l, inChannels: d, outHeight: v, outWidth: k, outChannels: R, padInfo: C, strideHeight: m, strideWidth: g, filterHeight: h, filterWidth: p, effectiveFilterHeight: x, effectiveFilterWidth: w, dilationHeight: y, dilationWidth: b, inShape: n, outShape: N, filterShape: e };
}
function cs(n, e, t, s, r, a = false, o = "channelsLast", i) {
  let [u, c, l, d, h] = [-1, -1, -1, -1, -1];
  if (o === "channelsLast") [u, c, l, d, h] = n;
  else if (o === "channelsFirst") [u, h, c, l, d] = n;
  else throw new Error(`Unknown dataFormat ${o}`);
  const [p, f, m, , g] = e, [y, b, x] = Tg(t), [w, C, v] = Tg(s), k = xl(p, w), R = xl(f, C), N = xl(m, v), { padInfo: T, outDepth: S, outHeight: E, outWidth: P } = fD(r, c, l, d, y, b, x, k, R, N, i), M = a ? g * h : g;
  let L;
  return o === "channelsFirst" ? L = [u, M, S, E, P] : o === "channelsLast" && (L = [u, S, E, P, M]), { batchSize: u, dataFormat: o, inDepth: c, inHeight: l, inWidth: d, inChannels: h, outDepth: S, outHeight: E, outWidth: P, outChannels: M, padInfo: T, strideDepth: y, strideHeight: b, strideWidth: x, filterDepth: p, filterHeight: f, filterWidth: m, effectiveFilterDepth: k, effectiveFilterHeight: R, effectiveFilterWidth: N, dilationDepth: w, dilationHeight: C, dilationWidth: v, inShape: n, outShape: L, filterShape: e };
}
function dD(n, e, t, s, r) {
  s == null && (s = Uy(n, e, t));
  const a = n[0], o = n[1], i = id((a - e + 2 * s) / t + 1, r), u = id((o - e + 2 * s) / t + 1, r);
  return [i, u];
}
function hD(n, e, t, s, r, a) {
  r == null && (r = Uy(n, e[0], s[0]));
  const o = [0, 0, 0, t];
  for (let i = 0; i < 3; i++) n[i] + 2 * r >= e[i] && (o[i] = id((n[i] - e[i] + 2 * r) / s[i] + 1, a));
  return o;
}
function Uy(n, e, t, s = 1) {
  const r = xl(e, s);
  return Math.floor((n[0] * (t - 1) - t + r) / 2);
}
function od(n) {
  return typeof n == "number" ? [n, n, n] : n.length === 2 ? [n[0], n[1], 1] : n;
}
function Tg(n) {
  return typeof n == "number" ? [n, n, n] : n;
}
function xl(n, e) {
  return e <= 1 ? n : n + (n - 1) * (e - 1);
}
function pD(n, e, t, s, r, a, o, i, u) {
  let c, l, d;
  if (typeof n == "number") {
    c = { top: n, bottom: n, left: n, right: n, type: n === 0 ? "VALID" : "NUMBER" };
    const p = dD([e, t], a, s, n, i);
    l = p[0], d = p[1];
  } else if (n === "same") {
    l = Math.ceil(e / s), d = Math.ceil(t / r);
    const h = Math.max(0, (l - 1) * s + a - e), p = Math.max(0, (d - 1) * r + o - t), f = Math.floor(h / 2), m = h - f, g = Math.floor(p / 2), y = p - g;
    c = { top: f, bottom: m, left: g, right: y, type: "SAME" };
  } else if (n === "valid") c = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, l = Math.ceil((e - a + 1) / s), d = Math.ceil((t - o + 1) / r);
  else if (typeof n == "object") {
    const h = u === "channelsLast" ? n[1][0] : n[2][0], p = u === "channelsLast" ? n[1][1] : n[2][1], f = u === "channelsLast" ? n[2][0] : n[3][0], m = u === "channelsLast" ? n[2][1] : n[3][1];
    c = { top: h, bottom: p, left: f, right: m, type: h === 0 && p === 0 && f === 0 && m === 0 ? "VALID" : "EXPLICIT" }, l = id((e - a + h + p) / s + 1, i), d = id((t - o + f + m) / r + 1, i);
  } else throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: c, outHeight: l, outWidth: d };
}
function fD(n, e, t, s, r, a, o, i, u, c, l) {
  let d, h, p, f;
  if (n === "valid" && (n = 0), typeof n == "number") {
    d = { top: n, bottom: n, left: n, right: n, front: n, back: n, type: n === 0 ? "VALID" : "NUMBER" };
    const g = hD([e, t, s, 1], [i, u, c], 1, [r, a, o], n, l);
    h = g[0], p = g[1], f = g[2];
  } else if (n === "same") {
    h = Math.ceil(e / r), p = Math.ceil(t / a), f = Math.ceil(s / o);
    const m = (h - 1) * r + i - e, g = (p - 1) * a + u - t, y = (f - 1) * o + c - s, b = Math.floor(m / 2), x = m - b, w = Math.floor(g / 2), C = g - w, v = Math.floor(y / 2), k = y - v;
    d = { top: w, bottom: C, left: v, right: k, front: b, back: x, type: "SAME" };
  } else throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: d, outDepth: h, outHeight: p, outWidth: f };
}
function id(n, e) {
  if (!e) return Math.trunc(n);
  switch (e) {
    case "round":
      return Math.round(n);
    case "ceil":
      return Math.ceil(n);
    case "floor":
      return Math.floor(n);
    default:
      throw new Error(`Unknown roundingMode ${e}`);
  }
}
function Ia(n) {
  const [e, t, s] = od(n);
  return e === 1 && t === 1 && s === 1;
}
function qt(n, e) {
  return Ia(n) || Ia(e);
}
function Oi(n) {
  return od(n).every((e) => e > 0);
}
function An(n) {
  if (n === "NHWC") return "channelsLast";
  if (n === "NCHW") return "channelsFirst";
  throw new Error(`Unknown dataFormat ${n}`);
}
function Fn(n, e, t) {
  if (t != null) {
    if (typeof e == "string") throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);
    if (typeof e == "number") $(Ni(e), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);
    else if (typeof e == "object") e.forEach((s) => {
      s.forEach((r) => {
        $(Ni(r), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${r}.`);
      });
    });
    else throw Error(`Error in ${n}: Unknown padding parameter: ${e}`);
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function mD(n, e) {
  const s = { x: _(n, "x", "reshape", "string_or_numeric") }, r = { shape: e };
  return F.runKernel(Du, s, r);
}
const B = O({ reshape_: mD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function gD(n, e, t, s, r) {
  const a = _(n, "x", "avgPool", "float32"), o = 1;
  $(qt(t, o), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`);
  let i = a, u = false;
  a.rank === 3 && (u = true, i = B(a, [1, a.shape[0], a.shape[1], a.shape[2]])), $(i.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${i.rank}.`), Fn("avgPool", s, r);
  const c = { x: i }, l = { filterSize: e, strides: t, pad: s, dimRoundingMode: r };
  let d = F.runKernel(Ma, c, l);
  return d = ue(d, a.dtype), u ? B(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const Vd = O({ avgPool_: gD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function yD(n, e, t, s, r, a = "NDHWC") {
  const o = _(n, "x", "avgPool3d", "float32");
  let i = o, u = false;
  o.rank === 4 && (u = true, i = B(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]])), $(i.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`), $(a === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`), $(typeof t == "number" && t > 0 || Array.isArray(t) && t[0] > 0 && t[1] > 0 && t[2] > 0, () => `Error in avgPool3d: Stride must be > 0, but got '${t}'`), Fn("avgPool3d", s, r);
  const c = { x: i }, l = { filterSize: e, strides: t, pad: s, dimRoundingMode: r, dataFormat: a };
  let d = F.runKernel(tu, c, l);
  return d = ue(d, i.dtype), u ? B(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const Gy = O({ avgPool3d_: yD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function bD(n, e = 0) {
  $(n.length >= 1, () => "Pass at least one tensor to concat");
  const t = rd(n, "tensors", "concat", "string_or_numeric");
  if (t[0].dtype === "complex64" && t.forEach((a) => {
    if (a.dtype !== "complex64") throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${a.dtype}. `);
  }), t.length === 1) return mr(t[0]);
  const s = t, r = { axis: e };
  return F.runKernel(ru, s, r);
}
const Lt = O({ concat_: bD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function xD(n, e, t = false, s = false) {
  let r = _(n, "a", "matMul"), a = _(e, "b", "matMul");
  [r, a] = Ft(r, a);
  const o = { a: r, b: a }, i = { transposeA: t, transposeB: s };
  return F.runKernel(Ba, o, i);
}
const je = O({ matMul_: xD });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function wD(n) {
  const t = { x: _(n, "x", "sigmoid", "float32") };
  return F.runKernel(Wo, t);
}
const Ks = O({ sigmoid_: wD });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function CD(n, e, t) {
  const s = _(n, "x", "slice", "string_or_numeric");
  if (s.rank === 0) throw new Error("Slicing scalar is not possible");
  const r = { x: s }, a = { begin: e, size: t };
  return F.runKernel(Mu, r, a);
}
const Qe = O({ slice_: CD });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ID(n) {
  const t = { x: _(n, "x", "tanh", "float32") };
  return F.runKernel(Xo, t);
}
const Sa = O({ tanh_: ID });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function SD(n, e, t, s, r, a) {
  const o = _(n, "forgetBias", "basicLSTMCell"), i = _(e, "lstmKernel", "basicLSTMCell"), u = _(t, "lstmBias", "basicLSTMCell"), c = _(s, "data", "basicLSTMCell"), l = _(r, "c", "basicLSTMCell"), d = _(a, "h", "basicLSTMCell"), h = Lt([c, d], 1), p = je(h, i), f = te(p, u), m = f.shape[0], g = f.shape[1] / 4, y = [m, g], b = Qe(f, [0, 0], y), x = Qe(f, [0, g], y), w = Qe(f, [0, g * 2], y), C = Qe(f, [0, g * 3], y), v = te(z(Ks(b), Sa(x)), z(l, Ks(te(o, w)))), k = z(Sa(v), Ks(C));
  return [v, k];
}
const zI = O({ basicLSTMCell_: SD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function vD(n, e, t) {
  const s = _(n, "x", "batchToSpaceND"), r = e.reduce((i, u) => i * u);
  $(s.rank >= 1 + e.length, () => `input rank is ${s.rank} but should be > than blockShape.length ${e.length}`), $(t.length === e.length, () => `crops.length is ${t.length} but should be equal to blockShape.length  ${e.length}`), $(s.shape[0] % r === 0, () => `input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${r}`);
  const a = { x: s }, o = { blockShape: e, crops: t };
  return F.runKernel(nu, a, o);
}
const Ud = O({ batchToSpaceND_: vD });
function $D(n) {
  let e;
  return n.rank === 0 || n.rank === 1 ? e = B(n, [1, 1, 1, n.size]) : n.rank === 2 ? e = B(n, [1, 1, n.shape[0], n.shape[1]]) : n.rank === 3 ? e = B(n, [1, n.shape[0], n.shape[1], n.shape[2]]) : e = n, e;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function kD(n, e, t, s, r, a) {
  a == null && (a = 1e-3);
  const o = _(n, "x", "batchNorm"), i = _(e, "mean", "batchNorm"), u = _(t, "variance", "batchNorm");
  let c;
  r != null && (c = _(r, "scale", "batchNorm"));
  let l;
  s != null && (l = _(s, "offset", "batchNorm")), $(i.rank === u.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), $(l == null || i.rank === l.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), $(c == null || i.rank === c.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  const h = { x: $D(o), scale: c, offset: l, mean: i, variance: u }, p = { varianceEpsilon: a }, f = F.runKernel(ro, h, p);
  return B(f, o.shape);
}
const sc = O({ batchNorm_: kD });
function ND(n, e, t, s, r, a) {
  const o = _(n, "x", "batchNorm"), i = _(e, "mean", "batchNorm"), u = _(t, "variance", "batchNorm");
  let c;
  r != null && (c = _(r, "scale", "batchNorm"));
  let l;
  return s != null && (l = _(s, "offset", "batchNorm")), $(o.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`), $(i.rank === 2 || i.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`), $(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`), c != null && $(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`), l != null && $(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${l.rank}.`), sc(o, i, u, l, c, a);
}
const Hy = O({ batchNorm2d_: ND });
function TD(n, e, t, s, r, a) {
  const o = _(n, "x", "batchNorm"), i = _(e, "mean", "batchNorm"), u = _(t, "variance", "batchNorm");
  let c;
  r != null && (c = _(r, "scale", "batchNorm"));
  let l;
  return s != null && (l = _(s, "offset", "batchNorm")), $(o.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`), $(i.rank === 3 || i.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`), $(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`), c != null && $(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`), l != null && $(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${l.rank}.`), sc(o, i, u, l, c, a);
}
const jy = O({ batchNorm3d_: TD });
function RD(n, e, t, s, r, a) {
  const o = _(n, "x", "batchNorm"), i = _(e, "mean", "batchNorm"), u = _(t, "variance", "batchNorm");
  let c;
  r != null && (c = _(r, "scale", "batchNorm"));
  let l;
  return s != null && (l = _(s, "offset", "batchNorm")), $(o.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`), $(i.rank === 4 || i.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`), $(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`), c != null && $(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`), l != null && $(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${l.rank}.`), sc(o, i, u, l, c, a);
}
const qy = O({ batchNorm4d_: RD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _D(n, e, t) {
  const s = _(n, "x", "bincount"), r = _(e, "weights", "bincount");
  $(s.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${s.dtype}`), $(t >= 0, () => `size must be non-negative, but got ${t}.`), $(r.size === s.size || r.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`);
  const a = { x: s, weights: r }, o = { size: t };
  return F.runKernel(su, a, o);
}
const Ky = O({ bincount_: _D });
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ED(n, e) {
  const t = _(n, "x", "bitwiseAnd"), s = _(e, "y", "bitwiseAnd");
  if (!Be(t.shape, s.shape)) throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${t.shape}, y: ${s.shape}`);
  if (t.dtype !== "int32" || s.dtype !== "int32") throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${t.dtype} and type of y: ${s.dtype}`);
  const r = { a: t, b: s };
  return F.runKernel(Ml, r);
}
const MI = O({ bitwiseAnd_: ED });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function DD(n, e) {
  const t = _(n, "s0", "broadcastArgs", "int32"), s = _(e, "s1", "broadcastArgs", "int32");
  if (t.rank !== 1) throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${t.rank}`);
  if (s.rank !== 1) throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);
  const r = { s0: t, s1: s };
  return F.runKernel(Bl, r);
}
const BI = O({ broadcastArgs_: DD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function AD(n, e) {
  let t = _(n, "broadcastTo", "x");
  const s = t.shape;
  if (ls(e), e.length < t.rank) throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${t.rank}.`);
  if (e.length > t.rank) {
    const c = t.shape.slice();
    for (; c.length < e.length; ) c.unshift(1);
    t = B(t, c);
  }
  const r = t.shape, a = Array.from(e);
  for (let c = e.length - 1; c >= 0; c--) if (r[c] === e[c]) a[c] = 1;
  else if (t.shape[c] !== 1) throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${e}].`);
  if (a.map((c, l) => c > 1 ? l : -1).filter((c) => c >= 0).length === 0) return mr(t);
  const i = { x: t }, u = { reps: a };
  return F.runKernel(Hr, i, u);
}
const Si = O({ broadcastTo_: AD });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function FD(n) {
  const t = { x: _(n, "x", "ceil", "float32") };
  return F.runKernel(Va, t);
}
const Xy = O({ ceil_: FD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Xu(n, e, t) {
  ls(n), t = t || Vr(e);
  const s = { shape: n, value: e, dtype: t };
  return F.runKernel(Gl, {}, s);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function OD(n, e, t) {
  const s = _(n, "x", "clipByValue");
  if ($(e <= t, () => `Error in clip: min (${e}) must be less than or equal to max (${t}).`), e === t) return Xu(s.shape, e, s.dtype);
  const r = { x: s }, a = { clipValueMin: e, clipValueMax: t };
  return F.runKernel(Gr, r, a);
}
const jn = O({ clipByValue_: OD });
function PD(n) {
  return Lt(n, 0);
}
const Yy = O({ concat1d_: PD });
function LD(n, e) {
  return Lt(n, e);
}
const Qy = O({ concat2d_: LD });
function zD(n, e) {
  return Lt(n, e);
}
const Zy = O({ concat3d_: zD });
function MD(n, e) {
  return Lt(n, e);
}
const Jy = O({ concat4d_: MD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function BD(n, e, t, s, r = "NHWC", a = [1, 1], o) {
  const i = _(n, "x", "conv2d", "float32"), u = _(e, "filter", "conv2d", "float32");
  let c = i, l = false;
  i.rank === 3 && (l = true, c = B(i, [1, i.shape[0], i.shape[1], i.shape[2]])), $(c.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${c.rank}.`), $(u.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`), Fn("conv2d", s, o);
  const d = r === "NHWC" ? c.shape[3] : c.shape[1];
  $(d === u.shape[2], () => `Error in conv2d: depth of input (${d}) must match input depth for filter ${u.shape[2]}.`), $(qt(t, a), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`), $(Oi(a), () => "Error in conv2D: Dilated rates should be larger than 0."), $(Oi(t), () => "Error in conv2D: Strides should be larger than 0.");
  const h = { x: c, filter: u }, p = { strides: t, pad: s, dataFormat: r, dilations: a, dimRoundingMode: o }, f = F.runKernel(Ua, h, p);
  return l ? B(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const Mr = O({ conv2d_: BD });
function WD(n, e, t, s, r = "NWC", a = 1, o) {
  const i = _(n, "x", "conv1d"), u = _(e, "filter", "conv1d");
  let c = i, l = false;
  i.rank === 2 && (l = true, c = B(i, [1, i.shape[0], i.shape[1]])), $(c.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${c.rank}.`), $(u.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`), Fn("conv1d", s, o), $(c.shape[2] === u.shape[1], () => `Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${u.shape[1]}.`), $(qt(t, a), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${t} and dilation '${a}'`), $(Oi(a), () => "Error in conv1D: Dilated rates should be larger than 0."), $(Oi(t), () => "Error in conv1D: Stride should be larger than 0."), $(r === "NWC", () => `Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);
  const d = B(u, [1, u.shape[0], u.shape[1], u.shape[2]]), h = B(c, [c.shape[0], 1, c.shape[1], c.shape[2]]), g = Mr(h, d, [1, t], s, "NHWC", [1, a], o);
  return l ? B(g, [g.shape[2], g.shape[3]]) : B(g, [g.shape[0], g.shape[2], g.shape[3]]);
}
const mf = O({ conv1d_: WD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function VD(n, e, t, s, r, a = "NHWC", o) {
  $(n.length === e.rank, () => `Length of inShape (${n.length}) and rank of dy (${e.rank}) must match`);
  let i = n, u = e, c = false;
  e.rank === 3 && (c = true, u = B(e, [1, e.shape[0], e.shape[1], e.shape[2]]), i = [1, n[0], n[1], n[2]]), $(i.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`), $(u.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`), $(t.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${t.rank}`);
  const l = a === "NHWC" ? i[3] : i[1], d = a === "NHWC" ? u.shape[3] : u.shape[1];
  $(l === t.shape[2], () => `Error in conv2dDerInput: depth of input (${l}) must match input depth for filter ${t.shape[2]}.`), $(d === t.shape[3], () => `Error in conv2dDerInput: depth of output (${d}) must match output depth for filter ${t.shape[3]}.`), Fn("conv2dDerInput", r, o);
  const h = { dy: u, filter: t }, p = { strides: s, pad: r, dataFormat: a, dimRoundingMode: o, inputShape: i }, f = F.runKernel(Ga, h, p);
  return c ? B(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const eb = O({ conv2DBackpropInput_: VD });
function UD(n, e, t, s, r, a) {
  const o = _(n, "x", "conv2dTranspose"), i = _(e, "filter", "conv2dTranspose");
  return eb(t, o, i, s, r, "NHWC", a);
}
const gf = O({ conv2dTranspose_: UD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function GD(n, e, t, s, r = "NDHWC", a = [1, 1, 1]) {
  const o = _(n, "x", "conv3d"), i = _(e, "filter", "conv3d");
  let u = o, c = false;
  o.rank === 4 && (c = true, u = B(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]])), $(u.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${u.rank}.`), $(i.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`), $(u.shape[4] === i.shape[3], () => `Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`), $(qt(t, a), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`), $(r === "NDHWC", () => `Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`), $(Oi(a), () => "Error in conv3D: Dilated rates should be larger than 0."), $(Oi(t), () => "Error in conv3D: Strides should be larger than 0.");
  const l = { x: u, filter: i }, d = { strides: t, pad: s, dataFormat: r, dilations: a }, h = F.runKernel(Ha, l, d);
  return c ? B(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const tb = O({ conv3d_: GD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function HD(n, e, t, s, r) {
  $(n.length === e.rank, () => `Length of inShape (${n.length}) and rank of dy (${e.rank}) must match`);
  let a = n, o = e, i = false;
  e.rank === 4 && (i = true, o = B(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]]), a = [1, n[0], n[1], n[2], n[3]]);
  const u = a[4], c = o.shape[4];
  $(a.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`), $(o.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`), $(t.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${t.rank}`), $(u === t.shape[3], () => `Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${t.shape[3]}.`), $(c === t.shape[4], () => `Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${t.shape[4]}.`);
  const l = { dy: o, filter: t }, d = { pad: r, strides: s, inputShape: a }, h = F.runKernel(ou, l, d);
  return i ? B(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const WI = O({ conv3DBackpropInput_: HD });
function jD(n, e, t, s, r) {
  const a = _(n, "x", "conv3dTranspose"), o = _(e, "filter", "conv3dTranspose");
  return WI(t, a, o, s, r);
}
const nb = O({ conv3dTranspose_: jD });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function qD(n) {
  const t = { x: _(n, "x", "cos", "float32") };
  return F.runKernel(ja, t);
}
const Gd = O({ cos_: qD });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function KD(n) {
  const t = { x: _(n, "x", "cosh", "float32") };
  return F.runKernel(qa, t);
}
const yf = O({ cosh_: KD });
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the 'License');
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an 'AS IS' BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function XD(n, e = 0, t = false, s = false) {
  const a = { x: _(n, "x", "cumprod") }, o = { axis: e, exclusive: t, reverse: s };
  return F.runKernel(iu, a, o);
}
const ud = O({ cumprod_: XD });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function YD(n, e = 0, t = false, s = false) {
  const a = { x: _(n, "x", "cumsum") }, o = { axis: e, exclusive: t, reverse: s };
  return F.runKernel(Ka, a, o);
}
const bf = O({ cumsum_: YD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function QD(n, e, t, s = false) {
  const r = _(n, "x", "denseBincount"), a = _(e, "weights", "denseBincount");
  $(r.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${r.dtype}`), $(r.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`), $(t >= 0, () => `size must be non-negative, but got ${t}.`), $(a.size === r.size || a.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`);
  const o = { x: r, weights: a }, i = { size: t, binaryOutput: s };
  return F.runKernel(Vl, o, i);
}
const Dp = O({ denseBincount_: QD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ZD(n, e, t = "NHWC") {
  const s = _(n, "x", "depthToSpace", "float32"), r = t === "NHWC" ? s.shape[1] : s.shape[2], a = t === "NHWC" ? s.shape[2] : s.shape[3], o = t === "NHWC" ? s.shape[3] : s.shape[1];
  $(e > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${e}`), $(r * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${e}  for depthToSpace with input shape
    ${s.shape}`), $(a * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${a} and ${e} for depthToSpace with input shape
        ${s.shape}`), $(o % (e * e) === 0, () => `Dimension size must be evenly divisible by ${e * e} but is ${o} for depthToSpace with input shape ${s.shape}`);
  const i = { x: s }, u = { blockSize: e, dataFormat: t };
  return F.runKernel(lu, i, u);
}
const sb = O({ depthToSpace_: ZD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function JD(n, e, t, s, r = "NHWC", a = [1, 1], o) {
  const i = _(n, "x", "depthwiseConv2d", "float32"), u = _(e, "filter", "depthwiseConv2d", "float32");
  let c = i, l = false;
  i.rank === 3 && (l = true, c = B(i, [1, i.shape[0], i.shape[1], i.shape[2]])), $(c.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`), $(u.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`);
  const d = r === "NHWC" ? c.shape[3] : c.shape[1];
  $(d === u.shape[2], () => `Error in depthwiseConv2d: number of input channels (${d}) must match the inChannels dimension in filter ${u.shape[2]}.`), Fn("depthwiseConv2d", s, o);
  const h = { x: c, filter: u }, p = { strides: t, pad: s, dataFormat: r, dilations: a, dimRoundingMode: o }, f = F.runKernel(Xa, h, p);
  return l ? B(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const rc = O({ depthwiseConv2d_: JD });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function eA(n) {
  const t = { x: _(n, "x", "diag") };
  return F.runKernel(Ul, t);
}
const VI = O({ diag_: eA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function tA(n, e, t, s, r = [1, 1], a = "NHWC") {
  const o = _(n, "x", "dilation2d"), i = _(e, "filter", "dilation2d");
  $(o.rank === 3 || o.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`), $(i.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`), $(a === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`);
  let u = o, c = false;
  o.rank === 3 && (u = B(o, [1, o.shape[0], o.shape[1], o.shape[2]]), c = true), $(u.shape[3] === i.shape[2], () => `Error in dilation2d:  input and filter must have the same depth: ${u.shape[3]} vs ${i.shape[2]}`);
  const l = { x: u, filter: i }, d = { strides: t, pad: s, dilations: r }, h = F.runKernel(Ya, l, d);
  return c ? B(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const rb = O({ dilation2d_: tA });
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Br(n, e) {
  const t = n.length, s = [];
  for (let r = 0; r < t; r++) {
    const a = t - 1 - r, o = n[a] || 1;
    (e[e.length - 1 - r] || 1) > 1 && o === 1 && s.unshift(a);
  }
  return s;
}
function jt(n, e) {
  const t = [];
  for (let s = 0; s < e.length; s++) {
    const r = n[n.length - s - 1], a = e.length - s - 1, o = e[a];
    (r == null || r === 1 && o > 1) && t.unshift(a);
  }
  return t;
}
function Re(n, e) {
  const t = Math.max(n.length, e.length), s = new Array(t);
  for (let r = 0; r < t; r++) {
    let a = n[n.length - r - 1];
    a == null && (a = 1);
    let o = e[e.length - r - 1];
    if (o == null && (o = 1), a === 1) s[t - r - 1] = o;
    else if (o === 1) s[t - r - 1] = a;
    else if (a !== o) {
      const i = `Operands could not be broadcast together with shapes ${n} and ${e}.`;
      throw Error(i);
    } else s[t - r - 1] = a;
  }
  return s;
}
const nA = Object.freeze(Object.defineProperty({ __proto__: null, assertAndGetBroadcastShape: Re, getBroadcastDims: Br, getReductionAxes: jt }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sA(n, e) {
  let t = _(n, "a", "equal", "string_or_numeric"), s = _(e, "b", "equal", "string_or_numeric");
  [t, s] = Ft(t, s), Re(t.shape, s.shape);
  const r = { a: t, b: s };
  return F.runKernel(du, r);
}
const rs = O({ equal_: sA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function rA(n, e, t) {
  const s = _(e, "a", "where"), r = _(t, "b", "where"), a = _(n, "condition", "where", "bool"), o = Re(Re(a.shape, s.shape), r.shape), i = Si(a, o), u = Si(s, o), c = Si(r, o), l = { condition: i, t: u, e: c };
  return F.runKernel(zu, l);
}
const on = O({ where_: rA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function aA(n) {
  const t = { x: _(n, "x", "zerosLike") };
  return F.runKernel(qu, t);
}
const Ze = O({ zerosLike_: aA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function oA(n, e) {
  let t = _(n, "a", "div"), s = _(e, "b", "div");
  [t, s] = Ft(t, s);
  const r = ve(t, s), a = Ze(r), o = rs(s, a);
  return on(o, a, r);
}
const ab = O({ divNoNan_: oA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function iA(n, e) {
  const t = _(n, "t1", "dot"), s = _(e, "t2", "dot");
  $((t.rank === 1 || t.rank === 2) && (s.rank === 1 || s.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${t.rank} and ${s.rank}.`);
  const r = t.rank === 1 ? t.size : t.shape[1], a = s.rank === 1 ? s.size : s.shape[0];
  if ($(r === a, () => `Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`), t.rank === 1 && s.rank === 1) {
    const o = B(t, [1, -1]), i = B(s, [-1, 1]), u = je(o, i);
    return B(u, []);
  } else if (t.rank === 1 && s.rank === 2) {
    const o = B(t, [1, -1]), i = B(s, [s.shape[0], s.shape[1]]), u = je(o, i);
    return B(u, [u.size]);
  } else if (t.rank === 2 && s.rank === 1) {
    const o = B(s, [-1, 1]), i = je(t, o);
    return B(i, [i.size]);
  } else {
    const o = B(s, [s.shape[0], s.shape[1]]);
    return je(t, o);
  }
}
const ob = O({ dot_: iA });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function uA(n, ...e) {
  const t = e.map((r, a) => _(r, `tensors${a}`, "einsum")), s = { equation: n };
  return F.runKernel(Td, t, s);
}
const mi = O({ einsum_: uA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function lA(n) {
  const t = { x: _(n, "x", "elu", "float32") };
  return F.runKernel(Za, t);
}
const ac = O({ elu_: lA });
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function cA(n, e) {
  const t = _(n, "x", "ensureShape", "string_or_numeric");
  if (!QC(t.shape, e)) throw new Error(`EnsureShape: Shape of tensor ${t.shape} is not compatible with expected shape ${e}`);
  return n;
}
const UI = O({ ensureShape_: cA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function dA(n) {
  let e = _(n, "x", "erf");
  $(e.dtype === "int32" || e.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), e.dtype === "int32" && (e = ue(e, "float32"));
  const t = { x: e };
  return F.runKernel(Ja, t);
}
const xf = O({ erf_: dA });
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ib(n, e) {
  for (let t = 0; t < n.length; ++t) if (n[n.length - t - 1] !== e - 1 - t) return false;
  return true;
}
function GI(n, e, t) {
  const s = n.length + e.length, r = [];
  let a = 0, o = 0;
  for (let i = 0; i < s; i++) t.indexOf(i) === -1 ? r.push(n[a++]) : r.push(e[o++]);
  return r;
}
function xt(n, e) {
  const t = [], s = n.length;
  for (let a = 0; a < s; a++) e.indexOf(a) === -1 && t.push(n[a]);
  const r = e.map((a) => n[a]);
  return [t, r];
}
function ft(n, e) {
  const t = e.map((s) => 1);
  return GI(n, t, e);
}
function mt(n, e, t) {
  $(ib(e, t), () => `${n} supports only inner-most axes for now. Got axes ${e} and rank-${t} input.`);
}
function ct(n, e) {
  if (ib(n, e)) return null;
  const t = [];
  for (let s = 0; s < e; ++s) n.indexOf(s) === -1 && t.push(s);
  return n.forEach((s) => t.push(s)), t;
}
function Ls(n) {
  return n.map((e, t) => [t, e]).sort((e, t) => e[1] - t[1]).map((e) => e[0]);
}
function it(n, e) {
  const t = [];
  for (let s = e - n; s < e; ++s) t.push(s);
  return t;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function hA(n, e = null, t = false) {
  const r = { x: _(n, "x", "max") }, a = { reductionIndices: e, keepDims: t };
  return F.runKernel(mo, r, a);
}
const Is = O({ max_: hA });
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function pA(n, e = null, t = false) {
  const r = { x: _(n, "x", "min") }, a = { axis: e, keepDims: t };
  return F.runKernel(xo, r, a);
}
const Sl = O({ min_: pA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function fA(n, e) {
  let t = _(n, "base", "pow"), s = _(e, "exp", "pow");
  [t, s] = Ft(t, s);
  const r = { a: t, b: s };
  return F.runKernel(ko, r);
}
const xr = O({ pow_: fA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ne(n, e) {
  if ((Yt(n) && e !== "string" || Array.isArray(n)) && e !== "complex64") throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (e === "string" && Yt(n) && !(n instanceof Uint8Array)) throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return Qo(n, [], [], e);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function mA(n) {
  const t = { x: _(n, "x", "sqrt", "float32") };
  return F.runKernel(Uo, t);
}
const ln = O({ sqrt_: mA });
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function gA(n) {
  const e = _(n, "x", "square"), t = {};
  return F.runKernel("Square", { x: e }, t);
}
const yt = O({ square_: gA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function yA(n, e = null, t = false) {
  let s = _(n, "x", "sum");
  s.dtype === "bool" && (s = ue(s, "int32"));
  const r = { x: s }, a = { axis: e, keepDims: t };
  return F.runKernel(Go, r, a);
}
const we = O({ sum_: yA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function bA(n, e = "euclidean", t = null, s = false) {
  n = _(n, "x", "norm");
  const r = HI(n, e, t);
  let a = r.shape;
  if (s) {
    const o = Ee(t, n.shape);
    a = ft(r.shape, o);
  }
  return B(r, a);
}
function HI(n, e, t = null) {
  if (n.rank === 0) return Vt(n);
  if (n.rank !== 1 && t === null) return HI(B(n, [-1]), e, t);
  if (n.rank === 1 || typeof t == "number" || Array.isArray(t) && t.length === 1) {
    if (e === 1) return we(Vt(n), t);
    if (e === 1 / 0) return Is(Vt(n), t);
    if (e === -1 / 0) return Sl(Vt(n), t);
    if (e === "euclidean" || e === 2) return ln(we(xr(Vt(n), Ne(2, "int32")), t));
    throw new Error(`Error in norm: invalid ord value: ${e}`);
  }
  if (Array.isArray(t) && t.length === 2) {
    if (e === 1) return Is(we(Vt(n), t[0]), t[1] - 1);
    if (e === 1 / 0) return Is(we(Vt(n), t[1]), t[0]);
    if (e === -1 / 0) return Sl(we(Vt(n), t[1]), t[0]);
    if (e === "fro" || e === "euclidean") return ln(we(yt(n), t));
    throw new Error(`Error in norm: invalid ord value: ${e}`);
  }
  throw new Error(`Error in norm: invalid axis: ${t}`);
}
const oc = O({ norm_: bA });
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function xA(n, e = null, t = false) {
  return oc(n, "euclidean", e, t);
}
const ub = O({ euclideanNorm_: xA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function wA(n) {
  const t = { x: _(n, "x", "exp") };
  return F.runKernel(eo, t);
}
const qn = O({ exp_: wA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function CA(n, e = 0) {
  const t = _(n, "x", "expandDims", "string_or_numeric");
  $(e <= t.rank, () => "Axis must be <= rank of the tensor");
  const s = { input: t }, r = { dim: e };
  return F.runKernel(hu, s, r);
}
const mn = O({ expandDims_: CA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function IA(n) {
  const t = { x: _(n, "x", "expm1") };
  return F.runKernel(to, t);
}
const lb = O({ expm1_: IA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function SA(n, e) {
  const t = _(n, "x", "tile", "string_or_numeric");
  $(t.rank === e.length, () => `Error in transpose: rank of input ${t.rank} must match length of reps ${e}.`);
  const s = { x: t }, r = { reps: e };
  return F.runKernel(Hr, s, r);
}
const bs = O({ tile_: SA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function vA(n, e, t, s = "float32") {
  e == null && (e = n);
  const r = Oe([n, e], s), a = n <= e ? n : e;
  for (let i = 0; i < a; ++i) r.set(1, i, i);
  const o = B(r.toTensor(), [n, e]);
  if (t == null) return o;
  if (t.length === 1) return bs(mn(o, 0), [t[0], 1, 1]);
  if (t.length === 2) return bs(mn(mn(o, 0), 0), [t[0], t[1], 1, 1]);
  if (t.length === 3) return bs(mn(mn(mn(o, 0), 0), 0), [t[0], t[1], t[2], 1, 1]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${t.length}D.`);
}
const wf = O({ eye_: vA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function $A(n) {
  const t = { x: _(n, "x", "floor", "float32") };
  return F.runKernel(no, t);
}
const ic = O({ floor_: $A });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function kA(n, e, t = 0, s = 0) {
  const r = _(n, "x", "gather"), a = _(e, "indices", "gather", "int32"), o = { x: r, indices: a }, i = { axis: t, batchDims: s };
  return F.runKernel(fu, o, i);
}
const uc = O({ gather_: kA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function NA(n, e) {
  let t = _(n, "a", "greater", "string_or_numeric"), s = _(e, "b", "greater", "string_or_numeric");
  [t, s] = Ft(t, s), Re(t.shape, s.shape);
  const r = { a: t, b: s };
  return F.runKernel(gu, r);
}
const On = O({ greater_: NA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function TA(n, e) {
  let t = _(n, "a", "greaterEqual", "string_or_numeric"), s = _(e, "b", "greaterEqual", "string_or_numeric");
  [t, s] = Ft(t, s), Re(t.shape, s.shape);
  const r = { a: t, b: s };
  return F.runKernel(ao, r);
}
const Kr = O({ greaterEqual_: TA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function RA(n) {
  const t = { input: _(n, "input", "imag") };
  return F.runKernel(Ed, t);
}
const Hd = O({ imag_: RA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _A(n) {
  const t = { x: _(n, "x", "isFinite") };
  return F.runKernel(io, t);
}
const cb = O({ isFinite_: _A });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function EA(n) {
  const t = { x: _(n, "x", "isInf") };
  return F.runKernel(uo, t);
}
const db = O({ isInf_: EA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function DA(n) {
  const t = { x: _(n, "x", "isNaN") };
  return F.runKernel(lo, t);
}
const hb = O({ isNaN_: DA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function AA(n, e = 0.2) {
  const s = { x: _(n, "x", "leakyRelu") }, r = { alpha: e };
  return F.runKernel(co, s, r);
}
const jd = O({ leakyRelu_: AA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function FA(n, e) {
  let t = _(n, "a", "less", "string_or_numeric"), s = _(e, "b", "less", "string_or_numeric");
  [t, s] = Ft(t, s), Re(t.shape, s.shape);
  const r = { a: t, b: s };
  return F.runKernel(yu, r);
}
const vl = O({ less_: FA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function OA(n, e) {
  let t = _(n, "a", "lessEqual", "string_or_numeric"), s = _(e, "b", "lessEqual", "string_or_numeric");
  [t, s] = Ft(t, s), Re(t.shape, s.shape);
  const r = { a: t, b: s };
  return F.runKernel(bu, r);
}
const Zo = O({ lessEqual_: OA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function jI(n, e, t) {
  if (t <= 0) throw new Error("The number of values should be positive.");
  const s = { start: n, stop: e, num: t };
  return F.runKernel(xu, {}, s);
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function PA(n, e = 5, t = 1, s = 1, r = 0.5) {
  const a = _(n, "x", "localResponseNormalization");
  $(a.rank === 4 || a.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${a.rank}.`), $(Ni(e), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);
  let o = a, i = false;
  a.rank === 3 && (i = true, o = B(a, [1, a.shape[0], a.shape[1], a.shape[2]]));
  const u = { x: o }, c = { depthRadius: e, bias: t, alpha: s, beta: r }, l = F.runKernel(fo, u, c);
  return i ? B(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
}
const pb = O({ localResponseNormalization_: PA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function LA(n) {
  const t = { x: _(n, "x", "log", "float32") };
  return F.runKernel(ho, t);
}
const as = O({ log_: LA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function zA(n) {
  const t = { x: _(n, "x", "log1p") };
  return F.runKernel(po, t);
}
const qd = O({ log1p_: zA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function MA(n) {
  return $(ya(n), () => "The f passed in grad(f) must be a function"), (e, t) => {
    const s = _(e, "x", "tf.grad", "string_or_numeric"), r = t != null ? _(t, "dy", "tf.grad") : null;
    return F.tidy(() => {
      const { value: a, grads: o } = F.gradients(() => n(s), [s], r);
      return r != null && nn(a.shape, r.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), Cf(o), o[0];
    });
  };
}
function BA(n) {
  return $(ya(n), () => "The f passed in grads(f) must be a function"), (e, t) => {
    $(Array.isArray(e), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
    const s = rd(e, "args", "tf.grads", "string_or_numeric"), r = t != null ? _(t, "dy", "tf.grads") : null;
    return F.tidy(() => {
      const { value: a, grads: o } = F.gradients(() => n(...s), s, r);
      return r != null && nn(a.shape, r.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Cf(o), o;
    });
  };
}
function WA(n) {
  return $(ya(n), () => "The f passed in valueAndGrad(f) must be a function"), (e, t) => {
    $(e instanceof tt, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), $(t == null || t instanceof tt, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
    const { grads: s, value: r } = F.gradients(() => n(e), [e], t);
    return Cf(s), { grad: s[0], value: r };
  };
}
function VA(n) {
  return $(ya(n), () => "The f passed in valueAndGrads(f) must be a function"), (e, t) => {
    $(Array.isArray(e) && e.every((r) => r instanceof tt), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), $(t == null || t instanceof tt, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
    const s = F.gradients(() => n(...e), e, t);
    return t != null && nn(s.value.shape, t.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Cf(s.grads), s;
  };
}
function qI(n, e) {
  $(ya(n), () => "The f passed in variableGrads(f) must be a function"), $(e == null || Array.isArray(e) && e.every((c) => c instanceof sd), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  const t = e != null;
  if (!t) {
    e = [];
    for (const c in F.registeredVariables) e.push(F.registeredVariables[c]);
  }
  const s = t ? e.filter((c) => !c.trainable) : null, r = e.length;
  e = e.filter((c) => c.trainable), $(e.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);
  const a = true, { value: o, grads: i } = F.gradients(n, e, null, a);
  $(i.some((c) => c != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), $(o.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${o.rank} tensor`);
  const u = {};
  return e.forEach((c, l) => {
    i[l] != null && (u[c.name] = i[l]);
  }), s == null ? void 0 : s.forEach((c) => u[c.name] = null), { value: o, grads: u };
}
function wr(n) {
  return F.customGrad(n);
}
function Cf(n) {
  if (n.filter((t) => t == null).length > 0) throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function UA(n) {
  const t = { x: _(n, "x", "neg") };
  return F.runKernel(ku, t);
}
const St = O({ neg_: UA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function GA(n) {
  const t = { x: _(n, "x", "softplus") };
  return F.runKernel(Vo, t);
}
const Yu = O({ softplus_: GA });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function HA(n) {
  const e = _(n, "x", "logSigmoid");
  return wr((s) => ({ value: St(Yu(St(s))), gradFunc: (o) => z(o, Ks(St(s))) }))(e);
}
const fb = O({ logSigmoid_: HA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function jA(n, e) {
  let t = _(n, "a", "sub"), s = _(e, "b", "sub");
  [t, s] = Ft(t, s);
  const r = { a: t, b: s };
  return F.runKernel(qo, r);
}
const xe = O({ sub_: jA });
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function qA(n, e = -1) {
  const t = _(n, "logits", "logSoftmax");
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1) throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and axis was ${e}`);
  return wr((r, a) => {
    const i = Is(r, e, true), u = xe(r, i), c = xe(ue(u, "float32"), as(we(qn(u), e, true)));
    return a([c]), { value: c, gradFunc: (d, h) => {
      const [p] = h, f = true, m = qn(p);
      return xe(d, z(we(d, e, f), m));
    } };
  })(t);
}
const If = O({ logSoftmax_: qA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function KA(n, e = null, t = false) {
  const s = _(n, "x", "logSumExp"), r = Ee(e, s.shape), a = Is(s, r, true), o = xe(s, a), i = qn(o), u = we(i, r), c = as(u), l = te(B(a, c.shape), c);
  if (t) {
    const d = ft(l.shape, r);
    return B(l, d);
  }
  return l;
}
const Kd = O({ logSumExp_: KA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function XA(n, e) {
  const t = _(n, "a", "logicalAnd", "bool"), s = _(e, "b", "logicalAnd", "bool");
  Re(t.shape, s.shape);
  const r = { a: t, b: s };
  return F.runKernel(wu, r);
}
const Ps = O({ logicalAnd_: XA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function YA(n) {
  const t = { x: _(n, "x", "logicalNot", "bool") };
  return F.runKernel(Cu, t);
}
const Xd = O({ logicalNot_: YA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function QA(n, e) {
  const t = _(n, "a", "logicalOr", "bool"), s = _(e, "b", "logicalOr", "bool");
  Re(t.shape, s.shape);
  const r = { a: t, b: s };
  return F.runKernel(Iu, r);
}
const Sf = O({ logicalOr_: QA });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ZA(n, e) {
  const t = _(n, "a", "logicalXor", "bool"), s = _(e, "b", "logicalXor", "bool");
  return Re(t.shape, s.shape), Ps(Sf(n, e), Xd(Ps(n, e)));
}
const mb = O({ logicalXor_: ZA });
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Yh = 2147483648;
function JA(n, e, t = "left") {
  const s = _(n, "sortedSequence", "searchSorted"), r = _(e, "values", "searchSorted"), a = s.shape[s.shape.length - 1], o = r.shape[r.shape.length - 1], i = B(s, [-1, a]), u = B(r, [-1, o]);
  if (i.rank < 2) throw new Error("Sorted input argument must be at least 2-dimensional");
  if (i.shape[0] !== u.shape[0]) throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");
  if (A(u.shape) >= Yh) throw new Error(`values tensor size must less than ${Yh}`);
  if (i.shape[1] >= Yh) throw new Error(`trailing dim_size must less than ${Yh} for int32 output type, was ${i.shape[1]}`);
  const c = { sortedSequence: i, values: u }, l = { side: t };
  return F.runKernel(Lu, c, l);
}
const vf = O({ searchSorted_: JA });
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function KI(n, e) {
  return vf(n, e, "left");
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function e3(n, e, t, s, r) {
  const a = _(n, "x", "maxPool"), o = 1;
  let i = a, u = false;
  a.rank === 3 && (u = true, i = B(a, [1, a.shape[0], a.shape[1], a.shape[2]])), $(i.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${i.rank}.`), $(qt(t, o), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`), Fn("maxPool", s, r);
  const c = { x: i }, l = { filterSize: e, strides: t, pad: s, dimRoundingMode: r }, d = F.runKernel(yo, c, l);
  return u ? B(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const Yd = O({ maxPool_: e3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function t3(n, e = [1, 1, 1], t, s, r, a = "NDHWC") {
  const o = _(n, "x", "maxPool3d");
  let i = o, u = false;
  o.rank === 4 && (u = true, i = B(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]])), $(i.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`), $(a === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`), Fn("maxPool3d", s, r);
  const c = { x: i }, l = { filterSize: e, strides: t, pad: s, dimRoundingMode: r, dataFormat: a }, d = F.runKernel(vu, c, l);
  return u ? B(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const gb = O({ maxPool3d_: t3 });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function n3(n, e, t, s, r = false) {
  const o = { x: _(n, "x", "maxPoolWithArgmax") }, i = { filterSize: e, strides: t, pad: s, includeBatchInIndex: r }, u = F.runKernel(ql, o, i);
  return { result: u[0], indexes: u[1] };
}
const XI = O({ maxPoolWithArgmax_: n3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function s3(n, e) {
  let t = _(n, "a", "maximum"), s = _(e, "b", "maximum");
  [t, s] = Ft(t, s), t.dtype === "bool" && (t = ue(t, "int32"), s = ue(s, "int32")), Re(t.shape, s.shape);
  const r = { a: t, b: s };
  return F.runKernel(go, r);
}
const Sr = O({ maximum_: s3 });
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function r3(n, e = null, t = false) {
  const r = { x: _(n, "x", "mean") }, a = { axis: e, keepDims: t };
  return F.runKernel(bo, r, a);
}
const Et = O({ mean_: r3 });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ot(n, e = "float32") {
  if (ls(n), e === "complex64") {
    const s = Ot(n, "float32"), r = Ot(n, "float32");
    return zr(s, r);
  }
  const t = un(A(n), e);
  return F.makeTensor(t, n, e);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Bn(n, e = "float32") {
  if (ls(n), e === "complex64") {
    const s = Bn(n, "float32"), r = Ot(n, "float32");
    return zr(s, r);
  }
  const t = uf(A(n), e);
  return F.makeTensor(t, n, e);
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function YI(n, e, { indexing: t = "xy" } = {}) {
  if (t !== "xy" && t !== "ij") throw new TypeError(`${t} is not a valid third argument to meshgrid`);
  if (n === void 0) return [];
  let s = _(n, "x", "meshgrid", n instanceof tt ? n.dtype : "float32");
  if (e === void 0) return [s];
  let r = _(e, "y", "meshgrid", e instanceof tt ? e.dtype : "float32");
  const a = A(s.shape), o = A(r.shape);
  return t === "xy" ? (s = B(s, [1, -1]), r = B(r, [-1, 1]), [je(Bn([o, 1], s.dtype), s), je(r, Bn([1, a], r.dtype))]) : (s = B(s, [-1, 1]), r = B(r, [1, -1]), [je(s, Bn([1, o], s.dtype)), je(Bn([a, 1], r.dtype), r)]);
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function a3(n, e) {
  let t = _(n, "a", "minimum"), s = _(e, "b", "minimum");
  [t, s] = Ft(t, s), t.dtype === "bool" && (t = ue(t, "int32"), s = ue(s, "int32")), Re(t.shape, s.shape);
  const r = { a: t, b: s };
  return F.runKernel(wo, r);
}
const va = O({ minimum_: a3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function o3(n, e, t) {
  $(t === "reflect" || t === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${t}.`);
  const s = _(n, "x", "mirrorPad");
  if (s.rank === 0) throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  $(e.length === s.rank, () => `Padding doesn't match input. Must be ${s.rank}. Got ${e.length}.`);
  const r = t === "reflect" ? 1 : 0;
  for (let i = 0; i < s.rank; i++) $(e[i].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), $(e[i][0] >= 0 && e[i][0] <= s.shape[i] - r && e[i][1] >= 0 && e[i][1] <= s.shape[i] - r, () => `Padding in dimension ${i} cannot be greater than or equal to ${s.shape[i] - r} or less than 0 for input of shape ${s.shape}`);
  const a = { paddings: e, mode: t }, o = { x: s };
  return F.runKernel(Co, o, a);
}
const yb = O({ mirrorPad_: o3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function i3(n, e) {
  let t = _(n, "a", "mod"), s = _(e, "b", "mod");
  [t, s] = Ft(t, s);
  const r = { a: t, b: s };
  return F.runKernel(Io, r);
}
const bb = O({ mod_: i3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function u3(n, e = null, t = false) {
  n = _(n, "x", "moments");
  const s = Ee(e, n.shape), r = Et(n, s, t);
  let a = r.shape;
  t || (a = ft(r.shape, s));
  const o = yt(xe(ue(n, "float32"), B(r, a))), i = Et(o, s, t);
  return { mean: r, variance: i };
}
const Qd = O({ moments_: u3 });
function l3(n, e, t, s) {
  const r = _(e, "data", "multiRNNCell"), a = rd(t, "c", "multiRNNCell"), o = rd(s, "h", "multiRNNCell");
  let i = r;
  const u = [];
  for (let d = 0; d < n.length; d++) {
    const h = n[d](i, a[d], o[d]);
    u.push(h[0]), u.push(h[1]), i = h[1];
  }
  const c = [], l = [];
  for (let d = 0; d < u.length; d += 2) c.push(u[d]), l.push(u[d + 1]);
  return [c, l];
}
const QI = O({ multiRNNCell_: l3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function c3(n, e, t, s = false) {
  const r = _(n, "logits", "multinomial"), a = r.size, o = r.rank;
  if (a < 2) throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);
  if (o > 2) throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);
  t = t || Math.random();
  const u = { logits: o === 1 ? B(r, [1, -1]) : r }, c = { numSamples: e, seed: t, normalized: s }, l = F.runKernel($u, u, c);
  return o === 1 ? B(l, [l.size]) : l;
}
const ZI = O({ multinomial_: c3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function d3(n, e) {
  let t = _(n, "a", "notEqual", "string_or_numeric"), s = _(e, "b", "notEqual", "string_or_numeric");
  [t, s] = Ft(t, s), Re(t.shape, s.shape);
  const r = { a: t, b: s };
  return F.runKernel(Nu, r);
}
const Pi = O({ notEqual_: d3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function h3(n, e, t = 1, s = 0, r = "int32") {
  if (e < 2) throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);
  const o = { indices: _(n, "indices", "oneHot", "int32") }, i = { dtype: r, depth: e, onValue: t, offValue: s };
  return F.runKernel(vo, o, i);
}
const $l = O({ oneHot_: h3 });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function p3(n) {
  const t = { x: _(n, "x", "onesLike") };
  return F.runKernel(_u, t);
}
const os = O({ onesLike_: p3 });
function f3(n, e) {
  const t = _(n, "v1", "outerProduct"), s = _(e, "v2", "outerProduct");
  $(t.rank === 1 && s.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${t.rank} and ${s.rank}.`);
  const r = B(t, [-1, 1]), a = B(s, [1, -1]);
  return je(r, a);
}
const JI = O({ outerProduct_: f3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function m3(n, e, t = 0) {
  const s = _(n, "x", "pad");
  if (s.rank === 0) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  const r = { paddings: e, constantValue: t }, a = { x: s };
  return F.runKernel($o, a, r);
}
const Xr = O({ pad_: m3 });
function g3(n, e, t = 0) {
  return $(e.length === 2, () => "Invalid number of paddings. Must be length of 2."), Xr(n, [e], t);
}
const eS = O({ pad1d_: g3 });
function y3(n, e, t = 0) {
  return $(e.length === 2 && e[0].length === 2 && e[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Xr(n, e, t);
}
const tS = O({ pad2d_: y3 });
function b3(n, e, t = 0) {
  return $(e.length === 3 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Xr(n, e, t);
}
const nS = O({ pad3d_: b3 });
function x3(n, e, t = 0) {
  return $(e.length === 4 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2 && e[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Xr(n, e, t);
}
const sS = O({ pad4d_: x3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function w3(n, e, t) {
  const s = _(n, "x", "spaceToBatchND");
  $(s.rank >= 1 + e.length, () => `input rank ${s.rank} should be > than [blockShape] ${e.length}`), $(t.length === e.length, () => `paddings.shape[0] ${t.length} must be equal to [blockShape] ${e.length}`), $(s.shape.reduce((o, i, u) => u > 0 && u <= e.length ? o && (i + t[u - 1][0] + t[u - 1][1]) % e[u - 1] === 0 : o, true), () => `input spatial dimensions ${s.shape.slice(1)} with paddings ${t.toString()} must be divisible by blockShapes ${e.toString()}`);
  const r = { x: s }, a = { blockShape: e, paddings: t };
  return F.runKernel(Bu, r, a);
}
const Zd = O({ spaceToBatchND_: w3 });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function C3(n, e, t, s, r, a, o) {
  r == null && (r = [1, 1]), a == null && (a = 1), s === 0 && (s = "valid");
  const i = _(n, "x", "maxPool");
  let u = i, c = false;
  i.rank === 3 && (c = true, u = B(i, [1, i.shape[0], i.shape[1], i.shape[2]])), $(qt(a, r), () => `Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`);
  const l = zt(u.shape, e, a, r, s), d = [l.dilationHeight, l.dilationWidth];
  let h;
  s === "same" ? h = S3([l.filterHeight, l.filterWidth], d) : h = [[0, 0], [0, 0]];
  const p = d[0] === 1 && d[1] === 1, [f, m] = I3([l.inHeight, l.inWidth], d, h), g = p ? s : "valid", y = p ? u : Zd(u, d, f), x = (t === "avg" ? () => Vd(y, e, a, g, o) : () => Yd(y, e, a, g, o))(), w = p ? x : Ud(x, d, m);
  return c ? B(w, [w.shape[1], w.shape[2], w.shape[3]]) : w;
}
function I3(n, e, t) {
  const s = t.map((l) => l[0]), r = t.map((l) => l[1]), a = n.concat(s, r), o = e.map((l, d) => (l - a[d] % l) % l), i = r.map((l, d) => l + o[d]), u = e.map((l, d) => [s[d], i[d]]), c = e.map((l, d) => [0, o[d]]);
  return [u, c];
}
function S3(n, e) {
  const s = n.map((o, i) => o + (o - 1) * (e[i] - 1)).map((o) => o - 1), r = s.map((o) => Math.floor(o / 2)), a = s.map((o, i) => o - r[i]);
  return s.map((o, i) => [r[i], a[i]]);
}
const xb = O({ pool_: C3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function v3(n, e) {
  const t = _(n, "x", "prelu"), s = _(e, "alpha", "prelu"), r = { x: t, alpha: s };
  return F.runKernel(No, r);
}
const Jd = O({ prelu_: v3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function $3(n, e = null, t = false) {
  let s = _(n, "x", "prod");
  s.dtype === "bool" && (s = ue(s, "int32"));
  const r = { x: s }, a = { axis: e, keepDims: t };
  return F.runKernel(To, r, a);
}
const wb = O({ prod_: $3 });
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function k3(n, e, t, s) {
  const r = n.map((l, d) => _(l, `tensors${d}`, "raggedGather", "int32")), a = _(e, "paramsDenseValues", "raggedGather"), o = _(t, "indices", "raggedGather", "int32"), i = { paramsNestedSplits: r, paramsDenseValues: a, indices: o }, u = { outputRaggedRank: s }, c = F.runKernel(lf, i, u);
  return { outputNestedSplits: c.slice(0, c.length - 1), outputDenseValues: c[c.length - 1] };
}
const rS = O({ raggedGather_: k3 });
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function N3(n, e, t) {
  const s = _(n, "starts", "raggedRange"), r = _(e, "limits", "raggedRange", s.dtype), a = _(t, "deltas", "raggedRange", s.dtype), o = { starts: s, limits: r, deltas: a }, i = F.runKernel(cf, o);
  return { rtNestedSplits: i[0], rtDenseValues: i[1] };
}
const aS = O({ raggedRange_: N3 });
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function T3(n, e, t, s, r) {
  const a = _(n, "shape", "raggedTensorToTensor", "int32"), o = _(e, "values", "raggedTensorToTensor"), i = _(t, "defaultValue", "raggedTensorToTensor", o.dtype), u = s.map((d, h) => _(d, `tensors${h}`, "raggedTensorToTensor", "int32")), c = { shape: a, values: o, defaultValue: i, rowPartitionTensors: u }, l = { rowPartitionTypes: r };
  return F.runKernel(df, c, l);
}
const oS = O({ raggedTensorToTensor_: T3 });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function R3(n, e, t) {
  ls(n);
  const s = A(n);
  let r = null;
  if (t == null || t === "float32") r = new Float32Array(s);
  else if (t === "int32") r = new Int32Array(s);
  else if (t === "bool") r = new Uint8Array(s);
  else throw new Error(`Unknown data type ${t}`);
  for (let a = 0; a < s; a++) r[a] = e();
  return F.makeTensor(r, n, t);
}
const iS = O({ rand_: R3 });
var hp = { exports: {} }, _3 = hp.exports, Z0;
function E3() {
  return Z0 || (Z0 = 1, function(n) {
    (function(e, t, s) {
      function r(u) {
        var c = this, l = i();
        c.next = function() {
          var d = 2091639 * c.s0 + c.c * 23283064365386963e-26;
          return c.s0 = c.s1, c.s1 = c.s2, c.s2 = d - (c.c = d | 0);
        }, c.c = 1, c.s0 = l(" "), c.s1 = l(" "), c.s2 = l(" "), c.s0 -= l(u), c.s0 < 0 && (c.s0 += 1), c.s1 -= l(u), c.s1 < 0 && (c.s1 += 1), c.s2 -= l(u), c.s2 < 0 && (c.s2 += 1), l = null;
      }
      function a(u, c) {
        return c.c = u.c, c.s0 = u.s0, c.s1 = u.s1, c.s2 = u.s2, c;
      }
      function o(u, c) {
        var l = new r(u), d = c && c.state, h = l.next;
        return h.int32 = function() {
          return l.next() * 4294967296 | 0;
        }, h.double = function() {
          return h() + (h() * 2097152 | 0) * 11102230246251565e-32;
        }, h.quick = h, d && (typeof d == "object" && a(d, l), h.state = function() {
          return a(l, {});
        }), h;
      }
      function i() {
        var u = 4022871197, c = function(l) {
          l = String(l);
          for (var d = 0; d < l.length; d++) {
            u += l.charCodeAt(d);
            var h = 0.02519603282416938 * u;
            u = h >>> 0, h -= u, h *= u, u = h >>> 0, h -= u, u += h * 4294967296;
          }
          return (u >>> 0) * 23283064365386963e-26;
        };
        return c;
      }
      t && t.exports ? t.exports = o : this.alea = o;
    })(_3, n);
  }(hp)), hp.exports;
}
var pp = { exports: {} }, D3 = pp.exports, J0;
function A3() {
  return J0 || (J0 = 1, function(n) {
    (function(e, t, s) {
      function r(i) {
        var u = this, c = "";
        u.x = 0, u.y = 0, u.z = 0, u.w = 0, u.next = function() {
          var d = u.x ^ u.x << 11;
          return u.x = u.y, u.y = u.z, u.z = u.w, u.w ^= u.w >>> 19 ^ d ^ d >>> 8;
        }, i === (i | 0) ? u.x = i : c += i;
        for (var l = 0; l < c.length + 64; l++) u.x ^= c.charCodeAt(l) | 0, u.next();
      }
      function a(i, u) {
        return u.x = i.x, u.y = i.y, u.z = i.z, u.w = i.w, u;
      }
      function o(i, u) {
        var c = new r(i), l = u && u.state, d = function() {
          return (c.next() >>> 0) / 4294967296;
        };
        return d.double = function() {
          do
            var h = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (h + p) / (1 << 21);
          while (f === 0);
          return f;
        }, d.int32 = c.next, d.quick = d, l && (typeof l == "object" && a(l, c), d.state = function() {
          return a(c, {});
        }), d;
      }
      t && t.exports ? t.exports = o : this.xor128 = o;
    })(D3, n);
  }(pp)), pp.exports;
}
var fp = { exports: {} }, F3 = fp.exports, e1;
function O3() {
  return e1 || (e1 = 1, function(n) {
    (function(e, t, s) {
      function r(i) {
        var u = this, c = "";
        u.next = function() {
          var d = u.x ^ u.x >>> 2;
          return u.x = u.y, u.y = u.z, u.z = u.w, u.w = u.v, (u.d = u.d + 362437 | 0) + (u.v = u.v ^ u.v << 4 ^ (d ^ d << 1)) | 0;
        }, u.x = 0, u.y = 0, u.z = 0, u.w = 0, u.v = 0, i === (i | 0) ? u.x = i : c += i;
        for (var l = 0; l < c.length + 64; l++) u.x ^= c.charCodeAt(l) | 0, l == c.length && (u.d = u.x << 10 ^ u.x >>> 4), u.next();
      }
      function a(i, u) {
        return u.x = i.x, u.y = i.y, u.z = i.z, u.w = i.w, u.v = i.v, u.d = i.d, u;
      }
      function o(i, u) {
        var c = new r(i), l = u && u.state, d = function() {
          return (c.next() >>> 0) / 4294967296;
        };
        return d.double = function() {
          do
            var h = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (h + p) / (1 << 21);
          while (f === 0);
          return f;
        }, d.int32 = c.next, d.quick = d, l && (typeof l == "object" && a(l, c), d.state = function() {
          return a(c, {});
        }), d;
      }
      t && t.exports ? t.exports = o : this.xorwow = o;
    })(F3, n);
  }(fp)), fp.exports;
}
var mp = { exports: {} }, P3 = mp.exports, t1;
function L3() {
  return t1 || (t1 = 1, function(n) {
    (function(e, t, s) {
      function r(i) {
        var u = this;
        u.next = function() {
          var l = u.x, d = u.i, h, p;
          return h = l[d], h ^= h >>> 7, p = h ^ h << 24, h = l[d + 1 & 7], p ^= h ^ h >>> 10, h = l[d + 3 & 7], p ^= h ^ h >>> 3, h = l[d + 4 & 7], p ^= h ^ h << 7, h = l[d + 7 & 7], h = h ^ h << 13, p ^= h ^ h << 9, l[d] = p, u.i = d + 1 & 7, p;
        };
        function c(l, d) {
          var h, p = [];
          if (d === (d | 0)) p[0] = d;
          else for (d = "" + d, h = 0; h < d.length; ++h) p[h & 7] = p[h & 7] << 15 ^ d.charCodeAt(h) + p[h + 1 & 7] << 13;
          for (; p.length < 8; ) p.push(0);
          for (h = 0; h < 8 && p[h] === 0; ++h) ;
          for (h == 8 ? p[7] = -1 : p[h], l.x = p, l.i = 0, h = 256; h > 0; --h) l.next();
        }
        c(u, i);
      }
      function a(i, u) {
        return u.x = i.x.slice(), u.i = i.i, u;
      }
      function o(i, u) {
        i == null && (i = +/* @__PURE__ */ new Date());
        var c = new r(i), l = u && u.state, d = function() {
          return (c.next() >>> 0) / 4294967296;
        };
        return d.double = function() {
          do
            var h = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (h + p) / (1 << 21);
          while (f === 0);
          return f;
        }, d.int32 = c.next, d.quick = d, l && (l.x && a(l, c), d.state = function() {
          return a(c, {});
        }), d;
      }
      t && t.exports ? t.exports = o : this.xorshift7 = o;
    })(P3, n);
  }(mp)), mp.exports;
}
var gp = { exports: {} }, z3 = gp.exports, n1;
function M3() {
  return n1 || (n1 = 1, function(n) {
    (function(e, t, s) {
      function r(i) {
        var u = this;
        u.next = function() {
          var l = u.w, d = u.X, h = u.i, p, f;
          return u.w = l = l + 1640531527 | 0, f = d[h + 34 & 127], p = d[h = h + 1 & 127], f ^= f << 13, p ^= p << 17, f ^= f >>> 15, p ^= p >>> 12, f = d[h] = f ^ p, u.i = h, f + (l ^ l >>> 16) | 0;
        };
        function c(l, d) {
          var h, p, f, m, g, y = [], b = 128;
          for (d === (d | 0) ? (p = d, d = null) : (d = d + "\0", p = 0, b = Math.max(b, d.length)), f = 0, m = -32; m < b; ++m) d && (p ^= d.charCodeAt((m + 32) % d.length)), m === 0 && (g = p), p ^= p << 10, p ^= p >>> 15, p ^= p << 4, p ^= p >>> 13, m >= 0 && (g = g + 1640531527 | 0, h = y[m & 127] ^= p + g, f = h == 0 ? f + 1 : 0);
          for (f >= 128 && (y[(d && d.length || 0) & 127] = -1), f = 127, m = 4 * 128; m > 0; --m) p = y[f + 34 & 127], h = y[f = f + 1 & 127], p ^= p << 13, h ^= h << 17, p ^= p >>> 15, h ^= h >>> 12, y[f] = p ^ h;
          l.w = g, l.X = y, l.i = f;
        }
        c(u, i);
      }
      function a(i, u) {
        return u.i = i.i, u.w = i.w, u.X = i.X.slice(), u;
      }
      function o(i, u) {
        i == null && (i = +/* @__PURE__ */ new Date());
        var c = new r(i), l = u && u.state, d = function() {
          return (c.next() >>> 0) / 4294967296;
        };
        return d.double = function() {
          do
            var h = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (h + p) / (1 << 21);
          while (f === 0);
          return f;
        }, d.int32 = c.next, d.quick = d, l && (l.X && a(l, c), d.state = function() {
          return a(c, {});
        }), d;
      }
      t && t.exports ? t.exports = o : this.xor4096 = o;
    })(z3, n);
  }(gp)), gp.exports;
}
var yp = { exports: {} }, B3 = yp.exports, s1;
function W3() {
  return s1 || (s1 = 1, function(n) {
    (function(e, t, s) {
      function r(i) {
        var u = this, c = "";
        u.next = function() {
          var d = u.b, h = u.c, p = u.d, f = u.a;
          return d = d << 25 ^ d >>> 7 ^ h, h = h - p | 0, p = p << 24 ^ p >>> 8 ^ f, f = f - d | 0, u.b = d = d << 20 ^ d >>> 12 ^ h, u.c = h = h - p | 0, u.d = p << 16 ^ h >>> 16 ^ f, u.a = f - d | 0;
        }, u.a = 0, u.b = 0, u.c = -1640531527, u.d = 1367130551, i === Math.floor(i) ? (u.a = i / 4294967296 | 0, u.b = i | 0) : c += i;
        for (var l = 0; l < c.length + 20; l++) u.b ^= c.charCodeAt(l) | 0, u.next();
      }
      function a(i, u) {
        return u.a = i.a, u.b = i.b, u.c = i.c, u.d = i.d, u;
      }
      function o(i, u) {
        var c = new r(i), l = u && u.state, d = function() {
          return (c.next() >>> 0) / 4294967296;
        };
        return d.double = function() {
          do
            var h = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (h + p) / (1 << 21);
          while (f === 0);
          return f;
        }, d.int32 = c.next, d.quick = d, l && (typeof l == "object" && a(l, c), d.state = function() {
          return a(c, {});
        }), d;
      }
      t && t.exports ? t.exports = o : this.tychei = o;
    })(B3, n);
  }(yp)), yp.exports;
}
var bp = { exports: {} };
const V3 = {}, U3 = Object.freeze(Object.defineProperty({ __proto__: null, default: V3 }, Symbol.toStringTag, { value: "Module" })), ia = __(U3);
var G3 = bp.exports, r1;
function H3() {
  return r1 || (r1 = 1, function(n) {
    (function(e, t, s) {
      var r = 256, a = 6, o = 52, i = "random", u = s.pow(r, a), c = s.pow(2, o), l = c * 2, d = r - 1, h;
      function p(w, C, v) {
        var k = [];
        C = C == true ? { entropy: true } : C || {};
        var R = y(g(C.entropy ? [w, x(t)] : w ?? b(), 3), k), N = new f(k), T = function() {
          for (var S = N.g(a), E = u, P = 0; S < c; ) S = (S + P) * r, E *= r, P = N.g(1);
          for (; S >= l; ) S /= 2, E /= 2, P >>>= 1;
          return (S + P) / E;
        };
        return T.int32 = function() {
          return N.g(4) | 0;
        }, T.quick = function() {
          return N.g(4) / 4294967296;
        }, T.double = T, y(x(N.S), t), (C.pass || v || function(S, E, P, M) {
          return M && (M.S && m(M, N), S.state = function() {
            return m(N, {});
          }), P ? (s[i] = S, E) : S;
        })(T, R, "global" in C ? C.global : this == s, C.state);
      }
      function f(w) {
        var C, v = w.length, k = this, R = 0, N = k.i = k.j = 0, T = k.S = [];
        for (v || (w = [v++]); R < r; ) T[R] = R++;
        for (R = 0; R < r; R++) T[R] = T[N = d & N + w[R % v] + (C = T[R])], T[N] = C;
        (k.g = function(S) {
          for (var E, P = 0, M = k.i, L = k.j, V = k.S; S--; ) E = V[M = d & M + 1], P = P * r + V[d & (V[M] = V[L = d & L + E]) + (V[L] = E)];
          return k.i = M, k.j = L, P;
        })(r);
      }
      function m(w, C) {
        return C.i = w.i, C.j = w.j, C.S = w.S.slice(), C;
      }
      function g(w, C) {
        var v = [], k = typeof w, R;
        if (C && k == "object") for (R in w) try {
          v.push(g(w[R], C - 1));
        } catch {
        }
        return v.length ? v : k == "string" ? w : w + "\0";
      }
      function y(w, C) {
        for (var v = w + "", k, R = 0; R < v.length; ) C[d & R] = d & (k ^= C[d & R] * 19) + v.charCodeAt(R++);
        return x(C);
      }
      function b() {
        try {
          var w;
          return h && (w = h.randomBytes) ? w = w(r) : (w = new Uint8Array(r), (e.crypto || e.msCrypto).getRandomValues(w)), x(w);
        } catch {
          var C = e.navigator, v = C && C.plugins;
          return [+/* @__PURE__ */ new Date(), e, v, e.screen, x(t)];
        }
      }
      function x(w) {
        return String.fromCharCode.apply(0, w);
      }
      if (y(s.random(), t), n.exports) {
        n.exports = p;
        try {
          h = ia;
        } catch {
        }
      } else s["seed" + i] = p;
    })(typeof self < "u" ? self : G3, [], Math);
  }(bp)), bp.exports;
}
var Qm, a1;
function j3() {
  if (a1) return Qm;
  a1 = 1;
  var n = E3(), e = A3(), t = O3(), s = L3(), r = M3(), a = W3(), o = H3();
  return o.alea = n, o.xor128 = e, o.xorwow = t, o.xorshift7 = s, o.xor4096 = r, o.tychei = a, Qm = o, Qm;
}
var lc = j3();
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const q3 = 1e-3, uS = 0.1;
function K3(n, e, t) {
  return t == null && (t = Cb()), Rg(n, e, (s, r) => Ib(s, r, t));
}
function Cb() {
  return F.backend.floatPrecision() === 32 ? q3 : uS;
}
function Rg(n, e, t) {
  let s = true;
  if ((Yt(n) || Yt(e)) && (s = false), Yt(n) && Yt(e) && (s = true), s) {
    const o = n.constructor.name, i = e.constructor.name;
    if (o !== i) throw new Error(`Arrays are of different type. Actual: ${o}. Expected: ${i}`);
  }
  if (Array.isArray(n) && Array.isArray(e)) {
    const o = br(n), i = br(e);
    if (!Be(o, i)) throw new Error(`Arrays have different shapes. Actual: [${o}]. Expected: [${i}]`);
  }
  const r = Yt(n) ? n : Os(n), a = Yt(e) ? e : Os(e);
  if (r.length !== a.length) throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.
Actual:   ${r}.
Expected: ${a}.`);
  for (let o = 0; o < a.length; ++o) {
    const i = r[o], u = a[o];
    if (!t(i, u)) throw new Error(`Arrays differ: actual[${o}] = ${i}, expected[${o}] = ${u}.
Actual:   ${r}.
Expected: ${a}.`);
  }
  typeof expect < "u" && expect().nothing();
}
function X3(n, e) {
  n().then(() => e.fail(), () => e()), typeof expect < "u" && expect().nothing();
}
function Y3(n, e) {
  const t = typeof e == "string" || typeof e == "number" || typeof e == "boolean" ? [e] : e;
  return Hs(n) || Hs(n[0]) || Hs(e) || Hs(e[0]) ? Rg(n, t, (s, r) => s == r) : Rg(n, e, (s, r) => Ib(s, r, 0));
}
function Q3(n, e, t) {
  if (t == null && (t = Cb()), !Ib(n, e, t)) throw new Error(`Numbers differ: actual === ${n}, expected === ${e}`);
  typeof expect < "u" && expect().nothing();
}
function Ib(n, e, t) {
  return !isFinite(n) && !isFinite(e) ? true : !(isNaN(n) || isNaN(e) || Math.abs(n - e) > t);
}
function Z3(n, e, t) {
  for (let s = 0; s < n.length; s++) if (n[s] < e || n[s] > t) throw new Error(`Value out of range:${n[s]} low: ${e}, high: ${t}`);
}
function J3(n, e) {
  const t = new Float32Array(n), s = new Float32Array(e);
  if (t.length !== s.length) throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${t.length}`);
  for (let r = 0; r < s.length; r++) if (t[r] !== s[r]) throw new Error(`Expected ArrayBuffer value at ${r} to be ${s[r]} but got ${t[r]} instead`);
}
function lS(n) {
  for (let e = 0; e < n.length; e++) {
    const t = n[e];
    Array.isArray(t) ? lS(t) : n[e] = qs(t);
  }
  return n;
}
function eF(n) {
  const e = document.createElement("video");
  return "playsInline" in e && (e.playsInline = true), e.muted = true, e.loop = true, e.style.position = "fixed", e.style.left = "0px", e.style.top = "0px", e.preload = "auto", e.appendChild(n), new Promise((t) => {
    e.addEventListener("loadeddata", (s) => t(e)), e.load();
  });
}
async function tF(n) {
  await n.play(), "requestVideoFrameCallback" in n && await new Promise((e) => {
    n.requestVideoFrameCallback(e);
  });
}
const nF = Object.freeze(Object.defineProperty({ __proto__: null, TEST_EPSILON_FLOAT16: uS, createVideoElement: eF, encodeStrings: lS, expectArrayBuffersEqual: J3, expectArraysClose: K3, expectArraysEqual: Y3, expectNumbersClose: Q3, expectPromiseToFail: X3, expectValuesInRange: Z3, play: tF, testEpsilon: Cb }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Sb {
  constructor(e, t, s, r, a) {
    this.mean = e, this.stdDev = t, this.dtype = s, this.nextVal = NaN, this.truncated = r, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    const o = a || Math.random();
    this.random = lc.alea(o.toString());
  }
  nextValue() {
    if (!isNaN(this.nextVal)) {
      const r = this.nextVal;
      return this.nextVal = NaN, r;
    }
    let e, t, s = false;
    for (; !s; ) {
      let r, a, o;
      do
        r = 2 * this.random() - 1, a = 2 * this.random() - 1, o = r * r + a * a;
      while (o >= 1 || o === 0);
      const i = Math.sqrt(-2 * Math.log(o) / o);
      e = this.mean + this.stdDev * r * i, t = this.mean + this.stdDev * a * i, (!this.truncated || this.isValidTruncated(e)) && (s = true);
    }
    return (!this.truncated || this.isValidTruncated(t)) && (this.nextVal = this.convertValue(t)), this.convertValue(e);
  }
  convertValue(e) {
    return this.dtype == null || this.dtype === "float32" ? e : Math.round(e);
  }
  isValidTruncated(e) {
    return e <= this.upper && e >= this.lower;
  }
}
class sF {
  constructor(e, t, s, r) {
    this.alpha = e, this.beta = 1 / t, this.dtype = s;
    const a = r || Math.random();
    this.randu = lc.alea(a.toString()), this.randn = new Sb(0, 1, s, false, this.randu()), e < 1 ? this.d = e + 2 / 3 : this.d = e - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  nextValue() {
    let e, t, s, r, a, o;
    for (; ; ) {
      do
        r = this.randn.nextValue(), o = 1 + this.c * r;
      while (o <= 0);
      if (o *= o * o, e = r * r, t = 1 - 0.331 * e * e, s = 0.5 * e + this.d * (1 - o + Math.log(o)), a = this.randu(), a < t || Math.log(a) < s) break;
    }
    return o = 1 / this.beta * this.d * o, this.alpha < 1 && (o *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(o);
  }
  convertValue(e) {
    return this.dtype === "float32" ? e : Math.round(e);
  }
}
class rF {
  constructor(e = 0, t = 1, s, r) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = e, this.range = t - e, this.dtype = s, r == null && (r = Math.random()), typeof r == "number" && (r = r.toString()), !this.canReturnFloat() && this.range <= 1) throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);
    this.random = lc.alea(r);
  }
  convertValue(e) {
    return this.canReturnFloat() ? e : Math.round(e);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function aF(n, e, t = 1, s = "float32", r) {
  if (ls(n), t == null && (t = 1), s == null && (s = "float32"), s !== "float32" && s !== "int32") throw new Error(`Unsupported data type ${s}`);
  const a = new sF(e, t, s, r), o = Oe(n, s);
  for (let i = 0; i < o.values.length; i++) o.values[i] = a.nextValue();
  return o.toTensor();
}
const cS = O({ randomGamma_: aF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function oF(n, e = 0, t = 1, s, r) {
  if (ls(n), s != null && s === "bool") throw new Error(`Unsupported data type ${s}`);
  const a = new Sb(e, t, s, false, r), o = Oe(n, s);
  for (let i = 0; i < o.values.length; i++) o.values[i] = a.nextValue();
  return o.toTensor();
}
const $f = O({ randomNormal_: oF });
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function iF(n, e, t) {
  if (e != null && e === "bool") throw new Error(`Unsupported data type ${e}`);
  return $f(n, 0, 1, e, t);
}
const dS = O({ randomStandardNormal_: iF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function uF(n, e = 0, t = 1, s = "float32", r) {
  ls(n);
  const a = Oe(n, s), o = new rF(e, t, null, r);
  for (let i = 0; i < a.values.length; i++) a.values[i] = o.nextValue();
  return a.toTensor();
}
const Jo = O({ randomUniform_: uF });
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function lF(n, e, t, s) {
  return Jo(n, e, t, "int32", s);
}
const hS = O({ randomUniformInt_: lF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Li(n, e, t = 1, s = "float32") {
  if (t === 0) throw new Error("Cannot have a step of zero");
  const r = { start: n, stop: e, step: t, dtype: s };
  return F.runKernel(Xl, {}, r);
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function cF(n) {
  const t = { input: _(n, "input", "real") };
  return F.runKernel(Dd, t);
}
const kl = O({ real_: cF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function dF(n) {
  const t = { x: _(n, "x", "reciprocal") };
  return F.runKernel(Ro, t);
}
const vb = O({ reciprocal_: dF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function hF(n) {
  const t = { x: _(n, "x", "relu") };
  return F.runKernel(_o, t);
}
const ar = O({ relu_: hF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function pF(n) {
  const t = { x: _(n, "x", "relu6") };
  return F.runKernel(Ao, t);
}
const kf = O({ relu6_: pF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function fF(n, e) {
  const s = { x: _(n, "x", "reverse") }, r = { dims: e };
  return F.runKernel(Fo, s, r);
}
const Ss = O({ reverse_: fF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function mF(n) {
  const e = _(n, "x", "reverse");
  return $(e.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`), Ss(e, 0);
}
const pS = O({ reverse1d_: mF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function gF(n, e) {
  const t = _(n, "x", "reverse");
  return $(t.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${t.rank}.`), Ss(t, e);
}
const fS = O({ reverse2d_: gF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function yF(n, e) {
  const t = _(n, "x", "reverse");
  return $(t.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${t.rank}.`), Ss(t, e);
}
const mS = O({ reverse3d_: yF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function bF(n, e) {
  const t = _(n, "x", "reverse");
  return $(t.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${t.rank}.`), Ss(t, e);
}
const gS = O({ reverse4d_: bF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function xF(n) {
  const t = { x: _(n, "x", "round") };
  return F.runKernel(Oo, t);
}
const Nf = O({ round_: xF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function wF(n) {
  const t = { x: _(n, "x", "rsqrt", "float32") };
  return F.runKernel(Po, t);
}
const Tf = O({ rsqrt_: wF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function CF(n) {
  const t = { x: _(n, "x", "selu") };
  return F.runKernel(Lo, t);
}
const Rf = O({ selu_: CF });
function IF(n, e, t, s, r, a = [1, 1], o = "NHWC") {
  const i = _(n, "x", "separableConv2d"), u = _(e, "depthwiseFilter", "separableConv2d"), c = _(t, "pointwiseFilter", "separableConv2d");
  let l = i, d = false;
  if (i.rank === 3 && (d = true, l = B(i, [1, i.shape[0], i.shape[1], i.shape[2]])), o === "NCHW") throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  $(l.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${l.rank}.`), $(u.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`), $(c.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`), $(c.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`), $(c.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`);
  const h = u.shape[2], p = u.shape[3];
  $(c.shape[2] === h * p, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${h * p}, but got ${c.shape[2]}.`);
  const f = rc(l, u, s, r, o, a), g = Mr(f, c, 1, "valid", o);
  return d ? B(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
const _f = O({ separableConv2d_: IF });
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
async function SF(n, e) {
  const t = _(n, "x", "setdiff1d"), s = _(e, "y", "setdiff1d");
  $(t.dtype === s.dtype, () => `x and y should have the same dtype, but got x (${t.dtype}) and y (${s.dtype}).`), $(t.rank === 1, () => `x should be 1D tensor, but got x (${t.shape}).`), $(s.rank === 1, () => `y should be 1D tensor, but got y (${s.shape}).`);
  const r = await t.data(), a = await s.data(), o = new Set(a);
  let i = 0;
  for (let l = 0; l < r.length; l++) o.has(r[l]) || i++;
  const u = new Gt([i], t.dtype), c = new Gt([i], "int32");
  for (let l = 0, d = 0; l < r.length; l++) o.has(r[l]) || (u.values[d] = r[l], c.values[d] = l, d++);
  return [u.toTensor(), c.toTensor()];
}
const yS = SF;
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function vF(n) {
  const t = { x: _(n, "x", "sign") };
  return F.runKernel(Bo, t);
}
const $b = O({ sign_: vF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function $F(n) {
  const t = { x: _(n, "x", "sin", "float32") };
  return F.runKernel(zo, t);
}
const Ef = O({ sin_: $F });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function kF(n) {
  const t = { x: _(n, "x", "sinh") };
  return F.runKernel(Mo, t);
}
const Df = O({ sinh_: kF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function NF(n, e, t) {
  const s = _(n, "x", "slice1d");
  return $(s.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`), Qe(s, [e], [t]);
}
const eh = O({ slice1d_: NF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function TF(n, e, t) {
  const s = _(n, "x", "slice2d");
  return $(s.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`), Qe(s, e, t);
}
const Af = O({ slice2d_: TF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function RF(n, e, t) {
  const s = _(n, "x", "slice3d");
  return $(s.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`), Qe(s, e, t);
}
const th = O({ slice3d_: RF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _F(n, e, t) {
  const s = _(n, "x", "slice4d");
  return $(s.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`), Qe(s, e, t);
}
const Nl = O({ slice4d_: _F });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function EF(n, e = -1) {
  const t = _(n, "logits", "softmax", "float32");
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1) throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and dim was ${e}`);
  const s = { logits: t }, r = { dim: e };
  return F.runKernel(Ho, s, r);
}
const nh = O({ softmax_: EF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function DF(n) {
  $(n.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`);
  const e = { input: n };
  return F.runKernel(Rd, e);
}
const sh = O({ fft_: DF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function AF(n) {
  $(n.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`);
  const e = { input: n };
  return F.runKernel(_d, e);
}
const Tl = O({ ifft_: AF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function FF(n) {
  const e = n.shape[n.shape.length - 1], t = n.size / e;
  let s;
  if (e <= 2) {
    const r = B(n, [t, e]);
    s = Tl(r);
  } else {
    const r = [t, 2 * (e - 1)], a = B(kl(n), [t, e]), o = B(Hd(n), [t, e]), i = Ss(Qe(a, [0, 1], [t, e - 2]), 1), u = z(Ss(Qe(o, [0, 1], [t, e - 2]), 1), Ne(-1)), c = Lt([a, i], 1), l = Lt([o, u], 1), d = B(zr(c, l), [r[0], r[1]]);
    s = Tl(d);
  }
  if (s = kl(s), n.rank === 3 && n.shape[0] !== 0) {
    const r = s, a = n.shape[0];
    s = B(s, [a, s.shape[0] / a, s.shape[1]]), r.dispose();
  }
  return s;
}
const Ff = O({ irfft_: FF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function OF(n, e, t = 0) {
  const r = { x: _(n, "x", "split") }, a = { numOrSizeSplits: e, axis: t };
  return F.runKernel(Wu, r, a);
}
const Vn = O({ split_: OF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function PF(n, e) {
  $(n.dtype === "float32", () => `The dtype for rfft() must be real value but got ${n.dtype}`);
  let t = n.shape[n.shape.length - 1];
  const s = n.size / t;
  let r;
  if (e != null && e < t) {
    const f = n.shape.map((g) => 0), m = n.shape.map((g) => g);
    m[n.shape.length - 1] = e, r = Qe(n, f, m), t = e;
  } else if (e != null && e > t) {
    const f = n.shape.map((m) => m);
    f[n.shape.length - 1] = e - t, r = Lt([n, Ot(f)], n.shape.length - 1), t = e;
  } else r = n;
  const a = Ze(r), o = B(zr(r, a), [s, t]), i = sh(o), u = Math.floor(t / 2) + 1, c = kl(i), l = Hd(i), d = Vn(c, [u, t - u], c.shape.length - 1), h = Vn(l, [u, t - u], l.shape.length - 1), p = r.shape.slice();
  return p[r.shape.length - 1] = u, B(zr(d[0], h[0]), p);
}
const rh = O({ rfft_: PF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function LF(n, e) {
  let t = _(n, "a", "squaredDifference"), s = _(e, "b", "squaredDifference");
  [t, s] = Ft(t, s), Re(t.shape, s.shape);
  const r = { a: t, b: s }, a = {};
  return F.runKernel(jo, r, a);
}
const Of = O({ squaredDifference_: LF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function zF(n, e) {
  const t = _(n, "x", "squeeze", "string_or_numeric");
  return B(t, Wr(t.shape, e).newShape);
}
const ei = O({ squeeze_: zF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function MF(n, e = 0) {
  const t = rd(n, "tensors", "stack", "string_or_numeric");
  $(t.length >= 1, () => "Pass at least one tensor to tf.stack"), t.length > 0 && $(e <= t[0].rank, () => "Axis must be <= rank of the tensor");
  const s = t, r = { axis: e };
  return F.runKernel(Eu, s, r);
}
const En = O({ stack_: MF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function BF(n, e = 0) {
  const s = { x: _(n, "x", "step") }, r = { alpha: e };
  return F.runKernel(jr, s, r);
}
const Qu = O({ step_: BF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function WF(n, e, t, s, r = 0, a = 0, o = 0, i = 0, u = 0) {
  const l = { x: _(n, "x", "stridedSlice", "string_or_numeric") }, d = { begin: e, end: t, strides: s, beginMask: r, endMask: a, ellipsisMask: o, newAxisMask: i, shrinkAxisMask: u };
  return F.runKernel(Uu, l, d);
}
const kb = O({ stridedSlice_: WF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function VF(n) {
  const t = { x: _(n, "x", "tan", "float32") };
  return F.runKernel(Ko, t);
}
const Nb = O({ tan_: VF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function bn(n, e) {
  Ki(n);
  const t = br(n, e);
  if (t.length !== 1) throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return Qo(n, null, t, e);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function pa(n, e, t) {
  if (Ki(n), e != null && e.length !== 2) throw new Error("tensor2d() requires shape to have two numbers");
  const s = br(n, t);
  if (s.length !== 2 && s.length !== 1) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (s.length === 1 && e == null) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return Qo(n, e, s, t);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Tb(n, e, t) {
  if (Ki(n), e != null && e.length !== 3) throw new Error("tensor3d() requires shape to have three numbers");
  const s = br(n, t);
  if (s.length !== 3 && s.length !== 1) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (s.length === 1 && e == null) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return Qo(n, e, s, t);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function bS(n, e, t) {
  if (Ki(n), e != null && e.length !== 4) throw new Error("tensor4d() requires shape to have four numbers");
  const s = br(n, t);
  if (s.length !== 4 && s.length !== 1) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (s.length === 1 && e == null) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return Qo(n, e, s, t);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function xS(n, e, t) {
  if (Ki(n), e != null && e.length !== 5) throw new Error("tensor5d() requires shape to have five numbers");
  const s = br(n, t);
  if (s.length !== 5 && s.length !== 1) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (s.length === 1 && e == null) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return Qo(n, e, s, t);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function wS(n, e, t) {
  if (Ki(n), e != null && e.length !== 6) throw new Error("tensor6d() requires shape to have six numbers");
  const s = br(n, t);
  if (s.length !== 6 && s.length !== 1) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (s.length === 1 && e == null) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return e = e || s, Qo(n, e, s, t);
}
function Rb(n, e, t) {
  const s = e.rank > 1 ? e.shape[e.rank - 1] : 1, r = e.rank > 1 ? e.rank - 1 : 1, a = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${t.shape}, indices.shape: ${e.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;
  if (t.rank < r) throw new Error(a + ` update.rank < ${r}. `);
  if (n.length < s + (t.rank - r)) throw new Error(a + ` Output shape length < ${s + (t.rank - r)}`);
  if (t.rank !== r + n.length - s) throw new Error(a + ` update.rank != ${r + n.length - s}`);
  for (let o = 0; o < r; ++o) if (t.shape[o] !== e.shape[o]) throw new Error(a + ` updates.shape[${o}] (${t.shape[o]}) != indices.shape[${o}] (${e.shape[o]}).`);
  for (let o = 0; o < t.rank - r; ++o) if (t.shape[o + r] !== n[o + s]) throw new Error(a + ` updates.shape[${o + r}] (${t.shape[o + r]}) != shape[${o + r}] (${n[o + r]})`);
}
function Pf(n, e, t) {
  if (e.rank < 1) throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);
  if (n.rank < 1) throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);
  if (e.dtype !== "int32") throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);
  if (t.length < 1) throw new Error(`Output rank must be greater or equal to 1, but got shape: ${t}`);
  if (t.length === 0) {
    if (e.size === 0) throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);
    if (n.size === 0) throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`);
  }
  Rb(t, e, n);
}
function ds(n, e, t) {
  const s = e.shape.length, r = s > 1 ? e.shape[s - 1] : 1, a = t.length;
  let o = 1;
  for (let d = r; d < a; ++d) o *= t[d];
  const i = r < 1 ? 1 : r, u = A(e.shape) / i, c = [...me(t.slice(0, r)), 1], l = A(t);
  return { sliceRank: r, numUpdates: u, sliceSize: o, strides: c, outputSize: l };
}
const UF = Object.freeze(Object.defineProperty({ __proto__: null, calculateShapes: ds, validateInput: Pf, validateUpdateShape: Rb }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function GF(n, e, t) {
  const s = _(n, "tensor", "tensorScatterupdate"), r = _(e, "indices", "tensorScatterupdate", "int32"), a = _(t, "updates", "tensorScatterupdate");
  if (Pf(a, r, s.shape), s.dtype !== a.dtype) throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${a.dtype}.`);
  const o = { tensor: s, indices: r, updates: a }, i = {};
  return F.runKernel(Pu, o, i);
}
const CS = O({ tensorScatterUpdate_: GF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function HF(n, e = 1, t = true) {
  const s = _(n, "x", "topk");
  if (s.rank === 0) throw new Error("topk() expects the input to be of rank 1 or higher");
  const r = s.shape[s.shape.length - 1];
  if (e < 0) throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);
  if (e > r) throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${e}`);
  const a = { x: s }, o = { k: e, sorted: t }, [i, u] = F.runKernel(Gu, a, o);
  return { values: i, indices: u };
}
const _b = O({ topk_: HF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function jF(n, e = 0, t = 1, s, r) {
  if (ls(n), s != null && s === "bool") throw new Error("Unsupported data type $ { dtype }");
  const a = new Sb(e, t, s, true, r), o = Oe(n, s);
  for (let i = 0; i < o.values.length; i++) o.values[i] = a.nextValue();
  return o.toTensor();
}
const Lf = O({ truncatedNormal_: jF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function qF(n, e = 0) {
  const t = _(n, "x", "unique", "string_or_numeric");
  $(t.rank > 0, () => "The input tensor must be at least 1D");
  const s = { x: t }, r = { axis: e }, [a, o] = F.runKernel(Ld, s, r);
  return { values: a, indices: o };
}
const Eb = O({ unique_: qF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function KF(n, e, t) {
  const s = _(n, "x", "unsortedSegmentSum"), r = _(e, "segmentIds", "unsortedSegmentSum", "int32");
  $(Ni(t), () => "numSegments must be of dtype int");
  const a = { x: s, segmentIds: r }, o = { numSegments: t };
  return F.runKernel(tc, a, o);
}
const zf = O({ unsortedSegmentSum_: KF });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function XF(n, e = 0) {
  const t = _(n, "x", "unstack", "string_or_numeric");
  $(e >= -t.shape.length && e < t.shape.length, () => `Axis = ${e} is not in [-${t.shape.length}, ${t.shape.length})`);
  const s = { value: t }, r = { axis: e };
  return F.runKernel(ju, s, r);
}
const vs = O({ unstack_: XF });
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function IS(n, e) {
  return vf(n, e, "right");
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Db(n, e = true, t, s) {
  return F.makeVariable(n, e, t, s);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Mf(n, e) {
  const t = [];
  for (let a = 0; a < e.length; a++) e[a] && t.push(a);
  const s = Oe(n, "int32"), r = Oe([t.length, n.length], "int32");
  for (let a = 0; a < t.length; a++) {
    const o = s.indexToLoc(t[a]), i = a * n.length;
    r.values.set(o, i);
  }
  return r.toTensor();
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
async function YF(n) {
  const e = _(n, "condition", "whereAsync", "bool"), t = await e.data(), s = Mf(e.shape, t);
  return n !== e && e.dispose(), s;
}
const Ab = YF;
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
async function QF(n, e, t) {
  const s = _(n, "tensor", "boolMask"), r = _(e, "mask", "boolMask", "bool"), a = t ?? 0, o = r.rank, i = s.shape;
  $(o > 0, () => "mask cannot be scalar"), nn(i.slice(a, a + o), r.shape, "mask's shape must match the first K dimensions of tensor's shape,");
  let u = 1;
  for (let m = a; m < a + o; m++) u *= i[m];
  const c = i.slice(0, a).concat([u], i.slice(a + o)), l = B(s, c), d = B(r, [-1]), h = await Ab(d), p = ei(h, [1]), f = uc(l, p, a);
  return n !== s && s.dispose(), e !== r && r.dispose(), p.dispose(), l.dispose(), d.dispose(), h.dispose(), f;
}
const SS = QF;
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ZF(n, e, t) {
  const s = _(n, "x", "transpose");
  if (e == null && (e = s.shape.map((o, i) => i).reverse()), $(s.rank === e.length, () => `Error in transpose: rank of input ${s.rank} must match length of perm ${e}.`), e.forEach((o) => {
    $(o >= 0 && o < s.rank, () => `All entries in 'perm' must be between 0 and ${s.rank - 1} but got ${e}`);
  }), s.rank <= 1) return s.clone();
  const r = { x: s }, a = { perm: e };
  return s.dtype === "complex64" ? H(() => {
    let o = kl(s), i = Hd(s);
    return o = F.runKernel(fr, { x: o }, a), i = F.runKernel(fr, { x: i }, a), t && (i = St(i)), zr(o, i);
  }) : F.runKernel(fr, r, a);
}
const Ye = O({ transpose_: ZF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function JF(n, e, t, s, r = true) {
  const a = _(n, "v", "movingAverage"), o = _(e, "x", "movingAverage"), i = _(t, "decay", "movingAverage");
  bI(a, o), $(Be(a.shape, o.shape), () => "Shape mismatch in v and x");
  const u = Ne(1), c = xe(u, i);
  let l = z(xe(o, a), c);
  if (r) {
    $(s != null, () => "When using zeroDebias: true, step is required.");
    const d = _(s, "step", "movingAverage");
    l = ve(l, xe(u, xr(i, d)));
  }
  return te(a, l);
}
const vS = O({ movingAverage_: JF });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function eO(n, e, t) {
  ls(t);
  const s = _(n, "indices", "scatterND", "int32"), r = _(e, "updates", "scatterND");
  Pf(r, s, t);
  const a = { indices: s, updates: r }, o = { shape: t };
  return F.runKernel(Ou, a, o);
}
const $S = O({ scatterND_: eO });
function tO(n, e, t, s) {
  if (n.dtype !== "int32") throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);
  if (n.rank > 2) throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);
  const r = n.rank > 0 ? n.shape[0] : 1, a = n.rank > 1 ? n.shape[1] : 1;
  if (t.length !== a) throw new Error(`outputShape has incorrect number of elements:, ${t.length}, should be: ${a}.`);
  const o = e.size;
  if (!(e.rank === 0 || e.rank === 1 && o === r)) throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${r}]`);
  if (e.dtype !== s.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype");
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nO(n, e, t, s = 0) {
  ls(t);
  const r = _(n, "sparseIndices", "sparseToDense", "int32"), a = _(e, "sparseValues", "sparseToDense", "string_or_numeric"), o = _(s, "defaultValue", "sparseToDense", a.dtype);
  tO(r, a, t, o);
  const i = { sparseIndices: r, sparseValues: a, defaultValue: o }, u = { outputShape: t };
  return F.runKernel(Vu, i, u);
}
const kS = O({ sparseToDense_: nO });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sO(n, e) {
  const t = _(e, "indices", "gatherND", "int32"), r = { params: _(n, "x", "gatherND", "string_or_numeric"), indices: t };
  return F.runKernel(mu, r);
}
const NS = O({ gatherND_: sO });
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function rO(n, e) {
  if (e == null) return n.shape.slice();
  if (Be(n.shape, e)) return e;
  if (n.shape.length === e.length) {
    const t = [];
    for (let s = 0; s < n.shape.length; s++) e[s] == null && n.shape[s] != null ? t.push(n.shape[s]) : t.push(e[s]);
    return t;
  }
  return e;
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function aO(n, e, t, s) {
  const r = _(n, "x", "dropout");
  if ($(r.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`), $(e >= 0 && e < 1, () => `rate must be a float in the range [0, 1), but got ${e}.`), e === 0) return n instanceof tt ? r.clone() : r;
  const a = rO(r, t), o = 1 - e, i = ve(ic(te(Jo(a, 0, 1, "float32", s), o)), o);
  return z(r, i);
}
const Fb = O({ dropout_: aO });
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ob(n) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(n) / Math.log(2))));
}
function Bf(n, e, t) {
  const s = 1 - n % 2, r = new Float32Array(n);
  for (let a = 0; a < n; ++a) {
    const o = 2 * Math.PI * a / (n + s - 1);
    r[a] = e - t * Math.cos(o);
  }
  return bn(r, "float32");
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
async function oO(n, e, t = 1) {
  const s = _(n, "predictions", "inTopK"), r = _(e, "targets", "inTopK");
  $(s.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`), $(s.rank - 1 === r.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`), nn(s.shape.slice(0, s.shape.length - 1), r.shape, "predictions's shape should be align with the targets' shape, except the last dimension.");
  const a = s.shape[s.shape.length - 1];
  $(t > 0 && t <= a, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${t}`);
  const o = await s.data(), i = await r.data(), [u, c] = [o.length / a, a], l = Ht("bool", u);
  for (let d = 0; d < u; d++) {
    const h = d * c, p = o.subarray(h, h + c), f = [];
    for (let m = 0; m < p.length; m++) f.push({ value: p[m], index: m });
    f.sort((m, g) => g.value - m.value), l[d] = 0;
    for (let m = 0; m < t; m++) if (f[m].index === i[d]) {
      l[d] = 1;
      break;
    }
  }
  return n !== s && s.dispose(), e !== r && r.dispose(), Wn(l, r.shape, "bool");
}
const TS = oO;
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function iO(n, e, t, s, r, a = "NHWC", o) {
  let i = n;
  n.rank === 3 && (i = B(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let u = e;
  u.rank === 3 && (u = B(e, [1, e.shape[0], e.shape[1], e.shape[2]])), $(i.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`), $(u.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`), $(t.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${t}.`);
  const c = a === "NHWC" ? i.shape[3] : i.shape[1], l = a === "NHWC" ? u.shape[3] : u.shape[1];
  $(c === t[2], () => `Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${t[2]}.`), $(l === t[3], () => `Error in conv2dDerFilter: depth of dy (${l}) must match output depth for filter (${t[3]}).`), Fn("conv2dDerFilter", r, o);
  const d = { x: i, dy: u }, h = { strides: s, pad: r, dataFormat: a, dimRoundingMode: o, filterShape: t };
  return F.runKernel(vd, d, h);
}
const Pb = O({ conv2DBackpropFilter_: iO });
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Wf(n, e, t) {
  if (t == null || t === "linear") return n;
  if (t === "relu") return z(n, Qu(e));
  throw new Error(`Cannot compute gradient for fused activation ${t}.`);
}
function Vf(n, e) {
  let t = e;
  const s = jt(n.shape, e.shape);
  return s.length > 0 && (t = we(t, s)), B(t, n.shape);
}
function Uf(n, e, t, s) {
  if (e === "linear") return n;
  if (e === "relu") return ar(n);
  if (e === "elu") return ac(n);
  if (e === "relu6") return kf(n);
  if (e === "prelu") return Jd(n, t);
  if (e === "leakyrelu") return jd(n, s);
  if (e === "sigmoid") return Ks(n);
  throw new Error(`Unknown fused activation ${e}.`);
}
const Gf = (n, e) => !(n > 0) || e === "linear";
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function uO({ x: n, filter: e, strides: t, pad: s, dataFormat: r = "NHWC", dilations: a = [1, 1], dimRoundingMode: o, bias: i, activation: u = "linear", preluActivationWeights: c, leakyreluAlpha: l }) {
  if (u = u || "linear", Gf(F.state.gradientDepth, u) === false) {
    $(r === "NHWC", () => `Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
    let v = Mr(n, e, t, s, r, a, o);
    return i != null && (v = te(v, i)), Uf(v, u, c, l);
  }
  const d = _(n, "x", "conv2d", "float32"), h = _(e, "filter", "conv2d", "float32");
  let p = d, f = false;
  d.rank === 3 && (f = true, p = B(d, [1, d.shape[0], d.shape[1], d.shape[2]])), $(p.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`), $(h.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`), Fn("fused conv2d", s, o);
  const m = r === "NHWC" ? p.shape[3] : p.shape[1];
  $(h.shape[2] === m, () => `Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`), $(qt(t, a), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`);
  const g = lt(p.shape, h.shape, t, a, s, o);
  let y;
  i != null && (y = _(i, "bias", "fused conv2d"), [y] = Ft(y, d), r === "NHWC" ? Re(g.outShape, y.shape) : ($(y.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`), $(y.shape.length === 0 || y.shape[0] === g.outChannels || y.shape[0] === 1, () => `Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)));
  let b;
  if (c != null) {
    const v = c.shape;
    if ($(v.length <= 1 || v.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${v.length}.`), v.length === 1) $(v[0] === 1 || v[0] === g.outChannels, () => `Error in fused conv2d: PReLU activation weights (${v}) is not compatible with the number of output channels (${g.outChannels}).`);
    else if (v.length === 3) try {
      Re(v, g.outShape);
    } catch {
      const R = `Error in fused conv2d: PReLU activation weights (${v}) is not compatible with the output shape of the conv2d (${g.outShape}).`;
      throw Error(R);
    }
    b = _(c, "prelu weights", "fused conv2d");
  }
  const x = (v, k) => {
    $(r === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);
    const [R, N, T, S] = k, E = Wf(v, T, u);
    $(Ia(a), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);
    const P = eb(N.shape, E, R, t, s), M = Pb(N, E, R.shape, t, s), L = [P, M];
    if (S != null) {
      const V = Vf(S, E);
      L.push(V);
    }
    return L;
  }, w = { x: p, filter: h, bias: y, preluActivationWeights: b }, C = { strides: t, pad: s, dataFormat: r, dilations: a, dimRoundingMode: o, activation: u, leakyreluAlpha: l };
  return i == null ? wr((k, R, N) => {
    let T = F.runKernel(xa, w, C);
    return N([R, k, T]), f && (T = B(T, [T.shape[1], T.shape[2], T.shape[3]])), { value: T, gradFunc: x };
  })(p, h) : wr((k, R, N, T) => {
    let S = F.runKernel(xa, w, C);
    return T([R, k, S, N]), f && (S = B(S, [S.shape[1], S.shape[2], S.shape[3]])), { value: S, gradFunc: x };
  })(p, h, y);
}
const RS = O({ fusedConv2d_: uO });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function lO(n, e, t, s, r, a = [1, 1], o) {
  let i = n;
  n.rank === 3 && (i = B(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let u = e;
  u.rank === 3 && (u = B(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  const c = { x: i, dy: u }, l = { strides: s, pad: r, dimRoundingMode: o, dilations: a, filterShape: t };
  return F.runKernel($d, c, l);
}
const _S = O({ depthwiseConv2dNativeBackpropFilter_: lO });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function cO(n, e, t, s, r, a = [1, 1], o) {
  let i = e, u = false;
  e.rank === 3 && (u = true, i = B(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  const c = { dy: i, filter: t }, l = { strides: s, pad: r, dimRoundingMode: o, dilations: a, inputShape: n }, d = F.runKernel(kd, c, l);
  return u ? B(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const ES = O({ depthwiseConv2dNativeBackpropInput_: cO });
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function dO({ x: n, filter: e, strides: t, pad: s, dataFormat: r = "NHWC", dilations: a = [1, 1], dimRoundingMode: o, bias: i, activation: u = "linear", preluActivationWeights: c, leakyreluAlpha: l }) {
  if (Gf(F.state.gradientDepth, u) === false) {
    let C = rc(n, e, t, s, r, a, o);
    return i != null && (C = te(C, i)), Uf(C, u, c, l);
  }
  const d = _(n, "x", "depthwiseConv2d", "float32"), h = _(e, "filter", "depthwiseConv2d", "float32");
  let p = d, f = false;
  d.rank === 3 && (f = true, p = B(d, [1, d.shape[0], d.shape[1], d.shape[2]])), $(p.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`), $(h.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`), $(p.shape[3] === h.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`), a == null && (a = [1, 1]), $(qt(t, a), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`), Fn("fused depthwiseConv2d", s, o);
  const m = lt(p.shape, h.shape, t, a, s, o, true);
  let g;
  i != null && (g = _(i, "bias", "fused conv2d"), [g] = Ft(g, d), Re(m.outShape, g.shape));
  let y;
  c != null && (y = _(c, "prelu weights", "fused depthwiseConv2d"));
  const b = (C, v) => {
    $(Ia(a), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);
    const [k, R, N, T] = v, S = Wf(C, N, u), E = ES(R.shape, S, k, t, s, a, o), P = _S(R, S, k.shape, t, s, a, o);
    if (T != null) {
      const M = Vf(g, S);
      return [E, P, M];
    }
    return [E, P];
  }, x = { x: p, filter: h, bias: g, preluActivationWeights: y }, w = { strides: t, pad: s, dataFormat: r, dilations: a, dimRoundingMode: o, activation: u, leakyreluAlpha: l };
  return i == null ? wr((v, k, R) => {
    let N = F.runKernel(wa, x, w);
    return R([k, v, N]), f && (N = B(N, [N.shape[1], N.shape[2], N.shape[3]])), { value: N, gradFunc: b };
  })(p, h) : wr((v, k, R, N) => {
    let T = F.runKernel(wa, x, w);
    return N([k, v, T, R]), f && (T = B(T, [T.shape[1], T.shape[2], T.shape[3]])), { value: T, gradFunc: b };
  })(p, h, g);
}
const hO = O({ fusedDepthwiseConv2d_: dO });
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function pO({ a: n, b: e, transposeA: t = false, transposeB: s = false, bias: r, activation: a = "linear", preluActivationWeights: o, leakyreluAlpha: i = 0.2 }) {
  if (Gf(F.state.gradientDepth, a) === false) {
    let S = je(n, e, t, s);
    return r != null && (S = te(S, r)), Uf(S, a, o, i);
  }
  let u = _(n, "a", "fused matMul"), c = _(e, "b", "fused matMul");
  [u, c] = Ft(u, c);
  const l = t ? u.shape[u.rank - 2] : u.shape[u.rank - 1], d = s ? c.shape[c.rank - 1] : c.shape[c.rank - 2], h = t ? u.shape[u.rank - 1] : u.shape[u.rank - 2], p = s ? c.shape[c.rank - 2] : c.shape[c.rank - 1], f = u.shape.slice(0, -2), m = c.shape.slice(0, -2), g = A(f), y = A(m);
  $(l === d, () => `Error in fused matMul: inner shapes (${l}) and (${d}) of Tensors with shapes ${u.shape} and ${c.shape} and transposeA=${t} and transposeB=${s} must match.`);
  const x = Re(u.shape.slice(0, -2), c.shape.slice(0, -2)).concat([h, p]), w = t ? B(u, [g, l, h]) : B(u, [g, h, l]), C = s ? B(c, [y, p, d]) : B(c, [y, d, p]);
  let v;
  r != null && (v = _(r, "bias", "fused matMul"), [v] = Ft(v, u), Re(x, v.shape));
  let k;
  o != null && (k = _(o, "prelu weights", "fused matMul"));
  const R = (S, E) => {
    const [P, M, L, V] = E, q = Wf(B(S, L.shape), L, a);
    let G, K;
    if (!t && !s ? (G = je(q, M, false, true), K = je(P, q, true, false)) : !t && s ? (G = je(q, M, false, false), K = je(q, P, true, false)) : t && !s ? (G = je(M, q, false, true), K = je(P, q, false, false)) : (G = je(M, q, true, true), K = je(q, P, true, true)), r != null) {
      const X = Vf(V, q);
      return [G, K, X];
    } else return [G, K];
  }, N = { a: w, b: C, bias: v, preluActivationWeights: k }, T = { transposeA: t, transposeB: s, activation: a, leakyreluAlpha: i };
  return r == null ? wr((E, P, M) => {
    const L = F.runKernel(ba, N, T);
    return M([E, P, L]), { value: B(L, x), gradFunc: R };
  })(w, C) : wr((E, P, M, L) => {
    const V = F.runKernel(ba, N, T);
    return L([E, P, V, M]), { value: B(V, x), gradFunc: R };
  })(w, C, v);
}
const _g = O({ fusedMatMul_: pO });
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const DS = Object.freeze(Object.defineProperty({ __proto__: null, conv2d: RS, depthwiseConv2d: hO, matMul: _g }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function fO(n) {
  return Bf(n, 0.54, 0.46);
}
const mO = O({ hammingWindow_: fO });
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function gO(n) {
  return Bf(n, 0.5, 0.5);
}
const AS = O({ hannWindow_: gO });
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function yO(n, e, t, s = false, r = 0) {
  let a = 0;
  const o = [];
  for (; a + e <= n.size; ) o.push(Qe(n, a, e)), a += t;
  if (s) for (; a < n.size; ) {
    const i = a + e - n.size, u = Lt([Qe(n, a, e - i), Xu([i], r)]);
    o.push(u), a += t;
  }
  return o.length === 0 ? pa([], [0, e]) : B(Lt(o), [o.length, e]);
}
const FS = O({ frame_: yO });
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function bO(n, e, t, s, r = AS) {
  s == null && (s = Ob(e));
  const a = FS(n, e, t), o = z(a, r(e));
  return rh(o, s);
}
const xO = O({ stft_: bO });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function wO(n, e, t, s, r = "bilinear", a = 0) {
  const o = _(n, "image", "cropAndResize"), i = _(e, "boxes", "cropAndResize", "float32"), u = _(t, "boxInd", "cropAndResize", "int32"), c = i.shape[0];
  $(o.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`), $(i.rank === 2 && i.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${c},4] but had shape ${i.shape}.`), $(u.rank === 1 && u.shape[0] === c, () => `Error in cropAndResize: boxInd must be have size [${c}] but had shape ${i.shape}.`), $(s.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`), $(s[0] >= 1 && s[1] >= 1, () => `cropSize must be atleast [1,1], but was ${s}`), $(r === "bilinear" || r === "nearest", () => `method must be bilinear or nearest, but was ${r}`);
  const l = { image: o, boxes: i, boxInd: u }, d = { method: r, extrapolationValue: a, cropSize: s };
  return F.runKernel(uu, l, d);
}
const CO = O({ cropAndResize_: wO });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function IO(n) {
  const e = _(n, "image", "flipLeftRight", "float32");
  $(e.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);
  const t = { image: e };
  return F.runKernel(pu, t, {});
}
const SO = O({ flipLeftRight_: IO });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function vO(n) {
  const e = _(n, "image", "grayscaleToRGB"), t = e.rank - 1, s = e.shape[t];
  $(e.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`), $(s === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);
  const r = new Array(e.rank);
  return r.fill(1, 0, t), r[t] = 3, bs(e, r);
}
const $O = O({ grayscaleToRGB_: vO });
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function kO(n) {
  const e = _(n, "image", "RGBToGrayscale"), t = e.rank - 1, s = e.shape[t];
  $(e.rank >= 2, () => `Error in RGBToGrayscale: images must be at least rank 2, but got rank ${e.rank}.`), $(s === 3, () => `Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`);
  const r = e.dtype, a = ue(e, "float32"), o = bn([0.2989, 0.587, 0.114]);
  let i;
  switch (e.rank) {
    case 2:
      i = mi("ij,j->i", a, o);
      break;
    case 3:
      i = mi("ijk,k->ij", a, o);
      break;
    case 4:
      i = mi("ijkl,l->ijk", a, o);
      break;
    case 5:
      i = mi("ijklm,m->ijkl", a, o);
      break;
    case 6:
      i = mi("ijklmn,n->ijklm", a, o);
      break;
    default:
      throw new Error("Not a valid tensor rank.");
  }
  return i = mn(i, -1), ue(i, r);
}
const NO = O({ rgbToGrayscale_: kO });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function TO(n, e, t = 0, s = 0.5) {
  const r = _(n, "image", "rotateWithOffset", "float32");
  $(r.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);
  const a = { image: r }, o = { radians: e, fillValue: t, center: s };
  return F.runKernel(Ku, a, o);
}
const RO = O({ rotateWithOffset_: TO });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function cc(n, e, t, s, r, a) {
  s == null && (s = 0.5), r == null && (r = Number.NEGATIVE_INFINITY), a == null && (a = 0);
  const o = n.shape[0];
  return t = Math.min(t, o), $(0 <= s && s <= 1, () => `iouThreshold must be in [0, 1], but was '${s}'`), $(n.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${n.rank}'`), $(n.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`), $(e.rank === 1, () => "scores must be a 1D tensor"), $(e.shape[0] === o, () => `scores has incompatible shape with boxes. Expected ${o}, but was ${e.shape[0]}`), $(0 <= a && a <= 1, () => `softNmsSigma must be in [0, 1], but was '${a}'`), { maxOutputSize: t, iouThreshold: s, scoreThreshold: r, softNmsSigma: a };
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _O(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY) {
  const a = _(n, "boxes", "nonMaxSuppression", "float32"), o = _(e, "scores", "nonMaxSuppression", "float32"), i = cc(a, o, t, s, r);
  t = i.maxOutputSize, s = i.iouThreshold, r = i.scoreThreshold;
  const u = { maxOutputSize: t, iouThreshold: s, scoreThreshold: r };
  return F.runKernel(Tu, { boxes: a, scores: o }, u);
}
const EO = O({ nonMaxSuppression_: _O });
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function DO(n, e, t) {
  const s = AO(n, e, t), r = s < 0 ? -(s + 1) : s;
  n.splice(r, 0, e);
}
function AO(n, e, t) {
  return OO(n, e, t || FO);
}
function FO(n, e) {
  return n > e ? 1 : n < e ? -1 : 0;
}
function OO(n, e, t) {
  let s = 0, r = n.length, a = 0, o = false;
  for (; s < r; ) {
    a = s + (r - s >>> 1);
    const i = t(e, n[a]);
    i > 0 ? s = a + 1 : (r = a, o = !i);
  }
  return o ? s : -s - 1;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ah(n, e, t, s, r) {
  return Lb(n, e, t, s, r, 0);
}
function Hf(n, e, t, s, r, a) {
  return Lb(n, e, t, s, r, 0, false, a, true);
}
function oh(n, e, t, s, r, a) {
  return Lb(n, e, t, s, r, a, true);
}
function Lb(n, e, t, s, r, a, o = false, i = false, u = false) {
  const c = [];
  for (let g = 0; g < e.length; g++) e[g] > r && c.push({ score: e[g], boxIndex: g, suppressBeginIndex: 0 });
  c.sort(o1);
  const l = a > 0 ? -0.5 / a : 0, d = [], h = [];
  for (; d.length < t && c.length > 0; ) {
    const g = c.pop(), { score: y, boxIndex: b, suppressBeginIndex: x } = g;
    if (y < r) break;
    let w = false;
    for (let C = d.length - 1; C >= x; --C) {
      const v = PO(n, b, d[C]);
      if (v >= s) {
        w = true;
        break;
      }
      if (g.score = g.score * LO(s, l, v), g.score <= r) break;
    }
    g.suppressBeginIndex = d.length, w || (g.score === y ? (d.push(b), h.push(g.score)) : g.score > r && DO(c, g, o1));
  }
  const p = d.length, f = t - p;
  i && f > 0 && (d.push(...new Array(f).fill(0)), h.push(...new Array(f).fill(0)));
  const m = { selectedIndices: d };
  return o && (m.selectedScores = h), u && (m.validOutputs = p), m;
}
function PO(n, e, t) {
  const s = n.subarray(e * 4, e * 4 + 4), r = n.subarray(t * 4, t * 4 + 4), a = Math.min(s[0], s[2]), o = Math.min(s[1], s[3]), i = Math.max(s[0], s[2]), u = Math.max(s[1], s[3]), c = Math.min(r[0], r[2]), l = Math.min(r[1], r[3]), d = Math.max(r[0], r[2]), h = Math.max(r[1], r[3]), p = (i - a) * (u - o), f = (d - c) * (h - l);
  if (p <= 0 || f <= 0) return 0;
  const m = Math.max(a, c), g = Math.max(o, l), y = Math.min(i, d), b = Math.min(u, h), x = Math.max(y - m, 0) * Math.max(b - g, 0);
  return x / (p + f - x);
}
function LO(n, e, t) {
  const s = Math.exp(e * t * t);
  return t <= n ? s : 0;
}
function o1(n, e) {
  return n.score - e.score || n.score === e.score && e.boxIndex - n.boxIndex;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
async function zO(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY) {
  const a = _(n, "boxes", "nonMaxSuppressionAsync"), o = _(e, "scores", "nonMaxSuppressionAsync"), i = cc(a, o, t, s, r);
  t = i.maxOutputSize, s = i.iouThreshold, r = i.scoreThreshold;
  const u = await Promise.all([a.data(), o.data()]), c = u[0], l = u[1], { selectedIndices: d } = ah(c, l, t, s, r);
  return a !== n && a.dispose(), o !== e && o.dispose(), bn(d, "int32");
}
const MO = zO;
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function BO(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY, a = 0) {
  const o = _(n, "boxes", "nonMaxSuppression"), i = _(e, "scores", "nonMaxSuppression"), u = cc(o, i, t, s, r, a);
  t = u.maxOutputSize, s = u.iouThreshold, r = u.scoreThreshold, a = u.softNmsSigma;
  const c = { boxes: o, scores: i }, l = { maxOutputSize: t, iouThreshold: s, scoreThreshold: r, softNmsSigma: a }, d = F.runKernel(Ru, c, l);
  return { selectedIndices: d[0], selectedScores: d[1] };
}
const WO = O({ nonMaxSuppressionWithScore_: BO });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
async function VO(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY, a = 0) {
  const o = _(n, "boxes", "nonMaxSuppressionAsync"), i = _(e, "scores", "nonMaxSuppressionAsync"), u = cc(o, i, t, s, r, a);
  t = u.maxOutputSize, s = u.iouThreshold, r = u.scoreThreshold, a = u.softNmsSigma;
  const c = await Promise.all([o.data(), i.data()]), l = c[0], d = c[1], { selectedIndices: h, selectedScores: p } = oh(l, d, t, s, r, a);
  return o !== n && o.dispose(), i !== e && i.dispose(), { selectedIndices: bn(h, "int32"), selectedScores: bn(p) };
}
const UO = VO;
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function GO(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY, a = false) {
  const o = _(n, "boxes", "nonMaxSuppression"), i = _(e, "scores", "nonMaxSuppression"), u = cc(o, i, t, s, r, null), c = u.maxOutputSize, l = u.iouThreshold, d = u.scoreThreshold, h = { boxes: o, scores: i }, p = { maxOutputSize: c, iouThreshold: l, scoreThreshold: d, padToMaxOutputSize: a }, f = F.runKernel(Kl, h, p);
  return { selectedIndices: f[0], validOutputs: f[1] };
}
const HO = O({ nonMaxSuppressionPadded_: GO });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
async function jO(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY, a = false) {
  const o = _(n, "boxes", "nonMaxSuppressionAsync"), i = _(e, "scores", "nonMaxSuppressionAsync"), u = cc(o, i, t, s, r, null), c = u.maxOutputSize, l = u.iouThreshold, d = u.scoreThreshold, [h, p] = await Promise.all([o.data(), i.data()]), { selectedIndices: f, validOutputs: m } = Hf(h, p, c, l, d, a);
  return o !== n && o.dispose(), i !== e && i.dispose(), { selectedIndices: bn(f, "int32"), validOutputs: Ne(m, "int32") };
}
const qO = jO;
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function KO(n, e, t = false, s = false) {
  const r = _(n, "images", "resizeBilinear");
  $(r.rank === 3 || r.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`), $(e.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${e}.`), $(s === false || t === false, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let a = r, o = false;
  r.rank === 3 && (o = true, a = B(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  const i = { images: a }, u = { alignCorners: t, halfPixelCenters: s, size: e }, c = F.runKernel(Do, i, u);
  return o ? B(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const OS = O({ resizeBilinear_: KO });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function XO(n, e, t = false, s = false) {
  const r = _(n, "images", "resizeNearestNeighbor");
  $(r.rank === 3 || r.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`), $(e.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`), $(r.dtype === "float32" || r.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), $(s === false || t === false, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let a = r, o = false;
  r.rank === 3 && (o = true, a = B(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  const i = { images: a }, u = { alignCorners: t, halfPixelCenters: s, size: e }, c = F.runKernel(Eo, i, u);
  return o ? B(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const PS = O({ resizeNearestNeighbor_: XO });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* https://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function YO(n, e = "binary", t = false, s = 0.5) {
  const r = _(n, "image", "threshold"), a = 0.2989, o = 0.587, i = 0.114, u = r.shape[0] * r.shape[1];
  let c = z(bn([s]), 255), l, d, h, p;
  if ($(r.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${r.rank}.`), $(r.shape[2] === 3 || r.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`), $(r.dtype === "int32" || r.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`), $(e === "otsu" || e === "binary", () => `Method must be binary or otsu, but was ${e}`), r.shape[2] === 3) {
    [l, d, h] = Vn(r, [1, 1, 1], -1);
    const g = z(l, a), y = z(d, o), b = z(h, i);
    p = te(te(g, y), b);
  } else p = n;
  if (e === "otsu") {
    const g = Ky(ue(Nf(p), "int32"), Wn([]), 256);
    c = QO(g, u);
  }
  const f = t ? Zo(p, c) : On(p, c);
  return ue(z(f, 255), "int32");
}
function QO(n, e) {
  let t = bn([-1]), s = bn([0]), r = bn([0]), a, o, i, u, c, l;
  for (let d = 0; d < n.size - 1; d++) {
    a = Qe(n, 0, d + 1), o = Qe(n, d + 1), c = ve(we(a), e), l = ve(we(o), e);
    const h = we(z(a, Li(0, a.size)));
    i = ve(h, we(a));
    const p = Xu(o.shape, a.size), f = te(Li(0, o.size), p), m = z(o, f);
    u = ve(we(m), we(o));
    const g = xe(i, u), y = xe(i, u), b = z(c, l);
    r = z(z(b, g), y);
    const x = On(r, s);
    s = on(x, r, s), t = on(x, bn([d]), t);
  }
  return t;
}
const ZO = O({ threshold_: YO });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function JO(n, e, t = "nearest", s = "constant", r = 0, a) {
  const o = _(n, "image", "transform", "float32"), i = _(e, "transforms", "transform", "float32");
  $(o.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${o.rank}.`), $(i.rank === 2 && (i.shape[0] === o.shape[0] || i.shape[0] === 1) && i.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), $(a == null || a.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${a}.`);
  const u = { image: o, transforms: i }, c = { interpolation: t, fillMode: s, fillValue: r, outputShape: a };
  return F.runKernel(Hu, u, c);
}
const eP = O({ transform_: JO });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function tP(n, e, t) {
  const s = _(n, "a", "bandPart");
  $(s.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${s.rank}.`);
  const r = s.shape, [a, o] = s.shape.slice(-2);
  let i, u;
  typeof e == "number" ? ($(e % 1 === 0, () => `bandPart(): numLower must be an integer, got ${e}.`), $(e <= a, () => `bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`), i = _(e < 0 ? a : e, "numLower", "bandPart")) : ($(e.dtype === "int32", () => "bandPart(): numLower's dtype must be an int32."), i = on(vl(e, 0), a, va(e, a))), typeof t == "number" ? ($(t % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${t}.`), $(t <= o, () => `bandPart(): numUpper (${t}) must not be greater than the number of columns (${o}).`), u = _(t < 0 ? o : t, "numUpper", "bandPart")) : ($(t.dtype === "int32", () => "bandPart(): numUpper's dtype must be an int32."), u = on(vl(t, 0), o, va(t, o)));
  const c = B(Li(0, a, 1, "int32"), [-1, 1]), l = Li(0, o, 1, "int32"), d = xe(c, l), h = Ps(Zo(d, i), Kr(d, St(u))), p = Ot([a, o], s.dtype);
  return B(En(vs(B(s, [-1, a, o])).map((f) => on(h, f, p))), r);
}
const nP = O({ bandPart_: tP });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sP(n) {
  let e;
  if (Array.isArray(n)) {
    e = false, $(n != null && n.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    const r = n[0].shape[0];
    for (let a = 1; a < n.length; ++a) $(n[a].shape[0] === r, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[a].shape[0]} vs. ${r})`);
  } else e = true, n = Vn(n, n.shape[0], 0).map((r) => ei(r, [0]));
  $(n.length <= n[0].shape[0], () => `Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);
  const t = [], s = n;
  for (let r = 0; r < n.length; ++r) t.push(F.tidy(() => {
    let a = s[r];
    if (r > 0) for (let o = 0; o < r; ++o) {
      const i = z(we(z(t[o], a)), t[o]);
      a = xe(a, i);
    }
    return ve(a, oc(a, "euclidean"));
  }));
  return e ? En(t, 0) : t;
}
const rP = O({ gramSchmidt_: sP });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function aP(n, e = false) {
  if ($(n.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`), n.rank === 2) return i1(n, e);
  {
    const t = n.shape.slice(0, n.shape.length - 2).reduce((u, c) => u * c), s = vs(B(n, [t, n.shape[n.shape.length - 2], n.shape[n.shape.length - 1]]), 0), r = [], a = [];
    s.forEach((u) => {
      const [c, l] = i1(u, e);
      r.push(c), a.push(l);
    });
    const o = B(En(r, 0), n.shape), i = B(En(a, 0), n.shape);
    return [o, i];
  }
}
function i1(n, e = false) {
  return F.tidy(() => {
    $(n.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);
    const t = n.shape[0], s = n.shape[1];
    let r = wf(t), a = mr(n);
    const o = pa([[1]], [1, 1]);
    let i = mr(o);
    const u = t >= s ? s : t;
    for (let c = 0; c < u; ++c) {
      const l = a, d = i, h = r;
      [i, a, r] = F.tidy(() => {
        const p = Qe(a, [c, c], [t - c, 1]), f = oc(p), m = Qe(a, [c, c], [1, 1]), g = on(On(m, 0), pa([[-1]]), pa([[1]])), y = xe(m, z(g, f)), b = ve(p, y);
        b.shape[0] === 1 ? i = mr(o) : i = Lt([o, Qe(b, [1, 0], [b.shape[0] - 1, b.shape[1]])], 0);
        const x = St(ve(je(g, y), f)), w = Qe(a, [c, 0], [t - c, s]), C = z(x, i), v = Ye(i);
        if (c === 0) a = xe(w, je(C, je(v, w)));
        else {
          const N = xe(w, je(C, je(v, w)));
          a = Lt([Qe(a, [0, 0], [c, s]), N], 0);
        }
        const k = Ye(C), R = Qe(r, [0, c], [t, r.shape[1] - c]);
        if (c === 0) r = xe(R, je(je(R, i), k));
        else {
          const N = xe(R, je(je(R, i), k));
          r = Lt([Qe(r, [0, 0], [t, c]), N], 1);
        }
        return [i, a, r];
      }), Me([l, d, h]);
    }
    return !e && t > s && (r = Qe(r, [0, 0], [t, s]), a = Qe(a, [0, 0], [s, s])), [r, a];
  });
}
const oP = O({ qr_: aP });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var Rn;
(function(n) {
  n[n.NONE = 0] = "NONE", n[n.MEAN = 1] = "MEAN", n[n.SUM = 2] = "SUM", n[n.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Rn || (Rn = {}));
function iP(n, e, t = Rn.SUM_BY_NONZERO_WEIGHTS) {
  const s = _(n, "losses", "computeWeightedLoss");
  let r = null;
  e != null && (r = _(e, "weights", "computeWeightedLoss"));
  const a = r == null ? s : z(s, r);
  if (t === Rn.NONE) return a;
  if (t === Rn.SUM) return we(a);
  if (t === Rn.MEAN) {
    if (r == null) return Et(a);
    {
      const o = s.size / r.size, i = ve(we(a), we(r));
      return o > 1 ? ve(i, Ne(o)) : i;
    }
  }
  if (t === Rn.SUM_BY_NONZERO_WEIGHTS) {
    if (r == null) return ve(we(a), Ne(s.size));
    {
      const o = z(r, Bn(s.shape)), i = ue(we(Pi(o, Ne(0))), "float32");
      return ve(we(a), i);
    }
  }
  throw Error(`Unknown reduction: ${t}`);
}
const Yr = O({ computeWeightedLoss_: iP });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function uP(n, e, t, s = Rn.SUM_BY_NONZERO_WEIGHTS) {
  const r = _(n, "labels", "absoluteDifference"), a = _(e, "predictions", "absoluteDifference");
  let o = null;
  t != null && (o = _(t, "weights", "absoluteDifference")), nn(r.shape, a.shape, "Error in absoluteDifference: ");
  const i = Vt(xe(r, a));
  return Yr(i, o, s);
}
const lP = O({ absoluteDifference_: uP });
function cP(n, e, t, s, r = Rn.SUM_BY_NONZERO_WEIGHTS) {
  const a = _(n, "labels", "cosineDistance"), o = _(e, "predictions", "cosineDistance");
  let i = null;
  s != null && (i = _(s, "weights", "cosineDistance")), nn(a.shape, o.shape, "Error in cosineDistance: ");
  const u = Ne(1), c = xe(u, we(z(a, o), t, true));
  return Yr(c, i, r);
}
const dP = O({ cosineDistance_: cP });
function hP(n, e, t, s = Rn.SUM_BY_NONZERO_WEIGHTS) {
  let r = _(n, "labels", "hingeLoss");
  const a = _(e, "predictions", "hingeLoss");
  let o = null;
  t != null && (o = _(t, "weights", "hingeLoss")), nn(r.shape, a.shape, "Error in hingeLoss: ");
  const i = Ne(1);
  r = xe(z(Ne(2), r), i);
  const u = ar(xe(i, z(r, a)));
  return Yr(u, o, s);
}
const pP = O({ hingeLoss_: hP });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function fP(n, e, t, s = 1, r = Rn.SUM_BY_NONZERO_WEIGHTS) {
  const a = _(n, "labels", "huberLoss"), o = _(e, "predictions", "huberLoss");
  let i = null;
  t != null && (i = _(t, "weights", "huberLoss")), nn(a.shape, o.shape, "Error in huberLoss: ");
  const u = Ne(s), c = Vt(xe(o, a)), l = va(c, u), d = xe(c, l), h = te(z(Ne(0.5), yt(l)), z(u, d));
  return Yr(h, i, r);
}
const mP = O({ huberLoss_: fP });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function gP(n, e, t, s = 1e-7, r = Rn.SUM_BY_NONZERO_WEIGHTS) {
  const a = _(n, "labels", "logLoss"), o = _(e, "predictions", "logLoss");
  let i = null;
  t != null && (i = _(t, "weights", "logLoss")), nn(a.shape, o.shape, "Error in logLoss: ");
  const u = Ne(1), c = Ne(s), l = St(z(a, as(te(o, c)))), d = z(xe(u, a), as(te(xe(u, o), c))), h = xe(l, d);
  return Yr(h, i, r);
}
const yP = O({ logLoss_: gP });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function bP(n, e, t, s = Rn.SUM_BY_NONZERO_WEIGHTS) {
  const r = _(n, "labels", "meanSquaredError"), a = _(e, "predictions", "meanSquaredError");
  let o = null;
  t != null && (o = _(t, "weights", "meanSquaredError")), nn(r.shape, a.shape, "Error in meanSquaredError: ");
  const i = Of(r, a);
  return Yr(i, o, s);
}
const xP = O({ meanSquaredError_: bP });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function wP(n, e) {
  const t = _(n, "labels", "sigmoidCrossEntropyWithLogits"), s = _(e, "logits", "sigmoidCrossEntropyWithLogits");
  nn(t.shape, s.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  const r = ar(s), a = z(s, t), o = qd(qn(St(Vt(s))));
  return te(xe(r, a), o);
}
function CP(n, e, t, s = 0, r = Rn.SUM_BY_NONZERO_WEIGHTS) {
  let a = _(n, "multiClassLabels", "sigmoidCrossEntropy");
  const o = _(e, "logits", "sigmoidCrossEntropy");
  let i = null;
  if (t != null && (i = _(t, "weights", "sigmoidCrossEntropy")), nn(a.shape, o.shape, "Error in sigmoidCrossEntropy: "), s > 0) {
    const c = Ne(s), l = Ne(1), d = Ne(0.5);
    a = te(z(a, xe(l, c)), z(d, c));
  }
  const u = wP(a, o);
  return Yr(u, i, r);
}
const IP = O({ sigmoidCrossEntropy_: CP });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function SP(n, e, t = -1) {
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1) throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${t}`);
  return wr((r, a, o) => {
    const u = Kd(a, [t], true), c = xe(ue(a, "float32"), u);
    o([r, c]);
    const l = St(z(c, r));
    return { value: we(l, [t]), gradFunc: (p, f) => {
      const [m, g] = f, y = ft(p.shape, [t]);
      return [z(B(p, y), xe(ue(m, "float32"), qn(g))), z(B(p, y), xe(qn(g), ue(m, "float32")))];
    } };
  })(n, e);
}
function vP(n, e, t, s = 0, r = Rn.SUM_BY_NONZERO_WEIGHTS) {
  let a = _(n, "onehotLabels", "softmaxCrossEntropy");
  const o = _(e, "logits", "softmaxCrossEntropy");
  let i = null;
  if (t != null && (i = _(t, "weights", "softmaxCrossEntropy")), nn(a.shape, o.shape, "Error in softmaxCrossEntropy: "), s > 0) {
    const c = Ne(s), l = Ne(1), d = Ne(a.shape[1]);
    a = te(z(a, xe(l, c)), ve(c, d));
  }
  const u = SP(a, o);
  return Yr(u, i, r);
}
const $P = O({ softmaxCrossEntropy_: vP });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function kP(n, e, t, s) {
  const r = _(n, "indices", "sparseFillEmptyRows", "int32"), a = _(e, "values", "sparseFillEmptyRows"), o = _(t, "denseShape", "sparseFillEmptyRows", "int32"), i = _(s, "defaultValue", "sparseFillEmptyRows", a.dtype);
  if (r.rank !== 2) throw new Error(`Indices should be Tensor2D but received shape
        ${r.shape}`);
  if (a.rank !== 1) throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);
  if (o.rank !== 1) throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);
  if (i.rank !== 0) throw new Error(`Default value should be a scalar but received shape ${i.shape}`);
  const u = { indices: r, values: a, denseShape: o, defaultValue: i }, c = F.runKernel(Ad, u);
  return { outputIndices: c[0], outputValues: c[1], emptyRowIndicator: c[2], reverseIndexMap: c[3] };
}
const NP = O({ sparseFillEmptyRows_: kP });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function TP(n, e, t) {
  const s = _(n, "inputIndices", "sparseReshape", "int32"), r = _(e, "inputShape", "sparseReshape", "int32"), a = _(t, "newShape", "sparseReshape", "int32");
  if (s.rank !== 2) throw new Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);
  if (r.rank !== 1) throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);
  if (a.rank !== 1) throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);
  const o = { inputIndices: s, inputShape: r, newShape: a }, i = F.runKernel(Yl, o);
  return { outputIndices: i[0], outputShape: i[1] };
}
const RP = O({ sparseReshape_: TP });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _P(n, e, t) {
  const s = _(n, "data", "sparseSegmentMean"), r = _(e, "indices", "sparseSegmentMean", "int32"), a = _(t, "segmentIds", "sparseSegmentMean", "int32");
  if (s.rank < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1) throw new Error(`Indices should be Tensor1D but received shape
          ${r.shape}`);
  if (a.rank !== 1) throw new Error(`Segment ids should be Tensor1D but received shape
          ${a.shape}`);
  const o = { data: s, indices: r, segmentIds: a };
  return F.runKernel(Ql, o);
}
const EP = O({ sparseSegmentMean_: _P });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function DP(n, e, t) {
  const s = _(n, "data", "sparseSegmentSum"), r = _(e, "indices", "sparseSegmentSum", "int32"), a = _(t, "segmentIds", "sparseSegmentSum", "int32");
  if (s.rank < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1) throw new Error(`Indices should be Tensor1D but received shape
         ${r.shape}`);
  if (a.rank !== 1) throw new Error(`Segment ids should be Tensor1D but received shape
         ${a.shape}`);
  const o = { data: s, indices: r, segmentIds: a };
  return F.runKernel(Zl, o);
}
const AP = O({ sparseSegmentSum_: DP });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function FP(n, e, t, s, r, a, o, i) {
  const u = _(n, "data", "stringNGrams", "string");
  if (u.dtype !== "string") throw new Error("Data must be of datatype string");
  if (u.shape.length !== 1) throw new Error(`Data must be a vector, saw: ${u.shape}`);
  const c = _(e, "dataSplits", "stringNGrams");
  if (c.dtype !== "int32") throw new Error("Data splits must be of datatype int32");
  const l = { separator: t, nGramWidths: s, leftPad: r, rightPad: a, padWidth: o, preserveShortSequences: i }, d = { data: u, dataSplits: c }, h = F.runKernel(ec, d, l);
  return { nGrams: h[0], nGramsSplits: h[1] };
}
const OP = O({ stringNGrams_: FP });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function PP(n, e, t = true) {
  const s = _(n, "input", "stringSplit", "string"), r = _(e, "delimiter", "stringSplit", "string");
  if (s.rank !== 1) throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);
  if (r.rank !== 0) throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);
  const a = { skipEmpty: t }, o = { input: s, delimiter: r }, i = F.runKernel(Od, o, a);
  return { indices: i[0], values: i[1], shape: i[2] };
}
const LP = O({ stringSplit_: PP });
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function zP(n, e) {
  const t = _(n, "input", "stringToHashBucketFast", "string"), s = { numBuckets: e };
  if (e <= 0) throw new Error("Number of buckets must be at least 1");
  const r = { input: t };
  return F.runKernel(Pd, r, s);
}
const MP = O({ stringToHashBucketFast_: zP });
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function BP(n, e, t, s = true) {
  const r = _(n, "input", "staticRegexReplace", "string"), a = { pattern: e, rewrite: t, replaceGlobal: s };
  return F.runKernel(Fd, { x: r }, a);
}
const WP = O({ staticRegexReplace_: BP });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const LS = { fft: sh, ifft: Tl, rfft: rh, irfft: Ff }, zS = { hammingWindow: mO, hannWindow: AS, frame: FS, stft: xO }, Ds = { flipLeftRight: SO, grayscaleToRGB: $O, resizeNearestNeighbor: PS, resizeBilinear: OS, rgbToGrayscale: NO, rotateWithOffset: RO, cropAndResize: CO, nonMaxSuppression: EO, nonMaxSuppressionAsync: MO, nonMaxSuppressionWithScore: WO, nonMaxSuppressionWithScoreAsync: UO, nonMaxSuppressionPadded: HO, nonMaxSuppressionPaddedAsync: qO, threshold: ZO, transform: eP }, zb = { bandPart: nP, gramSchmidt: rP, qr: oP }, MS = { absoluteDifference: lP, computeWeightedLoss: Yr, cosineDistance: dP, hingeLoss: pP, huberLoss: mP, logLoss: yP, meanSquaredError: xP, sigmoidCrossEntropy: IP, softmaxCrossEntropy: $P }, BS = { sparseFillEmptyRows: NP, sparseReshape: RP, sparseSegmentMean: EP, sparseSegmentSum: AP }, WS = { stringNGrams: OP, stringSplit: LP, stringToHashBucketFast: MP, staticRegexReplace: WP };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const VP = /* @__PURE__ */ new Map(), Eg = /* @__PURE__ */ new Map();
class Zu {
  getClassName() {
    return this.constructor.className;
  }
  static fromConfig(e, t) {
    return new e(t);
  }
}
class ys {
  constructor() {
    this.classNameMap = {};
  }
  static getMap() {
    return ys.instance == null && (ys.instance = new ys()), ys.instance;
  }
  static register(e) {
    ys.getMap().classNameMap[e.className] = [e, e.fromConfig];
  }
}
function ne(n, e, t) {
  $(n.className != null, () => "Class being registered does not have the static className property defined."), $(typeof n.className == "string", () => "className is required to be a string, but got type " + typeof n.className), $(n.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), typeof e > "u" && (e = "Custom"), typeof t > "u" && (t = n.className);
  const s = t, r = e + ">" + s;
  return ys.register(n), VP.set(r, n), Eg.set(n, r), n;
}
function UP(n) {
  return Eg.has(n) ? Eg.get(n) : n.className;
}
const GP = Object.freeze(Object.defineProperty({ __proto__: null, Serializable: Zu, SerializationMap: ys, getRegisteredName: UP, registerClass: ne }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Qr extends Zu {
  minimize(e, t = false, s) {
    const { value: r, grads: a } = this.computeGradients(e, s);
    if (s != null) {
      const o = s.map((i) => ({ name: i.name, tensor: a[i.name] }));
      this.applyGradients(o);
    } else this.applyGradients(a);
    return Me(a), t ? r : (r.dispose(), null);
  }
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  computeGradients(e, t) {
    return qI(e, t);
  }
  dispose() {
    this.iterations_ != null && Me(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), { name: "iter", tensor: Ne(this.iterations_, "int32") };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(e) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  async extractIterations(e) {
    return this.iterations_ = (await e[0].tensor.data())[0], e.slice(1);
  }
}
Object.defineProperty(Qr, Symbol.hasInstance, { value: (n) => n.minimize != null && n.computeGradients != null && n.applyGradients != null });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Mb extends Qr {
  static get className() {
    return "Adadelta";
  }
  constructor(e, t, s = null) {
    super(), this.learningRate = e, this.rho = t, this.epsilon = s, this.accumulatedGrads = [], this.accumulatedUpdates = [], s == null && (this.epsilon = F.backend.epsilon());
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
      const a = F.registeredVariables[s], o = false;
      this.accumulatedGrads[r] == null && (this.accumulatedGrads[r] = { originalName: `${s}/accum_grad`, variable: H(() => Ze(a).variable(o)) }), this.accumulatedUpdates[r] == null && (this.accumulatedUpdates[r] = { originalName: `${s}/accum_var`, variable: H(() => Ze(a).variable(o)) });
      const i = Array.isArray(e) ? e[r].tensor : e[s];
      if (i == null) return;
      const u = this.accumulatedGrads[r].variable, c = this.accumulatedUpdates[r].variable;
      H(() => {
        const l = te(z(u, this.rho), z(yt(i), 1 - this.rho)), d = z(ve(ln(te(c, this.epsilon)), ln(te(u, this.epsilon))), i), h = te(z(c, this.rho), z(yt(d), 1 - this.rho));
        u.assign(l), c.assign(h);
        const p = te(z(d, -this.learningRate), a);
        a.assign(p);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (Me(this.accumulatedGrads.map((e) => e.variable)), Me(this.accumulatedUpdates.map((e) => e.variable)));
  }
  async getWeights() {
    const e = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = e.length / 2, s = false;
    this.accumulatedGrads = e.slice(0, t).map((r) => ({ originalName: r.name, variable: r.tensor.variable(s) })), this.accumulatedUpdates = e.slice(t, t * 2).map((r) => ({ originalName: r.name, variable: r.tensor.variable(s) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.rho, t.epsilon);
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Bb extends Qr {
  static get className() {
    return "Adagrad";
  }
  constructor(e, t = 0.1) {
    super(), this.learningRate = e, this.initialAccumulatorValue = t, this.accumulatedGrads = [];
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
      const a = F.registeredVariables[s];
      this.accumulatedGrads[r] == null && (this.accumulatedGrads[r] = { originalName: `${s}/accumulator`, variable: H(() => Xu(a.shape, this.initialAccumulatorValue).variable(false)) });
      const o = Array.isArray(e) ? e[r].tensor : e[s];
      if (o == null) return;
      const i = this.accumulatedGrads[r].variable;
      H(() => {
        const u = te(i, yt(o));
        i.assign(u);
        const c = te(z(ve(o, ln(te(u, F.backend.epsilon()))), -this.learningRate), a);
        a.assign(c);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && Me(this.accumulatedGrads.map((e) => e.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = false;
    this.accumulatedGrads = e.map((s) => ({ originalName: s.name, variable: s.tensor.variable(t) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.initialAccumulatorValue);
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Wb extends Qr {
  static get className() {
    return "Adam";
  }
  constructor(e, t, s, r = null) {
    super(), this.learningRate = e, this.beta1 = t, this.beta2 = s, this.epsilon = r, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], H(() => {
      this.accBeta1 = Ne(t).variable(), this.accBeta2 = Ne(s).variable();
    }), r == null && (this.epsilon = F.backend.epsilon());
  }
  applyGradients(e) {
    const t = Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e);
    H(() => {
      const s = xe(1, this.accBeta1), r = xe(1, this.accBeta2);
      t.forEach((a, o) => {
        const i = F.registeredVariables[a], u = false;
        this.accumulatedFirstMoment[o] == null && (this.accumulatedFirstMoment[o] = { originalName: `${a}/m`, variable: H(() => Ze(i).variable(u)) }), this.accumulatedSecondMoment[o] == null && (this.accumulatedSecondMoment[o] = { originalName: `${a}/v`, variable: H(() => Ze(i).variable(u)) });
        const c = Array.isArray(e) ? e[o].tensor : e[a];
        if (c == null) return;
        const l = this.accumulatedFirstMoment[o].variable, d = this.accumulatedSecondMoment[o].variable, h = te(z(l, this.beta1), z(c, 1 - this.beta1)), p = te(z(d, this.beta2), z(yt(c), 1 - this.beta2)), f = ve(h, s), m = ve(p, r);
        l.assign(h), d.assign(p);
        const g = te(z(ve(f, te(ln(m), this.epsilon)), -this.learningRate), i);
        i.assign(g);
      }), this.accBeta1.assign(z(this.accBeta1, this.beta1)), this.accBeta2.assign(z(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Me(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedSecondMoment != null && Me(this.accumulatedSecondMoment.map((e) => e.variable));
  }
  async getWeights() {
    const e = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e), H(() => {
      this.accBeta1.assign(xr(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(xr(this.beta2, this.iterations_ + 1));
    });
    const t = e.length / 2, s = false;
    this.accumulatedFirstMoment = e.slice(0, t).map((r) => ({ originalName: r.name, variable: r.tensor.variable(s) })), this.accumulatedSecondMoment = e.slice(t, t * 2).map((r) => ({ originalName: r.name, variable: r.tensor.variable(s) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon);
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Vb extends Qr {
  static get className() {
    return "Adamax";
  }
  constructor(e, t, s, r = null, a = 0) {
    super(), this.learningRate = e, this.beta1 = t, this.beta2 = s, this.epsilon = r, this.decay = a, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], H(() => {
      this.iteration = Ne(0).variable(), this.accBeta1 = Ne(t).variable();
    }), r == null && (this.epsilon = F.backend.epsilon());
  }
  applyGradients(e) {
    const t = Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e);
    H(() => {
      const s = xe(1, this.accBeta1), r = ve(-this.learningRate, te(z(this.iteration, this.decay), 1));
      t.forEach((a, o) => {
        const i = F.registeredVariables[a], u = false;
        this.accumulatedFirstMoment[o] == null && (this.accumulatedFirstMoment[o] = { originalName: `${a}/m`, variable: Ze(i).variable(u) }), this.accumulatedWeightedInfNorm[o] == null && (this.accumulatedWeightedInfNorm[o] = { originalName: `${a}/v`, variable: Ze(i).variable(u) });
        const c = Array.isArray(e) ? e[o].tensor : e[a];
        if (c == null) return;
        const l = this.accumulatedFirstMoment[o].variable, d = this.accumulatedWeightedInfNorm[o].variable, h = te(z(l, this.beta1), z(c, 1 - this.beta1)), p = z(d, this.beta2), f = Vt(c), m = Sr(p, f);
        l.assign(h), d.assign(m);
        const g = te(z(ve(r, s), ve(h, te(m, this.epsilon))), i);
        i.assign(g);
      }), this.iteration.assign(te(this.iteration, 1)), this.accBeta1.assign(z(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Me(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedWeightedInfNorm != null && Me(this.accumulatedWeightedInfNorm.map((e) => e.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(e) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay);
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class jf extends Qr {
  static get className() {
    return "SGD";
  }
  constructor(e) {
    super(), this.learningRate = e, this.setLearningRate(e);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
      const a = Array.isArray(e) ? e[r].tensor : e[s];
      if (a == null) return;
      const o = F.registeredVariables[s];
      H(() => {
        const i = te(z(this.c, a), o);
        o.assign(i);
      });
    }), this.incrementIterations();
  }
  setLearningRate(e) {
    this.learningRate = e, this.c != null && this.c.dispose(), this.c = Qt(Ne(-e));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(e) {
    if (e = await this.extractIterations(e), e.length !== 0) throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate);
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Ub extends jf {
  static get className() {
    return "Momentum";
  }
  constructor(e, t, s = false) {
    super(e), this.learningRate = e, this.momentum = t, this.useNesterov = s, this.accumulations = [], this.m = Ne(this.momentum);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
      const a = F.registeredVariables[s];
      this.accumulations[r] == null && (this.accumulations[r] = { originalName: `${s}/momentum`, variable: H(() => Ze(a).variable(false)) });
      const o = this.accumulations[r].variable, i = Array.isArray(e) ? e[r].tensor : e[s];
      i != null && H(() => {
        let u;
        const c = te(z(this.m, o), i);
        this.useNesterov ? u = te(z(this.c, te(i, z(c, this.m))), a) : u = te(z(this.c, c), a), o.assign(c), a.assign(u);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && Me(this.accumulations.map((e) => e.variable));
  }
  setMomentum(e) {
    this.momentum = e;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = false;
    this.accumulations = e.map((s) => ({ originalName: s.name, variable: s.tensor.variable(t) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.momentum, t.useNesterov);
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Gb extends Qr {
  static get className() {
    return "RMSProp";
  }
  constructor(e, t = 0.9, s = 0, r = null, a = false) {
    if (super(), this.learningRate = e, this.decay = t, this.momentum = s, this.epsilon = r, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = a, r == null && (this.epsilon = F.backend.epsilon()), e == null) throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
      const a = F.registeredVariables[s], o = false;
      this.accumulatedMeanSquares[r] == null && (this.accumulatedMeanSquares[r] = { originalName: `${s}/rms`, variable: H(() => Ze(a).variable(o)) }), this.accumulatedMoments[r] == null && (this.accumulatedMoments[r] = { originalName: `${s}/momentum`, variable: H(() => Ze(a).variable(o)) }), this.accumulatedMeanGrads[r] == null && this.centered && (this.accumulatedMeanGrads[r] = { originalName: `${s}/mg`, variable: H(() => Ze(a).variable(o)) });
      const i = Array.isArray(e) ? e[r].tensor : e[s];
      if (i == null) return;
      const u = this.accumulatedMeanSquares[r].variable, c = this.accumulatedMoments[r].variable;
      H(() => {
        const l = te(z(u, this.decay), z(yt(i), 1 - this.decay));
        if (this.centered) {
          const d = this.accumulatedMeanGrads[r].variable, h = te(z(d, this.decay), z(i, 1 - this.decay)), p = ve(z(i, this.learningRate), ln(xe(l, te(yt(h), this.epsilon)))), f = te(z(c, this.momentum), p);
          u.assign(l), d.assign(h), c.assign(f);
          const m = xe(a, f);
          a.assign(m);
        } else {
          const d = te(z(u, this.decay), z(yt(i), 1 - this.decay)), h = te(z(c, this.momentum), ve(z(i, this.learningRate), ln(te(d, this.epsilon))));
          u.assign(d), c.assign(h);
          const p = xe(a, h);
          a.assign(p);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && Me(this.accumulatedMeanSquares.map((e) => e.variable)), this.accumulatedMeanGrads != null && this.centered && Me(this.accumulatedMeanGrads.map((e) => e.variable)), this.accumulatedMoments != null && Me(this.accumulatedMoments.map((e) => e.variable));
  }
  async getWeights() {
    const e = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && e.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = this.centered ? e.length / 3 : e.length / 2, s = false;
    this.accumulatedMeanSquares = e.slice(0, t).map((r) => ({ originalName: r.name, variable: r.tensor.variable(s) })), this.accumulatedMoments = e.slice(t, t * 2).map((r) => ({ originalName: r.name, variable: r.tensor.variable(s) })), this.centered && (this.accumulatedMeanGrads = e.slice(t * 2, t * 3).map((r) => ({ originalName: r.name, variable: r.tensor.variable(s) })));
  }
  getConfig() {
    return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered);
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const HP = [Mb, Bb, Wb, Vb, Ub, Gb, jf];
function jP() {
  for (const n of HP) ne(n);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const qP = "model", KP = ".json", XP = ".weights.bin";
function u1(n) {
  return new Promise((e) => setTimeout(e)).then(n);
}
class zi {
  constructor(e) {
    if (!U().getBool("IS_BROWSER")) throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    e.startsWith(zi.URL_SCHEME) && (e = e.slice(zi.URL_SCHEME.length)), (e == null || e.length === 0) && (e = qP), this.modelJsonFileName = e + KP, this.weightDataFileName = e + XP;
  }
  async save(e) {
    if (typeof document > "u") throw new Error("Browser downloads are not supported in this environment since `document` is not present");
    const t = sr.join(e.weightData), s = window.URL.createObjectURL(new Blob([t], { type: "application/octet-stream" }));
    if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
    {
      const r = [{ paths: ["./" + this.weightDataFileName], weights: e.weightSpecs }], a = NI(e, r), o = window.URL.createObjectURL(new Blob([JSON.stringify(a)], { type: "application/json" })), i = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
      if (i.download = this.modelJsonFileName, i.href = o, await u1(() => i.dispatchEvent(new MouseEvent("click"))), e.weightData != null) {
        const u = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
        u.download = this.weightDataFileName, u.href = s, await u1(() => u.dispatchEvent(new MouseEvent("click")));
      }
      return { modelArtifactsInfo: Wd(e) };
    }
  }
}
zi.URL_SCHEME = "downloads://";
class YP {
  constructor(e) {
    if (e == null || e.length < 1) throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);
    this.jsonFile = e[0], this.weightsFiles = e.slice(1);
  }
  async load() {
    return new Promise((e, t) => {
      const s = new FileReader();
      s.onload = (r) => {
        const a = JSON.parse(r.target.result), o = a.modelTopology;
        if (o == null) {
          t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (a.weightsManifest == null) {
          t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (this.weightsFiles.length === 0) {
          e({ modelTopology: o });
          return;
        }
        const u = Ay(a, (c) => this.loadWeights(c));
        e(u);
      }, s.onerror = (r) => t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), s.readAsText(this.jsonFile);
    });
  }
  loadWeights(e) {
    const t = [], s = [];
    for (const o of e) t.push(...o.weights), s.push(...o.paths);
    const r = this.checkManifestAndWeightFiles(e), a = s.map((o) => this.loadWeightsFile(o, r[o]));
    return Promise.all(a).then((o) => [t, o]);
  }
  loadWeightsFile(e, t) {
    return new Promise((s, r) => {
      const a = new FileReader();
      a.onload = (o) => {
        const i = o.target.result;
        s(i);
      }, a.onerror = (o) => r(`Failed to weights data from file of path '${e}'.`), a.readAsArrayBuffer(t);
    });
  }
  checkManifestAndWeightFiles(e) {
    const t = [], s = this.weightsFiles.map((a) => Q0(a.name)), r = {};
    for (const a of e) a.paths.forEach((o) => {
      const i = Q0(o);
      if (t.indexOf(i) !== -1) throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);
      if (t.push(i), s.indexOf(i) === -1) throw new Error(`Weight file with basename '${i}' is not provided.`);
      r[o] = this.weightsFiles[s.indexOf(i)];
    });
    if (t.length !== this.weightsFiles.length) throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);
    return r;
  }
}
const QP = (n) => U().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(zi.URL_SCHEME) ? ZP(n.slice(zi.URL_SCHEME.length)) : null;
_t.registerSaveRouter(QP);
function ZP(n = "model") {
  return new zi(n);
}
function JP(n) {
  return new YP(n);
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function l1(n, e, t, s) {
  o(n), t = t ?? 0, s = s ?? 1, i(t, s);
  let r = 0;
  const a = (u) => (u.then((c) => {
    const l = t + ++r / n.length * (s - t);
    return e(l), c;
  }), u);
  function o(u) {
    $(u != null && Array.isArray(u) && u.length > 0, () => "promises must be a none empty array");
  }
  function i(u, c) {
    $(u >= 0 && u <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${u}`), $(c >= 0 && c <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${c}`), $(c >= u, () => `startFraction must be no more than endFraction, but got startFraction ${u} and endFraction ${c}`);
  }
  return Promise.all(n.map(a));
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
async function VS(n, e) {
  e == null && (e = {});
  const t = e.fetchFunc == null ? U().platform.fetch : e.fetchFunc, s = n.map((d) => t(d, e.requestInit, { isBinary: true })), i = (e.onProgress == null ? await Promise.all(s) : await l1(s, e.onProgress, 0, 0.5)).map((d) => d.arrayBuffer());
  return e.onProgress == null ? await Promise.all(i) : await l1(i, e.onProgress, 0.5, 1);
}
function eL(n, e) {
  var t;
  const s = e.fetchFunc == null ? U().platform.fetch : e.fetchFunc;
  let r = 0, a;
  return (t = e.onProgress) === null || t === void 0 || t.call(e, 0), new ReadableStream({ pull: async (o) => {
    for (var i; r < n.length; ) {
      a || (a = (await s(n[r], e.requestInit, { isBinary: true })).body.getReader());
      const { done: u, value: c } = await a.read();
      if (u) {
        r++, a = void 0, (i = e.onProgress) === null || i === void 0 || i.call(e, r / n.length);
        continue;
      }
      o.enqueue(c);
      return;
    }
    o.close();
  } });
}
async function US(n, e = "", t, s) {
  return GS((o) => VS(o, { requestInit: s }))(n, e, t);
}
function GS(n) {
  return async (e, t = "", s) => {
    const r = e.map(() => false), a = {}, o = s != null ? s.map(() => false) : [], i = [];
    if (e.forEach((p, f) => {
      let m = 0;
      p.weights.forEach((g) => {
        const y = "quantization" in g ? g.quantization.dtype : g.dtype, b = Ei[y] * A(g.shape), x = () => {
          r[f] = true, a[f] == null && (a[f] = []), a[f].push({ manifestEntry: g, groupOffset: m, sizeBytes: b });
        };
        s != null ? s.forEach((w, C) => {
          w === g.name && (x(), o[C] = true);
        }) : x(), i.push(g.name), m += b;
      });
    }), !o.every((p) => p)) {
      const p = s.filter((f, m) => !o[m]);
      throw new Error(`Could not find weights in manifest with names: ${p.join(", ")}. 
Manifest JSON has weights with names: ${i.join(", ")}.`);
    }
    const u = r.reduce((p, f, m) => (f && p.push(m), p), []), c = [];
    u.forEach((p) => {
      e[p].paths.forEach((f) => {
        const m = t + (t.endsWith("/") ? "" : "/") + f;
        c.push(m);
      });
    });
    const l = await n(c), d = {};
    let h = 0;
    return u.forEach((p) => {
      const f = e[p].paths.length, m = new sr(l.slice(h, h + f));
      a[p].forEach((y) => {
        const b = m.slice(y.groupOffset, y.groupOffset + y.sizeBytes), x = _y(b, [y.manifestEntry]);
        for (const w in x) d[w] = x[w];
      }), h += f;
    }), d;
  };
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const tL = "application/octet-stream", nL = "application/json";
class Hb {
  constructor(e, t) {
    if (this.DEFAULT_METHOD = "POST", t == null && (t = {}), this.weightPathPrefix = t.weightPathPrefix, this.weightUrlConverter = t.weightUrlConverter, t.fetchFunc != null ? ($(typeof t.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = t.fetchFunc) : this.fetch = U().platform.fetch, $(e != null && e.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(e) && $(e.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${e.length}).`), this.path = e, t.requestInit != null && t.requestInit.body != null) throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = t.requestInit || {}, this.loadOptions = t;
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    const t = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    t.body = new FormData();
    const s = [{ paths: ["./model.weights.bin"], weights: e.weightSpecs }], r = NI(e, s);
    if (t.body.append("model.json", new Blob([JSON.stringify(r)], { type: nL }), "model.json"), e.weightData != null) {
      const o = sr.join(e.weightData);
      t.body.append("model.weights.bin", new Blob([o], { type: tL }), "model.weights.bin");
    }
    const a = await this.fetch(this.path, t);
    if (a.ok) return { modelArtifactsInfo: Wd(e), responses: [a] };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`);
  }
  async loadModelJSON() {
    const e = await this.fetch(this.path, this.requestInit);
    if (!e.ok) throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);
    let t;
    try {
      t = await e.json();
    } catch {
      let o = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? o += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : o += " Please make sure the server is serving valid JSON for this request.", new Error(o);
    }
    const s = t.modelTopology, r = t.weightsManifest;
    if (s == null && r == null) throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return t;
  }
  async load() {
    if (this.loadOptions.streamWeights) return this.loadStream();
    const e = await this.loadModelJSON();
    return Ay(e, (t) => this.loadWeights(t));
  }
  async loadStream() {
    const e = await this.loadModelJSON(), t = await this.getWeightUrls(e.weightsManifest), s = Ep(e.weightsManifest), r = () => eL(t, this.loadOptions);
    return Object.assign(Object.assign({}, e), { weightSpecs: s, getWeightStream: r });
  }
  async getWeightUrls(e) {
    const t = Array.isArray(this.path) ? this.path[1] : this.path, [s, r] = sL(t), a = this.weightPathPrefix || s, o = [], i = [];
    for (const u of e) for (const c of u.paths) this.weightUrlConverter != null ? i.push(this.weightUrlConverter(c)) : o.push(a + c + r);
    return this.weightUrlConverter && o.push(...await Promise.all(i)), o;
  }
  async loadWeights(e) {
    const t = await this.getWeightUrls(e), s = Ep(e), r = await VS(t, this.loadOptions);
    return [s, r];
  }
}
Hb.URL_SCHEME_REGEX = /^https?:\/\//;
function sL(n) {
  const e = n.lastIndexOf("/"), t = n.lastIndexOf("?"), s = n.substring(0, e), r = t > e ? n.substring(t) : "";
  return [s + "/", r];
}
function Dg(n) {
  return n.match(Hb.URL_SCHEME_REGEX) != null;
}
const HS = (n, e) => {
  if (typeof fetch > "u" && (e == null || e.fetchFunc == null)) return null;
  {
    let t = true;
    if (Array.isArray(n) ? t = n.every((s) => Dg(s)) : t = Dg(n), t) return jb(n, e);
  }
  return null;
};
_t.registerSaveRouter(HS);
_t.registerLoadRouter(HS);
function jb(n, e) {
  return new Hb(n, e);
}
function jS(n, e) {
  return jb(n, e);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Zm {
  constructor(e) {
    this.modelArtifacts = e;
  }
  load() {
    return this.modelArtifacts;
  }
}
class qS {
  constructor(e) {
    this.saveHandler = e;
  }
  save(e) {
    return this.saveHandler(e);
  }
}
class rL {
  constructor(e) {
    e.load && (this.load = () => Promise.resolve(e.load())), e.save && (this.save = (t) => Promise.resolve(e.save(t)));
  }
}
function aL(n, e, t, s) {
  const r = arguments;
  return new rL(Ap(...r));
}
function Ap(n, e, t, s) {
  return arguments.length === 1 ? n.modelTopology != null || n.weightSpecs != null ? new Zm(n) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Zm({ modelTopology: n })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Zm({ modelTopology: n, weightSpecs: e, weightData: t, trainingConfig: s }));
}
function oL(n) {
  return new qS(n);
}
function iL(n) {
  return new qS(n);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const qb = Object.freeze(Object.defineProperty({ __proto__: null, CompositeArrayBuffer: sr, browserFiles: JP, browserHTTPRequest: jS, concatenateArrayBuffers: kI, copyModel: BE, decodeWeights: _y, decodeWeightsStream: $I, encodeWeights: vg, fromMemory: aL, fromMemorySync: Ap, getLoadHandlers: RI, getModelArtifactsForJSON: Ay, getModelArtifactsForJSONSync: Dy, getModelArtifactsInfoForJSON: Wd, getSaveHandlers: TI, getWeightSpecs: Ep, http: jb, isHTTPScheme: Dg, listModels: zE, loadWeights: US, moveModel: WE, registerLoadRouter: kE, registerSaveRouter: $E, removeModel: ME, weightsLoaderFactory: GS, withSaveHandler: oL, withSaveHandlerSync: iL }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function uL(n, e, t) {
  const s = _(n, "labels", "confusionMatrix"), r = _(e, "predictions", "confusionMatrix");
  $(t == null || t > 0 && Number.isInteger(t), () => `If provided, numClasses must be a positive integer, but got ${t}`), $(s.rank === 1, () => `Expected the rank of labels to be 1, but got ${s.rank}`), $(r.rank === 1, () => `Expected the rank of predictions to be 1, but got ${r.rank}`), $(s.shape[0] === r.shape[0], () => `Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`), $(t > 0 && Number.isInteger(t), () => `numClasses is required to be a positive integer, but got ${t}`);
  const a = $l(ue(s, "int32"), t), o = $l(ue(r, "int32"), t), i = Ye(a), u = je(i, o);
  return ue(u, "int32");
}
const lL = O({ confusionMatrix_: uL });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const cL = Object.freeze(Object.defineProperty({ __proto__: null, confusionMatrix: lL }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let li, c1 = false;
function KS(n, e = 3) {
  if (e > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (n == null) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let t = false, s = false, r = false, a = false, o = false, i = false;
  if (n.data instanceof Uint8Array) t = true;
  else if (typeof ImageData < "u" && n instanceof ImageData) s = true;
  else if (typeof HTMLVideoElement < "u" && n instanceof HTMLVideoElement) r = true;
  else if (typeof HTMLImageElement < "u" && n instanceof HTMLImageElement) a = true;
  else if (n.getContext != null) o = true;
  else if (typeof ImageBitmap < "u" && n instanceof ImageBitmap) i = true;
  else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);
  if (nd(ed, F.backendName) != null) {
    const f = { pixels: n }, m = { numChannels: e };
    return F.runKernel(ed, f, m);
  }
  const [c, l] = r ? [n.videoWidth, n.videoHeight] : [n.width, n.height];
  let d;
  if (o) d = n.getContext("2d").getImageData(0, 0, c, l).data;
  else if (s || t) d = n.data;
  else if (a || r || i) {
    if (li == null) if (typeof document > "u") if (typeof OffscreenCanvas < "u" && typeof OffscreenCanvasRenderingContext2D < "u") li = new OffscreenCanvas(1, 1).getContext("2d");
    else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
    else li = document.createElement("canvas").getContext("2d", { willReadFrequently: true });
    li.canvas.width = c, li.canvas.height = l, li.drawImage(n, 0, 0, c, l), d = li.getImageData(0, 0, c, l).data;
  }
  let h;
  if (e === 4) h = new Int32Array(d);
  else {
    const f = c * l;
    h = new Int32Array(f * e);
    for (let m = 0; m < f; m++) for (let g = 0; g < e; ++g) h[m * e + g] = d[m * 4 + g];
  }
  return Tb(h, [l, c, e], "int32");
}
function dL(n) {
  return n != null && n.data instanceof Uint8Array;
}
function hL() {
  return typeof window < "u" && typeof ImageBitmap < "u" && window.hasOwnProperty("createImageBitmap");
}
function pL(n) {
  return n != null && n.width !== 0 && n.height !== 0;
}
function fL(n) {
  return hL() && !(n instanceof ImageBitmap) && pL(n) && !dL(n);
}
async function mL(n, e = 3) {
  let t = null;
  if (U().getBool("WRAP_TO_IMAGEBITMAP") && fL(n)) {
    let s;
    try {
      s = await createImageBitmap(n, { premultiplyAlpha: "none" });
    } catch {
      s = null;
    }
    s != null && s.width === n.width && s.height === n.height ? t = s : t = n;
  } else t = n;
  return KS(t, e);
}
function XS(n) {
  if (n.rank !== 2 && n.rank !== 3) throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);
  const e = n.rank === 2 ? 1 : n.shape[2];
  if (e > 4 || e === 2) throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${e}`);
  if (n.dtype !== "float32" && n.dtype !== "int32") throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);
}
function gL(n) {
  const e = (n == null ? void 0 : n.alpha) || 1;
  if (e > 1 || e < 0) throw new Error(`Alpha value ${e} is suppoed to be in range [0 - 1].`);
}
async function yL(n, e) {
  let t = _(n, "img", "toPixels");
  if (!(n instanceof tt)) {
    const c = t;
    t = ue(c, "int32"), c.dispose();
  }
  XS(t);
  const [s, r] = t.shape.slice(0, 2), a = t.rank === 2 ? 1 : t.shape[2], o = await t.data(), i = t.dtype === "float32" ? 255 : 1, u = new Uint8ClampedArray(r * s * 4);
  for (let c = 0; c < s * r; ++c) {
    const l = [0, 0, 0, 255];
    for (let h = 0; h < a; h++) {
      const p = o[c * a + h];
      if (t.dtype === "float32") {
        if (p < 0 || p > 1) throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${p}.`);
      } else if (t.dtype === "int32" && (p < 0 || p > 255)) throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${p}.`);
      a === 1 ? (l[0] = p * i, l[1] = p * i, l[2] = p * i) : l[h] = p * i;
    }
    const d = c * 4;
    u[d + 0] = Math.round(l[0]), u[d + 1] = Math.round(l[1]), u[d + 2] = Math.round(l[2]), u[d + 3] = Math.round(l[3]);
  }
  if (e != null) {
    c1 || nd(Nd, F.backendName) != null && (console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."), c1 = true), e.width = r, e.height = s;
    const c = e.getContext("2d"), l = new ImageData(u, r, s);
    c.putImageData(l, 0, 0);
  }
  return t !== n && t.dispose(), u;
}
function bL(n, e, t) {
  let s = _(n, "img", "draw");
  if (!(n instanceof tt)) {
    const o = s;
    s = ue(o, "int32"), o.dispose();
  }
  XS(s), gL(t == null ? void 0 : t.imageOptions);
  const r = { image: s }, a = { canvas: e, options: t };
  F.runKernel(Nd, r, a);
}
const YS = O({ fromPixels_: KS }), xL = Object.freeze(Object.defineProperty({ __proto__: null, draw: bL, fromPixels: YS, fromPixelsAsync: mL, toPixels: yL }, Symbol.toStringTag, { value: "Module" }));
function dc(n, e) {
  const t = n.shape.length, s = e.shape.length;
  if (t < 1) throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t}.`);
  if (s < 1) throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);
  if (e.dtype !== "int32") throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);
  if (e.shape[s - 1] > t) throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[s - 1]} vs. ${t}`);
  if (A(n.shape) === 0) throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);
  const r = e.shape, a = r[r.length - 1];
  let o = 1;
  for (let d = 0; d < r.length - 1; ++d) o *= r[d];
  const i = n.shape, u = r.slice();
  u.pop();
  let c = 1;
  for (let d = a; d < t; ++d) c *= i[d], u.push(i[d]);
  const l = [...me(n.shape).map((d) => d / c), 1].slice(0, a);
  return [u, o, c, l];
}
const wL = Object.freeze(Object.defineProperty({ __proto__: null, prepareAndValidate: dc }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ag = -2, CL = -1;
function qf(n, e, t) {
  const s = n.shape.length;
  $(s === e.length, () => `Error in slice${s}D: Length of begin ${e} must match the rank of the array (${s}).`), $(s === t.length, () => `Error in slice${s}D: Length of size ${t} must match the rank of the array (${s}).`);
  for (let r = 0; r < s; ++r) $(e[r] + t[r] <= n.shape[r], () => `Error in slice${s}D: begin[${r}] + size[${r}] (${e[r] + t[r]}) would overflow input.shape[${r}] (${n.shape[r]})`);
}
function IL(n) {
  const e = [];
  let t = 0;
  for (; n > 0; ) n & 1 && e.push(t), n /= 2, t++;
  return e;
}
function ih(n, e, t) {
  const s = [];
  for (let r = 0; r < n.length; r++) s[r] = Math.ceil((e[r] - n[r]) / t[r]);
  return s;
}
function QS(n, e, t, s) {
  const r = [...n];
  for (let a = r.length; a < s.length; a++) r.push(1);
  for (let a = 0; a < t; a++) a === 0 ? r[e] = 1 : (r.splice(e, 0, 1), r.pop());
  return r;
}
function ZS(n, e, t) {
  return t <= n ? t : t - (e - 1);
}
function JS(n, e) {
  const t = [];
  for (let s = 0; s < n; s++) t.push(e + s);
  return t;
}
function SL(n, e, t, s, r, a, o, i, u) {
  const c = n.length;
  let l = new Array(c), d = new Array(c), h = new Array(c);
  if (e.length && t > 0) {
    const p = e[0], f = t + 1;
    l = ev(o, p, f, s, n), d = tv(i, p, f, r, n), h = QS(a, p, f, n);
  } else for (let p = 0; p < c; p++) l[p] = sv(o, s, a, n, p, u), d[p] = rv(i, r, a, n, p, u), h[p] = nv(a, p, u);
  return { begin: l, end: d, strides: h };
}
function ev(n, e, t, s, r) {
  const a = [...r], o = JS(t, e);
  for (let i = 0; i < a.length; i++) if (o.indexOf(i) > -1) a[i] = 0;
  else {
    const u = ZS(e, t, i);
    let c = s[u];
    n & 1 << u && (c = 0), a[i] = c;
  }
  return a;
}
function tv(n, e, t, s, r) {
  const a = [...r], o = JS(t, e);
  for (let i = 0; i < a.length; i++) if (o.indexOf(i) > -1) a[i] = Number.MAX_SAFE_INTEGER;
  else {
    const u = ZS(e, t, i);
    let c = s[u];
    n & 1 << u && (c = Number.MAX_SAFE_INTEGER), a[i] = c;
  }
  for (let i = 0; i < a.length; i++) {
    const u = r[i];
    a[i] < 0 && (a[i] += u), a[i] = ga(0, a[i], r[i]);
  }
  return a;
}
function nv(n, e, t) {
  let s = n[e];
  return (t & 1 << e || s == null) && (s = 1), s;
}
function sv(n, e, t, s, r, a) {
  let o = e[r];
  const i = t[r] || 1;
  (n & 1 << r || a & 1 << r || o == null) && (i > 0 ? o = Number.MIN_SAFE_INTEGER : o = Number.MAX_SAFE_INTEGER);
  const u = s[r];
  return o < 0 && (o += u), o = ga(0, o, u - 1), o;
}
function rv(n, e, t, s, r, a) {
  let o = e[r];
  const i = t[r] || 1;
  (n & 1 << r || a & 1 << r || o == null) && (i > 0 ? o = Number.MAX_SAFE_INTEGER : o = Number.MIN_SAFE_INTEGER);
  const u = s[r];
  return o < 0 && (o += u), i > 0 ? o = ga(0, o, u) : o = ga(-1, o, u - 1), o;
}
function Kf(n, e, t) {
  let s = t.length;
  for (let r = 0; r < t.length; r++) if (t[r] > 1) {
    s = r;
    break;
  }
  for (let r = s + 1; r < t.length; r++) if (e[r] > 0 || t[r] !== n[r]) return false;
  return true;
}
function Xf(n, e) {
  let t = n.length > 0 ? n[n.length - 1] : 1;
  for (let s = 0; s < n.length - 1; s++) t += n[s] * e[s];
  return t;
}
function hc(n, e, t) {
  let s;
  const r = n.shape.length;
  typeof e == "number" ? s = [e, ...new Array(r - 1).fill(0)] : e.length < r ? s = e.concat(new Array(r - e.length).fill(0)) : s = e.slice(), s.forEach((o) => {
    $(o !== -1, () => "slice() does not support negative begin indexing.");
  });
  let a;
  return t == null ? a = new Array(r).fill(-1) : typeof t == "number" ? a = [t, ...new Array(r - 1).fill(-1)] : t.length < r ? a = t.concat(new Array(r - t.length).fill(-1)) : a = t, a = a.map((o, i) => o >= 0 ? o : ($(o === -1, () => `Negative size values should be exactly -1 but got ${o} for the slice() size at index ${i}.`), n.shape[i] - s[i])), [s, a];
}
function uh(n, e, t, s, r, a, o, i, u) {
  let c;
  if (s == null ? (c = new Array(e.length), c.fill(1)) : c = s, o != null && (o & o - 1) !== 0) throw new Error("Multiple ellipses in slice is not allowed.");
  let l = false;
  const d = { dims: c.length, numAddAxisAfterEllipsis: 0, begin: e.slice(), end: t.slice(), strides: c.slice(), beginMask: r, endMask: a, ellipsisMask: o, newAxisMask: i, shrinkAxisMask: u };
  for (let x = 0; x < d.dims; x++) l && (1 << x & i) !== 0 && d.numAddAxisAfterEllipsis++, 1 << x & o && (l = true);
  l || (d.ellipsisMask |= 1 << d.dims, d.dims++);
  const h = { dims: n.length, beginMask: 0, endMask: 0, beginValid: false, endValid: false };
  vL(d, h);
  let p = true, f = true, m = true;
  const g = [], y = [];
  for (let x = 0; x < n.length; ++x) {
    if (h.strides[x] === 0) throw Error(`strides[${x}] must be non-zero`);
    const w = !!(h.shrinkAxisMask & 1 << x), C = n[x];
    if (C === -1) {
      g.push(w ? 1 : -1);
      continue;
    }
    const v = [h.beginMask & 1 << x, h.endMask & 1 << x], k = [h.strides[x] > 0 ? 0 : -1, h.strides[x] > 0 ? C : C - 1];
    if (w && h.strides[x] <= 0) throw Error("only stride 1 allowed on non-range indexing.");
    m = m && h.strides[x] === 1;
    const R = !!(h.beginMask & 1 << x && h.endMask & 1 << x);
    if (h.beginValid && h.endValid) {
      if (w) {
        const E = h.begin[x] < 0 ? C + h.begin[x] : h.begin[x];
        if (h.begin[x] = E, h.end[x] = h.begin[x] + 1, E < 0 || E >= C) throw Error(`slice index ${h.begin[x]} of dimension ${x} out of bounds.`);
      } else h.begin[x] = d1(h.begin[x], 0, h.strides[x], C, v, k), h.end[x] = d1(h.end[x], 1, h.strides[x], C, v, k);
      const S = h.strides[x] === 1 && h.begin[x] === 0 && h.end[x] === C;
      p = p && S, f = f && (x === 0 && h.strides[x] === 1 || S);
    } else p = p && h.strides[x] === 1 && R, f = f && (x === 0 && h.strides[x] === 1 || R);
    let N, T = false;
    if (h.beginValid && h.endValid ? (N = h.end[x] - h.begin[x], T = true) : w ? (N = 1, T = true) : R && C >= 0 && (h.strides[x] < 0 ? N = -C : N = C, T = true), T) {
      let S;
      N === 0 || N < 0 != h.strides[x] < 0 ? S = 0 : S = Math.trunc(N / h.strides[x]) + (N % h.strides[x] !== 0 ? 1 : 0), g.push(S);
    } else g.push(-1);
  }
  for (let x = 0; x < h.finalShapeGatherIndices.length; ++x) {
    const w = h.finalShapeGatherIndices[x];
    w >= 0 ? y.push(g[w]) : w === Ag && y.push(1);
  }
  return { finalShapeSparse: y.filter((x, w) => h.finalShapeGatherIndices[w] !== Ag), finalShape: y, isIdentity: p, sliceDim0: f, isSimpleSlice: m, begin: h.begin, end: h.end, strides: h.strides };
}
function vL(n, e) {
  e.beginMask = 0, e.endMask = 0, e.shrinkAxisMask = 0;
  let t = 0;
  e.beginValid = n.begin != null, e.endValid = n.end != null, e.begin = new Array(e.dims), e.end = new Array(e.dims), e.strides = new Array(e.dims), e.finalShapeGatherIndices = [], e.finalShapeGatherIndicesSparse = [], e.inputShapeGatherIndicesSparse = new Array(e.dims);
  for (let s = 0; s < n.dims; s++) if (1 << s & n.ellipsisMask) {
    const r = Math.min(e.dims - (n.dims - s) + 1 + n.numAddAxisAfterEllipsis, e.dims);
    for (; t < r; t++) e.begin[t] = 0, e.end[t] = 0, e.strides[t] = 1, e.beginMask |= 1 << t, e.endMask |= 1 << t, e.finalShapeGatherIndices.push(t), e.finalShapeGatherIndicesSparse.push(-1), e.inputShapeGatherIndicesSparse[t] = s;
  } else if (1 << s & n.newAxisMask) e.finalShapeGatherIndices.push(Ag), e.finalShapeGatherIndicesSparse.push(-1);
  else {
    if (t === e.begin.length) throw Error(`Index out of range using input dim ${t}; input has only ${e.dims} dims, ${e.begin.length}.`);
    n.begin != null && (e.begin[t] = n.begin[s]), n.end != null && (e.end[t] = n.end[s]), e.strides[t] = n.strides[s], n.beginMask & 1 << s && (e.beginMask |= 1 << t), n.endMask & 1 << s && (e.endMask |= 1 << t), n.shrinkAxisMask & 1 << s ? (e.finalShapeGatherIndices.push(CL), e.finalShapeGatherIndicesSparse.push(-1), e.shrinkAxisMask |= 1 << t) : (e.finalShapeGatherIndices.push(t), e.finalShapeGatherIndicesSparse.push(s)), e.inputShapeGatherIndicesSparse[t] = s, t++;
  }
}
function d1(n, e, t, s, r, a) {
  if (r[e]) return t > 0 ? a[e] : a[e + 1 & 1];
  {
    const o = n < 0 ? s + n : n;
    return o < a[0] ? a[0] : o > a[1] ? a[1] : o;
  }
}
const av = Object.freeze(Object.defineProperty({ __proto__: null, assertParamsValid: qf, computeFlatOffset: Xf, computeOutShape: ih, getNormalizedAxes: SL, isSliceContinous: Kf, maskToAxes: IL, parseSliceParams: hc, sliceInfo: uh, startForAxis: sv, startIndicesWithElidedDims: ev, stopForAxis: rv, stopIndicesWithElidedDims: tv, stridesForAxis: nv, stridesWithElidedDims: QS }, Symbol.toStringTag, { value: "Module" }));
/** @license See the LICENSE file. */
const ov = "4.22.0";
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class iv {
  static sgd(e) {
    return new jf(e);
  }
  static momentum(e, t, s = false) {
    return new Ub(e, t, s);
  }
  static rmsprop(e, t = 0.9, s = 0, r = null, a = false) {
    return new Gb(e, t, s, r, a);
  }
  static adam(e = 1e-3, t = 0.9, s = 0.999, r = null) {
    return new Wb(e, t, s, r);
  }
  static adadelta(e = 1e-3, t = 0.95, s = null) {
    return new Mb(e, t, s);
  }
  static adamax(e = 2e-3, t = 0.9, s = 0.999, r = null, a = 0) {
    return new Vb(e, t, s, r, a);
  }
  static adagrad(e, t = 0.1) {
    return new Bb(e, t);
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const hi = iv;
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $L = typeof requestAnimationFrame < "u" ? requestAnimationFrame : typeof setImmediate < "u" ? setImmediate : (n) => n();
function Kb() {
  return new Promise((n) => $L(() => n()));
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function lh(n, e) {
  const t = n[0].length;
  n.forEach((r, a) => {
    $(r.length === t, () => `Error in concat${t}D: rank of tensors[${a}] must be the same as the rank of the rest (${t})`);
  }), $(e >= 0 && e < t, () => `Error in concat${t}D: axis must be between 0 and ${t - 1}.`);
  const s = n[0];
  n.forEach((r, a) => {
    for (let o = 0; o < t; o++) $(o === e || r[o] === s[o], () => `Error in concat${t}D: Shape of tensors[${a}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${a}.`);
  });
}
function xn(n, e) {
  const t = n[0].slice();
  for (let s = 1; s < n.length; s++) t[e] += n[s][e];
  return t;
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var Gs;
(function(n) {
  n[n.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", n[n.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", n[n.ROW_LENGTHS = 2] = "ROW_LENGTHS", n[n.ROW_SPLITS = 3] = "ROW_SPLITS", n[n.ROW_LIMITS = 4] = "ROW_LIMITS", n[n.ROW_STARTS = 5] = "ROW_STARTS";
})(Gs || (Gs = {}));
function uv(n, e, t) {
  let s = new Array();
  if (t == null && e == null) return s;
  if (e == null) for (; s.length < n + t.length; ) s.push(-1);
  else s = e.slice();
  if (t == null) return s;
  if (n + t.length !== s.length) throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.rank = ${n + t.length}, but shape.rank = ${s.length}`);
  for (let r = 1; r < t.length; ++r) {
    const a = t[r], o = s[s.length - t.length + r], i = s[o];
    if (a >= 0) if (i >= 0) {
      if (i !== a) throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.shape[${r + n}] = ${a} but shape[${r + n}] = ${i}`);
    } else s[o] = a;
  }
  return s;
}
function lv(n) {
  const e = { FIRST_DIM_SIZE: Gs.FIRST_DIM_SIZE, VALUE_ROWIDS: Gs.VALUE_ROWIDS, ROW_LENGTHS: Gs.ROW_LENGTHS, ROW_SPLITS: Gs.ROW_SPLITS, ROW_LIMITS: Gs.ROW_LIMITS, ROW_STARTS: Gs.ROW_STARTS }, t = [];
  for (const s of n) if (s in e) t.push(e[s]);
  else break;
  return t;
}
function cv(n) {
  return n.length === 0 ? 0 : n[0] === Gs.FIRST_DIM_SIZE ? n.length - 1 : n.length;
}
function dv(n, e) {
  if (n == null || e == null) return;
  const t = n.length, s = e.length;
  if (t >= s) throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${e}, are incompatible: defaultValue.rank = ${t} must be less than ragged tensor input flatValues.rank = ${s})`);
  for (let r = 0; r < Math.min(t, s - 1); ++r) {
    const a = n[r], o = e[r + 1];
    if (a >= 0 && o >= 0 && a !== 1 && a !== o) throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${e} are incompatible: defaultValue.shape[${r - n.length}] = ${a} but ragged tensor input.flatValues.shape[${r - n.length}] = ${o}`);
  }
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Xb = 30;
function Yf(n) {
  return n <= Xb ? n : Rp(n, Math.floor(Math.sqrt(n)));
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ch(n, e, t) {
  const s = t * (typeof n == "number" ? n : n[0]), r = e * (typeof n == "number" ? n : n[1]);
  return [s, r];
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Zr(n, e, t, s = true) {
  let r = [];
  if (s) r = r.concat(e.slice(0)), r.push(n[0] / t), r = r.concat(n.slice(1));
  else {
    r = r.concat(n[0]);
    const a = e.length;
    for (let o = 0; o < a; ++o) r = r.concat([n[o + 1] / e[o], e[o]]);
    r = r.concat(n.slice(a + 1));
  }
  return r;
}
function Jr(n, e, t = true) {
  const s = [];
  if (t) {
    s.push(e);
    for (let r = e + 1; r < n; ++r) r <= 2 * e ? (s.push(r), s.push(r - (e + 1))) : s.push(r);
  } else {
    const r = [], a = [];
    for (let o = 1; o < n; ++o) o >= e * 2 + 1 || o % 2 === 1 ? a.push(o) : r.push(o);
    s.push(...r), s.push(0), s.push(...a);
  }
  return s;
}
function ea(n, e, t, s = true) {
  const r = [];
  s ? r.push(n[0] / t) : r.push(n[0] * t);
  for (let a = 1; a < n.length; ++a) a <= e.length ? s ? r.push(e[a - 1] * n[a]) : r.push(n[a] / e[a - 1]) : r.push(n[a]);
  return r;
}
function dh(n, e) {
  const t = [0];
  for (let s = 0; s < e; ++s) t.push(n[s][0]);
  return t;
}
function hh(n, e, t) {
  const s = n.slice(0, 1);
  for (let r = 0; r < t; ++r) s.push(n[r + 1] - e[r][0] - e[r][1]);
  return s;
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ph = 1.7580993408473768, fh = 1.0507009873554805;
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Qf = 0.3275911, Zf = 0.254829592, Jf = -0.284496736, em = 1.421413741, tm = -1.453152027, nm = 1.061405429;
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Qs(n, e) {
  if (n.length !== e.length) throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${e.length}.`);
  const t = new Float32Array(n.length * 2);
  for (let s = 0; s < t.length; s += 2) t[s] = n[s / 2], t[s + 1] = e[s / 2];
  return t;
}
function hv(n) {
  const e = new Float32Array(n.length / 2), t = new Float32Array(n.length / 2);
  for (let s = 0; s < n.length; s += 2) e[s / 2] = n[s], t[s / 2] = n[s + 1];
  return { real: e, imag: t };
}
function pv(n) {
  const e = Math.ceil(n.length / 4), t = new Float32Array(e), s = new Float32Array(e);
  for (let r = 0; r < n.length; r += 4) t[Math.floor(r / 4)] = n[r], s[Math.floor(r / 4)] = n[r + 1];
  return { real: t, imag: s };
}
function fv(n) {
  const e = Math.floor(n.length / 4), t = new Float32Array(e), s = new Float32Array(e);
  for (let r = 2; r < n.length; r += 4) t[Math.floor(r / 4)] = n[r], s[Math.floor(r / 4)] = n[r + 1];
  return { real: t, imag: s };
}
function Yb(n, e) {
  const t = n[e * 2], s = n[e * 2 + 1];
  return { real: t, imag: s };
}
function mv(n, e, t, s) {
  n[s * 2] = e, n[s * 2 + 1] = t;
}
function gv(n, e) {
  const t = new Float32Array(n / 2), s = new Float32Array(n / 2);
  for (let r = 0; r < Math.ceil(n / 2); r++) {
    const a = (e ? 2 : -2) * Math.PI * (r / n);
    t[r] = Math.cos(a), s[r] = Math.sin(a);
  }
  return { real: t, imag: s };
}
function yv(n, e, t) {
  const s = (t ? 2 : -2) * Math.PI * (n / e), r = Math.cos(s), a = Math.sin(s);
  return { real: r, imag: a };
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Jm = "->", kL = /->/g, h1 = ",", p1 = "...";
function sm(n, e) {
  n = n.replace(/\s/g, "");
  const t = (n.length - n.replace(kL, "").length) / Jm.length;
  if (t < 1) throw new Error("Equations without an arrow are not supported.");
  if (t > 1) throw new Error(`Equation must contain exactly one arrow ("${Jm}").`);
  const [s, r] = n.split(Jm);
  $(s.indexOf(p1) === -1, () => `The ellipsis notation ("${p1}") is not supported yet.`);
  const a = s.split(h1), o = a.length;
  if (e !== o) throw new Error(`Expected ${o} input tensors, received ${e}`);
  if (o > 2) throw new Error("Support for more than 2 input tensors is not implemented yet.");
  const i = [];
  for (let h = 0; h < r.length; ++h) {
    const p = r[h];
    if (!a.some((f) => f.indexOf(p) !== -1)) throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);
    i.indexOf(p) === -1 && i.push(p);
  }
  for (let h = 0; h < s.length; ++h) {
    const p = s[h];
    i.indexOf(p) === -1 && p !== h1 && i.push(p);
  }
  const u = new Array(a.length);
  for (let h = 0; h < o; ++h) {
    if (new Set(a[h].split("")).size !== a[h].length) throw new Error(`Found duplicate axes in input component ${a[h]}. Support for duplicate axes in input is not implemented yet.`);
    u[h] = [];
    for (let p = 0; p < a[h].length; ++p) u[h].push(i.indexOf(a[h][p]));
  }
  const c = i.length, l = r.length, d = [];
  for (let h = l; h < c; ++h) d.push(h);
  return { allDims: i, summedDims: d, idDims: u };
}
function rm(n, e) {
  let t = new Array(n);
  t.fill(-1);
  for (let r = 0; r < e.length; ++r) t[e[r]] = r;
  const s = [];
  for (let r = 0; r < n; ++r) t[r] === -1 && s.push(r);
  return t = t.filter((r) => r !== -1), { permutationIndices: t, expandDims: s };
}
function am(n, e, t) {
  const s = new Array(n);
  for (let r = 0; r < t.length; ++r) {
    const a = t[r].shape;
    for (let o = 0; o < e[r].length; ++o) s[e[r][o]] === void 0 ? s[e[r][o]] = a[o] : $(s[e[r][o]] === a[o], () => `Expected dimension ${s[e[r][o]]} at axis ${o} of input shaped ${JSON.stringify(a)}, but got dimension ${a[o]}`);
  }
}
function om(n, e) {
  const t = n, s = [];
  let r = 0;
  n.length === 0 && t.push(-1), r = n.length + 1;
  for (let o = 0; o < r; ++o) s.push([]);
  const a = [];
  for (let o = 0; o < t.length; ++o) {
    const i = t[o], u = NL(e, i);
    for (const c of u) a.indexOf(c) === -1 && (s[o].push(c), a.push(c));
  }
  return { path: t, steps: s };
}
function im(n) {
  return n.every((e, t) => e === t);
}
function NL(n, e) {
  const t = [];
  for (let s = 0; s < n.length; ++s) (n[s].length === 0 || n[s].indexOf(e) !== -1 || e === -1) && t.push(s);
  return t;
}
function mh(n, e, t = 0) {
  let s = [];
  if (typeof e == "number") $(n.shape[t] % e === 0, () => "Number of splits must evenly divide the axis."), s = new Array(e).fill(n.shape[t] / e);
  else {
    const r = e.reduce((o, i) => (i === -1 && (o += 1), o), 0);
    $(r <= 1, () => "There should be only one negative value in split array.");
    const a = e.indexOf(-1);
    if (a !== -1) {
      const o = e.reduce((i, u) => u > 0 ? i + u : i);
      e[a] = n.shape[t] - o;
    }
    $(n.shape[t] === e.reduce((o, i) => o + i), () => "The sum of sizes must match the size of the axis dimension."), s = e;
  }
  return s;
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Qb(n) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${n}`;
}
function Zb(n, e) {
  return `indices(${n}, 0) is invalid: ${e} < 0`;
}
function Jb(n, e, t) {
  return `indices(${n}, 0) is invalid: ${e} >= ${t}`;
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ex(n, e) {
  return `only one output dimension may be -1, not both ${n} and ${e}`;
}
function tx(n, e) {
  return `size ${n} must be non-negative, not ${e}`;
}
function nx() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function sx(n, e) {
  const t = A(n), s = A(e);
  return `Input to reshape is a SparseTensor with ${t}
  dense values, but the requested shape requires a multiple of ${s}. inputShape=${n} outputShape= ${e}`;
}
function rx(n, e) {
  const t = A(n), s = A(e);
  return `Input to reshape is a tensor with ${t} dense values, but the requested shape has ${s}. inputShape=${n} outputShape=${e}`;
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ld() {
  return "segment ids must be >= 0";
}
function ax() {
  return "segment ids are not increasing";
}
function ox(n, e) {
  return `Segment id ${n} out of range [0, ${e}), possibly because segmentIds input is not sorted.`;
}
function ix(n, e, t) {
  return `Bad: indices[${n}] == ${e} out of range [0, ${t})`;
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function bv(n, e) {
  let t = false, s;
  for (n <= Xb ? (s = n, t = true) : s = Rp(n, Math.floor(Math.sqrt(n))); !t; ) s > e || s === n ? t = true : s = Rp(n, s + 1);
  return s;
}
function ux(n, e, t) {
  const s = [], r = n.length;
  for (let a = 0; a < r; a++) a !== e ? s.push(n[a]) : s.push(t);
  return s;
}
function gh(n, e, t, s) {
  const r = e.shape.length, a = n.shape.length;
  if (s !== 0 && (s < -r || s > r)) throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);
  if (s < 0 && (s += r), s > a) throw new Error(`batchDims (${s}) must be less than rank(x) (
    ${a}).`);
  if (t < s) throw new Error(`batchDims (${s}) must be less than or equal to axis (${t}).`);
  for (let d = 0; d < s; ++d) if (n.shape[d] !== e.shape[d]) throw new Error(`x.shape[${d}]: ${n.shape[d]} should be equal to indices.shape[${d}]: ${e.shape[d]}.`);
  const o = n.shape[t], i = [];
  let u = 1, c = 1, l = 1;
  for (let d = 0; d < s; ++d) i.push(n.shape[d]), u *= n.shape[d];
  for (let d = s; d < t; d++) i.push(n.shape[d]), c *= n.shape[d];
  for (let d = s; d < r; d++) i.push(e.shape[d]);
  for (let d = t + 1; d < a; d++) i.push(n.shape[d]), l *= n.shape[d];
  return { batchSize: u, sliceSize: l, outerSize: c, dimSize: o, outputShape: i };
}
const TL = Object.freeze(Object.defineProperty({ __proto__: null, collectGatherOpShapeInfo: gh, computeOutShape: ux, segOpComputeOptimalWindowSize: bv }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Zs(n) {
  try {
    return n.map((e) => Fs(e));
  } catch (e) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`);
  }
}
function lx(n) {
  return n.map((e) => qs(e));
}
const xv = Object.freeze(Object.defineProperty({ __proto__: null, ERF_A1: Zf, ERF_A2: Jf, ERF_A3: em, ERF_A4: tm, ERF_A5: nm, ERF_P: Qf, PARALLELIZE_THRESHOLD: Xb, get RowPartitionType() {
  return Gs;
}, SELU_SCALE: fh, SELU_SCALEALPHA: ph, applyActivation: Uf, assertAndGetBroadcastShape: Re, assertAxesAreInnerMostDims: mt, assertParamsConsistent: lh, assignToTypedArray: mv, axesAreInnerMostDims: ib, calculateShapes: ds, checkEinsumDimSizes: am, checkPadOnDimRoundingMode: Fn, combineLocations: GI, combineRaggedTensorToTensorShapes: uv, complexWithEvenIndex: pv, complexWithOddIndex: fv, computeConv2DInfo: lt, computeConv3DInfo: cs, computeDefaultPad: Uy, computeDilation2DInfo: rr, computeOptimalWindowSize: Yf, computeOutAndReduceShapes: xt, computeOutShape: xn, computePool2DInfo: zt, computePool3DInfo: Sn, convertConv2DDataFormat: An, decodeEinsumEquation: sm, eitherStridesOrDilationsAreOne: qt, expandShapeToKeepDim: ft, exponent: yv, exponents: gv, fromStringArrayToUint8: lx, fromUint8ToStringArray: Zs, getAxesPermutation: ct, getBroadcastDims: Br, getComplexWithIndex: Yb, getEinsumComputePath: om, getEinsumPermutation: rm, getFusedBiasGradient: Vf, getFusedDyActivation: Wf, getImageCenter: ch, getInnerMostAxes: it, getPermuted: Jr, getRaggedRank: cv, getReductionAxes: jt, getReshaped: Zr, getReshapedPermuted: ea, getRowPartitionTypesHelper: lv, getSliceBeginCoords: dh, getSliceSize: hh, getSparseFillEmptyRowsIndicesDenseShapeMismatch: Qb, getSparseFillEmptyRowsNegativeIndexErrorMessage: Zb, getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: Jb, getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: nx, getSparseReshapeInputOutputMismatchErrorMessage: rx, getSparseReshapeInputOutputMultipleErrorMessage: sx, getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: ex, getSparseReshapeNegativeOutputDimErrorMessage: tx, getSparseSegmentReductionIndicesOutOfRangeErrorMessage: ix, getSparseSegmentReductionNegativeSegmentIdsErrorMessage: ld, getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: ax, getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: ox, getUndoAxesPermutation: Ls, isIdentityPermutation: im, log: k_, mergeRealAndImagArrays: Qs, prepareAndValidate: dc, prepareSplitSize: mh, segment_util: TL, shouldFuse: Gf, slice_util: av, splitRealAndImagArrays: hv, stridesOrDilationsArePositive: Oi, tupleValuesAreOne: Ia, upcastType: tn, validateDefaultValueShape: dv, validateInput: Pf, validateUpdateShape: Rb, warn: gs }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const RL = Object.freeze(Object.defineProperty({ __proto__: null, nonMaxSuppressionV3Impl: ah, nonMaxSuppressionV4Impl: Hf, nonMaxSuppressionV5Impl: oh, whereImpl: Mf }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
jP();
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const wv = { kernelName: Yi, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(n, Qu(ue(t, "float32"), -1)) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const _L = { kernelName: Ea, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => {
    const s = yt(ue(t, "float32")), r = ln(xe(Ne(1), s));
    return St(ve(n, r));
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const EL = { kernelName: Da, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => {
    const s = ln(xe(yt(ue(t, "float32")), 1));
    return ve(n, s);
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const DL = { kernelName: Ur, inputsToSave: ["a", "b"], gradFunc: (n, e) => {
  const [t, s] = e, r = Re(t.shape, s.shape);
  return { a: () => {
    let i = n;
    const u = jt(t.shape, r);
    return u.length > 0 && (i = we(i, u)), B(i, t.shape);
  }, b: () => {
    let i = n;
    const u = jt(s.shape, r);
    return u.length > 0 && (i = we(i, u)), B(i, s.shape);
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const AL = { kernelName: Aa, saveAllInputs: true, gradFunc: (n, e) => {
  const t = {};
  return e.forEach((s, r) => {
    t[r] = () => n.clone();
  }), t;
} };
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const FL = { kernelName: Ji, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => Ze(t) };
} };
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const OL = { kernelName: eu, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => Ze(t) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const PL = { kernelName: Fa, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => ve(n, ln(xe(Ne(1), yt(ue(t, "float32"))))) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const LL = { kernelName: Oa, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => {
    const s = ln(te(Ne(1), yt(ue(t, "float32"))));
    return ve(n, s);
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const zL = { kernelName: za, inputsToSave: ["a", "b"], gradFunc: (n, e) => {
  const [t, s] = e, r = Re(t.shape, s.shape);
  return { a: () => {
    const i = te(yt(t), yt(s));
    let u = z(n, ve(s, i));
    const c = jt(t.shape, r);
    return c.length > 0 && (u = we(u, c)), B(u, t.shape);
  }, b: () => {
    const i = te(yt(t), yt(s));
    let u = St(z(n, ve(t, i)));
    const c = jt(s.shape, r);
    return c.length > 0 && (u = we(u, c)), B(u, s.shape);
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ML = { kernelName: Pa, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => ve(n, te(yt(ue(t, "float32")), 1)) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const BL = { kernelName: La, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => ve(n, xe(Ne(1), yt(ue(t, "float32")))) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function WL(n, e, t, s, r, a) {
  const o = _(n, "dy", "avgPool3dGrad"), i = _(e, "input", "avgPool3dGrad");
  let u = o, c = i, l = false;
  i.rank === 4 && (l = true, u = B(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]]), c = B(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), $(u.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`), $(c.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`), Fn("avgPool3dGrad", r, a);
  const d = { dy: u, input: c }, h = { filterSize: t, strides: s, pad: r, dimRoundingMode: a }, p = F.runKernel(zl, d, h);
  return l ? B(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
const VL = O({ avgPool3dGrad_: WL });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const UL = { kernelName: tu, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const [s] = e, { filterSize: r, strides: a, pad: o, dimRoundingMode: i } = t;
  return { x: () => VL(n, s, r, a, o, i) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function GL(n, e, t, s, r) {
  const a = _(n, "dy", "avgPoolGrad"), o = _(e, "input", "avgPoolGrad");
  $(o.rank === a.rank, () => `Rank of input (${o.rank}) does not match rank of dy (${a.rank})`);
  let i = o, u = a, c = false;
  o.rank === 3 && (c = true, i = B(o, [1, o.shape[0], o.shape[1], o.shape[2]]), u = B(a, [1, a.shape[0], a.shape[1], a.shape[2]])), $(u.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`), $(i.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);
  const l = { dy: u, input: i }, d = { filterSize: t, strides: s, pad: r }, h = F.runKernel(Ll, l, d);
  return c ? B(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const HL = O({ avgPoolGrad_: GL });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const jL = { kernelName: Ma, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const [s] = e, { filterSize: r, strides: a, pad: o } = t;
  return { x: () => HL(n, s, r, a, o) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const qL = { kernelName: Ba, inputsToSave: ["a", "b"], gradFunc: (n, e, t) => {
  const [s, r] = e, { transposeA: a, transposeB: o } = t;
  return !a && !o ? { a: () => je(n, r, false, true), b: () => je(s, n, true, false) } : !a && o ? { a: () => je(n, r, false, false), b: () => je(n, s, true, false) } : a && !o ? { a: () => je(r, n, false, true), b: () => je(s, n, false, false) } : { a: () => je(r, n, true, true), b: () => je(n, s, true, true) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const KL = { kernelName: nu, gradFunc: (n, e, t) => {
  const { blockShape: s, crops: r } = t;
  return { x: () => Zd(n, s, r) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const XL = { kernelName: aI, gradFunc: (n, e, t) => {
  const s = t, r = s.inputShape, a = s.shape, o = Array.from(a);
  for (let u = r.length - 1; u >= 0; u--) if (r[u] === a[u]) o[u] = 1;
  else if (r[u] !== 1) throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);
  const i = [];
  for (let u = 0; u < o.length; u++) o[u] > 1 && i.push(u);
  return { x: () => we(n, i, true) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const YL = { kernelName: Wa, gradFunc: (n) => ({ x: () => n.clone() }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const QL = { kernelName: Va, gradFunc: (n) => ({ x: () => Ze(n) }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ZL = { kernelName: Gr, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const [s] = e, { clipValueMin: r, clipValueMax: a } = t;
  return { x: () => on(Ps(Kr(s, r), Zo(s, a)), n, Ze(n)) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const JL = { kernelName: Wl, inputsToSave: ["x"], gradFunc: wv.gradFunc };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ez = { kernelName: ru, saveAllInputs: true, gradFunc: (n, e, t) => {
  const s = e.map((u) => u.shape), { axis: r } = t, a = Ee(r, e[0].shape)[0], o = s.map((u) => u[a]);
  return Vn(n, o, a).map((u) => () => u);
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const tz = { kernelName: Ua, inputsToSave: ["x", "filter"], gradFunc: (n, e, t) => {
  const [s, r] = e, { dilations: a, strides: o, pad: i, dataFormat: u } = t;
  return $(Ia(a), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`), { x: () => eb(s.shape, n, r, o, i, u), filter: () => Pb(s, n, r.shape, o, i, u) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const nz = { kernelName: Ga, inputsToSave: ["dy", "filter"], gradFunc: (n, e, t) => {
  const [s, r] = e, { strides: a, pad: o, dataFormat: i, dimRoundingMode: u } = t;
  return { dy: () => Mr(n, r, a, o, i, 1, u), filter: () => Pb(n, s, r.shape, a, o, i, u) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sz(n, e, t, s, r) {
  let a = n;
  n.rank === 4 && (a = B(n, [1, n.shape[0], n.shape[1], n.shape[2], n.shape[3]]));
  let o = e;
  o.rank === 4 && (o = B(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]])), $(a.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`), $(o.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`), $(t.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${t}.`), $(a.shape[4] === t[3], () => `Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${t[3]}.`), $(o.shape[4] === t[4], () => `Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${t[4]}).`);
  const i = { x: a, dy: o }, u = { strides: s, pad: r, filterShape: t };
  return F.runKernel(au, i, u);
}
const rz = O({ conv3DBackpropFilter_: sz });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const az = { kernelName: Ha, inputsToSave: ["x", "filter"], gradFunc: (n, e, t) => {
  const { dilations: s, strides: r, pad: a } = t;
  $(Ia(s), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
  const [o, i] = e;
  return { x: () => WI(o.shape, n, i, r, a), filter: () => rz(o, n, i.shape, r, a) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const oz = { kernelName: ja, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(St(Ef(ue(t, "float32"))), n) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const iz = { kernelName: qa, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(Df(ue(t, "float32")), n) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const uz = { kernelName: Ka, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const [s] = e, { axis: r, exclusive: a, reverse: o } = t;
  return { x: () => {
    const i = ct([r], s.rank);
    let u = bf(n, r, a, !o);
    return i != null && (u = Ye(u, i)), u;
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const lz = { kernelName: Xa, inputsToSave: ["x", "filter"], gradFunc: (n, e, t) => {
  const { dilations: s, strides: r, pad: a, dimRoundingMode: o } = t, i = s ?? [1, 1];
  $(Ia(i), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);
  const [u, c] = e;
  return $(u.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`), $(c.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`), $(u.shape[3] === c.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`), $(qt(r, i), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`), Fn("depthwiseConv2d", a, o), { x: () => ES(u.shape, n, c, r, a, i, o), filter: () => _S(u, n, c.shape, r, a, i, o) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const cz = { kernelName: Ya, inputsToSave: ["x", "filter"], gradFunc: (n, e, t) => {
  const [s, r] = e, a = { x: s, filter: r, dy: n }, o = { x: s, filter: r, dy: n };
  return { x: () => F.runKernel(Ri, a, t), filter: () => F.runKernel(_i, o, t) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const dz = { kernelName: Za, outputsToSave: [true], gradFunc: (n, e) => {
  const [t] = e, s = { dy: n, y: t };
  return { x: () => F.runKernel(cu, s) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const hz = { kernelName: Ja, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e, s = z(qn(St(yt(t))), 2 / Math.sqrt(Math.PI));
  return { x: () => z(n, s) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const pz = { kernelName: eo, outputsToSave: [true], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(n, t) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const fz = { kernelName: hu, inputsToSave: ["input"], gradFunc: (n, e) => {
  const [t] = e;
  return { input: () => B(n, t.shape) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const mz = { kernelName: to, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(n, qn(t)) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const gz = { kernelName: no, gradFunc: (n) => ({ x: () => Ze(n) }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const yz = { kernelName: so, inputsToSave: ["a", "b"], gradFunc: (n, e) => {
  const [t, s] = e, r = Re(t.shape, s.shape);
  return { a: () => {
    const i = ve(n, ue(s, "float32")), u = jt(t.shape, r);
    return u.length > 0 ? B(we(i, u), t.shape) : i;
  }, b: () => {
    let i = z(n, ue(t, "float32"));
    const u = jt(s.shape, r);
    u.length > 0 && (i = B(we(i, u), s.shape));
    const c = yt(s);
    return St(ve(i, ue(c, "float32")));
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bz = { kernelName: ro, inputsToSave: ["x", "mean", "variance", "scale"], gradFunc: (n, e, t) => {
  const { varianceEpsilon: s } = t, [r, a, o, i] = e, u = i ?? Ne(1), c = jt(a.shape, r.shape), l = [];
  if (a.rank === 1) {
    for (let w = 0; w < r.shape.length - 1; ++w) l.push(r.shape[w]);
    l.push(1);
  }
  const d = xe(r, a), h = z(n, u), p = Tf(te(o, Ne(s))), f = z(z(z(p, p), p), Ne(-0.5));
  return { x: () => a.rank === 1 ? B(z(z(n, bs(B(p, [1, 1, 1, a.shape[0]]), l)), u), r.shape) : B(z(z(n, p), u), r.shape), mean: () => {
    let w = z(z(p, Ne(-1)), h);
    return a.rank === 1 && (w = we(w, c)), B(w, a.shape);
  }, variance: () => {
    let w = z(z(f, d), h);
    return a.rank === 1 && (w = we(w, c)), B(w, a.shape);
  }, scale: () => {
    const w = z(d, p);
    let C = z(n, w);
    return a.rank === 1 && (C = we(C, c)), B(C, a.shape);
  }, offset: () => {
    let w = n;
    return a.rank === 1 && (w = we(w, c)), B(w, a.shape);
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const xz = { kernelName: fu, inputsToSave: ["x", "indices"], gradFunc: (n, e, t) => {
  const [s, r] = e, { axis: a, batchDims: o } = t, i = Ee(a, s.shape)[0], u = (c, l, d) => () => {
    const h = c.shape, p = l.size, f = h.slice(0, i), m = f.length, g = h.slice(a, h.length).slice(1), y = g.length, b = f1(0, m), x = f1(m + 1, m + 1 + y), w = m1([f, [p], g]), C = B(d, w), v = B(l, [p]), k = m1([[m], b, x]), R = Ye(C, k);
    let N = zf(R, v, c.shape[i]);
    const T = Ls(k);
    return N = Ye(N, T), N;
  };
  if (o === 1) {
    const c = s.shape[0], l = s.split(c, 0);
    return { x: () => En(l.map((p, f) => u(p, r.slice(f, 1), n.slice(f, 1))())).reshape(s.shape), indices: () => r };
  } else return { x: u(s, r, n), indices: () => r };
} };
function f1(n, e) {
  const t = [];
  for (let s = n; s < e; ++s) t.push(s);
  return t;
}
function m1(n) {
  const e = [];
  for (let t = 0; t < n.length; ++t) for (let s = 0; s < n[t].length; ++s) e.push(n[t][s]);
  return e;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const wz = { kernelName: ao, inputsToSave: ["a", "b"], gradFunc: (n, e) => {
  const [t, s] = e;
  return { a: () => Ze(t), b: () => Ze(s) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Cz = { kernelName: oo, gradFunc: (n) => ({ x: () => ue(n, "float32") }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Iz = { kernelName: io, gradFunc: (n) => ({ x: () => Ze(n) }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Sz = { kernelName: uo, gradFunc: (n) => ({ x: () => Ze(n) }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const vz = { kernelName: lo, gradFunc: (n) => ({ x: () => Ze(n) }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $z = { kernelName: co, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const [s] = e, { alpha: r } = t, a = On(s, 0);
  return { x: () => on(a, n, z(n, r)) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const kz = { kernelName: po, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => ve(n, te(t, 1)) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Nz = { kernelName: ho, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => ve(n, ue(t, "float32")) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Tz = { kernelName: iI, inputsToSave: [], outputsToSave: [true], gradFunc: (n, e, t) => {
  const [s] = e, { axis: r } = t;
  return { logits: () => {
    const o = qn(s);
    return xe(n, z(we(n, r, true), o));
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Rz(n, e, t, s = 5, r = 1, a = 1, o = 0.5) {
  const i = { x: n, y: e, dy: t }, u = { depthRadius: s, bias: r, alpha: a, beta: o };
  return F.runKernel(Su, i, u);
}
const _z = O({ localResponseNormalizationBackprop_: Rz });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ez = { kernelName: fo, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (n, e, t) => {
  const [s, r] = e, { depthRadius: a, bias: o, alpha: i, beta: u } = t;
  return { x: () => _z(s, r, n, a, o, i, u) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Cv(n, e, t, s) {
  return e.rank < t.rank && (e = B(e, ft(e.shape, s))), n.rank < t.rank && (n = B(n, ft(n.shape, s))), { x: () => z(n, ue(rs(t, e), n.dtype)) };
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const g1 = { kernelName: mo, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (n, e, t) => {
  const s = t, { reductionIndices: r } = s, a = e[0], o = e[1], i = Ee(r, a.shape), u = Cv(n, o, a, i);
  return { x: () => u.x() };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Dz = { kernelName: go, inputsToSave: ["a", "b"], gradFunc: (n, e) => {
  const [t, s] = e;
  return { a: () => z(n, ue(Kr(t, s), "float32")), b: () => z(n, ue(vl(t, s), "float32")) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Az(n, e, t, s, r, a, o) {
  const i = _(n, "dy", "maxPool3dGrad"), u = _(e, "input", "maxPool3dGrad"), c = _(t, "output", "maxPool3dGrad");
  let l = i, d = u, h = c, p = false;
  u.rank === 4 && (p = true, l = B(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]), d = B(u, [1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]]), h = B(c, [1, c.shape[0], c.shape[1], c.shape[2], c.shape[3]])), $(l.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`), $(d.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`), $(h.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`), Fn("maxPool3dGrad", a, o);
  const f = { dy: l, input: d, output: h }, m = { filterSize: s, strides: r, pad: a, dimRoundingMode: o }, g = F.runKernel(jl, f, m);
  return p ? B(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]]) : g;
}
const Fz = O({ maxPool3dGrad_: Az });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Oz = { kernelName: vu, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (n, e, t) => {
  const [s, r] = e, { filterSize: a, strides: o, pad: i, dimRoundingMode: u } = t;
  return { x: () => Fz(n, s, r, a, o, i, u) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Pz(n, e, t, s, r, a, o) {
  const i = _(n, "dy", "maxPoolGrad"), u = _(e, "input", "maxPoolGrad"), c = _(t, "output", "maxPoolGrad");
  $(u.rank === i.rank, () => `Rank of input (${u.rank}) does not match rank of dy (${i.rank})`), $(i.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`), $(u.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`), Fn("maxPoolGrad", a, o);
  const l = { dy: i, input: u, output: c }, d = { filterSize: s, strides: r, pad: a, dimRoundingMode: o };
  return F.runKernel(Hl, l, d);
}
const Lz = O({ maxPoolGrad_: Pz });
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const zz = { kernelName: yo, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (n, e, t) => {
  const [s, r] = e, { filterSize: a, strides: o, pad: i } = t;
  return { x: () => Lz(n, s, r, a, o, i) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Mz = { kernelName: bo, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const [s] = e, { axis: r } = t, a = Ee(r, s.shape), i = xt(s.shape, a)[1], u = A(i);
  return { x: () => {
    const l = s.shape.slice();
    a.forEach((p) => {
      l[p] = 1;
    });
    const d = B(n, l);
    return ve(z(d, Bn(s.shape, "float32")), u);
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Bz = { kernelName: xo, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (n, e, t) => {
  const s = t, { axis: r } = s, [a, o] = e, i = Ee(r, a.shape), u = Cv(n, o, a, i);
  return { x: () => u.x() };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Wz = { kernelName: wo, inputsToSave: ["a", "b"], gradFunc: (n, e) => {
  const [t, s] = e;
  return { a: () => z(n, ue(Zo(t, s), "float32")), b: () => z(n, ue(On(t, s), "float32")) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Vz = { kernelName: Co, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const s = e[0], { paddings: r } = t, a = r.map((o) => o[0]);
  return { x: () => Qe(n, a, s.shape) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Uz = { kernelName: Io, inputsToSave: ["a", "b"], gradFunc: (n, e) => {
  const [t, s] = e, r = Re(t.shape, s.shape);
  return { a: () => {
    const i = jt(t.shape, r);
    return i.length > 0 ? B(we(n, i), t.shape) : n;
  }, b: () => {
    const i = z(n, St(ic(ve(t, s)))), u = jt(s.shape, r);
    return u.length > 0 ? B(we(i, u), s.shape) : i;
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Gz = { kernelName: So, inputsToSave: ["a", "b"], gradFunc: (n, e) => {
  const [t, s] = e, r = Re(t.shape, s.shape);
  return { a: () => {
    const i = z(n, ue(s, "float32")), u = jt(t.shape, r);
    return u.length > 0 ? B(we(i, u), t.shape) : i;
  }, b: () => {
    const i = z(n, ue(t, "float32")), u = jt(s.shape, r);
    return u.length > 0 ? B(we(i, u), s.shape) : i;
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Hz = { kernelName: ku, gradFunc: (n) => ({ x: () => St(n) }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const jz = { kernelName: vo, inputsToSave: ["indices"], gradFunc: (n, e) => {
  const t = e[0];
  return { indices: () => Ot(t.shape, "float32") };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const qz = { kernelName: _u, gradFunc: (n) => ({ x: () => Ze(n) }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Kz = { kernelName: Eu, saveAllInputs: true, gradFunc: (n, e, t) => {
  const { axis: s } = t;
  return vs(n, s).map((a) => () => a);
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const y1 = { kernelName: $o, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const s = e[0], { paddings: r } = t, a = r.map((o) => o[0]);
  return { x: () => Qe(n, a, s.shape) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Xz = { kernelName: ko, inputsToSave: ["a", "b"], outputsToSave: [true], gradFunc: (n, e) => {
  const [t, s, r] = e, a = t, o = s, i = Re(a.shape, o.shape);
  return { a: () => {
    const l = ue(o, "float32");
    let d = z(n, z(l, xr(a, xe(l, Ne(1)))));
    const h = jt(a.shape, i);
    return h.length > 0 && (d = we(d, h)), B(d, a.shape);
  }, b: () => {
    const l = On(a, 0), d = on(l, as(a), Ze(a));
    let h = z(n, z(r, d));
    const p = jt(o.shape, i);
    return p.length > 0 && (h = we(h, p)), B(h, o.shape);
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Yz = { kernelName: No, inputsToSave: ["x", "alpha"], gradFunc: (n, e) => {
  const [t, s] = e, r = On(t, 0);
  return { x: () => on(r, n, z(n, s)), alpha: () => {
    let a = on(r, Ze(n), z(n, t));
    const o = jt(s.shape, n.shape);
    return o.length > 0 && (a = we(a, o)), B(a, s.shape);
  } };
} };
/**
* @license
* Copyright 2022 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Qz(n, e, t) {
  const s = n.shape.slice();
  s[t] = 1;
  const r = B(e, s), a = ud(n, t, true, false), o = ud(n, t, true, true), i = z(a, o);
  return z(r, i);
}
function Zz(n, e, t) {
  const s = n.shape.length, r = s - t.length, a = ct(t, s);
  let o = n;
  a != null && (o = Ye(n, a));
  const i = o.shape.slice(), c = i.splice(s - t.length, t.length).reduce((h, p) => h * p, 1);
  i.push(c);
  const l = o.reshape(i);
  let d = Qz(l, e, r);
  if (d = d.reshape(o.shape), a != null) {
    const h = Ls(a);
    d = Ye(d, h);
  }
  return d;
}
const Jz = { kernelName: To, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const [s] = e, { axis: r } = t;
  let a = [];
  return r == null ? a = s.shape.map((o, i) => i) : typeof r == "number" ? a = [r] : a = r, { x: () => Zz(s, n, a) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const eM = { kernelName: Qa, inputsToSave: ["a", "b"], gradFunc: (n, e) => {
  const [t, s] = e, r = Re(t.shape, s.shape);
  return { a: () => {
    const i = ve(n, ue(s, "float32")), u = jt(t.shape, r);
    return u.length > 0 ? B(we(i, u), t.shape) : i;
  }, b: () => {
    let i = z(n, ue(t, "float32"));
    const u = jt(s.shape, r);
    u.length > 0 && (i = B(we(i, u), s.shape));
    const c = yt(s);
    return St(ve(i, ue(c, "float32")));
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const tM = { kernelName: Ro, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => ve(n, St(yt(t))) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const nM = { kernelName: Ao, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e, s = z(Zo(t, 6), Qu(t));
  return { x: () => z(n, ue(s, "float32")) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const sM = { kernelName: _o, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(n, ue(Qu(t), "float32")) };
} };
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const rM = { kernelName: Du, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => B(n, t.shape) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const aM = { kernelName: Do, inputsToSave: ["images"], gradFunc: (n, e, t) => {
  const [s] = e, r = { dy: n, images: s };
  return { images: () => F.runKernel(Fu, r, t) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const oM = { kernelName: Eo, inputsToSave: ["images"], gradFunc: (n, e, t) => {
  const [s] = e, r = { dy: n, images: s };
  return { images: () => F.runKernel(Au, r, t) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const iM = { kernelName: Fo, gradFunc: (n, e, t) => {
  const { dims: s } = t, r = Ee(s, n.shape);
  return { x: () => Ss(n, r) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const uM = { kernelName: Oo, gradFunc: (n) => ({ x: () => Ze(n) }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const lM = { kernelName: Po, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => St(ve(n, z(xr(t, 1.5), 2))) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const cM = { kernelName: zu, inputsToSave: ["condition"], gradFunc: (n, e) => {
  const [t] = e;
  return { condition: () => ue(Ze(t), "float32"), t: () => z(n, ue(t, n.dtype)), e: () => z(n, ue(Xd(t), n.dtype)) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const dM = { kernelName: Lo, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => {
    const s = On(t, Ne(0)), r = Ne(ph), a = Ne(fh), o = z(n, a), i = z(z(n, r), qn(ue(t, "float32")));
    return on(s, o, i);
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const hM = { kernelName: Wo, outputsToSave: [true], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(n, z(t, xe(Ne(1), t))) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const pM = { kernelName: Bo, gradFunc: (n) => ({ x: () => Ze(n) }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const fM = { kernelName: zo, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(Gd(ue(t, "float32")), n) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const mM = { kernelName: Mo, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(yf(ue(t, "float32")), n) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const gM = { kernelName: Mu, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const [s] = e, { begin: r, size: a } = t, o = s.shape, [i, u] = hc(s, r, a), c = [];
  for (let l = 0; l < n.rank; l++) c.push([i[l], o[l] - i[l] - u[l]]);
  return { x: () => Xr(n, c) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const yM = { kernelName: Ho, outputsToSave: [true], gradFunc: (n, e, t) => {
  const [s] = e, { dim: r } = t, a = true, o = z(n, s);
  return { logits: () => xe(o, z(we(o, [r], a), s)) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bM = { kernelName: Vo, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(n, Ks(t)) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const b1 = { kernelName: Bu, gradFunc: (n, e, t) => {
  const { blockShape: s, paddings: r } = t;
  return { x: () => Ud(n, s, r) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const x1 = { kernelName: Wu, gradFunc: (n, e, t) => {
  const { axis: s } = t;
  return { x: () => Lt(n, s) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const xM = { kernelName: Uo, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => ve(n, z(ln(ue(t, "float32")), 2)) };
} };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const wM = { kernelName: Jl, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(n, z(ue(t, "float32"), 2)) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const CM = { kernelName: jo, inputsToSave: ["a", "b"], gradFunc: (n, e) => {
  const [t, s] = e, r = Ne(2);
  return { a: () => z(n, z(r, xe(t, s))), b: () => z(n, z(r, xe(s, t))) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const IM = { kernelName: jr, gradFunc: (n) => ({ x: () => Ze(n) }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const SM = { kernelName: qo, inputsToSave: ["a", "b"], gradFunc: (n, e) => {
  const [t, s] = e, r = Re(t.shape, s.shape);
  return { a: () => {
    let i = n;
    const u = jt(t.shape, r);
    return u.length > 0 && (i = we(i, u)), B(i, t.shape);
  }, b: () => {
    let i = n;
    const u = jt(s.shape, r);
    return u.length > 0 && (i = we(i, u)), B(St(i), s.shape);
  } };
} };
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const vM = { kernelName: Go, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const [s] = e, r = s.shape.slice(), { axis: a } = t;
  Ee(a, s.shape).forEach((c) => {
    r[c] = 1;
  });
  const i = B(n, r), u = z(i, Bn(s.shape, "float32"));
  return { x: () => u };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $M = { kernelName: Ko, inputsToSave: ["x"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => ve(n, yt(Gd(t))) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const kM = { kernelName: Xo, outputsToSave: [true], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => z(xe(Ne(1), yt(t)), n) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const NM = { kernelName: Hr, inputsToSave: ["x"], gradFunc: (n, e, t) => {
  const [s] = e, { reps: r } = t;
  return { x: () => {
    let o = Ze(s);
    if (s.rank === 1) for (let i = 0; i < r[0]; ++i) o = te(o, Qe(n, [i * s.shape[0]], [s.shape[0]]));
    else if (s.rank === 2) for (let i = 0; i < r[0]; ++i) for (let u = 0; u < r[1]; ++u) o = te(o, Qe(n, [i * s.shape[0], u * s.shape[1]], [s.shape[0], s.shape[1]]));
    else if (s.rank === 3) for (let i = 0; i < r[0]; ++i) for (let u = 0; u < r[1]; ++u) for (let c = 0; c < r[2]; ++c) o = te(o, Qe(n, [i * s.shape[0], u * s.shape[1], c * s.shape[2]], [s.shape[0], s.shape[1], s.shape[2]]));
    else if (s.rank === 4) for (let i = 0; i < r[0]; ++i) for (let u = 0; u < r[1]; ++u) for (let c = 0; c < r[2]; ++c) for (let l = 0; l < r[3]; ++l) o = te(o, Qe(n, [i * s.shape[0], u * s.shape[1], c * s.shape[2], l * s.shape[3]], [s.shape[0], s.shape[1], s.shape[2], s.shape[3]]));
    else throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);
    return o;
  } };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const TM = { kernelName: fr, gradFunc: (n, e, t) => {
  const s = t, { perm: r } = s, a = Ls(r);
  return { x: () => Ye(n, a) };
} };
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const RM = { kernelName: ju, gradFunc: (n, e, t) => {
  const s = t, { axis: r } = s;
  return { value: () => En(n, r) };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const _M = { kernelName: tc, inputsToSave: ["segmentIds"], gradFunc: (n, e) => {
  const [t] = e;
  return { x: () => EM(n, t) };
} };
function EM(n, e) {
  const t = Sr(e, Ze(e)), s = uc(n, t);
  let r = Kr(e, Ne(0, "int32"));
  const a = s.rank - r.rank;
  for (let i = 0; i < a; ++i) r = mn(r, i + 1);
  r = Ps(r, Bn(s.shape, "bool"));
  const o = Ze(s);
  return on(r, s, o);
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const DM = { kernelName: qu, gradFunc: (n) => ({ x: () => Ze(n) }) };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const AM = [wv, _L, EL, DL, AL, FL, OL, PL, LL, zL, ML, BL, UL, jL, qL, KL, XL, YL, QL, ZL, JL, ez, nz, tz, az, oz, iz, uz, lz, cz, eM, dz, hz, pz, fz, mz, yz, gz, bz, xz, wz, Cz, Iz, Sz, vz, $z, kz, Nz, Tz, Ez, g1, g1, Dz, Oz, zz, Mz, Bz, Wz, Vz, Uz, Gz, Hz, jz, qz, Kz, y1, y1, Xz, Yz, Jz, tM, nM, sM, rM, aM, oM, iM, uM, lM, cM, dM, hM, pM, fM, mM, gM, yM, bM, b1, b1, x1, x1, xM, CM, wM, IM, SM, vM, $M, kM, NM, TM, RM, _M, DM];
for (const n of AM) uI(n);
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.abs = function() {
  return this.throwIfDisposed(), Vt(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.acos = function() {
  return this.throwIfDisposed(), Oy(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.acosh = function() {
  return this.throwIfDisposed(), Py(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.add = function(n) {
  return this.throwIfDisposed(), te(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.all = function(n, e) {
  return this.throwIfDisposed(), ff(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.any = function(n, e) {
  return this.throwIfDisposed(), ad(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.argMax = function(n) {
  return this.throwIfDisposed(), Fi(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.argMin = function(n) {
  return this.throwIfDisposed(), Ly(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.asScalar = function() {
  return this.throwIfDisposed(), $(this.size === 1, () => "The array must have only 1 element."), B(this, []);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.asType = function(n) {
  return this.throwIfDisposed(), ue(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.as1D = function() {
  return this.throwIfDisposed(), B(this, [this.size]);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.as2D = function(n, e) {
  return this.throwIfDisposed(), B(this, [n, e]);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.as3D = function(n, e, t) {
  return this.throwIfDisposed(), B(this, [n, e, t]);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.as4D = function(n, e, t, s) {
  return this.throwIfDisposed(), B(this, [n, e, t, s]);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.as5D = function(n, e, t, s, r) {
  return this.throwIfDisposed(), B(this, [n, e, t, s, r]);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.asin = function() {
  return this.throwIfDisposed(), zy(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.asinh = function() {
  return this.throwIfDisposed(), My(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.atan = function() {
  return this.throwIfDisposed(), By(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.atan2 = function(n) {
  return this.throwIfDisposed(), Wy(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.atanh = function() {
  return this.throwIfDisposed(), Vy(this);
};
Y().prototype.avgPool = function(n, e, t, s) {
  return this.throwIfDisposed(), Vd(this, n, e, t, s);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.batchToSpaceND = function(n, e) {
  return this.throwIfDisposed(), Ud(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.batchNorm = function(n, e, t, s, r) {
  return this.throwIfDisposed(), sc(this, n, e, t, s, r);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.broadcastTo = function(n) {
  return this.throwIfDisposed(), Si(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.cast = function(n) {
  return this.throwIfDisposed(), ue(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.ceil = function() {
  return this.throwIfDisposed(), Xy(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.clipByValue = function(n, e) {
  return this.throwIfDisposed(), jn(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.concat = function(n, e) {
  return this.throwIfDisposed(), n instanceof tt && (n = [n]), Lt([this, ...n], e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.conv1d = function(n, e, t, s, r, a) {
  return this.throwIfDisposed(), mf(this, n, e, t, s, r, a);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.conv2dTranspose = function(n, e, t, s, r) {
  return this.throwIfDisposed(), gf(this, n, e, t, s, r);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.conv2d = function(n, e, t, s, r, a) {
  return this.throwIfDisposed(), Mr(this, n, e, t, s, r, a);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.cos = function() {
  return this.throwIfDisposed(), Gd(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.cosh = function() {
  return this.throwIfDisposed(), yf(this);
};
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the 'License');
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an 'AS IS' BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.cumprod = function(n, e, t) {
  return this.throwIfDisposed(), ud(this, n, e, t);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.cumsum = function(n, e, t) {
  return this.throwIfDisposed(), bf(this, n, e, t);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.depthToSpace = function(n, e) {
  return this.throwIfDisposed(), sb(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.depthwiseConv2d = function(n, e, t, s, r, a) {
  return this.throwIfDisposed(), rc(this, n, e, t, s, r, a);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.dilation2d = function(n, e, t, s, r) {
  return this.throwIfDisposed(), rb(this, n, e, t, s, r);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.divNoNan = function(n) {
  return this.throwIfDisposed(), ab(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.div = function(n) {
  return this.throwIfDisposed(), ve(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.dot = function(n) {
  return this.throwIfDisposed(), ob(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.elu = function() {
  return this.throwIfDisposed(), ac(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.equal = function(n) {
  return this.throwIfDisposed(), rs(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.erf = function() {
  return this.throwIfDisposed(), xf(this);
};
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.euclideanNorm = function(n, e) {
  return this.throwIfDisposed(), ub(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.exp = function() {
  return this.throwIfDisposed(), qn(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.expandDims = function(n) {
  return this.throwIfDisposed(), mn(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.expm1 = function() {
  return this.throwIfDisposed(), lb(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.fft = function() {
  return this.throwIfDisposed(), sh(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.flatten = function() {
  return this.throwIfDisposed(), B(this, [this.size]);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.floor = function() {
  return this.throwIfDisposed(), ic(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.floorDiv = function(n) {
  return this.throwIfDisposed(), pf(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.gather = function(n, e, t) {
  return this.throwIfDisposed(), uc(this, n, e, t);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.greaterEqual = function(n) {
  return this.throwIfDisposed(), Kr(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.greater = function(n) {
  return this.throwIfDisposed(), On(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.ifft = function() {
  return this.throwIfDisposed(), Tl(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.irfft = function() {
  return this.throwIfDisposed(), Ff(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.isFinite = function() {
  return this.throwIfDisposed(), cb(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.isInf = function() {
  return this.throwIfDisposed(), db(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.isNaN = function() {
  return this.throwIfDisposed(), hb(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.leakyRelu = function(n) {
  return this.throwIfDisposed(), jd(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.lessEqual = function(n) {
  return this.throwIfDisposed(), Zo(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.less = function(n) {
  return this.throwIfDisposed(), vl(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.localResponseNormalization = function(n, e, t, s) {
  return this.throwIfDisposed(), pb(this, n, e, t, s);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.logSigmoid = function() {
  return this.throwIfDisposed(), fb(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.logSoftmax = function(n) {
  return this.throwIfDisposed(), If(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.logSumExp = function(n, e) {
  return this.throwIfDisposed(), Kd(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.log = function() {
  return this.throwIfDisposed(), as(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.log1p = function() {
  return this.throwIfDisposed(), qd(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.logicalAnd = function(n) {
  return this.throwIfDisposed(), Ps(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.logicalNot = function() {
  return this.throwIfDisposed(), Xd(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.logicalOr = function(n) {
  return this.throwIfDisposed(), Sf(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.logicalXor = function(n) {
  return this.throwIfDisposed(), mb(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.matMul = function(n, e, t) {
  return this.throwIfDisposed(), je(this, n, e, t);
};
Y().prototype.maxPool = function(n, e, t, s) {
  return this.throwIfDisposed(), Yd(this, n, e, t, s);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.max = function(n, e) {
  return this.throwIfDisposed(), Is(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.maximum = function(n) {
  return this.throwIfDisposed(), Sr(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.mean = function(n, e) {
  return this.throwIfDisposed(), Et(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.min = function(n, e) {
  return this.throwIfDisposed(), Sl(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.minimum = function(n) {
  return this.throwIfDisposed(), va(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.mirrorPad = function(n, e) {
  return this.throwIfDisposed(), yb(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.mod = function(n) {
  return this.throwIfDisposed(), bb(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.mul = function(n) {
  return this.throwIfDisposed(), z(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.neg = function() {
  return this.throwIfDisposed(), St(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.norm = function(n, e, t) {
  return this.throwIfDisposed(), oc(this, n, e, t);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.notEqual = function(n) {
  return this.throwIfDisposed(), Pi(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.oneHot = function(n, e = 1, t = 0) {
  return this.throwIfDisposed(), $l(this, n, e, t);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.onesLike = function() {
  return this.throwIfDisposed(), os(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.pad = function(n, e) {
  return this.throwIfDisposed(), Xr(this, n, e);
};
Y().prototype.pool = function(n, e, t, s, r, a) {
  return this.throwIfDisposed(), xb(this, n, e, t, s, r, a);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.pow = function(n) {
  return this.throwIfDisposed(), xr(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.prelu = function(n) {
  return this.throwIfDisposed(), Jd(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.prod = function(n, e) {
  return this.throwIfDisposed(), wb(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.reciprocal = function() {
  return this.throwIfDisposed(), vb(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.relu = function() {
  return this.throwIfDisposed(), ar(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.relu6 = function() {
  return this.throwIfDisposed(), kf(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.reshapeAs = function(n) {
  return this.throwIfDisposed(), B(this, n.shape);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.reshape = function(n) {
  return this.throwIfDisposed(), B(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.resizeBilinear = function(n, e, t) {
  return this.throwIfDisposed(), OS(this, n, e, t);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.resizeNearestNeighbor = function(n, e, t) {
  return this.throwIfDisposed(), PS(this, n, e, t);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.reverse = function(n) {
  return this.throwIfDisposed(), Ss(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.rfft = function() {
  return this.throwIfDisposed(), rh(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.round = function() {
  return this.throwIfDisposed(), Nf(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.rsqrt = function() {
  return this.throwIfDisposed(), Tf(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.selu = function() {
  return this.throwIfDisposed(), Rf(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.separableConv2d = function(n, e, t, s, r, a) {
  return this.throwIfDisposed(), _f(this, n, e, t, s, r, a);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.sigmoid = function() {
  return this.throwIfDisposed(), Ks(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.sign = function() {
  return this.throwIfDisposed(), $b(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.sin = function() {
  return this.throwIfDisposed(), Ef(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.sinh = function() {
  return this.throwIfDisposed(), Df(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.slice = function(n, e) {
  return this.throwIfDisposed(), Qe(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.softmax = function(n) {
  return this.throwIfDisposed(), nh(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.softplus = function() {
  return this.throwIfDisposed(), Yu(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.spaceToBatchND = function(n, e) {
  return this.throwIfDisposed(), Zd(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.split = function(n, e) {
  return this.throwIfDisposed(), Vn(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.sqrt = function() {
  return this.throwIfDisposed(), ln(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.square = function() {
  return this.throwIfDisposed(), yt(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.squaredDifference = function(n) {
  return this.throwIfDisposed(), Of(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.squeeze = function(n) {
  return this.throwIfDisposed(), ei(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.stack = function(n, e) {
  this.throwIfDisposed();
  const t = n instanceof tt ? [this, n] : [this, ...n];
  return En(t, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.step = function(n) {
  return this.throwIfDisposed(), Qu(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.stridedSlice = function(n, e, t, s, r, a, o, i) {
  return this.throwIfDisposed(), kb(this, n, e, t, s, r, a, o, i);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.sub = function(n) {
  return this.throwIfDisposed(), xe(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.sum = function(n, e) {
  return this.throwIfDisposed(), we(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.tan = function() {
  return this.throwIfDisposed(), Nb(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.tanh = function() {
  return this.throwIfDisposed(), Sa(this);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.tile = function(n) {
  return this.throwIfDisposed(), bs(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.toBool = function() {
  return this.throwIfDisposed(), ue(this, "bool");
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.toFloat = function() {
  return this.throwIfDisposed(), ue(this, "float32");
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.toInt = function() {
  return this.throwIfDisposed(), ue(this, "int32");
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.topk = function(n, e) {
  return this.throwIfDisposed(), _b(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.transpose = function(n) {
  return this.throwIfDisposed(), Ye(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.unique = function(n) {
  return this.throwIfDisposed(), Eb(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.unsortedSegmentSum = function(n, e) {
  return this.throwIfDisposed(), zf(this, n, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.unstack = function(n) {
  return this.throwIfDisposed(), vs(this, n);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.where = function(n, e) {
  return this.throwIfDisposed(), on(n, this, e);
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Y().prototype.zerosLike = function() {
  return this.throwIfDisposed(), Ze(this);
};
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class cr extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, cr.prototype);
  }
}
class As extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, As.prototype);
  }
}
class W extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, W.prototype);
  }
}
class Ge extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, Ge.prototype);
  }
}
class cx extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, cx.prototype);
  }
}
/**
* @license
* Copyright 2022 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class Iv {
  constructor(e) {
    this.maxEntries = e || 100, this.cache = /* @__PURE__ */ new Map();
  }
  get(e) {
    let t;
    return this.cache.has(e) && (t = this.cache.get(e), this.cache.delete(e), this.cache.set(e, t)), t;
  }
  put(e, t) {
    if (this.cache.has(e)) this.cache.delete(e);
    else if (this.cache.size >= this.maxEntries) {
      const s = this.cache.keys().next().value;
      this.cache.delete(s);
    }
    this.cache.set(e, t);
  }
  getMaxEntries() {
    return this.maxEntries;
  }
  setMaxEntries(e) {
    if (e < 0) throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);
    if (this.maxEntries > e) for (let t = 0; t < this.maxEntries - e; t++) {
      const s = this.cache.keys().next().value;
      this.cache.delete(s);
    }
    this.maxEntries = e;
  }
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function Mi(n, e) {
  if (Array.isArray(n)) {
    let t = [];
    for (let s = 0; s < e; s++) t = t.concat(n);
    return t;
  } else {
    const t = new Array(e);
    return t.fill(n), t;
  }
}
function dr(n, e) {
  if (!n) throw new cx(e);
}
function w1(n, e) {
  let t = 0;
  for (const s of n) s === e && t++;
  return t;
}
function Mn(n) {
  return n.length === 1 ? n[0] : n;
}
function pt(n) {
  return Array.isArray(n) ? n : [n];
}
function Rr(n) {
  const t = n.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return t[0] !== "_" ? t : "private" + t;
}
function gi(n) {
  return n.length <= 1 || n.indexOf("_") === -1 ? n : n.replace(/[_]+(\w|$)/g, (e, t) => t.toUpperCase());
}
let Rs = {};
function dx(n) {
  if (n == null) return null;
  const e = {};
  return e.className = n.getClassName(), e.config = n.getConfig(), e;
}
function Fg(n) {
  if (!(n == null || typeof n != "object")) if (Array.isArray(n)) n.forEach((e) => Fg(e));
  else {
    const e = Object.keys(n);
    for (const t of e) {
      const s = n[t];
      s != null && typeof s == "object" && (!Array.isArray(s) && s.type === "ndarray" && typeof s.value == "number" ? n[t] = s.value : Fg(s));
    }
  }
}
function yh(n, e = {}, t = {}, s = "object", r = false) {
  if (typeof n == "string") {
    const a = n;
    let o;
    if (a in t) o = t[a];
    else if (a in Rs) o = Rs[a];
    else if (o = e[a], o == null) throw new W(`Unknown ${s}: ${n}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    return o;
  } else {
    const a = n;
    if (a.className == null || a.config == null) throw new W(`${s}: Improper config format: ${JSON.stringify(a)}.
'className' and 'config' must set.`);
    const o = a.className;
    let i, u;
    if (o in t ? [i, u] = t[o] : o in Rs ? [i, u] = Rs.className : o in e && ([i, u] = e[o]), i == null) throw new W(`Unknown ${s}: ${o}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    if (u != null) {
      const c = {};
      for (const p of Object.keys(Rs)) c[p] = Rs[p];
      for (const p of Object.keys(t)) c[p] = t[p];
      const l = a.config;
      l.customObjects = c;
      const d = Object.assign({}, Rs);
      for (const p of Object.keys(t)) Rs[p] = t[p];
      Fg(a.config);
      const h = u(i, a.config, t, r);
      return Rs = Object.assign({}, d), h;
    } else {
      const c = Object.assign({}, Rs);
      for (const d of Object.keys(t)) Rs[d] = t[d];
      const l = new i(a.config);
      return Rs = Object.assign({}, c), l;
    }
  }
}
function FM(n, e) {
  return n < e ? -1 : n > e ? 1 : 0;
}
function Qh(n, e) {
  return -1 * FM(n, e);
}
function fa(n) {
  if (n == null) return n;
  const e = [];
  for (const t of n) e.indexOf(t) === -1 && e.push(t);
  return e;
}
function OM(n) {
  if (n == null) throw new W(`Invalid value in obj: ${JSON.stringify(n)}`);
  for (const e in n) if (n.hasOwnProperty(e)) return false;
  return true;
}
function Ju(n, e, t) {
  if (t != null && n.indexOf(t) < 0) throw new W(`${t} is not a valid ${e}.  Valid values are ${n} or null/undefined.`);
}
function hx(n, e, t = 0, s = 1 / 0) {
  return dr(t >= 0), dr(s >= t), Array.isArray(n) && n.length >= t && n.length <= s && n.every((r) => typeof r === e);
}
function an(n, e) {
  Array.isArray(n) ? ($(n.length > 0, () => `${e} is unexpectedly an empty array.`), n.forEach((t, s) => an(t, `element ${s + 1} of ${e}`))) : $(Number.isInteger(n) && n > 0, () => `Expected ${e} to be a positive integer, but got ${Sv(n)}.`);
}
function Sv(n) {
  return n === null ? "null" : Array.isArray(n) ? "[" + n.map((e) => Sv(e)).join(",") + "]" : typeof n == "string" ? `"${n}"` : `${n}`;
}
function PM(n, e, t) {
  let s = t != null ? t() : Xt(), r;
  return (...o) => {
    const i = t != null ? t() : Xt();
    return i - s < e || (s = i, r = n(...o)), r;
  };
}
function vv(n) {
  return n === "relu" ? "relu" : n === "linear" ? "linear" : n === "elu" ? "elu" : null;
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
let LM = 0;
function $v() {
  return LM++;
}
const Zh = {};
function um(n = "") {
  return n in Zh || (Zh[n] = 0), Zh[n] += 1, n + Zh[n].toString();
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
const zM = ["channelsFirst", "channelsLast"], MM = ["nearest", "bilinear"], BM = ["valid", "same", "causal"], WM = ["max", "avg"], VM = ["sum", "mul", "concat", "ave"];
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
const hl = /* @__PURE__ */ new Map();
function Mt(n) {
  Ju(zM, "DataFormat", n);
}
function UM(n) {
  Ju(MM, "InterpolationFormat", n);
}
function $s(n) {
  Ju(BM, "PaddingMode", n);
}
function kv(n) {
  Ju(WM, "PoolMode", n);
}
const Yc = [], C1 = "/";
function vi(n, e) {
  Yc.push(n);
  try {
    const t = e();
    return Yc.pop(), t;
  } catch (t) {
    throw Yc.pop(), t;
  }
}
function GM() {
  return Yc.length === 0 ? "" : Yc.join(C1) + C1;
}
function Nv(n) {
  if (!Rv(n)) throw new Error("Not a valid tensor name: '" + n + "'");
  return GM() + n;
}
function Tv(n) {
  if (!Rv(n)) throw new Error("Not a valid tensor name: '" + n + "'");
  hl.has(n) || hl.set(n, 0);
  const e = hl.get(n);
  if (hl.set(n, hl.get(n) + 1), e > 0) {
    const t = `${n}_${e}`;
    return hl.set(t, 1), t;
  } else return n;
}
const HM = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function Rv(n) {
  return !!n.match(HM);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function jM(n) {
  return n === parseInt(n.toString(), 10);
}
function ma(n, e, t) {
  e == null && (e = 0), t == null && (t = n.length);
  let s = 1;
  for (let r = e; r < t; ++r) s *= n[r];
  return s;
}
function Rl(n) {
  if (n.length === 0) return Number.NaN;
  let e = Number.POSITIVE_INFINITY;
  for (let t = 0; t < n.length; t++) {
    const s = n[t];
    s < e && (e = s);
  }
  return e;
}
function $a(n) {
  if (n.length === 0) return Number.NaN;
  let e = Number.NEGATIVE_INFINITY;
  for (let t = 0; t < n.length; t++) {
    const s = n[t];
    s > e && (e = s);
  }
  return e;
}
function Js(n, e) {
  if (e < n) throw new W(`end (${e}) < begin (${n}) is forbidden.`);
  const t = [];
  for (let s = n; s < e; ++s) t.push(s);
  return t;
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
let eg;
function Zt() {
  return eg == null && (eg = Ry().epsilon()), eg;
}
function er() {
  return "channelsLast";
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function gr(n, e) {
  return ue(n, e);
}
function bh(n, e = -1) {
  const t = n.shape.slice();
  return e < 0 && (e = t.length + e + 1), t.splice(e, 0, 1), B(n, t);
}
function qM(n, e) {
  return H(() => {
    if (n.shape.length !== 2) throw new W(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);
    const t = bh(n, 1);
    return Og(t, [1, e, 1]);
  });
}
function KM(n) {
  const e = [ma(n.shape)];
  return B(n, e);
}
function XM(n) {
  if (n.rank <= 1) throw new W(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);
  const e = [n.shape[0], ma(n.shape, 1)];
  return B(n, e);
}
function $i(n, e, t) {
  return H(() => {
    switch (n.rank) {
      case 1:
        return eh(n, e, t);
      case 2:
        return Af(n, [e, 0], [t, n.shape[1]]);
      case 3:
        return th(n, [e, 0, 0], [t, n.shape[1], n.shape[2]]);
      case 4:
        return Nl(n, [e, 0, 0, 0], [t, n.shape[1], n.shape[2], n.shape[3]]);
      case 5:
        return Qe(n, [e, 0, 0, 0, 0], [t, n.shape[1], n.shape[2], n.shape[3], n.shape[4]]);
      case 6:
        return Qe(n, [e, 0, 0, 0, 0, 0], [t, n.shape[1], n.shape[2], n.shape[3], n.shape[4], n.shape[5]]);
      default:
        throw new W(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function tg(n, e, t) {
  return H(() => {
    switch (n.rank) {
      case 1:
        return eh(n, e, t);
      case 2:
        return Af(n, [0, e], [n.shape[0], t]);
      case 3:
        return th(n, [0, 0, e], [n.shape[0], n.shape[1], t]);
      case 4:
        return Nl(n, [0, 0, 0, e], [n.shape[0], n.shape[1], n.shape[2], t]);
      default:
        throw new W(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Jh(n, e, t, s) {
  return H(() => {
    switch (n.rank) {
      case 1:
        return eh(n, e, t);
      case 2:
        switch (s) {
          case 1:
            return $i(n, e, t);
          case 2:
            return tg(n, e, t);
          default:
            throw new W(`The axis is not within the rank of the tensor ${s}`);
        }
      case 3:
        switch (s) {
          case 1:
            return $i(n, e, t);
          case 2:
            return th(n, [0, e, 0], [n.shape[0], t, n.shape[2]]);
          case 3:
            return tg(n, e, t);
          default:
            throw new W(`The axis is not within the rank of the tensor ${s}`);
        }
      case 4:
        switch (s) {
          case 1:
            return $i(n, e, t);
          case 2:
            return Nl(n, [0, e, 0, 0], [n.shape[0], t, n.shape[2], n.shape[3]]);
          case 3:
            return Nl(n, [0, 0, e, 0], [n.shape[0], n.shape[1], t, n.shape[3]]);
          case 4:
            return tg(n, e, t);
          default:
            throw new W(`The axis is not within the rank of the tensor ${s}`);
        }
      default:
        throw new W(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function px(n, e = -1) {
  let t;
  return e < 0 && (t = n[0].rank, t !== 0 ? e = t : e = 0), e === n[0].rank && (e = -1), Lt(n, e);
}
function I1(n, e) {
  switch (n.rank) {
    case 1:
      return Yy([n, e]);
    case 2:
      return Qy([n, e], 0);
    case 3:
      return Zy([n, e], 0);
    case 4:
      return Jy([n, e], 0);
    default:
      throw new W(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
  }
}
function Og(n, e) {
  if (Array.isArray(e) || (e = [e]), n.rank !== e.length) throw new W(`The length of input n (${e.length}) does not match the number of dimensions in input x (${n.rank})`);
  return bs(n, e);
}
function lm(n, e = 0, t = 1, s, r) {
  return $f(n, e, t, s, r);
}
function yr(n, e, t, s) {
  if (n.rank < 2 || e.rank < 2) throw new Ge(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${e.shape}`);
  if (e.rank >= 3) {
    const r = n.shape.slice(-1)[0], a = e.shape.slice(-2)[0];
    if (r !== a) throw new Ge(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${e.shape}`);
  }
  if (n.rank === 2 && e.rank === 2) return _g({ a: n, b: e, transposeA: false, transposeB: false, bias: s ? Pg(n.rank, s, er()) : null, activation: t });
  {
    const r = n.shape.slice(), a = r.pop();
    n = B(n, [-1, a]);
    const o = e.shape.slice(), i = o.pop(), u = o.pop(), c = [...o, i], l = Array.from({ length: e.rank }, (f, m) => m === 0 ? e.rank - 2 : m <= e.rank - 2 ? m - 1 : m);
    e = B(Ye(e, l), [u, -1]);
    const d = [...r, ...c];
    return B(_g({ a: n, b: e, transposeA: false, transposeB: false, bias: s ? Pg(n.rank, s, er()) : null, activation: t }), d);
  }
}
function _v(n, e, t) {
  return H(() => (Array.isArray(e) ? e = bn(e, "int32") : e = ue(e, "int32"), uc(n, e, t)));
}
function xh(n) {
  return z(n, n);
}
function Pg(n, e, t) {
  const s = e.shape;
  if (e.rank !== 1 && e.rank !== n) throw new W(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${n}`);
  if (n === 5) {
    if (t === "channelsFirst") return s.length === 1 ? B(e, [1, s[0], 1, 1, 1]) : B(e, [1, s[3], s[0], s[1], s[2]]);
    if (t === "channelsLast") return s.length === 1 ? B(e, [1, 1, 1, 1, s[0]]) : B(e, [1].concat(s));
  } else if (n === 4) {
    if (t === "channelsFirst") return s.length === 1 ? B(e, [1, s[0], 1, 1]) : B(e, [1, s[2], s[0], s[1]]);
    if (t === "channelsLast") return s.length === 1 ? B(e, [1, 1, 1, s[0]]) : B(e, [1].concat(s));
  } else if (n === 3) {
    if (t === "channelsFirst") return s.length === 1 ? B(e, [1, s[0], 1]) : B(e, [1, s[1], s[0]]);
    if (t === "channelsLast") return s.length === 1 ? B(e, [1, 1, s[0]]) : B(e, [1].concat(s));
  } else if (n < 3) return e;
  throw new W(`Unsupported input rank by biasAdd: ${e.rank}`);
}
function or(n, e, t) {
  return H(() => (t == null && (t = er()), Mt(t), te(n, Pg(n.rank, e, t))));
}
function YM(n, e = 1) {
  if (e !== 1) throw new Ge(`Support for alpha values other than 1 (${e}) is not implemented yet.`);
  return ac(n);
}
function QM(n) {
  return H(() => ve(n, te(Vt(n), 1)));
}
function Ev(n, e, t, s) {
  return H(() => Fb(n, e, t, s));
}
function ZM(n) {
  return H(() => {
    const e = te(0.5, z(0.2, n));
    return jn(e, 0, 1);
  });
}
function wh(n, e, t = false) {
  return t ? n() : e();
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
const JM = ["fanIn", "fanOut", "fanAvg"], eB = ["normal", "uniform", "truncatedNormal"];
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function tB(n) {
  Ju(JM, "FanMode", n);
}
function nB(n) {
  Ju(eB, "Distribution", n);
}
class zs extends Zu {
  fromConfigUsesCustomObjects() {
    return false;
  }
  getConfig() {
    return {};
  }
}
class fx extends zs {
  apply(e, t) {
    return Ot(e, t);
  }
}
fx.className = "Zeros";
ne(fx);
class cm extends zs {
  apply(e, t) {
    return Bn(e, t);
  }
}
cm.className = "Ones";
ne(cm);
class mx extends zs {
  constructor(e) {
    if (super(), typeof e != "object") throw new W(`Expected argument of type ConstantConfig but got ${e}`);
    if (e.value === void 0) throw new W(`config must have value set but got ${e}`);
    this.value = e.value;
  }
  apply(e, t) {
    return H(() => z(Ne(this.value), Bn(e, t)));
  }
  getConfig() {
    return { value: this.value };
  }
}
mx.className = "Constant";
ne(mx);
class gx extends zs {
  constructor(e) {
    super(), this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = e.minval || this.DEFAULT_MINVAL, this.maxval = e.maxval || this.DEFAULT_MAXVAL, this.seed = e.seed;
  }
  apply(e, t) {
    return Jo(e, this.minval, this.maxval, t, this.seed);
  }
  getConfig() {
    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
  }
}
gx.className = "RandomUniform";
ne(gx);
class yx extends zs {
  constructor(e) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
  }
  apply(e, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32") throw new Ge(`randomNormal does not support dType ${t}.`);
    return lm(e, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
yx.className = "RandomNormal";
ne(yx);
class bx extends zs {
  constructor(e) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
  }
  apply(e, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32") throw new Ge(`truncatedNormal does not support dType ${t}.`);
    return Lf(e, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
bx.className = "TruncatedNormal";
ne(bx);
class xx extends zs {
  constructor(e) {
    super(), this.gain = e.gain != null ? e.gain : 1;
  }
  apply(e, t) {
    return H(() => {
      if (e.length !== 2 || e[0] !== e[1]) throw new W("Identity matrix initializer can only be used for 2D square matrices.");
      return z(this.gain, wf(e[0]));
    });
  }
  getConfig() {
    return { gain: this.gain };
  }
}
xx.className = "Identity";
ne(xx);
function sB(n, e = "channelsLast") {
  let t, s;
  if (Mt(e), n.length === 2) t = n[0], s = n[1];
  else if ([3, 4, 5].indexOf(n.length) !== -1) {
    if (e === "channelsFirst") {
      const r = ma(n, 2);
      t = n[1] * r, s = n[0] * r;
    } else if (e === "channelsLast") {
      const r = ma(n, 0, n.length - 2);
      t = n[n.length - 2] * r, s = n[n.length - 1] * r;
    }
  } else {
    const r = ma(n);
    t = Math.sqrt(r), s = Math.sqrt(r);
  }
  return [t, s];
}
class Kn extends zs {
  constructor(e) {
    if (super(), e.scale < 0) throw new W(`scale must be a positive float. Got: ${e.scale}`);
    this.scale = e.scale == null ? 1 : e.scale, this.mode = e.mode == null ? "fanIn" : e.mode, tB(this.mode), this.distribution = e.distribution == null ? "normal" : e.distribution, nB(this.distribution), this.seed = e.seed;
  }
  apply(e, t) {
    const s = sB(e), r = s[0], a = s[1];
    let o = this.scale;
    if (this.mode === "fanIn" ? o /= Math.max(1, r) : this.mode === "fanOut" ? o /= Math.max(1, a) : o /= Math.max(1, (r + a) / 2), this.distribution === "normal") {
      const i = Math.sqrt(o);
      if (t = t || "float32", t !== "float32" && t !== "int32") throw new Ge(`${this.getClassName()} does not support dType ${t}.`);
      return Lf(e, 0, i, t, this.seed);
    } else {
      const i = Math.sqrt(3 * o);
      return Jo(e, -i, i, t, this.seed);
    }
  }
  getConfig() {
    return { scale: this.scale, mode: this.mode, distribution: this.distribution, seed: this.seed };
  }
}
Kn.className = "VarianceScaling";
ne(Kn);
class dm extends Kn {
  constructor(e) {
    super({ scale: 1, mode: "fanAvg", distribution: "uniform", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Kn.className;
  }
}
dm.className = "GlorotUniform";
ne(dm);
class hm extends Kn {
  constructor(e) {
    super({ scale: 1, mode: "fanAvg", distribution: "normal", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Kn.className;
  }
}
hm.className = "GlorotNormal";
ne(hm);
class pm extends Kn {
  constructor(e) {
    super({ scale: 2, mode: "fanIn", distribution: "normal", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Kn.className;
  }
}
pm.className = "HeNormal";
ne(pm);
class fm extends Kn {
  constructor(e) {
    super({ scale: 2, mode: "fanIn", distribution: "uniform", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Kn.className;
  }
}
fm.className = "HeUniform";
ne(fm);
class mm extends Kn {
  constructor(e) {
    super({ scale: 1, mode: "fanIn", distribution: "normal", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Kn.className;
  }
}
mm.className = "LeCunNormal";
ne(mm);
class gm extends Kn {
  constructor(e) {
    super({ scale: 1, mode: "fanIn", distribution: "uniform", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Kn.className;
  }
}
gm.className = "LeCunUniform";
ne(gm);
class wx extends zs {
  constructor(e) {
    super(), this.DEFAULT_GAIN = 1, this.ELEMENTS_WARN_SLOW = 2e3, this.gain = e.gain == null ? this.DEFAULT_GAIN : e.gain, this.seed = e.seed;
  }
  apply(e, t) {
    return H(() => {
      if (e.length < 2) throw new Ge("Shape must be at least 2D.");
      if (t !== "int32" && t !== "float32" && t !== void 0) throw new TypeError(`Unsupported data type ${t}.`);
      t = t;
      const s = A(e.slice(0, -1)), r = e[e.length - 1], a = s * r;
      a > this.ELEMENTS_WARN_SLOW && console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${a}) elements: Slowness may result.`);
      const o = [Math.max(r, s), Math.min(r, s)], i = lm(o, 0, 1, t, this.seed), u = zb.qr(i, false);
      let c = u[0];
      const d = u[1].flatten().stridedSlice([0], [Math.min(r, s) * Math.min(r, s)], [Math.min(r, s) + 1]);
      return c = z(c, d.sign()), s < r && (c = c.transpose()), z(Ne(this.gain), c.reshape(e));
    });
  }
  getConfig() {
    return { gain: this.gain, seed: this.seed };
  }
}
wx.className = "Orthogonal";
ne(wx);
const S1 = { constant: "Constant", glorotNormal: "GlorotNormal", glorotUniform: "GlorotUniform", heNormal: "HeNormal", heUniform: "HeUniform", identity: "Identity", leCunNormal: "LeCunNormal", leCunUniform: "LeCunUniform", ones: "Ones", orthogonal: "Orthogonal", randomNormal: "RandomNormal", randomUniform: "RandomUniform", truncatedNormal: "TruncatedNormal", varianceScaling: "VarianceScaling", zeros: "Zeros" };
function v1(n, e = {}) {
  return yh(n, ys.getMap().classNameMap, e, "initializer");
}
function At(n) {
  return dx(n);
}
function Nt(n) {
  if (typeof n == "string") {
    const e = n in S1 ? S1[n] : n;
    if (e === "GlorotNormal") return new hm();
    if (e === "GlorotUniform") return new dm();
    if (e === "HeNormal") return new pm();
    if (e === "HeUniform") return new fm();
    if (e === "LeCunNormal") return new mm();
    if (e === "LeCunUniform") return new gm();
    {
      const t = {};
      return t.className = e, t.config = {}, v1(t);
    }
  } else return n instanceof zs ? n : v1(n);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function Lg(n) {
  return Array.isArray(n) && Array.isArray(n[0]);
}
function Fp(n) {
  return n.length === 0 ? [] : Array.isArray(n[0]) ? n : [n];
}
function Fe(n) {
  let e;
  if (Array.isArray(n)) {
    if (n.length !== 1) throw new W(`Expected Tensor length to be 1; got ${n.length}`);
    e = n[0];
  } else e = n;
  return e;
}
function at(n) {
  if (Array.isArray(n) && Array.isArray(n[0])) {
    if (n.length === 1) return n = n, n[0];
    throw new W(`Expected exactly 1 Shape; got ${n.length}`);
  } else return n;
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function Op(n) {
  let e = 0;
  for (const t of n) t.shape.length === 0 ? e += 1 : e += t.shape.reduce((s, r) => s * r);
  return e;
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
const $1 = "Variable";
class Dv {
  constructor(e, t = "float32", s = $1, r = true, a = null) {
    this.dtype = t ?? "float32", this.shape = e.shape, this.id = $v(), s = s ?? $1, this.originalName = Nv(s), this.name = Tv(this.originalName), this.trainable_ = r, this.constraint = a, this.val = Db(e, this.trainable_, this.name, this.dtype);
  }
  read() {
    return this.assertNotDisposed(), this.val;
  }
  write(e) {
    return this.assertNotDisposed(), rB(this.val, e), this.val.id !== e.id && (this.val.assign(e), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
  }
  dispose() {
    this.assertNotDisposed(), this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed) throw new Error(`LayersVariable ${this.name} is already disposed.`);
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this.trainable_ = e, this.val.trainable = e;
  }
}
function rB(n, e) {
  if (n.shape.toString() !== e.shape.toString()) throw new Error("Shape mismatch: " + JSON.stringify(n.shape) + " vs. " + JSON.stringify(e.shape));
}
function zg(n) {
  return n.map((e) => e.read());
}
function Cx(n) {
  n.forEach((e) => {
    e[0].write(e[1]);
  });
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class Ut {
  constructor(e) {
    this.dtype = e.dtype, this.shape = e.shape, e.shape != null ? this.ndim = e.shape.length : this.ndim = e.ndim, this.maxNDim = e.maxNDim, this.minNDim = e.minNDim, this.axes = e.axes || {};
  }
}
class tr {
  constructor(e, t, s, r, a, o, i) {
    this.dtype = e, this.shape = t, this.sourceLayer = s, this.inputs = r, this.callArgs = a, this.outputTensorIndex = i, this.id = $v(), o != null && (this.originalName = Nv(o), this.name = Tv(this.originalName)), this.rank = t.length;
  }
}
let aB = 0;
class ym {
  constructor(e, t) {
    this.callArgs = t, this.id = aB++, this.outboundLayer = e.outboundLayer, this.inboundLayers = e.inboundLayers, this.nodeIndices = e.nodeIndices, this.tensorIndices = e.tensorIndices, this.inputTensors = e.inputTensors, this.outputTensors = e.outputTensors, this.inputMasks = e.inputMasks, this.outputMasks = e.outputMasks, this.inputShapes = e.inputShapes, this.outputShapes = e.outputShapes;
    for (const s of e.inboundLayers) s == null ? void 0 : s.outboundNodes.push(this);
    e.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    const e = [];
    for (const t of this.inboundLayers) t != null ? e.push(t.name) : e.push(null);
    return { outboundLayer: this.outboundLayer ? this.outboundLayer.name : null, inboundLayers: e, nodeIndices: this.nodeIndices, tensorIndices: this.tensorIndices };
  }
}
let oB = 0;
class qe extends Zu {
  constructor(e = {}) {
    super(), this._callHook = null, this._addedWeightNames = [], this._stateful = false, this.id = oB++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = false, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = false, this.inboundNodes = [], this.outboundNodes = [];
    let t = e.name;
    if (!t) {
      const s = this.getClassName();
      t = Rr(s) + "_" + um(s);
    }
    if (this.name = t, this.trainable_ = e.trainable == null ? true : e.trainable, e.inputShape != null || e.batchInputShape != null) {
      let s;
      if (e.batchInputShape != null) s = e.batchInputShape;
      else if (e.inputShape != null) {
        let a = null;
        e.batchSize != null && (a = e.batchSize), s = [a].concat(e.inputShape);
      }
      this.batchInputShape = s;
      let r = e.dtype;
      r == null && (r = e.inputDType), r == null && (r = "float32"), this.dtype = r;
    }
    e.weights != null ? this.initialWeights = e.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = false;
  }
  static nodeKey(e, t) {
    return e.name + "_ib-" + t.toString();
  }
  getNodeAtIndex(e, t) {
    if (this.inboundNodes.length === 0) throw new As(`The layer has never been called and thus has no defined ${t}.`);
    if (this.inboundNodes.length <= e) throw new W(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    return this.inboundNodes[e];
  }
  getInputAt(e) {
    return Mn(this.getNodeAtIndex(e, "input").inputTensors);
  }
  getOutputAt(e) {
    return Mn(this.getNodeAtIndex(e, "output").outputTensors);
  }
  get input() {
    if (this.inboundNodes.length > 1) throw new cr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
    if (this.inboundNodes.length === 0) throw new cr(`Layer ${this.name} is not connected, no input to return.`);
    return Mn(this.getNodeAtIndex(0, "input").inputTensors);
  }
  get output() {
    if (this.inboundNodes.length === 0) throw new cr(`Layer ${this.name} has no inbound nodes.`);
    if (this.inboundNodes.length > 1) throw new cr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
    return Mn(this.getNodeAtIndex(0, "output").outputTensors);
  }
  get losses() {
    return this._losses;
  }
  calculateLosses() {
    return this.losses.map((e) => e());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(e) {
    this._built = e;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this._trainableWeights.forEach((t) => t.trainable = e), this.trainable_ = e;
  }
  get trainableWeights() {
    return this.trainable_ ? this._trainableWeights.filter((e) => e.trainable) : [];
  }
  set trainableWeights(e) {
    this._trainableWeights = e;
  }
  get nonTrainableWeights() {
    return this.trainable ? this._trainableWeights.filter((e) => !e.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
  }
  set nonTrainableWeights(e) {
    this._nonTrainableWeights = e;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  resetStates() {
    if (!this.stateful) throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
  }
  assertInputCompatibility(e) {
    const t = pt(e);
    if (this.inputSpec == null || this.inputSpec.length === 0) return;
    const s = pt(this.inputSpec);
    if (t.length !== s.length) throw new W(`Layer ${this.name} expects ${s.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);
    for (let r = 0; r < t.length; r++) {
      const a = t[r], o = s[r];
      if (o == null) continue;
      const i = a.rank;
      if (o.ndim != null && i !== o.ndim) throw new W(`Input ${r} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${i}`);
      if (o.maxNDim != null && i > o.maxNDim) throw new W(`Input ${r} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${i}`);
      if (o.minNDim != null && i < o.minNDim) throw new W(`Input ${r} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${i}.`);
      if (o.dtype != null && a.dtype !== o.dtype) throw new W(`Input ${r} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${a.dtype}.`);
      if (o.axes) {
        const u = a.shape;
        for (const c in o.axes) {
          const l = Number(c), d = o.axes[c], h = l >= 0 ? u[l] : u[u.length + l];
          if (d != null && [d, null].indexOf(h) === -1) throw new W(`Input ${r} is incompatible with layer ${this.name}: expected axis ${l} of input shape to have value ${d} but got shape ${u}.`);
        }
      }
      if (o.shape != null) for (let u = 0; u < o.shape.length; ++u) {
        const c = o.shape[u], l = a.shape[u];
        if (c != null && l != null && c !== l) throw new W(`Input ${r} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${a.shape}.`);
      }
    }
  }
  call(e, t) {
    return e;
  }
  invokeCallHook(e, t) {
    this._callHook != null && this._callHook(e, t);
  }
  setCallHook(e) {
    this._callHook = e;
  }
  clearCallHook() {
    this._callHook = null;
  }
  apply(e, t) {
    t = t || {}, this.assertNotDisposed();
    const s = pt(e), r = lB(e), a = cB(e);
    if (r === a) throw new W("Arguments to apply() must be all SymbolicTensors or all Tensors");
    return vi(this.name, () => {
      if (!this.built) {
        this.assertInputCompatibility(e);
        const o = [];
        for (const i of pt(e)) o.push(i.shape);
        this.build(Mn(o)), this.built = true, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && a && (this._refCount = 1);
      }
      if (this.assertInputCompatibility(e), a) {
        let o = this.call(e, t);
        this.supportsMasking && this.setMaskMetadata(e, o);
        const i = pt(o), u = [];
        for (let c of i) s.indexOf(c) !== -1 && (c = c.clone()), u.push(c);
        if (o = Mn(u), this.activityRegularizer != null) throw new Ge("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return o;
      } else {
        const o = iB(e), i = this.computeOutputShape(o);
        let u;
        const c = uB(e);
        if (this.warnOnIncompatibleInputShape(Array.isArray(e) ? o[0] : o), i != null && i.length > 0 && Array.isArray(i[0]) ? u = i.map((l, d) => new tr(c, l, this, pt(e), t, this.name, d)) : u = new tr(c, i, this, pt(e), t, this.name), this.addInboundNode(e, u, null, null, o, i, t), this._refCount++, this.activityRegularizer != null) throw new Ge("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return u;
      }
    });
  }
  warnOnIncompatibleInputShape(e) {
    if (this.batchInputShape != null) if (e.length !== this.batchInputShape.length) console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
    else {
      let t = false;
      this.batchInputShape.forEach((s, r) => {
        s != null && e[r] != null && e[r] !== s && (t = true);
      }), t && console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
    }
  }
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0) throw new cr(`The layer ${this.name} has never been called and thus has no defined output shape.`);
    const e = [];
    for (const t of this.inboundNodes) {
      const s = JSON.stringify(t.outputShapes);
      e.indexOf(s) === -1 && e.push(s);
    }
    if (e.length === 1) {
      const t = this.inboundNodes[0].outputShapes;
      return Array.isArray(t) && Array.isArray(t[0]) && t.length === 1 ? t[0] : t;
    } else throw new cr(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
  }
  countParams() {
    if (!this.built) throw new As(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
    return Op(this.weights);
  }
  build(e) {
    this.built = true;
  }
  getWeights(e = false) {
    return zg(e ? this.trainableWeights : this.weights);
  }
  setWeights(e) {
    H(() => {
      const t = this.weights;
      if (t.length !== e.length) throw new W(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);
      if (t.length === 0) return;
      const s = [], r = zg(t);
      for (let a = 0; a < r.length; ++a) {
        const o = r[a], i = t[a], u = e[a];
        if (!Be(o.shape, u.shape)) throw new W(`Layer weight shape ${o.shape} not compatible with provided weight shape ${u.shape}`);
        s.push([i, u]);
      }
      Cx(s);
    });
  }
  addWeight(e, t, s, r, a, o, i, u) {
    if (this._addedWeightNames.indexOf(e) !== -1) throw new W(`Duplicate weight name ${e} for layer ${this.name}`);
    this._addedWeightNames.push(e), s == null && (s = "float32"), this.fastWeightInitDuringBuild && (r = u != null ? u() : Nt("zeros"));
    const c = r.apply(t, s), l = new Dv(c, s, e, o, i);
    return c.dispose(), a != null && this.addLoss(() => a.apply(l.read())), o == null && (o = true), o ? this._trainableWeights.push(l) : this._nonTrainableWeights.push(l), l;
  }
  setFastWeightInitDuringBuild(e) {
    this.fastWeightInitDuringBuild = e;
  }
  addLoss(e) {
    e == null || Array.isArray(e) && e.length === 0 || (e = pt(e), this._losses !== void 0 && this._losses !== null && this.losses.push(...e));
  }
  computeOutputShape(e) {
    return e;
  }
  computeMask(e, t) {
    if (!this.supportsMasking) {
      if (t != null) if (Array.isArray(t)) t.forEach((s) => {
        if (s != null) throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      });
      else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      return null;
    }
    return t;
  }
  setMaskMetadata(e, t, s) {
    if (!this.supportsMasking) return;
    const r = this.computeMask(e, s), a = pt(t), o = pt(r);
    if (a.length !== o.length) throw new Error(`${this.name} outputs ${a.length} tensors but ${a.length} masks for those tensors`);
    for (let i = 0; i < a.length; i++) a[i].kerasMask = o[i];
  }
  addInboundNode(e, t, s, r, a, o, i = null) {
    const u = pt(e);
    t = pt(t), s = pt(s), r = pt(r), a = Fp(a), o = Fp(o);
    const c = [], l = [], d = [];
    for (const h of u) c.push(h.sourceLayer), l.push(h.nodeIndex), d.push(h.tensorIndex);
    new ym({ outboundLayer: this, inboundLayers: c, nodeIndices: l, tensorIndices: d, inputTensors: u, outputTensors: t, inputMasks: s, outputMasks: r, inputShapes: a, outputShapes: o }, i);
    for (let h = 0; h < t.length; h++) t[h].sourceLayer = this, t[h].nodeIndex = this.inboundNodes.length - 1, t[h].tensorIndex = h;
  }
  getConfig() {
    const e = { name: this.name, trainable: this.trainable };
    return this.batchInputShape != null && (e.batchInputShape = this.batchInputShape), this.dtype != null && (e.dtype = this.dtype), e;
  }
  disposeWeights() {
    return this.weights.forEach((e) => e.dispose()), this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0) throw new Error(`Layer '${this.name}' is already disposed.`);
  }
  dispose() {
    if (!this.built) throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
    if (this._refCount === null) throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
    this.assertNotDisposed();
    let e = 0;
    return --this._refCount === 0 && (e = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: e };
  }
}
function iB(n) {
  n = pt(n);
  const e = [];
  for (const t of n) e.push(t.shape);
  return Mn(e);
}
function uB(n) {
  return "float32";
}
function Av(n, e, t) {
  if ((e == null || t != null && t > 0) && (e = n.sourceLayer, t = n.nodeIndex), e.inboundNodes.length === 0) return [n];
  {
    const s = e.inboundNodes[t];
    if (s.inboundLayers.length === 0) return s.inputTensors;
    {
      const r = [];
      for (let a = 0; a < s.inboundLayers.length; a++) {
        const o = s.inputTensors[a], i = s.inboundLayers[a], u = s.nodeIndices[a], c = Av(o, i, u);
        for (const l of c) r.indexOf(l) === -1 && r.push(l);
      }
      return r;
    }
  }
}
function lB(n) {
  let e = true;
  for (const t of pt(n)) if (!(t instanceof tr)) {
    e = false;
    break;
  }
  return e;
}
function cB(n) {
  let e = true;
  for (const t of pt(n)) if (t instanceof tr) {
    e = false;
    break;
  }
  return e;
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class pc extends qe {
  constructor(e) {
    if (super({ dtype: e.dtype, name: e.name != null ? e.name : um("input").toString() }), e.batchSize == null && (e.batchSize = null), e.sparse == null && (e.sparse = false), this.trainable = false, this.built = true, this.sparse = e.sparse, e.inputShape != null && e.batchInputShape != null) throw new W("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
    let t = e.batchInputShape;
    if (t == null) {
      if (e.inputShape == null) throw new W("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
      t = [e.batchSize].concat(e.inputShape);
    } else if (e.batchSize != null) throw new W("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
    const s = e.dtype || "float32";
    this.batchInputShape = t, this.dtype = s, this.inputSpec = [{ shape: t }];
    const r = new tr(this.dtype, this.batchInputShape, this, [], {}, this.name);
    r.nodeIndex = 0, r.tensorIndex = 0, new ym({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: [r], outputTensors: [r], inputMasks: [null], outputMasks: [null], inputShapes: [t], outputShapes: [t] });
  }
  apply(e, t) {
    throw new W(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
  }
  getConfig() {
    return { batchInputShape: this.batchInputShape, dtype: this.dtype, sparse: this.sparse, name: this.name };
  }
}
pc.className = "InputLayer";
ne(pc);
function Fv(n) {
  if (n.batchShape == null && n.shape == null) throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
  if (n.batchShape != null && n.shape != null) throw new W("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
  let e = n.batchShape;
  n.shape != null && e == null && (e = [null].concat(n.shape));
  let t = n.dtype;
  return t == null && (t = "float32"), new pc({ batchInputShape: e, name: n.name, dtype: t, sparse: n.sparse }).inboundNodes[0].outputTensors[0];
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function dB(n, e) {
  if (n.dtype == null || n.dtype === e.dtype) return e;
  try {
    return ue(e, n.dtype);
  } catch {
    throw new W(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`);
  }
}
class la {
  constructor(e) {
    if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, e instanceof la) for (const t in e.id2Value) this.id2Value[t] = e.id2Value[t], t in e.id2Mask && (this.id2Mask[t] = e.id2Mask[t]);
    else {
      if (e == null) return;
      for (const t of e) this.add(t.key, t.value);
    }
  }
  add(e, t, s) {
    if (this.id2Value[e.id] == null) this.id2Value[e.id] = dB(e, t), this.name2Id[e.name] = e.id, s != null && (this.id2Mask[e.id] = s);
    else throw new W(`Duplicate key: name=${e.name}, id=${e.id}`);
    return this;
  }
  addFeed(e) {
    this.add(e.key, e.value);
  }
  hasKey(e) {
    return this.id2Value[e.id] != null;
  }
  names() {
    return Object.keys(this.name2Id);
  }
  getValue(e) {
    if (e instanceof tr) {
      if (this.id2Value[e.id] == null) throw new W(`Nonexistent key: ${e.name}`);
      return this.id2Value[e.id];
    } else {
      const t = this.name2Id[e];
      if (t == null) throw new W(`Feed dict has no SymbolicTensor name: ${e}`);
      return this.id2Value[t];
    }
  }
  getMask(e) {
    if (e instanceof tr) {
      if (this.id2Value[e.id] == null) throw new W(`Nonexistent key: ${e.name}`);
      return this.id2Mask[e.id];
    } else {
      const t = this.name2Id[e];
      if (t == null) throw new W(`Feed dict has no SymbolicTensor name: ${e}`);
      return this.id2Mask[t];
    }
  }
  disposeMasks() {
    this.id2Mask != null && Me(this.id2Mask);
  }
}
const Pp = new Iv(), Lp = new Iv();
function hB(n) {
  Pp == null ? void 0 : Pp.setMaxEntries(n), Lp == null ? void 0 : Lp.setMaxEntries(n);
}
function Bc(n, e, t, s) {
  const r = t == null ? false : t.training, a = Array.isArray(n), o = a ? n : [n], i = o.map((f) => f.name), u = [], c = e.names();
  for (const f of i) c.indexOf(f) !== -1 ? u.push(e.getValue(f)) : u.push(null);
  const l = i.join(",") + "|" + e.names().sort().join(",");
  let d = Pp.get(l), h;
  if (d == null) {
    const f = pB(o, e);
    d = f.sorted, h = f.recipientCounts, Pp.put(l, d), Lp.put(l, h);
  }
  h = {}, r || Object.assign(h, Lp.get(l));
  const p = new la(e);
  for (let f = 0; f < d.length; ++f) {
    const m = d[f], g = m.sourceLayer;
    if (g instanceof pc) continue;
    const y = [], b = [], x = [];
    let w = false;
    for (const N of m.inputs) {
      const T = p.getValue(N), S = p.getMask(N);
      y.push(T), b.push(S), S != null && (w = true), r || (h[N.name]--, h[N.name] === 0 && !e.hasKey(N) && i.indexOf(N.name) === -1 && !T.isDisposed && N.sourceLayer.stateful !== true && x.push(T));
    }
    w && (t = t || {}, t.mask = b[0]);
    const C = pt(g.apply(y, t));
    let v = null;
    g.supportsMasking && (v = g.computeMask(y, b));
    const k = mB(m), R = Array.isArray(k) ? k : [k];
    for (let N = 0; N < R.length; ++N) {
      p.hasKey(R[N]) || p.add(R[N], C[N], Array.isArray(v) ? v[0] : v);
      const T = i.indexOf(R[N].name);
      T !== -1 && (u[T] = C[N]);
    }
    r || Me(x);
  }
  return p.disposeMasks(), a ? u : u[0];
}
function pB(n, e) {
  $(n != null && n.length > 0, () => "Expected at least one fetch, got none");
  let t = [], s = {};
  if (n.length === 1) {
    const r = k1(n[0], e);
    t = r.sorted, s = r.recipientMap;
  } else {
    const r = /* @__PURE__ */ new Set();
    for (const a of n) {
      const { sorted: o, recipientMap: i } = k1(a, e);
      for (const u of o) r.has(u.name) || (t.push(u), r.add(u.name));
      for (const u in i) s[u] == null && (s[u] = /* @__PURE__ */ new Set()), i[u].forEach((c) => s[u].add(c));
    }
  }
  return { sorted: t, recipientCounts: fB(s) };
}
function fB(n) {
  const e = {};
  for (const t in n) e[t] = n[t].size;
  return e;
}
function k1(n, e) {
  const t = /* @__PURE__ */ new Set(), s = [], r = {};
  for (const i of e.names()) t.add(i);
  const a = [], o = [];
  for (a.push(n); a.length > 0; ) {
    const i = a[a.length - 1];
    if (t.has(i.name)) {
      a.pop();
      continue;
    }
    const u = o[o.length - 1] === a.length - 1;
    if (i.inputs.length === 0 || u) a.pop(), s.push(i), t.add(i.name), u && o.pop();
    else {
      o.push(a.length - 1);
      for (const c of i.inputs) r[c.name] == null && (r[c.name] = /* @__PURE__ */ new Set()), r[c.name].add(i.name), !t.has(c.name) && a.push(c);
    }
  }
  return { sorted: s, recipientMap: r };
}
function mB(n) {
  let e;
  if (n.sourceLayer.inboundNodes.length === 1) e = n.sourceLayer.output;
  else {
    let t = null;
    for (let s = 0; s < n.sourceLayer.inboundNodes.length; ++s) for (const r of n.sourceLayer.inboundNodes[s].outputTensors) if (r.id === n.id) {
      t = s;
      break;
    }
    e = n.sourceLayer.getOutputAt(t);
  }
  return e;
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const gB = U();
gB.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, hB);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function Ix(n, e) {
  return H(() => ln(we(z(n, n), e, true)));
}
class Ch extends Zu {
  getConfig() {
    return {};
  }
}
class Sx extends Ch {
  constructor(e) {
    super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return H(() => {
      const t = Ix(e, this.axis), s = jn(t, 0, this.maxValue);
      return z(e, ve(s, te(Zt(), t)));
    });
  }
  getConfig() {
    return { maxValue: this.maxValue, axis: this.axis };
  }
}
Sx.className = "MaxNorm";
ne(Sx);
class vx extends Ch {
  constructor(e) {
    super(), this.defaultAxis = 0, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return H(() => ve(e, te(Zt(), Ix(e, this.axis))));
  }
  getConfig() {
    return { axis: this.axis };
  }
}
vx.className = "UnitNorm";
ne(vx);
class $x extends Ch {
  apply(e) {
    return ar(e);
  }
}
$x.className = "NonNeg";
ne($x);
class kx extends Ch {
  constructor(e) {
    super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = e.minValue != null ? e.minValue : this.defaultMinValue, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.rate = e.rate != null ? e.rate : this.defaultRate, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return H(() => {
      const t = Ix(e, this.axis), s = te(z(this.rate, jn(t, this.minValue, this.maxValue)), z(1 - this.rate, t));
      return z(e, ve(s, te(Zt(), t)));
    });
  }
  getConfig() {
    return { minValue: this.minValue, maxValue: this.maxValue, rate: this.rate, axis: this.axis };
  }
}
kx.className = "MinMaxNorm";
ne(kx);
const N1 = { maxNorm: "MaxNorm", minMaxNorm: "MinMaxNorm", nonNeg: "NonNeg", unitNorm: "UnitNorm" };
function Jt(n) {
  return dx(n);
}
function T1(n, e = {}) {
  return yh(n, ys.getMap().classNameMap, e, "constraint");
}
function en(n) {
  if (n == null) return null;
  if (typeof n == "string") {
    const t = { className: n in N1 ? N1[n] : n, config: {} };
    return T1(t);
  } else return n instanceof Ch ? n : T1(n);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function yB(n) {
  return new Sx(n);
}
function bB(n) {
  return new vx(n);
}
function xB() {
  return new $x();
}
function wB(n) {
  return new kx(n);
}
const CB = Object.freeze(Object.defineProperty({ __proto__: null, maxNorm: yB, minMaxNorm: wB, nonNeg: xB, unitNorm: bB }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function IB() {
  return new fx();
}
function SB() {
  return new cm();
}
function vB(n) {
  return new mx(n);
}
function $B(n) {
  return new gx(n);
}
function kB(n) {
  return new yx(n);
}
function NB(n) {
  return new bx(n);
}
function TB(n) {
  return new xx(n);
}
function RB(n) {
  return new Kn(n);
}
function _B(n) {
  return new dm(n);
}
function EB(n) {
  return new hm(n);
}
function DB(n) {
  return new pm(n);
}
function AB(n) {
  return new fm(n);
}
function FB(n) {
  return new mm(n);
}
function OB(n) {
  return new gm(n);
}
function PB(n) {
  return new wx(n);
}
const LB = Object.freeze(Object.defineProperty({ __proto__: null, constant: vB, glorotNormal: EB, glorotUniform: _B, heNormal: DB, heUniform: AB, identity: TB, leCunNormal: FB, leCunUniform: OB, ones: SB, orthogonal: PB, randomNormal: kB, randomUniform: $B, truncatedNormal: NB, varianceScaling: RB, zeros: IB }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
async function aa(n) {
  if (n == null) return;
  const e = [], t = [], s = [];
  for (const r in n) {
    const a = n[r];
    if (typeof a != "number") {
      const o = a;
      e.push(o.data()), t.push(r), s.push(o);
    }
  }
  if (e.length > 0) {
    const r = await Promise.all(e);
    for (let a = 0; a < r.length; ++a) n[t[a]] = r[a][0];
    Me(s);
  }
}
function Ov(n) {
  if (n != null) for (const e in n) {
    const t = n[e];
    typeof t != "number" && t.dispose();
  }
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
var R1;
(function(n) {
  n[n.SILENT = 0] = "SILENT", n[n.VERBOSE = 1] = "VERBOSE";
})(R1 || (R1 = {}));
const zB = 125;
class _l {
  constructor() {
    this.validationData = null;
  }
  setParams(e) {
    this.params = e;
  }
  async onEpochBegin(e, t) {
  }
  async onEpochEnd(e, t) {
  }
  async onBatchBegin(e, t) {
  }
  async onBatchEnd(e, t) {
  }
  async onTrainBegin(e) {
  }
  async onTrainEnd(e) {
  }
  setModel(e) {
  }
}
class Pv {
  constructor(e, t = 10) {
    e == null && (e = []), this.callbacks = e, this.queueLength = t;
  }
  append(e) {
    this.callbacks.push(e);
  }
  setParams(e) {
    for (const t of this.callbacks) t.setParams(e);
  }
  setModel(e) {
    for (const t of this.callbacks) t.setModel(e);
  }
  async onEpochBegin(e, t) {
    t == null && (t = {});
    for (const s of this.callbacks) await s.onEpochBegin(e, t);
  }
  async onEpochEnd(e, t) {
    t == null && (t = {});
    for (const s of this.callbacks) await s.onEpochEnd(e, t);
  }
  async onBatchBegin(e, t) {
    t == null && (t = {});
    for (const s of this.callbacks) await s.onBatchBegin(e, t);
  }
  async onBatchEnd(e, t) {
    t == null && (t = {});
    for (const s of this.callbacks) await s.onBatchEnd(e, t);
  }
  async onTrainBegin(e) {
    e == null && (e = {});
    for (const t of this.callbacks) await t.onTrainBegin(e);
  }
  async onTrainEnd(e) {
    e == null && (e = {});
    for (const t of this.callbacks) await t.onTrainEnd(e);
  }
}
class MB extends _l {
  constructor() {
    super();
  }
  async onEpochBegin(e) {
    this.seen = 0, this.totals = {};
  }
  async onBatchEnd(e, t) {
    t == null && (t = {});
    const s = t.size == null ? 0 : t.size;
    this.seen += s;
    for (const r in t) {
      const a = t[r];
      if (typeof a == "number") this.totals.hasOwnProperty(r) || (this.totals[r] = 0), this.totals[r] = this.totals[r] + a * s;
      else {
        let o;
        r in this.totals ? o = this.totals[r] : this.totals[r] = 0;
        const i = H(() => te(this.totals[r], z(a, s)));
        this.totals[r] = i, o == null ? void 0 : o.dispose();
      }
    }
  }
  async onEpochEnd(e, t) {
    if (t != null) for (const s of this.params.metrics) this.totals[s] != null && (typeof this.totals[s] == "number" ? t[s] = this.totals[s] / this.seen : H(() => {
      const r = z(ve(1, this.seen), this.totals[s]);
      t[s] = r, this.totals[s].dispose(), Qt(t[s]);
    }));
  }
}
class Lv extends _l {
  async onTrainBegin(e) {
    this.epoch = [], this.history = {};
  }
  async onEpochEnd(e, t) {
    t == null && (t = {}), this.epoch.push(e);
    for (const s in t) this.history[s] == null && (this.history[s] = []), this.history[s].push(t[s]);
  }
  async syncData() {
    const e = [], t = [], s = [];
    for (const a in this.history) {
      const o = this.history[a];
      for (let i = 0; i < o.length; ++i) if (typeof o[i] != "number") {
        const u = o[i];
        e.push(u.data()), t.push(a), s.push(i);
      }
    }
    const r = await Promise.all(e);
    for (let a = 0; a < r.length; ++a) this.history[t[a]][s[a]].dispose(), this.history[t[a]][s[a]] = r[a][0];
  }
}
class zv extends _l {
  constructor(e, t) {
    if (super(), this.currentEpoch = 0, this.nowFunc = e.nowFunc, this.nextFrameFunc = e.nextFrameFunc || Kb, this.yieldEvery = t || "auto", this.yieldEvery === "auto" && (this.yieldEvery = zB), this.yieldEvery === "never" && e.onYield != null) throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
    Tp(this.yieldEvery) && (this.maybeWait = PM(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = e.onTrainBegin, this.trainEnd = e.onTrainEnd, this.epochBegin = e.onEpochBegin, this.epochEnd = e.onEpochEnd, this.batchBegin = e.onBatchBegin, this.batchEnd = e.onBatchEnd, this.yield = e.onYield;
  }
  async maybeWait(e, t, s) {
    const r = [];
    this.yield != null && (await aa(s), r.push(this.yield(e, t, s))), r.push(this.nextFrameFunc()), await Promise.all(r);
  }
  async onEpochBegin(e, t) {
    this.currentEpoch = e, this.epochBegin != null && (await aa(t), await this.epochBegin(e, t));
  }
  async onEpochEnd(e, t) {
    const s = [];
    this.epochEnd != null && (await aa(t), s.push(this.epochEnd(e, t))), this.yieldEvery === "epoch" && s.push(this.nextFrameFunc()), await Promise.all(s);
  }
  async onBatchBegin(e, t) {
    this.batchBegin != null && (await aa(t), await this.batchBegin(e, t));
  }
  async onBatchEnd(e, t) {
    const s = [];
    this.batchEnd != null && (await aa(t), s.push(this.batchEnd(e, t))), this.yieldEvery === "batch" ? s.push(this.nextFrameFunc()) : Tp(this.yieldEvery) && s.push(this.maybeWait(this.currentEpoch, e, t)), await Promise.all(s);
  }
  async onTrainBegin(e) {
    this.trainBegin != null && (await aa(e), await this.trainBegin(e));
  }
  async onTrainEnd(e) {
    this.trainEnd != null && (await aa(e), await this.trainEnd(e));
  }
}
function Mv(n, e) {
  return n == null && (n = {}), n instanceof _l ? [n] : Array.isArray(n) && n[0] instanceof _l ? n : pt(n).map((s) => new zv(s, e));
}
class ms {
  constructor() {
  }
  static registerCallbackConstructor(e, t) {
    $(e >= 0 && Number.isInteger(e), () => `Verbosity level is expected to be an integer >= 0, but got ${e}`), ms.checkForDuplicate(t), ms.constructors[e] == null && (ms.constructors[e] = []), ms.constructors[e].push(t);
  }
  static checkForDuplicate(e) {
    for (const t in ms.constructors) ms.constructors[+t].forEach((r) => {
      if (r === e) throw new W("Duplicate callback constructor.");
    });
  }
  static clear() {
    ms.constructors = {};
  }
  static createCallbacks(e) {
    const t = [];
    for (const s in ms.constructors) {
      const r = +s;
      e >= r && t.push(...ms.constructors[r]);
    }
    return t.map((s) => new s());
  }
}
ms.constructors = {};
function Bv(n, e, t, s, r, a, o, i, u) {
  const c = new Lv(), l = [new MB(), ...ms.createCallbacks(e)];
  n != null && l.push(...n), l.push(c);
  const d = new Pv(l);
  return d.setParams({ epochs: t, initialEpoch: s, samples: r, steps: a, batchSize: o, verbose: e, doValidation: i, metrics: u }), { callbackList: d, history: c };
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function Xs(n, e = {}, t = false) {
  return yh(n, ys.getMap().classNameMap, e, "layer", t);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function zp(n, e) {
  return H(() => {
    n.dtype !== "float32" && (n = ue(n, "float32"));
    const t = we(xh(n), e, true), s = Xu(t.shape, Zt()), r = ln(Sr(t, s));
    return ve(n, r);
  });
}
function el(n, e) {
  return H(() => Et(xh(xe(e, n)), -1));
}
function bm(n, e) {
  return H(() => Et(Vt(xe(e, n)), -1));
}
function fc(n, e) {
  return H(() => {
    const t = xe(n, e), s = jn(Vt(n), Zt(), Number.MAX_VALUE), r = Vt(ve(t, s));
    return z(100, Et(r, -1));
  });
}
function BB(n, e) {
  return H(() => {
    const t = jn(e, Zt(), Number.MAX_VALUE), s = as(te(1, t)), r = jn(n, Zt(), Number.MAX_VALUE), a = as(te(1, r));
    return Et(xh(xe(s, a)), -1);
  });
}
function WB(n, e) {
  return H(() => {
    const t = Sr(0, xe(1, z(n, e)));
    return Et(xh(t), -1);
  });
}
function VB(n, e) {
  return H(() => {
    const t = Sr(0, xe(1, z(n, e)));
    return Et(t, -1);
  });
}
function UB(n, e) {
  return H(() => {
    const t = we(z(n, e), -1), s = Is(z(xe(1, n), e), -1);
    return Sr(0, te(1, xe(s, t)));
  });
}
function GB(n, e) {
  return H(() => {
    const t = Math.log(2), s = xe(e, n), r = xe(te(s, Yu(z(-2, s))), t);
    return Et(r, -1);
  });
}
function cd(n, e, t = false) {
  return H(() => {
    if (t) e = nh(e);
    else {
      const s = we(e, e.shape.length - 1, true);
      e = ve(e, s);
    }
    return e = jn(e, Zt(), 1 - Zt()), St(we(z(ue(n, "float32"), as(e)), e.shape.length - 1));
  });
}
function Mp(n, e, t = false) {
  return H(() => {
    const s = ue(ic(KM(n)), "int32");
    e = jn(e, Zt(), 1 - Zt());
    const r = e.shape, a = B($l(s, r[r.length - 1]), r);
    return cd(a, e, t);
  });
}
function HB(n, e) {
  if (!Be(n.shape, e.shape)) throw new W(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(e.shape)}`);
  return H(() => {
    const t = ar(e), s = St(Vt(e));
    return te(xe(t, z(e, n)), qd(qn(s)));
  });
}
function xm(n, e) {
  return H(() => {
    let t;
    return t = jn(e, Zt(), 1 - Zt()), t = as(ve(t, xe(1, t))), Et(HB(n, t), -1);
  });
}
function jB(n, e) {
  return H(() => {
    const t = jn(n, Zt(), 1), s = jn(e, Zt(), 1);
    return we(z(n, as(ve(t, s))), -1);
  });
}
function qB(n, e) {
  return H(() => {
    const t = as(te(Zt(), e));
    return Et(xe(e, z(n, t)), -1);
  });
}
function Nx(n, e) {
  return H(() => {
    const t = zp(n, -1), s = zp(e, -1), r = z(t, s);
    return St(we(r, -1));
  });
}
const Bp = { meanSquaredError: el, meanAbsoluteError: bm, meanAbsolutePercentageError: fc, meanSquaredLogarithmicError: BB, squaredHinge: WB, hinge: VB, categoricalHinge: UB, logcosh: GB, categoricalCrossentropy: cd, sparseCategoricalCrossentropy: Mp, binaryCrossentropy: xm, kullbackLeiblerDivergence: jB, poisson: qB, cosineProximity: Nx };
function ng(n) {
  if (typeof n == "string") {
    if (n in Bp) return Bp[n];
    let e = `Unknown loss ${n}`;
    throw n.toLowerCase().includes("softmaxcrossentropy") && (e = `Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new W(e);
  } else return n;
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function Tx(n, e) {
  return H(() => {
    const t = z(0.5, os(e)), s = gr(On(e, t), n.dtype);
    return Et(rs(n, s), -1);
  });
}
function Rx(n, e) {
  return H(() => gr(rs(Fi(n, -1), Fi(e, -1)), "float32"));
}
function Wv(n, e) {
  return H(() => ue(we(Ps(rs(n, 1), rs(e, 1))), "float32"));
}
function KB(n, e) {
  return H(() => ue(we(Ps(rs(n, 1), rs(e, 0))), "float32"));
}
function XB(n, e) {
  return H(() => ue(we(Ps(rs(n, 0), rs(e, 1))), "float32"));
}
function Vv(n, e) {
  return H(() => {
    const t = Wv(n, e), s = XB(n, e), r = te(t, s);
    return ue(on(On(r, 0), ve(t, r), 0), "float32");
  });
}
function YB(n, e) {
  return H(() => {
    const t = Wv(n, e), s = KB(n, e), r = te(t, s);
    return ue(on(On(r, 0), ve(t, r), 0), "float32");
  });
}
function Uv(n, e) {
  return xm(n, e);
}
function Gv(n, e) {
  return n.rank === e.rank && (n = ei(n, [n.rank - 1])), e = Fi(e, -1), e.dtype !== n.dtype && (e = ue(e, n.dtype)), ue(rs(n, e), "float32");
}
function QB(n, e) {
  return H(() => {
    const t = n.sub(e).square().sum(), s = n.sub(n.mean()).square().sum();
    return Ne(1).sub(t.div(s));
  });
}
const ZB = el, JB = el, eW = bm, tW = bm, nW = fc, sW = fc, _x = cd, rW = Nx, Hv = Mp, Wp = { binaryAccuracy: Tx, categoricalAccuracy: Rx, precision: Vv, categoricalCrossentropy: _x, sparseCategoricalCrossentropy: Hv, mse: ZB, MSE: JB, mae: eW, MAE: tW, mape: nW, MAPE: sW, cosine: rW };
function aW(n) {
  if (typeof n == "string" && n in Wp) return Wp[n];
  if (typeof n != "string" && n != null) return n;
  throw new W(`Unknown metric ${n}`);
}
function ep(n) {
  if (dr(n !== null, `Unknown LossOrMetricFn ${n}`), typeof n == "string") return n;
  {
    let e;
    for (const t of Object.keys(Bp)) if (Bp[t] === n) {
      e = t;
      break;
    }
    if (e !== void 0) return e;
    for (const t of Object.keys(Wp)) if (Wp[t] === n) {
      e = t;
      break;
    }
    return e !== void 0 ? e : n.name;
  }
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function oW(n) {
  const e = { Adagrad: () => hi.adagrad(0.01), Adadelta: () => hi.adadelta(1, 0.95, Zt()), Adam: () => hi.adam(1e-3, 0.9, 0.999, Zt()), Adamax: () => hi.adamax(2e-3, 0.9, 0.999, Zt(), 0), RMSProp: () => hi.rmsprop(1e-3, 0.9, 0, Zt()), SGD: () => hi.sgd(0.01) };
  if (e.adagrad = e.Adagrad, e.adadelta = e.Adadelta, e.adam = e.Adam, e.adamax = e.Adamax, e.rmsprop = e.RMSProp, e.sgd = e.SGD, n in e) return e[n]();
  throw new W(`Unknown Optimizer ${n}`);
}
/**
* @license
* Copyright 2019 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
const _1 = 1 * 1024 * 1024;
function E1(n, e, t = false) {
  if (n == null || typeof n != "object" || Object.getPrototypeOf(n) !== Object.prototype || !Mg(n)) throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (t) {
    const s = JSON.stringify(n);
    s.length > _1 && console.warn(`User-defined metadata of model "${e}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${_1}.`);
  }
}
function Mg(n) {
  if (n === null) return true;
  if (typeof n == "object") if (Object.getPrototypeOf(n) === Object.prototype) {
    const e = Object.keys(n);
    for (const t of e) if (typeof t != "string" || !Mg(n[t])) return false;
    return true;
  } else if (Array.isArray(n)) {
    for (const e of n) if (!Mg(e)) return false;
    return true;
  } else return false;
  else {
    const e = typeof n;
    return e === "string" || e === "number" || e === "boolean";
  }
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function iW(n, e, t, s = console.log) {
  const r = lW(n), a = ["Layer (type)", "Input Shape", "Output shape", "Param #"];
  r ? (e = e || 90, t = t || [0.32, 0.61, 0.89, 1]) : (e = e || 115, t = t || [0.24, 0.48, 0.7, 0.8, 1]), t[t.length - 1] <= 1 && (t = t.map((l) => Math.floor(e * l)));
  let o;
  if (!r) {
    a.push("Receives inputs"), o = [];
    for (const l in n.nodesByDepth) o.push(...n.nodesByDepth[l]);
  }
  s("_".repeat(e)), Vp(a, t, s), s("=".repeat(e));
  const i = n.layers;
  for (let l = 0; l < i.length; ++l) r ? cW(i[l], t, s) : dW(i[l], t, o, s), s((l === i.length - 1 ? "=" : "_").repeat(e));
  n.checkTrainableWeightsConsistency();
  const u = uW(n), c = Op(n.nonTrainableWeights);
  s(`Total params: ${u + c}`), s(`Trainable params: ${u}`), s(`Non-trainable params: ${c}`), s("_".repeat(e));
}
function uW(n) {
  let e;
  return n.collectedTrainableWeights != null ? e = Op(n.collectedTrainableWeights) : e = Op(n.trainableWeights), e;
}
function lW(n) {
  let e = true;
  const t = [], s = [];
  for (const r in n.nodesByDepth) t.push(n.nodesByDepth[r]);
  for (const r of t) {
    if (r.length > 1 || r.length === 1 && r[0].inboundLayers.length > 1) {
      e = false;
      break;
    }
    s.push(...r);
  }
  if (e) for (const r of n.layers) {
    let a = false;
    for (const o of r.inboundNodes) if (s.indexOf(o) !== -1) if (a) {
      e = false;
      break;
    } else a = true;
    if (!e) break;
  }
  return e;
}
function Vp(n, e, t = console.log) {
  let s = "";
  for (let r = 0; r < n.length; ++r) r > 0 && (s = s.slice(0, s.length - 1) + " "), s += n[r], s = s.slice(0, e[r]), s += " ".repeat(e[r] - s.length);
  t(s);
}
function cW(n, e, t) {
  let s, r;
  try {
    r = n.inboundNodes.map((u) => JSON.stringify(u.inputShapes)).join(",");
  } catch {
    r = "multiple";
  }
  try {
    s = JSON.stringify(n.outputShape);
  } catch {
    s = "multiple";
  }
  const a = n.name, o = n.getClassName(), i = [`${a} (${o})`, r, s, n.countParams().toString()];
  Vp(i, e, t);
}
function dW(n, e, t, s) {
  let r, a;
  try {
    a = n.inboundNodes.map((d) => JSON.stringify(d.inputShapes)).join(",");
  } catch {
    a = "multiple";
  }
  try {
    r = JSON.stringify(n.outputShape);
  } catch {
    r = "multiple";
  }
  const o = [];
  for (const d of n.inboundNodes) if (!(t != null && t.length > 0 && t.indexOf(d) === -1)) for (let h = 0; h < d.inboundLayers.length; ++h) {
    const p = d.inboundLayers[h].name, f = d.nodeIndices[h], m = d.tensorIndices[h];
    o.push(`${p}[${f}][${m}]`);
  }
  const i = n.name, u = n.getClassName(), c = o.length === 0 ? "" : o[0], l = [`${i} (${u})`, a, r, n.countParams().toString(), c];
  Vp(l, e, s);
  for (let d = 1; d < o.length; ++d) Vp(["", "", "", "", o[d]], e, s);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function jv(n, e, t) {
  return (n === "inboundNodes" || n === "outputLayers" || n === "inputLayers") && e === 0 && typeof t == "string";
}
function dd(n, e) {
  if (n === null) return null;
  if (typeof n == "string") return gi(n);
  if (typeof n == "number" || typeof n == "boolean") return n;
  if (n instanceof Array) {
    const t = [], s = n.length;
    for (let r = 0; r < s; ++r) {
      const a = n[r];
      jv(e, r, a) ? t.push(a) : t.push(dd(a, e));
    }
    return t;
  } else {
    const t = {};
    for (const s of Object.keys(n)) {
      const r = n[s];
      if (s === "name" && typeof r == "string") t[s] = r;
      else {
        const a = gi(s);
        t[a] = dd(r, a);
      }
    }
    return t;
  }
}
function Bg(n, e) {
  if (n == null) return null;
  if (typeof n == "string") return Rr(n);
  if (typeof n == "number" || typeof n == "boolean") return n;
  if (n instanceof Array) {
    const t = [], s = n.length;
    for (let r = 0; r < s; ++r) {
      const a = n[r];
      jv(e, r, a) ? t.push(a) : t.push(Bg(a, e));
    }
    return t;
  } else {
    const t = {};
    for (const s of Object.keys(n)) {
      const r = n[s], a = Rr(s);
      (s === "name" || s === "className") && typeof r == "string" ? t[a] = r : t[a] = Bg(r, s);
    }
    return t;
  }
}
/** @license See the LICENSE file. */
const wm = "4.22.0";
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
const hW = (n) => {
  const e = Object.keys(n);
  if (e.length === 0) return false;
  const t = e[0].split("/");
  return !isNaN(parseInt(t[t.length - 1], 10));
};
class Vs extends qe {
  constructor(e) {
    if (super({}), this.containerNodes = /* @__PURE__ */ new Set(), this.name = e.name, this.name == null) {
      const b = this.getClassName().toLowerCase();
      this.name = um(b);
    }
    if (this.supportsMasking = false, this.trainable_ = true, Array.isArray(e.inputs) ? this.inputs = e.inputs.slice() : this.inputs = [e.inputs], Array.isArray(e.outputs) ? this.outputs = e.outputs.slice() : this.outputs = [e.outputs], fa(this.inputs).length !== this.inputs.length) throw new W(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((b) => b.name)}`);
    fa(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((b) => b.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
    for (const b of this.outputs) {
      const x = b.sourceLayer, w = b.nodeIndex, C = b.tensorIndex;
      this.outputLayers.push(x), this.outputLayersNodeIndices.push(w), this.outputLayersTensorIndices.push(C);
    }
    for (const b of this.inputs) {
      const x = b.sourceLayer, w = b.nodeIndex, C = b.tensorIndex;
      dr(w === 0, "input layer has >1 nodes"), dr(C === 0, "input layer has >1 tensors"), this.inputLayers.push(x), this.inputLayersNodeIndices.push(w), this.inputLayersTensorIndices.push(C);
    }
    this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
    for (let b = 0; b < this.inputLayers.length; b++) {
      const x = this.inputLayers[b];
      if (!(x instanceof pc)) throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${b} (0-based) originates from layer type ${x.getClassName()}.`);
      this.inputNames.push(x.name), this.feedInputShapes.push(x.batchInputShape), this.feedInputNames.push(x.name);
    }
    for (const b of this.outputLayers) this.outputNames.push(b.name);
    this.internalInputShapes = this.inputs.map((b) => b.shape), this.internalOutputShapes = this.outputs.map((b) => b.shape);
    const t = {}, s = {}, r = {}, a = {}, o = {}, i = [], u = (b, x, w, C, v, k) => {
      (C == null || v == null || k == null) && (C = b.sourceLayer, v = b.nodeIndex, k = b.tensorIndex);
      const R = C.inboundNodes[v];
      if (w.indexOf(R) !== -1) throw new As(`The tensor ${b.name} at layer "${C.name}" is part of a cycle.`);
      if (x.indexOf(R) !== -1) return;
      this.containerNodes.add(Vs.nodeKey(C, v)), C.id in o || (o[C.id] = Object.keys(o).length), w.indexOf(R) === -1 && w.push(R);
      const N = R.inboundLayers.length;
      for (let T = 0; T < N; T++) {
        const S = R.inputTensors[T], E = R.inboundLayers[T], P = R.nodeIndices[T], M = R.tensorIndices[T];
        u(S, x, w, E, P, M);
      }
      for (x.push(R); w.indexOf(R) >= 0; ) w.splice(w.indexOf(R), 1);
      i.push(R);
    }, c = [], l = [];
    for (const b of this.outputs) u(b, c, l);
    const d = i.slice().reverse();
    for (const b of d) {
      s[b.id] = b, b.id in t || (t[b.id] = 0);
      let x = t[b.id];
      const w = r[b.outboundLayer.id] == null ? 0 : r[b.outboundLayer.id];
      x = Math.max(x, w), r[b.outboundLayer.id] = x, a[b.outboundLayer.id] = b.outboundLayer, t[b.id] = x;
      for (let C = 0; C < b.inboundLayers.length; C++) {
        const v = b.inboundLayers[C], k = b.nodeIndices[C], R = v.inboundNodes[k], N = t[R.id] == null ? 0 : t[R.id];
        t[R.id] = Math.max(x + 1, N), s[R.id] = R;
      }
    }
    const h = {};
    for (const b in t) {
      const x = t[b];
      x in h || (h[x] = []), h[x].push(s[b]);
    }
    const p = {};
    for (const b in r) {
      const x = r[b];
      x in p || (p[x] = []), p[x].push(a[b]);
    }
    let f = Object.keys(p).map((b) => parseInt(b, 10)).sort(Qh);
    this.layers = [];
    for (const b of f) {
      const x = p[b];
      x.sort((w, C) => {
        const v = o[w.id], k = o[C.id];
        return v < k ? -1 : v > k ? 1 : 0;
      });
      for (const w of x) w instanceof Vs && this.internalContainerRefs.push(w), this.layers.push(w);
    }
    this.layersByDepth = p, f = Object.keys(h).map((b) => parseInt(b, 10)).sort(Qh);
    const m = this.inputs.slice(), g = [];
    for (const b of f) for (const x of h[b]) {
      const w = x.outboundLayer;
      if (w != null) {
        for (const C of x.inputTensors) if (m.indexOf(C) === -1) throw new As(`Graph disconnected: cannot obtain value for tensor ${C} at layer "${w.name}". The following previous layers were accessed without issue: ${g}`);
        for (const C of x.outputTensors) m.push(C);
        g.push(w.name);
      }
    }
    this.nodesByDepth = h;
    const y = this.layers.map((b) => b.name);
    for (const b of y) {
      const x = y.filter((w) => w === b).length;
      if (x !== 1) throw new As(`The name "${b}" is used ${x} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(y));
    }
    this.outboundNodes = [], this.inboundNodes = [], new ym({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: this.inputs.map((b) => null), outputMasks: this.outputs.map((b) => null), inputShapes: this.inputs.map((b) => b.shape), outputShapes: this.outputs.map((b) => b.shape) }), this.built = true, this._refCount = 1;
  }
  assertNotDisposed() {
    if (this._refCount === 0) throw new Error(`Container '${this.name}' is already disposed.`);
  }
  dispose() {
    this.assertNotDisposed();
    const e = { refCountAfterDispose: null, numDisposedVariables: 0 };
    if (--this._refCount === 0) {
      for (const t of this.layers) e.numDisposedVariables += t.dispose().numDisposedVariables;
      for (const t of this.internalContainerRefs) e.numDisposedVariables += t.dispose().numDisposedVariables;
    }
    return e.refCountAfterDispose = this._refCount, e;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this.layers.forEach((t) => {
      t._trainableWeights.forEach((s) => s.trainable = e);
    }), this.trainable_ = e;
  }
  get trainableWeights() {
    if (this._trainableWeights.length > 0) throw new W("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
    if (!this.trainable) return [];
    let e = [];
    for (const t of this.layers) e = e.concat(t.trainableWeights);
    return e;
  }
  get nonTrainableWeights() {
    const e = [];
    for (const t of this.layers) e.push(...t.nonTrainableWeights);
    if (!this.trainable) {
      const t = [];
      for (const s of this.layers) t.push(...s.trainableWeights);
      return t.concat(e);
    }
    return e;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  loadWeights(e, t = true) {
    const s = {};
    let r = 0;
    const a = hW(e);
    a && this.parseWeights(e);
    for (const i of this.layers) for (const [u, c] of i.weights.entries()) {
      const l = a ? `${c.name.split("/").slice(0, -1).join("/") + "/"}${u}` : c.originalName;
      if (s[l] != null) throw new W(`Duplicate weight name: ${l}`);
      s[l] = c, r++;
    }
    const o = [];
    for (const i in e) {
      let u = i;
      if (s[i] == null) {
        const c = i.split("/");
        u = c.slice(0, -2).concat([c[c.length - 1]]).join("/");
      }
      if (s[u] != null) o.push([s[u], e[i]]);
      else if (t) throw new W(`Provided weight data has no target variable: ${i}`);
      delete s[u];
    }
    if (t) {
      const i = [];
      for (const u in s) i.push(u);
      if (i.length > 0) throw new W(`${i.length} of ${r} weights are not set: ${i}`);
    }
    Cx(o);
  }
  parseWeights(e) {
    for (const t in Object.keys(e)) {
      const s = t.split("/"), r = ["vars", "layer_checkpoint_dependencies"], a = s.map((o) => o.startsWith("_") ? o.slice(1) : o).filter((o) => !r.includes(o)).join("/");
      a !== t && (e[a] = e[t], delete e[t]);
    }
  }
  updatedConfig() {
    const e = this.getConfig(), t = {};
    return t.className = this.getClassName(), t.config = e, t.kerasVersion = `tfjs-layers ${wm}`, t.backend = "TensorFlow.js", t;
  }
  toJSON(e, t = true) {
    const s = Bg(this.updatedConfig());
    return t ? JSON.stringify(s) : s;
  }
  call(e, t) {
    return H(() => {
      e = pt(e);
      const s = new la();
      for (let r = 0; r < this.inputs.length; ++r) s.add(this.inputs[r], e[r]);
      return Bc(this.outputs, s, t);
    });
  }
  computeMask(e, t) {
    return H(() => {
      e = pt(e);
      let s;
      return t == null ? s = Mi(null, e.length) : s = pt(t), this.runInternalGraph(e, s)[1];
    });
  }
  computeOutputShape(e) {
    const t = Fp(e);
    if (t.length !== this.inputLayers.length) throw new W(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);
    const s = {};
    for (let i = 0; i < t.length; i++) {
      const u = this.inputLayers[i], c = t[i], l = u.name + "_0_0";
      s[l] = c;
    }
    const r = Object.keys(this.nodesByDepth).map((i) => parseInt(i, 10)).sort(Qh);
    if (r.length > 1) for (const i of r) {
      const u = this.nodesByDepth[i];
      for (const c of u) {
        const l = c.outboundLayer;
        if (this.inputLayers.map((m) => m.id).indexOf(l.id) !== -1) continue;
        const d = [];
        for (let m = 0; m < c.inboundLayers.length; m++) {
          const g = c.inboundLayers[m], y = c.nodeIndices[m], b = c.tensorIndices[m], x = `${g.name}_${y}_${b}`, w = s[x];
          d.push(w);
        }
        const h = l.computeOutputShape(Mn(d)), p = Fp(h), f = l.inboundNodes.indexOf(c);
        for (let m = 0; m < p.length; m++) {
          const g = `${l.name}_${f}_${m}`;
          s[g] = p[m];
        }
      }
    }
    const a = [], o = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      const u = this.outputLayers[i], c = this.outputLayersNodeIndices[i], l = this.outputLayersTensorIndices[i], d = `${u.name}_${c}_${l}`;
      o.push(d);
    }
    for (let i = 0; i < o.length; i++) {
      const u = o[i];
      dr(u in s), a.push(s[u]);
    }
    return Mn(a);
  }
  runInternalGraph(e, t) {
    t == null && (t = Mi(null, e.length));
    const s = {};
    for (let u = 0; u < this.inputs.length; ++u) {
      const c = this.inputs[u], l = e[u], d = t[u];
      s[c.id] = [l, d];
    }
    const r = Object.keys(this.nodesByDepth).map((u) => parseInt(u, 10)).sort(Qh);
    for (const u of r) {
      const c = this.nodesByDepth[u];
      for (const l of c) {
        const d = l.outboundLayer, h = l.inputTensors, p = l.outputTensors, f = new Array();
        for (const m of h) m.id in s && f.push(s[m.id]);
        if (f.length === h.length) {
          let m = {}, g, y, b, x;
          if (l.callArgs != null && (m = l.callArgs), f.length === 1) {
            const [w, C] = f[0];
            m.mask == null && (m.mask = C), b = pt(d.call(w, m)), x = pt(d.computeMask(w, C)), g = [w], y = [C];
          } else g = f.map((w) => w[0]), y = f.map((w) => w[1]), m.mask == null && (m.mask = y), b = pt(d.call(g, m)), x = pt(d.computeMask(g, y));
          if (d.activityRegularizer) throw new Ge("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
          for (let w = 0; w < p.length; ++w) {
            const C = p[w], v = b[w], k = x[w];
            s[C.id] = [v, k];
          }
        }
      }
    }
    const a = [], o = [], i = [];
    for (const u of this.outputs) {
      dr(u.id in s, `Could not compute output ${u.name} : ${u.id}`);
      const [c, l] = s[u.id];
      i.push(c.shape), a.push(c), o.push(l);
    }
    return [a, o, i];
  }
  buildNodeConversionMap(e) {
    const t = {};
    let s;
    for (const r of this.layers) {
      s = r instanceof Vs ? 1 : 0;
      for (let a = 0; a < r.inboundNodes.length; a++) {
        const o = Vs.nodeKey(r, a);
        this.containerNodes.has(o) && (t[o] = s, s += 1);
      }
    }
    return t;
  }
  getLayer(e, t) {
    if (t != null) return this.findLayer(t);
    if (e == null) throw new W("Provide either a layer name or layer index");
    if (typeof e == "number") return this.findLayer(e);
    for (const s of this.layers) if (s.name === e) return s;
    throw new W(`No such layer: ${e}`);
  }
  findLayer(e) {
    if (this.layers.length <= e) throw new W(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);
    return this.layers[e];
  }
  calculateLosses() {
    return H(() => {
      const e = [];
      for (const t of this.layers) for (let s = 0; s < t.inboundNodes.length; ++s) {
        const r = Vs.nodeKey(t, s);
        this.containerNodes.has(r) && e.push(...t.calculateLosses());
      }
      return e;
    });
  }
  getConfig() {
    const e = { name: this.name }, t = this.buildNodeConversionMap(this.layers), s = [];
    for (const o of this.layers) {
      const i = o.getClassName(), u = o.getConfig(), c = [];
      for (let d = 0; d < o.inboundNodes.length; d++) {
        const h = o.inboundNodes[d], p = Vs.nodeKey(o, d);
        let f = {};
        if (this.containerNodes.has(p)) {
          if (h.callArgs) try {
            JSON.stringify(h.callArgs), f = h.callArgs;
          } catch {
            console.warn(`Layer ${o.name} was passed non-serializable keyword arguments: ${h.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), f = {};
          }
          if (h.inboundLayers.length > 0) {
            const m = [];
            for (let g = 0; g < h.inboundLayers.length; g++) {
              const y = h.inboundLayers[g], b = h.nodeIndices[g], x = h.tensorIndices[g], w = Vs.nodeKey(y, b);
              let C = t[w];
              C == null && (C = 0), m.push([y.name, C, x, f]);
            }
            c.push(m);
          }
        }
      }
      const l = {};
      l.name = o.name, l.className = i, l.config = u, l.inboundNodes = c, s.push(l);
    }
    e.layers = s;
    const r = [];
    for (let o = 0; o < this.inputLayers.length; o++) {
      const i = this.inputLayers[o], u = this.inputLayersNodeIndices[o], c = Vs.nodeKey(i, u);
      if (!this.containerNodes.has(c)) continue;
      let l = t[c];
      l == null && (l = 0);
      const d = this.inputLayersTensorIndices[o];
      r.push([i.name, l, d]);
    }
    e.inputLayers = r;
    const a = [];
    for (let o = 0; o < this.outputLayers.length; o++) {
      const i = this.outputLayers[o], u = this.outputLayersNodeIndices[o], c = Vs.nodeKey(i, u);
      if (!this.containerNodes.has(c)) continue;
      let l = t[c];
      l == null && (l = 0);
      const d = this.outputLayersTensorIndices[o];
      a.push([i.name, l, d]);
    }
    return e.outputLayers = a, e;
  }
  static fromConfig(e, t, s = {}, r = false) {
    const a = {}, o = {};
    function i(g, y) {
      g.name in o ? o[g.name].push(y) : o[g.name] = [y];
    }
    function u(g, y) {
      const b = [];
      let x;
      for (const w of y) {
        const C = w[0], v = w[1], k = w[2];
        if (x = w[3] == null ? {} : w[3], !(C in a)) {
          i(g, y);
          return;
        }
        const R = a[C];
        if (R.inboundNodes.length <= v) {
          i(g, y);
          return;
        }
        const N = R.inboundNodes[v];
        b.push(N.outputTensors[k]);
      }
      b.length > 0 && g.apply(Mn(b), x);
    }
    function c(g) {
      const y = g.name, b = Xs(g, t.customObjects != null ? t.customObjects : {});
      b.setFastWeightInitDuringBuild(r), a[y] = b, g.inboundNodes.forEach((w) => {
        if (!(w instanceof Array)) throw new W(`Corrupted configuration, expected array for nodeData: ${w}`);
        i(b, w);
      });
    }
    const l = t.name, d = t.layers;
    for (const g of d) c(g);
    for (; !OM(o); ) for (const g of d) {
      const y = a[g.name];
      if (y.name in o) {
        const b = o[y.name];
        delete o[y.name];
        for (const x of b) u(y, x);
      }
    }
    const h = [], p = [], f = t.inputLayers;
    for (const g of f) {
      const y = g[0], b = g[1], x = g[2];
      dr(y in a);
      const C = a[y].inboundNodes[b].outputTensors;
      h.push(C[x]);
    }
    const m = t.outputLayers;
    for (const g of m) {
      const y = g[0], b = g[1], x = g[2];
      dr(y in a);
      const C = a[y].inboundNodes[b].outputTensors;
      p.push(C[x]);
    }
    return new e({ inputs: h, outputs: p, name: l });
  }
  get stateful() {
    if (this._stateful) throw new W("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
    for (const e of this.layers) if (e.stateful) return true;
    return false;
  }
  resetStates() {
    H(() => {
      this.layers.forEach((e) => {
        e.stateful && e.resetStates();
      });
    });
  }
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function pW(n, e, t) {
  const s = e.length;
  if (n == null || Array.isArray(n) && n.length === 0) return e.map((r) => null);
  if (s === 1) return Array.isArray(n) && n.length === 1 ? n : typeof n == "object" && e[0] in n ? [n[e[0]]] : [n];
  if (Array.isArray(n)) {
    if (n.length !== s) throw new Error(`Provided ${t} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);
    return n;
  } else if (typeof n == "object" && Object.keys(n).length > 0 && typeof n[Object.keys(n)[0]] == "object") {
    const r = [];
    return e.forEach((a) => {
      a in n ? r.push(n[a]) : r.push(null);
    }), r;
  } else throw new Error(`The model has multiple (${s}) outputs, so ${t} must be either an array with ${s} elements or an object with ${e} keys. Provided ${t} not understood: ${JSON.stringify(n)}`);
}
function qv(n, e) {
  return pW(n, e, "classWeight");
}
async function Kv(n, e, t, s) {
  if (t != null) {
    const r = H(() => {
      if (n.shape.length === 1) return mr(n);
      if (n.shape.length === 2) {
        if (n.shape[1] > 1) return Fi(n, 1);
        if (n.shape[1] === 1) return B(n, [n.shape[0]]);
        throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
      } else throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
    }), a = Array.from(await r.data());
    Me(r);
    const o = [];
    return a.forEach((i) => {
      if (t[i] == null) throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);
      o.push(t[i]);
    }), bn(o, "float32");
  } else return null;
}
function fW(n, e) {
  return z(n, e);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
const mW = 32;
function Xv(n, e) {
  let t, s;
  const r = e;
  t = r.xs, s = r.ys, $(t != null && s != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`);
  const a = D1("input", n.inputNames, t), o = D1("output", n.outputNames, s), i = a[0].shape[0];
  $(a.length === n.inputs.length, () => `LayersModel has ${n.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`), $(o.length === n.outputs.length, () => `LayersModel has ${n.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);
  for (let u = 0; u < a.length; u++) $(a[u].shape[0] === i, () => `Batch size mismatch: input ${n.inputNames[u]} has ${a[u].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);
  for (let u = 0; u < o.length; u++) $(o[u].shape[0] === i, () => `Batch size mismatch: output ${n.outputNames[u]} has ${o[u].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);
  return { xs: a, ys: o };
}
function D1(n, e, t) {
  if (t instanceof tt) return [t];
  if (Array.isArray(t)) return $(t.length === e.length, () => `Received an array of ${t.length} Tensors, but expected ${e.length} to match the ${n} keys ${e}.`), t;
  {
    const s = [];
    for (const r of e) {
      if (t[r] == null) throw new W(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);
      s.push(t[r]);
    }
    return s;
  }
}
function gW(n) {
  if (n.length === 3) throw new Ge("Validation with sample weights is not implemented yet.");
  return { xs: n[0], ys: n[1] };
}
async function yW(n, e, t) {
  const s = t.batchesPerEpoch != null;
  if ($(n.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), $(t != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), $(t.epochs != null && t.epochs > 0 && Number.isInteger(t.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${t.epochs}`), $(!s || t.batchesPerEpoch > 0 && Number.isInteger(t.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${t.batchesPerEpoch}`), $(t.validationSplit == null, () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."), n.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
  n.isTraining = true;
  try {
    const r = t.validationData != null;
    let a, o;
    if (r) if (A1(t.validationData)) $(t.validationBatches == null || t.validationBatches > 0 && Number.isInteger(t.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${t.validationBatches}`);
    else {
      const g = gW(t.validationData);
      a = g.xs, o = g.ys;
    }
    const i = n.makeTrainFunction(), u = n.getDedupedMetricsNames();
    let c;
    r ? c = u.slice().concat(u.map((g) => "val_" + g)) : c = u.slice();
    const l = Mv(t.callbacks, t.yieldEvery), d = t.verbose == null ? 1 : t.verbose, { callbackList: h, history: p } = Bv(l, d, t.epochs, null, null, bW(e, t), null, r, c);
    h.setModel(n), n.history = p, await h.onTrainBegin(), n.stopTraining_ = false;
    let f = t.initialEpoch == null ? 0 : t.initialEpoch, m = await e.iterator();
    for (; f < t.epochs; ) {
      const g = {};
      await h.onEpochBegin(f);
      let y = 0, b = 0;
      for (s || (m = await e.iterator()); !s || y < t.batchesPerEpoch; ) {
        const x = await m.next();
        if (s && x.done) {
          console.warn(`You provided \`batchesPerEpoch\` as ${t.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${t.batchesPerEpoch * t.epochs} batches). You may need to use the repeat() function when building your dataset.`);
          break;
        }
        if (x.value != null) {
          const { xs: w, ys: C } = Xv(n, x.value), v = {};
          v.batch = b, v.size = w[0].shape[0], await h.onBatchBegin(b, v);
          const k = [];
          if (t.classWeight != null) {
            const T = qv(t.classWeight, n.outputNames);
            for (let S = 0; S < T.length; ++S) k.push(await Kv(C[S], null, T[S]));
          }
          const R = w.concat(C).concat(k), N = i(R);
          Me(R);
          for (let T = 0; T < u.length; ++T) {
            const S = u[T], E = N[T];
            v[S] = E, Qt(E);
          }
          await h.onBatchEnd(b, v), Ov(v), b++, y++;
        }
        if (s ? y >= t.batchesPerEpoch : x.done) {
          if (r) {
            let w;
            A1(t.validationData) ? w = pt(await n.evaluateDataset(t.validationData, { batches: t.validationBatches })) : w = pt(n.evaluate(a, o, { batchSize: t.validationBatchSize == null ? mW : t.validationBatchSize, verbose: 0 }));
            for (let C = 0; C < n.metricsNames.length; ++C) g[`val_${n.metricsNames[C]}`] = w[C];
          }
          break;
        }
        if (n.stopTraining_) break;
      }
      if (await h.onEpochEnd(f, g), f++, n.stopTraining_) break;
    }
    return await h.onTrainEnd(), await n.history.syncData(), n.history;
  } finally {
    n.isTraining = false;
  }
}
function bW(n, e) {
  let t = null;
  return e.batchesPerEpoch != null ? t = e.batchesPerEpoch : Number.isFinite(n.size) && (t = n.size), t;
}
function A1(n) {
  return typeof n.iterator == "function";
}
function xW(n) {
  return typeof n.next == "function";
}
async function wW(n, e, t) {
  t = t || {};
  const s = t.batches != null, r = n.testFunction;
  let a = [];
  if (t.verbose > 0) throw new Ge("Verbose mode is not implemented yet.");
  $(!s || t.batches > 0 && Number.isInteger(t.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(t.batches)}`);
  const o = xW(e) ? e : await e.iterator();
  let i = 0, u = 0;
  for (; !s || u < t.batches; ) {
    const c = await o.next();
    if (a = H(() => {
      if (c.value) {
        const { xs: l, ys: d } = Xv(n, c.value), h = l.concat(d), p = H(() => r(h));
        if (Me(h), u === 0) for (let m = 0; m < p.length; ++m) a.push(Ne(0));
        const f = h[0].shape[0];
        for (let m = 0; m < p.length; ++m) {
          const g = p[m], y = a[m];
          a[m] = H(() => te(a[m], z(f, g))), u > 0 && Me(y);
        }
        Me(p), i += f, ++u;
      }
      return a;
    }), c.done) {
      s && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${t.batches} batches). You may need to use the repeat() function when building your dataset.`);
      break;
    }
  }
  for (let c = 0; c < a.length; ++c) {
    const l = a[c];
    a[c] = ve(a[c], i), Me(l);
  }
  return Mn(a);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function sg(n) {
  $(n > 0 && Number.isInteger(n), () => `batchSize is required to be a positive integer, but got ${n}`);
}
function Fc(n, e, t) {
  return n == null ? [null] : Array.isArray(n) ? n.map((s) => $i(s, e, t - e)) : $i(n, e, t - e);
}
function Wg(n, e) {
  return H(() => n == null ? null : Array.isArray(n) ? n.map((t) => Wg(t, e)) : _v(n, e.dtype === "int32" ? e : ue(e, "int32")));
}
function rg(n, e) {
  const t = [];
  let s = 0, r = null;
  for (; s < n; ) r = s + e, r >= n && (r = n), t.push([s, r]), s = r;
  return t;
}
function Yv(n) {
  const e = [];
  n instanceof tt && (n = [n]);
  for (let t = 0; t < n.length; ++t) {
    const s = n[t];
    if (s.rank === 1) e.push(bh(s, 1));
    else {
      if (s.rank === 0) throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      e.push(s);
    }
  }
  return e;
}
function Ws(n, e) {
  if (n == null) return;
  const t = [];
  if (e instanceof tt) t.push(e.id);
  else if (Array.isArray(e)) e.forEach((r) => t.push(r.id));
  else if (e != null) for (const r in e) {
    const a = e[r];
    t.push(a.id);
  }
  const s = [];
  if (n instanceof tt) t.indexOf(n.id) === -1 && s.push(n);
  else if (Array.isArray(n)) n.forEach((r) => {
    t.indexOf(r.id) === -1 && s.push(r);
  });
  else if (n != null) for (const r in n) {
    const a = n[r];
    t.indexOf(a.id) === -1 && s.push(a);
  }
  s.forEach((r) => {
    r.isDisposed || r.dispose();
  });
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function CW(n) {
  return n instanceof tt;
}
function Vg(n) {
  return Array.isArray(n);
}
function F1(n) {
  return !CW(n) && !Vg(n);
}
function O1(n, e, t, s = true, r = "") {
  if (e == null || e.length === 0) {
    if (n != null) {
      let o = false;
      if (Vg(n) && n.length > 0) o = true;
      else if (F1(n)) {
        for (const i in n) if (n.hasOwnProperty(i)) {
          o = true;
          break;
        }
      } else o = true;
      if (o) throw new W(`Error when checking model ${r} expected no data, but got ${n}`);
    }
    return [];
  }
  if (n == null) return e.map((o) => null);
  let a;
  if (F1(n)) {
    n = n, a = [];
    for (const o of e) {
      if (n[o] == null) throw new W(`No data provided for "${o}". Need data for each key in: ${e}`);
      a.push(n[o]);
    }
  } else if (Vg(n)) {
    if (n = n, n.length !== e.length) throw new W(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);
    a = n;
  } else {
    if (n = n, e.length > 1) throw new W(`The model ${r} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);
    a = [n];
  }
  if (a = Yv(a), t != null) for (let o = 0; o < e.length; ++o) {
    if (t[o] == null) continue;
    const i = a[o];
    if (i.shape.length !== t[o].length) throw new W(`Error when checking ${r}: expected ${e[o]} to have ${t[o].length} dimension(s). but got array with shape ${i.shape}`);
    for (let u = 0; u < t[o].length; ++u) {
      if (u === 0 && !s) continue;
      const c = i.shape[u], l = t[o][u];
      if (l != null && l >= 0 && c !== l) throw new W(`${r} expected a batch of elements where each example has shape [${t[o].slice(1, t[o].length)}] (i.e.,tensor shape [*,${t[o].slice(1, t[o].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1, i.shape.length)}] (tensor shape [${i.shape}])`);
    }
  }
  return a;
}
function IW(n, e, t) {
  const s = fa(n.map((a) => a.shape[0]));
  s.sort();
  const r = fa(e.map((a) => a.shape[0]));
  if (r.sort(), s.length > 1) throw new W(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map((a) => a.shape))}`);
  if (r.length > 1) throw new W(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((a) => a.shape))}`);
  if (s.length > 0 && r.length > 0 && !Be(s, r)) throw new W(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`);
}
function SW(n, e, t) {
  const s = [el, xm, cd];
  for (let r = 0; r < n.length; ++r) {
    const a = n[r], o = e[r], i = t[r];
    if (o != null) {
      if (o === cd && a.shape[a.shape.length - 1] === 1) throw new W(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
      if (s.indexOf(o) !== -1) {
        const u = a.shape.slice(1), c = i.slice(1);
        for (let l = 0; l < u.length; ++l) {
          const d = u[l], h = c[l];
          if (h != null && d !== h) throw new W(`A target Tensor with shape ${a.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`);
        }
      }
    }
  }
}
function P1(n, e, t, s = true, r = "") {
  let a;
  if (Array.isArray(n)) {
    if (n.length !== e.length) throw new W(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${n.length} Tensors(s).`);
    a = n;
  } else {
    if (e.length > 1) throw new W(`The model expects ${e.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);
    a = [n];
  }
  if (t != null) for (let o = 0; o < e.length; ++o) {
    if (t[o] == null) continue;
    const i = a[o];
    if (i.shape.length !== t[o].length) throw new W(`Error when checking ${r}: expected ${e[o]} to have ${t[o].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);
    for (let u = 0; u < t[o].length; ++u) {
      if (u === 0 && !s) continue;
      const c = i.shape[u], l = t[o][u];
      if (l != null && l !== c) throw new W(`Error when checking ${r}: expected ${e[o]} to have shape ${JSON.stringify(t[o])} but got array with shape ${JSON.stringify(i.shape)}.`);
    }
  }
}
function vW(n, e) {
  if (n == null || Array.isArray(n) && n.length === 0) return e.map((s) => []);
  let t;
  if (typeof n == "string" || typeof n == "function") t = [n];
  else if (Array.isArray(n) || typeof n == "object") t = n;
  else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);
  if (Array.isArray(t)) return e.map((s) => t);
  {
    const s = [];
    for (const r of e) {
      let a = t.hasOwnProperty(r) ? t[r] : [];
      Array.isArray(a) || (a = [a]), s.push(a);
    }
    return s;
  }
}
const $W = "layers-model";
class Fr extends Vs {
  constructor(e) {
    super(e), this.isTraining = false;
  }
  summary(e, t, s = console.log) {
    if (!this.built) throw new W("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
    iW(this, e, t, s);
  }
  compile(e) {
    if (e.loss == null && (e.loss = []), this.loss = e.loss, typeof e.optimizer == "string") this.optimizer_ = oW(e.optimizer), this.isOptimizerOwned = true;
    else {
      if (!(e.optimizer instanceof Qr)) throw new W("User-defined optimizer must be an instance of tf.Optimizer.");
      this.optimizer_ = e.optimizer, this.isOptimizerOwned = false;
    }
    let t = [];
    if (!Array.isArray(e.loss) && typeof e.loss != "string" && typeof e.loss != "function") {
      e.loss = e.loss;
      for (const o in e.loss) if (this.outputNames.indexOf(o) === -1) throw new W(`Unknown entry in loss dictionary: "${o}". Only expected the following keys: ${this.outputNames}`);
      for (const o of this.outputNames) e.loss[o] == null && console.warn(`Output "${o}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${o} during training`), t.push(ng(e.loss[o]));
    } else if (Array.isArray(e.loss)) {
      if (e.loss.length !== this.outputs.length) throw new W(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);
      t = e.loss.map((i) => ng(i));
    } else {
      const o = ng(e.loss);
      this.outputs.forEach((i) => {
        t.push(o);
      });
    }
    this.lossFunctions = t, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
    for (let o = 0; o < this.outputs.length; ++o) {
      const i = this.internalOutputShapes[o], u = this.outputNames[o];
      this.feedOutputNames.push(u), this.feedOutputShapes.push(i), this.feedLossFns.push(this.lossFunctions[o]);
    }
    const s = [];
    this.metrics = e.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], vi("loss", () => {
      for (let o = 0; o < this.outputs.length; ++o) {
        if (s.indexOf(o) !== -1) continue;
        const i = this.lossFunctions[o];
        this.outputs.length > 1 && (this.metricsTensors.push([i, o]), this.metricsNames.push(this.outputNames[o] + "_loss"));
      }
    });
    const r = vW(e.metrics, this.outputNames), a = (o, i, u) => {
      this.outputNames.length > 1 && (i = this.outputNames[o] + "_" + i), this.metricsNames.push(i), this.metricsTensors.push([u, o]);
    };
    vi("metric", () => {
      for (let o = 0; o < this.outputs.length; ++o) {
        if (s.indexOf(o) !== -1) continue;
        const i = r[o];
        ((c) => {
          const l = "";
          let d, h, p;
          for (const f of c) {
            if (typeof f == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(f) !== -1) {
              const g = this.internalOutputShapes[o];
              g[g.length - 1] === 1 || this.lossFunctions[o] === xm ? ["accuracy", "acc"].indexOf(f) !== -1 ? h = Tx : ["crossentropy", "ce"].indexOf(f) !== -1 && (h = Uv) : this.lossFunctions[o] === Mp ? ["accuracy", "acc"].indexOf(f) !== -1 ? h = Gv : ["crossentropy", "ce"].indexOf(f) !== -1 && (h = Hv) : ["accuracy", "acc"].indexOf(f) !== -1 ? h = Rx : ["crossentropy", "ce"].indexOf(f) !== -1 && (h = _x);
              let y;
              ["accuracy", "acc"].indexOf(f) !== -1 ? y = "acc" : ["crossentropy", "ce"].indexOf(f) !== -1 && (y = "ce"), p = h, d = l + y;
            } else p = aW(f), d = l + ep(f);
            let m;
            vi(d, () => {
              m = p;
            }), a(o, d, m);
          }
        })(i);
      }
    }), this.collectedTrainableWeights = this.trainableWeights;
  }
  checkTrainableWeightsConsistency() {
    this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
  }
  evaluate(e, t, s = {}) {
    const r = s.batchSize == null ? 32 : s.batchSize;
    sg(r);
    const o = this.standardizeUserDataXY(e, t, true, r);
    try {
      const i = o[0].concat(o[1]);
      this.makeTestFunction();
      const u = this.testFunction, c = this.testLoop(u, i, r, s.verbose, s.steps);
      return Mn(c);
    } finally {
      Ws(o[0], e), Ws(o[1], t);
    }
  }
  async evaluateDataset(e, t) {
    return this.makeTestFunction(), wW(this, e, t);
  }
  checkNumSamples(e, t, s, r = "steps") {
    let a;
    if (s != null) {
      if (a = null, t != null) throw new W(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`);
    } else if (e != null) Array.isArray(e) ? a = e[0].shape[0] : a = e.shape[0];
    else throw new W(`Either the input data should have a defined shape, or ${r} shoud be specified.`);
    return a;
  }
  execute(e, t) {
    if (Array.isArray(t) && t.length === 0) throw new W("`outputs` is an empty Array, which is not allowed.");
    const s = Array.isArray(t), r = s ? t : [t], a = this.retrieveSymbolicTensors(r), o = new la();
    if (e instanceof tt && (e = [e]), Array.isArray(e)) {
      if (e.length !== this.inputs.length) throw new W(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
      for (let u = 0; u < this.inputs.length; ++u) o.add(this.inputs[u], e[u]);
    } else for (const u of this.inputs) {
      const c = e[u.name];
      if (c == null) throw new W(`No value is provided for the model's input ${u.name}`);
      o.add(u, c);
    }
    const i = Bc(a, o);
    return s ? i : i[0];
  }
  retrieveSymbolicTensors(e) {
    const t = Mi(null, e.length);
    let s = e.length;
    for (const r of this.layers) {
      const a = Array.isArray(r.output) ? r.output : [r.output], o = a.map((i) => i.name);
      for (let i = 0; i < e.length; ++i) {
        const u = o.indexOf(e[i]);
        if (u !== -1 && (t[i] = a[u], s--), s === 0) break;
      }
      if (s === 0) break;
    }
    if (s > 0) {
      const r = [];
      throw t.forEach((a, o) => {
        a == null && r.push(e[o]);
      }), new W(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(r)}`);
    }
    return t;
  }
  predictLoop(e, t = 32, s = false) {
    return H(() => {
      const r = this.checkNumSamples(e);
      if (s) throw new Ge("Verbose predictLoop() is not implemented yet.");
      const a = rg(r, t), o = this.outputs.map((i) => []);
      for (let i = 0; i < a.length; ++i) H(() => {
        const c = a[i][0], l = a[i][1], d = Fc(e, c, l), h = [];
        if (Array.isArray(d)) for (let f = 0; f < d.length; ++f) h.push({ key: this.inputs[f], value: d[f] });
        else h.push({ key: this.inputs[0], value: d });
        const p = new la(h);
        return Bc(this.outputs, p);
      }).forEach((c, l) => o[l].push(c));
      return Mn(o.map((i) => Lt(i, 0)));
    });
  }
  predict(e, t = {}) {
    const s = Yv(e);
    P1(s, this.inputNames, this.feedInputShapes, false);
    try {
      const r = t.batchSize == null ? 32 : t.batchSize;
      return sg(r), this.predictLoop(s, r);
    } finally {
      Ws(s, e);
    }
  }
  predictOnBatch(e) {
    P1(e, this.inputNames, this.feedInputShapes, true);
    const t = (Array.isArray(e) ? e[0] : e).shape[0];
    return this.predictLoop(e, t);
  }
  standardizeUserDataXY(e, t, s = true, r) {
    if (this.optimizer_ == null) throw new As("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
    const a = [];
    for (let o = 0; o < this.feedOutputShapes.length; ++o) {
      const i = this.feedOutputShapes[o];
      this.feedLossFns[o] === Mp ? a.push(i.slice(0, i.length - 1).concat([1])) : a.push(i);
    }
    if (e = O1(e, this.feedInputNames, this.feedInputShapes, false, "input"), t = O1(t, this.feedOutputNames, a, false, "target"), IW(e, t), SW(t, this.feedLossFns, this.feedOutputShapes), this.stateful && r != null && r > 0 && e[0].shape[0] % r !== 0) throw new W(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);
    return [e, t];
  }
  async standardizeUserData(e, t, s, r, a = true, o) {
    const [i, u] = this.standardizeUserDataXY(e, t, a, o);
    if (s != null) throw new Error("sample weight is not supported yet.");
    let c = null;
    if (r != null) {
      const l = qv(r, this.outputNames);
      c = [];
      for (let d = 0; d < l.length; ++d) c.push(await Kv(u[d], null, l[d]));
    }
    return [i, u, c];
  }
  testLoop(e, t, s, r = 0, a) {
    return H(() => {
      const o = this.checkNumSamples(t, s, a, "steps"), i = [];
      if (r > 0) throw new Ge("Verbose mode is not implemented yet.");
      if (a != null) throw new Ge("steps mode in testLoop() is not implemented yet");
      {
        const u = rg(o, s), c = bn(Js(0, o));
        for (let l = 0; l < u.length; ++l) {
          const d = u[l][0], h = u[l][1], p = $i(c, d, h - d), f = Wg(t, p), m = e(f);
          if (l === 0) for (let g = 0; g < m.length; ++g) i.push(Ne(0));
          for (let g = 0; g < m.length; ++g) {
            const y = m[g];
            i[g] = te(i[g], z(h - d, y));
          }
        }
        for (let l = 0; l < i.length; ++l) i[l] = ve(i[l], o);
      }
      return i;
    });
  }
  getDedupedMetricsNames() {
    const e = this.metricsNames, t = [];
    for (let s = 0; s < e.length; ++s) {
      const r = e[s];
      let a = r;
      if (w1(e, r) > 1) {
        const o = w1(e.slice(0, s), r);
        a += `_${o}`;
      }
      t.push(a);
    }
    return t;
  }
  makeTrainFunction() {
    return (e) => {
      const t = [], s = e.slice(0, this.inputs.length), r = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), a = e.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), o = [], i = () => {
        const d = [];
        for (let m = 0; m < this.inputs.length; ++m) d.push({ key: this.inputs[m], value: s[m] });
        const h = new la(d), p = Bc(this.outputs, h, { training: true });
        let f;
        for (let m = 0; m < this.lossFunctions.length; ++m) {
          const g = this.lossFunctions[m];
          let y = g(r[m], p[m]);
          a[m] != null && (y = fW(y, a[m]));
          const b = Et(y);
          t.push(b), m === 0 ? f = y : f = te(f, y);
        }
        for (let m = 0; m < this.metricsTensors.length; ++m) {
          let g;
          if (this.outputs.length > 1 && m < this.outputs.length) g = t[m];
          else {
            const y = this.metricsTensors[m][0], b = this.metricsTensors[m][1];
            g = Et(y(r[b], p[b]));
          }
          Qt(g), o.push(g);
        }
        return f = Et(f), this.calculateLosses().forEach((m) => {
          f = te(f, m);
        }), f;
      }, u = this.collectedTrainableWeights.map((d) => d.read());
      return [this.optimizer_.minimize(i, true, u)].concat(o);
    };
  }
  makeTestFunction() {
    this.testFunction = (e) => H(() => {
      const t = [];
      let s;
      const r = e.slice(0, this.inputs.length), a = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), o = [];
      for (let c = 0; c < this.inputs.length; ++c) o.push({ key: this.inputs[c], value: r[c] });
      const i = new la(o), u = Bc(this.outputs, i);
      for (let c = 0; c < this.lossFunctions.length; ++c) {
        const l = this.lossFunctions[c], d = Et(l(a[c], u[c]));
        c === 0 ? s = d : s = te(s, d), t.push(s);
      }
      for (let c = 0; c < this.metricsTensors.length; ++c) {
        const l = this.metricsTensors[c][0], d = this.metricsTensors[c][1], h = Et(l(a[d], u[d]));
        t.push(h);
      }
      return t;
    });
  }
  async fit(e, t, s = {}) {
    if (this.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
    this.isTraining = true;
    let r, a, o, i, u, c, l, d, h;
    try {
      const p = s.batchSize == null ? 32 : s.batchSize;
      sg(p);
      const m = await this.standardizeUserData(e, t, s.sampleWeight, s.classWeight, false, p);
      r = m[0], a = m[1], h = m[2];
      let g = false, y;
      if (s.validationData != null && s.validationData.length > 0) {
        if (g = true, s.validationData.length === 2) u = s.validationData[0], c = s.validationData[1];
        else throw s.validationData.length === 3 ? new Ge("validationData including sample weights is not supported yet.") : new W(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);
        const T = await this.standardizeUserData(u, c, null, null, true, p);
        l = T[0], d = T[1], y = l.concat(d);
      } else if (s.validationSplit != null && s.validationSplit > 0 && s.validationSplit < 1) {
        g = true;
        const N = Math.floor(r[0].shape[0] * (1 - s.validationSplit)), T = r[0].shape[0];
        l = Fc(r, N, T), o = r, r = Fc(r, 0, N), d = Fc(a, N, T), i = a, a = Fc(a, 0, N), y = l.concat(d);
      } else s.validationSteps != null && (g = true);
      const b = r.concat(a).concat(h);
      this.checkTrainableWeightsConsistency();
      const x = this.makeTrainFunction(), w = this.getDedupedMetricsNames();
      let C, v;
      g ? (this.makeTestFunction(), C = this.testFunction, v = w.slice().concat(w.map((N) => "val_" + N))) : (C = null, y = [], v = w.slice());
      const k = Mv(s.callbacks, s.yieldEvery);
      return await this.fitLoop(x, b, w, p, s.epochs, s.verbose, k, C, y, s.shuffle, v, s.initialEpoch, null, null);
    } finally {
      this.isTraining = false, Ws(r, e), Ws(a, t), Ws(o, e), Ws(i, t), Ws(l, u), Ws(d, c), h != null && Me(h);
    }
  }
  async fitLoop(e, t, s, r, a, o, i, u, c, l, d, h, p, f) {
    r == null && (r = 32), a == null && (a = 1), l == null && (l = true), h == null && (h = 0);
    let m = false;
    if (u != null && c != null && (m = true), f != null && (m = true, p == null)) throw new W("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
    const g = this.checkNumSamples(t, r, p, "steps_per_epoch");
    let y;
    g != null && (y = Js(0, g)), o == null && (o = 1);
    const { callbackList: b, history: x } = Bv(i, o, a, h, g, p, r, m, d);
    b.setModel(this), this.history = x, await b.onTrainBegin(), this.stopTraining_ = false;
    for (let w = h; w < a; ++w) {
      await b.onEpochBegin(w);
      const C = {};
      if (p != null) throw new Ge("stepsPerEpoch mode is not implemented yet.");
      {
        if (l === "batch") throw new Ge("batch shuffling is not implemneted yet");
        l && by(y);
        const v = bn(y), k = rg(g, r);
        for (let R = 0; R < k.length; ++R) {
          const N = {};
          if (await b.onBatchBegin(R, N), H(() => {
            const T = k[R][0], S = k[R][1], E = $i(v, T, S - T);
            N.batch = R, N.size = S - T;
            const P = Wg(t, E), M = e(P);
            for (let L = 0; L < s.length; ++L) {
              const V = s[L], q = M[L];
              N[V] = q, Qt(q);
            }
            if (R === k.length - 1 && m) {
              const L = this.testLoop(u, c, r);
              for (let V = 0; V < s.length; ++V) {
                const q = s[V], G = L[V];
                Qt(G), C["val_" + q] = G;
              }
            }
          }), await b.onBatchEnd(R, N), Ov(N), this.stopTraining_) break;
        }
        v.dispose();
      }
      if (await b.onEpochEnd(w, C), this.stopTraining_) break;
    }
    return await b.onTrainEnd(), await this.history.syncData(), this.history;
  }
  async fitDataset(e, t) {
    return yW(this, e, t);
  }
  async trainOnBatch(e, t) {
    const s = await this.standardizeUserData(e, t), r = s[0], a = s[1], i = this.makeTrainFunction()(r.concat(a)), u = [];
    for (const c of i) {
      const l = await c.data();
      u.push(l[0]);
    }
    return Me(i), Ws(s[0], e), Ws(s[1], t), Mn(u);
  }
  getNamedWeights(e) {
    const t = [], s = e != null && e.trainableOnly, r = s ? this.trainableWeights : this.weights, a = this.getWeights(s);
    for (let o = 0; o < r.length; ++o) s && !r[o].trainable || t.push({ name: r[o].originalName, tensor: a[o] });
    return t;
  }
  set stopTraining(e) {
    this.stopTraining_ = e;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(e) {
    this.optimizer_ !== e && (this.optimizer_ = e, this.isOptimizerOwned = false);
  }
  dispose() {
    const e = super.dispose();
    if (e.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      const t = Sg().numTensors;
      this.optimizer_.dispose(), e.numDisposedVariables += t - Sg().numTensors;
    }
    return e;
  }
  getLossIdentifiers() {
    let e;
    if (typeof this.loss == "string") e = Rr(this.loss);
    else if (Array.isArray(this.loss)) {
      for (const t of this.loss) if (typeof t != "string") throw new Error("Serialization of non-string loss is not supported.");
      e = this.loss.map((t) => Rr(t));
    } else {
      const t = Object.keys(this.loss);
      e = {};
      const s = this.loss;
      for (const r of t) if (typeof s[r] == "string") e[r] = Rr(s[r]);
      else throw new Error("Serialization of non-string loss is not supported.");
    }
    return e;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics == "string" || typeof this.metrics == "function") return [Rr(ep(this.metrics))];
    if (Array.isArray(this.metrics)) return this.metrics.map((e) => Rr(ep(e)));
    {
      const e = {};
      for (const t in this.metrics) e[t] = Rr(ep(this.metrics[t]));
      return e;
    }
  }
  getTrainingConfig() {
    return { loss: this.getLossIdentifiers(), metrics: this.getMetricIdentifiers(), optimizer_config: { class_name: this.optimizer.getClassName(), config: this.optimizer.getConfig() } };
  }
  loadTrainingConfig(e) {
    if (e.weighted_metrics != null) throw new Error("Loading weight_metrics is not supported yet.");
    if (e.loss_weights != null) throw new Error("Loading loss_weights is not supported yet.");
    if (e.sample_weight_mode != null) throw new Error("Loading sample_weight_mode is not supported yet.");
    const t = dd(e.optimizer_config), s = Xs(t);
    let r;
    if (typeof e.loss == "string") r = gi(e.loss);
    else if (Array.isArray(e.loss)) r = e.loss.map((o) => gi(o));
    else if (e.loss != null) {
      r = {};
      for (const o in e.loss) r[o] = gi(e.loss[o]);
    }
    let a;
    if (Array.isArray(e.metrics)) a = e.metrics.map((o) => gi(o));
    else if (e.metrics != null) {
      a = {};
      for (const o in e.metrics) a[o] = gi(e.metrics[o]);
    }
    this.compile({ loss: r, metrics: a, optimizer: s });
  }
  async save(e, t) {
    if (typeof e == "string") {
      const c = TI(e);
      if (c.length === 0) throw new W(`Cannot find any save handlers for URL '${e}'`);
      if (c.length > 1) throw new W(`Found more than one (${c.length}) save handlers for URL '${e}'`);
      e = c[0];
    }
    if (e.save == null) throw new W("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    const s = await vg(this.getNamedWeights(t)), i = { modelTopology: this.toJSON(null, false), format: $W, generatedBy: `TensorFlow.js tfjs-layers v${wm}`, convertedBy: null };
    if ((t == null ? false : t.includeOptimizer) && this.optimizer != null) {
      i.trainingConfig = this.getTrainingConfig();
      const c = "optimizer", { data: l, specs: d } = await vg(await this.optimizer.getWeights(), c);
      s.specs.push(...d), s.data = kI([s.data, l]);
    }
    return this.userDefinedMetadata != null && (E1(this.userDefinedMetadata, this.name, true), i.userDefinedMetadata = this.userDefinedMetadata), i.weightData = s.data, i.weightSpecs = s.specs, e.save(i);
  }
  setUserDefinedMetadata(e) {
    E1(e, this.name), this.userDefinedMetadata = e;
  }
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
}
Fr.className = "Model";
ne(Fr);
class Qv extends Fr {
}
Qv.className = "Functional";
ne(Qv);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
async function kW(n, e) {
  "modelTopology" in n || (n = { modelTopology: n }), n = n;
  let t = n.modelTopology;
  t.model_config != null && (t = t.model_config);
  const s = dd(t), r = Xs(s, e);
  if (n.weightsManifest != null) {
    const a = await US(n.weightsManifest, n.pathPrefix, r.weights.map((i) => i.originalName)), o = {};
    for (const i of r.weights) o[i.originalName] = a[i.originalName];
    r.loadWeights(o), Me(a);
  }
  return r;
}
async function NW(n, e) {
  if (e == null && (e = {}), typeof n == "string") {
    const t = RI(n, e);
    if (t.length === 0) t.push(jS(n, e));
    else if (t.length > 1) throw new W(`Found more than one (${t.length}) load handlers for URL '${n}'`);
    n = t[0];
  }
  return TW(n, void 0, e);
}
async function TW(n, e, t) {
  if (t == null && (t = {}), n.load == null) throw new W("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
  const s = await n.load();
  let r = s.modelTopology;
  r.model_config != null && (r = r.model_config);
  const a = t.strict == null ? true : t.strict, o = s.weightData != null && s.weightSpecs != null && a, i = Xs(dd(r), e, o), u = s.trainingConfig;
  if (u != null && i.loadTrainingConfig(u), s.userDefinedMetadata != null && i.setUserDefinedMetadata(s.userDefinedMetadata), s.weightData != null) {
    if (s.weightSpecs == null) throw new W("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
    const { modelWeights: c, optimizerWeights: l } = RW(s.weightData, s.weightSpecs);
    i.loadWeights(c, a), i.optimizer != null && l.length > 0 && await i.optimizer.setWeights(l), Me(c), Me(l.map((d) => d.tensor));
  }
  return i;
}
function RW(n, e) {
  const t = _y(n, e), s = {}, r = [];
  return e.forEach((a) => {
    a.group === "optimizer" ? r.push({ name: a.name, tensor: t[a.name] }) : s[a.name] = t[a.name];
  }), { modelWeights: s, optimizerWeights: r };
}
class Bi extends Fr {
  constructor(e) {
    if (super({ inputs: [], outputs: [] }), e = e || {}, this.trainable = true, this.built = false, this.name = e.name != null ? e.name : um("sequential_"), e.layers != null) for (const t of e.layers) this.add(t);
  }
  checkShape(e) {
    if (e.inboundNodes[0].outputTensors[0].shape.some((s) => s < 0)) throw new W(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`);
  }
  add(e) {
    const t = e instanceof Bi || e instanceof Fr;
    let s;
    if (t) {
      if (s = e, s.outputs.length !== 1) throw new W("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      if (s.inputs.length !== 1) throw new W("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
    }
    if (this.outputs.length === 0) {
      if (e.inboundNodes.length === 0) {
        if (e.batchInputShape == null) throw new W("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
        const r = Fv({ batchShape: e.batchInputShape, dtype: e.dtype, name: e.name + "_input" });
        e.apply(r);
      }
      if (t) this.outputs = s.outputs, this.inputs = s.inputs;
      else {
        if (e.inboundNodes.length !== 1) throw new W(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);
        if (e.inboundNodes[0].outputTensors.length !== 1) throw new W("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(e), this.outputs = [e.inboundNodes[0].outputTensors[0]], this.inputs = Av(this.outputs[0]);
      }
      this.inboundNodes = [], new ym({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: Mi(null, this.inputs.length), outputMasks: [null], inputShapes: this.inputs.map((r) => r.shape), outputShapes: this.outputs[0].shape });
    } else {
      const r = e.apply(this.outputs[0]);
      if (Array.isArray(r)) throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      this.checkShape(e), this.outputs = [r], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(e), this.built = false;
  }
  pop() {
    if (this.layers.length === 0) throw new TypeError("There are no layers in the model.");
    if (this.layers.pop(), this.layers.length === 0) this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
    else {
      const e = this.layers.length - 1;
      this.layers[e].outboundNodes = [], this.outputs = [this.layers[e].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(e, t) {
    return this.model == null && this.build(), this.model.call(e, t);
  }
  build(e) {
    if (at(e), this.inputs.length === 0 || this.outputs.length === 0) throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
    this.model = new Fr({ inputs: this.inputs, outputs: this.outputs[0], name: this.name + "_model" }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = true;
  }
  countParams() {
    return this.built || this.build(), super.countParams();
  }
  summary(e, t, s = console.log) {
    this.built || this.build(), super.summary(e, t, s);
  }
  setWeights(e) {
    this.model == null && this.build(), this.model.setWeights(e);
  }
  evaluate(e, t, s = {}) {
    if (!this.built) throw new As("The model needs to be compiled before being used.");
    return this.model.evaluate(e, t, s);
  }
  async evaluateDataset(e, t) {
    if (!this.built) throw new As("The model needs to be compiled before being used.");
    return this.model.evaluateDataset(e, t);
  }
  predict(e, t = {}) {
    return this.model == null && this.build(), this.model.predict(e, t);
  }
  predictOnBatch(e) {
    return this.model == null && this.build(), this.model.predictOnBatch(e);
  }
  compile(e) {
    this.build(), this.model.compile(e), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
  }
  get optimizer() {
    return this.model == null ? void 0 : this.model.optimizer;
  }
  set optimizer(e) {
    this.model.optimizer = e;
  }
  async fit(e, t, s = {}) {
    if (!this.built) throw new As("The model needs to be compiled before being used.");
    return this.model.fit(e, t, s);
  }
  async fitDataset(e, t) {
    if (!this.built) throw new As("The model needs to be compiled before being used.");
    return this.model.fitDataset(e, t);
  }
  async trainOnBatch(e, t) {
    return this.model.trainOnBatch(e, t);
  }
  static fromConfig(e, t, s = {}, r = false) {
    let a, o = {};
    if (t instanceof Array) {
      if (t[0].className == null || t[0].className === "Merge") throw new W("Legacy serialization format not supported yet.");
      a = t;
    } else $(t.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), a = t.layers, delete t.layers, o = t;
    const i = new e(o);
    if (!(i instanceof Bi)) throw new Ge(`Sequential.fromConfig called on non-Sequential input: ${i}`);
    for (const u of a) {
      const l = Xs(u, void 0, r);
      r && l.setFastWeightInitDuringBuild(true), i.add(l);
    }
    return i;
  }
  set stopTraining(e) {
    if (this.model == null) throw new W("Cannot set the stopTraining property of a sequential model before it is compiled.");
    this.model.stopTraining = e;
  }
  get stopTraining() {
    if (this.model == null) throw new W("Cannot get the stopTraining property of a sequential model before it is compiled.");
    return this.model.stopTraining;
  }
  getConfig() {
    const e = [];
    for (const t of this.layers) {
      const s = {};
      s.className = t.getClassName(), s.config = t.getConfig(), e.push(s);
    }
    return { name: this.name, layers: e };
  }
}
Bi.className = "Sequential";
ne(Bi);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function _W(n) {
  return new Fr(n);
}
function EW(n) {
  return new Bi(n);
}
function Zv(n) {
  return Fv(n);
}
function DW(n, e) {
  ms.registerCallbackConstructor(n, e);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
let vn = class extends Zu {
  getConfig() {
    return {};
  }
};
class Jv extends vn {
  apply(e, t = 1) {
    return YM(e, t);
  }
}
Jv.className = "elu";
ne(Jv);
class e$ extends vn {
  apply(e) {
    return Rf(e);
  }
}
e$.className = "selu";
ne(e$);
class t$ extends vn {
  apply(e) {
    return ar(e);
  }
}
t$.className = "relu";
ne(t$);
class n$ extends vn {
  apply(e) {
    return H(() => va(6, ar(e)));
  }
}
n$.className = "relu6";
ne(n$);
class s$ extends vn {
  apply(e) {
    return e;
  }
}
s$.className = "linear";
ne(s$);
class r$ extends vn {
  apply(e) {
    return Ks(e);
  }
}
r$.className = "sigmoid";
ne(r$);
class a$ extends vn {
  apply(e) {
    return ZM(e);
  }
}
a$.className = "hardSigmoid";
ne(a$);
class o$ extends vn {
  apply(e) {
    return Yu(e);
  }
}
o$.className = "softplus";
ne(o$);
class i$ extends vn {
  apply(e) {
    return QM(e);
  }
}
i$.className = "softsign";
ne(i$);
class u$ extends vn {
  apply(e) {
    return Sa(e);
  }
}
u$.className = "tanh";
ne(u$);
let Ex = class extends vn {
  apply(e, t = -1) {
    return nh(e, t);
  }
};
Ex.className = "softmax";
ne(Ex);
class l$ extends vn {
  apply(e, t = -1) {
    return If(e, t);
  }
}
l$.className = "logSoftmax";
ne(l$);
class c$ extends vn {
  apply(e) {
    return H(() => H(() => {
      const t = Math.sqrt(2), s = z(0.5, te(1, xf(ve(e, t))));
      return z(e, s);
    }));
  }
}
c$.className = "gelu";
ne(c$);
class d$ extends vn {
  apply(e) {
    return H(() => z(0.5, z(e, te(1, Sa(z(ln(ve(2, Math.PI)), te(e, z(0.044715, xr(e, 3)))))))));
  }
}
d$.className = "gelu_new";
ne(d$);
class h$ extends vn {
  apply(e) {
    return H(() => z(e, Sa(Yu(e))));
  }
}
h$.className = "mish";
ne(h$);
class p$ extends vn {
  apply(e, t = 1) {
    return H(() => z(Ks(z(e, t)), e));
  }
}
p$.className = "swish";
ne(p$);
function ka(n) {
  return n.getClassName();
}
function ag(n, e = {}) {
  return yh(n, ys.getMap().classNameMap, e, "activation");
}
function Na(n) {
  if (n == null) {
    const e = {};
    return e.className = "linear", e.config = {}, ag(e);
  }
  if (typeof n == "string") {
    const e = {};
    return e.className = n, e.config = {}, ag(e);
  } else return n instanceof vn ? n : ag(n);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function Dx(n) {
  if (n != null && typeof n != "object") throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`);
}
class f$ extends Zu {
}
class Ih extends f$ {
  constructor(e) {
    super(), Dx(e), this.l1 = e == null || e.l1 == null ? 0.01 : e.l1, this.l2 = e == null || e.l2 == null ? 0.01 : e.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
  }
  apply(e) {
    return H(() => {
      let t = Ot([1]);
      return this.hasL1 && (t = te(t, we(z(this.l1, Vt(e))))), this.hasL2 && (t = te(t, we(z(this.l2, xh(e))))), B(t, []);
    });
  }
  getConfig() {
    return { l1: this.l1, l2: this.l2 };
  }
  static fromConfig(e, t) {
    return new e({ l1: t.l1, l2: t.l2 });
  }
}
Ih.className = "L1L2";
ne(Ih);
function AW(n) {
  return Dx(n), new Ih({ l1: n != null ? n.l1 : null, l2: 0 });
}
function FW(n) {
  return Dx(n), new Ih({ l2: n != null ? n.l2 : null, l1: 0 });
}
const L1 = { l1l2: "L1L2" };
function wt(n) {
  return dx(n);
}
function z1(n, e = {}) {
  return yh(n, ys.getMap().classNameMap, e, "regularizer");
}
function Tt(n) {
  if (n == null) return null;
  if (typeof n == "string") {
    const t = { className: n in L1 ? L1[n] : n, config: {} };
    return z1(t);
  } else return n instanceof f$ ? n : z1(n);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class Ax extends qe {
  constructor(e) {
    super(e ?? {}), this.supportsMasking = true, e != null && (this.maxValue = e.maxValue);
  }
  call(e, t) {
    e = Fe(e);
    let s = ar(e);
    return this.maxValue != null && (s = jn(s, 0, this.maxValue)), s;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { maxValue: this.maxValue }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Ax.className = "ReLU";
ne(Ax);
class Fx extends qe {
  constructor(e) {
    super(e ?? {}), this.DEFAULT_ALPHA = 0.3, e == null && (e = {}), this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
  }
  call(e, t) {
    const s = Fe(e);
    return jd(s, this.alpha);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Fx.className = "LeakyReLU";
ne(Fx);
class Ox extends qe {
  constructor(e) {
    if (super(e ?? {}), this.DEFAULT_ALPHA_INITIALIZER = "zeros", e == null && (e = {}), this.supportsMasking = true, this.alphaInitializer = Nt(e.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = Tt(e.alphaRegularizer), this.alphaConstraint = en(e.alphaConstraint), e.sharedAxes == null) this.sharedAxes = null;
    else if (Array.isArray(e.sharedAxes)) this.sharedAxes = e.sharedAxes;
    else if (typeof e.sharedAxes == "number") this.sharedAxes = [e.sharedAxes];
    else throw new W(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);
  }
  build(e) {
    e = at(e);
    const t = e.slice(1);
    if (this.sharedAxes != null) for (const r of this.sharedAxes) t[r - 1] = 1;
    this.alpha = this.addWeight("alpha", t, "float32", this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);
    const s = {};
    if (this.sharedAxes != null) for (let r = 1; r < e.length; ++r) s[r] = e[r];
    this.inputSpec = [new Ut({ ndim: e.length, axes: s })], this.built = true;
  }
  call(e, t) {
    return e = Fe(e), Jd(e, this.alpha.read());
  }
  getConfig() {
    const e = { alphaInitializer: At(this.alphaInitializer), alphaRegularizer: wt(this.alphaRegularizer), alphaConstraint: Jt(this.alphaConstraint), sharedAxes: this.sharedAxes }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Ox.className = "PReLU";
ne(Ox);
let Px = class extends qe {
  constructor(e) {
    if (super(e ?? {}), this.DEFAULT_ALPHA = 1, e == null && (e = {}), e.alpha != null && e.alpha !== this.DEFAULT_ALPHA) throw new Ge(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);
    this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
  }
  call(e, t) {
    const s = Fe(e);
    return ac(s);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Px.className = "ELU";
ne(Px);
class Lx extends qe {
  constructor(e) {
    super(e ?? {}), this.DEFAULT_THETA = 1, e == null && (e = {}), this.theta = e.theta == null ? this.DEFAULT_THETA : e.theta;
  }
  call(e, t) {
    const s = Fe(e);
    return z(s, ue(On(s, this.theta), "float32"));
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { theta: this.theta }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Lx.className = "ThresholdedReLU";
ne(Lx);
class zx extends qe {
  constructor(e) {
    super(e ?? {}), this.DEFAULT_AXIS = 1, e == null && (e = {}), this.softmax = new Ex().apply, this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis;
  }
  call(e, t) {
    return H(() => {
      let s = Fe(e);
      const r = t.mask;
      if (r != null) {
        const a = z(xe(Bn(s.shape), ue(r, s.dtype)), Ne(-1e9));
        s = te(s, a);
      }
      return this.axis instanceof Array ? this.axis.length > 1 ? qn(xe(s, Kd(s, this.axis, true))) : this.softmax(s, this.axis[0]) : this.softmax(s, this.axis);
    });
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { axis: this.axis }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
zx.className = "Softmax";
ne(zx);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function wl(n, e, t) {
  if (typeof n == "number") return Mi(n, e);
  if (n.length !== e) throw new W(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${n.length} elements.`);
  for (let s = 0; s < e; ++s) {
    const r = n[s];
    if (!jM(r)) throw new W(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`);
  }
  return n;
}
function Ys(n, e, t, s, r = 1) {
  if (n == null) return n;
  const a = e + (e - 1) * (r - 1);
  let o;
  return t === "same" ? o = n : o = n - a + 1, Math.floor((o + s - 1) / s);
}
function hr(n, e, t, s) {
  if (n == null) return null;
  if (s === "valid") n = n * e + $a([t - e, 0]);
  else if (s === "same") n = n * e;
  else throw new W(`Unsupport padding mode: ${s}.`);
  return n;
}
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function Mx(n, e) {
  return H(() => (Mt(e), e === "channelsFirst" ? Ye(n, [0, 2, 3, 1]) : n));
}
function m$(n, e) {
  return H(() => (Mt(e), e === "channelsFirst" ? Ye(n, [0, 2, 3, 4, 1]) : n));
}
function OW(n, e, t, s = 1, r = "valid", a, o = 1) {
  return H(() => {
    if (a == null && (a = er()), Mt(a), n.shape.length !== 3) throw new W(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);
    if (e.shape.length !== 3) throw new W(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);
    if (t != null && t.shape.length !== 1) throw new W(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);
    if (a === "channelsFirst" && (n = Ye(n, [0, 2, 1])), r === "causal") throw new Ge("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    let i = mf(n, e, s, r === "same" ? "same" : "valid", "NWC", o);
    return t != null && (i = or(i, t)), i;
  });
}
function M1(n, e, t, s = [1, 1], r = "valid", a, o, i = null) {
  return H(() => {
    if (a == null && (a = er()), Mt(a), n.rank !== 3 && n.rank !== 4) throw new W(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);
    if (e.rank !== 3 && e.rank !== 4) throw new W(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);
    let u = Mx(n, a);
    if (r === "causal") throw new Ge("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return u = RS({ x: u, filter: e, strides: s, pad: r === "same" ? "same" : "valid", dilations: o, dataFormat: "NHWC", bias: t, activation: i }), a === "channelsFirst" && (u = Ye(u, [0, 3, 1, 2])), u;
  });
}
function PW(n, e, t, s = [1, 1, 1], r = "valid", a, o) {
  return H(() => {
    if (a == null && (a = er()), Mt(a), n.rank !== 4 && n.rank !== 5) throw new W(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);
    if (e.rank !== 4 && e.rank !== 5) throw new W(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);
    let i = m$(n, a);
    if (r === "causal") throw new Ge("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
    return i = tb(i, e, s, r === "same" ? "same" : "valid", "NDHWC", o), t != null && (i = or(i, t)), a === "channelsFirst" && (i = Ye(i, [0, 4, 1, 2, 3])), i;
  });
}
class Cm extends qe {
  constructor(e, t) {
    if (super(t), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", Cm.verifyArgs(t), this.rank = e, an(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3) throw new Ge(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
    if (this.kernelSize = wl(t.kernelSize, e, "kernelSize"), this.strides = wl(t.strides == null ? 1 : t.strides, e, "strides"), this.padding = t.padding == null ? "valid" : t.padding, $s(this.padding), this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, Mt(this.dataFormat), this.activation = Na(t.activation), this.useBias = t.useBias == null ? true : t.useBias, this.biasInitializer = Nt(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = en(t.biasConstraint), this.biasRegularizer = Tt(t.biasRegularizer), this.activityRegularizer = Tt(t.activityRegularizer), this.dilationRate = wl(t.dilationRate == null ? 1 : t.dilationRate, e, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1) throw new W(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    if (this.rank === 2) {
      if (typeof this.dilationRate == "number") this.dilationRate = [this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 2) throw new W(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 3) {
      if (typeof this.dilationRate == "number") this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 3) throw new W(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    }
  }
  static verifyArgs(e) {
    if (dr("kernelSize" in e, "required key 'kernelSize' not in config"), typeof e.kernelSize != "number" && !hx(e.kernelSize, "number", 1, 3)) throw new W(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`);
  }
  getConfig() {
    const e = { kernelSize: this.kernelSize, strides: this.strides, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, activation: ka(this.activation), useBias: this.useBias, biasInitializer: At(this.biasInitializer), biasRegularizer: wt(this.biasRegularizer), activityRegularizer: wt(this.activityRegularizer), biasConstraint: Jt(this.biasConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class mc extends Cm {
  constructor(e, t) {
    super(e, t), this.kernel = null, mc.verifyArgs(t), this.filters = t.filters, an(this.filters, "filters"), this.kernelInitializer = Nt(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = en(t.kernelConstraint), this.kernelRegularizer = Tt(t.kernelRegularizer);
  }
  build(e) {
    e = at(e);
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null) throw new W(`The channel dimension of the input should be defined. Found ${e[t]}`);
    const s = e[t], r = this.kernelSize.concat([s, this.filters]);
    this.kernel = this.addWeight("kernel", r, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [t]: s } }], this.built = true;
  }
  call(e, t) {
    return H(() => {
      e = Fe(e);
      let s;
      const r = this.bias == null ? null : this.bias.read(), a = vv(this.activation.getClassName());
      if (a != null && this.rank === 2) s = M1(e, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate, a);
      else {
        if (this.rank === 1) s = OW(e, this.kernel.read(), r, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        else if (this.rank === 2) s = M1(e, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else if (this.rank === 3) s = PW(e, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else throw new Ge("convolutions greater than 3D are not implemented yet.");
        this.activation != null && (s = this.activation.apply(s));
      }
      return s;
    });
  }
  computeOutputShape(e) {
    e = at(e);
    const t = [], s = this.dataFormat === "channelsLast" ? e.slice(1, e.length - 1) : e.slice(2);
    for (let a = 0; a < s.length; ++a) {
      const o = Ys(s[a], this.kernelSize[a], this.padding, this.strides[a], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[a]);
      t.push(o);
    }
    let r = [e[0]];
    return this.dataFormat === "channelsLast" ? (r = r.concat(t), r.push(this.filters)) : (r.push(this.filters), r = r.concat(t)), r;
  }
  getConfig() {
    const e = { filters: this.filters, kernelInitializer: At(this.kernelInitializer), kernelRegularizer: wt(this.kernelRegularizer), kernelConstraint: Jt(this.kernelConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  static verifyArgs(e) {
    if (!("filters" in e) || typeof e.filters != "number" || e.filters < 1) throw new W(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`);
  }
}
class gc extends mc {
  constructor(e) {
    super(2, e), gc.verifyArgs(e);
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !hx(e.kernelSize, "number", 1, 2)) throw new W(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`);
  }
}
gc.className = "Conv2D";
ne(gc);
class yc extends mc {
  constructor(e) {
    super(3, e), yc.verifyArgs(e);
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !(Array.isArray(e.kernelSize) && (e.kernelSize.length === 1 || e.kernelSize.length === 3))) throw new W(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`);
  }
}
yc.className = "Conv3D";
ne(yc);
class Bx extends gc {
  constructor(e) {
    if (super(e), this.inputSpec = [new Ut({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid") throw new W(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e) {
    if (e = at(e), e.length !== 4) throw new W("Input should have rank 4; Received input shape: " + JSON.stringify(e));
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null) throw new W("The channel dimension of the inputs should be defined. Found `None`.");
    const s = e[t], r = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", r, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [new Ut({ ndim: 4, axes: { [t]: s } })], this.built = true;
  }
  call(e, t) {
    return H(() => {
      let s = Fe(e);
      if (s.shape.length !== 4) throw new W(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const r = s.shape, a = r[0];
      let o, i;
      this.dataFormat === "channelsFirst" ? (o = 2, i = 3) : (o = 1, i = 2);
      const u = r[o], c = r[i], l = this.kernelSize[0], d = this.kernelSize[1], h = this.strides[0], p = this.strides[1], f = hr(u, h, l, this.padding), m = hr(c, p, d, this.padding), g = [a, f, m, this.filters];
      this.dataFormat !== "channelsLast" && (s = Ye(s, [0, 2, 3, 1]));
      let y = gf(s, this.kernel.read(), g, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (y = Ye(y, [0, 3, 1, 2])), this.bias != null && (y = or(y, this.bias.read(), this.dataFormat)), this.activation != null && (y = this.activation.apply(y)), y;
    });
  }
  computeOutputShape(e) {
    e = at(e);
    const t = e.slice();
    let s, r, a;
    this.dataFormat === "channelsFirst" ? (s = 1, r = 2, a = 3) : (s = 3, r = 1, a = 2);
    const o = this.kernelSize[0], i = this.kernelSize[1], u = this.strides[0], c = this.strides[1];
    return t[s] = this.filters, t[r] = hr(t[r], u, o, this.padding), t[a] = hr(t[a], c, i, this.padding), t;
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.dilationRate, e;
  }
}
Bx.className = "Conv2DTranspose";
ne(Bx);
class Wx extends yc {
  constructor(e) {
    if (super(e), this.inputSpec = [new Ut({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid") throw new W(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e) {
    if (e = at(e), e.length !== 5) throw new W("Input should have rank 5; Received input shape: " + JSON.stringify(e));
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null) throw new W("The channel dimension of the inputs should be defined. Found `None`.");
    const s = e[t], r = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", r, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [new Ut({ ndim: 5, axes: { [t]: s } })], this.built = true;
  }
  call(e, t) {
    return H(() => {
      let s = Fe(e);
      if (s.shape.length !== 5) throw new W(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const r = s.shape, a = r[0];
      let o, i, u;
      this.dataFormat === "channelsFirst" ? (u = 2, o = 3, i = 4) : (u = 1, o = 2, i = 3);
      const c = r[u], l = r[o], d = r[i], h = this.kernelSize[0], p = this.kernelSize[1], f = this.kernelSize[2], m = this.strides[0], g = this.strides[1], y = this.strides[2], b = hr(c, m, h, this.padding), x = hr(l, g, p, this.padding), w = hr(d, y, f, this.padding), C = [a, b, x, w, this.filters];
      this.dataFormat !== "channelsLast" && (s = Ye(s, [0, 2, 3, 4, 1]));
      let v = nb(s, this.kernel.read(), C, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (v = Ye(v, [0, 4, 1, 2, 3])), this.bias !== null && (v = or(v, this.bias.read(), this.dataFormat)), this.activation !== null && (v = this.activation.apply(v)), v;
    });
  }
  computeOutputShape(e) {
    e = at(e);
    const t = e.slice();
    let s, r, a, o;
    this.dataFormat === "channelsFirst" ? (s = 1, r = 2, a = 3, o = 4) : (s = 4, r = 1, a = 2, o = 3);
    const i = this.kernelSize[0], u = this.kernelSize[1], c = this.kernelSize[2], l = this.strides[0], d = this.strides[1], h = this.strides[2];
    return t[s] = this.filters, t[r] = hr(t[r], l, i, this.padding), t[a] = hr(t[a], d, u, this.padding), t[o] = hr(t[o], h, c, this.padding), t;
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.dilationRate, e;
  }
}
Wx.className = "Conv3DTranspose";
ne(Wx);
class g$ extends mc {
  constructor(e, t) {
    if (super(e, t), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, t.filters == null) throw new W("The `filters` configuration field is required by SeparableConv, but is unspecified.");
    if (t.kernelInitializer != null || t.kernelRegularizer != null || t.kernelConstraint != null) throw new W("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
    if (t.padding != null && t.padding !== "same" && t.padding !== "valid") throw new W(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);
    this.depthMultiplier = t.depthMultiplier == null ? 1 : t.depthMultiplier, this.depthwiseInitializer = Nt(t.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = Tt(t.depthwiseRegularizer), this.depthwiseConstraint = en(t.depthwiseConstraint), this.pointwiseInitializer = Nt(t.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = Tt(t.pointwiseRegularizer), this.pointwiseConstraint = en(t.pointwiseConstraint);
  }
  build(e) {
    if (e = at(e), e.length < this.rank + 2) throw new W(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(e)}`);
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null || e[t] < 0) throw new W(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);
    const s = e[t], r = this.kernelSize.concat([s, this.depthMultiplier]), a = [];
    for (let i = 0; i < this.rank; ++i) a.push(1);
    a.push(s * this.depthMultiplier, this.filters);
    const o = true;
    this.depthwiseKernel = this.addWeight("depthwise_kernel", r, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, o, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", a, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, o, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, o, this.biasConstraint) : this.bias = null, this.inputSpec = [new Ut({ ndim: this.rank + 2, axes: { [t]: s } })], this.built = true;
  }
  call(e, t) {
    return H(() => {
      e = Fe(e);
      let s;
      if (this.rank === 1) throw new Ge("1D separable convolution is not implemented yet.");
      return this.rank === 2 && (this.dataFormat === "channelsFirst" && (e = Ye(e, [0, 2, 3, 1])), s = _f(e, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (s = or(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), this.dataFormat === "channelsFirst" && (s = Ye(s, [0, 3, 1, 2])), s;
    });
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, delete e.kernelInitializer, delete e.kernelRegularizer, delete e.kernelConstraint, e.depthwiseInitializer = At(this.depthwiseInitializer), e.pointwiseInitializer = At(this.pointwiseInitializer), e.depthwiseRegularizer = wt(this.depthwiseRegularizer), e.pointwiseRegularizer = wt(this.pointwiseRegularizer), e.depthwiseConstraint = Jt(this.depthwiseConstraint), e.pointwiseConstraint = Jt(this.pointwiseConstraint), e;
  }
}
g$.className = "SeparableConv";
class Vx extends g$ {
  constructor(e) {
    super(2, e);
  }
}
Vx.className = "SeparableConv2D";
ne(Vx);
class Sh extends mc {
  constructor(e) {
    super(1, e), Sh.verifyArgs(e), this.inputSpec = [{ ndim: 3 }];
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, delete e.dataFormat, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !hx(e.kernelSize, "number", 1, 1)) throw new W(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`);
  }
}
Sh.className = "Conv1D";
ne(Sh);
class Ux extends qe {
  constructor(e) {
    super(e), typeof e.cropping == "number" ? this.cropping = [[e.cropping, e.cropping], [e.cropping, e.cropping]] : typeof e.cropping[0] == "number" ? this.cropping = [[e.cropping[0], e.cropping[0]], [e.cropping[1], e.cropping[1]]] : this.cropping = e.cropping, this.dataFormat = e.dataFormat === void 0 ? "channelsLast" : e.dataFormat, this.inputSpec = [{ ndim: 4 }];
  }
  computeOutputShape(e) {
    return this.dataFormat === "channelsFirst" ? [e[0], e[1], e[2] - this.cropping[0][0] - this.cropping[0][1], e[3] - this.cropping[1][0] - this.cropping[1][1]] : [e[0], e[1] - this.cropping[0][0] - this.cropping[0][1], e[2] - this.cropping[1][0] - this.cropping[1][1], e[3]];
  }
  call(e, t) {
    return H(() => {
      if (e = Fe(e), this.dataFormat === "channelsLast") {
        const s = Jh(e, this.cropping[0][0], e.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return Jh(s, this.cropping[1][0], e.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      } else {
        const s = Jh(e, this.cropping[0][0], e.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return Jh(s, this.cropping[1][0], e.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    const e = { cropping: this.cropping, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Ux.className = "Cropping2D";
ne(Ux);
class Gx extends qe {
  constructor(e) {
    super(e), this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = e.size == null ? this.DEFAULT_SIZE : e.size, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Mt(this.dataFormat), this.interpolation = e.interpolation == null ? "nearest" : e.interpolation, UM(this.interpolation);
  }
  computeOutputShape(e) {
    if (this.dataFormat === "channelsFirst") {
      const t = e[2] == null ? null : this.size[0] * e[2], s = e[3] == null ? null : this.size[1] * e[3];
      return [e[0], e[1], t, s];
    } else {
      const t = e[1] == null ? null : this.size[0] * e[1], s = e[2] == null ? null : this.size[1] * e[2];
      return [e[0], t, s, e[3]];
    }
  }
  call(e, t) {
    return H(() => {
      let s = Fe(e);
      const r = s.shape;
      if (this.dataFormat === "channelsFirst") {
        s = Ye(s, [0, 2, 3, 1]);
        const a = this.size[0] * r[2], o = this.size[1] * r[3], i = this.interpolation === "nearest" ? Ds.resizeNearestNeighbor(s, [a, o]) : Ds.resizeBilinear(s, [a, o]);
        return Ye(i, [0, 3, 1, 2]);
      } else {
        const a = this.size[0] * r[1], o = this.size[1] * r[2];
        return this.interpolation === "nearest" ? Ds.resizeNearestNeighbor(s, [a, o]) : Ds.resizeBilinear(s, [a, o]);
      }
    });
  }
  getConfig() {
    const e = { size: this.size, dataFormat: this.dataFormat, interpolation: this.interpolation }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Gx.className = "UpSampling2D";
ne(Gx);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function LW(n, e, t = [1, 1], s = "valid", r, a) {
  return H(() => {
    r == null && (r = er()), Mt(r);
    let o = Mx(n, r);
    if (n.rank !== 4) throw new W(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);
    if (e.rank !== 4) throw new W(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);
    return o = rc(o, e, t, s === "same" ? "same" : "valid", "NHWC", a), r === "channelsFirst" && (o = Ye(o, [0, 3, 1, 2])), o;
  });
}
class Hx extends Cm {
  constructor(e) {
    super(2, e), this.depthwiseKernel = null, this.depthMultiplier = e.depthMultiplier == null ? 1 : e.depthMultiplier, this.depthwiseInitializer = Nt(e.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = en(e.depthwiseConstraint), this.depthwiseRegularizer = Tt(e.depthwiseRegularizer);
  }
  build(e) {
    if (e = at(e), e.length < 4) throw new W(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);
    const t = this.dataFormat === "channelsFirst" ? 1 : 3;
    if (e[t] == null || e[t] < 0) throw new W(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);
    const s = e[t], r = [this.kernelSize[0], this.kernelSize[1], s, this.depthMultiplier];
    this.depthwiseKernel = this.addWeight("depthwise_kernel", r, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [s * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e, t) {
    return H(() => {
      e = Fe(e);
      let s = LW(e, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      return this.useBias && (s = or(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), s;
    });
  }
  computeOutputShape(e) {
    e = at(e);
    const t = this.dataFormat === "channelsFirst" ? e[2] : e[1], s = this.dataFormat === "channelsFirst" ? e[3] : e[2], r = this.dataFormat === "channelsFirst" ? e[1] * this.depthMultiplier : e[3] * this.depthMultiplier, a = Ys(t, this.kernelSize[0], this.padding, this.strides[0]), o = Ys(s, this.kernelSize[1], this.padding, this.strides[1]);
    return this.dataFormat === "channelsFirst" ? [e[0], r, a, o] : [e[0], a, o, r];
  }
  getConfig() {
    const e = super.getConfig();
    return e.depthMultiplier = this.depthMultiplier, e.depthwiseInitializer = At(this.depthwiseInitializer), e.depthwiseRegularizer = wt(this.depthwiseRegularizer), e.depthwiseConstraint = Jt(this.depthwiseRegularizer), e;
  }
}
Hx.className = "DepthwiseConv2D";
ne(Hx);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function y$(n, e, t, s) {
  if (Array.isArray(n)) {
    if (e != null || t != null) throw new W("When inputs is an array, neither initialState or constants should be provided");
    s != null && (t = n.slice(n.length - s, n.length), n = n.slice(0, n.length - s)), n.length > 1 && (e = n.slice(1, n.length)), n = n[0];
  }
  function r(a) {
    return a == null || Array.isArray(a) ? a : [a];
  }
  return e = r(e), t = r(t), { inputs: n, initialState: e, constants: t };
}
function b$(n, e, t, s = false, r, a, o = false, i = false) {
  return H(() => {
    const u = e.shape.length;
    if (u < 3) throw new W(`Input should be at least 3D, but is ${u}D.`);
    const c = [1, 0].concat(Js(2, u));
    e = Ye(e, c), o && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), r != null && (r = ue(ue(r, "bool"), "float32"), r.rank === u - 1 && (r = mn(r, -1)), r = Ye(r, c)), s && (e = Ss(e, 0), r != null && (r = Ss(r, 0)));
    const l = [];
    let d, h = t;
    const p = e.shape[0], f = vs(e);
    let m;
    r != null && (m = vs(r));
    for (let y = 0; y < p; ++y) {
      const b = f[y], x = H(() => n(b, h));
      if (r == null) d = x[0], h = x[1];
      else {
        const w = H(() => {
          const C = m[y], v = xe(os(C), C), k = te(z(x[0], C), z(h[0], v)), R = h.map((N, T) => te(z(x[1][T], C), z(N, v)));
          return { output: k, newStates: R };
        });
        d = w.output, h = w.newStates;
      }
      i && l.push(d);
    }
    let g;
    return i && (g = En(l, 1)), [d, g, h];
  });
}
class ir extends qe {
  constructor(e) {
    super(e);
    let t;
    if (e.cell == null) throw new W("cell property is missing for the constructor of RNN.");
    if (Array.isArray(e.cell) ? t = new vm({ cells: e.cell }) : t = e.cell, t.stateSize == null) throw new W("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
    this.cell = t, this.returnSequences = e.returnSequences == null ? false : e.returnSequences, this.returnState = e.returnState == null ? false : e.returnState, this.goBackwards = e.goBackwards == null ? false : e.goBackwards, this._stateful = e.stateful == null ? false : e.stateful, this.unroll = e.unroll == null ? false : e.unroll, this.supportsMasking = true, this.inputSpec = [new Ut({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
  }
  getStates() {
    if (this.states_ == null) {
      const e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      return Js(0, e).map((t) => null);
    } else return this.states_;
  }
  setStates(e) {
    this.states_ = e;
  }
  computeOutputShape(e) {
    Lg(e) && (e = e[0]), e = e;
    let t = this.cell.stateSize;
    Array.isArray(t) || (t = [t]);
    const s = t[0];
    let r;
    if (this.returnSequences ? r = [e[0], e[1], s] : r = [e[0], s], this.returnState) {
      const a = [];
      for (const o of t) a.push([e[0], o]);
      return [r].concat(a);
    } else return r;
  }
  computeMask(e, t) {
    return H(() => {
      Array.isArray(t) && (t = t[0]);
      const s = this.returnSequences ? t : null;
      if (this.returnState) {
        const r = this.states.map((a) => null);
        return [s].concat(r);
      } else return s;
    });
  }
  get states() {
    if (this.states_ == null) {
      const e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, t = [];
      for (let s = 0; s < e; ++s) t.push(null);
      return t;
    } else return this.states_;
  }
  set states(e) {
    this.states_ = e;
  }
  build(e) {
    if (this.numConstants != null) throw new Ge("Constants support is not implemented in RNN yet.");
    Lg(e) && (e = e[0]), e = e;
    const t = this.stateful ? e[0] : null, s = e.slice(2);
    this.inputSpec[0] = new Ut({ shape: [t, null, ...s] });
    const r = [e[0]].concat(e.slice(2));
    this.cell.build(r);
    let a;
    if (Array.isArray(this.cell.stateSize) ? a = this.cell.stateSize : a = [this.cell.stateSize], this.stateSpec != null) {
      if (!Be(this.stateSpec.map((o) => o.shape[o.shape.length - 1]), a)) throw new W(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
    } else this.stateSpec = a.map((o) => new Ut({ shape: [null, o] }));
    this.stateful && this.resetStates();
  }
  resetStates(e, t = false) {
    H(() => {
      if (!this.stateful) throw new cr("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape[0];
      if (s == null) throw new W("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.states_ == null) Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => Ot([s, r])) : this.states_ = [Ot([s, this.cell.stateSize])];
      else if (e == null) Me(this.states_), this.keptStates != null && (Me(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => Ot([s, r])) : this.states_[0] = Ot([s, this.cell.stateSize]);
      else {
        if (Array.isArray(e) || (e = [e]), e.length !== this.states_.length) throw new W(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
        t === true ? this.keptStates.push(this.states_.slice()) : Me(this.states_);
        for (let r = 0; r < this.states_.length; ++r) {
          const a = e[r], o = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[r] : this.cell.stateSize, i = [s, o];
          if (!Be(a.shape, i)) throw new W(`State ${r} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${a.shape}`);
          this.states_[r] = a;
        }
      }
      this.states_ = this.states_.map((r) => Qt(r.clone()));
    });
  }
  apply(e, t) {
    let s = t == null ? null : t.initialState, r = t == null ? null : t.constants;
    t == null && (t = {});
    const a = y$(e, s, r, this.numConstants);
    e = a.inputs, s = a.initialState, r = a.constants;
    let o = [], i = [];
    if (s != null) {
      t.initialState = s, o = o.concat(s), this.stateSpec = [];
      for (const c of s) this.stateSpec.push(new Ut({ shape: c.shape }));
      i = i.concat(this.stateSpec);
    }
    if (r != null && (t.constants = r, o = o.concat(r), this.numConstants = r.length), o[0] instanceof tr) {
      const c = [e].concat(o), l = this.inputSpec.concat(i), d = this.inputSpec;
      this.inputSpec = l;
      const h = super.apply(c, t);
      return this.inputSpec = d, h;
    } else return super.apply(e, t);
  }
  call(e, t) {
    return H(() => {
      const s = t == null ? null : t.mask, r = t == null ? null : t.training;
      let a = t == null ? null : t.initialState;
      e = Fe(e), a == null && (this.stateful ? a = this.states_ : a = this.getInitialState(e));
      const o = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (a.length !== o) throw new W(`RNN Layer has ${o} state(s) but was passed ${a.length} initial state(s).`);
      this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
      const i = { training: r }, c = b$((f, m) => {
        const g = this.cell.call([f].concat(m), i);
        return [g[0], g.slice(1)];
      }, e, a, this.goBackwards, s, null, this.unroll, this.returnSequences), l = c[0], d = c[1], h = c[2];
      this.stateful && this.resetStates(h, r);
      const p = this.returnSequences ? d : l;
      return this.returnState ? [p].concat(h) : p;
    });
  }
  getInitialState(e) {
    return H(() => {
      let t = Ot(e.shape);
      return t = we(t, [1, 2]), t = bh(t), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((s) => s > 1 ? Og(t, [1, s]) : t) : this.cell.stateSize > 1 ? [Og(t, [1, this.cell.stateSize])] : [t];
    });
  }
  get trainableWeights() {
    return this.trainable ? this.cell.trainableWeights : [];
  }
  get nonTrainableWeights() {
    return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.cell != null && this.cell.setFastWeightInitDuringBuild(e);
  }
  getConfig() {
    const e = super.getConfig(), t = { returnSequences: this.returnSequences, returnState: this.returnState, goBackwards: this.goBackwards, stateful: this.stateful, unroll: this.unroll };
    this.numConstants != null && (t.numConstants = this.numConstants);
    const s = this.cell.getConfig();
    return this.getClassName() === ir.className && (t.cell = { className: this.cell.getClassName(), config: s }), Object.assign(Object.assign(Object.assign({}, s), e), t);
  }
  static fromConfig(e, t, s = {}) {
    const r = t.cell, a = Xs(r, s);
    return new e(Object.assign(t, { cell: a }));
  }
}
ir.className = "RNN";
ne(ir);
class vh extends qe {
}
class Im extends vh {
  constructor(e) {
    super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, an(this.units, "units"), this.activation = Na(e.activation == null ? this.DEFAULT_ACTIVATION : e.activation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = Nt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = Nt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = Nt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = Tt(e.kernelRegularizer), this.recurrentRegularizer = Tt(e.recurrentRegularizer), this.biasRegularizer = Tt(e.biasRegularizer), this.kernelConstraint = en(e.kernelConstraint), this.recurrentConstraint = en(e.recurrentConstraint), this.biasConstraint = en(e.biasConstraint), this.dropout = Rl([1, $a([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = Rl([1, $a([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.dropoutFunc = e.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    e = at(e), this.kernel = this.addWeight("kernel", [e[e.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e, t) {
    return H(() => {
      if (e = e, e.length !== 2) throw new W(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);
      let s = e[1];
      e = e[0];
      const r = t.training == null ? false : t.training;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ta({ ones: () => os(e), rate: this.dropout, training: r, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ta({ ones: () => os(s), rate: this.recurrentDropout, training: r, dropoutFunc: this.dropoutFunc }));
      let a;
      const o = this.dropoutMask, i = this.recurrentDropoutMask;
      o != null ? a = yr(z(e, o), this.kernel.read()) : a = yr(e, this.kernel.read()), this.bias != null && (a = or(a, this.bias.read())), i != null && (s = z(s, i));
      let u = te(a, yr(s, this.recurrentKernel.read()));
      return this.activation != null && (u = this.activation.apply(u)), [u, u];
    });
  }
  getConfig() {
    const e = super.getConfig(), t = { units: this.units, activation: ka(this.activation), useBias: this.useBias, kernelInitializer: At(this.kernelInitializer), recurrentInitializer: At(this.recurrentInitializer), biasInitializer: At(this.biasInitializer), kernelRegularizer: wt(this.kernelRegularizer), recurrentRegularizer: wt(this.recurrentRegularizer), biasRegularizer: wt(this.biasRegularizer), activityRegularizer: wt(this.activityRegularizer), kernelConstraint: Jt(this.kernelConstraint), recurrentConstraint: Jt(this.recurrentConstraint), biasConstraint: Jt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout };
    return Object.assign(Object.assign({}, e), t);
  }
}
Im.className = "SimpleRNNCell";
ne(Im);
class jx extends ir {
  constructor(e) {
    e.cell = new Im(e), super(e);
  }
  call(e, t) {
    return H(() => {
      this.cell.dropoutMask != null && (Me(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Me(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = t == null ? null : t.mask, r = t == null ? null : t.training, a = t == null ? null : t.initialState;
      return super.call(e, { mask: s, training: r, initialState: a });
    });
  }
  static fromConfig(e, t) {
    return new e(t);
  }
}
jx.className = "SimpleRNN";
ne(jx);
class Sm extends vh {
  constructor(e) {
    if (super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.resetAfter) throw new W("GRUCell does not support reset_after parameter set to true.");
    this.units = e.units, an(this.units, "units"), this.activation = Na(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = Na(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = Nt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = Nt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = Nt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = Tt(e.kernelRegularizer), this.recurrentRegularizer = Tt(e.recurrentRegularizer), this.biasRegularizer = Tt(e.biasRegularizer), this.kernelConstraint = en(e.kernelConstraint), this.recurrentConstraint = en(e.recurrentConstraint), this.biasConstraint = en(e.biasConstraint), this.dropout = Rl([1, $a([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = Rl([1, $a([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    e = at(e);
    const t = e[e.length - 1];
    this.kernel = this.addWeight("kernel", [t, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e, t) {
    return H(() => {
      if (e = e, e.length !== 2) throw new W(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);
      const s = t.training == null ? false : t.training;
      let r = e[1];
      e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ta({ ones: () => os(e), rate: this.dropout, training: s, count: 3, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ta({ ones: () => os(r), rate: this.recurrentDropout, training: s, count: 3, dropoutFunc: this.dropoutFunc }));
      const a = this.dropoutMask, o = this.recurrentDropoutMask;
      let i, u, c;
      0 < this.dropout && this.dropout < 1 && (e = z(e, a[0]));
      let l = yr(e, this.kernel.read());
      this.useBias && (l = or(l, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (r = z(r, o[0]));
      const d = this.recurrentKernel.read(), [h, p] = Vn(d, [2 * this.units, this.units], d.rank - 1), f = yr(r, h), [m, g, y] = Vn(l, 3, l.rank - 1), [b, x] = Vn(f, 2, f.rank - 1);
      i = this.recurrentActivation.apply(te(m, b)), u = this.recurrentActivation.apply(te(g, x));
      const w = yr(z(u, r), p);
      c = this.activation.apply(te(y, w));
      const C = te(z(i, r), z(te(1, St(i)), c));
      return [C, C];
    });
  }
  getConfig() {
    const e = super.getConfig(), t = { units: this.units, activation: ka(this.activation), recurrentActivation: ka(this.recurrentActivation), useBias: this.useBias, kernelInitializer: At(this.kernelInitializer), recurrentInitializer: At(this.recurrentInitializer), biasInitializer: At(this.biasInitializer), kernelRegularizer: wt(this.kernelRegularizer), recurrentRegularizer: wt(this.recurrentRegularizer), biasRegularizer: wt(this.biasRegularizer), activityRegularizer: wt(this.activityRegularizer), kernelConstraint: Jt(this.kernelConstraint), recurrentConstraint: Jt(this.recurrentConstraint), biasConstraint: Jt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation, resetAfter: false };
    return Object.assign(Object.assign({}, e), t);
  }
}
Sm.className = "GRUCell";
ne(Sm);
class qx extends ir {
  constructor(e) {
    e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new Sm(e), super(e);
  }
  call(e, t) {
    return H(() => {
      this.cell.dropoutMask != null && (Me(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Me(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = t == null ? null : t.mask, r = t == null ? null : t.training, a = t == null ? null : t.initialState;
      return super.call(e, { mask: s, training: r, initialState: a });
    });
  }
  static fromConfig(e, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e(t);
  }
}
qx.className = "GRU";
ne(qx);
class $h extends vh {
  constructor(e) {
    super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, an(this.units, "units"), this.activation = Na(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = Na(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = Nt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = Nt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = Nt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = e.unitForgetBias, this.kernelRegularizer = Tt(e.kernelRegularizer), this.recurrentRegularizer = Tt(e.recurrentRegularizer), this.biasRegularizer = Tt(e.biasRegularizer), this.kernelConstraint = en(e.kernelConstraint), this.recurrentConstraint = en(e.recurrentConstraint), this.biasConstraint = en(e.biasConstraint), this.dropout = Rl([1, $a([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = Rl([1, $a([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    var t;
    e = at(e);
    const s = e[e.length - 1];
    this.kernel = this.addWeight("kernel", [s, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
    let r;
    if (this.useBias) {
      if (this.unitForgetBias) {
        const a = this.biasInitializer, o = this.units;
        r = new (t = class extends zs {
          apply(u, c) {
            const l = a.apply([o]), d = new cm().apply([o]), h = a.apply([o * 2]);
            return I1(I1(l, d), h);
          }
        }, t.className = "CustomInit", t)();
      } else r = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.units * 4], null, r, this.biasRegularizer, true, this.biasConstraint);
    } else this.bias = null;
    this.built = true;
  }
  call(e, t) {
    return H(() => {
      const s = t.training == null ? false : t.training;
      if (e = e, e.length !== 3) throw new W(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
      let r = e[1];
      const a = e[2];
      e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ta({ ones: () => os(e), rate: this.dropout, training: s, count: 4, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ta({ ones: () => os(r), rate: this.recurrentDropout, training: s, count: 4, dropoutFunc: this.dropoutFunc }));
      const o = this.dropoutMask, i = this.recurrentDropoutMask;
      let u, c, l, d;
      0 < this.dropout && this.dropout < 1 && (e = z(e, o[0]));
      let h = yr(e, this.kernel.read());
      0 < this.recurrentDropout && this.recurrentDropout < 1 && (r = z(r, i[0])), h = te(h, yr(r, this.recurrentKernel.read())), this.useBias && (h = or(h, this.bias.read()));
      const [p, f, m, g] = Vn(h, 4, h.rank - 1);
      u = this.recurrentActivation.apply(p), c = this.recurrentActivation.apply(f), l = te(z(c, a), z(u, this.activation.apply(m))), d = this.recurrentActivation.apply(g);
      const y = z(d, this.activation.apply(l));
      return [y, y, l];
    });
  }
  getConfig() {
    const e = super.getConfig(), t = { units: this.units, activation: ka(this.activation), recurrentActivation: ka(this.recurrentActivation), useBias: this.useBias, kernelInitializer: At(this.kernelInitializer), recurrentInitializer: At(this.recurrentInitializer), biasInitializer: At(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: wt(this.kernelRegularizer), recurrentRegularizer: wt(this.recurrentRegularizer), biasRegularizer: wt(this.biasRegularizer), activityRegularizer: wt(this.activityRegularizer), kernelConstraint: Jt(this.kernelConstraint), recurrentConstraint: Jt(this.recurrentConstraint), biasConstraint: Jt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation };
    return Object.assign(Object.assign({}, e), t);
  }
}
$h.className = "LSTMCell";
ne($h);
class Kx extends ir {
  constructor(e) {
    e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new $h(e), super(e);
  }
  call(e, t) {
    return H(() => {
      this.cell.dropoutMask != null && (Me(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Me(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = t == null ? null : t.mask, r = t == null ? null : t.training, a = t == null ? null : t.initialState;
      return super.call(e, { mask: s, training: r, initialState: a });
    });
  }
  static fromConfig(e, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e(t);
  }
}
Kx.className = "LSTM";
ne(Kx);
class vm extends vh {
  constructor(e) {
    super(e), this.cells = e.cells;
  }
  get stateSize() {
    const e = [];
    for (const t of this.cells.slice().reverse()) Array.isArray(t.stateSize) ? e.push(...t.stateSize) : e.push(t.stateSize);
    return e;
  }
  call(e, t) {
    return H(() => {
      e = e;
      let s = e.slice(1);
      const r = [];
      for (const i of this.cells.slice().reverse()) Array.isArray(i.stateSize) ? r.push(s.splice(0, i.stateSize.length)) : r.push(s.splice(0, 1));
      r.reverse();
      const a = [];
      let o;
      for (let i = 0; i < this.cells.length; ++i) {
        const u = this.cells[i];
        s = r[i], i === 0 ? o = [e[0]].concat(s) : o = [o[0]].concat(s), o = u.call(o, t), a.push(o.slice(1));
      }
      s = [];
      for (const i of a.slice().reverse()) s.push(...i);
      return [o[0]].concat(s);
    });
  }
  build(e) {
    Lg(e) && (e = e[0]), e = e;
    let t;
    this.cells.forEach((s, r) => {
      vi(`RNNCell_${r}`, () => {
        s.build(e), Array.isArray(s.stateSize) ? t = s.stateSize[0] : t = s.stateSize, e = [e[0], t];
      });
    }), this.built = true;
  }
  getConfig() {
    const e = super.getConfig(), t = (a) => ({ className: a.getClassName(), config: a.getConfig() }), r = { cells: this.cells.map(t) };
    return Object.assign(Object.assign({}, e), r);
  }
  static fromConfig(e, t, s = {}) {
    const r = [];
    for (const a of t.cells) r.push(Xs(a, s));
    return new e({ cells: r });
  }
  get trainableWeights() {
    if (!this.trainable) return [];
    const e = [];
    for (const t of this.cells) e.push(...t.trainableWeights);
    return e;
  }
  get nonTrainableWeights() {
    const e = [];
    for (const t of this.cells) e.push(...t.nonTrainableWeights);
    if (!this.trainable) {
      const t = [];
      for (const s of this.cells) t.push(...s.trainableWeights);
      return t.concat(e);
    }
    return e;
  }
  getWeights() {
    const e = [];
    for (const t of this.cells) e.push(...t.weights);
    return zg(e);
  }
  setWeights(e) {
    const t = [];
    for (const s of this.cells) {
      const r = s.weights.length, a = e.splice(r);
      for (let o = 0; o < s.weights.length; ++o) t.push([s.weights[o], a[o]]);
    }
    Cx(t);
  }
}
vm.className = "StackedRNNCells";
ne(vm);
function Ta(n) {
  const { ones: e, rate: t, training: s = false, count: r = 1, dropoutFunc: a } = n, o = () => a != null ? a(e(), t) : Ev(e(), t), i = () => wh(o, e, s);
  return !r || r <= 1 ? Qt(i().clone()) : Array(r).fill(void 0).map(i).map((c) => Qt(c.clone()));
}
/**
* @license
* Copyright 2020 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
var zW = function(n, e) {
  var t = {};
  for (var s in n) Object.prototype.hasOwnProperty.call(n, s) && e.indexOf(s) < 0 && (t[s] = n[s]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function") for (var r = 0, s = Object.getOwnPropertySymbols(n); r < s.length; r++) e.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(n, s[r]) && (t[s[r]] = n[s[r]]);
  return t;
};
class x$ extends ir {
  constructor(e) {
    if (e.unroll) throw new Ge("Unrolling is not possible with convolutional RNNs.");
    if (Array.isArray(e.cell)) throw new Ge("It is not possible at the moment to stack convolutional cells.");
    super(e), this.inputSpec = [new Ut({ ndim: 5 })];
  }
  call(e, t) {
    return H(() => {
      if (this.cell.dropoutMask != null && (Me(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Me(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), t && t.constants) throw new W("ConvRNN2D cell does not support constants");
      const s = t == null ? null : t.mask, r = t == null ? null : t.training, a = t == null ? null : t.initialState;
      return super.call(e, { mask: s, training: r, initialState: a });
    });
  }
  computeOutputShape(e) {
    let t = this.computeSingleOutputShape(e);
    return this.returnSequences || (t = [t[0], ...t.slice(2)]), this.returnState && (t = [t, ...Array(2).fill([e[0], ...t.slice(-3)])]), t;
  }
  getInitialState(e) {
    return H(() => {
      const { stateSize: t } = this.cell, s = e.shape, r = this.computeSingleOutputShape(s), a = [r[0], ...r.slice(2)], o = Ot(a);
      return Array.isArray(t) ? Array(t.length).fill(o) : [o];
    });
  }
  resetStates(e, t = false) {
    H(() => {
      if (!this.stateful) throw new cr("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape, r = this.computeSingleOutputShape(s), a = [r[0], ...r.slice(2)];
      if (s[0] == null) throw new W("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.getStates() == null) Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => Ot(a)) : this.states_ = [Ot(a)];
      else if (e == null) Me(this.states_), this.keptStates != null && (Me(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => Ot(a)) : this.states_[0] = Ot(a);
      else {
        if (Array.isArray(e) || (e = [e]), e.length !== this.states_.length) throw new W(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
        t ? this.keptStates.push(this.states_.slice()) : Me(this.states_);
        for (let i = 0; i < this.states_.length; ++i) {
          const u = e[i], c = a;
          if (!Be(u.shape, c)) throw new W(`State ${i} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${u.shape}`);
          this.states_[i] = u;
        }
      }
      this.states_ = this.states_.map((i) => Qt(i.clone()));
    });
  }
  computeSingleOutputShape(e) {
    const { dataFormat: t, filters: s, kernelSize: r, padding: a, strides: o, dilationRate: i } = this.cell, u = t === "channelsFirst", c = e[u ? 3 : 2], l = e[u ? 4 : 3], d = Ys(c, r[0], a, o[0], i[0]), h = Ys(l, r[1], a, o[1], i[1]);
    return [...e.slice(0, 2), ...u ? [s, d, h] : [d, h, s]];
  }
}
x$.className = "ConvRNN2D";
class $m extends $h {
  constructor(e) {
    const { filters: t, kernelSize: s, strides: r, padding: a, dataFormat: o, dilationRate: i } = e;
    super(Object.assign(Object.assign({}, e), { units: t })), this.filters = t, an(this.filters, "filters"), this.kernelSize = wl(s, 2, "kernelSize"), this.kernelSize.forEach((u) => an(u, "kernelSize")), this.strides = wl(r || 1, 2, "strides"), this.strides.forEach((u) => an(u, "strides")), this.padding = a || "valid", $s(this.padding), this.dataFormat = o || "channelsLast", Mt(this.dataFormat), this.dilationRate = wl(i || 1, 2, "dilationRate"), this.dilationRate.forEach((u) => an(u, "dilationRate"));
  }
  build(e) {
    var t;
    e = at(e);
    const s = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[s] == null) throw new W(`The channel dimension of the input should be defined. Found ${e[s]}`);
    const r = e[s], a = 4, o = this.kernelSize.concat([r, this.filters * a]);
    this.kernel = this.addWeight("kernel", o, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
    const i = this.kernelSize.concat([this.filters, this.filters * a]);
    if (this.recurrentKernel = this.addWeight("recurrent_kernel", i, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias) {
      let u;
      if (this.unitForgetBias) {
        const c = this.biasInitializer, l = this.filters;
        u = new (t = class extends zs {
          apply(h, p) {
            const f = c.apply([l]), m = Bn([l]), g = c.apply([l * 2]);
            return px([f, m, g]);
          }
        }, t.className = "CustomInit", t)();
      } else u = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.filters * a], null, u, this.biasRegularizer, true, this.biasConstraint);
    }
    this.built = true;
  }
  call(e, t) {
    return H(() => {
      if (e.length !== 3) throw new W(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
      const s = t.training || false, r = e[0], a = e[1], o = e[2], i = 4;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ta({ ones: () => os(r), rate: this.dropout, training: s, count: i, dropoutFunc: this.dropoutFunc }));
      const u = this.dropoutMask, c = (X, Z, ee) => !Z || !Z[ee] ? X : z(Z[ee], X);
      let l = c(r, u, 0), d = c(r, u, 1), h = c(r, u, 2), p = c(r, u, 3);
      0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ta({ ones: () => os(a), rate: this.recurrentDropout, training: s, count: i, dropoutFunc: this.dropoutFunc }));
      const f = this.recurrentDropoutMask;
      let m = c(a, f, 0), g = c(a, f, 1), y = c(a, f, 2), b = c(a, f, 3);
      const x = 3, [w, C, v, k] = Vn(this.kernel.read(), i, x), [R, N, T, S] = this.useBias ? Vn(this.bias.read(), i) : [null, null, null, null];
      l = this.inputConv(l, w, R, this.padding), d = this.inputConv(d, C, N, this.padding), h = this.inputConv(h, v, T, this.padding), p = this.inputConv(p, k, S, this.padding);
      const [E, P, M, L] = Vn(this.recurrentKernel.read(), i, x);
      m = this.recurrentConv(m, E), g = this.recurrentConv(g, P), y = this.recurrentConv(y, M), b = this.recurrentConv(b, L);
      const V = this.recurrentActivation.apply(te(l, m)), q = this.recurrentActivation.apply(te(d, g)), G = te(z(q, o), z(V, this.activation.apply(te(h, y)))), K = z(this.recurrentActivation.apply(te(p, b)), this.activation.apply(G));
      return [K, K, G];
    });
  }
  getConfig() {
    const e = super.getConfig(), { units: t } = e, s = zW(e, ["units"]), r = { filters: this.filters, kernelSize: this.kernelSize, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, strides: this.strides };
    return Object.assign(Object.assign({}, s), r);
  }
  inputConv(e, t, s, r) {
    const a = Mr(e, t, this.strides, r || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
    return s ? or(a, s, this.dataFormat) : a;
  }
  recurrentConv(e, t) {
    return Mr(e, t, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
  }
}
$m.className = "ConvLSTM2DCell";
ne($m);
class Xx extends x$ {
  constructor(e) {
    const t = new $m(e);
    super(Object.assign(Object.assign({}, e), { cell: t }));
  }
  static fromConfig(e, t) {
    return new e(t);
  }
}
Xx.className = "ConvLSTM2D";
ne(Xx);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class km extends qe {
  constructor(e) {
    super(e), this.rate = Math.max(Math.min(e.rate, 1), 0), this.noiseShape = e.noiseShape, this.seed = e.seed, this.supportsMasking = true;
  }
  getNoiseShape(e) {
    if (this.noiseShape == null) return this.noiseShape;
    const t = e.shape, s = [];
    for (let r = 0; r < this.noiseShape.length; ++r) s.push(this.noiseShape[r] == null ? t[r] : this.noiseShape[r]);
    return s;
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = Fe(e);
      if (0 < this.rate && this.rate < 1) {
        const r = t.training == null ? false : t.training, a = this.getNoiseShape(s);
        return wh(() => Ev(s, this.rate, a, this.seed), () => s, r);
      }
      return e;
    });
  }
  getConfig() {
    const e = { rate: this.rate, noiseShape: this.noiseShape, seed: this.seed }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  dispose() {
    return super.dispose();
  }
}
km.className = "Dropout";
ne(km);
class Yx extends km {
  constructor(e) {
    super(e), this.inputSpec = [{ ndim: 3 }];
  }
  getNoiseShape(e) {
    const t = e.shape;
    return [t[0], 1, t[2]];
  }
}
Yx.className = "SpatialDropout1D";
ne(Yx);
class Qx extends qe {
  constructor(e) {
    if (super(e), this.activation = null, this.useBias = true, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.batchInputShape == null && e.inputShape == null && e.inputDim != null) {
      let t = null;
      e.batchSize != null && (t = e.batchSize), this.batchInputShape = [t, e.inputDim];
    }
    this.units = e.units, an(this.units, "units"), this.activation = Na(e.activation), e.useBias != null && (this.useBias = e.useBias), this.kernelInitializer = Nt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = Nt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = en(e.kernelConstraint), this.biasConstraint = en(e.biasConstraint), this.kernelRegularizer = Tt(e.kernelRegularizer), this.biasRegularizer = Tt(e.biasRegularizer), this.activityRegularizer = Tt(e.activityRegularizer), this.supportsMasking = true, this.inputSpec = [{ minNDim: 2 }];
  }
  build(e) {
    e = at(e);
    const t = e[e.length - 1];
    this.kernel == null && (this.kernel = this.addWeight("kernel", [t, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: t } }], this.built = true;
  }
  computeOutputShape(e) {
    e = at(e);
    const t = e.slice();
    return t[t.length - 1] = this.units, t;
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = Fe(e), r = vv(this.activation.getClassName());
      let a;
      return r != null ? a = yr(s, this.kernel.read(), r, this.bias ? this.bias.read() : null) : (a = yr(s, this.kernel.read()), this.bias != null && (a = or(a, this.bias.read())), this.activation != null && (a = this.activation.apply(a))), a;
    });
  }
  getConfig() {
    const e = { units: this.units, activation: ka(this.activation), useBias: this.useBias, kernelInitializer: At(this.kernelInitializer), biasInitializer: At(this.biasInitializer), kernelRegularizer: wt(this.kernelRegularizer), biasRegularizer: wt(this.biasRegularizer), activityRegularizer: wt(this.activityRegularizer), kernelConstraint: Jt(this.kernelConstraint), biasConstraint: Jt(this.biasConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Qx.className = "Dense";
ne(Qx);
class Zx extends qe {
  constructor(e) {
    e = e || {}, super(e), this.inputSpec = [{ minNDim: 3 }], this.dataFormat = e.dataFormat;
  }
  computeOutputShape(e) {
    e = at(e);
    for (const t of e.slice(1)) if (t == null) throw new W(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
    return [e[0], ma(e, 1)];
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      let s = Fe(e);
      if (this.dataFormat === "channelsFirst" && s.rank > 1) {
        const r = [0];
        for (let a = 2; a < s.rank; ++a) r.push(a);
        r.push(1), s = Ye(s, r);
      }
      return XM(s);
    });
  }
  getConfig() {
    const e = {};
    this.dataFormat != null && (e.dataFormat = this.dataFormat);
    const t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Zx.className = "Flatten";
ne(Zx);
class Jx extends qe {
  constructor(e) {
    super(e), this.supportsMasking = true, this.activation = Na(e.activation);
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = Fe(e);
      return this.activation.apply(s);
    });
  }
  getConfig() {
    const e = { activation: ka(this.activation) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Jx.className = "Activation";
ne(Jx);
class ew extends qe {
  constructor(e) {
    super(e), this.n = e.n, this.inputSpec = [{ ndim: 2 }];
  }
  computeOutputShape(e) {
    return [e[0], this.n, e[1]];
  }
  call(e, t) {
    return H(() => (e = Fe(e), qM(e, this.n)));
  }
  getConfig() {
    const e = { n: this.n }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
ew.className = "RepeatVector";
ne(ew);
class tw extends qe {
  constructor(e) {
    super(e), this.targetShape = e.targetShape;
    for (let t = 0; t < this.targetShape.length; ++t) this.isUnknown(this.targetShape[t]) && (this.targetShape[t] = null);
  }
  isUnknown(e) {
    return e < 0 || e == null;
  }
  fixUnknownDimension(e, t) {
    const s = "Total size of new array must be unchanged.", r = t.slice();
    let a = 1, o = null;
    for (let u = 0; u < r.length; ++u) {
      const c = r[u];
      if (this.isUnknown(c)) if (o === null) o = u;
      else throw new W("Can only specifiy one unknown dimension.");
      else a *= c;
    }
    const i = ma(e);
    if (o !== null) {
      if (a === 0 || i % a !== 0) throw new W(s);
      r[o] = i / a;
    } else if (i !== a) throw new W(s);
    return r;
  }
  computeOutputShape(e) {
    let t = false;
    for (let s = 0; s < e.length; ++s) if (this.isUnknown(e[s])) {
      t = true;
      break;
    }
    return t ? e.slice(0, 1).concat(this.targetShape) : e.slice(0, 1).concat(this.fixUnknownDimension(e.slice(1), this.targetShape));
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = Fe(e), r = s.shape, a = r.slice(0, 1).concat(this.fixUnknownDimension(r.slice(1), this.targetShape));
      return B(s, a);
    });
  }
  getConfig() {
    const e = { targetShape: this.targetShape }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
tw.className = "Reshape";
ne(tw);
class nw extends qe {
  constructor(e) {
    if (super(e), e.dims == null) throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
    if (!Array.isArray(e.dims)) throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);
    const t = Js(1, e.dims.length + 1);
    if (!Be(e.dims.slice().sort(), t)) throw new Error("Invalid permutation `dims`: " + JSON.stringify(e.dims) + " `dims` must contain consecutive integers starting from 1.");
    this.dims = e.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new Ut({ ndim: this.dims.length + 1 })];
  }
  computeOutputShape(e) {
    e = at(e);
    const t = e.slice();
    return this.dims.forEach((s, r) => {
      t[r + 1] = e[s];
    }), t;
  }
  call(e, t) {
    return Ye(Fe(e), this.dimsIncludingBatch);
  }
  getConfig() {
    const e = { dims: this.dims }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
nw.className = "Permute";
ne(nw);
class sw extends qe {
  constructor(e) {
    super(e ?? {}), this.supportsMasking = true, e != null ? this.maskValue = e.maskValue == null ? 0 : e.maskValue : this.maskValue = 0;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { maskValue: this.maskValue };
    return Object.assign(t, e), t;
  }
  computeMask(e, t) {
    const s = Fe(e);
    return ad(Pi(s, this.maskValue), -1);
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = Fe(e), o = ad(Pi(s, this.maskValue), -1, true);
      return z(s, ue(o, s.dtype));
    });
  }
}
sw.className = "Masking";
ne(sw);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class rw extends qe {
  constructor(e) {
    if (super(e), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", e.batchInputShape == null && e.inputShape == null) {
      let t = null;
      e.batchSize != null && (t = e.batchSize), e.inputLength == null ? this.batchInputShape = [t, null] : this.batchInputShape = [t].concat(pt(e.inputLength));
    }
    this.inputDim = e.inputDim, an(this.inputDim, "inputDim"), this.outputDim = e.outputDim, an(this.outputDim, "outputDim"), this.embeddingsInitializer = Nt(e.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = Tt(e.embeddingsRegularizer), this.activityRegularizer = Tt(e.activityRegularizer), this.embeddingsConstraint = en(e.embeddingsConstraint), this.maskZero = e.maskZero, this.supportsMasking = e.maskZero, this.inputLength = e.inputLength;
  }
  build(e) {
    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint), this.built = true;
  }
  warnOnIncompatibleInputShape(e) {
  }
  computeMask(e, t) {
    return H(() => this.maskZero ? (e = Fe(e), Pi(e, Ze(e))) : null);
  }
  computeOutputShape(e) {
    if (e = at(e), this.inputLength == null) return [...e, this.outputDim];
    const t = pt(this.inputLength);
    if (t.length !== e.length - 1) throw new W(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
    {
      let s = 0;
      for (let r = 0; r < t.length; ++r) {
        const a = t[r], o = e[r + 1];
        if (a != null && o != null && a !== o) throw new W(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
        a == null && (t[s] = o), s++;
      }
    }
    return [e[0], ...t, this.outputDim];
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      let s = Fe(e);
      s.dtype !== "int32" && (s = gr(s, "int32"));
      const r = _v(this.embeddings.read(), B(s, [s.size]));
      return B(r, at(this.computeOutputShape(s.shape)));
    });
  }
  getConfig() {
    const e = { inputDim: this.inputDim, outputDim: this.outputDim, embeddingsInitializer: At(this.embeddingsInitializer), embeddingsRegularizer: wt(this.embeddingsRegularizer), activityRegularizer: wt(this.activityRegularizer), embeddingsConstraint: Jt(this.embeddingsConstraint), maskZero: this.maskZero, inputLength: this.inputLength }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
rw.className = "Embedding";
ne(rw);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class tl extends qe {
  constructor(e) {
    super(e || {}), this.supportsMasking = true;
  }
  mergeFunction(e) {
    throw new Ge();
  }
  computeElementwiseOpOutputShape(e, t) {
    if (e == null || t == null) return null;
    if (e.length < t.length) return this.computeElementwiseOpOutputShape(t, e);
    if (t.length === 0) return e;
    const s = e.slice(0, e.length - t.length);
    for (let r = 0; r < t.length; ++r) {
      const a = e[e.length - t.length + r], o = t[r];
      if (a == null || o == null || a < 0 || o < 0) s.push(null);
      else if (a === 1) s.push(o);
      else if (o === 1) s.push(a);
      else {
        if (a !== o) throw new W("Operands could not be broadcast together with shapes " + JSON.stringify(e) + " " + JSON.stringify(t));
        s.push(a);
      }
    }
    return s;
  }
  build(e) {
    if (Array.isArray(e) && !Array.isArray(e[0]) && (e = [at(e)]), e = e, e.length < 2) throw new W(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);
    let t = [];
    for (const a of e) a != null && a[0] !== null && t.push(a[0]);
    if (t = fa(t), t.length > 1) throw new W(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);
    let s = e[0] == null ? null : e[0].slice(1);
    for (let a = 1; a < e.length; ++a) {
      const o = e[a] == null ? null : e[a].slice(1);
      s = this.computeElementwiseOpOutputShape(s, o);
    }
    const r = e.map((a) => a.length);
    e.indexOf(null) === -1 && fa(r).length === 1 ? this.reshapeRequired = false : this.reshapeRequired = true;
  }
  call(e, t) {
    return H(() => {
      if (e = e, this.reshapeRequired) {
        const s = [], r = e.map((a) => a.rank);
        if (r.indexOf(null) === -1) {
          const a = $a(r);
          for (let o of e) {
            const i = o.rank;
            for (let u = 0; u < a - i; ++u) o = bh(o, 1);
            s.push(o);
          }
          return this.mergeFunction(s);
        } else {
          let a = false;
          for (const u of e) {
            const c = u.rank;
            if (c == null) {
              const l = u.shape, d = l[0], h = l.slice(1).concat([d]);
              let p = B(u, [d].concat(ma(l.slice(1))));
              p = Ye(p, [1, 0]), p = B(p, h), s.push(p), a = true;
            } else if (c > 1) {
              const l = Js(1, c).concat([0]);
              s.push(Ye(u, l)), a = true;
            } else s.push(u);
          }
          let o = this.mergeFunction(s);
          const i = o.rank;
          if (a) {
            if (i == null) {
              const u = o.shape, c = u.length, l = u[c - 1], d = [l].concat(u.slice(0, u.length - 1));
              o = B(Ye(B(o, [-1, l]), [1, 0]), d);
            } else if (i > 1) {
              const u = [i - 1].concat(Js(0, i - 1));
              o = Ye(o, u);
            }
          }
          return o;
        }
      } else return this.mergeFunction(e);
    });
  }
  computeOutputShape(e) {
    e = e;
    let t;
    e[0] == null ? t = null : t = e[0].slice(1);
    for (let r = 1; r < e.length; ++r) {
      const a = e[r] == null ? null : e[r].slice(1);
      t = this.computeElementwiseOpOutputShape(t, a);
    }
    let s = [];
    for (const r of e) r != null && r[0] !== null && s.push(r[0]);
    return s = fa(s), s.length === 1 ? t = s.concat(t) : t = [null].concat(t), t;
  }
  computeMask(e, t) {
    return H(() => {
      if (t == null) return null;
      if (!Array.isArray(t)) throw new W("`mask` should be an Array");
      if (!Array.isArray(e)) throw new W("`inputs` should be an Array");
      if (t.length !== e.length) throw new W(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);
      if (t.every((r) => r == null)) return null;
      t = t.map((r) => r == null ? r : mn(r, 0));
      let s = t[0];
      for (let r = 1; r < t.length - 1; ++r) s = Ps(s, t[r]);
      return s;
    });
  }
}
class aw extends tl {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return H(() => {
      let t = e[0].clone();
      for (let s = 1; s < e.length; ++s) t = te(t, e[s]);
      return t;
    });
  }
}
aw.className = "Add";
ne(aw);
class ow extends tl {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return H(() => {
      let t = e[0].clone();
      for (let s = 1; s < e.length; ++s) t = z(t, e[s]);
      return t;
    });
  }
}
ow.className = "Multiply";
ne(ow);
class iw extends tl {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return H(() => {
      let t = e[0].clone();
      for (let s = 1; s < e.length; ++s) t = te(t, e[s]);
      return z(1 / e.length, t);
    });
  }
}
iw.className = "Average";
ne(iw);
class uw extends tl {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return H(() => {
      let t = e[0];
      for (let s = 1; s < e.length; ++s) t = Sr(t, e[s]);
      return t;
    });
  }
}
uw.className = "Maximum";
ne(uw);
class lw extends tl {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return H(() => {
      let t = e[0];
      for (let s = 1; s < e.length; ++s) t = va(t, e[s]);
      return t;
    });
  }
}
lw.className = "Minimum";
ne(lw);
class cw extends tl {
  constructor(e) {
    super(e), this.DEFAULT_AXIS = -1, e == null && (e = {}), this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis, this.supportsMasking = true, this.reshapeRequired = false;
  }
  build(e) {
    if (!(Array.isArray(e) && Array.isArray(e[0])) || e.length === 1) throw new W("A `Concatenate` layer should be called on a list of at least 2 inputs");
    e = e;
    let t = true;
    for (const r of e) if (r != null) {
      t = false;
      break;
    }
    if (t) return;
    const s = [];
    for (let r = 0; r < e.length; ++r) {
      const a = e[r].slice();
      a.splice(this.axis, 1);
      let o = false;
      for (const i of s) if (Be(i, a)) {
        o = true;
        break;
      }
      o || s.push(a);
    }
    if (s.length > 1) throw new W("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e));
  }
  mergeFunction(e) {
    return H(() => px(e, this.axis));
  }
  computeOutputShape(e) {
    if (!(Array.isArray(e) && Array.isArray(e[0]))) throw new W("A `Concatenate` layer should be called on a list of inputs.");
    const t = e, s = t[0].slice(), r = this.axis < 0 ? s.length + this.axis : this.axis;
    for (const a of t.slice(1)) {
      if (s[r] == null || a[r] == null) {
        s[r] = null;
        break;
      }
      s[r] += a[r];
    }
    return s;
  }
  computeMask(e, t) {
    if (t == null) return null;
    if (!Array.isArray(t)) throw new W("`mask` should be an array for Concatenate");
    if (!Array.isArray(e)) throw new W("`inputs` should be an array for Concatenate");
    if (t.length !== e.length) throw new W(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);
    return H(() => {
      let s = true;
      if (t.forEach((o) => {
        if (o != null) {
          s = false;
          return;
        }
      }), s) return null;
      const r = [];
      for (let o = 0; o < e.length; ++o) t[o] == null ? r.push(ue(os(e[o]), "bool")) : t[o].rank < e[o].rank ? r.push(mn(t[o], -1)) : r.push(t[o]);
      const a = Lt(r, this.axis);
      return ff(a, -1, false);
    });
  }
  getConfig() {
    const e = { axis: this.axis }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
cw.className = "Concatenate";
ne(cw);
function Oc(n, e) {
  for (; n < 0; ) n += e;
  return n;
}
function MW(n, e, t) {
  if (n.shape.length > 3 || e.shape.length > 3) throw new Ge("batchDot is not implemented for tensors of 4D or higher rank yet");
  if ($(n.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`), $(n.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`), typeof t == "number" && (t = [t, t]), n.dtype === "complex64" || e.dtype === "complex64") throw new Ge("batchDot is not implemented for complex64-type Tensors yet.");
  const s = n.shape.length, r = e.shape.length;
  t == null && (t = [s - 1, r - 2]);
  const a = t;
  return H(() => {
    let o;
    if (s > r) {
      o = s - r;
      const u = [];
      for (let c = 0; c < o; ++c) u.push(1);
      e = B(e, e.shape.concat(u));
    } else if (r > s) {
      o = r - s;
      const u = [];
      for (let c = 0; c < o; ++c) u.push(1);
      n = B(n, n.shape.concat(u));
    } else o = 0;
    let i;
    if (n.shape.length === 2 && e.shape.length === 2) a[0] === a[1] ? i = we(z(n, e), a[0]) : i = we(z(Ye(n, [1, 0]), e), a[1]);
    else {
      const u = a[0] !== n.shape.length - 1, c = a[1] === e.shape.length - 1;
      i = je(n, e, u, c);
    }
    if (o > 0) {
      let u;
      s > r ? u = s + r - 3 : u = s - 1;
      const c = [];
      for (let l = u; l < u + o; ++l) c.push(l);
      i = ei(i, c);
    }
    return i.shape.length === 1 && (i = mn(i, 1)), i;
  });
}
class dw extends tl {
  constructor(e) {
    super(e), this.axes = e.axes, this.normalize = e.normalize == null ? false : e.normalize, this.supportsMasking = true, this.reshapeRequired = false;
  }
  build(e) {
    $(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const t = e[0], s = e[1];
    if (t.length > 3 || s.length > 3) throw new Ge("Dot layer does not support tensors of 4D or higher rank yet.");
    const r = this.interpretAxes(t, s);
    if (t[r[0]] !== s[r[1]]) throw new W(`Dimension incompatibility: ${t[r[0]]} !== ${s[r[1]]}`);
  }
  mergeFunction(e) {
    if (e.length !== 2) throw new W(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);
    let t = e[0], s = e[1], r;
    return Array.isArray(this.axes) ? r = this.axes.map((a, o) => Oc(a, e[o].shape.length)) : r = [Oc(this.axes, t.shape.length), Oc(this.axes, s.shape.length)], this.normalize && (t = zp(t, r[0]), s = zp(s, r[1])), MW(t, s, r);
  }
  interpretAxes(e, t) {
    let s;
    return Array.isArray(this.axes) ? s = this.axes : s = [Oc(this.axes, e.length), Oc(this.axes, t.length)], s;
  }
  computeOutputShape(e) {
    $(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const t = e[0].slice(), s = e[1].slice();
    if (t.length > 3 || s.length > 3) throw new Ge("Dot layer does not support tensors of 4D or higher rank yet.");
    const r = this.interpretAxes(t, s);
    t.splice(r[0], 1), s.splice(r[1], 1), s.splice(0, 1);
    const a = t.concat(s);
    return a.length === 1 && a.push(1), a;
  }
  computeMask(e, t) {
    return null;
  }
  getConfig() {
    const e = { axes: this.axes, normalize: this.normalize }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
dw.className = "Dot";
ne(dw);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class hw extends qe {
  constructor(e) {
    super(e), this.supportsMasking = true, this.stddev = e.stddev;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { stddev: this.stddev };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = Fe(e);
      return wh(() => te(lm(s.shape, 0, this.stddev), s), () => s, t.training || false);
    });
  }
}
hw.className = "GaussianNoise";
ne(hw);
class pw extends qe {
  constructor(e) {
    super(e), this.supportsMasking = true, this.rate = e.rate;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = Fe(e);
      return this.rate > 0 && this.rate < 1 ? wh(() => {
        const a = Math.sqrt(this.rate / (1 - this.rate));
        return z(s, lm(s.shape, 1, a));
      }, () => s, t.training || false) : s;
    });
  }
}
pw.className = "GaussianDropout";
ne(pw);
class fw extends qe {
  constructor(e) {
    super(e), this.supportsMasking = true, this.rate = e.rate, this.noiseShape = e.noiseShape;
  }
  _getNoiseShape(e) {
    return this.noiseShape || Fe(e).shape;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return H(() => {
      if (this.rate < 1 && this.rate > 0) {
        const s = this._getNoiseShape(e);
        return wh(() => {
          const a = Fe(e), i = -1.6732632423543772 * 1.0507009873554805;
          let u = Kr(Jo(s), this.rate);
          u = gr(u, "float32");
          const c = ((1 - this.rate) * (1 + this.rate * i ** 2)) ** -0.5, l = -c * i * this.rate, d = te(z(a, u), z(te(u, -1), i));
          return te(z(d, c), l);
        }, () => Fe(e), t.training || false);
      }
      return e;
    });
  }
}
fw.className = "AlphaDropout";
ne(fw);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function hd(n, e, t, s, r, a = 1e-3) {
  let o;
  if (n.rank === 2) o = Hy(n, e, t, s, r, a);
  else if (n.rank === 3) o = jy(n, e, t, s, r, a);
  else if (n.rank === 4) o = qy(n, e, t, s, r, a);
  else throw new Ge(`batchNormalization is not implemented for array of rank ${n.rank} yet`);
  return o;
}
function BW(n, e, t, s, r = 1e-3) {
  return H(() => {
    const a = Qd(n, s), o = a.mean, i = a.variance;
    return [hd(n, o, i, t, e, r), o, i];
  });
}
function WW(n, e, t, s, r = 1e-3) {
  return H(() => {
    const a = Qd(n, s), o = a.mean, i = a.variance, u = [];
    for (const f of Js(0, n.rank)) s.indexOf(f) !== -1 ? u.push(1) : u.push(n.shape[f]);
    const c = B(o, u), l = B(i, u), d = e == null ? null : B(e, u), h = t == null ? null : B(t, u);
    return [hd(n, c, l, h, d, r), o, i];
  });
}
function VW(n, e, t, s, r = 1e-3) {
  return Be(s.slice().sort(), Js(0, n.rank - 1)) ? BW(n, e, t, s, r) : WW(n, e, t, s, r);
}
class mw extends qe {
  constructor(e) {
    e == null && (e = {}), super(e), this.supportsMasking = true, this.axis = e.axis == null ? -1 : e.axis, this.momentum = e.momentum == null ? 0.99 : e.momentum, this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? true : e.center, this.scale = e.scale == null ? true : e.scale, this.betaInitializer = Nt(e.betaInitializer || "zeros"), this.gammaInitializer = Nt(e.gammaInitializer || "ones"), this.movingMeanInitializer = Nt(e.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = Nt(e.movingVarianceInitializer || "ones"), this.betaConstraint = en(e.betaConstraint), this.gammaConstraint = en(e.gammaConstraint), this.betaRegularizer = Tt(e.betaRegularizer), this.gammaRegularizer = Tt(e.gammaRegularizer);
  }
  build(e) {
    e = at(e);
    const t = this.axis >= 0 ? this.axis : this.axis + e.length, s = e[t];
    if (s == null) throw new W(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);
    this.inputSpec = [new Ut({ ndim: e.length, axes: { [t]: s } })];
    const r = [s];
    this.scale && (this.gamma = this.addWeight("gamma", r, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", r, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", r, null, this.movingMeanInitializer, null, false), this.movingVariance = this.addWeight("moving_variance", r, null, this.movingVarianceInitializer, null, false), this.built = true;
  }
  call(e, t) {
    return H(() => {
      const s = t.training == null ? false : t.training, r = Fe(e), a = r.shape, o = a.length, i = Js(0, o), u = this.axis >= 0 ? this.axis : this.axis + o;
      i.splice(u, 1);
      const c = Mi(1, o);
      c[u] = a[u];
      const l = i.slice();
      l.sort();
      const d = !Be(l, Js(0, o).slice(0, o - 1)), h = () => {
        if (d) {
          const b = B(this.movingMean.read(), c), x = B(this.movingVariance.read(), c), w = this.center ? B(this.beta.read(), c) : null, C = this.scale ? B(this.gamma.read(), c) : null;
          return hd(r, b, x, w, C, this.epsilon);
        } else return hd(r, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
      };
      if (!s) return h();
      const [p, f, m] = VW(r, this.gamma.read(), this.beta.read(), i, this.epsilon), g = (b, x, w) => {
        H(() => {
          const C = 1 - w, v = b.read(), k = z(xe(v, x), C);
          b.write(xe(v, k));
        });
      };
      return (() => {
        g(this.movingMean, f, this.momentum), g(this.movingVariance, m, this.momentum);
      })(), p;
    });
  }
  getConfig() {
    const e = { axis: this.axis, momentum: this.momentum, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: At(this.betaInitializer), gammaInitializer: At(this.gammaInitializer), movingMeanInitializer: At(this.movingMeanInitializer), movingVarianceInitializer: At(this.movingVarianceInitializer), betaRegularizer: wt(this.betaRegularizer), gammaRegularizer: wt(this.gammaRegularizer), betaConstraint: Jt(this.betaConstraint), gammaConstraint: Jt(this.gammaConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
mw.className = "BatchNormalization";
ne(mw);
class gw extends qe {
  constructor(e) {
    if (e == null && (e = {}), super(e), this.axis = e.axis == null ? -1 : e.axis, typeof this.axis == "number") {
      if (!Number.isInteger(this.axis)) throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
    } else if (Array.isArray(this.axis)) {
      for (const t of this.axis) if (!Number.isInteger(t)) throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
    } else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
    this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? true : e.center, this.scale = e.scale == null ? true : e.scale, this.betaInitializer = Nt(e.betaInitializer || "zeros"), this.gammaInitializer = Nt(e.gammaInitializer || "ones"), this.betaRegularizer = Tt(e.betaRegularizer), this.gammaRegularizer = Tt(e.gammaRegularizer), this.supportsMasking = true;
  }
  build(e) {
    e = at(e);
    const t = e.length;
    typeof this.axis == "number" && (this.axis = [this.axis]);
    for (let a = 0; a < this.axis.length; ++a) this.axis[a] < 0 && (this.axis[a] += t);
    for (const a of this.axis) if (a < 0 || a >= t) throw new Error(`Invalid axis: ${a}`);
    if (this.axis.length !== fa(this.axis).length) throw new Error(`Found duplicate axes in: ${this.axis}`);
    const s = this.axis.map((a) => e[a]), r = true;
    this.scale ? this.gamma = this.addWeight("gamma", s, "float32", this.gammaInitializer, this.gammaRegularizer, r) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", s, "float32", this.betaInitializer, this.betaRegularizer, r) : this.beta = null, this.built = true;
  }
  call(e, t) {
    const s = Fe(e), r = s.shape, a = r.length;
    return H(() => {
      let { mean: i, variance: u } = Qd(s, this.axis, true);
      const c = Mi(1, a);
      for (const m of this.axis) c[m] = r[m];
      const l = (m) => m != null && m.shape.length !== a ? B(m, c) : m;
      let d = this.scale ? l(this.gamma.read()) : null, h = this.center ? l(this.beta.read()) : null;
      const p = [], f = [];
      for (let m = 0; m < a; ++m) this.axis.indexOf(m) !== -1 ? (p.push(r[m]), f.push(1)) : (p.push(1), f.push(r[m]));
      return i = bs(i, p), u = bs(u, p), d != null && (d = bs(d, f)), h != null && (h = bs(h, f)), hd(s, i, u, h, d, this.epsilon);
    });
  }
  getConfig() {
    const e = { axis: this.axis, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: At(this.betaInitializer), gammaInitializer: At(this.gammaInitializer), betaRegularizer: wt(this.betaRegularizer), gammaRegularizer: wt(this.gammaRegularizer) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
gw.className = "LayerNormalization";
ne(gw);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function UW(n, e, t) {
  return H(() => {
    if (n.rank !== 4) throw new W(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);
    if (e == null && (e = [[1, 1], [1, 1]]), e.length !== 2 || e[0].length !== 2 || e[1].length !== 2) throw new W("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
    if (t == null && (t = er()), t !== "channelsLast" && t !== "channelsFirst") throw new W(`Unknown data format: ${t}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
    let s;
    return t === "channelsFirst" ? s = [[0, 0], [0, 0], e[0], e[1]] : s = [[0, 0], e[0], e[1], [0, 0]], Xr(n, s);
  });
}
class yw extends qe {
  constructor(e) {
    if (e == null && (e = {}), super(e), this.dataFormat = e.dataFormat == null ? er() : e.dataFormat, e.padding == null) this.padding = [[1, 1], [1, 1]];
    else if (typeof e.padding == "number") this.padding = [[e.padding, e.padding], [e.padding, e.padding]];
    else {
      if (e.padding = e.padding, e.padding.length !== 2) throw new W(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);
      let t, s;
      if (typeof e.padding[0] == "number") t = [e.padding[0], e.padding[0]], s = [e.padding[1], e.padding[1]];
      else {
        if (e.padding = e.padding, e.padding[0].length !== 2) throw new W(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);
        if (t = e.padding[0], e.padding[1].length !== 2) throw new W(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);
        s = e.padding[1];
      }
      this.padding = [t, s];
    }
    this.inputSpec = [new Ut({ ndim: 4 })];
  }
  computeOutputShape(e) {
    e = at(e);
    let t, s;
    return this.dataFormat === "channelsFirst" ? (e[2] != null && e[2] >= 0 ? t = e[2] + this.padding[0][0] + this.padding[0][1] : t = null, e[3] != null && e[3] >= 0 ? s = e[3] + this.padding[1][0] + this.padding[1][1] : s = null, [e[0], e[1], t, s]) : (e[1] != null && e[1] >= 0 ? t = e[1] + this.padding[0][0] + this.padding[0][1] : t = null, e[2] != null && e[2] >= 0 ? s = e[2] + this.padding[1][0] + this.padding[1][1] : s = null, [e[0], t, s, e[3]]);
  }
  call(e, t) {
    return H(() => UW(Fe(e), this.padding, this.dataFormat));
  }
  getConfig() {
    const e = { padding: this.padding, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
yw.className = "ZeroPadding2D";
ne(yw);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function Nm(n, e, t, s, r, a) {
  return H(() => {
    Mt(r), kv(a), $s(s), t == null && (t = [1, 1]), s == null && (s = "valid"), r == null && (r = er()), a == null && (a = "max"), n = Mx(n, r);
    let o;
    const i = s === "same" ? "same" : "valid";
    return a === "max" ? o = Yd(n, e, t, i) : o = Vd(n, e, t, i), r === "channelsFirst" && (o = Ye(o, [0, 3, 1, 2])), o;
  });
}
function w$(n, e, t, s, r, a) {
  return H(() => {
    Mt(r), kv(a), $s(s), t == null && (t = [1, 1, 1]), s == null && (s = "valid"), r == null && (r = er()), a == null && (a = "max"), n = m$(n, r);
    let o;
    const i = s === "same" ? "same" : "valid";
    return a === "max" ? o = gb(n, e, t, i) : o = Gy(n, e, t, i), r === "channelsFirst" && (o = Ye(o, [0, 4, 1, 2, 3])), o;
  });
}
class C$ extends qe {
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = 2), super(e), typeof e.poolSize == "number") this.poolSize = [e.poolSize];
    else if (Array.isArray(e.poolSize) && e.poolSize.length === 1 && typeof e.poolSize[0] == "number") this.poolSize = e.poolSize;
    else throw new W(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);
    if (an(this.poolSize, "poolSize"), e.strides == null) this.strides = this.poolSize;
    else if (typeof e.strides == "number") this.strides = [e.strides];
    else if (Array.isArray(e.strides) && e.strides.length === 1 && typeof e.strides[0] == "number") this.strides = e.strides;
    else throw new W(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);
    an(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, $s(this.padding), this.inputSpec = [new Ut({ ndim: 3 })];
  }
  computeOutputShape(e) {
    e = at(e);
    const t = Ys(e[1], this.poolSize[0], this.padding, this.strides[0]);
    return [e[0], t, e[2]];
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t), e = bh(Fe(e), 2);
      const s = this.poolingFunction(Fe(e), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");
      return ei(s, [2]);
    });
  }
  getConfig() {
    const e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class bw extends C$ {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, a) {
    return Mt(a), $s(r), Nm(e, t, s, r, a, "max");
  }
}
bw.className = "MaxPooling1D";
ne(bw);
class xw extends C$ {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, a) {
    return Mt(a), $s(r), Nm(e, t, s, r, a, "avg");
  }
}
xw.className = "AveragePooling1D";
ne(xw);
class I$ extends qe {
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = [2, 2]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize], e.strides == null) this.strides = this.poolSize;
    else if (Array.isArray(e.strides)) {
      if (e.strides.length !== 2) throw new W(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);
      this.strides = e.strides;
    } else this.strides = [e.strides, e.strides];
    an(this.poolSize, "poolSize"), an(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Mt(this.dataFormat), $s(this.padding), this.inputSpec = [new Ut({ ndim: 4 })];
  }
  computeOutputShape(e) {
    e = at(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], s = this.dataFormat === "channelsFirst" ? e[3] : e[2];
    return t = Ys(t, this.poolSize[0], this.padding, this.strides[0]), s = Ys(s, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, s] : [e[0], t, s, e[3]];
  }
  call(e, t) {
    return H(() => (this.invokeCallHook(e, t), this.poolingFunction(Fe(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class ww extends I$ {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, a) {
    return Mt(a), $s(r), Nm(e, t, s, r, a, "max");
  }
}
ww.className = "MaxPooling2D";
ne(ww);
class Cw extends I$ {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, a) {
    return Mt(a), $s(r), Nm(e, t, s, r, a, "avg");
  }
}
Cw.className = "AveragePooling2D";
ne(Cw);
class S$ extends qe {
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = [2, 2, 2]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize, e.poolSize], e.strides == null) this.strides = this.poolSize;
    else if (Array.isArray(e.strides)) {
      if (e.strides.length !== 3) throw new W(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);
      this.strides = e.strides;
    } else this.strides = [e.strides, e.strides, e.strides];
    an(this.poolSize, "poolSize"), an(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Mt(this.dataFormat), $s(this.padding), this.inputSpec = [new Ut({ ndim: 5 })];
  }
  computeOutputShape(e) {
    e = at(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], s = this.dataFormat === "channelsFirst" ? e[3] : e[2], r = this.dataFormat === "channelsFirst" ? e[4] : e[3];
    return t = Ys(t, this.poolSize[0], this.padding, this.strides[0]), s = Ys(s, this.poolSize[1], this.padding, this.strides[1]), r = Ys(r, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, s, r] : [e[0], t, s, r, e[4]];
  }
  call(e, t) {
    return H(() => (this.invokeCallHook(e, t), this.poolingFunction(Fe(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class Iw extends S$ {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, a) {
    return Mt(a), $s(r), w$(e, t, s, r, a, "max");
  }
}
Iw.className = "MaxPooling3D";
ne(Iw);
class Sw extends S$ {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, a) {
    return Mt(a), $s(r), w$(e, t, s, r, a, "avg");
  }
}
Sw.className = "AveragePooling3D";
ne(Sw);
class v$ extends qe {
  constructor(e) {
    super(e), this.inputSpec = [new Ut({ ndim: 3 })];
  }
  computeOutputShape(e) {
    return [e[0], e[2]];
  }
  call(e, t) {
    throw new Ge();
  }
}
class vw extends v$ {
  constructor(e) {
    super(e || {});
  }
  call(e, t) {
    return H(() => {
      const s = Fe(e);
      return Et(s, 1);
    });
  }
}
vw.className = "GlobalAveragePooling1D";
ne(vw);
class $w extends v$ {
  constructor(e) {
    super(e || {});
  }
  call(e, t) {
    return H(() => {
      const s = Fe(e);
      return Is(s, 1);
    });
  }
}
$w.className = "GlobalMaxPooling1D";
ne($w);
class $$ extends qe {
  constructor(e) {
    super(e), this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Mt(this.dataFormat), this.inputSpec = [new Ut({ ndim: 4 })];
  }
  computeOutputShape(e) {
    return e = e, this.dataFormat === "channelsLast" ? [e[0], e[3]] : [e[0], e[1]];
  }
  call(e, t) {
    throw new Ge();
  }
  getConfig() {
    const e = { dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class kw extends $$ {
  call(e, t) {
    return H(() => {
      const s = Fe(e);
      return this.dataFormat === "channelsLast" ? Et(s, [1, 2]) : Et(s, [2, 3]);
    });
  }
}
kw.className = "GlobalAveragePooling2D";
ne(kw);
class Nw extends $$ {
  call(e, t) {
    return H(() => {
      const s = Fe(e);
      return this.dataFormat === "channelsLast" ? Is(s, [1, 2]) : Is(s, [2, 3]);
    });
  }
}
Nw.className = "GlobalMaxPooling2D";
ne(Nw);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class k$ extends qe {
  constructor(e) {
    super(e), this.layer = e.layer;
  }
  build(e) {
    this.built = true;
  }
  get trainable() {
    return this.layer != null ? this.layer.trainable : false;
  }
  set trainable(e) {
    this.layer != null && (this.layer.trainable = e);
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  get updates() {
    return this.layer._updates;
  }
  get losses() {
    return this.layer.losses;
  }
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(e) {
    this.layer.setWeights(e);
  }
  getConfig() {
    const e = { layer: { className: this.layer.getClassName(), config: this.layer.getConfig() } }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.layer != null && this.layer.setFastWeightInitDuringBuild(e);
  }
  static fromConfig(e, t, s = {}) {
    const r = t.layer, a = Xs(r, s);
    delete t.layer;
    const o = { layer: a };
    return Object.assign(o, t), new e(o);
  }
}
class Tw extends k$ {
  constructor(e) {
    super(e), this.supportsMasking = true;
  }
  build(e) {
    if (e = at(e), e.length < 3) throw new W(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);
    this.inputSpec = [{ shape: e }];
    const t = [e[0]].concat(e.slice(2));
    this.layer.built || (this.layer.build(t), this.layer.built = true), super.build(e);
  }
  computeOutputShape(e) {
    e = at(e);
    const t = [e[0]].concat(e.slice(2)), s = this.layer.computeOutputShape(t), r = e[1];
    return [s[0], r].concat(s.slice(1));
  }
  call(e, t) {
    return H(() => (e = Fe(e), b$((o, i) => [Fe(this.layer.call(o, t)), []], e, [], false, null, null, false, true)[1]));
  }
}
Tw.className = "TimeDistributed";
ne(Tw);
function GW(n) {
  Ju(VM, "BidirectionalMergeMode", n);
}
const HW = "concat";
class Rw extends k$ {
  constructor(e) {
    super(e);
    const t = e.layer.getConfig(), s = {};
    s.className = e.layer.getClassName(), s.config = t, this.forwardLayer = Xs(s), t.goBackwards = t.goBackwards !== true;
    const r = {};
    if (r.className = e.layer.getClassName(), r.config = t, this.backwardLayer = Xs(r), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = e.mergeMode === void 0 ? HW : e.mergeMode, GW(this.mergeMode), e.weights) throw new Ge("weights support is not implemented for Bidirectional layer yet.");
    this._stateful = e.layer.stateful, this.returnSequences = e.layer.returnSequences, this.returnState = e.layer.returnState, this.supportsMasking = true, this._trainable = true, this.inputSpec = e.layer.inputSpec, this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(e) {
    this._trainable = e, this.forwardLayer != null && (this.forwardLayer.trainable = e), this.backwardLayer != null && (this.backwardLayer.trainable = e);
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(e) {
    const t = e.length, s = Math.floor(t / 2);
    this.forwardLayer.setWeights(e.slice(0, s)), this.backwardLayer.setWeights(e.slice(s));
  }
  computeOutputShape(e) {
    let t = this.forwardLayer.computeOutputShape(e);
    Array.isArray(t) && Array.isArray(t[0]) || (t = [t]), t = t;
    let s, r, a;
    return this.returnState && (a = t.slice(1)), s = t[0], s = s, this.mergeMode === "concat" ? (s[s.length - 1] *= 2, r = [s]) : this.mergeMode == null ? r = [s, s.slice()] : r = [s], this.returnState ? this.mergeMode == null ? r.concat(a).concat(a.slice()) : [s].concat(a).concat(a.slice()) : Mn(r);
  }
  apply(e, t) {
    let s = t == null ? null : t.initialState, r = t == null ? null : t.constants;
    t == null && (t = {});
    const a = y$(e, s, r, this.numConstants);
    if (e = a.inputs, s = a.initialState, r = a.constants, Array.isArray(e) && (s = e.slice(1), e = e[0]), (s == null || s.length === 0) && r == null) return super.apply(e, t);
    const o = [], i = [];
    if (s != null) {
      const c = s.length;
      if (c % 2 > 0) throw new W("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
      t.initialState = s, o.push(...s);
      const l = s.map((d) => new Ut({ shape: d.shape }));
      this.forwardLayer.stateSpec = l.slice(0, c / 2), this.backwardLayer.stateSpec = l.slice(c / 2), i.push(...l);
    }
    if (r != null) throw new Ge("Support for constants in Bidirectional layers is not implemented yet.");
    const u = o[0] instanceof tr;
    for (const c of o) if (c instanceof tr !== u) throw new W("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
    if (u) {
      const c = [e].concat(o), l = this.inputSpec.concat(i), d = this.inputSpec;
      this.inputSpec = l;
      const h = super.apply(c, t);
      return this.inputSpec = d, h;
    } else return super.apply(e, t);
  }
  call(e, t) {
    return H(() => {
      const s = t.initialState;
      let r, a;
      if (s == null) r = this.forwardLayer.call(e, t), a = this.backwardLayer.call(e, t);
      else {
        const u = s.slice(0, s.length / 2), c = s.slice(s.length / 2);
        r = this.forwardLayer.call(e, Object.assign(t, { initialState: u })), a = this.backwardLayer.call(e, Object.assign(t, { initialState: c }));
      }
      let o;
      this.returnState && (Array.isArray(r) && (o = r.slice(1).concat(a.slice(1))), r = r[0], a = a[0]), this.returnSequences && (a = Ss(a, 1));
      let i;
      return this.mergeMode === "concat" ? i = px([r, a]) : this.mergeMode === "sum" ? i = te(r, a) : this.mergeMode === "ave" ? i = z(0.5, te(r, a)) : this.mergeMode === "mul" ? i = z(r, a) : this.mergeMode == null && (i = [r, a]), this.returnState ? this.mergeMode == null ? i.concat(o) : [i].concat(o) : i;
    });
  }
  resetStates(e) {
    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
  }
  build(e) {
    vi(this.forwardLayer.name, () => {
      this.forwardLayer.build(e);
    }), vi(this.backwardLayer.name, () => {
      this.backwardLayer.build(e);
    }), this.built = true;
  }
  computeMask(e, t) {
    Array.isArray(t) && (t = t[0]);
    let s;
    if (this.returnSequences ? this.mergeMode == null ? s = [t, t] : s = t : this.mergeMode == null ? s = [null, null] : s = null, this.returnState) {
      const a = this.forwardLayer.states.map((o) => null);
      return Array.isArray(s) ? s.concat(a).concat(a) : [s].concat(a).concat(a);
    } else return s;
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(e), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(e);
  }
  getConfig() {
    const e = { mergeMode: this.mergeMode }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  static fromConfig(e, t) {
    const s = Xs(t.layer);
    if (delete t.layer, t.numConstants != null) throw new Ge("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
    const r = t;
    return r.layer = s, new e(r);
  }
}
Rw.className = "Bidirectional";
ne(Rw);
/**
* @license
* Copyright 2022 CodeSmith LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class _w extends qe {
  constructor(e) {
    super(e), this.scale = e.scale, e.offset ? this.offset = e.offset : this.offset = 0;
  }
  getConfig() {
    const e = { scale: this.scale, offset: this.offset }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  call(e, t) {
    return H(() => (e = Fe(e), e.dtype !== "float32" && (e = gr(e, "float32")), te(z(e, this.scale), this.offset)));
  }
}
_w.className = "Rescaling";
ne(_w);
/**
* @license
* Copyright 2022 CodeSmith LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
const { resizeBilinear: jW, cropAndResize: qW } = Ds;
class Ew extends qe {
  constructor(e) {
    super(e), this.height = e.height, this.width = e.width;
  }
  centerCrop(e, t, s, r, a, o, i, u) {
    return H(() => {
      let c, l = false;
      const d = t / o, h = s / i, p = (r + t) / o, f = (a + s) / i, m = [d, h, p, f], g = [];
      e.rank === 3 ? (l = true, c = En([e])) : c = e;
      for (let C = 0; C < c.shape[0]; C++) g.push(m);
      const y = Wn(g, [g.length, 4]), b = Li(0, g.length, 1, "int32"), w = qW(c, y, b, [r, a], "nearest");
      return gr(l ? Fe(vs(w)) : w, u);
    });
  }
  upsize(e, t, s, r) {
    return H(() => {
      const a = jW(e, [t, s]);
      return gr(a, r);
    });
  }
  call(e, t) {
    return H(() => {
      const s = Fe(e), r = s.dtype, a = s.shape, o = a[a.length - 3], i = a[a.length - 2];
      let u = 0;
      o !== this.height && (u = Math.floor((o - this.height) / 2));
      let c = 0;
      return i !== this.width && (c = Math.floor((i - this.width) / 2), c === 0 && (c = 1)), u >= 0 && c >= 0 ? this.centerCrop(s, u, c, this.height, this.width, o, i, r) : this.upsize(e, this.height, this.width, r);
    });
  }
  getConfig() {
    const e = { height: this.height, width: this.width }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  computeOutputShape(e) {
    e = at(e);
    const t = e.length - 3, s = e.length - 2;
    return e[t] = this.height, e[s] = this.width, e;
  }
}
Ew.className = "CenterCrop";
ne(Ew);
/**
* @license
* Copyright 2022 CodeSmith LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function KW(n, e, t, s) {
  let r = Fe(n);
  if (r.dtype !== "int32" && (r = gr(r, "int32")), e === "int") return r;
  const a = r.shape;
  if (r.rank === 0 && (r = mn(r, -1)), e === "oneHot" && r.shape[r.shape.length - 1] !== 1 && (r = mn(r, -1)), r.rank > 2) throw new W(`When outputMode is not int, maximum output rank is 2 Received outputMode ${e} and input shape ${a} which would result in output rank ${r.rank}.`);
  const o = ["multiHot", "oneHot"].includes(e), i = r;
  let u;
  if (typeof s < "u" && e === "count" ? u = Dp(i, s, t, o) : u = Dp(i, [], t, o), e !== "tfIdf") return u;
  if (s) return z(u, s);
  throw new W("When outputMode is 'tfIdf', weights must be provided.");
}
/**
* @license
* Copyright 2022 CodeSmith LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class Dw extends qe {
  constructor(e) {
    super(e), this.numTokens = e.numTokens, e.outputMode ? this.outputMode = e.outputMode : this.outputMode = "multiHot";
  }
  getConfig() {
    const e = { numTokens: this.numTokens, outputMode: this.outputMode }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  computeOutputShape(e) {
    return e = at(e), e == null ? [this.numTokens] : this.outputMode === "oneHot" && e[e.length - 1] !== 1 ? (e.push(this.numTokens), e) : (e[e.length - 1] = this.numTokens, e);
  }
  call(e, t) {
    return H(() => {
      e = Fe(e), e.dtype !== "int32" && (e = gr(e, "int32"));
      let s;
      if (typeof t.countWeights < "u") {
        if (this.outputMode !== "count") throw new W(`countWeights is not used when outputMode !== count.
              Received countWeights=${t.countWeights}`);
        s = Fe(t.countWeights);
      }
      const r = Is(e), a = Sl(e), o = On(this.numTokens, r).bufferSync().get(0), i = Kr(a, 0).bufferSync().get(0);
      if (!(o && i)) throw new W(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);
      return KW(e, this.outputMode, this.numTokens, s);
    });
  }
}
Dw.className = "CategoryEncoding";
ne(Dw);
/**
* @license
* Copyright 2022 CodeSmith LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
const XW = ["bilinear", "nearest"], B1 = new Set(XW);
class Aw extends qe {
  constructor(e) {
    if (super(e), this.height = e.height, this.width = e.width, e.interpolation) if (B1.has(e.interpolation)) this.interpolation = e.interpolation;
    else throw new W(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);
    else this.interpolation = "bilinear";
    this.cropToAspectRatio = !!e.cropToAspectRatio;
  }
  computeOutputShape(e) {
    e = at(e);
    const t = e[2];
    return [this.height, this.width, t];
  }
  getConfig() {
    const e = { height: this.height, width: this.width, interpolation: this.interpolation, cropToAspectRatio: this.cropToAspectRatio }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  call(e, t) {
    return H(() => {
      const s = [this.height, this.width];
      if (this.interpolation === "bilinear") return Ds.resizeBilinear(e, s, !this.cropToAspectRatio);
      if (this.interpolation === "nearest") return Ds.resizeNearestNeighbor(e, s, !this.cropToAspectRatio);
      throw new Error(`Interpolation is ${this.interpolation} but only ${[...B1]} are supported`);
    });
  }
}
Aw.className = "Resizing";
ne(Aw);
/**
* @license
* Copyright 2023 CodeSmith LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class N$ {
  constructor(e) {
    this.seed = e;
  }
  next() {
    if (this.seed !== void 0) return this.seed++;
  }
}
N$.className = "RandomSeed";
/**
* @license
* Copyright 2023 CodeSmith LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class T$ extends qe {
  constructor(e) {
    super(e), this.randomGenerator = new N$(e.seed);
  }
  getConfig() {
    const e = { seed: this.randomGenerator.seed }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
T$.className = "BaseRandomLayer";
/**
* @license
* Copyright 2023 CodeSmith LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
const YW = ["bilinear", "nearest"], W1 = new Set(YW);
class Fw extends T$ {
  constructor(e) {
    super(e);
    const { factor: t, interpolation: s = "bilinear" } = e;
    if (this.factor = t, Array.isArray(this.factor) && this.factor.length === 2) this.widthLower = this.factor[0], this.widthUpper = this.factor[1];
    else if (!Array.isArray(this.factor) && this.factor > 0) this.widthLower = -this.factor, this.widthUpper = this.factor;
    else throw new W(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);
    if (this.widthLower < -1 || this.widthUpper < -1) throw new W(`factor must have values larger than -1. Got: ${this.factor}`);
    if (this.widthUpper < this.widthLower) throw new W(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);
    if (s) if (W1.has(s)) this.interpolation = s;
    else throw new W(`Invalid interpolation parameter: ${s} is not implemented`);
  }
  getConfig() {
    const e = { factor: this.factor, interpolation: this.interpolation }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  computeOutputShape(e) {
    e = at(e);
    const t = e[2];
    return [this.imgHeight, -1, t];
  }
  call(e, t) {
    return H(() => {
      const s = Fe(e);
      this.imgHeight = s.shape[s.shape.length - 3];
      const r = s.shape[s.shape.length - 2];
      this.widthFactor = Jo([1], 1 + this.widthLower, 1 + this.widthUpper, "float32", this.randomGenerator.next());
      let a = this.widthFactor.dataSync()[0] * r;
      a = Math.round(a);
      const o = [this.imgHeight, a];
      switch (this.interpolation) {
        case "bilinear":
          return Ds.resizeBilinear(e, o);
        case "nearest":
          return Ds.resizeNearestNeighbor(e, o);
        default:
          throw new Error(`Interpolation is ${this.interpolation}
          but only ${[...W1]} are supported`);
      }
    });
  }
}
Fw.className = "RandomWidth";
ne(Fw);
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function QW(n) {
  return new pc(n);
}
function ZW(n) {
  return new Px(n);
}
function JW(n) {
  return new Ax(n);
}
function eV(n) {
  return new Fx(n);
}
function tV(n) {
  return new Ox(n);
}
function nV(n) {
  return new zx(n);
}
function sV(n) {
  return new Lx(n);
}
function rV(n) {
  return new Sh(n);
}
function aV(n) {
  return new gc(n);
}
function oV(n) {
  return new Bx(n);
}
function iV(n) {
  return new yc(n);
}
function uV(n) {
  return new Wx(n);
}
function lV(n) {
  return new Vx(n);
}
function cV(n) {
  return new Ux(n);
}
function dV(n) {
  return new Gx(n);
}
function hV(n) {
  return new Hx(n);
}
function pV(n) {
  return new Jx(n);
}
function fV(n) {
  return new Qx(n);
}
function mV(n) {
  return new km(n);
}
function gV(n) {
  return new Yx(n);
}
function yV(n) {
  return new Zx(n);
}
function bV(n) {
  return new ew(n);
}
function xV(n) {
  return new tw(n);
}
function wV(n) {
  return new nw(n);
}
function CV(n) {
  return new rw(n);
}
function IV(n) {
  return new aw(n);
}
function SV(n) {
  return new iw(n);
}
function vV(n) {
  return new cw(n);
}
function $V(n) {
  return new uw(n);
}
function kV(n) {
  return new lw(n);
}
function NV(n) {
  return new ow(n);
}
function TV(n) {
  return new dw(n);
}
function RV(n) {
  return new mw(n);
}
function _V(n) {
  return new gw(n);
}
function EV(n) {
  return new yw(n);
}
function Ow(n) {
  return new xw(n);
}
function DV(n) {
  return Ow(n);
}
function AV(n) {
  return Ow(n);
}
function Pw(n) {
  return new Cw(n);
}
function FV(n) {
  return Pw(n);
}
function OV(n) {
  return Pw(n);
}
function Lw(n) {
  return new Sw(n);
}
function PV(n) {
  return Lw(n);
}
function LV(n) {
  return Lw(n);
}
function zV(n) {
  return new vw(n);
}
function MV(n) {
  return new kw(n);
}
function R$(n) {
  return new $w(n);
}
function _$(n) {
  return new Nw(n);
}
function E$(n) {
  return new bw(n);
}
function D$(n) {
  return new ww(n);
}
function BV(n) {
  return new Iw(n);
}
function WV(n) {
  return new qx(n);
}
function VV(n) {
  return new Sm(n);
}
function UV(n) {
  return new Kx(n);
}
function GV(n) {
  return new $h(n);
}
function HV(n) {
  return new jx(n);
}
function jV(n) {
  return new Im(n);
}
function qV(n) {
  return new Xx(n);
}
function KV(n) {
  return new $m(n);
}
function XV(n) {
  return new ir(n);
}
function YV(n) {
  return new vm(n);
}
function QV(n) {
  return new Rw(n);
}
function ZV(n) {
  return new Tw(n);
}
const JV = R$, eU = _$, tU = E$, nU = D$;
function sU(n) {
  return new hw(n);
}
function rU(n) {
  return new pw(n);
}
function aU(n) {
  return new fw(n);
}
function oU(n) {
  return new sw(n);
}
function iU(n) {
  return new _w(n);
}
function uU(n) {
  return new Ew(n);
}
function lU(n) {
  return new Aw(n);
}
function cU(n) {
  return new Dw(n);
}
function dU(n) {
  return new Fw(n);
}
const hU = Object.freeze(Object.defineProperty({ __proto__: null, Layer: qe, RNN: ir, RNNCell: vh, activation: pV, add: IV, alphaDropout: aU, average: SV, averagePooling1d: Ow, averagePooling2d: Pw, averagePooling3d: Lw, avgPool1d: DV, avgPool2d: FV, avgPool3d: PV, avgPooling1d: AV, avgPooling2d: OV, avgPooling3d: LV, batchNormalization: RV, bidirectional: QV, categoryEncoding: cU, centerCrop: uU, concatenate: vV, conv1d: rV, conv2d: aV, conv2dTranspose: oV, conv3d: iV, conv3dTranspose: uV, convLstm2d: qV, convLstm2dCell: KV, cropping2D: cV, dense: fV, depthwiseConv2d: hV, dot: TV, dropout: mV, elu: ZW, embedding: CV, flatten: yV, gaussianDropout: rU, gaussianNoise: sU, globalAveragePooling1d: zV, globalAveragePooling2d: MV, globalMaxPool1d: JV, globalMaxPool2d: eU, globalMaxPooling1d: R$, globalMaxPooling2d: _$, gru: WV, gruCell: VV, input: Zv, inputLayer: QW, layerNormalization: _V, leakyReLU: eV, lstm: UV, lstmCell: GV, masking: oU, maxPool1d: tU, maxPool2d: nU, maxPooling1d: E$, maxPooling2d: D$, maxPooling3d: BV, maximum: $V, minimum: kV, multiply: NV, permute: wV, prelu: tV, randomWidth: dU, reLU: JW, repeatVector: bV, rescaling: iU, reshape: xV, resizing: lU, rnn: XV, separableConv2d: lV, simpleRNN: HV, simpleRNNCell: jV, softmax: nV, spatialDropout1d: gV, stackedRNNCells: YV, thresholdedReLU: sV, timeDistributed: ZV, upSampling2d: dV, zeroPadding2d: EV }, Symbol.toStringTag, { value: "Module" }));
function pU(n, e) {
  return Tx(n, e);
}
function fU(n, e) {
  return Uv(n, e);
}
function mU(n, e) {
  return Gv(n, e);
}
function gU(n, e) {
  return Rx(n, e);
}
function yU(n, e) {
  return _x(n, e);
}
function bU(n, e) {
  return Vv(n, e);
}
function xU(n, e) {
  return YB(n, e);
}
function wU(n, e) {
  return Nx(n, e);
}
function CU(n, e) {
  return bm(n, e);
}
function IU(n, e) {
  return fc(n, e);
}
function SU(n, e) {
  return fc(n, e);
}
function vU(n, e) {
  return fc(n, e);
}
function $U(n, e) {
  return el(n, e);
}
function kU(n, e) {
  return el(n, e);
}
function NU(n, e) {
  return el(n, e);
}
function TU(n, e) {
  return QB(n, e);
}
const RU = Object.freeze(Object.defineProperty({ __proto__: null, MAPE: SU, MSE: kU, binaryAccuracy: pU, binaryCrossentropy: fU, categoricalAccuracy: gU, categoricalCrossentropy: yU, cosineProximity: wU, mape: vU, meanAbsoluteError: CU, meanAbsolutePercentageError: IU, meanSquaredError: $U, mse: NU, precision: bU, r2Score: TU, recall: xU, sparseCategoricalAccuracy: mU }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
const _U = Object.freeze(Object.defineProperty({ __proto__: null, modelFromJSON: kW }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
function EU(n) {
  return new Ih(n);
}
function DU(n) {
  return AW(n);
}
function AU(n) {
  return FW(n);
}
const FU = Object.freeze(Object.defineProperty({ __proto__: null, l1: DU, l1l2: EU, l2: AU }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC
*
* Use of this source code is governed by an MIT-style
* license that can be found in the LICENSE file or at
* https://opensource.org/licenses/MIT.
* =============================================================================
*/
class A$ extends _l {
  constructor() {
    super(...arguments), this.model = null;
  }
  setModel(e) {
    if (!(e instanceof Fr)) throw new Error("model must be a LayersModel, not some other Container");
    this.model = e;
  }
}
function tp(n, e) {
  return n < e;
}
function V1(n, e) {
  return n > e;
}
class F$ extends A$ {
  constructor(e) {
    if (super(), e == null && (e = {}), e.restoreBestWeights) throw new Ge("restoreBestWeights = True is not implemented in EarlyStopping yet.");
    this.monitor = e.monitor || "val_loss", this.minDelta = Math.abs(e.minDelta || 0), this.patience = e.patience || 0, this.verbose = e.verbose || 0, this.mode = e.mode || "auto", this.baseline = e.baseline, ["auto", "min", "max"].indexOf(this.mode) === -1 && (console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`), this.mode = "auto"), this.mode === "min" ? this.monitorFunc = tp : this.mode === "max" ? this.monitorFunc = V1 : this.monitor.indexOf("acc") !== -1 ? this.monitorFunc = V1 : this.monitorFunc = tp, this.monitorFunc === tp && (this.minDelta *= -1);
  }
  async onTrainBegin(e) {
    this.wait = 0, this.stoppedEpoch = 0, this.baseline != null ? this.best = this.baseline : this.best = this.monitorFunc === tp ? 1 / 0 : -1 / 0;
  }
  async onEpochEnd(e, t) {
    await aa(t);
    const s = this.getMonitorValue(t);
    s != null && (this.monitorFunc(s - this.minDelta, this.best) ? (this.best = s, this.wait = 0) : (this.wait++, this.wait >= this.patience && (this.stoppedEpoch = e, this.model.stopTraining = true)));
  }
  async onTrainEnd(e) {
    this.stoppedEpoch > 0 && this.verbose && console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);
  }
  getMonitorValue(e) {
    e == null && (e = {});
    const t = e[this.monitor];
    return t == null && console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`), t;
  }
}
function OU(n) {
  return new F$(n);
}
const PU = { earlyStopping: OU };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const LU = U();
LU.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => false, (n) => {
  n && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
});
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
var es;
(function(n) {
  n[n.DT_INVALID = 0] = "DT_INVALID", n[n.DT_FLOAT = 1] = "DT_FLOAT", n[n.DT_DOUBLE = 2] = "DT_DOUBLE", n[n.DT_INT32 = 3] = "DT_INT32", n[n.DT_UINT8 = 4] = "DT_UINT8", n[n.DT_INT16 = 5] = "DT_INT16", n[n.DT_INT8 = 6] = "DT_INT8", n[n.DT_STRING = 7] = "DT_STRING", n[n.DT_COMPLEX64 = 8] = "DT_COMPLEX64", n[n.DT_INT64 = 9] = "DT_INT64", n[n.DT_BOOL = 10] = "DT_BOOL", n[n.DT_QINT8 = 11] = "DT_QINT8", n[n.DT_QUINT8 = 12] = "DT_QUINT8", n[n.DT_QINT32 = 13] = "DT_QINT32", n[n.DT_BFLOAT16 = 14] = "DT_BFLOAT16", n[n.DT_QINT16 = 15] = "DT_QINT16", n[n.DT_QUINT16 = 16] = "DT_QUINT16", n[n.DT_UINT16 = 17] = "DT_UINT16", n[n.DT_COMPLEX128 = 18] = "DT_COMPLEX128", n[n.DT_HALF = 19] = "DT_HALF", n[n.DT_RESOURCE = 20] = "DT_RESOURCE", n[n.DT_VARIANT = 21] = "DT_VARIANT", n[n.DT_UINT32 = 22] = "DT_UINT32", n[n.DT_UINT64 = 23] = "DT_UINT64", n[n.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", n[n.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", n[n.DT_INT32_REF = 103] = "DT_INT32_REF", n[n.DT_UINT8_REF = 104] = "DT_UINT8_REF", n[n.DT_INT16_REF = 105] = "DT_INT16_REF", n[n.DT_INT8_REF = 106] = "DT_INT8_REF", n[n.DT_STRING_REF = 107] = "DT_STRING_REF", n[n.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", n[n.DT_INT64_REF = 109] = "DT_INT64_REF", n[n.DT_BOOL_REF = 110] = "DT_BOOL_REF", n[n.DT_QINT8_REF = 111] = "DT_QINT8_REF", n[n.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", n[n.DT_QINT32_REF = 113] = "DT_QINT32_REF", n[n.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", n[n.DT_QINT16_REF = 115] = "DT_QINT16_REF", n[n.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", n[n.DT_UINT16_REF = 117] = "DT_UINT16_REF", n[n.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", n[n.DT_HALF_REF = 119] = "DT_HALF_REF", n[n.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", n[n.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", n[n.DT_UINT32_REF = 122] = "DT_UINT32_REF", n[n.DT_UINT64_REF = 123] = "DT_UINT64_REF";
})(es || (es = {}));
var U1;
(function(n) {
  (function(e) {
    e[e.LEGACY = 0] = "LEGACY", e[e.V1 = 1] = "V1", e[e.V2 = 2] = "V2";
  })(n.CheckpointFormatVersion || (n.CheckpointFormatVersion = {}));
})(U1 || (U1 = {}));
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const zw = {};
function zU(n, e) {
  const t = { tfOpName: n, category: "custom", inputs: [], attrs: [], customExecutor: e };
  zw[n] = t;
}
function O$(n) {
  return zw[n];
}
function MU(n) {
  delete zw[n];
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function I(n, e, t, s, r) {
  const a = e.inputParams[n];
  if (a && a.inputIndexStart !== void 0) {
    const i = a.inputIndexStart, u = a.inputIndexEnd === 0 ? void 0 : a.inputIndexEnd === void 0 ? i + 1 : a.inputIndexEnd, c = i < 0 ? e.inputNames.length + i : i;
    if (a.type === "tensor") return gn(e.inputNames[c], t, s, r);
    if (a.type === "tensors") {
      const h = e.inputs.slice(i, u);
      return e.inputNames.slice(i, u).filter((f, m) => {
        var g;
        return ((g = h[m]) === null || g === void 0 ? void 0 : g.op) !== "NoOp";
      }).map((f) => gn(f, t, s, r));
    }
    const l = gn(e.inputNames[c], t, s, r), d = l.dataSync();
    return a.type === "number" ? d[0] : Cs(l.shape, d);
  }
  const o = e.attrParams[n];
  return o && o.value;
}
function gn(n, e, t, s) {
  const [r, a] = ns(n, t);
  if (s != null) {
    const i = s.getHashTableHandleByName(r);
    if (i != null) return i;
  }
  const o = t.currentContextIds.find((i) => !!e[Up(r, i)]);
  return o !== void 0 ? e[Up(r, o)][a] : void 0;
}
function G1(n, e, t) {
  return e[Up(n, t.currentContextId)];
}
function _r(n, e) {
  const [t, s, r] = ns(n, e);
  return [Up(t, e && e.currentContextId), s, r];
}
function Up(n, e) {
  return e ? `${n}-${e}` : n;
}
function ns(n, e) {
  if (n === "") return ["", 0, void 0];
  const t = e != null && e.parseNodeNameCache != null;
  if (t) {
    const a = e.parseNodeNameCache.get(n);
    if (a != null) return a;
  }
  const s = n.split(":");
  let r;
  if (s.length === 1) r = [n, 0, void 0];
  else {
    const a = s[0], o = s.length === 3 ? s[1] : void 0, i = Number(s[s.length - 1]);
    r = [a, i, o];
  }
  return t && e.parseNodeNameCache.set(n, r), r;
}
function xp(n, e, t) {
  let s = I("pad", n, e, t);
  if (s === "explicit") {
    s = I("explicitPaddings", n, e, t);
    const r = [[0, 0], [0, 0], [0, 0], [0, 0]];
    for (let a = 0; a < 4; a++) r[a][0] = s[a * 2], r[a][1] = s[a * 2 + 1];
    return r;
  }
  return s;
}
function Er(n) {
  return n.kept ? n : mr(n);
}
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const BU = [{ tfOpName: "Add", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddV2", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddN", category: "arithmetic", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "BiasAdd", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "Sub", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "RealDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Div", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "DivNoNan", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mul", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Maximum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Minimum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Pow", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SquaredDifference", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorMod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }], WU = Object.freeze(Object.defineProperty({ __proto__: null, json: BU }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const VU = [{ tfOpName: "Abs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan2", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Ceil", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ClipByValue", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "clipValueMin", type: "number" }, { start: 2, name: "clipValueMax", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Complex", category: "basic_math", inputs: [{ start: 0, name: "real", type: "tensor" }, { start: 1, name: "imag", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ComplexAbs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Elu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Exp", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Floor", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Imag", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Neg", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Real", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Prelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "alpha", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu6", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Selu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sigmoid", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Rsqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Square", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sign", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Round", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Expm1", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log1p", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Reciprocal", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Softplus", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Erf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LeakyRelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "alpha", name: "alpha", type: "number", defaultValue: 0.2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsNan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsFinite", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsInf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }], UU = Object.freeze(Object.defineProperty({ __proto__: null, json: VU }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const GU = [{ tfOpName: "EmptyTensorList", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "maxNumElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "LoopCond", category: "control", inputs: [{ start: 0, name: "pred", type: "tensor" }] }, { tfOpName: "Switch", category: "control", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "pred", type: "tensor" }] }, { tfOpName: "Merge", category: "control", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "Enter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "frame_name", name: "frameName", type: "string" }, { tfName: "is_constant", name: "isConstant", type: "bool" }] }, { tfOpName: "Exit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NextIteration", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayV3", category: "control", inputs: [{ start: 0, name: "size", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "dynamic_size", name: "dynamicSize", type: "bool" }, { tfName: "clear_after_read", name: "clearAfterRead", type: "bool" }, { tfName: "identical_element_shapes", name: "identicalElementShapes", type: "bool" }, { tfName: "tensor_array_name", name: "name", type: "string" }] }, { tfOpName: "TensorArrayWriteV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayReadV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayGatherV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }] }, { tfOpName: "TensorArrayScatterV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArrayConcatV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape_except0", name: "elementShapeExcept0", type: "shape", notSupported: true }] }, { tfOpName: "TensorArraySplitV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }, { start: 2, name: "lengths", type: "number[]" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArraySizeV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }] }, { tfOpName: "TensorArrayCloseV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }] }, { tfOpName: "StatelessIf", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "If", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "StatelessWhile", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "While", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "TensorListScatter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListScatterV2", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }, { start: 3, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGather", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListSetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListReserve", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListFromTensor", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListStack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }, { tfName: "num_elements", name: "numElements", type: "dtype" }] }, { tfOpName: "TensorListSplit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }, { start: 2, name: "lengths", type: "number[]" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcat", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcatV2", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPopBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPushBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListLength", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }] }, { tfOpName: "TensorListResize", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "size", type: "number" }] }], HU = Object.freeze(Object.defineProperty({ __proto__: null, json: GU }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const jU = [{ tfOpName: "AvgPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [], notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPoolWithArgmax", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "include_batch_in_index", name: "includeBatchInIndex", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AvgPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Conv1D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "stride", name: "stride", type: "number" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NWC" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "dilation", name: "dilation", type: "number", defaultValue: 1 }] }, { tfOpName: "Conv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "useCudnnOnGpu", name: "useCudnnOnGpu", type: "bool" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "_FusedConv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "use_cudnn_on_gpu", name: "useCudnnOnGpu", type: "bool", defaultValue: true }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number", defaultValue: 0.2 }] }, { tfOpName: "Conv2DBackpropInput", category: "convolution", inputs: [{ start: 2, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 0, name: "outputShape", type: "number[]" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]", notSupported: true }] }, { tfOpName: "DepthwiseConv2d", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "DepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "FusedDepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }] }, { tfOpName: "Conv3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "Dilation2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "rates", name: "dilations", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }] }], qU = Object.freeze(Object.defineProperty({ __proto__: null, json: jU }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const KU = [{ tfOpName: "Fill", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }, { start: 1, name: "value", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "LinSpace", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "num", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "OneHot", category: "creation", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "depth", type: "number" }, { start: 2, name: "onValue", type: "number", defaultValue: 1 }, { start: 3, name: "offValue", type: "number", defaultValue: 0 }], attrs: [{ tfName: "axis", name: "axis", type: "number", notSupported: true }, { tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Ones", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "OnesLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "RandomStandardNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "RandomUniform", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number", defaultValue: 0 }, { tfName: "maxval", name: "maxval", type: "number", defaultValue: 1 }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "RandomUniformInt", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number" }, { tfName: "maxval", name: "maxval", type: "number" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }] }, { tfOpName: "Range", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "step", type: "number", defaultValue: 0 }], attrs: [{ tfName: "Tidx", name: "dtype", type: "dtype" }] }, { tfOpName: "TruncatedNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "means", name: "mean", type: "number", defaultValue: 0 }, { tfName: "stddev", name: "stdDev", type: "number", defaultValue: 1 }, { tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "Zeros", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "ZerosLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Multinomial", category: "creation", inputs: [{ start: 0, name: "logits", type: "tensor" }, { start: 1, name: "numSamples", type: "number" }], attrs: [{ tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number" }, { tfName: "T", name: "dtype", type: "dtype" }, { tfName: "output_dtype", name: "output_dtype", type: "dtype" }] }], XU = Object.freeze(Object.defineProperty({ __proto__: null, json: KU }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const YU = [{ tfOpName: "NonMaxSuppressionV2", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV3", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV4", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "T_threshold", name: "threshold", type: "dtype", notSupported: true }, { tfName: "pad_to_max_output_size", name: "padToMaxOutputSize", type: "bool" }] }, { tfOpName: "NonMaxSuppressionV5", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }, { start: 5, name: "softNmsSigma", type: "number" }] }, { tfOpName: "Where", category: "dynamic", inputs: [{ start: 0, name: "condition", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ListDiff", category: "dynamic", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }], QU = Object.freeze(Object.defineProperty({ __proto__: null, json: YU }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ZU = [{ tfOpName: "LowerBound", category: "evaluation", inputs: [{ start: 0, name: "sortedSequence", type: "tensor" }, { start: 1, name: "values", type: "tensor" }] }, { tfOpName: "TopKV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "k", type: "number" }], attrs: [{ tfName: "sorted", name: "sorted", type: "bool" }] }, { tfOpName: "UpperBound", category: "evaluation", inputs: [{ start: 0, name: "sortedSequence", type: "tensor" }, { start: 1, name: "values", type: "tensor" }] }, { tfOpName: "Unique", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "UniqueV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }], JU = Object.freeze(Object.defineProperty({ __proto__: null, json: ZU }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const e4 = [{ tfOpName: "PlaceholderWithDefault", category: "graph", inputs: [{ start: 0, name: "default", type: "tensor" }], attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Placeholder", category: "graph", attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Const", category: "graph" }, { tfOpName: "Identity", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IdentityN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Snapshot", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Rank", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Size", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Shape", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "ShapeN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Print", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "data", type: "tensors" }], attrs: [{ tfName: "message", name: "message", type: "string" }, { tfName: "first_n", name: "firstN", type: "number", notSupported: true }, { tfName: "summarize", name: "summarize", type: "number", defaultValue: 3 }] }, { tfOpName: "NoOp", category: "graph", inputs: [] }, { tfOpName: "StopGradient", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "FakeQuantWithMinMaxVars", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "min", name: "min", type: "number" }, { tfName: "max", name: "max", type: "number" }] }], t4 = Object.freeze(Object.defineProperty({ __proto__: null, json: e4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const n4 = [{ tfOpName: "HashTable", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "HashTableV2", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "LookupTableImport", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableImportV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFind", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFindV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableSize", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "LookupTableSizeV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "InitializeTable", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }, { tfOpName: "InitializeTableV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }], s4 = Object.freeze(Object.defineProperty({ __proto__: null, json: n4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const r4 = [{ tfOpName: "ResizeBilinear", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ResizeNearestNeighbor", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "CropAndResize", category: "image", inputs: [{ start: 0, name: "image", type: "tensor" }, { start: 1, name: "boxes", type: "tensor" }, { start: 2, name: "boxInd", type: "tensor" }, { start: 3, name: "cropSize", type: "number[]" }], attrs: [{ tfName: "method", name: "method", type: "string" }, { tfName: "extrapolation_value", name: "extrapolationValue", type: "number" }] }, { tfOpName: "ImageProjectiveTransformV3", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "transforms", type: "tensor" }, { start: 2, name: "outputShape", type: "number[]" }, { start: 3, name: "fillValue", type: "number" }], attrs: [{ tfName: "interpolation", name: "interpolation", type: "string" }, { tfName: "fill_mode", name: "fillMode", type: "string" }] }], a4 = Object.freeze(Object.defineProperty({ __proto__: null, json: r4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const o4 = [{ tfOpName: "Equal", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NotEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Greater", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "GreaterEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Less", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LessEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalAnd", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalNot", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalOr", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Select", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SelectV2", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BitwiseAnd", category: "logical", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }] }], i4 = Object.freeze(Object.defineProperty({ __proto__: null, json: o4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const u4 = [{ tfOpName: "_FusedMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number", defaultValue: 0.2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMulV2", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Transpose", category: "matrices", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "perm", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Einsum", category: "matrices", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "equation", name: "equation", type: "string" }, { tfName: "N", name: "n", type: "number", defaultValue: 2 }, { tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "MatrixBandPart", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "numLower", type: "tensor" }, { start: 1, name: "numUpper", type: "tensor" }] }], l4 = Object.freeze(Object.defineProperty({ __proto__: null, json: u4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const c4 = [{ tfOpName: "EuclideanNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool", defaultValue: false }] }, { tfOpName: "FusedBatchNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV2", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV3", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "LRN", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "depth_radius", name: "radius", type: "number", defaultValue: 5 }, { tfName: "bias", name: "bias", type: "number", defaultValue: 1 }, { tfName: "alpha", name: "alpha", type: "number", defaultValue: 1 }, { tfName: "beta", name: "beta", type: "number", defaultValue: 0.5 }] }, { tfOpName: "Softmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "LogSoftmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }], d4 = Object.freeze(Object.defineProperty({ __proto__: null, json: c4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const h4 = [{ tfOpName: "Bincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }] }, { tfOpName: "DenseBincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }], attrs: [{ tfName: "binary_output", name: "binaryOutput", type: "bool" }] }, { tfOpName: "Max", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Mean", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Min", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Sum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "All", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Any", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "ArgMax", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "ArgMin", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "Prod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cumprod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }, { tfOpName: "Cumsum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }], p4 = Object.freeze(Object.defineProperty({ __proto__: null, json: h4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const f4 = [{ tfOpName: "ConcatV2", category: "slice_join", inputs: [{ start: 0, end: -1, name: "tensors", type: "tensors" }, { start: -1, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "Concat", category: "slice_join", inputs: [{ start: 1, end: 0, name: "tensors", type: "tensors" }, { start: 0, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "GatherV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }], attrs: [{ tfName: "batch_dims", name: "batchDims", type: "number", defaultValue: 0 }] }, { tfOpName: "Gather", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", notSupported: true }] }, { tfOpName: "Reverse", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "dims", type: "bool[]" }] }, { tfOpName: "ReverseV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }] }, { tfOpName: "Slice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "size", type: "number[]" }] }, { tfOpName: "StridedSlice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "end", type: "number[]" }, { start: 3, name: "strides", type: "number[]" }], attrs: [{ tfName: "begin_mask", name: "beginMask", type: "number", defaultValue: 0 }, { tfName: "end_mask", name: "endMask", type: "number", defaultValue: 0 }, { tfName: "new_axis_mask", name: "newAxisMask", type: "number", defaultValue: 0 }, { tfName: "ellipsis_mask", name: "ellipsisMask", type: "number", defaultValue: 0 }, { tfName: "shrink_axis_mask", name: "shrinkAxisMask", type: "number", defaultValue: 0 }] }, { tfOpName: "Pack", category: "slice_join", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "Unpack", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }, { tfName: "num", name: "num", type: "number", defaultValue: 0, notSupported: true }] }, { tfOpName: "Tile", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "reps", type: "number[]" }] }, { tfOpName: "Split", category: "slice_join", inputs: [{ start: 0, name: "axis", type: "number", defaultValue: 0 }, { start: 1, name: "x", type: "tensor" }], attrs: [{ tfName: "num_split", name: "numOrSizeSplits", type: "number", defaultValue: 1 }] }, { tfOpName: "SplitV", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "numOrSizeSplits", type: "number[]" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "ScatterNd", category: "slice_join", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "shape", type: "number[]" }] }, { tfOpName: "GatherNd", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "slice_join", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: false, notSupported: true }] }, { tfOpName: "TensorScatterUpdate", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }], m4 = Object.freeze(Object.defineProperty({ __proto__: null, json: f4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const g4 = [{ tfOpName: "SparseFillEmptyRows", category: "sparse", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "denseShape", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }] }, { tfOpName: "SparseReshape", category: "sparse", inputs: [{ start: 0, name: "inputIndices", type: "tensor" }, { start: 1, name: "inputShape", type: "tensor" }, { start: 2, name: "newShape", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SparseSegmentMean", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }, { tfOpName: "SparseSegmentSum", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }], y4 = Object.freeze(Object.defineProperty({ __proto__: null, json: g4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const b4 = [{ tfOpName: "FFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "RFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }, { tfOpName: "IRFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }], x4 = Object.freeze(Object.defineProperty({ __proto__: null, json: b4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const w4 = [{ tfOpName: "StaticRegexReplace", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }], attrs: [{ tfName: "pattern", name: "pattern", type: "string" }, { tfName: "rewrite", name: "rewrite", type: "string" }, { tfName: "replace_global", name: "replaceGlobal", type: "bool" }] }, { tfOpName: "StringNGrams", category: "string", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "dataSplits", type: "tensor" }], attrs: [{ tfName: "separator", name: "separator", type: "string" }, { tfName: "ngram_widths", name: "nGramWidths", type: "number[]" }, { tfName: "left_pad", name: "leftPad", type: "string" }, { tfName: "right_pad", name: "rightPad", type: "string" }, { tfName: "pad_width", name: "padWidth", type: "number" }, { tfName: "preserve_short_sequences", name: "preserveShortSequences", type: "bool" }], outputs: ["ngrams", "ngrams_splits"] }, { tfOpName: "StringSplit", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "delimiter", type: "tensor" }], attrs: [{ tfName: "skip_empty", name: "skipEmpty", type: "bool" }], outputs: ["indices", "values", "shape"] }, { tfOpName: "StringToHashBucketFast", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }], attrs: [{ tfName: "num_buckets", name: "numBuckets", type: "number" }] }], C4 = Object.freeze(Object.defineProperty({ __proto__: null, json: w4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const I4 = [{ tfOpName: "Cast", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "SrcT", name: "sdtype", type: "dtype", notSupported: true }, { tfName: "DstT", name: "dtype", type: "dtype" }] }, { tfOpName: "ExpandDims", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "MirrorPad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "mode", name: "mode", type: "string" }] }, { tfOpName: "Pad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "constant_value", name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "PadV2", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }, { start: 2, name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "Reshape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "EnsureShape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "Squeeze", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "axis", tfDeprecatedName: "squeeze_dims", name: "axis", type: "number[]" }] }, { tfOpName: "SpaceToBatchND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "paddings", type: "number[]" }] }, { tfOpName: "BatchToSpaceND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "crops", type: "number[]" }] }, { tfOpName: "DepthToSpace", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "block_size", name: "blockSize", type: "number" }, { tfName: "data_format", name: "dataFormat", type: "string" }] }, { tfOpName: "BroadcastTo", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }], attrs: [] }, { tfOpName: "BroadcastArgs", category: "transformation", inputs: [{ start: 0, name: "s0", type: "tensor" }, { start: 1, name: "s1", type: "tensor" }], attrs: [] }], S4 = Object.freeze(Object.defineProperty({ __proto__: null, json: I4 }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class H1 {
  static get Instance() {
    return this._instance || (this._instance = new this());
  }
  constructor() {
    const e = [WU, UU, HU, qU, XU, QU, JU, t4, s4, a4, i4, l4, d4, p4, m4, y4, x4, C4, S4], t = [].concat(...e.map((s) => s.json));
    this.opMappers = t.reduce((s, r) => (s[r.tfOpName] = r, s), {});
  }
  transformGraph(e, t = {}) {
    const s = e.node, r = [], a = [], o = [], i = s.reduce((m, g) => (m[g.name] = this.mapNode(g), g.op.startsWith("Placeholder") ? r.push(m[g.name]) : g.op === "Const" ? a.push(m[g.name]) : (g.input == null || g.input.length === 0) && o.push(m[g.name]), m), {});
    let u = [];
    const c = [];
    let l = {}, d = {};
    t != null && (l = this.mapSignatureEntries(t.inputs), d = this.mapSignatureEntries(t.outputs));
    const h = Object.keys(i);
    h.forEach((m) => {
      const g = i[m];
      g.inputNames.forEach((y, b) => {
        const [x, , w] = _r(y), C = i[x];
        if (C.outputs != null) {
          const v = C.outputs.indexOf(w);
          if (v !== -1) {
            const k = `${x}:${v}`;
            g.inputNames[b] = k;
          }
        }
        g.inputs.push(C), C.children.push(g);
      });
    }), Object.keys(d).length === 0 ? h.forEach((m) => {
      const g = i[m];
      g.children.length === 0 && c.push(g);
    }) : Object.keys(d).forEach((m) => {
      const [g] = _r(m), y = i[g];
      y != null && (y.signatureKey = d[m], c.push(y));
    }), Object.keys(l).length > 0 ? Object.keys(l).forEach((m) => {
      const [g] = _r(m), y = i[g];
      y && (y.signatureKey = l[m], u.push(y));
    }) : u = r;
    let p = {};
    e.library != null && e.library.function != null && (p = e.library.function.reduce((m, g) => (m[g.signature.name] = this.mapFunction(g), m), {}));
    const f = { nodes: i, inputs: u, outputs: c, weights: a, placeholders: r, signature: t, functions: p };
    return o.length > 0 && (f.initNodes = o), f;
  }
  mapSignatureEntries(e) {
    return Object.keys(e || {}).reduce((t, s) => (t[e[s].name] = s, t), {});
  }
  mapNode(e) {
    const t = O$(e.op) || this.opMappers[e.op] || {};
    e.attr == null && (e.attr = {});
    const s = { name: e.name, op: e.op, category: t.category, inputNames: (e.input || []).map((r) => r.startsWith("^") ? r.slice(1) : r), inputs: [], children: [], inputParams: {}, attrParams: {}, rawAttrs: e.attr, outputs: t.outputs };
    return t.inputs != null && (s.inputParams = t.inputs.reduce((r, a) => (r[a.name] = { type: a.type, inputIndexStart: a.start, inputIndexEnd: a.end }, r), {})), t.attrs != null && (s.attrParams = t.attrs.reduce((r, a) => {
      const o = a.type;
      let i;
      switch (a.type) {
        case "string":
          i = Ug(e.attr, a.tfName, a.defaultValue), i === void 0 && a.tfDeprecatedName && (i = Ug(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "string[]":
          i = Yg(e.attr, a.tfName, a.defaultValue), i === void 0 && a.tfDeprecatedName && (i = Yg(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "number":
          i = Hg(e.attr, a.tfName, a.defaultValue || 0), i === void 0 && a.tfDeprecatedName && (i = Hg(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "number[]":
          i = Xg(e.attr, a.tfName, a.defaultValue), i === void 0 && a.tfDeprecatedName && (i = Xg(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "bool":
          i = Gg(e.attr, a.tfName, a.defaultValue), i === void 0 && a.tfDeprecatedName && (i = Gg(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "bool[]":
          i = Zg(e.attr, a.tfName, a.defaultValue), i === void 0 && a.tfDeprecatedName && (i = Zg(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "shape":
          i = Kg(e.attr, a.tfName, a.defaultValue), i === void 0 && a.tfDeprecatedName && (i = Kg(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "shape[]":
          i = Qg(e.attr, a.tfName, a.defaultValue), i === void 0 && a.tfDeprecatedName && (i = Qg(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "dtype":
          i = jg(e.attr, a.tfName, a.defaultValue), i === void 0 && a.tfDeprecatedName && (i = jg(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "dtype[]":
          i = qg(e.attr, a.tfName, a.defaultValue), i === void 0 && a.tfDeprecatedName && (i = qg(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "func":
          i = j1(e.attr, a.tfName, a.defaultValue), i === void 0 && a.tfDeprecatedName && (i = j1(e.attr, a.tfDeprecatedName, a.defaultValue));
          break;
        case "tensor":
        case "tensors":
          break;
        default:
          throw new Error(`Unsupported param type: ${a.type} for op: ${e.op}`);
      }
      return r[a.name] = { value: i, type: o }, r;
    }, {})), s;
  }
  mapFunction(e) {
    const t = e.nodeDef, s = [], r = [];
    let a = {};
    t != null && (a = t.reduce((d, h) => (d[h.name] = this.mapNode(h), h.op === "Const" && r.push(d[h.name]), d), {}));
    const o = [], i = [];
    e.signature.inputArg.forEach((d) => {
      const [h] = _r(d.name), p = { name: h, op: "Placeholder", inputs: [], inputNames: [], category: "graph", inputParams: {}, attrParams: { dtype: { value: Mw(d.type), type: "dtype" } }, children: [] };
      p.signatureKey = d.name, o.push(p), a[h] = p;
    }), Object.keys(a).forEach((d) => {
      const h = a[d];
      h.inputNames.forEach((p, f) => {
        const [m, , g] = _r(p), y = a[m];
        if (y.outputs != null) {
          const b = y.outputs.indexOf(g);
          if (b !== -1) {
            const x = `${m}:${b}`;
            h.inputNames[f] = x;
          }
        }
        h.inputs.push(y), y.children.push(h);
      });
    });
    const c = e.ret;
    e.signature.outputArg.forEach((d) => {
      const [h, p] = _r(c[d.name]), f = a[h];
      f != null && (f.defaultOutput = p, i.push(f));
    });
    const l = this.mapArgsToSignature(e);
    return { nodes: a, inputs: o, outputs: i, weights: r, placeholders: s, signature: l };
  }
  mapArgsToSignature(e) {
    return { methodName: e.signature.name, inputs: e.signature.inputArg.reduce((t, s) => (t[s.name] = this.mapArgToTensorInfo(s), t), {}), outputs: e.signature.outputArg.reduce((t, s) => (t[s.name] = this.mapArgToTensorInfo(s, e.ret), t), {}) };
  }
  mapArgToTensorInfo(e, t) {
    let s = e.name;
    return t != null && (s = t[s]), { name: s, dtype: e.type };
  }
}
function v4(n) {
  const e = U().global;
  if (typeof e.atob < "u") return e.atob(n);
  if (typeof Buffer < "u") return new Buffer(n, "base64").toString();
  throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function P$(n, e) {
  const t = Array.isArray(n) ? String.fromCharCode.apply(null, n) : v4(n);
  return e ? t : t.toLowerCase();
}
function Ug(n, e, t, s = false) {
  const r = n[e];
  return r != null ? P$(r.s, s) : t;
}
function Gg(n, e, t) {
  const s = n[e];
  return s ? s.b : t;
}
function Hg(n, e, t) {
  const s = n[e] || {}, r = s.i != null ? s.i : s.f != null ? s.f : t;
  return typeof r == "number" ? r : parseInt(r, 10);
}
function Mw(n) {
  switch (typeof n == "string" && (n = es[n]), n) {
    case es.DT_FLOAT:
    case es.DT_HALF:
      return "float32";
    case es.DT_INT32:
    case es.DT_INT64:
    case es.DT_INT8:
    case es.DT_UINT8:
      return "int32";
    case es.DT_BOOL:
      return "bool";
    case es.DT_DOUBLE:
      return "float32";
    case es.DT_STRING:
      return "string";
    case es.DT_COMPLEX64:
    case es.DT_COMPLEX128:
      return "complex64";
    default:
      return null;
  }
}
function j1(n, e, t) {
  const s = n[e];
  return s && s.func ? s.func.name : t;
}
function jg(n, e, t) {
  const s = n[e];
  return s && s.type ? Mw(s.type) : t;
}
function qg(n, e, t) {
  const s = n[e];
  return s && s.list && s.list.type ? s.list.type.map((r) => Mw(r)) : t;
}
function L$(n) {
  if (!n.unknownRank) return n.dim != null ? n.dim.map((e) => typeof e.size == "number" ? e.size : parseInt(e.size, 10)) : [];
}
function Kg(n, e, t) {
  const s = n[e];
  return s && s.shape ? L$(s.shape) : t;
}
function Xg(n, e, t) {
  const s = n[e];
  return s ? ((s.list.f && s.list.f.length ? s.list.f : s.list.i) || []).map((r) => typeof r == "number" ? r : parseInt(r, 10)) : t;
}
function Yg(n, e, t, s = false) {
  const r = n[e];
  return r && r.list && r.list.s ? r.list.s.map((a) => P$(a, s)) : t;
}
function Qg(n, e, t) {
  const s = n[e];
  return s && s.list && s.list.shape ? s.list.shape.map((r) => L$(r)) : t;
}
function Zg(n, e, t) {
  const s = n[e];
  return s && s.list && s.list.b ? s.list.b : t;
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class $4 {
  constructor(e, t, s) {
    this.node = e, this.tensorMap = t, this.context = s, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map((r) => this.getInput(r)), e.rawAttrs != null && (this.attrs = Object.keys(e.rawAttrs).reduce((r, a) => (r[a] = this.getAttr(a), r), {}));
  }
  getInput(e) {
    return gn(e, this.tensorMap, this.context);
  }
  getAttr(e, t) {
    const s = this.node.rawAttrs[e];
    if (s.tensor != null) return gn(e, this.tensorMap, this.context);
    if (s.i != null || s.f != null) return Hg(this.node.rawAttrs, e, t);
    if (s.s != null) return Ug(this.node.rawAttrs, e, t);
    if (s.b != null) return Gg(this.node.rawAttrs, e, t);
    if (s.shape != null) return Kg(this.node.rawAttrs, e, t);
    if (s.type != null) return jg(this.node.rawAttrs, e, t);
    if (s.list != null) {
      if (s.list.i != null || s.list.f != null) return Xg(this.node.rawAttrs, e, t);
      if (s.list.s != null) return Yg(this.node.rawAttrs, e, t);
      if (s.list.shape != null) return Qg(this.node.rawAttrs, e, t);
      if (s.list.b != null) return Zg(this.node.rawAttrs, e, t);
      if (s.list.type != null) return qg(this.node.rawAttrs, e, t);
    }
    return t;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const wn = Object.freeze(Object.defineProperty({ __proto__: null, OP_SCOPE_SUFFIX: Ty, abs: Vt, acos: Oy, acosh: Py, add: te, addN: LI, all: ff, any: ad, argMax: Fi, argMin: Ly, asin: zy, asinh: My, atan: By, atan2: Wy, atanh: Vy, avgPool: Vd, avgPool3d: Gy, basicLSTMCell: zI, batchNorm: sc, batchNorm2d: Hy, batchNorm3d: jy, batchNorm4d: qy, batchToSpaceND: Ud, bincount: Ky, bitwiseAnd: MI, booleanMaskAsync: SS, broadcastArgs: BI, broadcastTo: Si, buffer: Oe, cast: ue, ceil: Xy, clipByValue: jn, clone: mr, complex: zr, concat: Lt, concat1d: Yy, concat2d: Qy, concat3d: Zy, concat4d: Jy, conv1d: mf, conv2d: Mr, conv2dTranspose: gf, conv3d: tb, conv3dTranspose: nb, cos: Gd, cosh: yf, cosineWindow: Bf, cumprod: ud, cumsum: bf, denseBincount: Dp, depthToSpace: sb, depthwiseConv2d: rc, diag: VI, dilation2d: rb, div: ve, divNoNan: ab, dot: ob, dropout: Fb, einsum: mi, elu: ac, enclosingPowerOfTwo: Ob, ensureShape: UI, equal: rs, erf: xf, euclideanNorm: ub, exp: qn, expandDims: mn, expm1: lb, eye: wf, fft: sh, fill: Xu, floor: ic, floorDiv: pf, fused: DS, gather: uc, gatherND: NS, greater: On, greaterEqual: Kr, ifft: Tl, imag: Hd, image: Ds, inTopKAsync: TS, irfft: Ff, isFinite: cb, isInf: db, isNaN: hb, leakyRelu: jd, less: vl, lessEqual: Zo, linalg: zb, linspace: jI, localResponseNormalization: pb, log: as, log1p: qd, logSigmoid: fb, logSoftmax: If, logSumExp: Kd, logicalAnd: Ps, logicalNot: Xd, logicalOr: Sf, logicalXor: mb, losses: MS, lowerBound: KI, matMul: je, max: Is, maxPool: Yd, maxPool3d: gb, maxPoolWithArgmax: XI, maximum: Sr, mean: Et, meshgrid: YI, min: Sl, minimum: va, mirrorPad: yb, mod: bb, moments: Qd, movingAverage: vS, mul: z, multiRNNCell: QI, multinomial: ZI, neg: St, norm: oc, notEqual: Pi, oneHot: $l, ones: Bn, onesLike: os, op: O, outerProduct: JI, pad: Xr, pad1d: eS, pad2d: tS, pad3d: nS, pad4d: sS, pool: xb, pow: xr, prelu: Jd, print: Fy, prod: wb, raggedGather: rS, raggedRange: aS, raggedTensorToTensor: oS, rand: iS, randomGamma: cS, randomNormal: $f, randomStandardNormal: dS, randomUniform: Jo, randomUniformInt: hS, range: Li, real: kl, reciprocal: vb, relu: ar, relu6: kf, reshape: B, reverse: Ss, reverse1d: pS, reverse2d: fS, reverse3d: mS, reverse4d: gS, rfft: rh, round: Nf, rsqrt: Tf, scalar: Ne, scatterND: $S, searchSorted: vf, selu: Rf, separableConv2d: _f, setdiff1dAsync: yS, sigmoid: Ks, sign: $b, signal: zS, sin: Ef, sinh: Df, slice: Qe, slice1d: eh, slice2d: Af, slice3d: th, slice4d: Nl, softmax: nh, softplus: Yu, spaceToBatchND: Zd, sparse: BS, sparseToDense: kS, spectral: LS, split: Vn, sqrt: ln, square: yt, squaredDifference: Of, squeeze: ei, stack: En, step: Qu, stridedSlice: kb, string: WS, sub: xe, sum: we, tan: Nb, tanh: Sa, tensor: Wn, tensor1d: bn, tensor2d: pa, tensor3d: Tb, tensor4d: bS, tensor5d: xS, tensor6d: wS, tensorScatterUpdate: CS, tile: bs, topk: _b, transpose: Ye, truncatedNormal: Lf, unique: Eb, unsortedSegmentSum: zf, unstack: vs, upperBound: IS, variable: Db, where: on, whereAsync: Ab, zeros: Ot, zerosLike: Ze }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const k4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "BiasAdd":
    case "AddV2":
    case "Add":
      return [s.add(I("a", n, e, t), I("b", n, e, t))];
    case "AddN":
      return [s.addN(I("tensors", n, e, t))];
    case "FloorMod":
    case "Mod":
      return [s.mod(I("a", n, e, t), I("b", n, e, t))];
    case "Mul":
      return [s.mul(I("a", n, e, t), I("b", n, e, t))];
    case "RealDiv":
    case "Div":
      return [s.div(I("a", n, e, t), I("b", n, e, t))];
    case "DivNoNan":
      return [s.divNoNan(I("a", n, e, t), I("b", n, e, t))];
    case "FloorDiv":
      return [s.floorDiv(I("a", n, e, t), I("b", n, e, t))];
    case "Sub":
      return [s.sub(I("a", n, e, t), I("b", n, e, t))];
    case "Minimum":
      return [s.minimum(I("a", n, e, t), I("b", n, e, t))];
    case "Maximum":
      return [s.maximum(I("a", n, e, t), I("b", n, e, t))];
    case "Pow":
      return [s.pow(I("a", n, e, t), I("b", n, e, t))];
    case "SquaredDifference":
      return [s.squaredDifference(I("a", n, e, t), I("b", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const N4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "Abs":
    case "ComplexAbs":
      return [s.abs(I("x", n, e, t))];
    case "Acos":
      return [s.acos(I("x", n, e, t))];
    case "Acosh":
      return [s.acosh(I("x", n, e, t))];
    case "Asin":
      return [s.asin(I("x", n, e, t))];
    case "Asinh":
      return [s.asinh(I("x", n, e, t))];
    case "Atan":
      return [s.atan(I("x", n, e, t))];
    case "Atan2":
      return [s.atan2(I("x", n, e, t), I("y", n, e, t))];
    case "Atanh":
      return [s.atanh(I("x", n, e, t))];
    case "Ceil":
      return [s.ceil(I("x", n, e, t))];
    case "Complex":
      return [s.complex(I("real", n, e, t), I("imag", n, e, t))];
    case "Cos":
      return [s.cos(I("x", n, e, t))];
    case "Cosh":
      return [s.cosh(I("x", n, e, t))];
    case "Elu":
      return [s.elu(I("x", n, e, t))];
    case "Erf":
      return [s.erf(I("x", n, e, t))];
    case "Exp":
      return [s.exp(I("x", n, e, t))];
    case "Expm1":
      return [s.expm1(I("x", n, e, t))];
    case "Floor":
      return [s.floor(I("x", n, e, t))];
    case "Log":
      return [s.log(I("x", n, e, t))];
    case "Log1p":
      return [s.log1p(I("x", n, e, t))];
    case "Imag":
      return [s.imag(I("x", n, e, t))];
    case "Neg":
      return [s.neg(I("x", n, e, t))];
    case "Reciprocal":
      return [s.reciprocal(I("x", n, e, t))];
    case "Real":
      return [s.real(I("x", n, e, t))];
    case "Relu":
      return [s.relu(I("x", n, e, t))];
    case "Round":
      return [s.round(I("x", n, e, t))];
    case "Selu":
      return [s.selu(I("x", n, e, t))];
    case "Sigmoid":
      return [s.sigmoid(I("x", n, e, t))];
    case "Sin":
      return [s.sin(I("x", n, e, t))];
    case "Sign":
      return [s.sign(I("x", n, e, t))];
    case "Sinh":
      return [s.sinh(I("x", n, e, t))];
    case "Softplus":
      return [s.softplus(I("x", n, e, t))];
    case "Sqrt":
      return [s.sqrt(I("x", n, e, t))];
    case "Square":
      return [s.square(I("x", n, e, t))];
    case "Tanh":
      return [s.tanh(I("x", n, e, t))];
    case "Tan":
      return [s.tan(I("x", n, e, t))];
    case "ClipByValue":
      return [s.clipByValue(I("x", n, e, t), I("clipValueMin", n, e, t), I("clipValueMax", n, e, t))];
    case "Relu6":
      return [s.relu6(I("x", n, e, t))];
    case "Rsqrt":
      return [s.rsqrt(gn(n.inputNames[0], e, t))];
    case "LeakyRelu":
      return [s.leakyRelu(I("x", n, e, t), I("alpha", n, e, t))];
    case "Prelu":
      return [s.prelu(I("x", n, e, t), I("alpha", n, e, t))];
    case "IsNan":
      return [s.isNaN(gn(n.inputNames[0], e, t))];
    case "IsInf":
      return [s.isInf(gn(n.inputNames[0], e, t))];
    case "IsFinite":
      return [s.isFinite(gn(n.inputNames[0], e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Es(n, e, t = "") {
  if (!(typeof n == "number" || typeof e == "number")) {
    $(n.length === e.length, () => t + ` Shapes ${n} and ${e} must match`);
    for (let s = 0; s < n.length; s++) {
      const r = n[s], a = e[s];
      $(r < 0 || a < 0 || r === a, () => t + ` Shapes ${n} and ${e} must match`);
    }
  }
}
function q1(n) {
  return !(typeof n == "number" || n.some((e) => e < 0));
}
function Pc(n, e, t) {
  let s = Jg(n, t);
  const r = !q1(s);
  if (r && e.length === 0) throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);
  if (r && e.forEach((a) => {
    s = Jg(a.shape, s);
  }), !q1(s)) throw new Error(`Non-fully-defined elementShape: ${s}`);
  return s;
}
function Jg(n, e) {
  if (typeof n == "number") return e;
  if (typeof e == "number") return n;
  if (n.length !== e.length) throw new Error(`Incompatible ranks during merge: ${n} vs. ${e}`);
  const t = [];
  for (let s = 0; s < n.length; ++s) {
    const r = n[s], a = e[s];
    if (r >= 0 && a >= 0 && r !== a) throw new Error(`Incompatible shape during merge: ${n} vs. ${e}`);
    t[s] = r >= 0 ? r : a;
  }
  return t;
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class T4 {
  constructor(e, t, s, r, a, o, i) {
    this.name = e, this.dtype = t, this.maxSize = s, this.elementShape = r, this.identicalElementShapes = a, this.dynamicSize = o, this.clearAfterRead = i, this.tensors = [], this.closed_ = false, this.idTensor = Ne(0), Qt(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  get closed() {
    return this.closed_;
  }
  clearAndClose(e) {
    this.tensors.forEach((t) => {
      (e == null || !e.has(t.tensor.id)) && t.tensor.dispose();
    }), this.tensors = [], this.closed_ = true, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  read(e) {
    if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || e >= this.size()) throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);
    const t = this.tensors[e];
    if (t.cleared) throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);
    return this.clearAfterRead && (t.cleared = true), t.read = true, t.tensor;
  }
  readMany(e) {
    return e.map((t) => this.read(t));
  }
  write(e, t) {
    if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || !this.dynamicSize && e >= this.maxSize) throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);
    const s = this.tensors[e] || {};
    if (t.dtype !== this.dtype) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);
    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = t.shape), Es(this.elementShape, t.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${e}.`), s.read) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);
    if (s.written) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);
    s.tensor = t, Qt(t), s.written = true, this.tensors[e] = s;
  }
  writeMany(e, t) {
    if (e.length !== t.length) throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);
    e.forEach((s, r) => this.write(s, t[r]));
  }
  gather(e, t) {
    if (t && t !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);
    if (e) e = e.slice(0, this.size());
    else {
      e = [];
      for (let r = 0; r < this.size(); r++) e.push(r);
    }
    if (e.length === 0) return Wn([], [0].concat(this.elementShape));
    const s = this.readMany(e);
    return Es(this.elementShape, s[0].shape, "TensorArray shape mismatch: "), En(s, 0);
  }
  concat(e) {
    if (e && e !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);
    if (this.size() === 0) return Wn([], [0].concat(this.elementShape));
    const t = [];
    for (let r = 0; r < this.size(); r++) t.push(r);
    const s = this.readMany(t);
    return Es(this.elementShape, s[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`), Lt(s, 0);
  }
  scatter(e, t) {
    if (t.dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    if (e.length !== t.shape[0]) throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);
    const s = Math.max(...e);
    if (!this.dynamicSize && s >= this.maxSize) throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);
    this.writeMany(e, vs(t, 0));
  }
  split(e, t) {
    if (t.dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    let s = 0;
    const r = e.map((u) => (s += u, s));
    if (s !== t.shape[0]) throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${t.shape}`);
    if (!this.dynamicSize && e.length !== this.maxSize) throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);
    const a = s === 0 ? 0 : t.size / s, o = [];
    H(() => {
      t = B(t, [1, s, a]);
      for (let u = 0; u < e.length; ++u) {
        const l = [0, u === 0 ? 0 : r[u - 1], 0], d = [1, e[u], a];
        o[u] = B(Qe(t, l, d), this.elementShape);
      }
      return o;
    });
    const i = [];
    for (let u = 0; u < e.length; u++) i[u] = u;
    this.writeMany(i, o);
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Wi {
  get id() {
    return this.idTensor.id;
  }
  constructor(e, t, s, r = -1) {
    this.tensors = e, this.elementShape = t, this.elementDtype = s, e == null ? void 0 : e.forEach((a) => {
      if (s !== a.dtype) throw new Error(`Invalid data types; op elements ${s}, but list elements ${a.dtype}`);
      Es(t, a.shape, "TensorList shape mismatch: "), Qt(a);
    }), this.idTensor = Ne(0), this.maxNumElements = r, Qt(this.idTensor);
  }
  copy() {
    return new Wi([...this.tensors], this.elementShape, this.elementDtype);
  }
  clearAndClose(e) {
    this.tensors.forEach((t) => {
      (e == null || !e.has(t.id)) && t.dispose();
    }), this.tensors.length = 0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  stack(e, t, s = -1) {
    if (t !== this.elementDtype) throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    if (s !== -1 && this.tensors.length !== s) throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);
    Es(e, this.elementShape, "TensorList shape mismatch: ");
    const r = Pc(this.elementShape, this.tensors, e);
    return H(() => {
      const a = this.tensors.map((o) => B(o, r));
      return En(a, 0);
    });
  }
  popBack(e, t) {
    if (t !== this.elementDtype) throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    if (this.size() === 0) throw new Error("Trying to pop from an empty list.");
    const s = Pc(this.elementShape, this.tensors, e), r = this.tensors.pop();
    return r.kept = false, Es(r.shape, e, "TensorList shape mismatch: "), B(r, s);
  }
  pushBack(e) {
    if (e.dtype !== this.elementDtype) throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);
    if (Es(e.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size()) throw new Error("Trying to push element into a full list.");
    Qt(e), this.tensors.push(e);
  }
  resize(e) {
    if (e < 0) throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);
    if (this.maxNumElements !== -1 && e > this.maxNumElements) throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);
    const t = new Wi([], this.elementShape, this.elementDtype, this.maxNumElements);
    t.tensors.length = e;
    for (let s = 0; s < Math.min(this.tensors.length, e); ++s) t.tensors[s] = this.tensors[s];
    return t;
  }
  getItem(e, t, s) {
    if (s !== this.elementDtype) throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);
    if (e < 0 || e > this.tensors.length) throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);
    if (this.tensors[e] == null) throw new Error(`element at index ${e} is null.`);
    Es(this.tensors[e].shape, t, "TensorList shape mismatch: ");
    const r = Pc(this.elementShape, this.tensors, t);
    return B(this.tensors[e], r);
  }
  setItem(e, t) {
    if (t.dtype !== this.elementDtype) throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);
    if (e < 0 || this.maxNumElements !== -1 && e >= this.maxNumElements) throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);
    Es(this.elementShape, t.shape, "TensorList shape mismatch: "), Qt(t), this.tensors[e] != null && (this.tensors[e].kept = false), this.tensors[e] = t;
  }
  gather(e, t, s) {
    if (t !== this.elementDtype) throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    Es(this.elementShape, s, "TensorList shape mismatch: "), e = e.slice(0, this.size());
    const r = Pc(this.elementShape, this.tensors, s);
    return e.length === 0 ? Wn([], [0].concat(r)) : H(() => {
      const a = e.map((o) => B(this.tensors[o], r));
      return En(a, 0);
    });
  }
  concat(e, t) {
    if (e && e !== this.elementDtype) throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);
    Es(this.elementShape, t, "TensorList shape mismatch: ");
    const s = Pc(this.elementShape, this.tensors, t);
    return this.size() === 0 ? Wn([], [0].concat(s)) : H(() => {
      const r = this.tensors.map((a) => B(a, s));
      return Lt(r, 0);
    });
  }
}
function R4(n, e, t) {
  const s = n.dtype;
  if (n.shape.length < 1) throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);
  if (n.dtype !== t) throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${t}`);
  const r = n.shape.slice(1);
  Es(r, e, "TensorList shape mismatch: ");
  const a = vs(n);
  return new Wi(a, e, s);
}
function _4(n, e, t, s) {
  return new Wi([], n, e, s);
}
function E4(n, e, t, s) {
  if (e.length !== n.shape[0]) throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${n.shape[0]}`);
  const r = Math.max(...e);
  if (s != null && s !== -1 && r >= s) throw new Error(`Max index must be < array size (${r}  vs. ${s})`);
  const a = new Wi([], t, n.dtype, s), o = vs(n, 0);
  return e.forEach((i, u) => {
    a.setItem(i, o[u]);
  }), a;
}
function D4(n, e, t) {
  let s = 0;
  const r = e.map((l) => (s += l, s));
  if (s !== n.shape[0]) throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${n.shape}`);
  const a = n.shape.slice(1), o = Jg(a, t), i = s === 0 ? 0 : n.size / s, u = H(() => {
    const l = [];
    n = B(n, [1, s, i]);
    for (let d = 0; d < e.length; ++d) {
      const p = [0, d === 0 ? 0 : r[d - 1], 0], f = [1, e[d], i];
      l[d] = B(Qe(n, p, f), o);
    }
    return n.dispose(), l;
  }), c = new Wi([], t, n.dtype, e.length);
  for (let l = 0; l < u.length; l++) c.setItem(l, u[l]);
  return c;
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const A4 = async (n, e, t) => {
  switch (n.op) {
    case "If":
    case "StatelessIf": {
      const s = I("thenBranch", n, e, t), r = I("elseBranch", n, e, t), a = I("cond", n, e, t), o = I("args", n, e, t);
      return (await a.data())[0] ? t.functionMap[s].executeFunctionAsync(o, t.tensorArrayMap, t.tensorListMap) : t.functionMap[r].executeFunctionAsync(o, t.tensorArrayMap, t.tensorListMap);
    }
    case "While":
    case "StatelessWhile": {
      const s = I("body", n, e, t), r = I("cond", n, e, t), a = I("args", n, e, t), o = await t.functionMap[r].executeFunctionAsync(a, t.tensorArrayMap, t.tensorListMap), i = a.map((l) => l.id);
      let u = await o[0].data();
      o.forEach((l) => {
        !l.kept && i.indexOf(l.id) === -1 && l.dispose();
      });
      let c = a;
      for (; u[0]; ) {
        const l = c;
        c = await t.functionMap[s].executeFunctionAsync(c, t.tensorArrayMap, t.tensorListMap);
        const d = c.map((p) => p.id);
        l.forEach((p) => {
          !p.kept && i.indexOf(p.id) === -1 && d.indexOf(p.id) === -1 && p.dispose();
        });
        const h = await t.functionMap[r].executeFunctionAsync(c, t.tensorArrayMap, t.tensorListMap);
        u = await h[0].data(), h.forEach((p) => {
          !p.kept && i.indexOf(p.id) === -1 && d.indexOf(p.id) === -1 && p.dispose();
        });
      }
      return c;
    }
    case "LoopCond": {
      const s = I("pred", n, e, t);
      return [Er(s)];
    }
    case "Switch": {
      const s = I("pred", n, e, t);
      let r = I("data", n, e, t);
      return r.kept || (r = Er(r)), (await s.data())[0] ? [void 0, r] : [r, void 0];
    }
    case "Merge": {
      const s = n.inputNames.find((r) => gn(r, e, t) !== void 0);
      if (s) {
        const r = gn(s, e, t);
        return [Er(r)];
      }
      return;
    }
    case "Enter": {
      const s = I("frameName", n, e, t), r = I("tensor", n, e, t);
      return t.enterFrame(s), [Er(r)];
    }
    case "Exit": {
      const s = I("tensor", n, e, t);
      return t.exitFrame(), [Er(s)];
    }
    case "NextIteration": {
      const s = I("tensor", n, e, t);
      return t.nextIteration(), [Er(s)];
    }
    case "TensorArrayV3": {
      const s = I("size", n, e, t), r = I("dtype", n, e, t), a = I("elementShape", n, e, t), o = I("dynamicSize", n, e, t), i = I("clearAfterRead", n, e, t), u = I("identicalElementShapes", n, e, t), c = I("name", n, e, t), l = new T4(c, r, s, a, u, o, i);
      return t.addTensorArray(l), [l.idTensor, Ne(1)];
    }
    case "TensorArrayWriteV3": {
      const s = I("tensorArrayId", n, e, t), r = I("index", n, e, t), a = I("tensor", n, e, t), o = t.getTensorArray(s.id);
      return o.write(r, a), [o.idTensor];
    }
    case "TensorArrayReadV3": {
      const s = I("tensorArrayId", n, e, t), r = I("index", n, e, t);
      return [t.getTensorArray(s.id).read(r)];
    }
    case "TensorArrayGatherV3": {
      const s = I("tensorArrayId", n, e, t), r = I("indices", n, e, t), a = I("dtype", n, e, t);
      return [t.getTensorArray(s.id).gather(r, a)];
    }
    case "TensorArrayScatterV3": {
      const s = I("tensorArrayId", n, e, t), r = I("indices", n, e, t), a = I("tensor", n, e, t), o = t.getTensorArray(s.id);
      return o.scatter(r, a), [o.idTensor];
    }
    case "TensorArrayConcatV3": {
      const s = I("tensorArrayId", n, e, t), r = t.getTensorArray(s.id), a = I("dtype", n, e, t);
      return [r.concat(a)];
    }
    case "TensorArraySplitV3": {
      const s = I("tensorArrayId", n, e, t), r = I("tensor", n, e, t), a = I("lengths", n, e, t), o = t.getTensorArray(s.id);
      return o.split(a, r), [o.idTensor];
    }
    case "TensorArraySizeV3": {
      const s = I("tensorArrayId", n, e, t), r = t.getTensorArray(s.id);
      return [Ne(r.size(), "int32")];
    }
    case "TensorArrayCloseV3": {
      const s = I("tensorArrayId", n, e, t), r = t.getTensorArray(s.id);
      return r.clearAndClose(), [r.idTensor];
    }
    case "TensorListSetItem": {
      const s = I("tensorListId", n, e, t), r = I("index", n, e, t), a = I("tensor", n, e, t), o = t.getTensorList(s.id);
      return o.setItem(r, a), [o.idTensor];
    }
    case "TensorListGetItem": {
      const s = I("tensorListId", n, e, t), r = I("index", n, e, t), a = I("elementShape", n, e, t), o = I("elementDType", n, e, t);
      return [t.getTensorList(s.id).getItem(r, a, o)];
    }
    case "TensorListScatterV2":
    case "TensorListScatter": {
      const s = I("indices", n, e, t), r = I("tensor", n, e, t), a = I("elementShape", n, e, t), o = I("numElements", n, e, t), i = E4(r, s, a, o);
      return t.addTensorList(i), [i.idTensor];
    }
    case "TensorListReserve":
    case "EmptyTensorList": {
      const s = I("elementShape", n, e, t), r = I("elementDType", n, e, t);
      let a;
      n.op === "TensorListReserve" ? a = "numElements" : a = "maxNumElements";
      const o = I(a, n, e, t), i = n.op === "TensorListReserve" ? -1 : o, u = _4(s, r, o, i);
      return t.addTensorList(u), [u.idTensor];
    }
    case "TensorListGather": {
      const s = I("tensorListId", n, e, t), r = I("indices", n, e, t), a = I("elementShape", n, e, t), o = I("elementDType", n, e, t);
      return [t.getTensorList(s.id).gather(r, o, a)];
    }
    case "TensorListStack": {
      const s = I("tensorListId", n, e, t), r = I("elementShape", n, e, t), a = I("elementDType", n, e, t), o = I("numElements", n, e, t);
      return [t.getTensorList(s.id).stack(r, a, o)];
    }
    case "TensorListFromTensor": {
      const s = I("tensor", n, e, t), r = I("elementShape", n, e, t), a = I("elementDType", n, e, t), o = R4(s, r, a);
      return t.addTensorList(o), [o.idTensor];
    }
    case "TensorListConcat":
    case "TensorListConcatV2": {
      const s = I("tensorListId", n, e, t), r = t.getTensorList(s.id), a = I("dtype", n, e, t), o = I("elementShape", n, e, t);
      return [r.concat(a, o)];
    }
    case "TensorListPushBack": {
      const s = I("tensorListId", n, e, t), r = I("tensor", n, e, t), a = t.getTensorList(s.id);
      return a.pushBack(r), [a.idTensor];
    }
    case "TensorListPopBack": {
      const s = I("tensorListId", n, e, t), r = I("elementShape", n, e, t), a = I("elementDType", n, e, t);
      return [t.getTensorList(s.id).popBack(r, a)];
    }
    case "TensorListSplit": {
      const s = I("tensor", n, e, t), r = I("elementShape", n, e, t), a = I("lengths", n, e, t), o = D4(s, a, r);
      return t.addTensorList(o), [o.idTensor];
    }
    case "TensorListLength": {
      const s = I("tensorListId", n, e, t), r = t.getTensorList(s.id);
      return [Ne(r.size(), "int32")];
    }
    case "TensorListResize": {
      const s = I("tensorListId", n, e, t), r = I("size", n, e, t), o = t.getTensorList(s.id).resize(r);
      return t.addTensorList(o), [o.idTensor];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function K1(n, e, t) {
  const [s, r] = I("fusedOps", n, e, t), a = s === "biasadd", o = !a, i = r === "prelu", u = s === "fusedbatchnorm", c = I("numArgs", n, e, t);
  if (a) {
    if (i && c !== 2) throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
    if (!i && a && c !== 1) throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
  }
  if (u) throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");
  const l = I("strides", n, e, t), d = xp(n, e, t), h = I("dataFormat", n, e, t).toUpperCase(), p = I("dilations", n, e, t);
  let [f, m] = I("args", n, e, t);
  o && (m = f, f = void 0);
  const g = I("leakyreluAlpha", n, e, t);
  return { stride: l, pad: d, dataFormat: h, dilations: p, biasArg: f, preluArg: m, activationFunc: r, leakyreluAlpha: g };
}
const F4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "Conv1D": {
      const r = I("stride", n, e, t), a = I("pad", n, e, t), o = I("dataFormat", n, e, t).toUpperCase(), i = I("dilation", n, e, t);
      return [s.conv1d(I("x", n, e, t), I("filter", n, e, t), r, a, o, i)];
    }
    case "Conv2D": {
      const r = I("strides", n, e, t), a = xp(n, e, t), o = I("dataFormat", n, e, t).toUpperCase(), i = I("dilations", n, e, t);
      return [s.conv2d(I("x", n, e, t), I("filter", n, e, t), [r[1], r[2]], a, o, [i[1], i[2]])];
    }
    case "_FusedConv2D": {
      const { stride: r, pad: a, dataFormat: o, dilations: i, biasArg: u, preluArg: c, activationFunc: l, leakyreluAlpha: d } = K1(n, e, t);
      return [s.fused.conv2d({ x: I("x", n, e, t), filter: I("filter", n, e, t), strides: [r[1], r[2]], pad: a, dataFormat: o, dilations: [i[1], i[2]], bias: u, activation: l, preluActivationWeights: c, leakyreluAlpha: d })];
    }
    case "FusedDepthwiseConv2dNative": {
      const { stride: r, pad: a, dataFormat: o, dilations: i, biasArg: u, preluArg: c, activationFunc: l, leakyreluAlpha: d } = K1(n, e, t);
      return [s.fused.depthwiseConv2d({ x: I("x", n, e, t), filter: I("filter", n, e, t), strides: [r[1], r[2]], pad: a, dataFormat: o, dilations: [i[1], i[2]], bias: u, activation: l, preluActivationWeights: c, leakyreluAlpha: d })];
    }
    case "Conv2DBackpropInput":
    case "Conv2dTranspose": {
      const r = I("outputShape", n, e, t), a = I("strides", n, e, t), o = xp(n, e, t);
      return [s.conv2dTranspose(I("x", n, e, t), I("filter", n, e, t), r, [a[1], a[2]], o)];
    }
    case "DepthwiseConv2dNative":
    case "DepthwiseConv2d": {
      const r = I("strides", n, e, t), a = xp(n, e, t), o = I("dilations", n, e, t), i = I("dataFormat", n, e, t).toUpperCase();
      return [s.depthwiseConv2d(I("input", n, e, t), I("filter", n, e, t), [r[1], r[2]], a, i, [o[1], o[2]])];
    }
    case "Conv3D": {
      const r = I("strides", n, e, t), a = I("pad", n, e, t), o = I("dataFormat", n, e, t).toUpperCase(), i = I("dilations", n, e, t);
      return [s.conv3d(I("x", n, e, t), I("filter", n, e, t), [r[1], r[2], r[3]], a, o, [i[1], i[2], i[3]])];
    }
    case "AvgPool": {
      const r = I("strides", n, e, t), a = I("pad", n, e, t), o = I("kernelSize", n, e, t);
      return [s.avgPool(I("x", n, e, t), [o[1], o[2]], [r[1], r[2]], a)];
    }
    case "MaxPool": {
      const r = I("strides", n, e, t), a = I("pad", n, e, t), o = I("kernelSize", n, e, t);
      return [s.maxPool(I("x", n, e, t), [o[1], o[2]], [r[1], r[2]], a)];
    }
    case "MaxPoolWithArgmax": {
      const r = I("strides", n, e, t), a = I("pad", n, e, t), o = I("kernelSize", n, e, t), i = I("includeBatchInIndex", n, e, t), { result: u, indexes: c } = s.maxPoolWithArgmax(I("x", n, e, t), [o[1], o[2]], [r[1], r[2]], a, i);
      return [u, c];
    }
    case "AvgPool3D": {
      const r = I("strides", n, e, t), a = I("pad", n, e, t), o = I("kernelSize", n, e, t);
      return [s.avgPool3d(I("x", n, e, t), [o[1], o[2], o[3]], [r[1], r[2], r[3]], a)];
    }
    case "MaxPool3D": {
      const r = I("strides", n, e, t), a = I("pad", n, e, t), o = I("kernelSize", n, e, t);
      return [s.maxPool3d(I("x", n, e, t), [o[1], o[2], o[3]], [r[1], r[2], r[3]], a)];
    }
    case "Dilation2D": {
      const r = I("strides", n, e, t), a = I("pad", n, e, t), o = I("dilations", n, e, t), i = r[1], u = r[2], c = o[1], l = o[2];
      return [s.dilation2d(I("x", n, e, t), I("filter", n, e, t), [i, u], a, [c, l], "NHWC")];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const O4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "Fill": {
      const r = I("shape", n, e, t), a = I("dtype", n, e, t), o = I("value", n, e, t);
      return [s.fill(r, o, a)];
    }
    case "LinSpace": {
      const r = I("start", n, e, t), a = I("stop", n, e, t), o = I("num", n, e, t);
      return [s.linspace(r, a, o)];
    }
    case "Multinomial": {
      const r = I("logits", n, e, t), a = I("numSamples", n, e, t), o = I("seed", n, e, t);
      return [s.multinomial(r, a, o)];
    }
    case "OneHot": {
      const r = I("indices", n, e, t), a = I("depth", n, e, t), o = I("onValue", n, e, t), i = I("offValue", n, e, t), u = I("dtype", n, e, t);
      return [s.oneHot(r, a, o, i, u)];
    }
    case "Ones":
      return [s.ones(I("shape", n, e, t), I("dtype", n, e, t))];
    case "OnesLike":
      return [s.onesLike(I("x", n, e, t))];
    case "RandomStandardNormal":
      return [s.randomStandardNormal(I("shape", n, e, t), I("dtype", n, e, t), I("seed", n, e, t))];
    case "RandomUniform":
      return [s.randomUniform(I("shape", n, e, t), I("minval", n, e, t), I("maxval", n, e, t), I("dtype", n, e, t))];
    case "RandomUniformInt":
      return [s.randomUniformInt(I("shape", n, e, t), I("minval", n, e, t), I("maxval", n, e, t), I("seed", n, e, t))];
    case "Range": {
      const r = I("start", n, e, t), a = I("stop", n, e, t), o = I("step", n, e, t);
      return [s.range(r, a, o, I("dtype", n, e, t))];
    }
    case "TruncatedNormal": {
      const r = I("shape", n, e, t), a = I("mean", n, e, t), o = I("stdDev", n, e, t), i = I("seed", n, e, t);
      return [s.truncatedNormal(r, a, o, I("dtype", n, e, t), i)];
    }
    case "Zeros":
      return [s.zeros(I("shape", n, e, t), I("dtype", n, e, t))];
    case "ZerosLike":
      return [s.zerosLike(I("x", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function og(n, e, t) {
  const s = I("boxes", n, e, t), r = I("scores", n, e, t), a = I("maxOutputSize", n, e, t), o = I("iouThreshold", n, e, t), i = I("scoreThreshold", n, e, t), u = I("softNmsSigma", n, e, t);
  return { boxes: s, scores: r, maxOutputSize: a, iouThreshold: o, scoreThreshold: i, softNmsSigma: u };
}
const P4 = async (n, e, t, s, r = wn) => {
  switch (n.op) {
    case "NonMaxSuppressionV5": {
      const { boxes: a, scores: o, maxOutputSize: i, iouThreshold: u, scoreThreshold: c, softNmsSigma: l } = og(n, e, t), d = await r.image.nonMaxSuppressionWithScoreAsync(a, o, i, u, c, l);
      return [d.selectedIndices, d.selectedScores];
    }
    case "NonMaxSuppressionV4": {
      const { boxes: a, scores: o, maxOutputSize: i, iouThreshold: u, scoreThreshold: c } = og(n, e, t), l = I("padToMaxOutputSize", n, e, t), d = await r.image.nonMaxSuppressionPaddedAsync(a, o, i, u, c, l);
      return [d.selectedIndices, d.validOutputs];
    }
    case "NonMaxSuppressionV3":
    case "NonMaxSuppressionV2": {
      const { boxes: a, scores: o, maxOutputSize: i, iouThreshold: u, scoreThreshold: c } = og(n, e, t);
      return [await r.image.nonMaxSuppressionAsync(a, o, i, u, c)];
    }
    case "Where": {
      const a = r.cast(I("condition", n, e, t), "bool"), o = [await r.whereAsync(a)];
      return a.dispose(), o;
    }
    case "ListDiff":
      return r.setdiff1dAsync(I("x", n, e, t), I("y", n, e, t));
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const L4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "LowerBound": {
      const r = I("sortedSequence", n, e, t), a = I("values", n, e, t);
      return [s.lowerBound(r, a)];
    }
    case "TopKV2": {
      const r = I("x", n, e, t), a = I("k", n, e, t), o = I("sorted", n, e, t), i = s.topk(r, a, o);
      return [i.values, i.indices];
    }
    case "UpperBound": {
      const r = I("sortedSequence", n, e, t), a = I("values", n, e, t);
      return [s.upperBound(r, a)];
    }
    case "Unique": {
      const r = I("x", n, e, t), a = s.unique(r);
      return [a.values, a.indices];
    }
    case "UniqueV2": {
      const r = I("x", n, e, t), a = I("axis", n, e, t), o = s.unique(r, a);
      return [o.values, o.indices];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const z4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "Const":
      return e[n.name];
    case "PlaceholderWithDefault":
      const r = I("default", n, e, t);
      return [gn(n.name, e, t) || r];
    case "Placeholder":
      return [gn(n.name, e, t)];
    case "Identity":
    case "StopGradient":
    case "FakeQuantWithMinMaxVars": {
      const l = I("x", n, e, t);
      return [Er(l)];
    }
    case "IdentityN":
      return I("x", n, e, t).map((l) => Er(l));
    case "Snapshot":
      const a = I("x", n, e, t);
      return [Er(a)];
    case "Shape":
      return [s.tensor1d(I("x", n, e, t).shape, "int32")];
    case "ShapeN":
      return I("x", n, e, t).map((l) => s.tensor1d(l.shape));
    case "Size":
      return [s.scalar(I("x", n, e, t).size, "int32")];
    case "Rank":
      return [s.scalar(I("x", n, e, t).rank, "int32")];
    case "NoOp":
      return [s.scalar(1)];
    case "Print":
      const o = I("x", n, e, t), i = I("data", n, e, t), u = I("message", n, e, t), c = I("summarize", n, e, t);
      console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(u);
      for (let l = 0; l < i.length; l++) console.log(Array.prototype.slice.call(i[l].dataSync()).slice(0, c));
      return [o];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class M4 {
  get id() {
    return this.handle.id;
  }
  constructor(e, t) {
    this.keyDType = e, this.valueDType = t, this.handle = Ne(0), this.tensorMap = /* @__PURE__ */ new Map(), Qt(this.handle);
  }
  clearAndClose() {
    this.tensorMap.forEach((e) => e.dispose()), this.tensorMap.clear(), this.handle.dispose();
  }
  size() {
    return this.tensorMap.size;
  }
  tensorSize() {
    return Ne(this.size(), "int32");
  }
  async import(e, t) {
    this.checkKeyAndValueTensor(e, t);
    const s = await e.data();
    return this.tensorMap.forEach((r) => r.dispose()), this.tensorMap.clear(), H(() => {
      const r = vs(t), a = s.length, o = r.length;
      $(a === o, () => `The number of elements doesn't match, keys has ${a} elements, the values has ${o} elements.`);
      for (let i = 0; i < a; i++) {
        const u = s[i], c = r[i];
        Qt(c), this.tensorMap.set(u, c);
      }
      return this.handle;
    });
  }
  async find(e, t) {
    this.checkKeyAndValueTensor(e, t);
    const s = await e.data();
    return H(() => {
      const r = [];
      for (let a = 0; a < s.length; a++) {
        const o = s[a], i = this.findWithDefault(o, t);
        r.push(i);
      }
      return En(r);
    });
  }
  findWithDefault(e, t) {
    const s = this.tensorMap.get(e);
    return s ?? t;
  }
  checkKeyAndValueTensor(e, t) {
    if (e.dtype !== this.keyDType) throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);
    if (t.dtype !== this.valueDType) throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`);
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const B4 = async (n, e, t, s) => {
  switch (n.op) {
    case "HashTable":
    case "HashTableV2": {
      const r = s.getHashTableHandleByName(n.name);
      if (r != null) return [r];
      {
        const a = I("keyDType", n, e, t), o = I("valueDType", n, e, t), i = new M4(a, o);
        return s.addHashTable(n.name, i), [i.handle];
      }
    }
    case "InitializeTable":
    case "InitializeTableV2":
    case "LookupTableImport":
    case "LookupTableImportV2": {
      const r = I("tableHandle", n, e, t, s), a = I("keys", n, e, t), o = I("values", n, e, t);
      return [await s.getHashTableById(r.id).import(a, o)];
    }
    case "LookupTableFind":
    case "LookupTableFindV2": {
      const r = I("tableHandle", n, e, t, s), a = I("keys", n, e, t), o = I("defaultValue", n, e, t);
      return [await s.getHashTableById(r.id).find(a, o)];
    }
    case "LookupTableSize":
    case "LookupTableSizeV2": {
      const r = I("tableHandle", n, e, t, s);
      return [s.getHashTableById(r.id).tensorSize()];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const W4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "ResizeBilinear": {
      const r = I("images", n, e, t), a = I("size", n, e, t), o = I("alignCorners", n, e, t), i = I("halfPixelCenters", n, e, t);
      return [s.image.resizeBilinear(r, [a[0], a[1]], o, i)];
    }
    case "ResizeNearestNeighbor": {
      const r = I("images", n, e, t), a = I("size", n, e, t), o = I("alignCorners", n, e, t), i = I("halfPixelCenters", n, e, t);
      return [s.image.resizeNearestNeighbor(r, [a[0], a[1]], o, i)];
    }
    case "CropAndResize": {
      const r = I("image", n, e, t), a = I("boxes", n, e, t), o = I("boxInd", n, e, t), i = I("cropSize", n, e, t), u = I("method", n, e, t), c = I("extrapolationValue", n, e, t);
      return [s.image.cropAndResize(r, a, o, i, u, c)];
    }
    case "ImageProjectiveTransformV3": {
      const r = I("images", n, e, t), a = I("transforms", n, e, t), o = I("outputShape", n, e, t), i = I("fillValue", n, e, t), u = I("interpolation", n, e, t), c = I("fillMode", n, e, t);
      return [s.image.transform(r, a, u.toLowerCase(), c.toLowerCase(), i, o)];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const V4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "Equal":
      return [s.equal(I("a", n, e, t), I("b", n, e, t))];
    case "NotEqual":
      return [s.notEqual(I("a", n, e, t), I("b", n, e, t))];
    case "Greater":
      return [s.greater(I("a", n, e, t), I("b", n, e, t))];
    case "GreaterEqual":
      return [s.greaterEqual(I("a", n, e, t), I("b", n, e, t))];
    case "Less":
      return [s.less(I("a", n, e, t), I("b", n, e, t))];
    case "LessEqual":
      return [s.lessEqual(I("a", n, e, t), I("b", n, e, t))];
    case "LogicalAnd":
      return [s.logicalAnd(I("a", n, e, t), I("b", n, e, t))];
    case "LogicalNot":
      return [s.logicalNot(I("a", n, e, t))];
    case "LogicalOr":
      return [s.logicalOr(I("a", n, e, t), I("b", n, e, t))];
    case "Select":
    case "SelectV2":
      return [s.where(I("condition", n, e, t), I("a", n, e, t), I("b", n, e, t))];
    case "BitwiseAnd":
      return [s.bitwiseAnd(I("a", n, e, t), I("b", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const U4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "BatchMatMul":
    case "BatchMatMulV2":
    case "MatMul":
      return [s.matMul(I("a", n, e, t), I("b", n, e, t), I("transposeA", n, e, t), I("transposeB", n, e, t))];
    case "Einsum":
      return [s.einsum(I("equation", n, e, t), ...I("tensors", n, e, t))];
    case "Transpose":
      return [s.transpose(I("x", n, e, t), I("perm", n, e, t))];
    case "_FusedMatMul":
      const [r, a] = I("fusedOps", n, e, t), o = r === "biasadd", i = a === "prelu", u = I("numArgs", n, e, t), c = I("leakyreluAlpha", n, e, t);
      if (o) {
        if (i && u !== 2) throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
        if (!i && u !== 1) throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
      }
      const [l, d] = I("args", n, e, t);
      return [s.fused.matMul({ a: I("a", n, e, t), b: I("b", n, e, t), transposeA: I("transposeA", n, e, t), transposeB: I("transposeB", n, e, t), bias: l, activation: a, preluActivationWeights: d, leakyreluAlpha: c })];
    case "MatrixBandPart":
      return [s.linalg.bandPart(I("a", n, e, t), I("numLower", n, e, t), I("numUpper", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const G4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "EuclideanNorm":
      return [s.euclideanNorm(I("x", n, e, t), I("axis", n, e, t), I("keepDims", n, e, t))];
    case "FusedBatchNorm":
    case "FusedBatchNormV2":
      return [s.batchNorm(I("x", n, e, t), I("mean", n, e, t), I("variance", n, e, t), I("offset", n, e, t), I("scale", n, e, t), I("epsilon", n, e, t))];
    case "FusedBatchNormV3":
      return [s.batchNorm(I("x", n, e, t), I("mean", n, e, t), I("variance", n, e, t), I("offset", n, e, t), I("scale", n, e, t), I("epsilon", n, e, t))];
    case "LRN":
      return [s.localResponseNormalization(I("x", n, e, t), I("radius", n, e, t), I("bias", n, e, t), I("alpha", n, e, t), I("beta", n, e, t))];
    case "Softmax":
      return [s.softmax(I("x", n, e, t))];
    case "LogSoftmax":
      return [s.logSoftmax(I("x", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const H4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "RaggedGather": {
      const { outputNestedSplits: r, outputDenseValues: a } = s.raggedGather(I("paramsNestedSplits", n, e, t), I("paramsDenseValues", n, e, t), I("indices", n, e, t), I("outputRaggedRank", n, e, t));
      return r.concat(a);
    }
    case "RaggedRange": {
      const { rtNestedSplits: r, rtDenseValues: a } = s.raggedRange(I("starts", n, e, t), I("limits", n, e, t), I("splits", n, e, t));
      return [r, a];
    }
    case "RaggedTensorToTensor":
      return [s.raggedTensorToTensor(I("shape", n, e, t), I("values", n, e, t), I("defaultValue", n, e, t), I("rowPartitionTensors", n, e, t), I("rowPartitionTypes", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const j4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "Max": {
      const i = I("axis", n, e, t), u = I("keepDims", n, e, t);
      return [s.max(I("x", n, e, t), i, u)];
    }
    case "Mean": {
      const i = I("axis", n, e, t), u = I("keepDims", n, e, t);
      return [s.mean(I("x", n, e, t), i, u)];
    }
    case "Min": {
      const i = I("axis", n, e, t), u = I("keepDims", n, e, t);
      return [s.min(I("x", n, e, t), i, u)];
    }
    case "Sum": {
      const i = I("axis", n, e, t), u = I("keepDims", n, e, t);
      return [s.sum(I("x", n, e, t), i, u)];
    }
    case "All": {
      const i = I("axis", n, e, t), u = I("keepDims", n, e, t);
      return [s.all(I("x", n, e, t), i, u)];
    }
    case "Any": {
      const i = I("axis", n, e, t), u = I("keepDims", n, e, t);
      return [s.any(I("x", n, e, t), i, u)];
    }
    case "ArgMax": {
      const i = I("axis", n, e, t);
      return [s.argMax(I("x", n, e, t), i)];
    }
    case "ArgMin": {
      const i = I("axis", n, e, t);
      return [s.argMin(I("x", n, e, t), i)];
    }
    case "Prod": {
      const i = I("axis", n, e, t), u = I("keepDims", n, e, t);
      return [s.prod(I("x", n, e, t), i, u)];
    }
    case "Cumprod": {
      const i = I("axis", n, e, t), u = I("exclusive", n, e, t), c = I("reverse", n, e, t);
      return [s.cumprod(I("x", n, e, t), i, u, c)];
    }
    case "Cumsum": {
      const i = I("axis", n, e, t), u = I("exclusive", n, e, t), c = I("reverse", n, e, t);
      return [s.cumsum(I("x", n, e, t), i, u, c)];
    }
    case "Bincount":
      const r = I("x", n, e, t), a = I("weights", n, e, t), o = I("size", n, e, t);
      return [s.bincount(r, a, o)];
    case "DenseBincount": {
      const i = I("x", n, e, t), u = I("weights", n, e, t), c = I("size", n, e, t), l = I("binaryOutput", n, e, t);
      return [s.denseBincount(i, u, c, l)];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const q4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "ConcatV2":
    case "Concat": {
      const r = I("n", n, e, t), a = I("axis", n, e, t);
      let o = I("tensors", n, e, t);
      return o = o.slice(0, r), [s.concat(o, a)];
    }
    case "Gather": {
      const r = I("x", n, e, t), a = I("indices", n, e, t);
      return [s.gather(r, s.cast(a, "int32"), 0)];
    }
    case "GatherV2": {
      const r = I("axis", n, e, t), a = I("batchDims", n, e, t), o = I("x", n, e, t), i = I("indices", n, e, t);
      return [s.gather(o, s.cast(i, "int32"), r, a)];
    }
    case "Reverse": {
      const r = I("dims", n, e, t), a = [];
      for (let i = 0; i < r.length; i++) r[i] && a.push(i);
      const o = I("x", n, e, t);
      return [s.reverse(o, a)];
    }
    case "ReverseV2": {
      const r = I("axis", n, e, t), a = I("x", n, e, t);
      return [s.reverse(a, r)];
    }
    case "Slice": {
      const r = I("begin", n, e, t), a = I("size", n, e, t);
      return [s.slice(I("x", n, e, t), r, a)];
    }
    case "StridedSlice": {
      const r = I("begin", n, e, t), a = I("end", n, e, t), o = I("strides", n, e, t), i = I("beginMask", n, e, t), u = I("endMask", n, e, t), c = I("ellipsisMask", n, e, t), l = I("newAxisMask", n, e, t), d = I("shrinkAxisMask", n, e, t), h = I("x", n, e, t);
      return [s.stridedSlice(h, r, a, o, i, u, c, l, d)];
    }
    case "Pack":
      return H(() => {
        const r = I("axis", n, e, t), a = I("tensors", n, e, t), o = a[0].shape, i = s.squeeze(a[0]).shape, u = a.map((c) => {
          const l = Be(c.shape, o);
          if (!l && !Be(s.squeeze(c).shape, i)) throw new Error("the input tensors shape does not match");
          return l ? c : s.reshape(c, o);
        });
        return [s.stack(u, r)];
      });
    case "Unpack": {
      const r = I("axis", n, e, t), a = I("tensor", n, e, t);
      return s.unstack(a, r);
    }
    case "Tile": {
      const r = I("reps", n, e, t);
      return [s.tile(I("x", n, e, t), r)];
    }
    case "Split":
    case "SplitV": {
      const r = I("axis", n, e, t), a = I("numOrSizeSplits", n, e, t), o = I("x", n, e, t);
      return s.split(o, a, r);
    }
    case "ScatterNd": {
      const r = I("indices", n, e, t), a = I("values", n, e, t), o = I("shape", n, e, t);
      return [s.scatterND(r, a, o)];
    }
    case "GatherNd": {
      const r = I("x", n, e, t), a = I("indices", n, e, t);
      return [s.gatherND(r, a)];
    }
    case "SparseToDense": {
      const r = I("sparseIndices", n, e, t), a = I("outputShape", n, e, t), o = I("sparseValues", n, e, t), i = I("defaultValue", n, e, t);
      return [s.sparseToDense(r, o, a, o.dtype === i.dtype ? i : s.cast(i, o.dtype))];
    }
    case "TensorScatterUpdate": {
      const r = I("indices", n, e, t), a = I("values", n, e, t), o = I("tensor", n, e, t);
      return [s.tensorScatterUpdate(o, r, a)];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const K4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "SparseFillEmptyRows": {
      const { outputIndices: r, outputValues: a, emptyRowIndicator: o, reverseIndexMap: i } = s.sparse.sparseFillEmptyRows(I("indices", n, e, t), I("values", n, e, t), I("denseShape", n, e, t), I("defaultValue", n, e, t));
      return [r, a, o, i];
    }
    case "SparseReshape": {
      const { outputIndices: r, outputShape: a } = s.sparse.sparseReshape(I("inputIndices", n, e, t), I("inputShape", n, e, t), I("newShape", n, e, t));
      return [r, a];
    }
    case "SparseSegmentMean":
      return [s.sparse.sparseSegmentMean(I("data", n, e, t), I("indices", n, e, t), I("segmentIds", n, e, t))];
    case "SparseSegmentSum":
      return [s.sparse.sparseSegmentSum(I("data", n, e, t), I("indices", n, e, t), I("segmentIds", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const X4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "FFT":
      return [s.fft(I("x", n, e, t))];
    case "IFFT":
      return [s.ifft(I("x", n, e, t))];
    case "RFFT":
      return [s.rfft(I("x", n, e, t))];
    case "IRFFT":
      return [s.irfft(I("x", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Y4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "StaticRegexReplace":
      return [s.string.staticRegexReplace(I("input", n, e, t), I("pattern", n, e, t), I("rewrite", n, e, t), I("replaceGlobal", n, e, t))];
    case "StringNGrams": {
      const { nGrams: r, nGramsSplits: a } = s.string.stringNGrams(I("data", n, e, t), I("dataSplits", n, e, t), I("separator", n, e, t), I("nGramWidths", n, e, t), I("leftPad", n, e, t), I("rightPad", n, e, t), I("padWidth", n, e, t), I("preserveShortSequences", n, e, t));
      return [r, a];
    }
    case "StringSplit": {
      const { indices: r, values: a, shape: o } = s.string.stringSplit(I("input", n, e, t), I("delimiter", n, e, t), I("skipEmpty", n, e, t));
      return [r, a, o];
    }
    case "StringToHashBucketFast":
      return [s.string.stringToHashBucketFast(I("input", n, e, t), I("numBuckets", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Q4 = (n, e, t, s = wn) => {
  switch (n.op) {
    case "Cast":
      return [s.cast(I("x", n, e, t), I("dtype", n, e, t))];
    case "ExpandDims": {
      const r = I("axis", n, e, t);
      return [s.expandDims(I("x", n, e, t), r)];
    }
    case "Squeeze": {
      const r = I("axis", n, e, t);
      return [s.squeeze(I("x", n, e, t), r)];
    }
    case "Reshape":
      return [s.reshape(I("x", n, e, t), I("shape", n, e, t))];
    case "EnsureShape":
      return [s.ensureShape(I("x", n, e, t), I("shape", n, e, t))];
    case "MirrorPad":
      return [s.mirrorPad(I("x", n, e, t), I("padding", n, e, t), I("mode", n, e, t))];
    case "PadV2":
    case "Pad":
      return [s.pad(I("x", n, e, t), I("padding", n, e, t), I("constantValue", n, e, t))];
    case "SpaceToBatchND": {
      const r = I("blockShape", n, e, t), a = I("paddings", n, e, t);
      return [s.spaceToBatchND(I("x", n, e, t), r, a)];
    }
    case "BatchToSpaceND": {
      const r = I("blockShape", n, e, t), a = I("crops", n, e, t);
      return [s.batchToSpaceND(I("x", n, e, t), r, a)];
    }
    case "DepthToSpace": {
      const r = I("blockSize", n, e, t), a = I("dataFormat", n, e, t).toUpperCase();
      return [s.depthToSpace(I("x", n, e, t), r, a)];
    }
    case "BroadcastTo":
      return [s.broadcastTo(I("x", n, e, t), I("shape", n, e, t))];
    case "BroadcastArgs":
      return [s.broadcastArgs(I("s0", n, e, t), I("s1", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function X1(n, e, t, s, r = H) {
  const a = ((o, i, u) => {
    switch (o.category) {
      case "arithmetic":
        return r(() => k4(o, i, u));
      case "basic_math":
        return r(() => N4(o, i, u));
      case "control":
        return A4(o, i, u);
      case "convolution":
        return r(() => F4(o, i, u));
      case "creation":
        return r(() => O4(o, i, u));
      case "dynamic":
        return P4(o, i, u);
      case "evaluation":
        return r(() => L4(o, i, u));
      case "image":
        return r(() => W4(o, i, u));
      case "graph":
        return r(() => z4(o, i, u));
      case "logical":
        return r(() => V4(o, i, u));
      case "matrices":
        return r(() => U4(o, i, u));
      case "normalization":
        return r(() => G4(o, i, u));
      case "ragged":
        return r(() => H4(o, i, u));
      case "reduction":
        return r(() => j4(o, i, u));
      case "slice_join":
        return r(() => q4(o, i, u));
      case "sparse":
        return r(() => K4(o, i, u));
      case "spectral":
        return r(() => X4(o, i, u));
      case "string":
        return r(() => Y4(o, i, u));
      case "transformation":
        return r(() => Q4(o, i, u));
      case "hash_table":
        return B4(o, i, u, s);
      case "custom":
        const c = O$(o.op);
        if (c && c.customExecutor) return c.customExecutor(new $4(o, i, u));
        throw TypeError(`Custom op ${o.op} is not registered.`);
      default:
        throw TypeError(`Unknown op '${o.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);
    }
  })(n, e, t);
  return Pr(a) ? a.then((o) => [].concat(o)) : [].concat(a);
}
class Y1 {
  constructor(e = {}, t = {}, s = {}, r = {}, a) {
    this.weightMap = e, this.tensorArrayMap = t, this.tensorListMap = s, this.functionMap = r, this.parseNodeNameCache = a, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
  }
  newFrame(e, t) {
    return { id: e, frameName: t, iterationId: 0 };
  }
  set currentContext(e) {
    this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());
  }
  get currentContext() {
    return this.contexts;
  }
  get currentContextId() {
    return this._currentContextIds[0];
  }
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    const e = [];
    for (let t = 0; t < this.contexts.length - 1; t++) {
      const s = this.contexts.slice(0, this.contexts.length - t);
      e.push(this.contextIdforContexts(s));
    }
    e.push(""), this._currentContextIds = e;
  }
  contextIdforContexts(e) {
    return e ? e.map((t) => t.id === 0 && t.iterationId === 0 ? "" : `${t.frameName}-${t.iterationId}`).join("/") : "";
  }
  enterFrame(e) {
    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
  }
  exitFrame() {
    if (this.contexts && this.contexts.length > 1) this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    else throw new Error("Cannot exit frame, the context is empty");
  }
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice(), this.lastId++;
      const e = Object.assign({}, this.contexts[this.contexts.length - 1]);
      e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else throw new Error("Cannot increase frame iteration, the context is empty");
  }
  getWeight(e) {
    return this.weightMap[e];
  }
  addTensorArray(e) {
    this.tensorArrayMap[e.id] = e;
  }
  getTensorArray(e) {
    return this.tensorArrayMap[e];
  }
  addTensorList(e) {
    this.tensorListMap[e.id] = e;
  }
  getTensorList(e) {
    return this.tensorListMap[e];
  }
  dispose(e) {
    for (const t in this.tensorArrayMap) this.tensorArrayMap[t].clearAndClose(e);
    for (const t in this.tensorListMap) this.tensorListMap[t].clearAndClose(e);
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Q1(n, e, t, s) {
  const r = /* @__PURE__ */ new Set(), a = [];
  let o = null, i = null;
  const u = /* @__PURE__ */ new Set(), c = new Set(Object.keys(n).map((h) => ns(h)[0]));
  s = s || [];
  const l = new Set(s.map((h) => ns(h.name)[0])), d = [...e];
  for (; d.length > 0; ) {
    const h = d.pop();
    if ((yi(h) || aG(h) || oG(h)) && o == null && (o = h, i = o.children.map((p) => p.name).filter((p) => r.has(p))), r.add(h.name), t[h.name] == null && !c.has(h.name) && !l.has(h.name)) {
      if (h.inputs.length === 0) {
        a.push(h.name);
        continue;
      }
      h.inputs.forEach((p) => {
        u.has(p.name) || (u.add(p.name), d.push(p));
      });
    }
  }
  return { inputs: n, outputs: e, usedNodes: r, missingInputs: a, dynamicNode: o, syncInputs: i };
}
function Z4(n, e) {
  const { usedNodes: t, inputs: s } = e, r = Object.keys(s).map((g) => ns(g)[0]).map((g) => n.nodes[g]), a = n.initNodes || [], o = (g) => t.has(typeof g == "string" ? g : g.name);
  function i(g) {
    return [...new Map(g.map((y) => [y.name, y])).values()];
  }
  const u = i([...r, ...n.weights, ...a]).filter(o), c = i([...u, ...Object.values(n.nodes)]).filter(o), l = new Map(c.map((g) => [g.name, g])), d = {};
  for (const g of c) {
    d[g.name] = d[g.name] || 0;
    for (const y of g.children) o(y) || (d[y.name] = Number.POSITIVE_INFINITY), d[y.name] = (d[y.name] || 0) + 1;
  }
  const h = Object.entries(d).filter(([, g]) => g === 0).map(([g]) => g), p = [...h];
  for (; h.length > 0; ) {
    const g = h.pop(), y = l.get(g);
    for (const b of y.children.filter(o)) --d[b.name] === 0 && (p.push(b.name), h.push(b.name));
  }
  const f = p.map((g) => l.get(g)), m = J4(f, u);
  return eG(m, u), m;
}
function J4(n, e) {
  const t = new Map(n.map((o) => [o.name, o])), s = e.map((o) => o.name), r = new Set(s);
  for (; s.length > 0; ) {
    const o = s.pop(), i = t.get(o);
    for (const u of i.children) !t.has(u.name) || r.has(u.name) || (r.add(u.name), s.push(u.name));
  }
  return n.filter((o) => r.has(o.name));
}
class np extends Error {
  constructor(e) {
    super(`NodesExecutionOrderError: ${e}`);
  }
}
function eG(n, e) {
  const t = new Map(n.map((i, u) => [i.name, u])), s = new Set(e.map((i) => i.name)), r = (i) => s.has(typeof i == "string" ? i : i.name), a = new Set(n.map((i) => i.name)), o = (i) => a.has(typeof i == "string" ? i : i.name);
  for (const i of n) {
    for (const u of i.children.filter(o)) {
      if (!t.has(u.name)) throw new np(`Child ${u.name} of node ${i.name} is unreachable.`);
      if (t.get(i.name) > t.get(u.name)) throw new np(`Node ${i.name} is scheduled to run after its child ${u.name}.`);
    }
    if (!r(i)) for (const u of i.inputs) {
      if (!t.has(u.name)) throw new np(`Input ${u.name} of node ${i.name} is unreachable.`);
      if (t.get(u.name) > t.get(i.name)) throw new np(`Node ${i.name} is scheduled to run before its input ${u.name}.`);
    }
  }
}
function tG(n) {
  const e = new Map(n.map((i, u) => [i.name, u])), t = Number.MAX_SAFE_INTEGER, s = n.map((i, u) => yi(i) ? t : u), r = (i) => {
    const u = s[e.get(i.name)];
    return u ?? -1;
  }, a = n.map((i, u) => i.children.map(r).reduce((c, l) => Math.max(c, l), s[u])), o = /* @__PURE__ */ new Map();
  for (let i = 0; i < n.length; ++i) {
    const u = a[i];
    if (u === t) continue;
    const c = n[i], l = n[u];
    o.has(l.name) || o.set(l.name, []), o.get(l.name).push(c);
  }
  return o;
}
const nG = /* @__PURE__ */ new Set(["Switch", "Merge", "Enter", "Exit", "NextIteration", "StatelessIf", "StatelessWhile", "if", "While"]), sG = /* @__PURE__ */ new Set(["NonMaxSuppressionV2", "NonMaxSuppressionV3", "NonMaxSuppressionV5", "Where"]), rG = /* @__PURE__ */ new Set(["HashTable", "HashTableV2", "LookupTableImport", "LookupTableImportV2", "LookupTableFind", "LookupTableFindV2", "LookupTableSize", "LookupTableSizeV2"]);
function yi(n) {
  return nG.has(n.op);
}
function aG(n) {
  return sG.has(n.op);
}
function oG(n) {
  return rG.has(n.op);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Gp {
  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }
  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }
  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }
  set weightMap(e) {
    const t = Object.keys(e).map((s) => e[s].map((r) => r.id));
    this._weightIds = [].concat(...t), this._weightMap = e;
  }
  set resourceManager(e) {
    this._resourceManager = e;
  }
  get inputs() {
    return this._inputs.map((e) => ({ name: e.name, shape: e.attrParams.shape ? e.attrParams.shape.value : void 0, dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0 }));
  }
  get outputs() {
    return this._outputs.map((e) => ({ name: e.name, shape: e.attrParams.shape ? e.attrParams.shape.value : void 0, dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0 }));
  }
  get inputNodes() {
    return this._inputs.map((e) => e.signatureKey || e.name);
  }
  get outputNodes() {
    return this._outputs.map((e) => {
      const t = e.signatureKey || e.name;
      return e.defaultOutput ? `${t}:${e.defaultOutput}` : t;
    });
  }
  get functions() {
    return Object.keys(this._functions).reduce((e, t) => (e[t] = this._functions[t].signature, e), {});
  }
  constructor(e, t) {
    this.graph = e, this.parent = t, this.compiledMap = /* @__PURE__ */ new Map(), this.parseNodeNameCache = /* @__PURE__ */ new Map(), this._weightMap = {}, this.SEPARATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this.keepIntermediateTensors = false, this._outputs = e.outputs, this._inputs = e.inputs, this._initNodes = e.initNodes, this._signature = e.signature, this._functions = e.functions, e.functions != null && Object.keys(e.functions).forEach((s) => {
      this._functionExecutorMap[s] = new Gp(e.functions[s], this);
    });
  }
  getCompilationKey(e, t) {
    const s = e.map((a) => a.name).sort(), r = t.map((a) => a.name).sort();
    return s.join(this.SEPARATOR) + "--" + r.join(this.SEPARATOR);
  }
  compile(e, t) {
    const s = Q1(e, t, this.weightMap, this._initNodes), { missingInputs: r, dynamicNode: a, syncInputs: o } = s;
    if (a != null) throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${o}]`);
    if (r.length > 0) {
      const c = t.map((d) => d.name), l = Object.keys(e);
      throw new Error(`Cannot compute the outputs [${c}] from the provided inputs [${l}]. Missing the following inputs: [${r}]`);
    }
    const i = Z4(this.graph, s), u = tG(i);
    return { orderedNodes: i, nodeLiveUntilMap: u };
  }
  cloneAndKeepTensor(e) {
    if (e == null) return null;
    const t = e.clone();
    return Qt(t), t;
  }
  cloneTensorList(e) {
    return e ? e.map((s) => this.cloneAndKeepTensor(s)) : null;
  }
  cloneTensorMap(e) {
    return Object.fromEntries(Object.entries(e).map(([t, s]) => [t, this.cloneTensorList(s)]));
  }
  execute(e, t) {
    this.disposeIntermediateTensors(), e = this.mapInputs(e);
    const s = Object.keys(e).sort();
    this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t);
    const r = s.map((h) => this.graph.nodes[ns(h)[0]]), a = t.map((h) => ns(h)[0]), o = new Set(a);
    let i = a.map((h) => this.graph.nodes[h]);
    i.length === 0 && (i = this._outputs);
    const u = this.getCompilationKey(r, i);
    let c = this.compiledMap.get(u);
    c == null && (c = this.compile(e, i), this.compiledMap.set(u, c));
    try {
      this.keepIntermediateTensors = U().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (h) {
      this.keepIntermediateTensors = false, console.warn(h.message);
    }
    const l = {}, d = {};
    return H(() => {
      const h = new Y1(this.weightMap, l, d, this.functionExecutorMap, this.parseNodeNameCache), p = Object.assign({}, this.weightMap);
      this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap)), Object.keys(e).forEach((y) => {
        const [b, x] = ns(y, h), w = [];
        w[x] = e[y], p[b] = w, this.keepIntermediateTensors && (this.clonedTensorsMap[b] = this.cloneTensorList(w));
      });
      const f = this.getFrozenTensorIds(p), { orderedNodes: m, nodeLiveUntilMap: g } = c;
      for (const y of m) {
        if (p[y.name]) continue;
        const b = X1(y, p, h, this._resourceManager);
        if (Pr(b)) throw new Error(`The execution of the op '${y.op}' returned a promise. Please use model.executeAsync() instead.`);
        p[y.name] = b, this.keepIntermediateTensors && (this.clonedTensorsMap[y.name] = this.cloneTensorList(b)), this.checkTensorForDisposalWithNodeLiveUntilInfo(y, p, h, f, o, g.get(y.name));
      }
      return this.parent == null && h.dispose(f), t.map((y) => gn(y, p, h));
    });
  }
  getFrozenTensorIds(e) {
    const t = [].concat.apply([], Object.keys(e).map((s) => e[s]).map((s) => s.map((r) => r.id)));
    return new Set(t);
  }
  checkTensorForDisposal(e, t, s, r, a, o, i) {
    if (!(yi(t) || o.has(e))) {
      for (const u of s[e]) u != null && (i[u.id] = (i[u.id] || 0) + t.children.length);
      for (const u of t.inputs) {
        if (yi(u)) continue;
        const c = G1(u.name, s, r);
        if (c != null) for (const l of c) {
          if (!l || l.kept || a.has(l.id)) continue;
          const d = i[l.id];
          d === 1 ? (l.dispose(), delete i[l.id]) : d != null && i[l.id]--;
        }
      }
    }
  }
  checkTensorForDisposalWithNodeLiveUntilInfo(e, t, s, r, a, o) {
    function i(u) {
      return yi(u) || a.has(u.name);
    }
    if (!(yi(e) || o == null)) for (const u of o) {
      if (i(u)) continue;
      const c = G1(u.name, t, s);
      for (const l of c) !l || l.kept || r.has(l.id) || l.dispose();
    }
  }
  async executeAsync(e, t) {
    return this._executeAsync(e, t);
  }
  disposeIntermediateTensors() {
    this.clonedTensorsMap && (Object.values(this.clonedTensorsMap).forEach((e) => {
      for (const t of e) t && !t.isDisposed && t.dispose();
    }), this.clonedTensorsMap = null);
  }
  getIntermediateTensors() {
    return this.clonedTensorsMap;
  }
  async _executeAsync(e, t, s = false, r = {}, a = {}) {
    this.disposeIntermediateTensors(), s || (e = this.mapInputs(e), this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t));
    try {
      this.keepIntermediateTensors = U().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (h) {
      this.keepIntermediateTensors = false, console.warn(h.message);
    }
    const o = new Y1(this.weightMap, r, a, this.functionExecutorMap, this.parseNodeNameCache);
    this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap));
    const i = await this.executeWithControlFlow(e, o, t, s), u = t.map((h) => gn(h, i, o)), c = u.map((h) => h.id), l = Object.keys(e).map((h) => e[h].id), d = /* @__PURE__ */ new Set([...c, ...l, ...this.weightIds]);
    return Object.values(i).forEach((h) => {
      h.forEach((p) => {
        p && !p.isDisposed && !d.has(p.id) && p.dispose();
      });
    }), this.parent == null && o.dispose(d), u;
  }
  async executeFunctionAsync(e, t, s) {
    const r = e.reduce((a, o, i) => (a[this.inputs[i].name] = o, a), {});
    return this._executeAsync(r, this.outputNodes, true, t, s);
  }
  async executeWithControlFlow(e, t, s, r) {
    const a = Object.keys(e), o = a.map((w) => this.graph.nodes[ns(w)[0]]), i = s.map((w) => ns(w)[0]), u = new Set(i);
    let c = i.map((w) => this.graph.nodes[w]);
    c.length === 0 && (c = this._outputs);
    const { usedNodes: l, missingInputs: d, dynamicNode: h, syncInputs: p } = Q1(e, c, this.weightMap, this._initNodes), f = [...o, ...this.graph.weights, ...this._initNodes || []].map((w) => ({ node: w, contexts: t.currentContext })), m = Object.assign({}, this.weightMap);
    Object.keys(e).forEach((w) => {
      const [C, v] = ns(w), k = [];
      k[v] = e[w], m[C] = k;
    });
    const g = {}, y = this.getFrozenTensorIds(m), b = {};
    for (; f.length > 0; ) {
      const w = this.processStack(o, f, t, m, b, y, u, g, l);
      await Promise.all(w);
    }
    h == null && !r && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");
    const x = c.filter((w) => !yi(w) && !gn(w.name, m, t)).map((w) => w.name);
    if (x.length > 0) {
      let w = "";
      throw h != null && (w = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`), new Error(`Cannot compute the outputs [${x}] from the provided inputs [${a}]. Consider providing the following inputs: [${d}]. ${w}`);
    }
    return m;
  }
  processStack(e, t, s, r, a, o, i, u, c) {
    const l = [];
    for (; t.length > 0; ) {
      const d = t.pop();
      s.currentContext = d.contexts;
      let h = "";
      if (d.node.op === "Enter" && I("isConstant", d.node, r, s) && ([h] = _r(d.node.name, s)), r[d.node.name] == null) {
        const p = X1(d.node, r, s, this._resourceManager);
        h || ([h] = _r(d.node.name, s));
        const f = s.currentContext;
        Pr(p) ? l.push(p.then((m) => (r[h] = m, this.keepIntermediateTensors && (this.clonedTensorsMap[h] = this.cloneTensorList(m)), s.currentContext = f, this.checkTensorForDisposal(h, d.node, r, s, o, i, u), this.processChildNodes(d.node, t, s, r, a, c), m))) : (r[h] = p, this.keepIntermediateTensors && (this.clonedTensorsMap[h] = this.cloneTensorList(p)), this.checkTensorForDisposal(h, d.node, r, s, o, i, u), this.processChildNodes(d.node, t, s, r, a, c));
      } else this.processChildNodes(d.node, t, s, r, a, c);
    }
    return l;
  }
  processChildNodes(e, t, s, r, a, o) {
    e.children.forEach((i) => {
      const [u] = _r(i.name, s);
      a[u] || !o.has(i.name) || (i.op === "Merge" ? i.inputNames.some((c) => !!gn(c, r, s)) && (a[u] = true, t.push({ contexts: s.currentContext, node: i })) : i.inputNames.every((c) => !!gn(c, r, s)) && (a[u] = true, t.push({ contexts: s.currentContext, node: i })));
    });
  }
  dispose() {
    Object.keys(this.weightMap).forEach((e) => this.weightMap[e].forEach((t) => t.dispose()));
  }
  checkInputShapeAndType(e) {
    Object.keys(e).forEach((t) => {
      const s = e[t], [r] = ns(t), a = this.graph.nodes[r];
      if (a.attrParams.shape && a.attrParams.shape.value) {
        const o = a.attrParams.shape.value, i = o.length === s.shape.length && s.shape.every((u, c) => o[c] === -1 || o[c] === u);
        $(i, () => `The shape of dict['${a.name}'] provided in model.execute(dict) must be [${o}], but was [${s.shape}]`);
      }
      a.attrParams.dtype && a.attrParams.dtype.value && $(s.dtype === a.attrParams.dtype.value, () => `The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${s.dtype}`);
    });
  }
  mapInputs(e) {
    var t, s;
    const r = {};
    for (const a in e) {
      const o = (s = (t = this._signature) === null || t === void 0 ? void 0 : t.inputs) === null || s === void 0 ? void 0 : s[a];
      o != null ? r[o.name] = e[a] : r[a] = e[a];
    }
    return r;
  }
  checkInputs(e) {
    const t = Object.keys(e).filter((s) => {
      const [r] = ns(s);
      return this.graph.nodes[r] == null;
    });
    if (t.length > 0) throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`);
  }
  mapOutputs(e) {
    return e.map((t) => {
      var s, r;
      const a = (r = (s = this._signature) === null || s === void 0 ? void 0 : s.outputs) === null || r === void 0 ? void 0 : r[t];
      return a != null ? a.name : t;
    }, {});
  }
  checkOutputs(e) {
    e.forEach((t) => {
      const [s] = ns(t);
      if (!this.graph.nodes[s]) throw new Error(`The output '${t}' is not found in the graph`);
    });
  }
}
class iG {
  constructor(e = {}, t = {}) {
    this.hashTableNameToHandle = e, this.hashTableMap = t;
  }
  addHashTable(e, t) {
    this.hashTableNameToHandle[e] = t.handle, this.hashTableMap[t.id] = t;
  }
  getHashTableHandleByName(e) {
    return this.hashTableNameToHandle[e];
  }
  getHashTableById(e) {
    return this.hashTableMap[e];
  }
  dispose() {
    for (const e in this.hashTableMap) this.hashTableMap[e].clearAndClose(), delete this.hashTableMap[e];
    for (const e in this.hashTableNameToHandle) this.hashTableNameToHandle[e].dispose(), delete this.hashTableNameToHandle[e];
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const uG = "?tfjs-format=file", lG = "model.json";
class Bw {
  get modelVersion() {
    return this.version;
  }
  get inputNodes() {
    return this.executor.inputNodes;
  }
  get outputNodes() {
    return this.executor.outputNodes;
  }
  get inputs() {
    return this.executor.inputs;
  }
  get outputs() {
    return this.executor.outputs;
  }
  get weights() {
    return this.executor.weightMap;
  }
  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }
  get modelSignature() {
    return this.signature;
  }
  get modelStructuredOutputKeys() {
    return this.structuredOutputKeys;
  }
  constructor(e, t = {}, s = qb) {
    this.modelUrl = e, this.loadOptions = t, this.version = "n/a", this.io = s, t == null && (this.loadOptions = {}), this.resourceManager = new iG();
  }
  findIOHandler() {
    const e = this.modelUrl;
    if (e.load != null) this.handler = e;
    else if (this.loadOptions.requestInit != null) this.handler = this.io.browserHTTPRequest(e, this.loadOptions);
    else {
      const t = this.io.getLoadHandlers(e, this.loadOptions);
      if (t.length === 0) t.push(this.io.browserHTTPRequest(e, this.loadOptions));
      else if (t.length > 1) throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);
      this.handler = t[0];
    }
  }
  load() {
    if (this.findIOHandler(), this.handler.load == null) throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    const e = this.handler.load();
    return Pr(e) ? e.then((t) => t.getWeightStream == null ? this.loadSync(t) : this.loadStreaming(t)) : this.loadSync(e);
  }
  loadSync(e) {
    const t = this.io.decodeWeights(e.weightData, e.weightSpecs);
    return this.loadWithWeightMap(e, t);
  }
  async loadStreaming(e) {
    if (e.getWeightStream == null) throw new Error("Model artifacts missing streamWeights function");
    const t = await $I(e.getWeightStream(), e.weightSpecs);
    return this.loadWithWeightMap(e, t);
  }
  loadWithWeightMap(e, t) {
    this.artifacts = e;
    const s = this.artifacts.modelTopology;
    let r = this.artifacts.signature;
    if (this.artifacts.userDefinedMetadata != null) {
      const a = this.artifacts.userDefinedMetadata;
      a.signature != null && (r = a.signature), a.structuredOutputKeys != null && (this.structuredOutputKeys = a.structuredOutputKeys);
    }
    if (this.signature = r, this.version = `${s.versions.producer}.${s.versions.minConsumer}`, this.executor = new Gp(H1.Instance.transformGraph(s, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(t), this.executor.resourceManager = this.resourceManager, e.modelInitializer != null && e.modelInitializer.node != null) {
      const a = H1.Instance.transformGraph(e.modelInitializer);
      this.initializer = new Gp(a), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializerSignature = e.initializerSignature;
    }
    return true;
  }
  async save(e, t) {
    if (typeof e == "string") {
      const s = this.io.getSaveHandlers(e);
      if (s.length === 0) throw new Error(`Cannot find any save handlers for URL '${e}'`);
      if (s.length > 1) throw new Error(`Found more than one (${s.length}) save handlers for URL '${e}'`);
      e = s[0];
    }
    if (e.save == null) throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    return e.save(this.artifacts);
  }
  addStructuredOutputNames(e) {
    if (this.structuredOutputKeys) {
      const t = e instanceof tt ? [e] : e, s = {};
      return t.forEach((r, a) => s[this.structuredOutputKeys[a]] = r), s;
    }
    return e;
  }
  predict(e, t) {
    const s = this.execute(e, this.outputNodes);
    return this.addStructuredOutputNames(s);
  }
  async predictAsync(e, t) {
    const s = await this.executeAsync(e, this.outputNodes);
    return this.addStructuredOutputNames(s);
  }
  normalizeInputs(e) {
    var t;
    if (!(e instanceof tt) && !Array.isArray(e)) {
      const a = (t = this.signature) === null || t === void 0 ? void 0 : t.inputs;
      if (a != null) for (const o in a) {
        const i = a[o];
        i.resourceId != null && (e[o] = this.resourceIdToCapturedInput[i.resourceId]);
      }
      return e;
    }
    e = Array.isArray(e) ? e : [e];
    const s = Object.keys(this.resourceIdToCapturedInput).length;
    if (e.length + s !== this.inputNodes.length) throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length - s} non-resource placeholders, while there are ${e.length} input tensors provided.`);
    let r = 0;
    return this.inputNodes.reduce((a, o) => {
      var i, u, c;
      const l = (c = (u = (i = this.signature) === null || i === void 0 ? void 0 : i.inputs) === null || u === void 0 ? void 0 : u[o]) === null || c === void 0 ? void 0 : c.resourceId;
      return l != null ? a[o] = this.resourceIdToCapturedInput[l] : a[o] = e[r++], a;
    }, {});
  }
  normalizeOutputs(e) {
    return e = e || this.outputNodes, Array.isArray(e) ? e : [e];
  }
  executeInitializerGraph() {
    return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.execute({}, []) : this.initializer.execute({}, Object.keys(this.initializerSignature.outputs));
  }
  async executeInitializerGraphAsync() {
    return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.executeAsync({}, []) : this.initializer.executeAsync({}, Object.keys(this.initializerSignature.outputs));
  }
  setResourceIdToCapturedInput(e) {
    if (this.resourceIdToCapturedInput = {}, this.initializerSignature) {
      const t = this.initializerSignature.outputs, s = Object.keys(t);
      for (let r = 0; r < s.length; r++) {
        const a = s[r], o = t[a];
        this.resourceIdToCapturedInput[o.resourceId] = e[r];
      }
    }
  }
  execute(e, t) {
    this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(this.executeInitializerGraph()), e = this.normalizeInputs(e), t = this.normalizeOutputs(t);
    const s = this.executor.execute(e, t);
    return s.length > 1 ? s : s[0];
  }
  async executeAsync(e, t) {
    this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()), e = this.normalizeInputs(e), t = this.normalizeOutputs(t);
    const s = await this.executor.executeAsync(e, t);
    return s.length > 1 ? s : s[0];
  }
  getIntermediateTensors() {
    return this.executor.getIntermediateTensors();
  }
  disposeIntermediateTensors() {
    this.executor.disposeIntermediateTensors();
  }
  convertTensorMapToTensorsMap(e) {
    return Object.keys(e).reduce((t, s) => (t[s] = [e[s]], t), {});
  }
  dispose() {
    this.executor.dispose(), this.initializer && (this.initializer.dispose(), this.resourceIdToCapturedInput && Me(this.resourceIdToCapturedInput)), this.resourceManager.dispose();
  }
}
async function cG(n, e = {}, t = qb) {
  if (n == null) throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
  e == null && (e = {}), e.fromTFHub && typeof n == "string" && (n = hG(n));
  const s = new Bw(n, e, t);
  return await s.load(), s;
}
function dG(n) {
  if (n == null) throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");
  let e;
  if (n instanceof Array) {
    const [s, r] = n;
    if (!s) throw new Error("modelJSON must be the first element of the array");
    if (!r || !(r instanceof ArrayBuffer)) throw new Error("An ArrayBuffer of weights must be the second element of the array");
    if (!("modelTopology" in s)) throw new Error("Model JSON is missing 'modelTopology'");
    if (!("weightsManifest" in s)) throw new Error("Model JSON is missing 'weightsManifest'");
    const a = Ep(s.weightsManifest), o = Dy(s, a, r);
    e = Ap(o);
  } else if ("load" in n) e = n;
  else if ("modelTopology" in n && "weightSpecs" in n && "weightData" in n) e = Ap(n);
  else throw new Error("Unknown model format");
  const t = new Bw(e);
  return t.load(), t;
}
function hG(n) {
  return n.endsWith("/") || (n = n + "/"), `${n}${lG}${uG}`;
}
/** @license See the LICENSE file. */
const z$ = "4.22.0";
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
function pG(n, e) {
  return Hp(n, e);
}
function Hp(n, e, t = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set()) {
  if (n == null) return null;
  if (typeof Blob == "function" && n instanceof Blob) return n.slice();
  if (s.has(n)) throw new Error("Circular references are not supported.");
  if (t.has(n)) return t.get(n);
  const r = e(n);
  if (r.recurse && r.value !== null) throw new Error("A deep map function may not return both a value and recurse=true.");
  if (r.recurse) if (El(n)) {
    const a = Array.isArray(n) ? [] : {};
    s.add(n);
    for (const o in n) {
      const i = n[o], u = Hp(i, e, t, s);
      a[o] = u;
    }
    return s.delete(n), n.__proto__ && (a.__proto__ = n.__proto__), a;
  } else throw new Error(`Can't recurse into non-iterable type: ${n}`);
  else return t.set(n, r.value), r.value;
}
function fG(n, e = B$) {
  return M$(n, e);
}
function M$(n, e, t = /* @__PURE__ */ new Set()) {
  const s = n[0];
  if (t.has(s)) throw new Error("Circular references are not supported.");
  const r = e(n);
  if (r.recurse && r.value !== null) throw new Error("A deep zip function may not return both a value and recurse=true.");
  if (r.recurse) if (El(s)) {
    const a = Array.isArray(s) ? [] : {};
    t.add(s);
    for (const o in s) {
      const i = n.map((c) => c[o]), u = M$(i, e, t);
      a[o] = u;
    }
    return t.delete(s), a;
  } else throw new Error(`Can't recurse into non-iterable type: ${s}`);
  else return r.value;
}
function B$(n) {
  return n === null ? null : El(n[0]) ? { value: null, recurse: true } : { value: n, recurse: false };
}
async function W$(n, e) {
  const t = /* @__PURE__ */ new Map();
  Hp(n, e, t);
  for (const r of Array.from(t.keys())) {
    const a = t.get(r);
    if (Pr(a)) {
      const o = await a;
      t.set(r, o);
    }
  }
  return Hp(n, e, t);
}
function El(n) {
  let e = false;
  if (U().get("IS_BROWSER")) e = n instanceof TextDecoder;
  else {
    const { StringDecoder: t } = require("string_decoder");
    e = n instanceof t;
  }
  return n != null && !ArrayBuffer.isView(n) && (Array.isArray(n) || typeof n == "object" && !(n instanceof tt) && !(n instanceof Promise) && !e);
}
function mG(n) {
  return n == null || gG(n) || Array.isArray(n) || typeof n == "object" && n instanceof tt || Yt(n);
}
function gG(n) {
  return n === null || typeof n != "object" && typeof n != "function";
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
function yG(n) {
  return pG(n, bG);
}
function bG(n) {
  return n instanceof tt ? { value: n.clone(), recurse: false } : El(n) ? { value: null, recurse: true } : { value: n, recurse: false };
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class V$ {
  constructor(e) {
    if (this.capacity = e, this.begin = 0, this.end = 0, e == null) throw new RangeError("Can't create a ring buffer of unknown capacity.");
    if (e < 1) throw new RangeError("Can't create ring buffer of capacity < 1.");
    this.data = new Array(e), this.doubledCapacity = 2 * e;
  }
  wrap(e) {
    for (; e < 0; ) e += this.doubledCapacity;
    return e % this.doubledCapacity;
  }
  get(e) {
    if (e < 0) throw new RangeError("Can't get item at a negative index.");
    return this.data[e % this.capacity];
  }
  set(e, t) {
    if (e < 0) throw new RangeError("Can't set item at a negative index.");
    this.data[e % this.capacity] = t;
  }
  length() {
    let e = this.end - this.begin;
    return e < 0 && (e = this.doubledCapacity + e), e;
  }
  isFull() {
    return this.length() === this.capacity;
  }
  isEmpty() {
    return this.length() === 0;
  }
  push(e) {
    if (this.isFull()) throw new RangeError("Ring buffer is full.");
    this.set(this.end, e), this.end = this.wrap(this.end + 1);
  }
  pushAll(e) {
    for (const t of e) this.push(t);
  }
  pop() {
    if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
    this.end = this.wrap(this.end - 1);
    const e = this.get(this.end);
    return this.set(this.end, void 0), e;
  }
  unshift(e) {
    if (this.isFull()) throw new RangeError("Ring buffer is full.");
    this.begin = this.wrap(this.begin - 1), this.set(this.begin, e);
  }
  shift() {
    if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
    const e = this.get(this.begin);
    return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), e;
  }
  shuffleExcise(e) {
    if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
    const t = this.wrap(this.begin + e), s = this.get(t);
    return this.set(t, this.pop()), s;
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class Tm extends V$ {
  constructor() {
    super(Tm.INITIAL_CAPACITY);
  }
  isFull() {
    return false;
  }
  push(e) {
    super.isFull() && this.expand(), super.push(e);
  }
  unshift(e) {
    super.isFull() && this.expand(), super.unshift(e);
  }
  expand() {
    const e = this.capacity * 2, t = new Array(e), s = this.length();
    for (let r = 0; r < s; r++) t[r] = this.get(this.wrap(this.begin + r));
    this.data = t, this.capacity = e, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = s;
  }
}
Tm.INITIAL_CAPACITY = 32;
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
function U$(n) {
  return new CG(n);
}
function Ww(n) {
  return new IG(n);
}
function xG(n, e) {
  return new G$(n, e);
}
function wG(n, e = ca.FAIL) {
  return new EG(n, e);
}
class cn {
  async toArray() {
    const e = [];
    let t = await this.next();
    for (; !t.done; ) e.push(t.value), t = await this.next();
    return e;
  }
  async toArrayForTest() {
    const e = this.prefetch(100), t = [];
    let s = await e.next();
    for (; !s.done; ) t.push(s.value), s = await e.next();
    return t;
  }
  async resolveFully() {
    let e = await this.next();
    for (; !e.done; ) e = await this.next();
  }
  async resolveWhile(e) {
    let t = await this.next(), s = e(t.value);
    for (; !t.done && s; ) t = await this.next(), s = e(t.value);
  }
  handleErrors(e) {
    return new RG(this, e);
  }
  filter(e) {
    return new NG(this, e);
  }
  map(e) {
    return new TG(this, e);
  }
  mapAsync(e) {
    return new Z1(this, e);
  }
  serialMapAsync(e) {
    return new Z1(this, e).serial();
  }
  flatmap(e) {
    return new _G(this, e);
  }
  async forEachAsync(e) {
    return this.map(e).resolveFully();
  }
  async serialForEach(e) {
    return this.serialMapAsync(e).resolveWhile((t) => t === true);
  }
  rowMajorBatch(e, t = true) {
    return new kG(this, e, t);
  }
  columnMajorBatch(e, t = true, s = B$) {
    return this.rowMajorBatch(e, t).map((a) => fG(a, s));
  }
  concatenate(e, t) {
    return new G$(U$([this, e]), t);
  }
  take(e) {
    return e < 0 || e == null ? this : new $G(this, e);
  }
  skip(e) {
    return e < 0 || e == null ? this : new vG(this, e);
  }
  prefetch(e) {
    return new H$(this, e);
  }
  shuffle(e, t) {
    return new DG(this, e, t);
  }
  serial() {
    return new SG(this);
  }
}
class CG extends cn {
  constructor(e) {
    super(), this.items = e, this.trav = 0;
  }
  summary() {
    return `Array of ${this.items.length} items`;
  }
  async next() {
    if (this.trav >= this.items.length) return { value: null, done: true };
    const e = this.items[this.trav];
    return this.trav++, { value: yG(e), done: false };
  }
}
class IG extends cn {
  constructor(e) {
    super(), this.nextFn = e;
  }
  summary() {
    return "Function call";
  }
  async next() {
    try {
      return this.nextFn();
    } catch (e) {
      throw e.message = `Error thrown while iterating through a dataset: ${e.message}`, e;
    }
  }
}
class SG extends cn {
  constructor(e) {
    super(), this.upstream = e, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Serial`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    return this.upstream.next();
  }
}
class vG extends cn {
  constructor(e, t) {
    super(), this.upstream = e, this.maxCount = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Skip`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.count++ < this.maxCount; ) {
      const e = await this.upstream.next();
      if (e.done) return e;
      Me(e.value);
    }
    return this.upstream.next();
  }
}
class $G extends cn {
  constructor(e, t) {
    super(), this.upstream = e, this.maxCount = t, this.count = 0;
  }
  summary() {
    return `${this.upstream.summary()} -> Take`;
  }
  async next() {
    return this.count++ >= this.maxCount ? { value: null, done: true } : this.upstream.next();
  }
}
class kG extends cn {
  constructor(e, t, s = true) {
    super(), this.upstream = e, this.batchSize = t, this.enableSmallLastBatch = s, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> RowMajorBatch`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    const e = [];
    for (; e.length < this.batchSize; ) {
      const t = await this.upstream.next();
      if (t.done) return this.enableSmallLastBatch && e.length > 0 ? { value: e, done: false } : { value: null, done: true };
      e.push(t.value);
    }
    return { value: e, done: false };
  }
}
class NG extends cn {
  constructor(e, t) {
    super(), this.upstream = e, this.predicate = t, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Filter`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; ) {
      const e = await this.upstream.next();
      if (e.done || this.predicate(e.value)) return e;
      Me(e.value);
    }
  }
}
class TG extends cn {
  constructor(e, t) {
    super(), this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> Map`;
  }
  async next() {
    const e = await this.upstream.next();
    if (e.done) return { value: null, done: true };
    const t = Lr(e.value), s = this.transform(e.value), r = Lr(s);
    for (const a of t) hf(a, r) || a.dispose();
    return { value: s, done: false };
  }
}
class RG extends cn {
  constructor(e, t) {
    super(), this.upstream = e, this.handler = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> handleErrors`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; ) try {
      return await this.upstream.next();
    } catch (e) {
      if (!this.handler(e)) return { value: null, done: true };
    }
  }
}
class Z1 extends cn {
  constructor(e, t) {
    super(), this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> AsyncMap`;
  }
  async next() {
    const e = await this.upstream.next();
    if (e.done) return { value: null, done: true };
    const t = Lr(e.value), s = await this.transform(e.value), r = Lr(s);
    for (const a of t) hf(a, r) || a.dispose();
    return { value: s, done: false };
  }
}
class Vw extends cn {
  constructor() {
    super(), this.outputQueue = new Tm(), this.lastRead = Promise.resolve({ value: null, done: false });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.outputQueue.length() === 0; ) if (!await this.pump()) return { value: null, done: true };
    return { value: this.outputQueue.shift(), done: false };
  }
}
class _G extends Vw {
  constructor(e, t) {
    super(), this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> Flatmap`;
  }
  async pump() {
    const e = await this.upstream.next();
    if (e.done) return false;
    const t = Lr(e.value), s = this.transform(e.value), r = Lr(s);
    this.outputQueue.pushAll(s);
    for (const a of t) hf(a, r) || a.dispose();
    return true;
  }
}
class G$ extends cn {
  constructor(e, t) {
    super(), this.baseErrorHandler = t, this.lastRead = null, this.iterator = null, this.moreIterators = e;
  }
  summary() {
    return "TODO: fill in upstream of chained summaries -> Chained";
  }
  async next() {
    return this.lastRead = this.readFromChain(this.lastRead), this.lastRead;
  }
  async readFromChain(e) {
    if (await e, this.iterator == null) {
      const s = await this.moreIterators.next();
      if (s.done) return { value: null, done: true };
      this.iterator = s.value, this.baseErrorHandler != null && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler));
    }
    const t = await this.iterator.next();
    return t.done ? (this.iterator = null, this.readFromChain(e)) : t;
  }
}
var ca;
(function(n) {
  n[n.FAIL = 0] = "FAIL", n[n.SHORTEST = 1] = "SHORTEST", n[n.LONGEST = 2] = "LONGEST";
})(ca || (ca = {}));
class EG extends cn {
  constructor(e, t = ca.FAIL) {
    super(), this.iterators = e, this.mismatchMode = t, this.count = 0, this.currentPromise = null;
  }
  summary() {
    return "{TODO: fill in upstream of zip summaries} -> Zip";
  }
  async nextState(e) {
    await e;
    let t = 0, s = 0;
    function r(o) {
      return o instanceof cn ? { value: o.next().then((u) => (t++, u.done && s++, u.value)), recurse: false } : { value: null, recurse: true };
    }
    const a = await W$(this.iterators, r);
    if (t === s) return { value: null, done: true };
    if (s > 0) switch (this.mismatchMode) {
      case ca.FAIL:
        throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);
      case ca.SHORTEST:
        return { value: null, done: true };
      case ca.LONGEST:
    }
    return this.count++, { value: a, done: false };
  }
  async next() {
    return this.currentPromise = this.nextState(this.currentPromise), this.currentPromise;
  }
}
class H$ extends cn {
  constructor(e, t) {
    super(), this.upstream = e, this.bufferSize = t, this.buffer = new V$(t);
  }
  summary() {
    return `${this.upstream.summary()} -> Prefetch`;
  }
  refill() {
    for (; !this.buffer.isFull(); ) {
      const e = this.upstream.next();
      this.buffer.push(e);
    }
  }
  next() {
    return this.refill(), this.buffer.shift();
  }
}
class DG extends H$ {
  constructor(e, t, s) {
    super(e, t), this.upstream = e, this.windowSize = t, this.upstreamExhausted = false, this.random = lc.alea(s || Xt().toString()), this.lastRead = Promise.resolve({ value: null, done: false });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  randomInt(e) {
    return Math.floor(this.random() * e);
  }
  chooseIndex() {
    return this.randomInt(this.buffer.length());
  }
  async serialNext() {
    for (this.upstreamExhausted || this.refill(); !this.buffer.isEmpty(); ) {
      const e = this.chooseIndex(), t = await this.buffer.shuffleExcise(e);
      if (t.done) this.upstreamExhausted = true;
      else return this.refill(), t;
    }
    return { value: null, done: true };
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class bc {
  constructor() {
    this.size = null;
  }
  batch(e, t = true) {
    const s = this;
    $(e > 0, () => `batchSize needs to be positive, but it is
      ${e}`);
    let r;
    return this.size === 1 / 0 || this.size == null ? r = this.size : t ? r = Math.ceil(this.size / e) : r = Math.floor(this.size / e), ts(async () => (await s.iterator()).columnMajorBatch(e, t, OG), r);
  }
  concatenate(e) {
    const t = this;
    let s;
    return this.size === 1 / 0 || e.size === 1 / 0 ? s = 1 / 0 : this.size != null && e.size != null ? s = this.size + e.size : s = null, ts(async () => (await t.iterator()).concatenate(await e.iterator()), s);
  }
  filter(e) {
    const t = this;
    let s;
    return this.size === 1 / 0 ? s = 1 / 0 : s = null, ts(async () => (await t.iterator()).filter((r) => H(() => e(r))), s);
  }
  async forEachAsync(e) {
    return (await this.iterator()).forEachAsync(e);
  }
  map(e) {
    const t = this;
    return ts(async () => (await t.iterator()).map((s) => H(() => e(s))), this.size);
  }
  mapAsync(e) {
    const t = this;
    return ts(async () => (await t.iterator()).mapAsync(e), this.size);
  }
  prefetch(e) {
    if (e == null) throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
    const t = this;
    return ts(async () => (await t.iterator()).prefetch(e), this.size);
  }
  repeat(e) {
    const t = this;
    let s;
    return this.size != null && e > 0 ? s = this.size * e : e === 0 ? s = 0 : this.size != null && (e === void 0 || e < 0) ? s = 1 / 0 : s = null, ts(async () => {
      const r = Ww(async () => ({ value: await t.iterator(), done: false }));
      return xG(r.take(e));
    }, s);
  }
  skip(e) {
    const t = this;
    let s;
    return this.size != null && e >= 0 && this.size >= e ? s = this.size - e : this.size != null && (this.size < e || e === void 0 || e < 0) ? s = 0 : s = null, ts(async () => (await t.iterator()).skip(e), s);
  }
  shuffle(e, t, s = true) {
    if (e == null || e < 0) throw this.size == null ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);
    const r = this, a = lc.alea(t || Xt().toString());
    return ts(async () => {
      let o = a.int32();
      return s && (o += a.int32()), (await r.iterator()).shuffle(e, o.toString());
    }, this.size);
  }
  take(e) {
    const t = this;
    let s;
    return this.size != null && this.size > e ? s = e : this.size != null && this.size <= e ? s = this.size : s = null, ts(async () => (await t.iterator()).take(e), s);
  }
  async toArray() {
    if (this.size === 1 / 0) throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArray();
  }
  async toArrayForTest() {
    if (this.size === 1 / 0) throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArrayForTest();
  }
}
bc.MAX_BUFFER_SIZE = 1e4;
function ts(n, e = null) {
  return new class extends bc {
    constructor() {
      super(...arguments), this.size = e;
    }
    async iterator() {
      return n();
    }
  }();
}
function AG(n) {
  return ts(async () => U$(n), n.length);
}
function FG(n) {
  if (!El(n)) throw new Error("The argument to zip() must be an object or array.");
  let e;
  if (Array.isArray(n)) for (let t = 0; t < n.length; t++) e = e == null ? n[t].size : Math.min(e, n[t].size);
  else if (n instanceof Object) for (const t in n) e = e == null ? n[t].size : Math.min(e, n[t].size);
  return ts(async () => {
    const t = await W$(n, (s) => {
      if (s instanceof bc) return { value: s.iterator(), recurse: false };
      if (El(s)) return { value: null, recurse: true };
      throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
    });
    return wG(t, ca.SHORTEST);
  }, e);
}
function OG(n) {
  if (n === null) return null;
  const e = n[0];
  return mG(e) ? { value: PG(n), recurse: false } : { value: null, recurse: true };
}
function PG(n) {
  if (n.length === 0) throw new Error("Can't make a batch of zero elements.");
  return n[0] instanceof tt ? En(n) : Wn(n);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class j$ extends bc {
  constructor(e) {
    super(), this.input = e;
  }
  async iterator() {
    return (await this.input.iterator()).decodeUTF8().split(`
`).map((r) => (r.endsWith("\r") && (r = r.slice(0, -1)), r));
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
const sp = '"', Lc = Symbol("out"), J1 = Symbol("field"), rp = Symbol("quote"), ig = Symbol("quoteafterquote"), eC = Symbol("quoteinquote");
class q$ extends bc {
  async columnNames() {
    return this.columnNamesValidated || await this.setColumnNames(), this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;
  }
  async setColumnNames() {
    const e = await this.maybeReadHeaderLine();
    if (!this.fullColumnNames && !e) throw new Error("Column names must be provided if there is no header line.");
    this.fullColumnNames && e && $(e.length === this.fullColumnNames.length, () => "The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + e.length.toString() + ")."), this.fullColumnNames || (this.fullColumnNames = e);
    const t = this.fullColumnNames.reduce((r, a) => (r[a] = r[a] + 1 || 1, r), {}), s = Object.keys(t).filter((r) => t[r] > 1);
    if ($(s.length === 0, () => "Duplicate column names found: " + s.toString()), this.columnConfigs) {
      for (const r of Object.keys(this.columnConfigs)) if (this.fullColumnNames.indexOf(r) === -1) throw new Error('The key "' + r + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").");
    }
    this.columnNamesValidated = true;
  }
  async maybeReadHeaderLine() {
    if (this.hasHeader) {
      const t = await (await this.base.iterator()).next();
      if (t.done) throw new Error("No data was found for CSV parsing.");
      const s = t.value;
      return this.parseRow(s, false);
    } else return null;
  }
  constructor(e, t) {
    super(), this.input = e, this.hasHeader = true, this.fullColumnNames = null, this.columnNamesValidated = false, this.columnConfigs = null, this.configuredColumnsOnly = false, this.delimiter = ",", this.delimWhitespace = false, this.base = new j$(e), t || (t = {}), this.hasHeader = t.hasHeader !== false, this.fullColumnNames = t.columnNames, this.columnConfigs = t.columnConfigs, this.configuredColumnsOnly = t.configuredColumnsOnly, t.delimWhitespace ? ($(t.delimiter == null, () => "Delimiter should not be provided when delimWhitespace is true."), this.delimWhitespace = true, this.delimiter = " ") : this.delimiter = t.delimiter ? t.delimiter : ",";
  }
  async iterator() {
    this.columnNamesValidated || await this.setColumnNames();
    let e = await this.base.iterator();
    return this.hasHeader && (e = e.skip(1)), e.map((t) => this.makeDataElement(t));
  }
  makeDataElement(e) {
    const t = this.parseRow(e), s = {}, r = {};
    for (let a = 0; a < this.fullColumnNames.length; a++) {
      const o = this.fullColumnNames[a], i = this.columnConfigs ? this.columnConfigs[o] : null;
      if (!(this.configuredColumnsOnly && !i)) {
        const u = t[a];
        let c = null;
        if (u === "") if (i && i.default !== void 0) c = i.default;
        else {
          if (i && (i.required || i.isLabel)) throw new Error(`Required column ${o} is empty in this line: ${e}`);
          c = void 0;
        }
        else {
          const l = Number(u);
          if (isNaN(l)) i && i.dtype === "bool" ? c = this.getBoolean(u) : c = u;
          else if (!i || !i.dtype) c = l;
          else switch (i.dtype) {
            case "float32":
              c = l;
              break;
            case "int32":
              c = Math.floor(l);
              break;
            case "bool":
              c = this.getBoolean(u);
              break;
            default:
              c = l;
          }
        }
        i && i.isLabel ? r[o] = c : s[o] = c;
      }
    }
    return Object.keys(r).length === 0 ? s : { xs: s, ys: r };
  }
  getBoolean(e) {
    return e === "1" || e.toLowerCase() === "true" ? 1 : 0;
  }
  parseRow(e, t = true) {
    const s = [];
    let r = 0;
    const a = e.length;
    let o = Lc;
    for (let i = 0; i < a; i++) switch (o) {
      case Lc:
        switch (e.charAt(i)) {
          case sp:
            r = i + 1, o = rp;
            break;
          case this.delimiter:
            if (r = i + 1, this.delimiter === " " && this.delimWhitespace) break;
            s.push(""), o = Lc;
            break;
          default:
            o = J1, r = i;
            break;
        }
        break;
      case J1:
        switch (e.charAt(i)) {
          case this.delimiter:
            s.push(e.substring(r, i)), o = Lc, r = i + 1;
            break;
        }
        break;
      case rp:
        switch (e.charAt(i)) {
          case sp:
            o = ig;
            break;
        }
        break;
      case ig:
        switch (e.charAt(i)) {
          case this.delimiter:
            s.push(e.substring(r, i - 1)), o = Lc, r = i + 1;
            break;
          case sp:
            o = rp;
            break;
          default:
            o = eC;
            break;
        }
        break;
      case eC:
        switch (e.charAt(i)) {
          case sp:
            o = rp;
            break;
        }
        break;
    }
    if (o === ig ? s.push(e.substring(r, a - 1)) : s.push(e.substring(r)), t && s.length !== this.fullColumnNames.length) throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${s}`);
    return s;
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class Uw extends cn {
  constructor(e) {
    super(), this.microphoneConfig = e, this.isClosed = false, this.fftSize = e.fftSize || 1024;
    const t = Math.log2(this.fftSize);
    if (this.fftSize < 0 || t < 4 || t > 14 || !Number.isInteger(t)) throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);
    if (this.numFrames = e.numFramesPerSpectrogram || 43, this.sampleRateHz = e.sampleRateHz, this.columnTruncateLength = e.columnTruncateLength || this.fftSize, this.audioTrackConstraints = e.audioTrackConstraints, this.smoothingTimeConstant = e.smoothingTimeConstant || 0, this.includeSpectrogram = e.includeSpectrogram !== false, this.includeWaveform = e.includeWaveform === true, !this.includeSpectrogram && !this.includeWaveform) throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");
  }
  summary() {
    return "microphone";
  }
  static async create(e = {}) {
    if (!U().get("IS_BROWSER")) throw new Error("microphone API is only supported in browser environment.");
    const t = new Uw(e);
    return await t.start(), t;
  }
  async start() {
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ audio: this.audioTrackConstraints == null ? true : this.audioTrackConstraints, video: false });
    } catch (s) {
      throw new Error(`Error thrown while initializing video stream: ${s.message}`);
    }
    if (!this.stream) throw new Error("Could not obtain audio from microphone.");
    const e = window.AudioContext || window.webkitAudioContext;
    if (this.audioContext = new e(), !this.sampleRateHz) this.sampleRateHz = this.audioContext.sampleRate;
    else if (this.audioContext.sampleRate !== this.sampleRateHz) throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`);
    const t = this.audioContext.createMediaStreamSource(this.stream);
    this.analyser = this.audioContext.createAnalyser(), this.analyser.fftSize = this.fftSize * 2, this.analyser.smoothingTimeConstant = this.smoothingTimeConstant, t.connect(this.analyser), this.freqData = new Float32Array(this.fftSize), this.timeData = new Float32Array(this.fftSize);
  }
  async next() {
    if (this.isClosed) return { value: null, done: true };
    let e, t;
    const s = await this.getAudioData();
    if (this.includeSpectrogram) {
      const r = this.flattenQueue(s.freqDataQueue);
      e = this.getTensorFromAudioDataArray(r, [this.numFrames, this.columnTruncateLength, 1]);
    }
    if (this.includeWaveform) {
      const r = this.flattenQueue(s.timeDataQueue);
      t = this.getTensorFromAudioDataArray(r, [this.numFrames * this.fftSize, 1]);
    }
    return { value: { spectrogram: e, waveform: t }, done: false };
  }
  async capture() {
    return (await this.next()).value;
  }
  async getAudioData() {
    const e = [], t = [];
    let s = 0;
    return new Promise((r) => {
      const a = setInterval(() => {
        this.includeSpectrogram && (this.analyser.getFloatFrequencyData(this.freqData), this.freqData[0] === -1 / 0 && r({ freqDataQueue: e, timeDataQueue: t }), e.push(this.freqData.slice(0, this.columnTruncateLength))), this.includeWaveform && (this.analyser.getFloatTimeDomainData(this.timeData), t.push(this.timeData.slice())), ++s === this.numFrames && (clearInterval(a), r({ freqDataQueue: e, timeDataQueue: t }));
      }, this.fftSize / this.sampleRateHz * 1e3);
    });
  }
  stop() {
    this.isClosed || (this.isClosed = true, this.analyser.disconnect(), this.audioContext.close(), this.stream != null && this.stream.getTracks().length > 0 && this.stream.getTracks()[0].stop());
  }
  toArray() {
    throw new Error("Can not convert infinite audio stream to array.");
  }
  getSampleRate() {
    return this.sampleRateHz;
  }
  flattenQueue(e) {
    const t = e[0].length, s = new Float32Array(e.length * t);
    return e.forEach((r, a) => s.set(r, a * t)), s;
  }
  getTensorFromAudioDataArray(e, t) {
    const s = new Float32Array(A(t));
    return s.set(e, s.length - e.length), Wn(s, t);
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class Gw extends cn {
  constructor(e, t) {
    if (super(), this.webcamVideoElement = e, this.webcamConfig = t, this.isClosed = true, this.resize = false, this.needToResize()) if (this.resize = true, this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth], this.cropBoxInd = bn([0], "int32"), this.webcamConfig.centerCrop) {
      const s = this.webcamConfig.resizeWidth * 1 / this.webcamVideoElement.width, r = this.webcamConfig.resizeHeight * 1 / this.webcamVideoElement.height, a = (1 - s) / 2, o = (1 - r) / 2, i = a + s, u = r + o;
      this.cropBox = pa([o, a, u, i], [1, 4]);
    } else this.cropBox = pa([0, 0, 1, 1], [1, 4]);
  }
  summary() {
    return "webcam";
  }
  static async create(e, t = {}) {
    if (!U().get("IS_BROWSER")) throw new Error("tf.data.webcam is only supported in browser environment.");
    if (!e) {
      if (e = document.createElement("video"), !t.resizeWidth || !t.resizeHeight) throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");
      e.width = t.resizeWidth, e.height = t.resizeHeight;
    }
    const s = new Gw(e, t);
    return await s.start(), s;
  }
  async start() {
    this.webcamConfig.facingMode && $(this.webcamConfig.facingMode === "user" || this.webcamConfig.facingMode === "environment", () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ video: { deviceId: this.webcamConfig.deviceId, facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : "user", width: this.webcamVideoElement.width, height: this.webcamVideoElement.height } });
    } catch (e) {
      throw e.message = `Error thrown while initializing video stream: ${e.message}`, e;
    }
    if (!this.stream) throw new Error("Could not obtain video from webcam.");
    try {
      this.webcamVideoElement.srcObject = this.stream;
    } catch (e) {
      console.log(e), this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);
    }
    return this.webcamVideoElement.play(), this.isClosed = false, new Promise((e) => {
      this.webcamVideoElement.onloadedmetadata = () => {
        e();
      };
    });
  }
  async next() {
    if (this.isClosed) return { value: null, done: true };
    let e;
    try {
      e = YS(this.webcamVideoElement);
    } catch (t) {
      throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(t)}`);
    }
    if (this.resize) try {
      return { value: this.cropAndResizeFrame(e), done: false };
    } catch (t) {
      throw new Error(`Error thrown cropping the video: ${t.message}`);
    } finally {
      e.dispose();
    }
    else return { value: e, done: false };
  }
  needToResize() {
    return !!(this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight));
  }
  cropAndResizeFrame(e) {
    return H(() => {
      const t = mn(ue(e, "float32"), 0);
      let s;
      s = Ds.cropAndResize(t, this.cropBox, this.cropBoxInd, this.cropSize, "bilinear");
      const r = s.shape;
      return B(s, r.slice(1));
    });
  }
  async capture() {
    return (await this.next()).value;
  }
  stop() {
    this.stream.getTracks().forEach((t) => t.stop());
    try {
      this.webcamVideoElement.srcObject = null;
    } catch (t) {
      console.log(t), this.webcamVideoElement.src = null;
    }
    this.isClosed = true;
  }
  toArray() {
    throw new Error("Can not convert infinite video stream to array.");
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class K$ {
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class X$ extends cn {
  split(e) {
    return new LG(this, e);
  }
}
class LG extends X$ {
  constructor(e, t) {
    super(), this.upstream = e, this.impl = new zG(e, t);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
}
class zG extends Vw {
  constructor(e, t) {
    super(), this.upstream = e, this.separator = t, this.carryover = "";
  }
  summary() {
    return `${this.upstream.summary()} -> Split('${this.separator}')`;
  }
  async pump() {
    const e = await this.upstream.next();
    if (e.done) return this.carryover === "" ? false : (this.outputQueue.push(this.carryover), this.carryover = "", true);
    const t = e.value.split(this.separator);
    t[0] = this.carryover + t[0];
    for (const s of t.slice(0, -1)) this.outputQueue.push(s);
    return this.carryover = t[t.length - 1], true;
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class MG extends cn {
  decodeUTF8() {
    return new BG(this);
  }
}
class BG extends X$ {
  constructor(e) {
    super(), this.upstream = e, this.impl = new WG(e);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
}
class WG extends Vw {
  constructor(e) {
    if (super(), this.upstream = e, U().get("IS_BROWSER")) this.decoder = new TextDecoder("utf-8");
    else {
      const { StringDecoder: t } = require("string_decoder");
      this.decoder = new t("utf8");
    }
  }
  summary() {
    return `${this.upstream.summary()} -> Utf8`;
  }
  async pump() {
    const e = await this.upstream.next();
    let t;
    if (e.done) return false;
    t = e.value;
    let s;
    return U().get("IS_BROWSER") ? s = this.decoder.decode(t, { stream: true }) : s = this.decoder.write(Buffer.from(t.buffer)), this.outputQueue.push(s), true;
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class Y$ extends MG {
  constructor(e, t = {}) {
    super(), this.file = e, this.options = t, $(e instanceof Uint8Array || (U().get("IS_BROWSER") ? e instanceof File || e instanceof Blob : false), () => "FileChunkIterator only supports File, Blob and Uint8Array right now."), this.offset = t.offset || 0, this.chunkSize = t.chunkSize || 1024 * 1024;
  }
  summary() {
    return `FileChunks ${this.file}`;
  }
  async next() {
    return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? { value: null, done: true } : { value: await new Promise((t, s) => {
      const r = this.offset + this.chunkSize;
      if (this.file instanceof Uint8Array) t(new Uint8Array(this.file.slice(this.offset, r)));
      else {
        const a = new FileReader();
        a.onload = (i) => {
          let u = a.result;
          if (u instanceof ArrayBuffer && (u = new Uint8Array(u)), !(u instanceof Uint8Array)) return s(new TypeError("FileReader returned unknown type."));
          t(u);
        }, a.onabort = (i) => s(new Error("Aborted")), a.onerror = (i) => s(new Error(i.type));
        const o = this.file.slice(this.offset, r);
        a.readAsArrayBuffer(o);
      }
      this.offset = r;
    }), done: false };
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
async function VG(n, e = {}, t) {
  let s, r;
  typeof n == "string" ? s = n : (s = n.url, r = UG(n));
  const a = await $y(s, r);
  if (a.ok) {
    const o = new Uint8Array(await a.arrayBuffer());
    return new Y$(o, e);
  } else throw new Error(a.statusText);
}
const UG = (n) => ({ method: n.method, headers: n.headers, body: n.body, mode: n.mode, credentials: n.credentials, cache: n.cache, redirect: n.redirect, referrer: n.referrer, integrity: n.integrity });
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
function Q$(n) {
  return typeof n == "string" && n.slice(0, 7) === "file://";
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class Z$ extends K$ {
  constructor(e, t = {}) {
    super(), this.input = e, this.options = t;
  }
  async iterator() {
    if (Q$(this.input) && U().get("IS_NODE")) {
      const e = require("fs");
      this.input = e.readFileSync(this.input.slice(7));
    }
    return new Y$(this.input, this.options);
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
class J$ extends K$ {
  constructor(e, t = {}) {
    super(), this.url = e, this.fileOptions = t;
  }
  async iterator() {
    return Q$(this.url) ? new Z$(this.url, this.fileOptions).iterator() : VG(this.url, this.fileOptions);
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* =============================================================================
*/
function GG(n, e = {}) {
  return new q$(new J$(n), e);
}
function HG(n) {
  const e = Ww(n);
  return ts(async () => e);
}
function jG(n) {
  return ts(async () => {
    const e = await n();
    return Ww(() => e.next());
  });
}
async function qG(n, e) {
  return Gw.create(n, e);
}
async function KG(n) {
  return Uw.create(n);
}
/** @license See the LICENSE file. */
const e2 = "4.22.0";
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const XG = Object.freeze(Object.defineProperty({ __proto__: null, CSVDataset: q$, Dataset: bc, FileDataSource: Z$, TextLineDataset: j$, URLDataSource: J$, array: AG, csv: GG, func: HG, generator: jG, microphone: KG, version_data: e2, webcam: qG, zip: FG }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ie(n, e) {
  Array.isArray(n) || (n = [n]), n.forEach((t) => {
    t != null && $(t.dtype !== "complex64", () => `${e} does not support complex64 tensors in the CPU backend.`);
  });
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const YG = Mf;
class kh extends Pl {
  nextDataId() {
    return kh.nextDataId++;
  }
  constructor() {
    super(), this.blockSize = 48, this.firstUse = true, this.data = new Cd(this, zn());
  }
  write(e, t, s) {
    this.firstUse && (this.firstUse = false, U().get("IS_NODE") && gs(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
    const r = { id: this.nextDataId() };
    return this.data.set(r, { values: e, dtype: s, refCount: 1 }), r;
  }
  makeTensorInfo(e, t, s) {
    let r;
    if (t === "string" && s != null && s.length > 0 && Hs(s[0])) {
      const a = s.map((o) => qs(o));
      r = this.write(a, e, t);
    } else r = this.write(s, e, t);
    return { dataId: r, shape: e, dtype: t };
  }
  refCount(e) {
    return this.data.has(e) ? this.data.get(e).refCount : 0;
  }
  incRef(e) {
    const t = this.data.get(e);
    t.refCount++;
  }
  decRef(e) {
    if (this.data.has(e)) {
      const t = this.data.get(e);
      t.refCount--;
    }
  }
  move(e, t, s, r, a) {
    this.data.set(e, { values: t, dtype: r, refCount: a });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(e) {
    return this.readSync(e);
  }
  readSync(e) {
    const { dtype: t, complexTensorInfos: s } = this.data.get(e);
    if (t === "complex64") {
      const r = this.readSync(s.real.dataId), a = this.readSync(s.imag.dataId);
      return Qs(r, a);
    }
    return Xc(this.data.get(e).values, t);
  }
  bufferSync(e) {
    const t = this.readSync(e.dataId);
    if (e.dtype === "string") try {
      const s = t.map((r) => Fs(r));
      return Oe(e.shape, e.dtype, s);
    } catch {
      throw new Error("Failed to decode encoded string bytes into utf-8");
    }
    return Oe(e.shape, e.dtype, t);
  }
  makeOutput(e, t, s) {
    return zn().makeTensorFromTensorInfo(this.makeTensorInfo(t, s, e), this);
  }
  disposeData(e, t = false) {
    if (this.data.has(e)) {
      if (this.data.get(e).refCount--, !t && this.data.get(e).refCount > 0) return false;
      const { complexTensorInfos: s } = this.data.get(e);
      s != null && (this.disposeData(s.real.dataId, true), this.disposeData(s.imag.dataId, true)), this.data.delete(e);
    }
    return true;
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  async time(e) {
    const t = Xt();
    return e(), { kernelMs: Xt() - t };
  }
  memory() {
    return { unreliable: true, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] };
  }
  where(e) {
    Ie([e], "where");
    const t = this.readSync(e.dataId);
    return YG(e.shape, t);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  epsilon() {
    return super.epsilon();
  }
}
kh.nextDataId = 0;
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function t2(n) {
  const e = new Float32Array(n.length);
  for (let t = 0; t < n.length; ++t) e[t] = Math.abs(n[t]);
  return e;
}
const QG = (n) => {
  const { x: e } = n.inputs, t = n.backend;
  Ie(e, "abs");
  let s = new Float32Array(A(e.shape));
  const r = t.data.get(e.dataId).values;
  return s = t2(r), t.makeOutput(s, e.shape, e.dtype);
}, ZG = { kernelName: Yi, backendName: "cpu", kernelFunc: QG };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Bt(n) {
  return (e, t, s, r, a) => {
    const o = Re(e, t), i = o.length, u = me(o), c = A(o), l = Ht(a, c), d = e.length, h = t.length, p = me(e), f = me(t), m = Br(e, o), g = Br(t, o);
    if (m.length + g.length === 0) for (let y = 0; y < l.length; ++y) l[y] = n(s[y % s.length], r[y % r.length]);
    else for (let y = 0; y < l.length; ++y) {
      const b = Xi(y, i, u), x = b.slice(-d);
      m.forEach((k) => x[k] = 0);
      const w = js(x, d, p), C = b.slice(-h);
      g.forEach((k) => C[k] = 0);
      const v = js(C, h, f);
      l[y] = n(s[w], r[v]);
    }
    return [l, o];
  };
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ss(n) {
  const { inputs: e, backend: t } = n, { real: s, imag: r } = e, a = t.data.get(s.dataId).values, o = t.data.get(r.dataId).values, i = t.makeTensorInfo(s.shape, "complex64"), u = t.data.get(i.dataId);
  return u.complexTensorInfos = { real: t.makeTensorInfo(s.shape, "float32", a), imag: t.makeTensorInfo(r.shape, "float32", o) }, i;
}
const JG = { kernelName: Sd, backendName: "cpu", kernelFunc: ss };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function jp(n, e, t = "float32") {
  if (t === "complex64") {
    const r = jp(n, e, "float32"), a = jp(n, e, "float32");
    return ss({ inputs: { real: r, imag: a }, backend: n });
  }
  const s = un(A(e), t);
  return n.makeTensorInfo(e, t, s);
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Cr(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  return t.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const eH = { kernelName: oo, backendName: "cpu", kernelFunc: Cr };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Vi(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = t.data.get(s.dataId).complexTensorInfos.real, a = t.data.get(r.dataId).values;
  return t.makeTensorInfo(r.shape, r.dtype, a);
}
const tH = { kernelName: Dd, backendName: "cpu", kernelFunc: Vi };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function n2(n, e, t, s) {
  if (s === "int32") {
    const r = Int32Array.from(n);
    return [e, "int32", r];
  }
  if (s === "bool") {
    const r = Yo([0], t), [a, o] = Bt((i, u) => i !== u ? 1 : 0)(e, [], n, r, "bool");
    return [o, "bool", a];
  }
  throw new Error(`Error in Cast: failed to cast ${t} to ${s}`);
}
function Ra(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { dtype: a } = s;
  if (a === "complex64") {
    if (r.dtype === "complex64") return Cr({ inputs: { x: r }, backend: t });
    const l = jp(t, r.shape, r.dtype), d = Ra({ inputs: { x: r }, backend: t, attrs: { dtype: "float32" } }), h = ss({ inputs: { real: d, imag: l }, backend: t });
    return t.disposeIntermediateTensorInfo(l), t.disposeIntermediateTensorInfo(d), h;
  }
  if (r.dtype === "complex64") {
    const l = Vi({ inputs: { input: r }, backend: t }), d = Ra({ inputs: { x: l }, backend: t, attrs: { dtype: a } });
    return t.disposeIntermediateTensorInfo(l), d;
  }
  if (!of(r.dtype, a)) {
    const l = Cr({ inputs: { x: r }, backend: t });
    return { dataId: l.dataId, shape: l.shape, dtype: a };
  }
  const o = t.data.get(r.dataId).values, [i, u, c] = n2(o, r.shape, r.dtype, a);
  return t.makeTensorInfo(i, u, c);
}
const nH = { kernelName: Wa, backendName: "cpu", kernelFunc: Ra };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sn(n, e, t, s) {
  return t == null ? ({ inputs: r, backend: a }) => {
    const { a: o, b: i } = r, u = a;
    Ie([o, i], n);
    const c = u.data.get(o.dataId).values, l = u.data.get(i.dataId).values, d = o.dtype === "string" ? Zs(c) : c, h = o.dtype === "string" ? Zs(l) : l, p = s || o.dtype, [f, m] = e(o.shape, i.shape, d, h, p);
    return u.makeTensorInfo(m, p, f);
  } : ({ inputs: r, backend: a }) => {
    const { a: o, b: i } = r, u = a;
    if (o.dtype === "complex64" || i.dtype === "complex64") {
      const c = Ra({ inputs: { x: o }, backend: u, attrs: { dtype: "complex64" } }), l = u.data.get(c.dataId), d = l.complexTensorInfos.real, h = l.complexTensorInfos.imag, p = u.data.get(d.dataId).values, f = u.data.get(h.dataId).values, m = Ra({ inputs: { x: i }, backend: u, attrs: { dtype: "complex64" } }), g = u.data.get(m.dataId), y = g.complexTensorInfos.real, b = g.complexTensorInfos.imag, x = u.data.get(y.dataId).values, w = u.data.get(b.dataId).values, [C, v, k] = t(o.shape, i.shape, p, f, x, w), R = u.makeTensorInfo(k, "float32", C), N = u.makeTensorInfo(k, "float32", v), T = ss({ inputs: { real: R, imag: N }, backend: u });
      return u.disposeIntermediateTensorInfo(c), u.disposeIntermediateTensorInfo(m), u.disposeIntermediateTensorInfo(R), u.disposeIntermediateTensorInfo(N), T;
    } else {
      const c = u.data.get(o.dataId).values, l = u.data.get(i.dataId).values, d = s || o.dtype, [h, p] = e(o.shape, i.shape, c, l, d);
      return u.makeTensorInfo(p, d, h);
    }
  };
}
function Hw(n) {
  return (e, t, s, r, a, o) => {
    const i = Re(e, t), u = A(i), c = i.length, l = me(i), d = Ht("float32", u), h = Ht("float32", u), p = Br(e, i), f = Br(t, i), m = Qs(s, r), g = Qs(a, o), y = e.length, b = me(e), x = t.length, w = me(t);
    if (p.length + f.length === 0) for (let C = 0; C < d.length; C++) {
      const v = C % m.length, k = C % g.length, R = n(m[v * 2], m[v * 2 + 1], g[k * 2], g[k * 2 + 1]);
      d[C] = R.real, h[C] = R.imag;
    }
    else for (let C = 0; C < d.length; C++) {
      const v = Xi(C, c, l), k = v.slice(-y);
      p.forEach((E) => k[E] = 0);
      const R = js(k, y, b), N = v.slice(-x);
      f.forEach((E) => N[E] = 0);
      const T = js(N, x, w), S = n(m[R * 2], m[R * 2 + 1], g[T * 2], g[T * 2 + 1]);
      d[C] = S.real, h[C] = S.imag;
    }
    return [d, h, i];
  };
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const s2 = Bt((n, e) => n + e), sH = Hw((n, e, t, s) => ({ real: n + t, imag: e + s })), Dl = sn(Ur, s2, sH), rH = { kernelName: Ur, backendName: "cpu", kernelFunc: Dl };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function jw(n, e, t, s, r) {
  const a = A(s), o = un(r, t);
  for (let i = 0; i < n.length; i++) {
    const u = n[i];
    if (u < 0) throw new Error("Input x must be non-negative!");
    u >= r || (a > 0 ? o[u] += e[i] : o[u] += 1);
  }
  return o;
}
function r2(n, e, t, s = false) {
  const r = n.shape[0], a = n.shape[1], o = Oe([r, t], e.dtype);
  for (let i = 0; i < r; i++) for (let u = 0; u < a; u++) {
    const c = n.get(i, u);
    if (c < 0) throw new Error("Input x must be non-negative!");
    c >= t || (s ? o.set(1, i, c) : e.size > 0 ? o.set(o.get(i, c) + e.get(i, u), i, c) : o.set(o.get(i, c) + 1, i, c));
  }
  return o;
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const a2 = Bt((n, e) => n & e), aH = sn(Ml, a2), oH = { kernelName: Ml, backendName: "cpu", kernelFunc: aH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function vr(n) {
  return (e, t, s) => {
    const r = Dt(t, e.length);
    for (let a = 0; a < e.length; ++a) r[a] = n(e[a], s);
    return r;
  };
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function gt(n, e, t) {
  const s = vr(e);
  return ti(n, s, t);
}
function ti(n, e, t) {
  return ({ inputs: s, attrs: r, backend: a }) => {
    const { x: o } = s;
    Ie(o, n);
    const i = a, u = i.data.get(o.dataId).values;
    let c;
    if (o.dtype === "string") {
      if (!Array.isArray(u)) throw new Error("String tensor's value was not an instance of Array");
      c = Zs(u);
    } else c = u;
    const l = t || o.dtype, d = e(c, l, r);
    return i.makeTensorInfo(o.shape, l, d);
  };
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const o2 = vr((n) => Math.ceil(n)), iH = ti(Va, o2), uH = { kernelName: Va, backendName: "cpu", kernelFunc: iH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function qw(n, e, t, s) {
  const r = Dt(t, A(e));
  if (s && t !== "string") {
    let a = 0;
    n.forEach((o) => {
      const i = A(o.shape);
      r.set(o.vals, a), a += i;
    });
  } else {
    let a = 0;
    n.forEach((o) => {
      const i = t === "string" ? Zs(o.vals) : o.vals;
      let u = 0;
      for (let c = 0; c < o.shape[0]; ++c) {
        const l = c * e[1] + a;
        for (let d = 0; d < o.shape[1]; ++d) r[l + d] = i[u++];
      }
      a += o.shape[1];
    });
  }
  return r;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const i2 = Bt((n, e) => n === e ? 1 : 0), u2 = sn(du, i2, null, "bool"), lH = { kernelName: du, backendName: "cpu", kernelFunc: u2 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const l2 = vr((n) => Math.exp(n)), c2 = ti(eo, l2, "float32"), cH = { kernelName: eo, backendName: "cpu", kernelFunc: c2 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const d2 = vr((n) => Math.expm1(n)), dH = ti(to, d2), hH = { kernelName: to, backendName: "cpu", kernelFunc: dH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const h2 = vr((n) => Math.floor(n)), pH = ti(no, h2), fH = { kernelName: no, backendName: "cpu", kernelFunc: pH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const p2 = Bt((n, e) => Math.floor(n / e)), mH = sn(so, p2, null, "int32"), gH = { kernelName: so, backendName: "cpu", kernelFunc: mH };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function f2(n, e, t, s, r, a, o, i, u) {
  const c = Oe([s, a], t);
  for (let l = 0; l < s; l++) {
    const d = [];
    let h = 0;
    for (let p = 0; p < r; p++) {
      const f = n[l * r + p];
      h += f * o[p], d.push(f);
    }
    if (h < 0 || h >= u / a) throw new Error(`Invalid indices: ${d} does not index into ${i}`);
    for (let p = 0; p < a; p++) c.values[l * a + p] = e.get(...e.indexToLoc(h * a + p));
  }
  return c;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function m2(n, e, t) {
  const s = Oe(t, n.dtype);
  for (let r = 0; r < s.size; ++r) {
    const o = s.indexToLoc(r).slice(), i = o[0], u = o[2], c = e.locToIndex([i, u]);
    o[2] = e.values[c];
    const l = n.locToIndex(o);
    0 <= l && l < n.values.length && (s.values[r] = n.values[l]);
  }
  return s;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const g2 = Bt((n, e) => n > e ? 1 : 0), yH = sn(gu, g2, null, "bool"), bH = { kernelName: gu, backendName: "cpu", kernelFunc: yH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const y2 = Bt((n, e) => n >= e ? 1 : 0), xH = sn(ao, y2, null, "bool"), wH = { kernelName: ao, backendName: "cpu", kernelFunc: xH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const b2 = Bt((n, e) => n < e ? 1 : 0), CH = sn(yu, b2, null, "bool"), IH = { kernelName: yu, backendName: "cpu", kernelFunc: CH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const x2 = Bt((n, e) => n <= e ? 1 : 0), SH = sn(bu, x2, null, "bool"), vH = { kernelName: bu, backendName: "cpu", kernelFunc: SH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function w2(n, e, t) {
  const s = (e - n) / (t - 1), r = un(t, "float32");
  r[0] = n;
  for (let a = 1; a < r.length; a++) r[a] = r[a - 1] + s;
  return r;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const C2 = vr((n) => Math.log(n)), $H = ti(ho, C2), kH = { kernelName: ho, backendName: "cpu", kernelFunc: $H };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function I2(n, e, t, s) {
  const r = Ht(s, A(t));
  for (let a = 0; a < r.length; ++a) {
    const o = a * e;
    let i = n[o];
    for (let u = 0; u < e; ++u) {
      const c = n[o + u];
      (Number.isNaN(c) || c > i) && (i = c);
    }
    r[a] = i;
  }
  return r;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const S2 = Bt((n, e) => Math.max(n, e)), NH = sn(go, S2), TH = { kernelName: go, backendName: "cpu", kernelFunc: NH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const v2 = Bt((n, e) => Math.min(n, e)), RH = sn(wo, v2), _H = { kernelName: wo, backendName: "cpu", kernelFunc: RH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Kw = Bt((n, e) => n * e), EH = Hw((n, e, t, s) => ({ real: n * t - e * s, imag: n * s + e * t })), Rm = sn(So, Kw, EH), DH = { kernelName: So, backendName: "cpu", kernelFunc: Rm };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function $2(n, e, t) {
  const s = qr(-1, t);
  return Kw([], e, s, n, t);
}
function AH(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  Ie(s, "neg");
  const r = t.data.get(s.dataId).values, [a, o] = $2(r, s.shape, s.dtype);
  return t.makeTensorInfo(o, s.dtype, a);
}
const FH = { kernelName: ku, backendName: "cpu", kernelFunc: AH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const k2 = Bt((n, e) => n !== e ? 1 : 0), OH = sn(Nu, k2, null, "bool"), PH = { kernelName: Nu, backendName: "cpu", kernelFunc: OH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Xw(n, e, t, s, r) {
  const a = e.length, o = A(e), i = me(e), u = me(r), c = Ht(t, A(r));
  for (let l = 0; l < o; ++l) {
    const d = Xi(l, a, i), h = new Array(d.length);
    for (let f = 0; f < h.length; f++) h[f] = d[s[f]];
    const p = js(h, a, u);
    c[p] = n[l];
  }
  return c;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Xn(n) {
  const { inputs: e, attrs: t, backend: s } = n, { x: r } = e, { perm: a } = t;
  Ie(r, "transpose");
  const o = r.shape.length, i = new Array(o);
  for (let d = 0; d < i.length; d++) i[d] = r.shape[a[d]];
  const u = s.data.get(r.dataId).values, c = Xw(u, r.shape, r.dtype, a, i);
  return { dataId: s.write(c, i, r.dtype), shape: i, dtype: r.dtype };
}
const LH = { kernelName: fr, backendName: "cpu", kernelFunc: Xn };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function N2(n, e, t, s) {
  const [r, a] = xt(n, s), o = tn(e, "int32"), i = un(A(r), o), u = A(a);
  for (let c = 0; c < i.length; ++c) {
    const l = c * u;
    let d = 1;
    for (let h = 0; h < u; ++h) d *= t[l + h];
    i[c] = d;
  }
  return { outVals: i, outShape: r, outDtype: o };
}
function zH(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s;
  Ie(r, "prod");
  const i = r.shape.length, u = Ee(a, r.shape), c = ct(u, i);
  let l = u, d = r;
  const h = [];
  c != null && (d = Xn({ inputs: { x: r }, backend: t, attrs: { perm: c } }), h.push(d), l = it(l.length, i));
  const p = t.data.get(d.dataId).values, { outVals: f, outShape: m, outDtype: g } = N2(d.shape, d.dtype, p, l);
  let y = m;
  return o && (y = ft(m, u)), h.forEach((b) => t.disposeIntermediateTensorInfo(b)), t.makeTensorInfo(y, g, f);
}
const MH = { kernelName: To, backendName: "cpu", kernelFunc: zH };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function BH(n, e, t) {
  n.forEach((s, r) => {
    if (s < 0 || s >= t) {
      const a = Xi(r, e.length, me(e)).join(",");
      throw new Error(`indices[${a}] = ${s} is not in [0, ${t})`);
    }
  });
}
function WH(n, e) {
  for (let t = 0; t < n.length; ++t) {
    const s = n[t], r = t === n.length - 1 ? e : n[t + 1].length;
    if (s.length === 0) throw new Error("Ragged splits may not be empty");
    if (s[0] < 0) throw new Error("Ragged splits must be non-negative");
    if (s[s.length - 1] > r) throw new Error("Ragged splits must not point past values");
    for (let a = 1; a < s.length; ++a) if (s[a - 1] > s[a]) throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function VH(n, e, t, s) {
  const r = [];
  let a = 0;
  const o = e.length - 1 + t.length, i = new Array(o).fill(null).map(() => [0]);
  WH(t, s);
  let u = 1;
  for (let c = 0; c < e.length - 1; ++c) {
    u *= e[c];
    const l = e[c + 1];
    for (let d = 1; d < u + 1; ++d) i[c].push(d * l);
  }
  for (let c = 0; c < n.length; ++c) {
    let l = n[c], d = n[c] + 1;
    for (let h = 0; h < t.length; ++h) {
      const p = t[h], f = h + e.length - 1;
      if (f >= 0) {
        const m = i[f], g = m[m.length - 1] - p[l];
        for (let y = l; y < d; ++y) i[f].push(p[y + 1] + g);
      }
      l = p[l], d = p[d];
    }
    d !== l && (r.push([l, d]), a += d - l);
  }
  return { outSplits: i, valueSlices: r, numValues: a };
}
function UH(n) {
  const e = [];
  for (let t = 0; t < n.length; ++t) {
    const s = n[t].length, r = Dt("int32", s);
    e.push(r), n[t].forEach((a, o) => r[o] = a);
  }
  return e;
}
function tC(n, e) {
  const t = n.slice(0, e);
  for (; t.length < e; ) t.push(1);
  for (let s = e; s < n.length; s++) t[e - 1] *= n[s];
  return t;
}
function GH(n, e, t, s, r, a) {
  const o = tC(e, 2)[1], i = tC(a, 2)[1];
  let u = 0;
  for (const c of t) for (let l = c[0]; l < c[1]; ++l) {
    for (let d = 0; d < s; ++d) r[u * i + d] = n[l * o + d];
    ++u;
  }
}
function HH(n, e, t, s, r) {
  const a = e.slice();
  a[0] = r;
  const o = Dt(t, A(a)), i = n.length, u = i === 0 ? 0 : i / e[0];
  return GH(n, e, s, u, o, a), [o, a];
}
function T2(n, e, t, s, r, a, o, i) {
  if (n.length === 0) throw new Error("paramsNestedSplits must be non empty");
  if (e[0].length === 0) throw new Error("Split tensors must not be scalars");
  const u = e[0][0] - 1;
  if (BH(a, o, u), s.length === 0) throw new Error("params.rank must be nonzero");
  const c = s[0], { outSplits: l, valueSlices: d, numValues: h } = VH(a, o, n, c), p = UH(l), f = HH(t, s, r, d, h);
  return [p, f[0], f[1]];
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const nC = 2147483647;
function R2(n, e, t, s, r, a, o) {
  if (e.length > 1) throw new Error("starts must be a scalar or vector");
  if (r.length > 1) throw new Error("limits must be a scalar or vector");
  if (o.length > 1) throw new Error("deltas must be a scalar or vector");
  const i = e.length === 0, u = r.length === 0, c = o.length === 0, l = [];
  i || l.push(e[0]), u || l.push(r[0]), c || l.push(o[0]);
  for (let g = 1; g < l.length; ++g) if (l[g] !== l[g - 1]) throw new Error("starts, limits, and deltas must have the same shape");
  const d = l.length === 0 ? 1 : l[0], h = Dt("int32", d + 1);
  h[0] = 0;
  for (let g = 0; g < d; ++g) {
    const y = i ? n[0] : n[g], b = u ? s[0] : s[g], x = c ? a[0] : a[g];
    if (x === 0) throw new Error("Requires delta != 0");
    let w;
    if (x > 0 && b < y || x < 0 && b > y) w = 0;
    else if (w = Math.ceil(Math.abs((b - y) / x)), w > nC) throw new Error(`Requires ((limit - start) / delta) <= ${nC}`);
    h[g + 1] = h[g] + w;
  }
  const p = h[d], f = Dt(t, p);
  let m = 0;
  for (let g = 0; g < d; ++g) {
    const y = h[g + 1] - h[g];
    let b = i ? n[0] : n[g];
    const x = c ? a[0] : a[g];
    for (let w = 0; w < y; ++w) f[m++] = b, b += x;
  }
  return [h, f];
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var _s = Gs;
class qp {
  constructor(e, t, s, r, a, o, i, u, c, l) {
    this.shape = e, this.shapeShape = t, this.values = s, this.valuesShape = r, this.valuesDType = a, this.defaultValue = o, this.defaultValueShape = i, this.rowPartitionValues = u, this.rowPartitionValuesShapes = c, this.rowPartitionTypes = lv(l), this.raggedRank = cv(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(e) {
    return this.rowPartitionTypes[0] === _s.FIRST_DIM_SIZE ? this.rowPartitionTypes[e + 1] : this.rowPartitionTypes[e];
  }
  getRowPartitionTensor(e) {
    return this.rowPartitionTypes[0] === _s.FIRST_DIM_SIZE ? this.rowPartitionValues[e + 1] : this.rowPartitionValues[e];
  }
  getMaxWidth(e) {
    const t = this.getRowPartitionTensor(e - 1);
    switch (this.getRowPartitionTypeByDimension(e - 1)) {
      case _s.VALUE_ROWIDS:
        return qp.getMaxWidthValueRowID(t);
      case _s.ROW_SPLITS:
        return qp.getMaxWidthRowSplit(t);
      default:
        throw new Error(`Cannot handle partition type ${_s[this.getRowPartitionTypeByDimension(e - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(e) {
    const t = e.length;
    if (t === 0 || t === 1) return 0;
    let s = 0;
    for (let r = 0; r < t - 1; ++r) {
      const a = e[r + 1] - e[r];
      a > s && (s = a);
    }
    return s;
  }
  static getMaxWidthValueRowID(e) {
    const t = e.length;
    if (t === 0) return 0;
    let s = 0, r = e[0], a = 0;
    for (let o = 1; o < t; ++o) {
      const i = e[o];
      i !== r && (r = i, a = Math.max(o - s, a), s = o);
    }
    return Math.max(t - s, a);
  }
  tensorShapeFromTensor(e, t, s = true) {
    if (t.length === 0) {
      if (e[0] === -1) return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return rC(e, s);
  }
  calculateOutputSize(e) {
    const t = this.valuesShape, s = this.defaultValueShape;
    dv(s, t);
    const r = this.tensorShapeFromTensor(this.shape, this.shapeShape), o = uv(this.raggedRank, r, t);
    o[0] < 0 && (o[0] = e);
    for (let i = 1; i <= this.raggedRank; ++i) o[i] < 0 && (o[i] = this.getMaxWidth(i));
    return o;
  }
  calculateFirstParentOutputIndex(e, t, s) {
    const r = Math.min(e, s), a = [];
    let o = 0;
    for (let i = 0; i < r; ++i, o += t) a.push(o);
    for (let i = r; i < e; ++i) a.push(-1);
    return $(a.length === e, () => "Final length of result must be equal to firstDimension."), a;
  }
  calculateOutputIndexRowSplit(e, t, s, r) {
    const a = e.length, o = [];
    for (let i = 0; i < a - 1; ++i) {
      const u = e[i + 1] - e[i];
      let c = Math.min(r, u), l = t[i];
      l === -1 && (c = 0);
      for (let d = 0; d < c; ++d) o.push(l), l += s;
      for (let d = 0; d < u - c; ++d) o.push(-1);
    }
    if (a > 0 && o.length !== e[a - 1]) throw new Error("Invalid row split size.");
    return o;
  }
  calculateOutputIndexValueRowID(e, t, s, r) {
    const a = e.length, o = [];
    if (a === 0) return [];
    let i = 0, u = e[0];
    if (u >= t.length) throw new Error(`Got currentValueRowId=${u}, which is not less than ${t.length}`);
    let c = t[u];
    o.push(c);
    for (let l = 1; l < a; ++l) {
      const d = e[l];
      if (d === u) c >= 0 && (++i, i < r ? c += s : c = -1);
      else {
        if (i = 0, u = d, d >= t.length) throw new Error(`Got nextValueRowId=${d} which is not less than ${t.length}`);
        c = t[d];
      }
      o.push(c);
    }
    if (o.length !== e.length) throw new Error("Invalid row ids.");
    return o;
  }
  calculateOutputIndex(e, t, s, r) {
    const a = this.getRowPartitionTensor(e), o = this.getRowPartitionTypeByDimension(e);
    switch (o) {
      case _s.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(a, t, s, r);
      case _s.ROW_SPLITS:
        if (a.length - 1 > t.length) throw new Error(`Row partition size is greater than output size: ${a.length - 1} > ${t.length}`);
        return this.calculateOutputIndexRowSplit(a, t, s, r);
      default:
        throw new Error(`Unsupported partition type: ${_s[o]}`);
    }
  }
  getFirstDimensionSize() {
    const e = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0) throw new Error("No row_partition_types given.");
    const t = this.rowPartitionTypes[0];
    switch (t) {
      case _s.FIRST_DIM_SIZE:
        return e[0];
      case _s.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case _s.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${_s[t]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0) throw new Error("Invalid first partition input. Tensor requires at least one element.");
    const t = this.getFirstDimensionSize(), s = this.calculateOutputSize(t), r = new Array(this.raggedRank + 1);
    r[r.length - 1] = 1;
    for (let u = r.length - 2; u >= 0; --u) r[u] = r[u + 1] * s[u + 1];
    const a = rC(s, false), o = Dt(this.valuesDType, A(a));
    if (r[0] * s[0] > 0) {
      let u = this.calculateFirstParentOutputIndex(t, r[0], s[0]);
      for (let c = 1; c <= this.raggedRank; ++c) u = this.calculateOutputIndex(c - 1, u, r[c], s[c]);
      this.setOutput(this.raggedRank, u, o, a);
    }
    return [a, o];
  }
  setOutput(e, t, s, r) {
    if (s.length === 0) return;
    const a = this.values, o = s;
    let i = r.slice();
    i = i.slice(e + 1);
    const u = A(i), c = t.length;
    let l = this.defaultValue;
    if (l.length !== u && l.length !== 1) {
      const f = this.defaultValueShape;
      H(() => {
        const m = B(l, f);
        l = Si(m, i).dataSync();
      });
    }
    let d = 0, h = 0, p = 0;
    for (let f = 0; f <= c; ++f) {
      let m = f < c ? t[f] : -1;
      if (m === p) {
        ++p;
        continue;
      }
      if (h < p) {
        const g = a.subarray(d * u), y = o.subarray(h * u), b = (p - h) * u;
        sC(y, g, b);
      }
      if (f >= c) {
        const g = s.length;
        m = Math.floor(g / u);
      }
      if (m > p) if (this.defaultValue.length === 1) o.subarray(p * u, m * u).fill(this.defaultValue[0]), p = m;
      else for (; m > p; ) {
        const g = o.slice(p * u);
        sC(g, l, u), ++p;
      }
      m < 0 ? (d = f + 1, h = p) : (d = f, h = p, p = h + 1);
    }
  }
}
function sC(n, e, t) {
  for (let s = 0; s < t; s++) n[s] = e[s];
}
function rC(n, e) {
  const t = [];
  for (let s of n) {
    if (s < 0) {
      if (!e) throw new Error(`Dimension ${s} must be >= 0`);
      if (s < -1) throw new Error(`Dimension ${s} must be >= -1`);
      s = -1;
    }
    t.push(s);
  }
  return t;
}
function _2(n, e, t, s, r, a, o, i, u, c) {
  return new qp(n, e, t, s, r, a, o, i, u, c).compute();
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Yw(n, e, t, s) {
  const r = n === e, a = n < e && t < 0, o = e < n && t > 1;
  if (r || a || o) return un(0, s);
  const i = Math.abs(Math.ceil((e - n) / t)), u = un(i, s);
  e < n && t === 1 && (t = -1), u[0] = n;
  for (let c = 1; c < u.length; c++) u[c] = u[c - 1] + t;
  return u;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const E2 = vr((n) => 1 / Math.sqrt(n)), jH = ti(Po, E2), qH = { kernelName: Po, backendName: "cpu", kernelFunc: jH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ci(n, e, t, s, r, a, o, i, u, c) {
  const l = [s / r, r], d = n.values, h = e.values;
  if (s === 0) return Oe(t, e.dtype);
  const p = u instanceof Gt ? u : Oe(l, e.dtype);
  typeof u == "string" || typeof u == "number" ? p.values.fill(u) : typeof u == "boolean" && p.values.fill(+u);
  for (let f = 0; f < a; f++) {
    const m = [];
    let g = 0;
    for (let y = 0; y < o; y++) {
      const b = d[f * o + y];
      m.push(b), g += b * i[y];
    }
    if (g < 0 || g >= s / r) throw new Error(`Invalid indices: ${m} does not index into ${t}`);
    for (let y = 0; y < r; y++) c ? p.values[g * r + y] += h[f * r + y] : p.values[g * r + y] = e.rank === 0 ? h[0] : h[f * r + y];
  }
  return p;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const KH = vr((n) => 1 / (1 + Math.exp(-n))), D2 = gt(Wo, (n) => 1 / (1 + Math.exp(-n))), XH = { kernelName: Wo, backendName: "cpu", kernelFunc: D2 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Kp(n, e, t, s, r) {
  const a = Kf(s, e, t), o = A(t), i = me(s);
  if (a) {
    const d = Xf(e, i);
    return r === "string" ? n.slice(d, d + o) : n.subarray(d, d + o);
  }
  const u = r === "string" ? Zs(n) : n, c = Oe(s, r, u), l = Oe(t, r);
  for (let d = 0; d < l.size; ++d) {
    const h = l.indexToLoc(d), p = h.map((f, m) => f + e[m]);
    l.set(c.get(...p), ...h);
  }
  return r === "string" ? lx(l.values) : l.values;
}
function Ui(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { begin: a, size: o } = s;
  Ie(r, "slice");
  const [i, u] = hc(r, a, o);
  qf(r, i, u);
  const c = t.data.get(r.dataId).values, l = Kp(c, i, u, r.shape, r.dtype);
  return t.makeTensorInfo(u, r.dtype, l);
}
const YH = { kernelName: Mu, backendName: "cpu", kernelFunc: Ui };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function A2(n, e, t, s, r, a, o) {
  const i = e[0], u = a[0], c = new Array(u), l = new Array(i), d = e[1];
  if (u === 0) {
    if (i !== 0) throw new Error(Qb(i));
    const g = Dt(t, 0), y = Dt(r, 0);
    return [g, [0, d], y, c, l];
  }
  let h = true, p = 0;
  const f = new Array(u).fill(0);
  for (let g = 0; g < i; ++g) {
    const y = n[g * d];
    if (y < 0) throw new Error(Zb(g, y));
    if (y >= u) throw new Error(Jb(g, y, u));
    ++f[y], h = h && y >= p, p = y;
  }
  let m = true;
  for (let g = 0; g < u; ++g) {
    const y = f[g] === 0;
    c[g] = y, m = m && !y, f[g] = Math.max(f[g], 1), g > 0 && (f[g] += f[g - 1]);
  }
  if (m && h) {
    const g = n, y = s;
    for (let b = 0; b < i; ++b) l[b] = b;
    return [g, [i, d], y, c, l];
  } else {
    const g = f[u - 1], y = Dt(t, g * d), b = Dt(r, g), x = new Array(u).fill(0);
    for (let w = 0; w < i; ++w) {
      const C = n[w * d], v = x[C], k = (C === 0 ? 0 : f[C - 1]) + v;
      x[C]++;
      for (let R = 0; R < d; ++R) y[k * d + R] = n[w * d + R];
      b[k] = s[w], l[w] = k;
    }
    for (let w = 0; w < u; ++w) if (x[w] === 0) {
      const v = w === 0 ? 0 : f[w - 1];
      y[v * d + 0] = w;
      for (let k = 1; k < d; ++k) y[v * d + k] = 0;
      b[v] = o;
    }
    return [y, [g, d], b, c, l];
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function F2(n, e, t, s, r) {
  const a = A(s), o = e[0], i = r.length, u = [];
  let c = 1, l = -1;
  for (let g = 0; g < i; ++g) {
    const y = r[g];
    if (y === -1) {
      if (l !== -1) throw new Error(ex(l, g));
      l = g, u.push(1);
    } else {
      if (y < 0) throw new Error(tx(g, y));
      c *= y, u.push(y);
    }
  }
  if (l !== -1) {
    if (c <= 0) throw new Error(nx());
    const g = Math.trunc(a / c);
    if (c * g !== a) throw new Error(sx(s, u));
    u[l] = g;
  }
  if (A(u) !== a) throw new Error(rx(s, u));
  const h = s.length, p = [];
  if (h > 0) {
    p[h - 1] = 1;
    for (let g = h - 2; g >= 0; --g) p[g] = p[g + 1] * s[g + 1];
  }
  const f = [];
  if (i > 0) {
    f[i - 1] = 1;
    for (let g = i - 2; g >= 0; --g) f[g] = f[g + 1] * u[g + 1];
  }
  const m = Dt(t, o * i);
  for (let g = 0; g < o; ++g) {
    let y = 0;
    for (let b = 0; b < h; ++b) y += n[g * h + b] * p[b];
    for (let b = 0; b < i; ++b) m[g * i + b] = Math.trunc(y / f[b]), y %= f[b];
  }
  return [m, [o, i], u];
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Qw(n, e, t, s, r, a = false, o = 0) {
  const i = s.length, u = [e[0], n.length / e[0]], c = u[1], d = i > 0 ? r[i - 1] + 1 : 0;
  if (d < 0) throw new Error(ld());
  const h = e.slice();
  h[0] = d;
  const p = h.reduce((x, w) => x * w, 1), f = Dt(t, p);
  if (i === 0) return d > 0 && f.fill(o), [f, h];
  if (d <= 0) throw new Error(ld());
  let m = 0, g = 1, y = 0, b = r[m];
  for (; ; ) {
    let x = 0;
    if (g < i) {
      if (x = r[g], b === x) {
        ++g;
        continue;
      }
      if (b >= x) throw new Error(ax());
    }
    if (b < 0 || b >= d) throw new Error(ox(b, d));
    b > y && f.fill(o, y * c, b * c);
    for (let w = m; w < g; ++w) {
      const C = s[w];
      if (C < 0 || C >= u[0]) throw new Error(ix(w, s[w], u[0]));
      for (let v = 0; v < c; v++) f[b * c + v] += n[C * c + v];
    }
    if (a) for (let w = 0; w < c; w++) f[b * c + w] /= g - m;
    if (m = g, ++g, y = b + 1, b = x, g > i) break;
  }
  return y < d && f.fill(o, y * c, d * c), [f, h];
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const QH = vr((n) => Math.sqrt(n)), ZH = gt(Uo, (n) => Math.sqrt(n)), JH = { kernelName: Uo, backendName: "cpu", kernelFunc: ZH };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const O2 = Bt((n, e) => {
  const t = n - e;
  return t * t;
}), ej = sn(jo, O2), tj = { kernelName: jo, backendName: "cpu", kernelFunc: ej };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const P2 = vr((n, e) => {
  const { pattern: t, replaceGlobal: s, rewrite: r } = e;
  return n.replace(new RegExp(t, s ? "g" : ""), r);
}), nj = ti(Fd, P2), sj = { kernelName: Fd, backendName: "cpu", kernelFunc: nj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function L2(n, e, t, s) {
  const r = Oe(n, e.dtype);
  for (let a = 0; a < r.size; a++) {
    const o = r.indexToLoc(a), i = new Array(o.length);
    for (let u = 0; u < i.length; u++) i[u] = o[u] * t[u] + s[u];
    r.set(e.get(...i), ...o);
  }
  return r;
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class rj {
  constructor(e, t, s, r, a, o) {
    this.separator = qs(e), this.nGramWidths = t, this.leftPad = qs(s), this.rightPad = qs(r), this.padWidth = a, this.preserveShort = o;
  }
  getPadWidth(e) {
    return Math.min(this.padWidth < 0 ? e - 1 : this.padWidth, e - 1);
  }
  getNumNGrams(e, t) {
    const s = this.getPadWidth(t);
    return Math.max(0, e + 2 * s - t + 1);
  }
  createNGrams(e, t, s, r, a, o) {
    for (let i = 0; i < a; ++i) {
      const u = this.getPadWidth(o), c = Math.max(0, u - i), l = Math.max(0, u - (a - (i + 1))), d = o - (c + l), h = t + (c > 0 ? 0 : i - u);
      let p = 0;
      p += c * this.leftPad.length;
      for (let b = 0; b < d; ++b) p += e[h + b].length;
      p += l * this.rightPad.length;
      const f = c + l + d - 1;
      p += f * this.separator.length, s[r + i] = new Uint8Array(p);
      const m = s[r + i];
      let g = 0;
      const y = (b) => b.forEach((x) => m[g++] = x);
      for (let b = 0; b < c; ++b) y(this.leftPad), y(this.separator);
      for (let b = 0; b < d - 1; ++b) y(e[h + b]), y(this.separator);
      if (d > 0) {
        y(e[h + d - 1]);
        for (let b = 0; b < l; ++b) y(this.separator), y(this.rightPad);
      } else {
        for (let b = 0; b < l - 1; ++b) y(this.rightPad), y(this.separator);
        y(this.rightPad);
      }
    }
  }
  compute(e, t) {
    const s = e.length, r = t.length;
    if (r > 0) {
      let u = t[0];
      if (u !== 0) throw new Error(`First split value must be 0, got ${u}`);
      for (let c = 1; c < r; ++c) {
        let l = t[c] >= u;
        if (l = l && t[c] <= s, !l) throw new Error(`Invalid split value ${t[c]}, must be in [${u}, ${s}]`);
        u = t[c];
      }
      if (u !== s) throw new Error(`Last split value must be data size. Expected ${s}, got ${u}`);
    }
    const a = r - 1, o = Dt("int32", r);
    if (s === 0 || r === 0) {
      const u = new Array(s);
      for (let c = 0; c <= a; ++c) o[c] = 0;
      return [u, o];
    }
    o[0] = 0;
    for (let u = 1; u <= a; ++u) {
      const c = t[u] - t[u - 1];
      let l = 0;
      this.nGramWidths.forEach((d) => {
        l += this.getNumNGrams(c, d);
      }), this.preserveShort && c > 0 && l === 0 && (l = 1), o[u] = o[u - 1] + l;
    }
    const i = new Array(o[a]);
    for (let u = 0; u < a; ++u) {
      const c = t[u];
      let l = o[u];
      if (this.nGramWidths.forEach((d) => {
        const h = t[u + 1] - t[u], p = this.getNumNGrams(h, d);
        this.createNGrams(e, c, i, l, p, d), l += p;
      }), this.preserveShort && l === o[u]) {
        const d = t[u + 1] - t[u];
        if (d === 0) continue;
        const h = d + 2 * this.padWidth;
        this.createNGrams(e, c, i, l, 1, h);
      }
    }
    return [i, o];
  }
}
function Zw(n, e, t, s, r, a, o, i) {
  return new rj(t, s, r, a, o, i).compute(n, e);
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function aj(n, e, t, s) {
  if (!n.length) return;
  if (e.length === 0) {
    for (let a = 0; a < n.length; ++a) s.push(n.subarray(a, a + 1));
    return;
  }
  if (e.length === 1) {
    const a = e[0];
    let o = n.indexOf(a);
    for (; o !== -1; ) {
      const i = n.subarray(0, o);
      (!t || i.length !== 0) && s.push(i), n = n.subarray(o + 1), o = n.indexOf(a);
    }
    (!t || n.length !== 0) && s.push(n);
    return;
  }
  let r = 0;
  for (let a = 0; a < n.length + 1; a++) if (a === n.length || e.indexOf(n[a]) !== -1) {
    const o = n.subarray(r, a);
    (!t || o.length !== 0) && s.push(o), r = a + 1;
  }
}
function Jw(n, e, t) {
  const s = n.length, r = [];
  let a = 0, o = 0;
  const i = new Array(s);
  for (let h = 0; h < s; ++h) {
    const p = r.length;
    aj(n[h], e, t, r);
    const f = r.length - p;
    i[h] = f, a += f, o = Math.max(o, f);
  }
  const u = Dt("int32", a * 2), c = new Array(a), l = [s, o];
  let d = 0;
  for (let h = 0; h < s; ++h) for (let p = 0; p < i[h]; ++p) u[d * 2] = h, u[d * 2 + 1] = p, c[d] = r[d], ++d;
  return [u, c, l];
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function e0(n, e) {
  const t = Dt("int32", n.length);
  for (let s = 0; s < n.length; ++s) t[s] = fI(n[s]).modulo(e).getLowBitsUnsigned();
  return t;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const z2 = Bt((n, e) => n - e), oj = Hw((n, e, t, s) => ({ real: n - t, imag: e - s })), t0 = sn(qo, z2, oj), ij = { kernelName: qo, backendName: "cpu", kernelFunc: t0 };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function M2(n, e) {
  const t = new Array(n.rank);
  for (let r = 0; r < t.length; r++) t[r] = n.shape[r] * e[r];
  const s = Oe(t, n.dtype);
  for (let r = 0; r < s.values.length; ++r) {
    const a = s.indexToLoc(r), o = new Array(n.rank);
    for (let u = 0; u < o.length; u++) o[u] = a[u] % n.shape[u];
    const i = n.locToIndex(o);
    s.values[r] = n.values[i];
  }
  return s;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Wc = (n, e) => {
  const t = e.value - n.value;
  return t === 0 ? n.index - e.index : t;
};
function B2(n, e, t = 0, s = n.length - 1) {
  for (; s > t; ) {
    if (s - t > 600) {
      const i = s - t + 1, u = e - t + 1, c = Math.log(i), l = 0.5 * Math.exp(2 * c / 3), d = 0.5 * Math.sqrt(c * l * (i - l) / i) * Math.sign(u - i / 2), h = Math.max(t, Math.floor(e - u * l / i + d)), p = Math.min(s, Math.floor(e + (i - u) * l / i + d));
      B2(n, e, h, p);
    }
    const r = n[e];
    let a = t, o = s;
    for (Dr(n, t, e), Wc(n[s], r) > 0 && Dr(n, t, s); a < o; ) {
      for (Dr(n, a, o), a++, o--; Wc(n[a], r) < 0; ) a = a + 1;
      for (; Wc(n[o], r) > 0; ) o = o - 1;
    }
    Wc(n[t], r) === 0 ? Dr(n, t, o) : (o = o + 1, Dr(n, o, s)), o <= e && (t = o + 1), e <= o && (s = o - 1);
  }
}
function W2(n, e, t, s, r) {
  const a = e[e.length - 1], [o, i] = [n.length / a, a], u = Ht(t, o * s), c = Ht("int32", o * s);
  for (let d = 0; d < o; d++) {
    const h = d * i, p = n.subarray(h, h + i);
    let f = new Array(p.length);
    p.forEach((b, x) => f[x] = { value: b, index: x }), s < f.length && (B2(f, s), f = f.slice(0, s)), r && f.sort(Wc);
    const m = d * s, g = u.subarray(m, m + s), y = c.subarray(m, m + s);
    for (let b = 0; b < s; b++) g[b] = f[b].value, y[b] = f[b].index;
  }
  const l = e.slice();
  return l[l.length - 1] = s, [Oe(l, t, u), Oe(l, "int32", c)];
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function n0(n, e, t, s) {
  const r = Ee(e, t)[0], a = [1, t[0], 1];
  for (let f = 0; f < r; f++) a[0] *= t[f];
  a[1] = t[r];
  for (let f = r + 1; f < t.length; f++) a[2] *= t[f];
  const o = /* @__PURE__ */ new Map(), i = new Int32Array(t[r]), u = new Gt(a, s, n), c = [], l = a[0] === 1 && a[2] === 1;
  for (let f = 0; f < t[r]; f++) {
    let m;
    if (l) m = n[f].toString();
    else {
      const y = [];
      for (let b = 0; b < a[0]; b++) for (let x = 0; x < a[2]; x++) y.push(u.get(b, f, x));
      m = y.join(",");
    }
    const g = o.get(m);
    if (g != null) i[f] = g;
    else {
      const y = o.size;
      o.set(m, y), i[f] = y, c.push(f);
    }
  }
  const d = a.slice();
  d[1] = o.size;
  const h = new Gt(d, s);
  c.forEach((f, m) => {
    for (let g = 0; g < a[0]; g++) for (let y = 0; y < a[2]; y++) h.set(u.get(g, f, y), g, m, y);
  });
  const p = t.slice();
  return p[r] = d[1], { outputValues: h.values, outputShape: p, indices: i };
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const s0 = Object.freeze(Object.defineProperty({ __proto__: null, addImpl: s2, bincountImpl: jw, bincountReduceImpl: r2, bitwiseAndImpl: a2, castImpl: n2, ceilImpl: o2, concatImpl: qw, equalImpl: i2, expImpl: l2, expm1Impl: d2, floorDivImpl: p2, floorImpl: h2, gatherNdImpl: f2, gatherV2Impl: m2, greaterEqualImpl: y2, greaterImpl: g2, lessEqualImpl: x2, lessImpl: b2, linSpaceImpl: w2, logImpl: C2, maxImpl: I2, maximumImpl: S2, minimumImpl: v2, multiplyImpl: Kw, negImpl: $2, notEqualImpl: k2, prodImpl: N2, raggedGatherImpl: T2, raggedRangeImpl: R2, raggedTensorToTensorImpl: _2, rangeImpl: Yw, rsqrtImpl: E2, scatterImpl: Ci, sigmoidImpl: KH, simpleAbsImpl: t2, sliceImpl: Kp, sparseFillEmptyRowsImpl: A2, sparseReshapeImpl: F2, sparseSegmentReductionImpl: Qw, sqrtImpl: QH, squaredDifferenceImpl: O2, staticRegexReplaceImpl: P2, stridedSliceImpl: L2, stringNGramsImpl: Zw, stringSplitImpl: Jw, stringToHashBucketFastImpl: e0, subImpl: z2, tileImpl: M2, topKImpl: W2, transposeImpl: Xw, uniqueImpl: n0 }, Symbol.toStringTag, { value: "Module" }));
/** @license See the LICENSE file. */
const V2 = "4.22.0";
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Bd("cpu", () => new kh(), 1);
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const U2 = gt(Za, (n) => n >= 0 ? n : Math.exp(n) - 1), uj = { kernelName: Za, backendName: "cpu", kernelFunc: U2 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function G2(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { alpha: a } = s;
  Ie([r], "leakyRelu");
  const o = A(r.shape), i = t.data.get(r.dataId).values, u = Ht("float32", o);
  for (let c = 0; c < i.length; c++) u[c] = i[c] < 0 ? a * i[c] : i[c];
  return t.makeTensorInfo(r.shape, "float32", u);
}
const lj = { kernelName: co, backendName: "cpu", kernelFunc: G2 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const cj = Bt((n, e) => n < 0 ? e * n : n);
function H2(n) {
  const { inputs: e, backend: t } = n, { x: s, alpha: r } = e;
  Ie([s, r], "prelu");
  const a = t.data.get(s.dataId).values, o = t.data.get(r.dataId).values, [i, u] = cj(s.shape, r.shape, a, o, "float32");
  return t.makeTensorInfo(u, "float32", i);
}
const dj = { kernelName: No, backendName: "cpu", kernelFunc: H2 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const j2 = gt(_o, (n) => Math.max(0, n)), hj = { kernelName: _o, backendName: "cpu", kernelFunc: j2 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const q2 = gt(Ao, (n) => Math.min(Math.max(0, n), 6)), pj = { kernelName: Ao, backendName: "cpu", kernelFunc: q2 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Xp(n, e, t, s, r) {
  if (t === "linear") return Cr({ inputs: { x: e }, backend: n });
  if (t === "relu") return j2({ inputs: { x: e }, backend: n });
  if (t === "elu") return U2({ inputs: { x: e }, backend: n });
  if (t === "relu6") return q2({ inputs: { x: e }, backend: n });
  if (t === "prelu") return H2({ inputs: { x: e, alpha: s }, backend: n });
  if (t === "leakyrelu") return G2({ inputs: { x: e }, backend: n, attrs: { alpha: r } });
  if (t === "sigmoid") return D2({ inputs: { x: e }, backend: n });
  throw new Error(`Activation ${t} has not been implemented for the CPU backend.`);
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function vt(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { shape: a } = s, o = A(r.shape), i = Id(a, o), u = A(i);
  $(o === u, () => `The new shape (${i}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`), t.incRef(r.dataId);
  const c = t.data.get(r.dataId);
  if (c.complexTensorInfos != null) {
    const l = c.complexTensorInfos.real, d = c.complexTensorInfos.imag;
    l.shape = i, d.shape = i;
  }
  return { dataId: r.dataId, shape: i, dtype: r.dtype };
}
const fj = { kernelName: Du, backendName: "cpu", kernelFunc: vt };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function K2(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: a } = e, { transposeA: o, transposeB: i } = s;
  Ie([r, a], "matMul");
  const u = r.shape.length, c = a.shape.length, l = o ? r.shape[u - 2] : r.shape[u - 1], d = i ? a.shape[c - 1] : a.shape[c - 2], h = o ? r.shape[u - 1] : r.shape[u - 2], p = i ? a.shape[c - 2] : a.shape[c - 1], f = r.shape.slice(0, -2), m = a.shape.slice(0, -2), g = A(f), y = A(m), x = Re(r.shape.slice(0, -2), a.shape.slice(0, -2)).concat([h, p]);
  $(l === d, () => `Error in matMul: inner shapes (${l}) and (${d}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`);
  const w = o ? [g, l, h] : [g, h, l], C = i ? [y, p, d] : [y, d, p], v = vt({ inputs: { x: r }, backend: t, attrs: { shape: w } }), k = vt({ inputs: { x: a }, backend: t, attrs: { shape: C } }), R = o ? v.shape[1] : v.shape[2], N = o ? v.shape[2] : v.shape[1], T = i ? k.shape[1] : k.shape[2], S = Math.max(g, y), E = t.data.get(v.dataId).values, P = t.data.get(k.dataId).values, M = me(v.shape), L = me(k.shape), [V, q, G] = o ? [M[0], 1, M[1]] : [M[0], M[1], 1], [K, X, Z] = i ? [1, L[1], L[0]] : [L[1], 1, L[0]], ee = N * T, J = Oe([S, N, T], v.dtype), re = J.values, se = t.blockSize;
  for (let pe = 0; pe < S; pe++) {
    const Se = pe % g, ge = pe % y;
    for (let ke = 0; ke < N; ke += se) {
      const Pe = Math.min(ke + se, N);
      for (let ze = 0; ze < T; ze += se) {
        const Xe = Math.min(ze + se, T);
        for (let ut = 0; ut < R; ut += se) {
          const rt = Math.min(ut + se, R);
          for (let et = ke; et < Pe; et++) for (let Le = ze; Le < Xe; Le++) {
            let dt = 0;
            for (let ht = ut; ht < rt; ht++) {
              const Yn = E[Se * V + et * q + ht * G], $t = P[ht * K + Le * X + ge * Z];
              dt += Yn * $t;
            }
            re[pe * ee + (et * T + Le)] += dt;
          }
        }
      }
    }
  }
  return t.disposeIntermediateTensorInfo(v), t.disposeIntermediateTensorInfo(k), t.makeTensorInfo(x, J.dtype, J.values);
}
const mj = { kernelName: Ba, backendName: "cpu", kernelFunc: K2 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function gj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: a, bias: o, preluActivationWeights: i } = e, { transposeA: u, transposeB: c, activation: l, leakyreluAlpha: d } = s;
  let h, p, f;
  const m = [];
  h = K2({ inputs: { a: r, b: a }, attrs: { transposeA: u, transposeB: c }, backend: t }), o && (p = Dl({ inputs: { a: h, b: o }, backend: t }), m.push(h), h = p), l && (f = Xp(t, h, l, i, d), m.push(h), h = f);
  for (const y of m) t.disposeIntermediateTensorInfo(y);
  return h;
}
const yj = { kernelName: ba, backendName: "cpu", kernelFunc: gj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bj = gt(Ea, (n) => Math.acos(n)), xj = { kernelName: Ea, backendName: "cpu", kernelFunc: bj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const wj = gt(Da, (n) => Math.acosh(n)), Cj = { kernelName: Da, backendName: "cpu", kernelFunc: wj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ij(n) {
  const { inputs: e, backend: t } = n, s = e;
  Ie(e, "addN");
  const r = s.map((i) => t.data.get(i.dataId).values), a = Oe(s[0].shape, s[0].dtype), o = a.values;
  for (let i = 0; i < s.length; i++) {
    const u = r[i];
    for (let c = 0; c < o.length; c++) o[c] += u[c];
  }
  return t.makeTensorInfo(a.shape, a.dtype, a.values);
}
const Sj = { kernelName: Aa, backendName: "cpu", kernelFunc: Ij };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function vj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s;
  Ie(r, "all");
  const i = Ee(a, r.shape);
  let u = i;
  const c = ct(u, r.shape.length);
  let l = r;
  c != null && (l = Xn({ inputs: { x: r }, backend: t, attrs: { perm: c } }), u = it(u.length, r.shape.length)), mt("all", u, l.shape.length);
  const [d, h] = xt(l.shape, u), p = A(h), f = un(A(d), l.dtype), m = t.data.get(l.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let x = m[b];
    for (let w = 0; w < p; ++w) {
      const C = m[b + w];
      x = x && C;
    }
    f[y] = x;
  }
  c != null && t.disposeIntermediateTensorInfo(l);
  const g = t.makeTensorInfo(d, l.dtype, f);
  if (o) {
    const y = ft(d, i), b = vt({ inputs: { x: g }, backend: t, attrs: { shape: y } });
    return t.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const $j = { kernelName: Qi, backendName: "cpu", kernelFunc: vj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function kj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s;
  Ie(r, "any");
  const i = Ee(a, r.shape);
  let u = i;
  const c = ct(u, r.shape.length);
  let l = r;
  c != null && (l = Xn({ inputs: { x: r }, backend: t, attrs: { perm: c } }), u = it(u.length, r.shape.length)), mt("any", u, l.shape.length);
  const [d, h] = xt(l.shape, u), p = A(h), f = un(A(d), l.dtype), m = t.data.get(l.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let x = m[b];
    for (let w = 0; w < p; ++w) {
      const C = m[b + w];
      x = x || C;
    }
    f[y] = x;
  }
  c != null && t.disposeIntermediateTensorInfo(l);
  const g = t.makeTensorInfo(d, l.dtype, f);
  if (o) {
    const y = ft(d, i), b = vt({ inputs: { x: g }, backend: t, attrs: { shape: y } });
    return t.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const Nj = { kernelName: Zi, backendName: "cpu", kernelFunc: kj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Tj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a } = s;
  Ie(r, "argMax");
  let o = Ee(a, r.shape);
  const i = ct(o, r.shape.length);
  let u = r;
  const c = [];
  i != null && (u = Xn({ inputs: { x: r }, backend: t, attrs: { perm: i } }), c.push(u), o = it(o.length, u.shape.length)), o = [o[0]], mt("argMax", o, u.shape.length);
  const [l, d] = xt(u.shape, o), h = A(l), p = un(h, "int32"), f = A(d), m = t.data.get(u.dataId).values;
  for (let g = 0; g < p.length; ++g) {
    const y = g * f;
    let b = m[y], x = 0;
    for (let w = 0; w < f; ++w) {
      const C = m[y + w];
      C > b && (b = C, x = w);
    }
    p[g] = x;
  }
  return c.forEach((g) => t.disposeIntermediateTensorInfo(g)), t.makeTensorInfo(l, "int32", p);
}
const Rj = { kernelName: Ji, backendName: "cpu", kernelFunc: Tj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _j(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a } = s;
  Ie(r, "argMin");
  let o = Ee(a, r.shape);
  const i = ct(o, r.shape.length);
  let u = r;
  const c = [];
  i != null && (u = Xn({ inputs: { x: r }, backend: t, attrs: { perm: i } }), c.push(u), o = it(o.length, u.shape.length)), o = [o[0]], mt("argMin", o, u.shape.length);
  const [l, d] = xt(u.shape, o), h = A(l), p = un(h, "int32"), f = A(d), m = t.data.get(u.dataId).values;
  for (let g = 0; g < p.length; ++g) {
    const y = g * f;
    let b = m[y], x = 0;
    for (let w = 0; w < f; ++w) {
      const C = m[y + w];
      C < b && (b = C, x = w);
    }
    p[g] = x;
  }
  return c.forEach((g) => t.disposeIntermediateTensorInfo(g)), t.makeTensorInfo(l, "int32", p);
}
const Ej = { kernelName: eu, backendName: "cpu", kernelFunc: _j };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Dj = gt(Fa, (n) => Math.asin(n)), Aj = { kernelName: Fa, backendName: "cpu", kernelFunc: Dj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Fj = gt(Oa, (n) => Math.asinh(n)), Oj = { kernelName: Oa, backendName: "cpu", kernelFunc: Fj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Pj = gt(Pa, (n) => Math.atan(n)), Lj = { kernelName: Pa, backendName: "cpu", kernelFunc: Pj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const zj = Bt((n, e) => Math.atan2(n, e)), Mj = sn(za, zj), Bj = { kernelName: za, backendName: "cpu", kernelFunc: Mj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Wj = gt(La, (n) => Math.atanh(n)), Vj = { kernelName: La, backendName: "cpu", kernelFunc: Wj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function r0(n, e, t, s, r, a) {
  const o = r.strideHeight, i = r.strideWidth, u = r.dilationHeight, c = r.dilationWidth, l = r.effectiveFilterHeight, d = r.effectiveFilterWidth, h = r.padInfo.top, p = r.padInfo.left, f = a === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, m = Oe(r.outShape, t), g = m.values, y = r.outShape[1] * r.outShape[2] * r.outShape[3], b = r.outShape[2] * r.outShape[3], x = r.outShape[3];
  for (let w = 0; w < r.batchSize; ++w) {
    const C = w * y, v = w * s[0];
    for (let k = 0; k < r.inChannels; ++k) for (let R = 0; R < r.outHeight; ++R) {
      const N = R * o - h, T = Math.max(0, N), S = Math.min(r.inHeight, l + N), E = C + R * b;
      for (let P = 0; P < r.outWidth; ++P) {
        const M = P * i - p, L = Math.max(0, M), V = Math.min(r.inWidth, d + M);
        let q = f, G = 0, K = 0;
        for (let Z = T; Z < S; Z += u) {
          const ee = v + Z * s[1];
          for (let J = L; J < V; J += c) {
            const re = ee + J * s[2], se = n[re + k];
            a === "max" && se > q ? q = se : a === "avg" && (G += se, K++);
          }
          if (isNaN(q)) break;
        }
        const X = E + P * x + k;
        g[X] = a === "avg" ? G / K : q;
      }
    }
  }
  return m;
}
function X2(n, e, t, s, r = false, a = false) {
  const o = Oe(s.outShape, "int32"), i = s.strideHeight, u = s.strideWidth, c = s.dilationHeight, l = s.dilationWidth, d = s.effectiveFilterHeight, h = s.effectiveFilterWidth, p = s.padInfo.top, f = s.padInfo.left, m = Oe(e, t, n);
  for (let g = 0; g < s.batchSize; ++g) for (let y = 0; y < s.inChannels; ++y) for (let b = 0; b < s.outHeight; ++b) {
    const x = b * i - p;
    let w = x;
    for (; w < 0; ) w += c;
    const C = Math.min(s.inHeight, d + x);
    for (let v = 0; v < s.outWidth; ++v) {
      const k = v * u - f;
      let R = k;
      for (; R < 0; ) R += l;
      const N = Math.min(s.inWidth, h + k);
      let T = Number.NEGATIVE_INFINITY, S = -1;
      for (let E = w; E < C; E += c) {
        const P = E - x;
        for (let M = R; M < N; M += l) {
          const L = M - k, V = m.get(g, E, M, y);
          V > T && (T = V, r ? S = a ? ((g * s.inHeight + E) * s.inWidth + M) * s.inChannels + y : (E * s.inWidth + M) * s.inChannels + y : S = P * h + L);
        }
      }
      o.set(S, g, b, v, y);
    }
  }
  return o;
}
function Y2(n, e, t, s, r, a) {
  const o = r.strideDepth, i = r.strideHeight, u = r.strideWidth, c = r.dilationDepth, l = r.dilationHeight, d = r.dilationWidth, h = r.effectiveFilterDepth, p = r.effectiveFilterHeight, f = r.effectiveFilterWidth, m = r.padInfo.front, g = r.padInfo.top, y = r.padInfo.left, b = a === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, x = Oe(r.outShape, t), w = x.values, C = r.outShape[1] * r.outShape[2] * r.outShape[3] * r.outShape[4], v = r.outShape[2] * r.outShape[3] * r.outShape[4], k = r.outShape[3] * r.outShape[4], R = r.outShape[4];
  for (let N = 0; N < r.batchSize; ++N) {
    const T = N * C, S = N * s[0];
    for (let E = 0; E < r.inChannels; ++E) for (let P = 0; P < r.outDepth; ++P) {
      const M = P * o - m;
      let L = M;
      for (; L < 0; ) L += c;
      const V = Math.min(r.inDepth, h + M), q = T + P * v;
      for (let G = 0; G < r.outHeight; ++G) {
        const K = G * i - g;
        let X = K;
        for (; X < 0; ) X += l;
        const Z = Math.min(r.inHeight, p + K), ee = q + G * k;
        for (let J = 0; J < r.outWidth; ++J) {
          const re = J * u - y;
          let se = re;
          for (; se < 0; ) se += d;
          const pe = Math.min(r.inWidth, f + re), Se = ee + J * R;
          let ge = b, ke = 0, Pe = 0;
          for (let Xe = L; Xe < V; Xe += c) {
            const ut = S + Xe * s[1];
            for (let rt = X; rt < Z; rt += l) {
              const et = ut + rt * s[2];
              for (let Le = se; Le < pe; Le += d) {
                const dt = et + Le * s[3], ht = n[dt + E];
                if (a === "max" && ht > ge ? ge = ht : a === "avg" && (ke += ht, Pe++), isNaN(ge)) break;
              }
              if (isNaN(ge)) break;
            }
            if (isNaN(ge)) break;
          }
          const ze = Se + E;
          w[ze] = a === "avg" ? ke / Math.max(Pe, 1) : ge;
        }
      }
    }
  }
  return x;
}
function Uj(n, e) {
  const t = Oe(e.outShape, "int32"), s = e.strideDepth, r = e.strideHeight, a = e.strideWidth, o = e.dilationDepth, i = e.dilationHeight, u = e.dilationWidth, c = e.effectiveFilterDepth, l = e.effectiveFilterHeight, d = e.effectiveFilterWidth, h = e.padInfo.front, p = e.padInfo.top, f = e.padInfo.left;
  for (let m = 0; m < e.batchSize; ++m) for (let g = 0; g < e.inChannels; ++g) for (let y = 0; y < e.outDepth; ++y) {
    const b = y * s - h;
    let x = b;
    for (; x < 0; ) x += o;
    const w = Math.min(e.inDepth, c + b);
    for (let C = 0; C < e.outHeight; ++C) {
      const v = C * r - p;
      let k = v;
      for (; k < 0; ) k += i;
      const R = Math.min(e.inHeight, l + v);
      for (let N = 0; N < e.outWidth; ++N) {
        const T = N * a - f;
        let S = T;
        for (; S < 0; ) S += u;
        const E = Math.min(e.inWidth, d + T);
        let P = Number.NEGATIVE_INFINITY, M = -1;
        for (let L = x; L < w; L += o) {
          const V = L - b;
          for (let q = k; q < R; q += i) {
            const G = q - v;
            for (let K = S; K < E; K += u) {
              const X = K - T, Z = n.get(m, L, q, K, g);
              Z >= P && (P = Z, M = V * l * d + G * l + X);
            }
          }
        }
        t.set(M, m, y, C, N, g);
      }
    }
  }
  return t;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Gj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e;
  Ie(r, "avgPool");
  const { filterSize: a, strides: o, pad: i, dimRoundingMode: u } = s, c = 1;
  $(qt(o, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);
  const l = zt(r.shape, a, o, c, i, u);
  let d;
  if (l.filterWidth === 1 && l.filterHeight === 1 && Be(l.inShape, l.outShape)) d = Cr({ inputs: { x: r }, backend: t });
  else {
    const h = t.data.get(r.dataId).values, p = me(r.shape), f = r0(h, r.shape, r.dtype, p, l, "avg");
    d = t.makeTensorInfo(l.outShape, r.dtype, f.values);
  }
  return d;
}
const Hj = { kernelName: Ma, backendName: "cpu", kernelFunc: Gj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function jj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: a, strides: o, pad: i, dimRoundingMode: u, dataFormat: c } = s;
  Ie(r, "avgPool3d");
  const l = Sn(r.shape, a, o, 1, i, u, c), d = t.data.get(r.dataId).values, h = Y2(d, r.shape, r.dtype, me(r.shape), l, "avg");
  return t.makeTensorInfo(h.shape, "float32", h.values);
}
const qj = { kernelName: tu, backendName: "cpu", kernelFunc: jj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Kj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, { filterSize: o, strides: i, pad: u, dimRoundingMode: c } = s;
  Ie([r, a], "avgPool3DGrad");
  const l = Sn(a.shape, o, i, 1, u, c), d = l.strideDepth, h = l.strideHeight, p = l.strideWidth, f = l.filterDepth, m = l.filterHeight, g = l.filterWidth, y = l.dilationDepth, b = l.dilationHeight, x = l.dilationWidth, w = l.effectiveFilterDepth, C = l.effectiveFilterHeight, v = l.effectiveFilterWidth, k = w - 1 - l.padInfo.front, R = v - 1 - l.padInfo.left, N = C - 1 - l.padInfo.top, T = Oe(a.shape, "float32"), S = 1 / (f * m * g), E = t.bufferSync(r);
  for (let P = 0; P < l.batchSize; ++P) for (let M = 0; M < l.inChannels; ++M) for (let L = 0; L < l.inDepth; ++L) for (let V = 0; V < l.inHeight; ++V) for (let q = 0; q < l.inWidth; ++q) {
    const G = L - k, K = V - N, X = q - R;
    let Z = 0;
    for (let ee = 0; ee < w; ee += y) {
      const J = (G + ee) / d;
      if (!(J < 0 || J >= l.outDepth || Math.floor(J) !== J)) for (let re = 0; re < C; re += b) {
        const se = (K + re) / h;
        if (!(se < 0 || se >= l.outHeight || Math.floor(se) !== se)) for (let pe = 0; pe < v; pe += x) {
          const Se = (X + pe) / p;
          if (Se < 0 || Se >= l.outWidth || Math.floor(Se) !== Se) continue;
          const ge = E.get(P, J, se, Se, M);
          Z += ge;
        }
      }
    }
    T.set(Z * S, P, L, V, q, M);
  }
  return t.makeTensorInfo(T.shape, T.dtype, T.values);
}
const Xj = { kernelName: zl, backendName: "cpu", kernelFunc: Kj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Yj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, o = a;
  Ie([r, a], "avgPoolGrad");
  const { filterSize: i, strides: u, pad: c } = s, l = zt(o.shape, i, u, 1, c), d = l.strideHeight, h = l.strideWidth, p = l.filterHeight, f = l.filterWidth, m = l.dilationHeight, g = l.dilationWidth, y = l.effectiveFilterHeight, b = l.effectiveFilterWidth, x = b - 1 - l.padInfo.left, w = y - 1 - l.padInfo.top, C = Oe(o.shape, "float32"), v = 1 / (p * f), k = t.data.get(r.dataId).values, R = Oe(r.shape, "float32", k);
  for (let N = 0; N < l.batchSize; ++N) for (let T = 0; T < l.inChannels; ++T) for (let S = 0; S < l.inHeight; ++S) for (let E = 0; E < l.inWidth; ++E) {
    const P = S - w, M = E - x;
    let L = 0;
    for (let V = 0; V < y; V += m) {
      const q = (P + V) / d;
      if (!(q < 0 || q >= l.outHeight || Math.floor(q) !== q)) for (let G = 0; G < b; G += g) {
        const K = (M + G) / h;
        if (K < 0 || K >= l.outWidth || Math.floor(K) !== K) continue;
        const X = R.get(N, q, K, T);
        L += X;
      }
    }
    C.set(L * v, N, S, E, T);
  }
  return t.makeTensorInfo(C.shape, C.dtype, C.values);
}
const Qj = { kernelName: Ll, backendName: "cpu", kernelFunc: Yj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Zj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, scale: a, offset: o, mean: i, variance: u } = e;
  $(i.shape.length === u.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), $(o == null || i.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), $(a == null || i.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), Ie([r, i, u, a, o], "batchNorm");
  let { varianceEpsilon: c } = s;
  c == null && (c = 1e-3);
  const l = t.data.get(r.dataId).values, d = t.data.get(i.dataId).values, h = t.data.get(u.dataId).values, p = a ? t.data.get(a.dataId).values : new Float32Array([1]), f = o ? t.data.get(o.dataId).values : new Float32Array([0]), m = new Float32Array(l.length), g = f.length, y = p.length, b = h.length, x = d.length;
  let w = 0, C = 0, v = 0, k = 0;
  for (let R = 0; R < l.length; ++R) m[R] = f[w++] + (l[R] - d[C++]) * p[v++] / Math.sqrt(h[k++] + c), w >= g && (w = 0), C >= x && (C = 0), v >= y && (v = 0), k >= b && (k = 0);
  return t.makeTensorInfo(r.shape, r.dtype, m);
}
const Jj = { kernelName: ro, backendName: "cpu", kernelFunc: Zj };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function eq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: a, crops: o } = s;
  Ie([r], "batchToSpaceND");
  const i = a.reduce((y, b) => y * b), u = Zr(r.shape, a, i), c = Jr(u.length, a.length), l = ea(r.shape, a, i), d = dh(o, a.length), h = hh(l, o, a.length), p = vt({ inputs: { x: r }, backend: t, attrs: { shape: u } }), f = Xn({ inputs: { x: p }, backend: t, attrs: { perm: c } }), m = vt({ inputs: { x: f }, backend: t, attrs: { shape: l } }), g = Ui({ inputs: { x: m }, backend: t, attrs: { begin: d, size: h } });
  return t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(m), g;
}
const tq = { kernelName: nu, backendName: "cpu", kernelFunc: eq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, weights: a } = e, { size: o } = s, i = t.data.get(r.dataId).values, u = t.data.get(a.dataId).values, c = jw(i, u, a.dtype, a.shape, o);
  return t.makeTensorInfo([o], a.dtype, c);
}
const sq = { kernelName: su, backendName: "cpu", kernelFunc: nq };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function rq(n) {
  const { inputs: e, backend: t } = n, { s0: s, s1: r } = e, a = t.data.get(s.dataId).values, o = t.data.get(r.dataId).values, i = Re(Array.from(a), Array.from(o));
  return t.makeTensorInfo([i.length], "int32", Int32Array.from(i));
}
const aq = { kernelName: Bl, backendName: "cpu", kernelFunc: rq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const oq = gt(Gr, (n, e) => {
  const t = e;
  return n > t.clipValueMax ? t.clipValueMax : n < t.clipValueMin ? t.clipValueMin : n;
}), iq = { kernelName: Gr, backendName: "cpu", kernelFunc: oq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const uq = (n) => {
  const { x: e } = n.inputs, t = n.backend, s = new Float32Array(A(e.shape)), r = t.data.get(e.dataId), a = r.complexTensorInfos.real, o = r.complexTensorInfos.imag, i = t.data.get(a.dataId).values, u = t.data.get(o.dataId).values;
  for (let c = 0; c < i.length; c++) {
    const l = i[c], d = u[c];
    s[c] = Math.hypot(l, d);
  }
  return t.makeOutput(s, e.shape, "float32");
}, lq = { kernelName: Wl, backendName: "cpu", kernelFunc: uq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Al(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = t.data.get(s.dataId).complexTensorInfos.imag, a = t.data.get(r.dataId).values;
  return t.makeTensorInfo(r.shape, r.dtype, a);
}
const cq = { kernelName: Ed, backendName: "cpu", kernelFunc: Al };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Fl(n) {
  const { inputs: e, backend: t, attrs: s } = n, { axis: r } = s, a = Ee(r, e[0].shape)[0], o = e.map((m) => m.shape);
  lh(o, a);
  let i = xn(e.map((m) => m.shape), a);
  if (A(i) === 0) return t.makeTensorInfo(i, e[0].dtype, []);
  const u = e.filter((m) => A(m.shape) > 0);
  if (u.length === 1) return Cr({ inputs: { x: u[0] }, backend: t });
  if (u[0].dtype === "complex64") {
    const m = u.map((w) => Vi({ inputs: { input: w }, backend: t })), g = u.map((w) => Al({ inputs: { input: w }, backend: t })), y = Fl({ inputs: m, backend: t, attrs: { axis: a } }), b = Fl({ inputs: g, backend: t, attrs: { axis: a } }), x = ss({ inputs: { real: y, imag: b }, backend: t });
    return m.forEach((w) => t.disposeIntermediateTensorInfo(w)), g.forEach((w) => t.disposeIntermediateTensorInfo(w)), t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(b), x;
  }
  const c = u.map((m) => {
    const y = [-1, A(m.shape.slice(a))];
    return vt({ inputs: { x: m }, backend: t, attrs: { shape: y } });
  }), l = c.map((m) => ({ vals: t.data.get(m.dataId).values, shape: m.shape }));
  i = xn(c.map((m) => m.shape), 1);
  const d = c[0].shape[0] === 1, h = qw(l, i, e[0].dtype, d), p = xn(u.map((m) => m.shape), a), f = t.makeTensorInfo(p, e[0].dtype, h);
  return c.forEach((m) => t.disposeIntermediateTensorInfo(m)), f;
}
const dq = { kernelName: ru, backendName: "cpu", kernelFunc: Fl };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Q2(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dataFormat: u, dilations: c, dimRoundingMode: l } = s;
  Ie([r, a], "conv2d");
  const d = An(u), h = lt(r.shape, a.shape, o, c, i, l, false, d), p = h.filterHeight, f = h.filterWidth, m = h.dilationHeight, g = h.dilationWidth, y = h.padInfo.left, b = h.padInfo.top, x = h.dataFormat === "channelsLast", w = new Gt(h.outShape, r.dtype), C = me(r.shape), v = me(a.shape), k = C[0], R = x ? C[1] : C[2], N = x ? C[2] : 1, T = x ? 1 : C[1], S = w.strides[0], E = x ? w.strides[1] : w.strides[2], P = x ? w.strides[2] : 1, M = x ? 1 : w.strides[1], L = t.data.get(r.dataId).values, V = t.data.get(a.dataId).values, q = w.values;
  for (let G = 0; G < h.batchSize; ++G) {
    const K = G * k, X = G * S;
    for (let Z = 0; Z < h.outHeight; ++Z) {
      const ee = X + Z * E, J = Z * h.strideHeight - b;
      for (let re = 0; re < p; ++re) {
        const se = J + re * m;
        if (se < 0 || se >= h.inHeight) continue;
        const pe = re * v[0], Se = K + se * R;
        for (let ge = 0; ge < h.outWidth; ++ge) {
          const ke = ee + ge * P, Pe = ge * h.strideWidth - y;
          for (let ze = 0; ze < f; ++ze) {
            const Xe = Pe + ze * g;
            if (Xe < 0 || Xe >= h.inWidth) continue;
            const ut = pe + ze * v[1], rt = Se + Xe * N;
            let et = ut;
            for (let Le = 0; Le < h.inChannels; ++Le) {
              const dt = L[rt + Le * T];
              for (let ht = 0; ht < h.outChannels; ++ht) q[ke + ht * M] += dt * V[et + ht];
              et += h.outChannels;
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo(w.shape, w.dtype, q);
}
const hq = { kernelName: Ua, backendName: "cpu", kernelFunc: Q2 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function pq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: a } = e, { strides: o, pad: i, dataFormat: u, dimRoundingMode: c, filterShape: l } = s;
  Ie([r, a], "conv2dBackpropFilter");
  const d = An(u), h = lt(r.shape, l, o, 1, i, c, false, d), { strideHeight: p, strideWidth: f, filterHeight: m, filterWidth: g } = h, y = h.dataFormat === "channelsLast", b = new Gt(h.filterShape, "float32"), x = h.padInfo.left, w = h.padInfo.top, C = t.data.get(r.dataId).values, v = t.data.get(a.dataId).values, k = new Gt(r.shape, r.dtype, C), R = new Gt(a.shape, a.dtype, v);
  for (let N = 0; N < m; ++N) {
    const T = Math.max(0, Math.ceil((w - N) / p)), S = Math.min(h.outHeight, (h.inHeight + w - N) / p);
    for (let E = 0; E < g; ++E) {
      const P = Math.max(0, Math.ceil((x - E) / f)), M = Math.min(h.outWidth, (h.inWidth + x - E) / f);
      for (let L = 0; L < h.inChannels; ++L) for (let V = 0; V < h.outChannels; ++V) {
        let q = 0;
        for (let G = 0; G < h.batchSize; ++G) for (let K = T; K < S; ++K) {
          const X = N + K * p - w;
          for (let Z = P; Z < M; ++Z) {
            const ee = E + Z * f - x;
            y ? q += k.get(G, X, ee, L) * R.get(G, K, Z, V) : q += k.get(G, L, X, ee) * R.get(G, V, K, Z);
          }
        }
        b.set(q, N, E, L, V);
      }
    }
  }
  return t.makeTensorInfo(b.shape, b.dtype, b.values);
}
const fq = { kernelName: vd, backendName: "cpu", kernelFunc: pq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function mq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: a } = e, { inputShape: o, strides: i, pad: u, dataFormat: c, dimRoundingMode: l } = s;
  Ie([r, a], "conv2dBackpropInput");
  const d = me(a.shape), h = me(r.shape);
  let p = An(c);
  const f = lt(o, a.shape, i, 1, u, l, false, p), m = new Gt(f.inShape, "float32"), g = m.values, y = t.data.get(r.dataId).values, b = t.data.get(a.dataId).values, [x, w, C] = d, { batchSize: v, filterHeight: k, filterWidth: R, inChannels: N, inHeight: T, inWidth: S, outChannels: E, outHeight: P, outWidth: M, strideHeight: L, strideWidth: V } = f;
  p = f.dataFormat;
  const q = k - 1 - f.padInfo.top, G = R - 1 - f.padInfo.left, K = p === "channelsLast", X = m.strides[0], Z = K ? m.strides[1] : m.strides[2], ee = K ? m.strides[2] : 1, J = K ? 1 : m.strides[1], re = h[0], se = K ? h[1] : h[2], pe = K ? h[2] : 1, Se = K ? 1 : h[1];
  for (let ge = 0; ge < v; ++ge) for (let ke = 0; ke < N; ++ke) for (let Pe = 0; Pe < T; ++Pe) {
    const ze = Pe - q, Xe = Math.max(0, Math.ceil(ze / L)), ut = Math.min(P, (k + ze) / L);
    for (let rt = 0; rt < S; ++rt) {
      const et = rt - G, Le = Math.max(0, Math.ceil(et / V)), dt = Math.min(M, (R + et) / V);
      let ht = 0;
      for (let $t = Xe; $t < ut; ++$t) {
        const Qn = $t * L - ze;
        for (let hn = Le; hn < dt; ++hn) {
          const Ns = hn * V - et, Ln = re * ge + se * $t + pe * hn, hs = x * (k - 1 - Qn) + w * (R - 1 - Ns) + C * ke;
          for (let Ts = 0; Ts < E; ++Ts) {
            const pn = y[Ln + Se * Ts], kn = b[hs + Ts];
            ht += pn * kn;
          }
        }
      }
      const Yn = X * ge + Z * Pe + ee * rt + J * ke;
      g[Yn] = ht;
    }
  }
  return t.makeTensorInfo(m.shape, m.dtype, m.values);
}
const gq = { kernelName: Ga, backendName: "cpu", kernelFunc: mq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function yq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dilations: u } = s;
  Ie([r, a], "conv3d");
  const c = cs(r.shape, a.shape, o, u, i), { filterDepth: l, filterHeight: d, filterWidth: h, dilationDepth: p, dilationHeight: f, dilationWidth: m, padInfo: g } = c, y = g.front, b = g.left, x = g.top, w = new Gt(c.outShape, r.dtype), C = t.data.get(r.dataId).values, v = t.data.get(a.dataId).values, k = w.values, R = me(r.shape), N = me(a.shape);
  for (let T = 0; T < c.batchSize; ++T) {
    const S = T * R[0], E = T * w.strides[0];
    for (let P = 0; P < c.outDepth; ++P) {
      const M = E + P * w.strides[1], L = P * c.strideDepth - y;
      for (let V = 0; V < l; ++V) {
        const q = L + V * p;
        if (q < 0 || q >= c.inDepth) continue;
        const G = V * N[0], K = S + q * R[1];
        for (let X = 0; X < c.outHeight; ++X) {
          const Z = M + X * w.strides[2], ee = X * c.strideHeight - x;
          for (let J = 0; J < d; ++J) {
            const re = ee + J * f;
            if (re < 0 || re >= c.inHeight) continue;
            const se = G + J * N[1], pe = K + re * R[2];
            for (let Se = 0; Se < c.outWidth; ++Se) {
              const ge = Z + Se * c.outChannels, ke = Se * c.strideWidth - b;
              for (let Pe = 0; Pe < h; ++Pe) {
                const ze = ke + Pe * m;
                if (ze < 0 || ze >= c.inWidth) continue;
                const Xe = se + Pe * N[2], ut = pe + ze * c.inChannels;
                let rt = Xe;
                for (let et = 0; et < c.inChannels; ++et) {
                  const Le = C[ut + et];
                  for (let dt = 0; dt < c.outChannels; ++dt) k[ge + dt] += Le * v[rt + dt];
                  rt += c.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo(w.shape, w.dtype, w.values);
}
const bq = { kernelName: Ha, backendName: "cpu", kernelFunc: yq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function xq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: a } = e, { strides: o, pad: i, filterShape: u } = s;
  Ie([r, a], "conv3dBackpropFilterV2");
  const c = me(r.shape), l = me(a.shape), d = cs(r.shape, u, o, 1, i), h = d.strideDepth, p = d.strideHeight, f = d.strideWidth, m = d.filterDepth, g = d.filterHeight, y = d.filterWidth, b = new Gt(d.filterShape, "float32"), x = b.values, [w, C, v, k] = b.strides, R = t.data.get(a.dataId).values, [N, T, S, E] = l, P = t.data.get(r.dataId).values, [M, L, V, q] = c, G = d.padInfo.front, K = d.padInfo.left, X = d.padInfo.top;
  for (let Z = 0; Z < m; ++Z) {
    const ee = Math.max(0, Math.ceil((G - Z) / h)), J = Math.min(d.outDepth, (d.inDepth + G - Z) / h), re = Z * w;
    for (let se = 0; se < g; ++se) {
      const pe = Math.max(0, Math.ceil((X - se) / p)), Se = Math.min(d.outHeight, (d.inHeight + X - se) / p), ge = se * C + re;
      for (let ke = 0; ke < y; ++ke) {
        const Pe = Math.max(0, Math.ceil((K - ke) / f)), ze = Math.min(d.outWidth, (d.inWidth + K - ke) / f), Xe = ke * v + ge;
        for (let ut = 0; ut < d.inChannels; ++ut) {
          const rt = ut * k + Xe;
          for (let et = 0; et < d.outChannels; ++et) {
            let Le = 0;
            for (let dt = 0; dt < d.batchSize; ++dt) {
              const ht = dt * M, Yn = dt * N;
              for (let $t = ee; $t < J; ++$t) {
                const hn = (Z + $t * h - G) * L + ht, Ns = $t * T + Yn;
                for (let Ln = pe; Ln < Se; ++Ln) {
                  const Ts = (se + Ln * p - X) * V + hn, pn = Ln * S + Ns;
                  for (let kn = Pe; kn < ze; ++kn) {
                    const oi = (ke + kn * f - K) * q + Ts, Bs = kn * E + pn;
                    Le += P[oi + ut] * R[Bs + et];
                  }
                }
              }
            }
            x[rt + et] = Le;
          }
        }
      }
    }
  }
  return t.makeTensorInfo(b.shape, b.dtype, b.values);
}
const wq = { kernelName: au, backendName: "cpu", kernelFunc: xq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Cq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: a } = e, { pad: o, strides: i, inputShape: u } = s;
  Ie([r], "conv3dBackpropInputV2");
  const c = me(r.shape), l = me(a.shape), d = cs(u, a.shape, i, 1, o), h = new Gt(d.inShape, "float32"), p = h.values, [f, m, g, y] = h.strides, b = t.data.get(r.dataId).values, [x, w, C, v] = c, k = t.data.get(a.dataId).values, [R, N, T, S] = l, { batchSize: E, filterDepth: P, filterHeight: M, filterWidth: L, inChannels: V, inDepth: q, inHeight: G, inWidth: K, outChannels: X, outDepth: Z, outHeight: ee, outWidth: J, strideDepth: re, strideHeight: se, strideWidth: pe } = d, Se = P - 1 - d.padInfo.front, ge = M - 1 - d.padInfo.top, ke = L - 1 - d.padInfo.left;
  for (let Pe = 0; Pe < E; ++Pe) for (let ze = 0; ze < V; ++ze) for (let Xe = 0; Xe < q; ++Xe) {
    const ut = Xe - Se, rt = Math.max(0, Math.ceil(ut / re)), et = Math.min(Z, (P + ut) / re);
    for (let Le = 0; Le < G; ++Le) {
      const dt = Le - ge, ht = Math.max(0, Math.ceil(dt / se)), Yn = Math.min(ee, (M + dt) / se);
      for (let $t = 0; $t < K; ++$t) {
        const Qn = $t - ke, hn = Math.max(0, Math.ceil(Qn / pe)), Ns = Math.min(J, (L + Qn) / pe);
        let Ln = 0;
        for (let hs = rt; hs < et; ++hs) {
          const Ts = hs * re - ut;
          for (let pn = ht; pn < Yn; ++pn) {
            const kn = pn * se - dt;
            for (let $r = hn; $r < Ns; ++$r) {
              const oi = $r * pe - Qn, Bs = x * Pe + w * hs + C * pn + v * $r, _c = R * (P - 1 - Ts) + N * (M - 1 - kn) + T * (L - 1 - oi) + S * ze;
              for (let ur = 0; ur < X; ++ur) {
                const sa = b[Bs + ur], fn = k[_c + ur];
                Ln += sa * fn;
              }
            }
          }
        }
        p[f * Pe + m * Xe + g * Le + y * $t + ze] = Ln;
      }
    }
  }
  return t.makeTensorInfo(h.shape, h.dtype, h.values);
}
const Iq = { kernelName: ou, backendName: "cpu", kernelFunc: Cq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Sq = gt(ja, (n) => Math.cos(n)), vq = { kernelName: ja, backendName: "cpu", kernelFunc: Sq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $q = gt(qa, (n) => Math.cosh(n)), kq = { kernelName: qa, backendName: "cpu", kernelFunc: $q };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Nq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { image: r, boxes: a, boxInd: o } = e, { cropSize: i, method: u, extrapolationValue: c } = s, [l, d, h, p] = r.shape, f = a.shape[0], [m, g] = i, y = Oe([f, m, g, p], "float32"), b = t.data.get(a.dataId).values, x = t.data.get(o.dataId).values, w = t.data.get(r.dataId).values, C = me(r.shape), v = me(y.shape);
  for (let k = 0; k < f; k++) {
    const R = k * 4, N = b[R], T = b[R + 1], S = b[R + 2], E = b[R + 3], P = x[k];
    if (P >= l) continue;
    const M = m > 1 ? (S - N) * (d - 1) / (m - 1) : 0, L = g > 1 ? (E - T) * (h - 1) / (g - 1) : 0;
    for (let V = 0; V < m; V++) {
      const q = m > 1 ? N * (d - 1) + V * M : 0.5 * (N + S) * (d - 1);
      if (q < 0 || q > d - 1) {
        for (let G = 0; G < g; G++) for (let K = 0; K < p; K++) {
          const X = K + G * v[2] + V * v[1] + k * v[0];
          y.values[X] = c;
        }
        continue;
      }
      if (u === "bilinear") {
        const G = Math.floor(q), K = Math.ceil(q), X = q - G;
        for (let Z = 0; Z < g; Z++) {
          const ee = g > 1 ? T * (h - 1) + Z * L : 0.5 * (T + E) * (h - 1);
          if (ee < 0 || ee > h - 1) {
            for (let pe = 0; pe < p; pe++) {
              const Se = pe + Z * v[2] + V * v[1] + k * v[0];
              y.values[Se] = c;
            }
            continue;
          }
          const J = Math.floor(ee), re = Math.ceil(ee), se = ee - J;
          for (let pe = 0; pe < p; pe++) {
            let Se = pe + J * C[2] + G * C[1] + P * C[0];
            const ge = w[Se];
            Se = pe + re * C[2] + G * C[1] + P * C[0];
            const ke = w[Se];
            Se = pe + J * C[2] + K * C[1] + P * C[0];
            const Pe = w[Se];
            Se = pe + re * C[2] + K * C[1] + P * C[0];
            const ze = w[Se], Xe = ge + (ke - ge) * se, ut = Pe + (ze - Pe) * se;
            Se = pe + Z * v[2] + V * v[1] + k * v[0], y.values[Se] = Xe + (ut - Xe) * X;
          }
        }
      } else for (let G = 0; G < g; ++G) {
        const K = g > 1 ? T * (h - 1) + G * L : 0.5 * (T + E) * (h - 1);
        if (K < 0 || K > h - 1) {
          for (let ee = 0; ee < p; ee++) {
            const J = ee + G * v[2] + V * v[1] + k * v[0];
            y.values[J] = c;
          }
          continue;
        }
        const X = Math.round(K), Z = Math.round(q);
        for (let ee = 0; ee < p; ee++) {
          const J = ee + X * C[2] + Z * C[1] + P * C[0], re = ee + G * v[2] + V * v[1] + k * v[0];
          y.values[re] = w[J];
        }
      }
    }
  }
  return t.makeTensorInfo(y.shape, y.dtype, y.values);
}
const Tq = { kernelName: uu, backendName: "cpu", kernelFunc: Nq };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Rq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, exclusive: o, reverse: i } = s;
  Ie(r, "cumprod");
  const u = ct([a], r.shape.length);
  let c = r;
  u != null && (c = Xn({ inputs: { x: r }, backend: t, attrs: { perm: u } }));
  const l = it(1, r.shape.length)[0];
  if (l !== c.shape.length - 1) throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${l}`);
  const d = tn(c.dtype, "int32"), h = uf(A(c.shape), d), p = t.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = i ? (y, b) => y + f - b - 1 : (y, b) => y + b;
  for (let y = 0; y < p.length; y += f) for (let b = 0; b < f; b++) {
    const x = m(y, b);
    if (b === 0) h[x] = o ? 1 : p[x];
    else {
      const w = m(y, b - 1);
      h[x] = o ? p[w] * h[w] : p[x] * h[w];
    }
  }
  const g = t.makeTensorInfo(c.shape, d, h);
  if (u != null) {
    const y = Ls(u), b = Xn({ inputs: { x: g }, backend: t, attrs: { perm: y } });
    return t.disposeIntermediateTensorInfo(g), t.disposeIntermediateTensorInfo(c), b;
  }
  return g;
}
const _q = { kernelName: iu, backendName: "cpu", kernelFunc: Rq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Eq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, exclusive: o, reverse: i } = s;
  Ie(r, "cumsum");
  const u = ct([a], r.shape.length);
  let c = r;
  u != null && (c = Xn({ inputs: { x: r }, backend: t, attrs: { perm: u } }));
  const l = it(1, r.shape.length)[0];
  if (l !== c.shape.length - 1) throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${l}`);
  const d = tn(c.dtype, "int32"), h = un(A(c.shape), d), p = t.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = i ? (y, b) => y + f - b - 1 : (y, b) => y + b;
  for (let y = 0; y < p.length; y += f) for (let b = 0; b < f; b++) {
    const x = m(y, b);
    if (b === 0) h[x] = o ? 0 : p[x];
    else {
      const w = m(y, b - 1);
      h[x] = o ? p[w] + h[w] : p[x] + h[w];
    }
  }
  const g = t.makeTensorInfo(c.shape, d, h);
  if (u != null) {
    const y = Ls(u), b = Xn({ inputs: { x: g }, backend: t, attrs: { perm: y } });
    return t.disposeIntermediateTensorInfo(g), t.disposeIntermediateTensorInfo(c), b;
  }
  return g;
}
const Dq = { kernelName: Ka, backendName: "cpu", kernelFunc: Eq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Aq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, weights: a } = e, { size: o, binaryOutput: i } = s;
  if (r.shape.length === 1) {
    const u = t.data.get(r.dataId).values, c = t.data.get(a.dataId).values, l = jw(u, c, a.dtype, a.shape, o);
    return t.makeTensorInfo([o], a.dtype, l);
  } else if (r.shape.length === 2) {
    const u = t.bufferSync(r), c = t.bufferSync(a), l = r2(u, c, o, i);
    return t.makeTensorInfo(l.shape, a.dtype, l.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
const Fq = { kernelName: Vl, backendName: "cpu", kernelFunc: Aq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Oq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockSize: a, dataFormat: o } = s;
  $(o === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`);
  const i = r.shape[0], u = r.shape[1], c = r.shape[2], l = r.shape[3], d = u * a, h = c * a, p = l / (a * a), f = t.data.get(r.dataId).values, m = new Float32Array(i * d * h * p);
  let g = 0;
  for (let y = 0; y < i; ++y) for (let b = 0; b < d; ++b) {
    const x = Math.floor(b / a), w = b % a;
    for (let C = 0; C < h; ++C) {
      const v = Math.floor(C / a), k = C % a, R = (w * a + k) * p;
      for (let N = 0; N < p; ++N) {
        const S = N + R + l * (v + c * (x + u * y));
        m[g++] = f[S];
      }
    }
  }
  return t.makeTensorInfo([i, d, h, p], r.dtype, m);
}
const Pq = { kernelName: lu, backendName: "cpu", kernelFunc: Oq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Z2(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dilations: u, dimRoundingMode: c } = s;
  Ie([r, a], "depthwiseConv2DNative");
  const l = me(r.shape), d = me(a.shape);
  let h = u;
  h == null && (h = [1, 1]), $(qt(o, h), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`);
  const p = lt(r.shape, a.shape, o, h, i, c, true), { filterHeight: f, filterWidth: m, dilationHeight: g, dilationWidth: y, padInfo: b } = p, x = b.left, w = b.top, C = p.outChannels / p.inChannels, v = new Gt(p.outShape, r.dtype), k = t.data.get(r.dataId).values, R = t.data.get(a.dataId).values, N = v.values;
  for (let T = 0; T < p.batchSize; ++T) {
    const S = T * l[0], E = T * v.strides[0];
    for (let P = 0; P < p.outHeight; ++P) {
      const M = E + P * v.strides[1], L = P * p.strideHeight - w;
      for (let V = 0; V < f; ++V) {
        const q = L + V * g;
        if (q < 0 || q >= p.inHeight) continue;
        const G = V * d[0], K = S + q * l[1];
        for (let X = 0; X < p.outWidth; ++X) {
          const Z = M + X * v.strides[2], ee = X * p.strideWidth - x;
          for (let J = 0; J < m; ++J) {
            const re = ee + J * y;
            if (re < 0 || re >= p.inWidth) continue;
            const se = G + J * d[1], pe = K + re * p.inChannels;
            let Se = Z, ge = se;
            for (let ke = 0; ke < p.inChannels; ++ke) {
              const Pe = k[pe + ke];
              for (let ze = 0; ze < C; ++ze) N[Se + ze] += Pe * R[ge + ze];
              Se += C, ge += C;
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo(v.shape, v.dtype, v.values);
}
const Lq = { kernelName: Xa, backendName: "cpu", kernelFunc: Z2 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function zq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: a } = e, { strides: o, dilations: i, pad: u, dimRoundingMode: c, filterShape: l } = s;
  Ie([r, a], "depthwiseConv2dNativeBackpropFilter");
  const d = lt(r.shape, l, o, i, u, c, true), { strideHeight: h, strideWidth: p, filterHeight: f, filterWidth: m } = d, g = new Gt(d.filterShape, "float32"), y = d.padInfo.left, b = d.padInfo.top, x = d.outChannels / d.inChannels, w = t.data.get(r.dataId).values, C = new Gt(r.shape, r.dtype, w), v = t.data.get(a.dataId).values, k = new Gt(a.shape, a.dtype, v);
  for (let R = 0; R < f; ++R) {
    const N = Math.max(0, Math.ceil((b - R) / h)), T = Math.min(d.outHeight, (d.inHeight + b - R) / h);
    for (let S = 0; S < m; ++S) {
      const E = Math.max(0, Math.ceil((y - S) / p)), P = Math.min(d.outWidth, (d.inWidth + y - S) / p);
      for (let M = 0; M < d.outChannels; ++M) {
        const L = Math.trunc(M / x), V = M % x;
        let q = 0;
        for (let G = 0; G < d.batchSize; ++G) for (let K = N; K < T; ++K) {
          const X = R + K * h - b;
          for (let Z = E; Z < P; ++Z) {
            const ee = S + Z * p - y;
            q += C.get(G, X, ee, L) * k.get(G, K, Z, M);
          }
        }
        g.set(q, R, S, L, V);
      }
    }
  }
  return t.makeTensorInfo(g.shape, g.dtype, g.values);
}
const Mq = { kernelName: $d, backendName: "cpu", kernelFunc: zq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Bq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: a } = e, { strides: o, dilations: i, pad: u, dimRoundingMode: c, inputShape: l } = s;
  Ie([r, a], "depthwiseConv2DNativeBackpropInput");
  const d = me(r.shape), h = me(a.shape), p = lt(l, a.shape, o, i, u, c, true), f = new Gt(p.inShape, "float32"), m = f.values, [g, y, b] = f.strides, x = t.data.get(r.dataId).values, [w, C, v] = d, k = t.data.get(a.dataId).values, [R, N, T] = h, { batchSize: S, filterHeight: E, filterWidth: P, inChannels: M, inHeight: L, inWidth: V, outChannels: q, outHeight: G, outWidth: K, strideHeight: X, strideWidth: Z } = p, ee = E - 1 - p.padInfo.top, J = P - 1 - p.padInfo.left, re = q / M;
  for (let se = 0; se < S; ++se) for (let pe = 0; pe < M; ++pe) for (let Se = 0; Se < L; ++Se) {
    const ge = Se - ee, ke = Math.max(0, Math.ceil(ge / X)), Pe = Math.min(G, (E + ge) / X);
    for (let ze = 0; ze < V; ++ze) {
      const Xe = ze - J, ut = Math.max(0, Math.ceil(Xe / Z)), rt = Math.min(K, (P + Xe) / Z);
      let et = 0;
      for (let Le = ke; Le < Pe; ++Le) {
        const dt = Le * X - ge;
        for (let ht = ut; ht < rt; ++ht) {
          const Yn = ht * Z - Xe, $t = w * se + C * Le + v * ht, Qn = R * (E - 1 - dt) + N * (P - 1 - Yn) + T * pe;
          for (let hn = 0; hn < re; ++hn) {
            const Ns = pe * re + hn, Ln = x[$t + Ns], hs = k[Qn + hn];
            et += Ln * hs;
          }
        }
      }
      m[g * se + y * Se + b * ze + pe] = et;
    }
  }
  return t.makeTensorInfo(f.shape, f.dtype, f.values);
}
const Wq = { kernelName: kd, backendName: "cpu", kernelFunc: Bq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Vq(n) {
  const { inputs: e, backend: t } = n, { x: s } = e, r = A(s.shape), a = t.data.get(s.dataId).values, o = Oe([r, r], s.dtype), i = o.values;
  for (let c = 0; c < a.length; c++) i[c * r + c] = a[c];
  const u = [...s.shape, ...s.shape];
  return t.makeTensorInfo(u, o.dtype, o.values);
}
const Uq = { kernelName: Ul, backendName: "cpu", kernelFunc: Vq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Gq = { kernelName: Ya, backendName: "cpu", kernelFunc: ({ inputs: n, backend: e, attrs: t }) => {
  const { x: s, filter: r } = n, { strides: a, pad: o, dilations: i } = t, u = e, c = u.data.get(s.dataId).values, l = s.shape.length, d = u.data.get(r.dataId).values, h = r.shape.length, { batchSize: p, inHeight: f, inWidth: m, inChannels: g, outHeight: y, outWidth: b, padInfo: x, strideHeight: w, strideWidth: C, filterHeight: v, filterWidth: k, dilationHeight: R, dilationWidth: N, outShape: T } = rr(s.shape, r.shape, a, o, "NHWC", i), S = A(T), E = T.length, P = Dt(s.dtype, S);
  for (let L = 0; L < p; ++L) for (let V = 0; V < y; ++V) {
    const q = V * w - x.top;
    for (let G = 0; G < b; ++G) {
      const K = G * C - x.left;
      for (let X = 0; X < g; ++X) {
        let Z = Number.MIN_SAFE_INTEGER;
        for (let J = 0; J < v; ++J) {
          const re = q + J * R;
          if (re >= 0 && re < f) for (let se = 0; se < k; ++se) {
            const pe = K + se * N;
            if (pe >= 0 && pe < m) {
              const Se = js([L, re, pe, X], l, me(s.shape)), ge = js([J, se, X], h, me(r.shape)), ke = c[Se] + d[ge];
              ke > Z && (Z = ke);
            }
          }
        }
        const ee = js([L, V, G, X], E, me(T));
        P[ee] = Z;
      }
    }
  }
  return { dataId: u.write(Yo(P, s.dtype), T, s.dtype), shape: T, dtype: s.dtype };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Hq = { kernelName: _i, backendName: "cpu", kernelFunc: ({ inputs: n, backend: e, attrs: t }) => {
  const { x: s, filter: r, dy: a } = n, { strides: o, pad: i, dilations: u } = t, c = e, l = Cs(s.shape, c.data.get(s.dataId).values), d = Cs(r.shape, c.data.get(r.dataId).values), { batchSize: h, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: y, padInfo: b, strideHeight: x, strideWidth: w, filterHeight: C, filterWidth: v, dilationHeight: k, dilationWidth: R, outShape: N } = rr(s.shape, r.shape, o, i, "NHWC", u);
  $(a.rank === N.length, () => `Error in ${_i}, dy must have the same rank as output ${N.length}, but got ${a.rank}`);
  const T = Cs(N, c.data.get(a.dataId).values), S = wy(r.shape, r.dtype);
  for (let P = 0; P < h; ++P) for (let M = 0; M < g; ++M) {
    const L = M * x - b.top;
    for (let V = 0; V < y; ++V) {
      const q = V * w - b.left;
      for (let G = 0; G < m; ++G) {
        let K = Number.MIN_SAFE_INTEGER, X = 0, Z = 0;
        for (let ee = 0; ee < C; ++ee) {
          const J = L + ee * k;
          if (J >= 0 && J < p) for (let re = 0; re < v; ++re) {
            const se = q + re * R;
            if (se >= 0 && se < f) {
              const pe = l[P][J][se][G] + d[ee][re][G];
              pe > K && (K = pe, X = ee, Z = re);
            }
          }
        }
        S[X][Z][G] += T[P][M][V][G];
      }
    }
  }
  return { dataId: c.write(Yo(S, s.dtype), r.shape, r.dtype), shape: r.shape, dtype: r.dtype };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const jq = { kernelName: Ri, backendName: "cpu", kernelFunc: ({ inputs: n, backend: e, attrs: t }) => {
  const { x: s, filter: r, dy: a } = n, { strides: o, pad: i, dilations: u } = t, c = e, l = Cs(s.shape, c.data.get(s.dataId).values), d = Cs(r.shape, c.data.get(r.dataId).values), { batchSize: h, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: y, padInfo: b, strideHeight: x, strideWidth: w, filterHeight: C, filterWidth: v, dilationHeight: k, dilationWidth: R, outShape: N } = rr(s.shape, r.shape, o, i, "NHWC", u);
  $(a.rank === N.length, () => `Error in ${Ri}, dy must have the same rank as output ${N.length}, but got ${a.rank}`);
  const T = Cs(N, c.data.get(a.dataId).values), S = wy(s.shape, s.dtype);
  for (let P = 0; P < h; ++P) for (let M = 0; M < g; ++M) {
    const L = M * x - b.top;
    for (let V = 0; V < y; ++V) {
      const q = V * w - b.left;
      for (let G = 0; G < m; ++G) {
        let K = Number.MIN_SAFE_INTEGER, X = L < 0 ? 0 : L, Z = q < 0 ? 0 : q;
        for (let ee = 0; ee < C; ++ee) {
          const J = L + ee * k;
          if (J >= 0 && J < p) for (let re = 0; re < v; ++re) {
            const se = q + re * R;
            if (se >= 0 && se < f) {
              const pe = l[P][J][se][G] + d[ee][re][G];
              pe > K && (K = pe, X = J, Z = se);
            }
          }
        }
        S[P][X][Z][G] += T[P][M][V][G];
      }
    }
  }
  return { dataId: c.write(Yo(S, s.dtype), s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
} };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function qq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { image: r } = e, { canvas: a, options: o } = s, { contextOptions: i, imageOptions: u } = o || {}, c = (u == null ? void 0 : u.alpha) || 1, l = (i == null ? void 0 : i.contextType) || "2d";
  if (l !== "2d") throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);
  const d = a.getContext(l, (i == null ? void 0 : i.contextAttributes) || {});
  if (d == null) throw new Error(`Could not get the context with ${l} type.`);
  const [h, p] = r.shape.slice(0, 2), f = r.shape.length === 2 ? 1 : r.shape[2], m = t.data.get(r.dataId).values, g = r.dtype === "float32" ? 255 : 1, y = new Uint8ClampedArray(p * h * 4);
  for (let x = 0; x < h * p; ++x) {
    const w = [0, 0, 0, 255 * c];
    for (let v = 0; v < f; v++) {
      const k = m[x * f + v];
      if (r.dtype === "float32") {
        if (k < 0 || k > 1) throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${k}.`);
      } else if (r.dtype === "int32" && (k < 0 || k > 255)) throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${k}.`);
      f === 1 ? (w[0] = k * g, w[1] = k * g, w[2] = k * g) : w[v] = k * g;
    }
    const C = x * 4;
    y[C + 0] = Math.round(w[0]), y[C + 1] = Math.round(w[1]), y[C + 2] = Math.round(w[2]), y[C + 3] = Math.round(w[3]);
  }
  a.width = p, a.height = h;
  const b = new ImageData(y, p, h);
  return d.putImageData(b, 0, 0), r;
}
const Kq = { kernelName: Nd, backendName: "cpu", kernelFunc: qq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Nh(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s;
  Ie(r, "sum");
  let i;
  r.dtype === "bool" ? i = Ra({ inputs: { x: r }, backend: t, attrs: { dtype: "int32" } }) : i = Cr({ inputs: { x: r }, backend: t });
  const u = i.shape.length, c = Ee(a, i.shape), l = ct(c, u);
  let d = c, h = i;
  l != null && (h = Xn({ inputs: { x: i }, backend: t, attrs: { perm: l } }), d = it(d.length, u)), mt("sum", d, h.shape.length);
  const [p, f] = xt(h.shape, d), m = tn(h.dtype, "int32");
  let g = jp(t, p, m);
  const y = A(f), b = t.data.get(g.dataId).values, x = t.data.get(h.dataId).values;
  for (let w = 0; w < b.length; ++w) {
    const C = w * y;
    let v = 0;
    for (let k = 0; k < y; ++k) v += x[C + k];
    b[w] = v;
  }
  if (o) {
    const w = ft(g.shape, c), C = g;
    g = vt({ inputs: { x: g }, backend: t, attrs: { shape: w } }), t.disposeIntermediateTensorInfo(C);
  }
  return t.disposeIntermediateTensorInfo(i), l != null && t.disposeIntermediateTensorInfo(h), g;
}
const Xq = { kernelName: Go, backendName: "cpu", kernelFunc: Nh };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Yq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { equation: r } = s, a = e, { allDims: o, summedDims: i, idDims: u } = sm(r, a.length);
  am(o.length, u, a);
  const { path: c, steps: l } = om(i, u), d = l.length;
  let h = null, p = o.length;
  const f = [];
  for (let m = 0; m < d; ++m) {
    for (const g of l[m]) {
      const { permutationIndices: y, expandDims: b } = rm(p, u[g]);
      let x;
      im(y) ? x = a[g] : (x = Xn({ inputs: { x: a[g] }, backend: t, attrs: { perm: y } }), f.push(x));
      const w = x.shape.slice();
      for (let C = 0; C < b.length; ++C) w.splice(b[C], 0, 1);
      Be(x.shape, w) || (x = vt({ inputs: { x }, backend: t, attrs: { shape: w } }), f.push(x)), h === null ? h = x : (h = Rm({ inputs: { a: x, b: h }, backend: t }), f.push(h));
    }
    m < d - 1 && (c[m] >= 0 && (h = Nh({ inputs: { x: h }, backend: t, attrs: { axis: c[m] - (o.length - p), keepDims: false } }), f.push(h)), p--);
  }
  for (const m of f) m !== h && t.disposeIntermediateTensorInfo(m);
  return h;
}
const Qq = { kernelName: Td, backendName: "cpu", kernelFunc: Yq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Zq(n) {
  const { inputs: e, backend: t } = n, { dy: s, y: r } = e;
  Ie([s, r], "eluGrad");
  const a = new Float32Array(A(r.shape)), o = t.data.get(r.dataId).values, i = t.data.get(s.dataId).values;
  for (let u = 0; u < o.length; ++u) {
    const c = o[u];
    c >= 0 ? a[u] = i[u] : a[u] = i[u] * (c + 1);
  }
  return t.makeTensorInfo(r.shape, "float32", a);
}
const Jq = { kernelName: cu, backendName: "cpu", kernelFunc: Zq };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const e6 = Qf, t6 = Zf, n6 = Jf, s6 = em, r6 = tm, a6 = nm, o6 = gt(Ja, (n) => {
  const e = Math.sign(n), t = Math.abs(n), s = 1 / (1 + e6 * t);
  return e * (1 - ((((a6 * s + r6) * s + s6) * s + n6) * s + t6) * s * Math.exp(-t * t));
}), i6 = { kernelName: Ja, backendName: "cpu", kernelFunc: o6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Yp(n) {
  const { inputs: e, backend: t, attrs: s } = n, { input: r } = e, { dim: a } = s, o = r.shape.length, i = r.shape.slice();
  let u = a;
  return a < 0 && ($(-(o + 1) <= a, () => `Axis must be in the interval [${-(o + 1)}, ${o}]`), u = o + a + 1), i.splice(u, 0, 1), vt({ inputs: { x: r }, backend: t, attrs: { shape: i } });
}
const u6 = { kernelName: hu, backendName: "cpu", kernelFunc: Yp };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const l6 = Bt((n, e) => n / e), a0 = sn(Qa, l6), ey = { kernelName: Qa, backendName: "cpu", kernelFunc: a0 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function J2(n, e, t) {
  const s = n.shape, r = s[0], a = s[1], o = t.data.get(n.dataId), i = o.complexTensorInfos.real, u = o.complexTensorInfos.imag, c = [r, a], l = A(c), d = Ht("float32", l), h = Ht("float32", l);
  for (let g = 0; g < r; g++) {
    const y = Ui({ inputs: { x: i }, backend: t, attrs: { begin: [g, 0], size: [1, a] } }), b = Ui({ inputs: { x: u }, backend: t, attrs: { begin: [g, 0], size: [1, a] } }), x = ss({ inputs: { real: y, imag: b }, backend: t }), { real: w, imag: C } = c6(x, e, t), v = Qs(w, C);
    for (let k = 0; k < a; k++) {
      const R = Yb(v, k);
      d[g * a + k] = R.real, h[g * a + k] = R.imag;
    }
    t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(b), t.disposeIntermediateTensorInfo(x);
  }
  const p = t.makeTensorInfo(c, "float32", d), f = t.makeTensorInfo(c, "float32", h), m = ss({ inputs: { real: p, imag: f }, backend: t });
  return t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), m;
}
function c6(n, e, t) {
  const s = A(n.shape), r = t.data.get(n.dataId), a = t.data.get(r.complexTensorInfos.real.dataId).values, o = t.data.get(r.complexTensorInfos.imag.dataId).values;
  if (d6(s)) {
    const i = ty(a, o, s, e, t), u = [n.shape[0], n.shape[1]];
    if (e) {
      const c = t.makeTensorInfo(u, "float32", i.real), l = t.makeTensorInfo(u, "float32", i.imag), d = t.makeTensorInfo([], "float32", qr(s, "float32")), h = Cr({ inputs: { x: d }, backend: t }), p = ey.kernelFunc({ inputs: { a: c, b: d }, backend: t }), f = ey.kernelFunc({ inputs: { a: l, b: h }, backend: t }), m = t.data.get(p.dataId).values, g = t.data.get(f.dataId).values;
      return t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(l), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), { real: m, imag: g };
    }
    return i;
  } else {
    const i = Qs(a, o), u = h6(i, s, e);
    return hv(u);
  }
}
function d6(n) {
  return (n & n - 1) === 0;
}
function ty(n, e, t, s, r) {
  if (t === 1) return { real: n, imag: e };
  const a = Qs(n, e), o = t / 2, i = pv(a), u = i.real, c = i.imag, l = [u.length], d = r.makeTensorInfo(l, "float32", u), h = r.makeTensorInfo(l, "float32", c), p = ss({ inputs: { real: d, imag: h }, backend: r }), f = fv(a), m = f.real, g = f.imag, y = [m.length], b = r.makeTensorInfo(y, "float32", m), x = r.makeTensorInfo(y, "float32", g), w = ss({ inputs: { real: b, imag: x }, backend: r }), C = ty(u, c, o, s, r), v = C.real, k = C.imag, R = [v.length], N = r.makeTensorInfo(R, "float32", v), T = r.makeTensorInfo(R, "float32", k), S = ss({ inputs: { real: N, imag: T }, backend: r }), E = ty(m, g, o, s, r), P = E.real, M = E.imag, L = [P.length], V = r.makeTensorInfo(L, "float32", P), q = r.makeTensorInfo(L, "float32", M), G = ss({ inputs: { real: V, imag: q }, backend: r }), K = gv(t, s), X = [K.real.length], Z = r.makeTensorInfo(X, "float32", K.real), ee = r.makeTensorInfo(X, "float32", K.imag), J = ss({ inputs: { real: Z, imag: ee }, backend: r }), re = Rm({ inputs: { a: J, b: G }, backend: r }), se = Dl({ inputs: { a: S, b: re }, backend: r }), pe = t0({ inputs: { a: S, b: re }, backend: r }), Se = Vi({ inputs: { input: se }, backend: r }), ge = Vi({ inputs: { input: pe }, backend: r }), ke = Al({ inputs: { input: se }, backend: r }), Pe = Al({ inputs: { input: pe }, backend: r }), ze = Fl({ inputs: [Se, ge], backend: r, attrs: { axis: 0 } }), Xe = Fl({ inputs: [ke, Pe], backend: r, attrs: { axis: 0 } }), ut = r.data.get(ze.dataId).values, rt = r.data.get(Xe.dataId).values;
  return r.disposeIntermediateTensorInfo(d), r.disposeIntermediateTensorInfo(h), r.disposeIntermediateTensorInfo(p), r.disposeIntermediateTensorInfo(b), r.disposeIntermediateTensorInfo(x), r.disposeIntermediateTensorInfo(w), r.disposeIntermediateTensorInfo(N), r.disposeIntermediateTensorInfo(T), r.disposeIntermediateTensorInfo(S), r.disposeIntermediateTensorInfo(V), r.disposeIntermediateTensorInfo(q), r.disposeIntermediateTensorInfo(G), r.disposeIntermediateTensorInfo(Z), r.disposeIntermediateTensorInfo(ee), r.disposeIntermediateTensorInfo(J), r.disposeIntermediateTensorInfo(re), r.disposeIntermediateTensorInfo(se), r.disposeIntermediateTensorInfo(pe), r.disposeIntermediateTensorInfo(Se), r.disposeIntermediateTensorInfo(ke), r.disposeIntermediateTensorInfo(ge), r.disposeIntermediateTensorInfo(Pe), r.disposeIntermediateTensorInfo(ze), r.disposeIntermediateTensorInfo(Xe), { real: ut, imag: rt };
}
function h6(n, e, t) {
  const s = new Float32Array(e * 2);
  for (let r = 0; r < e; r++) {
    let a = 0, o = 0;
    for (let i = 0; i < e; i++) {
      const u = yv(r * i, e, t), c = Yb(n, i);
      a += c.real * u.real - c.imag * u.imag, o += c.real * u.imag + c.imag * u.real;
    }
    t && (a /= e, o /= e), mv(s, a, o, r);
  }
  return s;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function p6(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = A(s.shape), a = s.shape[s.shape.length - 1], o = r / a, i = vt({ inputs: { x: s }, backend: t, attrs: { shape: [o, a] } }), u = J2(i, false, t), c = vt({ inputs: { x: u }, backend: t, attrs: { shape: s.shape } });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(u), c;
}
const f6 = { kernelName: Rd, backendName: "cpu", kernelFunc: p6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function o0(n) {
  const { backend: e, attrs: t } = n, { shape: s, value: r, dtype: a } = t, o = a || Vr(r), i = Dt(o, A(s));
  return g6(i, r, o), e.makeTensorInfo(s, o, i);
}
const m6 = { kernelName: Gl, backendName: "cpu", kernelFunc: o0 };
function g6(n, e, t) {
  n.fill(e);
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const y6 = { kernelName: pu, backendName: "cpu", kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
  const { image: s } = n, r = t, a = Ht(s.dtype, A(s.shape)), [o, i, u, c] = s.shape, l = r.data.get(s.dataId).values;
  for (let h = 0; h < o; h++) {
    const p = h * u * i * c;
    for (let f = 0; f < i; f++) {
      const m = f * (u * c);
      for (let g = 0; g < u; g++) {
        const y = g * c;
        for (let b = 0; b < c; b++) {
          const x = Math.round(u - g - 1), w = p + m + y + b;
          let C = l[w];
          if (x >= 0 && x < u) {
            const v = x * c, k = p + m + v + b;
            C = l[k];
          }
          a[w] = C;
        }
      }
    }
  }
  return { dataId: r.write(a, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function b6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a, bias: o, preluActivationWeights: i } = e, { strides: u, pad: c, dataFormat: l, dilations: d, dimRoundingMode: h, activation: p, leakyreluAlpha: f } = s;
  let m = Q2({ inputs: { x: r, filter: a }, backend: t, attrs: { strides: u, pad: c, dataFormat: l, dilations: d, dimRoundingMode: h } });
  if (o) {
    const g = m;
    if (l === "NCHW" && o.shape.length === 1 && o.shape[0] !== 1) {
      const y = vt({ inputs: { x: o }, backend: t, attrs: { shape: [o.shape[0], 1, 1] } });
      m = Dl({ inputs: { a: m, b: y }, backend: t }), t.disposeIntermediateTensorInfo(y);
    } else m = Dl({ inputs: { a: m, b: o }, backend: t });
    t.disposeIntermediateTensorInfo(g);
  }
  if (p) {
    const g = m;
    if (l === "NCHW" && p === "prelu" && i.shape.length === 1 && i.shape[0] !== 1) {
      const y = vt({ inputs: { x: i }, backend: t, attrs: { shape: [i.shape[0], 1, 1] } });
      m = Xp(t, m, p, y, f), t.disposeIntermediateTensorInfo(y);
    } else m = Xp(t, m, p, i, f);
    t.disposeIntermediateTensorInfo(g);
  }
  return m;
}
const x6 = { kernelName: xa, backendName: "cpu", kernelFunc: b6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function w6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a, bias: o, preluActivationWeights: i } = e, { strides: u, pad: c, dataFormat: l, dilations: d, dimRoundingMode: h, activation: p, leakyreluAlpha: f } = s;
  let m = Z2({ inputs: { x: r, filter: a }, backend: t, attrs: { strides: u, pad: c, dataFormat: l, dilations: d, dimRoundingMode: h } });
  if (o) {
    const g = m;
    m = Dl({ inputs: { a: m, b: o }, backend: t }), t.disposeIntermediateTensorInfo(g);
  }
  if (p) {
    const g = m;
    m = Xp(t, m, p, i, f), t.disposeIntermediateTensorInfo(g);
  }
  return m;
}
const C6 = { kernelName: wa, backendName: "cpu", kernelFunc: w6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function I6(n) {
  const { inputs: e, backend: t } = n, { params: s, indices: r } = e, a = A(s.shape), o = r.shape, i = o[o.length - 1], [u, c, l, d] = dc(s, r);
  if (c === 0) return t.makeTensorInfo(u, s.dtype, []);
  const h = t.data.get(r.dataId).values, p = t.bufferSync(s), f = f2(h, p, s.dtype, c, i, l, d, s.shape, a);
  return t.makeTensorInfo(u, s.dtype, f.values);
}
const S6 = { kernelName: mu, backendName: "cpu", kernelFunc: I6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function v6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, indices: a } = e, { axis: o, batchDims: i } = s;
  Ie([r, a], "gatherV2");
  const u = Ee(o, r.shape)[0], c = t.data.get(a.dataId).values, l = r.shape[u];
  for (let w = 0; w < c.length; ++w) {
    const C = c[w];
    $(C <= l - 1 && C >= 0, () => `GatherV2: the index value ${C} is not in [0, ${l - 1}]`);
  }
  let d = i;
  i == null && (d = 0);
  const h = A(a.shape), p = gh(r, a, u, d), f = vt({ inputs: { x: r }, backend: t, attrs: { shape: [p.batchSize, p.outerSize, p.dimSize, p.sliceSize] } }), m = vt({ inputs: { x: a }, backend: t, attrs: { shape: [p.batchSize, h / p.batchSize] } }), g = [p.batchSize, p.outerSize, h / p.batchSize, p.sliceSize], y = t.bufferSync(m), b = t.bufferSync(f), x = m2(b, y, g);
  return t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(m), t.makeTensorInfo(p.outputShape, x.dtype, x.values);
}
const $6 = { kernelName: fu, backendName: "cpu", kernelFunc: v6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function k6(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = A(s.shape), a = s.shape[s.shape.length - 1], o = r / a, i = vt({ inputs: { x: s }, backend: t, attrs: { shape: [o, a] } }), u = J2(i, true, t), c = vt({ inputs: { x: u }, backend: t, attrs: { shape: s.shape } });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(u), c;
}
const N6 = { kernelName: _d, backendName: "cpu", kernelFunc: k6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const T6 = gt(io, (n) => Number.isFinite(n) ? 1 : 0, "bool"), R6 = { kernelName: io, backendName: "cpu", kernelFunc: T6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const _6 = gt(uo, (n) => Math.abs(n) === 1 / 0 ? 1 : 0, "bool"), E6 = { kernelName: uo, backendName: "cpu", kernelFunc: _6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const D6 = gt(lo, (n) => Number.isNaN(n) ? 1 : 0, "bool"), A6 = { kernelName: lo, backendName: "cpu", kernelFunc: D6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function F6(n) {
  const { backend: e, attrs: t } = n, { start: s, stop: r, num: a } = t, o = w2(s, r, a);
  return e.makeTensorInfo([o.length], "float32", o);
}
const O6 = { kernelName: xu, backendName: "cpu", kernelFunc: F6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const P6 = gt(po, (n) => Math.log1p(n)), L6 = { kernelName: po, backendName: "cpu", kernelFunc: P6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const z6 = Bt((n, e) => n && e), M6 = sn(wu, z6, null, "bool"), B6 = { kernelName: wu, backendName: "cpu", kernelFunc: M6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const W6 = gt(Cu, (n) => n ? 0 : 1, "bool"), V6 = { kernelName: Cu, backendName: "cpu", kernelFunc: W6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const U6 = Bt((n, e) => n || e), G6 = sn(Iu, U6, null, "bool"), H6 = { kernelName: Iu, backendName: "cpu", kernelFunc: G6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function j6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { depthRadius: a, bias: o, alpha: i, beta: u } = s;
  Ie(r, "LRN");
  const c = r.shape[3], l = c - 1, d = t.data.get(r.dataId).values, h = A(r.shape), p = new Float32Array(h);
  function f(m) {
    const g = m % c;
    let y = m - g + Math.max(0, g - a);
    const b = m - g + Math.min(g + a, l);
    let x = 0;
    for (; y <= b; y++) {
      const w = d[y];
      x += w * w;
    }
    return x;
  }
  for (let m = 0; m < h; m++) {
    const g = f(m), y = d[m] * Math.pow(o + i * g, -u);
    p[m] = y;
  }
  return t.makeTensorInfo(r.shape, r.dtype, p);
}
const q6 = { kernelName: fo, backendName: "cpu", kernelFunc: j6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function K6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, y: a, dy: o } = e, { depthRadius: i, bias: u, alpha: c, beta: l } = s;
  Ie(o, "LRNGrad");
  const d = A(o.shape), h = o.shape[3], p = t.data.get(o.dataId).values, f = t.data.get(r.dataId).values, m = t.data.get(a.dataId).values, g = new Float32Array(d), y = d;
  for (let b = 0; b < y; b++) {
    const x = b % h, w = b - x + Math.max(0, x - i), C = b - x + Math.min(h, x + i + 1);
    let v = 0;
    for (let k = w; k < C; k++) v += Math.pow(f[k], 2);
    v = c * v + u;
    for (let k = w; k < C; k++) {
      let R = -2 * c * l * f[k] * m[b] / v;
      b === k && (R += Math.pow(v, -l)), R *= p[b], g[k] += R;
    }
  }
  return t.makeTensorInfo(o.shape, r.dtype, g);
}
const X6 = { kernelName: Su, backendName: "cpu", kernelFunc: K6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ek(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { reductionIndices: a, keepDims: o } = s, i = t;
  let u = r.shape;
  const c = u.length, l = Ee(a, u);
  let d = l;
  const h = ct(d, c);
  let p = i.data.get(r.dataId).values;
  if (h != null) {
    const w = new Array(c);
    for (let C = 0; C < w.length; C++) w[C] = u[h[C]];
    p = Xw(p, u, r.dtype, h, w), d = it(d.length, c), u = w;
  }
  Ie(r, "max"), mt("max", d, c);
  const [f, m] = xt(u, d), g = A(m), y = I2(p, g, f, r.dtype), b = i.write(y, f, r.dtype);
  let x = f;
  return o && (x = ft(f, l)), { dataId: b, shape: x, dtype: r.dtype };
}
const Y6 = { kernelName: mo, backendName: "cpu", kernelFunc: ek };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Q6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e;
  Ie(r, "maxPool");
  const { filterSize: a, strides: o, pad: i, dimRoundingMode: u } = s, c = 1;
  $(qt(o, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);
  const l = zt(r.shape, a, o, c, i, u);
  let d;
  if (l.filterWidth === 1 && l.filterHeight === 1 && Be(l.inShape, l.outShape)) d = Cr({ inputs: { x: r }, backend: t });
  else {
    const h = t.data.get(r.dataId).values, p = me(r.shape), f = r0(h, r.shape, r.dtype, p, l, "max");
    d = t.makeTensorInfo(l.outShape, r.dtype, f.values);
  }
  return d;
}
const Z6 = { kernelName: yo, backendName: "cpu", kernelFunc: Q6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function J6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: a, strides: o, pad: i, dimRoundingMode: u, dataFormat: c } = s;
  Ie(r, "maxPool3d");
  const l = Sn(r.shape, a, o, 1, i, u, c), d = t.data.get(r.dataId).values, h = Y2(d, r.shape, r.dtype, me(r.shape), l, "max");
  return t.makeTensorInfo(h.shape, "float32", h.values);
}
const eK = { kernelName: vu, backendName: "cpu", kernelFunc: J6 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function tK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, { filterSize: o, strides: i, pad: u, dimRoundingMode: c } = s;
  Ie([r, a], "maxPool3DGrad");
  const l = Sn(a.shape, o, i, 1, u, c), d = t.bufferSync(a), h = Uj(d, l), p = l.strideDepth, f = l.strideHeight, m = l.strideWidth, g = l.dilationDepth, y = l.dilationHeight, b = l.dilationWidth, x = l.effectiveFilterDepth, w = l.effectiveFilterHeight, C = l.effectiveFilterWidth, v = x - 1 - l.padInfo.front, k = C - 1 - l.padInfo.left, R = w - 1 - l.padInfo.top, N = Oe(a.shape, "float32"), T = t.bufferSync(r);
  for (let S = 0; S < l.batchSize; ++S) for (let E = 0; E < l.inChannels; ++E) for (let P = 0; P < l.inDepth; ++P) for (let M = 0; M < l.inHeight; ++M) for (let L = 0; L < l.inWidth; ++L) {
    const V = P - v, q = M - R, G = L - k;
    let K = 0;
    for (let X = 0; X < x; X += g) {
      const Z = (V + X) / p;
      if (!(Z < 0 || Z >= l.outDepth || Math.floor(Z) !== Z)) for (let ee = 0; ee < w; ee += y) {
        const J = (q + ee) / f;
        if (!(J < 0 || J >= l.outHeight || Math.floor(J) !== J)) for (let re = 0; re < C; re += b) {
          const se = (G + re) / m;
          if (se < 0 || se >= l.outWidth || Math.floor(se) !== se) continue;
          const pe = x * w * C - 1 - h.get(S, Z, J, se, E), Se = X * w * C + ee * C + re, ge = pe === Se ? 1 : 0;
          if (ge === 0) continue;
          const ke = T.get(S, Z, J, se, E);
          K += ke * ge;
        }
      }
    }
    N.set(K, S, P, M, L, E);
  }
  return t.makeTensorInfo(N.shape, N.dtype, N.values);
}
const nK = { kernelName: jl, backendName: "cpu", kernelFunc: tK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a, output: o } = e, i = a;
  Ie([a, o], "maxPoolGrad");
  const { filterSize: u, strides: c, pad: l, dimRoundingMode: d } = s, h = zt(i.shape, u, c, 1, l, d), p = t.data.get(i.dataId).values, f = Oe(h.outShape, i.dtype, X2(p, i.shape, i.dtype, h).values), m = h.strideHeight, g = h.strideWidth, y = h.dilationHeight, b = h.dilationWidth, x = h.effectiveFilterHeight, w = h.effectiveFilterWidth, C = w - 1 - h.padInfo.left, v = x - 1 - h.padInfo.top, k = Oe(i.shape, "float32"), R = t.data.get(r.dataId).values, N = Oe(r.shape, "float32", R);
  for (let T = 0; T < h.batchSize; ++T) for (let S = 0; S < h.inChannels; ++S) for (let E = 0; E < h.inHeight; ++E) for (let P = 0; P < h.inWidth; ++P) {
    const M = E - v, L = P - C;
    let V = 0;
    for (let q = 0; q < x; q += y) {
      const G = (M + q) / m;
      if (!(G < 0 || G >= h.outHeight || Math.floor(G) !== G)) for (let K = 0; K < w; K += b) {
        const X = (L + K) / g;
        if (X < 0 || X >= h.outWidth || Math.floor(X) !== X) continue;
        const Z = x * w - 1 - f.get(T, G, X, S), ee = q * w + K, J = Z === ee ? 1 : 0;
        if (J === 0) continue;
        const re = N.get(T, G, X, S);
        V += re * J;
      }
    }
    k.set(V, T, E, P, S);
  }
  return t.makeTensorInfo(k.shape, k.dtype, k.values);
}
const rK = { kernelName: Hl, backendName: "cpu", kernelFunc: sK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function aK(n, e, t, s, r) {
  const a = me(e), o = r0(n, e, t, a, r, "max"), i = X2(n, e, t, r, true, s);
  return [o.values, i.values];
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const oK = { kernelName: ql, backendName: "cpu", kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
  const { x: s } = n, { filterSize: r, strides: a, pad: o, includeBatchInIndex: i } = e, u = t;
  Ie(s, "MaxPoolWithArgmax");
  const c = u.data.get(s.dataId).values, l = zt(s.shape, r, a, [1, 1], o), [d, h] = aK(c, s.shape, s.dtype, i, l), p = u.write(d, l.outShape, s.dtype), f = u.write(h, l.outShape, s.dtype);
  return [{ dataId: p, shape: l.outShape, dtype: s.dtype }, { dataId: f, shape: l.outShape, dtype: "int32" }];
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function iK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s, i = Ee(a, r.shape), c = xt(r.shape, i)[1], l = A(c), d = [], h = t.makeTensorInfo([], "float32", new Float32Array([l]));
  d.push(h);
  const p = Ra({ inputs: { x: r }, backend: t, attrs: { dtype: "float32" } });
  d.push(p);
  const f = a0({ inputs: { a: p, b: h }, backend: t });
  d.push(f);
  const m = Nh({ inputs: { x: f }, backend: t, attrs: { axis: a, keepDims: o } });
  return d.forEach((g) => t.disposeIntermediateTensorInfo(g)), m;
}
const uK = { kernelName: bo, backendName: "cpu", kernelFunc: iK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function lK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s;
  Ie(r, "min");
  const i = Ee(a, r.shape);
  let u = i;
  const c = ct(u, r.shape.length);
  let l = r;
  c != null && (l = Xn({ inputs: { x: r }, backend: t, attrs: { perm: c } }), u = it(u.length, r.shape.length)), mt("min", u, l.shape.length);
  const [d, h] = xt(l.shape, u), p = A(h), f = un(A(d), l.dtype), m = t.data.get(l.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let x = m[b];
    for (let w = 0; w < p; ++w) {
      const C = m[b + w];
      (Number.isNaN(C) || C < x) && (x = C);
    }
    f[y] = x;
  }
  c != null && t.disposeIntermediateTensorInfo(l);
  const g = t.makeTensorInfo(d, l.dtype, f);
  if (o) {
    const y = ft(d, i), b = vt({ inputs: { x: g }, backend: t, attrs: { shape: y } });
    return t.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const cK = { kernelName: xo, backendName: "cpu", kernelFunc: lK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function dK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { paddings: a, mode: o } = s;
  Ie(r, "mirrorPad");
  const i = a.map((x, w) => x[0] + r.shape[w] + x[1]), u = a.map((x) => x[0]), c = a.map((x, w) => x[0] + r.shape[w]), l = o === "reflect" ? 0 : 1, d = t.data.get(r.dataId).values, h = r.shape.length, p = me(r.shape), f = A(i), m = i.length, g = me(i), y = Ht(r.dtype, f);
  for (let x = 0; x < f; x++) {
    let w = Xi(x, m, g);
    for (let v = 0; v < m; v++) w[v] < u[v] ? w[v] = u[v] * 2 - w[v] - l : w[v] >= c[v] && (w[v] = (c[v] - 1) * 2 - w[v] + l);
    w = w.map((v, k) => v - u[k]);
    const C = js(w, h, p);
    y[x] = d[C];
  }
  return { dataId: t.write(y, i, r.dtype), shape: i, dtype: r.dtype };
}
const hK = { kernelName: Co, backendName: "cpu", kernelFunc: dK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const pK = Bt((n, e) => {
  const t = n % e;
  return n < 0 && e < 0 || n >= 0 && e >= 0 ? t : (t + e) % e;
}), fK = sn(Io, pK), mK = { kernelName: Io, backendName: "cpu", kernelFunc: fK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function tk(n) {
  const { inputs: e, backend: t, attrs: s } = n, { logits: r } = e, { dim: a } = s, o = r.shape.length;
  let i = a;
  if (i === -1 && (i = o - 1), i !== o - 1) throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);
  const u = Ee([i], r.shape), c = ek({ inputs: { x: r }, backend: t, attrs: { reductionIndices: u, keepDims: false } }), l = ft(c.shape, u), d = vt({ inputs: { x: c }, backend: t, attrs: { shape: l } }), h = t0({ inputs: { a: r, b: d }, backend: t }), p = c2({ inputs: { x: h }, backend: t }), f = Nh({ inputs: { x: p }, backend: t, attrs: { axis: u, keepDims: false } }), m = vt({ inputs: { x: f }, backend: t, attrs: { shape: l } }), g = a0({ inputs: { a: p, b: m }, backend: t });
  return t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(m), g;
}
const gK = { kernelName: Ho, backendName: "cpu", kernelFunc: tk };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function yK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { logits: r } = e, { numSamples: a, seed: o, normalized: i } = s;
  Ie(r, "multinomial");
  const u = i ? r : tk({ inputs: { logits: r }, backend: t, attrs: { dim: -1 } }), c = u.shape[0], l = u.shape[1], d = t.data.get(u.dataId).values, h = [c, a], p = un(A(h), "int32");
  for (let f = 0; f < c; ++f) {
    const m = f * l, g = new Float32Array(l - 1);
    g[0] = d[m];
    for (let x = 1; x < g.length; ++x) g[x] = g[x - 1] + d[m + x];
    const y = lc.alea(o.toString()), b = f * a;
    for (let x = 0; x < a; ++x) {
      const w = y();
      p[b + x] = g.length;
      for (let C = 0; C < g.length; C++) if (w < g[C]) {
        p[b + x] = C;
        break;
      }
    }
  }
  return i || t.disposeIntermediateTensorInfo(u), t.makeTensorInfo(h, "int32", p);
}
const bK = { kernelName: $u, backendName: "cpu", kernelFunc: yK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const xK = ah;
function wK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: a } = e, { maxOutputSize: o, iouThreshold: i, scoreThreshold: u } = s;
  Ie(r, "NonMaxSuppression");
  const c = t.data.get(r.dataId).values, l = t.data.get(a.dataId).values, { selectedIndices: d } = xK(c, l, o, i, u);
  return t.makeTensorInfo([d.length], "int32", new Int32Array(d));
}
const CK = { kernelName: Tu, backendName: "cpu", kernelFunc: wK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const IK = Hf;
function SK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: a } = e, { maxOutputSize: o, iouThreshold: i, scoreThreshold: u, padToMaxOutputSize: c } = s;
  Ie(r, "NonMaxSuppressionPadded");
  const l = t.data.get(r.dataId).values, d = t.data.get(a.dataId).values, { selectedIndices: h, validOutputs: p } = IK(l, d, o, i, u, c);
  return [t.makeTensorInfo([h.length], "int32", new Int32Array(h)), t.makeTensorInfo([], "int32", new Int32Array([p]))];
}
const vK = { kernelName: Kl, backendName: "cpu", kernelFunc: SK };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $K = oh;
function kK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: a } = e, { maxOutputSize: o, iouThreshold: i, scoreThreshold: u, softNmsSigma: c } = s;
  Ie(r, "NonMaxSuppressionWithScore");
  const l = t.data.get(r.dataId).values, d = t.data.get(a.dataId).values, h = o, p = i, f = u, m = c, { selectedIndices: g, selectedScores: y } = $K(l, d, h, p, f, m);
  return [t.makeTensorInfo([g.length], "int32", new Int32Array(g)), t.makeTensorInfo([y.length], "float32", new Float32Array(y))];
}
const NK = { kernelName: Ru, backendName: "cpu", kernelFunc: kK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function TK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { indices: r } = e, { dtype: a, depth: o, onValue: i, offValue: u } = s;
  Ie(r, "oneHot");
  const c = A(r.shape), l = new Float32Array(c * o);
  l.fill(u);
  const d = t.data.get(r.dataId).values;
  for (let h = 0; h < c; ++h) d[h] >= 0 && d[h] < o && (l[h * o + d[h]] = i);
  return t.makeTensorInfo([...r.shape, o], a, l);
}
const RK = { kernelName: vo, backendName: "cpu", kernelFunc: TK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Qp(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (s.dtype === "string") throw new Error("zerosLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const r = Vi({ inputs: { input: s }, backend: t }), a = Qp({ inputs: { x: r }, backend: t }), o = Al({ inputs: { input: s }, backend: t }), i = Qp({ inputs: { x: o }, backend: t }), u = ss({ inputs: { real: a, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(r), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(i), u;
  } else return o0({ backend: t, attrs: { shape: s.shape, value: 0, dtype: s.dtype } });
}
const _K = { kernelName: qu, backendName: "cpu", kernelFunc: Qp };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nk(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (s.dtype === "string") throw new Error("onesLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const r = Vi({ inputs: { input: s }, backend: t }), a = nk({ inputs: { x: r }, backend: t }), o = Al({ inputs: { input: s }, backend: t }), i = Qp({ inputs: { x: o }, backend: t }), u = ss({ inputs: { real: a, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(r), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(i), u;
  } else return o0({ backend: t, attrs: { shape: s.shape, value: 1, dtype: s.dtype } });
}
const EK = { kernelName: _u, backendName: "cpu", kernelFunc: nk };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sk(n) {
  const { inputs: e, backend: t, attrs: s } = n, { axis: r } = s;
  if (e.length === 1) return Yp({ inputs: { input: e[0] }, backend: t, attrs: { dim: r } });
  const a = e[0].shape, o = e[0].dtype;
  e.forEach((l) => {
    nn(a, l.shape, "All tensors passed to stack must have matching shapes"), $(o === l.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const i = [], u = e.map((l) => {
    const d = Yp({ inputs: { input: l }, backend: t, attrs: { dim: r } });
    return i.push(d), d;
  }), c = Fl({ inputs: u, backend: t, attrs: { axis: r } });
  return i.forEach((l) => t.disposeIntermediateTensorInfo(l)), c;
}
const DK = { kernelName: Eu, backendName: "cpu", kernelFunc: sk };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function AK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { paddings: a, constantValue: o } = s;
  Ie(r, "pad");
  const i = a.map((b, x) => b[0] + r.shape[x] + b[1]), u = a.map((b) => b[0]), c = t.data.get(r.dataId).values, l = A(r.shape), d = r.shape.length, h = me(r.shape), p = A(i), f = i.length, m = me(i), g = Ht(r.dtype, p);
  o !== 0 && g.fill(o);
  for (let b = 0; b < l; b++) {
    const w = Xi(b, d, h).map((v, k) => v + u[k]), C = js(w, f, m);
    g[C] = c[b];
  }
  return { dataId: t.write(g, i, r.dtype), shape: i, dtype: r.dtype };
}
const rk = { kernelName: $o, backendName: "cpu", kernelFunc: AK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const FK = Bt((n, e) => Math.pow(n, e)), OK = sn(ko, FK), PK = { kernelName: ko, backendName: "cpu", kernelFunc: OK };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function LK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { paramsNestedSplits: r, paramsDenseValues: a, indices: o } = e, { outputRaggedRank: i } = s, u = r.map((y) => t.data.get(y.dataId).values), c = r.map((y) => y.shape), l = t.data.get(a.dataId).values, d = t.data.get(o.dataId).values, [h, p, f] = T2(u, c, l, a.shape, a.dtype, d, o.shape), m = h.map((y) => t.makeTensorInfo([y.length], "int32", y)), g = t.makeTensorInfo(f, a.dtype, p);
  return m.concat([g]);
}
const zK = { kernelName: lf, backendName: "cpu", kernelFunc: LK };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function MK(n) {
  const { inputs: e, backend: t } = n, { starts: s, limits: r, deltas: a } = e, o = t.data.get(s.dataId).values, i = t.data.get(r.dataId).values, u = t.data.get(a.dataId).values, [c, l] = R2(o, s.shape, s.dtype, i, r.shape, u, a.shape), d = t.makeTensorInfo([c.length], "int32", c), h = t.makeTensorInfo([l.length], s.dtype, l);
  return [d, h];
}
const BK = { kernelName: cf, backendName: "cpu", kernelFunc: MK };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function WK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { shape: r, values: a, defaultValue: o, rowPartitionTensors: i } = e, { rowPartitionTypes: u } = s, c = t.data.get(r.dataId).values, l = t.data.get(a.dataId).values, d = t.data.get(o.dataId).values, h = i.map((g) => t.data.get(g.dataId).values), p = i.map((g) => g.shape), [f, m] = _2(c, r.shape, l, a.shape, a.dtype, d, o.shape, h, p, u);
  return t.makeTensorInfo(f, a.dtype, m);
}
const VK = { kernelName: df, backendName: "cpu", kernelFunc: WK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function UK(n) {
  const { backend: e, attrs: t } = n, { start: s, stop: r, dtype: a, step: o } = t, i = Yw(s, r, o, a);
  return e.makeTensorInfo([i.length], a, i);
}
const GK = { kernelName: Xl, backendName: "cpu", kernelFunc: UK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const HK = gt(Ro, (n) => 1 / n), jK = { kernelName: Ro, backendName: "cpu", kernelFunc: HK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function qK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r } = e, { alignCorners: a, halfPixelCenters: o, size: i } = s;
  Ie(r, "resizeBilinear");
  const u = me(r.shape), [c, l] = i, [d, h, p, f] = r.shape, m = t.data.get(r.dataId).values, g = new Float32Array(A([d, c, l, f])), y = [a && c > 1 ? h - 1 : h, a && l > 1 ? p - 1 : p], b = [a && c > 1 ? c - 1 : c, a && l > 1 ? l - 1 : l];
  let x = 0;
  const w = y[0] / b[0], C = y[1] / b[1];
  for (let v = 0; v < d; v++) for (let k = 0; k < c; k++) {
    let R;
    o ? R = w * (k + 0.5) - 0.5 : R = w * k;
    const N = Math.max(0, Math.floor(R)), T = R - N, S = Math.min(h - 1, Math.ceil(R)), E = v * u[0] + N * u[1], P = v * u[0] + S * u[1];
    for (let M = 0; M < l; M++) {
      let L;
      o ? L = C * (M + 0.5) - 0.5 : L = C * M;
      const V = Math.max(0, Math.floor(L)), q = L - V, G = Math.min(p - 1, Math.ceil(L)), K = E + V * u[2], X = P + V * u[2], Z = E + G * u[2], ee = P + G * u[2];
      for (let J = 0; J < f; J++) {
        const re = m[K + J], se = m[X + J], pe = m[Z + J], Se = m[ee + J], ge = re + (pe - re) * q, ke = se + (Se - se) * q, Pe = ge + (ke - ge) * T;
        g[x++] = Pe;
      }
    }
  }
  return t.makeTensorInfo([d, c, l, f], "float32", g);
}
const KK = { kernelName: Do, backendName: "cpu", kernelFunc: qK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function XK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: a } = e, { alignCorners: o } = s;
  Ie([a, r], "resizeBilinearGrad");
  const i = me(r.shape), [u, c, l, d] = r.shape, [, h, p] = a.shape, f = new Float32Array(u * c * l * d), m = [o && h > 1 ? c - 1 : c, o && p > 1 ? l - 1 : l], g = [o && h > 1 ? h - 1 : h, o && p > 1 ? p - 1 : p], y = m[0] / g[0], b = m[1] / g[1], x = t.data.get(a.dataId).values;
  let w = 0;
  for (let C = 0; C < u; C++) {
    const v = C * i[0];
    for (let k = 0; k < h; k++) {
      const R = k * y, N = Math.floor(R), T = Math.min(Math.ceil(R), c - 1), S = v + N * i[1], E = v + T * i[1], P = R - N, M = 1 - P;
      for (let L = 0; L < p; L++) {
        const V = L * b, q = Math.floor(V), G = Math.min(Math.ceil(V), l - 1), K = V - q, X = 1 - K, Z = S + q * i[2], ee = S + G * i[2], J = E + q * i[2], re = E + G * i[2], se = M * X, pe = M * K, Se = P * X, ge = P * K;
        for (let ke = 0; ke < d; ke++) {
          const Pe = x[w++];
          f[Z + ke] += Pe * se, f[ee + ke] += Pe * pe, f[J + ke] += Pe * Se, f[re + ke] += Pe * ge;
        }
      }
    }
  }
  return t.makeTensorInfo([u, l, c, d], "float32", f);
}
const YK = { kernelName: Fu, backendName: "cpu", kernelFunc: XK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function QK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r } = e, { alignCorners: a, halfPixelCenters: o, size: i } = s;
  Ie(r, "resizeNearestNeighbor");
  const u = me(r.shape), [c, l] = i, [d, h, p, f] = r.shape, m = t.data.get(r.dataId).values, g = new Float32Array(d * c * l * f), y = [a && c > 1 ? h - 1 : h, a && l > 1 ? p - 1 : p], b = [a && c > 1 ? c - 1 : c, a && l > 1 ? l - 1 : l], x = y[0] / b[0], w = y[1] / b[1];
  let C = 0;
  for (let v = 0; v < d; v++) {
    const k = v * u[0];
    for (let R = 0; R < c; R++) {
      const N = o ? x * (R + 0.5) : x * R;
      let T = Math.min(h - 1, a ? Math.round(N) : Math.floor(N));
      o && (T = Math.max(0, T));
      const S = k + T * u[1];
      for (let E = 0; E < l; E++) {
        const P = o ? w * (E + 0.5) : w * E;
        let M = Math.min(p - 1, a ? Math.round(P) : Math.floor(P));
        o && (M = Math.max(0, M));
        const L = S + M * u[2];
        for (let V = 0; V < f; V++) {
          const q = m[L + V];
          g[C++] = q;
        }
      }
    }
  }
  return t.makeTensorInfo([d, c, l, f], r.dtype, g);
}
const ZK = { kernelName: Eo, backendName: "cpu", kernelFunc: QK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function JK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: a } = e, { alignCorners: o } = s;
  Ie([a, r], "resizeNearestNeighborGrad");
  const i = me(r.shape), u = me(a.shape), [c, l, d, h] = r.shape, [, p, f] = a.shape, m = new Float32Array(c * l * d * h), g = t.data.get(a.dataId).values, y = [o && p > 1 ? l - 1 : l, o && f > 1 ? d - 1 : d], b = [o && p > 1 ? p - 1 : p, o && f > 1 ? f - 1 : f], x = y[0] / b[0], w = y[1] / b[1], C = 1 / x, v = 1 / w, k = Math.ceil(C) * 2 + 2, R = Math.ceil(v) * 2 + 2;
  for (let N = 0; N < c; N++) {
    const T = N * i[0];
    for (let S = 0; S < l; S++) {
      const E = T + S * i[1], P = Math.floor(S * C), M = Math.floor(P - k / 2);
      for (let L = 0; L < d; L++) {
        const V = E + L * i[2], q = Math.floor(L * v), G = Math.floor(q - R / 2);
        for (let K = 0; K < h; K++) {
          let X = 0;
          for (let Z = 0; Z < k; Z++) {
            const ee = Z + M;
            if (ee < 0 || ee >= p) continue;
            const J = T + ee * u[1], re = ee * x, se = Math.min(l - 1, o ? Math.round(re) : Math.floor(re));
            if (S === se) for (let pe = 0; pe < R; pe++) {
              const Se = pe + G;
              if (Se < 0 || Se >= f) continue;
              const ge = J + Se * u[2], ke = Se * w, Pe = Math.min(d - 1, o ? Math.round(ke) : Math.floor(ke));
              L === Pe && (X += g[ge + K]);
            }
          }
          m[V + K] = X;
        }
      }
    }
  }
  return t.makeTensorInfo(r.shape, r.dtype, m);
}
const eX = { kernelName: Au, backendName: "cpu", kernelFunc: JK };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function tX(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { dims: a } = s;
  Ie(r, "reverse");
  const o = r.shape.length, i = Ee(a, r.shape);
  if (o === 0) return Cr({ inputs: { x: r }, backend: t });
  const u = new Gt(r.shape, r.dtype), c = t.bufferSync(r);
  for (let l = 0; l < u.size; l++) {
    const d = u.indexToLoc(l), h = d.slice();
    i.forEach((p) => h[p] = r.shape[p] - 1 - h[p]), u.set(c.get(...h), ...d);
  }
  return t.makeTensorInfo(u.shape, u.dtype, u.values);
}
const nX = { kernelName: Fo, backendName: "cpu", kernelFunc: tX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const sX = { kernelName: Ku, backendName: "cpu", kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
  const { image: s } = n, { radians: r, fillValue: a, center: o } = e, i = t, u = Ht(s.dtype, A(s.shape)), [c, l, d, h] = s.shape, [p, f] = ch(o, l, d), m = 255, g = Math.sin(r), y = Math.cos(r), b = i.data.get(s.dataId).values;
  for (let w = 0; w < c; w++) {
    const C = w * d * l * h;
    for (let v = 0; v < l; v++) {
      const k = v * (d * h);
      for (let R = 0; R < d; R++) {
        const N = R * h;
        for (let T = 0; T < h; T++) {
          const S = [c, v, R, T], E = S[2], P = S[1];
          let M = (E - p) * y - (P - f) * g, L = (E - p) * g + (P - f) * y;
          M = Math.round(M + p), L = Math.round(L + f);
          let V = a;
          if (typeof a != "number" && (T === 3 ? V = m : V = a[T]), M >= 0 && M < d && L >= 0 && L < l) {
            const G = L * (d * h), K = M * h, X = C + G + K + T;
            V = b[X];
          }
          const q = C + k + N + T;
          u[q] = V;
        }
      }
    }
  }
  return { dataId: i.write(u, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const rX = gt(Oo, (n) => {
  const e = Math.floor(n);
  return n - e < 0.5 ? Math.floor(n) : n - e > 0.5 ? Math.ceil(n) : e % 2 === 0 ? e : e + 1;
}), aX = { kernelName: Oo, backendName: "cpu", kernelFunc: rX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function oX(n) {
  const { inputs: e, backend: t, attrs: s } = n, { indices: r, updates: a } = e, { shape: o } = s, { sliceRank: i, numUpdates: u, sliceSize: c, strides: l, outputSize: d } = ds(a, r, o), h = true, p = t.bufferSync(r), f = t.bufferSync(a), m = Ci(p, f, o, d, c, u, i, l, 0, h);
  return t.makeTensorInfo(o, m.dtype, m.values);
}
const iX = { kernelName: Ou, backendName: "cpu", kernelFunc: oX };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function uX(n, e) {
  let t = 0, s = n.length, r = 0;
  for (; t < s; ) r = Math.floor((t + s) / 2), n[r] < e ? t = r + 1 : s = r;
  return s;
}
function lX(n, e) {
  let t = 0, s = n.length, r = 0;
  for (; t < s; ) r = Math.floor((t + s) / 2), n[r] <= e ? t = r + 1 : s = r;
  return s;
}
function cX(n, e, t, s, r, a) {
  const o = Dt("int32", t * r);
  for (let i = 0; i < t; ++i) {
    const u = n.slice(i * s, (i + 1) * s), c = i * r;
    for (let l = 0; l < r; ++l) o[c + l] = a === "left" ? uX(u, e[l + c]) : lX(u, e[l + c]);
  }
  return o;
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function dX(n) {
  const { inputs: e, backend: t, attrs: s } = n, { sortedSequence: r, values: a } = e, { side: o } = s, i = t.data.get(r.dataId).values, u = t.data.get(a.dataId).values, c = cX(i, u, r.shape[0], r.shape[1], a.shape[1], o);
  return t.makeTensorInfo(a.shape, "int32", c);
}
const hX = { kernelName: Lu, backendName: "cpu", kernelFunc: dX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function pX(n) {
  const { inputs: e, backend: t } = n, { condition: s, t: r, e: a } = e;
  Ie([s, r, a], "select");
  const o = s.shape.length, i = t.data.get(s.dataId).values, u = t.data.get(r.dataId).values, c = t.data.get(a.dataId).values, l = tn(r.dtype, a.dtype), d = un(A(r.shape), l);
  let h = 0;
  const p = o === 0 || o > 1 || r.shape.length === 1 ? 1 : A(r.shape.slice(1));
  for (let f = 0; f < i.length; f++) for (let m = 0; m < p; m++) i[f] === 1 ? d[h++] = u[f] : d[h++] = c[f];
  return t.makeTensorInfo(r.shape, l, d);
}
const fX = { kernelName: zu, backendName: "cpu", kernelFunc: pX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const mX = ph, gX = fh, yX = gt(Lo, (n) => n >= 0 ? gX * n : mX * (Math.exp(n) - 1)), bX = { kernelName: Lo, backendName: "cpu", kernelFunc: yX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const xX = gt(Bo, (n) => n < 0 ? -1 : n > 0 ? 1 : 0), wX = { kernelName: Bo, backendName: "cpu", kernelFunc: xX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const CX = gt(zo, (n) => Math.sin(n)), IX = { kernelName: zo, backendName: "cpu", kernelFunc: CX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const SX = gt(Mo, (n) => Math.sinh(n)), vX = { kernelName: Mo, backendName: "cpu", kernelFunc: SX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $X = 11920928955078125e-23, aC = Math.log($X) + 2, kX = gt(Vo, (n) => {
  const e = n > -aC, t = n < aC, s = Math.exp(n);
  let r;
  return t ? r = s : e ? r = n : r = Math.log(1 + s), r;
}), NX = { kernelName: Vo, backendName: "cpu", kernelFunc: kX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function TX(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: a, paddings: o } = s;
  Ie([r], "spaceToBatchND");
  const i = A(a), u = [[0, 0]];
  u.push(...o);
  for (let v = 1 + a.length; v < r.shape.length; ++v) u.push([0, 0]);
  const c = rk.kernelFunc({ inputs: { x: r }, backend: t, attrs: { paddings: u, constantValue: 0 } }), l = Zr(c.shape, a, i, false), d = Jr(l.length, a.length, false), h = ea(c.shape, a, i, false), m = vt({ inputs: { x: c }, backend: t, attrs: { shape: l } }), b = Xn({ inputs: { x: m }, backend: t, attrs: { perm: d } }), C = vt({ inputs: { x: b }, backend: t, attrs: { shape: h } });
  return t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(b), C;
}
const RX = { kernelName: Bu, backendName: "cpu", kernelFunc: TX };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _X(n) {
  const { inputs: e, backend: t } = n, { indices: s, values: r, denseShape: a, defaultValue: o } = e;
  if (a.shape.length !== 1) throw new Error(`Dense shape must be a vector, saw:
        ${a.shape}`);
  if (s.shape.length !== 2) throw new Error(`Indices must be a matrix, saw:
        ${s.shape}`);
  if (r.shape.length !== 1) throw new Error(`Values must be a vector, saw:
        ${r.shape}`);
  if (o.shape.length !== 0) throw new Error(`Default value must be a scalar, saw:
        ${o.shape}`);
  const i = t.data.get(s.dataId).values, u = t.data.get(r.dataId).values, c = t.data.get(a.dataId).values, l = t.data.get(o.dataId).values[0], [d, h, p, f, m] = A2(i, s.shape, s.dtype, u, r.dtype, c, l);
  return [t.makeTensorInfo(h, s.dtype, d), t.makeTensorInfo([h[0]], r.dtype, p), t.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))), t.makeTensorInfo([m.length], s.dtype, new Int32Array(m))];
}
const EX = { kernelName: Ad, backendName: "cpu", kernelFunc: _X };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function DX(n) {
  const { inputs: e, backend: t } = n, { inputIndices: s, inputShape: r, newShape: a } = e;
  if (s.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
  if (r.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`);
  if (a.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${a.shape}`);
  const o = Array.from(t.data.get(r.dataId).values), i = t.data.get(s.dataId).values, u = Array.from(t.data.get(a.dataId).values), [c, l, d] = F2(i, s.shape, s.dtype, o, u);
  return [t.makeTensorInfo(l, s.dtype, c), t.makeTensorInfo([d.length], a.dtype, new Int32Array(d))];
}
const AX = { kernelName: Yl, backendName: "cpu", kernelFunc: DX };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function FX(n) {
  const { inputs: e, backend: t } = n, { data: s, indices: r, segmentIds: a } = e;
  if (s.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
          ${r.shape}`);
  if (a.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
          ${a.shape}`);
  if (r.shape[0] !== a.shape[0]) throw new Error("segmentIds and indices should have same size.");
  const o = t.data.get(s.dataId).values, i = t.data.get(r.dataId).values, u = t.data.get(a.dataId).values, [c, l] = Qw(o, s.shape, s.dtype, i, u, true);
  return t.makeTensorInfo(l, s.dtype, c);
}
const OX = { kernelName: Ql, backendName: "cpu", kernelFunc: FX };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function PX(n) {
  const { inputs: e, backend: t } = n, { data: s, indices: r, segmentIds: a } = e;
  if (s.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
         ${r.shape}`);
  if (a.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
         ${a.shape}`);
  if (r.shape[0] !== a.shape[0]) throw new Error("segmentIds and indices should have same size.");
  const o = t.data.get(s.dataId).values, i = t.data.get(r.dataId).values, u = t.data.get(a.dataId).values, [c, l] = Qw(o, s.shape, s.dtype, i, u);
  return t.makeTensorInfo(l, s.dtype, c);
}
const LX = { kernelName: Zl, backendName: "cpu", kernelFunc: PX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function zX(n) {
  const { inputs: e, backend: t, attrs: s } = n, { sparseIndices: r, sparseValues: a, defaultValue: o } = e, { outputShape: i } = s, { sliceRank: u, numUpdates: c, sliceSize: l, strides: d, outputSize: h } = ds(a, r, i), p = false, f = t.bufferSync(r);
  let m;
  switch (a.dtype) {
    case "bool": {
      const g = t.bufferSync(a), y = !!t.data.get(o.dataId).values[0];
      m = Ci(f, g, i, h, l, c, u, d, y, p);
      break;
    }
    case "float32": {
      const g = t.bufferSync(a), y = t.data.get(o.dataId).values[0];
      m = Ci(f, g, i, h, l, c, u, d, y, p);
      break;
    }
    case "int32": {
      const g = t.bufferSync(a), y = t.data.get(o.dataId).values[0];
      m = Ci(f, g, i, h, l, c, u, d, y, p);
      break;
    }
    case "string": {
      const g = t.bufferSync(a), y = Fs(t.data.get(o.dataId).values[0]);
      m = Ci(f, g, i, h, l, c, u, d, y, p);
      break;
    }
    default:
      throw new Error(`Unsupported type ${a.dtype}`);
  }
  return t.makeTensorInfo(i, m.dtype, m.values);
}
const MX = { kernelName: Vu, backendName: "cpu", kernelFunc: zX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function BX(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { numOrSizeSplits: a, axis: o } = s, i = Ee(o, r.shape)[0], u = mh(r, a, i), c = new Array(r.shape.length).fill(0), l = r.shape.slice();
  return u.map((d) => {
    const h = [...l];
    h[i] = d;
    const p = Ui({ inputs: { x: r }, backend: t, attrs: { begin: c, size: h } });
    return c[i] += d, p;
  });
}
const WX = { kernelName: Wu, backendName: "cpu", kernelFunc: BX };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const VX = { kernelName: Jl, backendName: "cpu", kernelFunc: ({ inputs: n, backend: e }) => {
  const { x: t } = n, s = e;
  Ie(t, "square");
  const r = s.data.get(t.dataId).values, a = new Float32Array(r.length);
  for (let i = 0; i < r.length; ++i) {
    const u = r[i];
    a[i] = u * u;
  }
  return { dataId: s.write(a, t.shape, t.dtype), shape: t.shape, dtype: t.dtype };
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const UX = gt(jr, (n, e) => {
  const t = e;
  return isNaN(n) ? NaN : n > 0 ? 1 : t.alpha;
}), GX = { kernelName: jr, backendName: "cpu", kernelFunc: UX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function HX(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { begin: a, end: o, strides: i, beginMask: u, endMask: c, ellipsisMask: l, newAxisMask: d, shrinkAxisMask: h } = s;
  Ie(r, "stridedSlice");
  const { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: x, strides: w } = uh(r.shape, a, o, i, u, c, l, d, h);
  let C;
  if (m) C = vt({ inputs: { x: r }, backend: t, attrs: { shape: f } });
  else if (g || y) {
    $(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    const v = ih(b, x, w), k = Ui({ inputs: { x: r }, backend: t, attrs: { begin: b, size: v } });
    C = vt({ inputs: { x: k }, backend: t, attrs: { shape: f } }), t.disposeIntermediateTensorInfo(k);
  } else {
    const v = t.bufferSync(r), k = L2(p, v, w, b);
    C = t.makeTensorInfo(f, k.dtype, k.values);
  }
  return C;
}
const jX = { kernelName: Uu, backendName: "cpu", kernelFunc: HX };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function qX(n) {
  const { inputs: e, backend: t, attrs: s } = n, { separator: r, nGramWidths: a, leftPad: o, rightPad: i, padWidth: u, preserveShortSequences: c } = s, { data: l, dataSplits: d } = e, h = t.data.get(l.dataId).values, p = t.data.get(d.dataId).values, [f, m] = Zw(h, p, r, a, o, i, u, c);
  return [t.makeTensorInfo([f.length], "string", f), t.makeTensorInfo(d.shape, "int32", m)];
}
const KX = { kernelName: ec, backendName: "cpu", kernelFunc: qX };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function XX(n) {
  const { inputs: e, backend: t, attrs: s } = n, { skipEmpty: r } = s, { input: a, delimiter: o } = e;
  if (a.dtype !== "string") throw new Error("Input must be of datatype string");
  if (a.shape.length !== 1) throw new Error(`Input must be a vector, got shape: ${a.shape}`);
  if (o.shape.length !== 0) throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);
  const i = t.data.get(a.dataId).values, u = t.data.get(o.dataId).values[0], [c, l, d] = Jw(i, u, r), h = l.length;
  return [t.makeTensorInfo([h, 2], "int32", c), t.makeTensorInfo([h], "string", l), t.makeTensorInfo([2], "int32", new Int32Array(d))];
}
const YX = { kernelName: Od, backendName: "cpu", kernelFunc: XX };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function QX(n) {
  const { inputs: e, backend: t, attrs: s } = n, { numBuckets: r } = s, { input: a } = e;
  if (a.dtype !== "string") throw new Error("Input must be of datatype string");
  if (r <= 0) throw new Error("Number of buckets must be at least 1");
  const o = t.data.get(a.dataId).values, i = e0(o, r);
  return t.makeTensorInfo(a.shape, "int32", i);
}
const ZX = { kernelName: Pd, backendName: "cpu", kernelFunc: QX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const JX = gt(Ko, (n) => Math.tan(n)), e5 = { kernelName: Ko, backendName: "cpu", kernelFunc: JX };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const t5 = gt(Xo, (n) => Math.tanh(n)), n5 = { kernelName: Xo, backendName: "cpu", kernelFunc: t5 };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function s5(n) {
  const { inputs: e, backend: t } = n, { tensor: s, indices: r, updates: a } = e, { sliceRank: o, numUpdates: i, sliceSize: u, strides: c, outputSize: l } = ds(a, r, s.shape), d = false, h = t.bufferSync(r), p = t.bufferSync(a), f = t.bufferSync(s), m = Ci(h, p, s.shape, l, u, i, o, c, f, d);
  return t.makeTensorInfo(s.shape, m.dtype, m.values);
}
const r5 = { kernelName: Pu, backendName: "cpu", kernelFunc: s5 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function a5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { reps: a } = s;
  Ie(r, "tile");
  const o = M2(t.bufferSync(r), a);
  return t.makeTensorInfo(o.shape, o.dtype, o.values);
}
const o5 = { kernelName: Hr, backendName: "cpu", kernelFunc: a5 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function i5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { k: a, sorted: o } = s;
  Ie(r, "topk");
  const i = t.data.get(r.dataId).values, [u, c] = W2(i, r.shape, r.dtype, a, o);
  return [t.makeTensorInfo(u.shape, u.dtype, u.values), t.makeTensorInfo(c.shape, c.dtype, c.values)];
}
const u5 = { kernelName: Gu, backendName: "cpu", kernelFunc: i5 };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function l5(n) {
  const { inputs: e, attrs: t, backend: s } = n, { image: r, transforms: a } = e, { interpolation: o, fillMode: i, fillValue: u, outputShape: c } = t, [l, d, h, p] = r.shape, [f, m] = c ?? [d, h], g = [l, f, m, p], y = me(r.shape), b = y[0], x = y[1], w = y[2], C = me(g), v = C[0], k = C[1], R = C[2], N = Ht(r.dtype, A(g));
  N.fill(u);
  const T = s.data.get(r.dataId).values, S = s.data.get(a.dataId).values;
  for (let P = 0; P < l; ++P) {
    const M = a.shape[0] === 1 ? S : S.subarray(P * 8, P * 8 + 8);
    for (let L = 0; L < f; ++L) for (let V = 0; V < m; ++V) for (let q = 0; q < p; ++q) {
      let G;
      const K = M[6] * V + M[7] * L + 1;
      if (K === 0) continue;
      const X = (M[0] * V + M[1] * L + M[2]) / K, Z = (M[3] * V + M[4] * L + M[5]) / K, ee = oC(X, h, i), J = oC(Z, d, i);
      switch (o) {
        case "nearest":
          G = m5(T, d, h, b, x, w, P, J, ee, q, u);
          break;
        case "bilinear":
          G = g5(T, d, h, b, x, w, P, J, ee, q, u);
          break;
        default:
          throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`);
      }
      const re = P * v + L * k + V * R + q;
      N[re] = G;
    }
    return s.makeTensorInfo(g, r.dtype, N);
  }
  return { dataId: s.write(N, g, r.dtype), shape: r.shape, dtype: r.dtype };
}
const c5 = { kernelName: Hu, backendName: "cpu", kernelFunc: l5 };
function oC(n, e, t) {
  switch (t) {
    case "reflect":
      return d5(n, e);
    case "wrap":
      return h5(n, e);
    case "nearest":
      return f5(n, e);
    case "constant":
    default:
      return p5(n);
  }
}
function d5(n, e) {
  let t = n;
  if (t < 0) if (e <= 1) t = 0;
  else {
    const s = 2 * e;
    t < s && (t = s * Math.trunc(-t / s) + t), t = t < -e ? t + s : -t - 1;
  }
  else if (t > e - 1) if (e <= 1) t = 0;
  else {
    const s = 2 * e;
    t -= s * Math.trunc(t / s), t >= e && (t = s - t - 1);
  }
  return ga(0, t, e - 1);
}
function h5(n, e) {
  let t = n;
  if (t < 0) if (e <= 1) t = 0;
  else {
    const s = e - 1;
    t += e * (Math.trunc(-t / s) + 1);
  }
  else if (t > e - 1) if (e <= 1) t = 0;
  else {
    const s = e - 1;
    t -= e * Math.trunc(t / s);
  }
  return ga(0, t, e - 1);
}
function p5(n, e) {
  return n;
}
function f5(n, e) {
  return ga(0, n, e - 1);
}
function Vc(n, e, t, s, r, a, o, i, u, c, l) {
  const d = o * s + i * r + u * a + c;
  return 0 <= i && i < e && 0 <= u && u < t ? n[d] : l;
}
function m5(n, e, t, s, r, a, o, i, u, c, l) {
  const d = Math.round(i), h = Math.round(u);
  return Vc(n, e, t, s, r, a, o, d, h, c, l);
}
function g5(n, e, t, s, r, a, o, i, u, c, l) {
  const d = Math.floor(i), h = Math.floor(u), p = d + 1, f = h + 1, m = (f - u) * Vc(n, e, t, s, r, a, o, d, h, c, l) + (u - h) * Vc(n, e, t, s, r, a, o, d, f, c, l), g = (f - u) * Vc(n, e, t, s, r, a, o, p, h, c, l) + (u - h) * Vc(n, e, t, s, r, a, o, p, f, c, l);
  return (p - i) * m + (i - d) * g;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function y5(n) {
  const { inputs: e, attrs: t, backend: s } = n, { axis: r } = t, { x: a } = e;
  Ie(a, "unique");
  const o = s.data.get(a.dataId).values, { outputValues: i, outputShape: u, indices: c } = n0(o, r, a.shape, a.dtype);
  return [s.makeTensorInfo(u, a.dtype, i), s.makeTensorInfo([c.length], "int32", c)];
}
const b5 = { kernelName: Ld, backendName: "cpu", kernelFunc: y5 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function x5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { value: r } = e;
  let { axis: a } = s;
  a < 0 && (a += r.shape.length);
  const o = r.shape.length, i = r.shape[a], u = new Array(o - 1);
  let c = 0;
  for (let p = 0; p < o; p++) p !== a && (u[c++] = r.shape[p]);
  const l = new Array(o).fill(0), d = r.shape.slice();
  d[a] = 1;
  const h = new Array(i);
  for (let p = 0; p < h.length; p++) {
    l[a] = p;
    const f = Ui({ inputs: { x: r }, backend: t, attrs: { begin: l, size: d } });
    h[p] = vt({ inputs: { x: f }, backend: t, attrs: { shape: u } }), t.disposeIntermediateTensorInfo(f);
  }
  return h;
}
const w5 = { kernelName: ju, backendName: "cpu", kernelFunc: x5 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function C5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, segmentIds: a } = e, { numSegments: o } = s;
  Ie(r, "unsortedSegmentSum");
  const i = r.shape.length, u = a.shape.length, c = [], l = [], d = i - u;
  let h = a;
  for (let f = 0; f < d; ++f) {
    const m = Yp({ inputs: { input: h }, backend: t, attrs: { dim: f + 1 } });
    h = m, l.push(m);
  }
  for (let f = 0; f < o; ++f) {
    const m = qr(f, "int32"), g = t.makeTensorInfo([], "int32", m), y = u2({ inputs: { a: g, b: h }, backend: t }), b = Ra({ inputs: { x: y }, backend: t, attrs: { dtype: "float32" } }), x = Rm({ inputs: { a: b, b: r }, backend: t }), w = Nh({ inputs: { x }, backend: t, attrs: { axis: 0, keepDims: false } });
    c.push(w), l.push(g), l.push(y), l.push(b), l.push(x), l.push(w);
  }
  const p = sk({ inputs: c, backend: t, attrs: { axis: 0 } });
  return l.forEach((f) => t.disposeIntermediateTensorInfo(f)), p;
}
const I5 = { kernelName: tc, backendName: "cpu", kernelFunc: C5 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const S5 = [yj, ZG, xj, Cj, rH, Sj, $j, Nj, Rj, Ej, Aj, Oj, Lj, Bj, Vj, Hj, qj, Xj, Qj, mj, Jj, tq, sq, oH, aq, nH, uH, iq, JG, lq, dq, hq, fq, gq, bq, wq, Iq, vq, kq, Tq, _q, Dq, Fq, Pq, Lq, Mq, Wq, Uq, Gq, Hq, jq, Kq, Qq, uj, Jq, lH, i6, cH, u6, hH, f6, m6, y6, fH, gH, x6, C6, S6, $6, bH, wH, eH, N6, cq, R6, E6, A6, lj, IH, vH, O6, kH, L6, B6, V6, H6, q6, X6, Y6, TH, Z6, eK, nK, rK, oK, uK, cK, _H, hK, mK, bK, DH, FH, CK, vK, NK, PH, RK, EK, DK, rk, PK, dj, MH, zK, BK, VK, GK, tH, ey, jK, hj, pj, fj, KK, YK, ZK, eX, nX, sX, aX, qH, iX, hX, fX, bX, XH, wX, IX, vX, YH, gK, NX, RX, EX, AX, OX, LX, MX, WX, JH, VX, tj, sj, GX, jX, KX, YX, ZX, ij, Xq, e5, n5, r5, o5, u5, c5, LH, b5, w5, I5, _K];
for (const n of S5) nc(n);
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bi = {}, ap = { alpha: false, antialias: false, premultipliedAlpha: false, preserveDrawingBuffer: false, depth: false, stencil: false, failIfMajorPerformanceCaveat: true };
function ak(n, e) {
  bi[n] = e;
}
function nr(n, e) {
  if (!(n in bi) || e != null) {
    const s = $5(n, e);
    if (s !== null) bi[n] = s;
    else return console.log("Could not get context for WebGL version", n), null;
  }
  const t = bi[n];
  return t == null || t.isContextLost() ? (delete bi[n], nr(n)) : (t.disable(t.DEPTH_TEST), t.disable(t.STENCIL_TEST), t.disable(t.BLEND), t.disable(t.DITHER), t.disable(t.POLYGON_OFFSET_FILL), t.disable(t.SAMPLE_COVERAGE), t.enable(t.SCISSOR_TEST), t.enable(t.CULL_FACE), t.cullFace(t.BACK), bi[n]);
}
function v5(n) {
  if (!U().getBool("IS_SAFARI") && typeof OffscreenCanvas < "u" && n === 2) return new OffscreenCanvas(300, 150);
  if (typeof document < "u") return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function $5(n, e) {
  if (n !== 1 && n !== 2) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  const t = e ?? v5(n);
  return t.addEventListener("webglcontextlost", (s) => {
    s.preventDefault(), delete bi[n];
  }, false), U().getBool("SOFTWARE_WEBGL_ENABLED") && (ap.failIfMajorPerformanceCaveat = false), n === 1 ? t.getContext("webgl", ap) || t.getContext("experimental-webgl", ap) : t.getContext("webgl2", ap);
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var pd;
(function(n) {
  n[n.DENSE = 0] = "DENSE", n[n.SHARED_BATCH = 1] = "SHARED_BATCH";
})(pd || (pd = {}));
var xs;
(function(n) {
  n[n.RENDER = 0] = "RENDER", n[n.UPLOAD = 1] = "UPLOAD", n[n.PIXELS = 2] = "PIXELS", n[n.DOWNLOAD = 3] = "DOWNLOAD";
})(xs || (xs = {}));
var yn;
(function(n) {
  n[n.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", n[n.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", n[n.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", n[n.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", n[n.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(yn || (yn = {}));
function Th(n, e) {
  return [e, n];
}
function k5(n, e) {
  return n * e;
}
function op(n) {
  const e = A(n), t = Math.ceil(e / 4);
  return Np(t);
}
function xc(n, e) {
  return [Math.max(1, Math.ceil(e / 2)), Math.max(1, Math.ceil(n / 2))];
}
function N5(n, e) {
  const [t, s] = xc(n, e);
  return t * s * 4;
}
function i0(n, e) {
  const t = n;
  let s, r, a, o, i, u, c, l, d, h;
  return U().getNumber("WEBGL_VERSION") === 2 ? (s = t.R32F, r = t.R16F, a = t.RGBA16F, o = t.RGBA32F, i = t.RED, c = 4, l = 1, d = t.HALF_FLOAT, h = t.FLOAT, u = t.RGBA8) : (s = n.RGBA, r = n.RGBA, a = n.RGBA, o = t.RGBA, i = n.RGBA, c = 4, l = 4, d = e != null ? e.HALF_FLOAT_OES : null, h = n.FLOAT, u = n.RGBA), { internalFormatFloat: s, internalFormatHalfFloat: r, internalFormatPackedHalfFloat: a, internalFormatPackedFloat: o, textureFormatFloat: i, downloadTextureFormat: u, downloadUnpackNumChannels: c, defaultNumChannels: l, textureTypeHalfFloat: d, textureTypeFloat: h };
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function he(n, e) {
  const t = e();
  return U().getBool("DEBUG") && T5(n), t;
}
function T5(n) {
  const e = n.getError();
  if (e !== n.NO_ERROR) throw new Error("WebGL Error: " + ik(n, e));
}
const R5 = 596e-10, _5 = 65504;
function ok(n) {
  return !!(U().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || n === 0 || R5 < Math.abs(n) && Math.abs(n) < _5);
}
function ik(n, e) {
  switch (e) {
    case n.NO_ERROR:
      return "NO_ERROR";
    case n.INVALID_ENUM:
      return "INVALID_ENUM";
    case n.INVALID_VALUE:
      return "INVALID_VALUE";
    case n.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case n.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case n.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case n.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${e}`;
  }
}
function Uc(n, e) {
  return ta(n, () => n.getExtension(e), 'Extension "' + e + '" not supported on this browser.');
}
function uk(n, e) {
  const t = ta(n, () => n.createShader(n.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (he(n, () => n.shaderSource(t, e)), he(n, () => n.compileShader(t)), n.getShaderParameter(t, n.COMPILE_STATUS) === false) throw console.log(n.getShaderInfoLog(t)), new Error("Failed to compile vertex shader.");
  return t;
}
function lk(n, e) {
  const t = ta(n, () => n.createShader(n.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (he(n, () => n.shaderSource(t, e)), he(n, () => n.compileShader(t)), U().get("ENGINE_COMPILE_ONLY")) return t;
  if (n.getShaderParameter(t, n.COMPILE_STATUS) === false) throw u0(e, n.getShaderInfoLog(t)), new Error("Failed to compile fragment shader.");
  return t;
}
const E5 = /ERROR: [0-9]+:([0-9]+):/g;
function u0(n, e) {
  const t = E5.exec(e);
  if (t == null) {
    console.log(`Couldn't parse line number in error: ${e}`), console.log(n);
    return;
  }
  const s = +t[1], r = n.split(`
`), a = r.length.toString().length + 2, o = r.map((d, h) => Ii((h + 1).toString(), a) + d);
  let i = 0;
  for (let d = 0; d < o.length; d++) i = Math.max(o[d].length, i);
  const u = o.slice(0, s - 1), c = o.slice(s - 1, s), l = o.slice(s);
  console.log(u.join(`
`)), console.log(e.split(`
`)[0]), console.log(`%c ${Ii(c[0], i)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(l.join(`
`));
}
function ck(n) {
  return ta(n, () => n.createProgram(), "Unable to create WebGLProgram.");
}
function dk(n, e) {
  if (he(n, () => n.linkProgram(e)), !U().get("ENGINE_COMPILE_ONLY") && n.getProgramParameter(e, n.LINK_STATUS) === false) throw console.log(n.getProgramInfoLog(e)), new Error("Failed to link vertex and fragment shaders.");
}
function wp(n, e) {
  if (he(n, () => n.validateProgram(e)), n.getProgramParameter(e, n.VALIDATE_STATUS) === false) throw console.log(n.getProgramInfoLog(e)), new Error("Shader program validation failed.");
}
function hk(n, e) {
  const t = ta(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return he(n, () => n.bindBuffer(n.ARRAY_BUFFER, t)), he(n, () => n.bufferData(n.ARRAY_BUFFER, e, n.STATIC_DRAW)), t;
}
function pk(n, e) {
  const t = ta(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return he(n, () => n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, t)), he(n, () => n.bufferData(n.ELEMENT_ARRAY_BUFFER, e, n.STATIC_DRAW)), t;
}
function D5() {
  return U().getNumber("WEBGL_VERSION") === 2 ? 1 : 4;
}
function fk(n) {
  return ta(n, () => n.createTexture(), "Unable to create WebGLTexture.");
}
function mk(n, e) {
  const t = U().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (n <= 0 || e <= 0) {
    const s = `[${n}x${e}]`;
    throw new Error("Requested texture size " + s + " is invalid.");
  }
  if (n > t || e > t) {
    const s = `[${n}x${e}]`, r = `[${t}x${t}]`;
    throw new Error("Requested texture size " + s + " greater than WebGL maximum on this browser / GPU " + r + ".");
  }
}
function gk(n) {
  return ta(n, () => n.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function ny(n, e, t, s, r, a, o) {
  const i = n.getAttribLocation(e, t);
  return i === -1 ? false : (he(n, () => n.bindBuffer(n.ARRAY_BUFFER, s)), he(n, () => n.vertexAttribPointer(i, r, n.FLOAT, false, a, o)), he(n, () => n.enableVertexAttribArray(i)), true);
}
function yk(n, e, t) {
  Ik(n, t), he(n, () => n.activeTexture(n.TEXTURE0 + t)), he(n, () => n.bindTexture(n.TEXTURE_2D, e));
}
function A5(n, e) {
  Ik(n, e), he(n, () => n.activeTexture(n.TEXTURE0 + e)), he(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function bk(n, e, t) {
  return ta(n, () => n.getUniformLocation(e, t), 'uniform "' + t + '" not present in program.');
}
function xk(n, e, t) {
  return n.getUniformLocation(e, t);
}
function wk(n, e, t, s) {
  he(n, () => yk(n, e, s)), he(n, () => n.uniform1i(t, s));
}
function F5(n) {
  he(n, () => n.bindFramebuffer(n.FRAMEBUFFER, null)), he(n, () => n.viewport(0, 0, n.canvas.width, n.canvas.height)), he(n, () => n.scissor(0, 0, n.canvas.width, n.canvas.height));
}
function Cp(n, e, t) {
  he(n, () => n.bindFramebuffer(n.FRAMEBUFFER, t)), he(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, e, 0));
}
function sy(n, e) {
  he(n, () => n.bindFramebuffer(n.FRAMEBUFFER, e)), he(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, null, 0));
}
function Gc(n) {
  const e = n.checkFramebufferStatus(n.FRAMEBUFFER);
  if (e !== n.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + Ck(n, e));
}
function Ck(n, e) {
  switch (e) {
    case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case n.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${e}`;
  }
}
function ta(n, e, t) {
  const s = he(n, () => e());
  if (s == null) throw new Error(t);
  return s;
}
function Ik(n, e) {
  const t = n.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, s = e + n.TEXTURE0;
  if (s < n.TEXTURE0 || s > t) {
    const r = `[gl.TEXTURE0, gl.TEXTURE${t}]`;
    throw new Error(`textureUnit must be in ${r}.`);
  }
}
function Gi(n, e = 2) {
  return A(n.slice(0, n.length - e));
}
function Hi(n) {
  if (n.length === 0) throw Error("Cannot get rows and columns of an empty shape array.");
  return [n.length > 1 ? n[n.length - 2] : 1, n[n.length - 1]];
}
function Hc(n) {
  let e = [1, 1, 1];
  return n.length === 0 || n.length === 1 && n[0] === 1 || (e = [Gi(n), ...Hi(n)]), e;
}
function Sk(n, e = false) {
  let t = U().getNumber("WEBGL_MAX_TEXTURE_SIZE"), s = U().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
  s === 1 / 0 && U().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (s = t / 2), e && (t = t * 2, s = s * 2, n = n.map((i, u) => u >= n.length - 2 ? af(n[u]) : n[u]), n.length === 1 && (n = [2, n[0]])), n.length !== 2 && (n = Wr(n).newShape);
  let r = A(n), a = null;
  n.length <= 1 && r <= t ? a = [1, r] : n.length === 2 && n[0] <= t && n[1] <= t ? a = n : n.length === 3 && n[0] * n[1] <= t && n[2] <= t ? a = [n[0] * n[1], n[2]] : n.length === 3 && n[0] <= t && n[1] * n[2] <= t ? a = [n[0], n[1] * n[2]] : n.length === 4 && n[0] * n[1] * n[2] <= t && n[3] <= t ? a = [n[0] * n[1] * n[2], n[3]] : n.length === 4 && n[0] <= t && n[1] * n[2] * n[3] <= t && (a = [n[0], n[1] * n[2] * n[3]]);
  const o = a != null && Math.max(...a) > s && Math.min(...a) <= (e ? 2 : 1) && Math.min(...a) > 0;
  if (a == null || o) if (e) {
    const i = Gi(n);
    let u = 2, c = 2;
    n.length && ([u, c] = Hi(n)), r = i * (u / 2) * (c / 2), a = Np(r).map((l) => l * 2);
  } else a = Np(r);
  return a;
}
function ip(n) {
  return n % 2 === 0;
}
function fd(n, e) {
  if (n = n.slice(-2), e = e.slice(-2), Be(n, e) || !n.length || !e.length || n[0] === 0 || n[1] === 0 || e[0] === 0 || e[1] === 0) return true;
  if (n.length !== e.length) {
    const t = n[n.length - 1], s = e[e.length - 1];
    if (t === s || ip(t) && ip(s) && (n[0] === 1 || e[0] === 1)) return true;
  }
  return n[1] === e[1] && ip(n[0]) && ip(e[0]);
}
let Ip, Sp;
function vk(n) {
  if (Ip == null) {
    const e = nr(n);
    Ip = e.getParameter(e.MAX_TEXTURE_SIZE);
  }
  return Ip;
}
function O5() {
  Ip = null;
}
function P5() {
  Sp = null;
}
function $k(n) {
  if (Sp == null) {
    const e = nr(n);
    Sp = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, Sp);
}
function kk(n) {
  if (n === 0) return 0;
  let e;
  const t = nr(n);
  return ws(t, "EXT_disjoint_timer_query_webgl2") && n === 2 ? e = 2 : ws(t, "EXT_disjoint_timer_query") ? e = 1 : e = 0, e;
}
function ws(n, e) {
  return n.getExtension(e) != null;
}
function ry(n) {
  try {
    if (nr(n) != null) return true;
  } catch (e) {
    return console.log("Error when getting WebGL context: ", e), false;
  }
  return false;
}
function Nk(n) {
  if (n === 0) return false;
  const e = nr(n);
  if (n === 1) {
    if (!ws(e, "OES_texture_float")) return false;
  } else if (!ws(e, "EXT_color_buffer_float")) return false;
  return ay(e);
}
function Tk(n) {
  if (n === 0) return false;
  const e = nr(n);
  if (n === 1) {
    if (!ws(e, "OES_texture_float") || !ws(e, "WEBGL_color_buffer_float")) return false;
  } else {
    if (ws(e, "EXT_color_buffer_float")) return ay(e);
    const s = "EXT_color_buffer_half_float";
    if (ws(e, s)) {
      const r = e.getExtension(s);
      return L5(e, r);
    }
    return false;
  }
  return ay(e);
}
function ay(n) {
  const e = i0(n), t = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, t), n.texImage2D(n.TEXTURE_2D, 0, e.internalFormatFloat, 1, 1, 0, e.textureFormatFloat, e.textureTypeFloat, null);
  const a = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, a), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, t, 0);
  const o = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(t), n.deleteFramebuffer(a), o;
}
function L5(n, e) {
  const t = i0(n, e), s = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, s), n.texImage2D(n.TEXTURE_2D, 0, t.internalFormatHalfFloat, 1, 1, 0, t.textureFormatFloat, t.textureTypeHalfFloat, null);
  const o = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, o), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, s, 0);
  const i = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(s), n.deleteFramebuffer(o), i;
}
function Rk(n) {
  return n !== 2 ? false : nr(n).fenceSync != null;
}
function wc(n, e) {
  Array.isArray(n) || (n = [n]), n.forEach((t) => {
    t != null && $(t.dtype !== "complex64", () => `${e} does not support complex64 tensors in the WebGL backend.`);
  });
}
const z5 = Object.freeze(Object.defineProperty({ __proto__: null, assertNotComplex: wc, bindCanvasToFramebuffer: F5, bindColorTextureToFramebuffer: Cp, bindTextureToProgramUniformSampler: wk, bindTextureUnit: yk, bindVertexBufferToProgramAttribute: ny, callAndCheck: he, canBeRepresented: ok, createFragmentShader: lk, createFramebuffer: gk, createProgram: ck, createStaticIndexBuffer: pk, createStaticVertexBuffer: hk, createTexture: fk, createVertexShader: uk, getBatchDim: Gi, getExtensionOrThrow: Uc, getFramebufferErrorMessage: Ck, getMaxTexturesInShader: $k, getNumChannels: D5, getProgramUniformLocation: xk, getProgramUniformLocationOrThrow: bk, getRowsCols: Hi, getShapeAs3D: Hc, getTextureShapeFromLogicalShape: Sk, getWebGLDisjointQueryTimerVersion: kk, getWebGLErrorMessage: ik, getWebGLMaxTextureSize: vk, hasExtension: ws, isCapableOfRenderingToFloatTexture: Nk, isDownloadFloatTextureEnabled: Tk, isReshapeFree: fd, isWebGLFenceEnabled: Rk, isWebGLVersionEnabled: ry, linkProgram: dk, logShaderSourceAndInfoLog: u0, resetMaxTextureSize: O5, resetMaxTexturesInShader: P5, unbindColorTextureFromFramebuffer: sy, unbindTextureUnit: A5, validateFramebuffer: Gc, validateProgram: wp, validateTextureSize: mk }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $e = U();
$e.registerFlag("HAS_WEBGL", () => $e.getNumber("WEBGL_VERSION") > 0);
$e.registerFlag("WEBGL_VERSION", () => ry(2) ? 2 : ry(1) ? 1 : 0);
$e.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => false);
$e.registerFlag("WEBGL_BUFFER_SUPPORTED", () => $e.get("WEBGL_VERSION") === 2);
$e.registerFlag("WEBGL_CPU_FORWARD", () => true);
$e.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => false);
$e.registerFlag("WEBGL_PACK", () => $e.getBool("HAS_WEBGL"));
$e.registerFlag("WEBGL_PACK_NORMALIZATION", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_CLIP", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_REDUCE", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_LAZILY_UNPACK", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_CONV_IM2COL", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => vk($e.getNumber("WEBGL_VERSION")));
$e.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => $k($e.getNumber("WEBGL_VERSION")));
$e.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  const n = $e.getNumber("WEBGL_VERSION");
  return n === 0 ? 0 : kk(n);
});
$e.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => $e.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !ky());
$e.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => Nk($e.getNumber("WEBGL_VERSION")));
$e.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => $e.getBool("WEBGL_FORCE_F16_TEXTURES") ? false : $e.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
$e.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => Tk($e.getNumber("WEBGL_VERSION")));
$e.registerFlag("WEBGL_FENCE_API_ENABLED", () => Rk($e.getNumber("WEBGL_VERSION")));
$e.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => $e.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
$e.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (n) => {
  if (typeof n != "number") throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${n}.`);
  if (n < 0 && n !== -1) throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`);
});
$e.registerFlag("WEBGL_FLUSH_THRESHOLD", () => ky() ? 1 : -1, (n) => {
  if (typeof n != "number") throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${n}.`);
  if (n < 0 && n !== -1) throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`);
});
$e.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
$e.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => false);
$e.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
$e.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
$e.registerFlag("WEBGL_EXP_CONV", () => false);
$e.registerFlag("SOFTWARE_WEBGL_ENABLED", () => $e.getBool("IS_TEST"));
$e.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
$e.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => false);
$e.registerFlag("WEBGL2_ISNAN_CUSTOM", () => false);
$e.registerFlag("ENGINE_COMPILE_ONLY", () => false);
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Pn() {
  let n, e, t, s, r, a, o, i, u, c;
  return U().getNumber("WEBGL_VERSION") === 2 ? (n = "#version 300 es", e = "in", t = "out", s = "in", r = "texture", a = "outputColor", o = "out vec4 outputColor;", i = U().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", u = "", c = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (n = "", e = "attribute", t = "varying", s = "varying", r = "texture2D", a = "gl_FragColor", o = "", i = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, u = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, c = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), { version: n, attribute: e, varyingVs: t, varyingFs: s, texture2D: r, output: a, defineOutput: o, defineSpecialNaN: i, defineSpecialInf: u, defineRound: c };
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nl(n, e, t = "index") {
  const s = me(e);
  return s.map((r, a) => {
    const o = `int ${n[a]} = ${t} / ${r}`, i = a === s.length - 1 ? `int ${n[a + 1]} = ${t} - ${n[a]} * ${r}` : `index -= ${n[a]} * ${r}`;
    return `${o}; ${i};`;
  }).join("");
}
function _m(n, e, t = "index") {
  const s = me(e);
  return s.map((r, a) => {
    const o = `int ${n[a]} = ${t} / outShapeStrides[${a}]`, i = a === s.length - 1 ? `int ${n[a + 1]} = ${t} - ${n[a]} * outShapeStrides[${a}]` : `index -= ${n[a]} * outShapeStrides[${a}]`;
    return `${o}; ${i};`;
  }).join("");
}
function M5(n, e) {
  const t = n.length, s = n.map((a) => `${e}[${a}]`), r = new Array(t - 1);
  r[t - 2] = s[t - 1];
  for (let a = t - 3; a >= 0; --a) r[a] = `(${r[a + 1]} * ${s[a + 1]})`;
  return r;
}
function B5(n, e, t = "index") {
  const s = n.map((a, o) => o), r = M5(s, e);
  return r.map((a, o) => {
    const i = `int ${n[o]} = ${t} / ${r[o]}`, u = o === r.length - 1 ? `int ${n[o + 1]} = ${t} - ${n[o]} * ${r[o]}` : `index -= ${n[o]} * ${r[o]}`;
    return `${i}; ${u};`;
  }).join("");
}
function l0(n) {
  const e = me(n).map((t) => t.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`;
}
function c0() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
const _k = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const { getBroadcastDims: Ek } = xv;
function W5(n, e, t) {
  const s = [];
  if (n.forEach((p) => {
    const f = A(p.shapeInfo.logicalShape);
    if (p.shapeInfo.isUniform ? s.push(`uniform float ${p.name}${f > 1 ? `[${f}]` : ""};`) : (s.push(`uniform sampler2D ${p.name};`), s.push(`uniform int offset${p.name};`)), t.enableShapeUniforms) {
      const { uniformShape: m } = d0(t.packedInputs, p.shapeInfo.logicalShape, p.shapeInfo.texShape);
      switch (m.length) {
        case 1:
          s.push(`uniform int ${p.name}Shape;`);
          break;
        case 2:
          s.push(`uniform ivec2 ${p.name}Shape;`);
          break;
        case 3:
          s.push(`uniform ivec3 ${p.name}Shape;`);
          break;
        case 4:
          s.push(`uniform ivec4 ${p.name}Shape;`);
          break;
      }
      s.push(`uniform ivec2 ${p.name}TexShape;`);
    }
  }), t.enableShapeUniforms) {
    switch (e.logicalShape.length) {
      case 1:
        s.push("uniform int outShape;");
        break;
      case 2:
        s.push("uniform ivec2 outShape;"), s.push("uniform int outShapeStrides;");
        break;
      case 3:
        s.push("uniform ivec3 outShape;"), s.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        s.push("uniform ivec4 outShape;"), s.push("uniform ivec3 outShapeStrides;");
        break;
    }
    s.push("uniform ivec2 outTexShape;");
  }
  t.customUniforms && t.customUniforms.forEach((p) => {
    s.push(`uniform ${p.type} ${p.name}${p.arrayIndex ? `[${p.arrayIndex}]` : ""};`);
  });
  const r = s.join(`
`), a = n.map((p) => V5(p, e, t.packedInputs, t.enableShapeUniforms)).join(`
`), o = e.texShape, i = Pn(), u = H5(i);
  let c, l, d = K5(i);
  return e.isPacked ? (c = U5(e.logicalShape, o, t.enableShapeUniforms), l = q5(i)) : (c = G5(e.logicalShape, o, t.enableShapeUniforms), l = j5(i)), t.packedInputs && (d += Z5), [d, u, l, r, c, a, t.userCode].join(`
`);
}
function Cc(n, e = false) {
  const t = n.shapeInfo.logicalShape;
  switch (t.length) {
    case 0:
      return c8(n, e);
    case 1:
      return h8(n, e);
    case 2:
      return f8(n, e);
    case 3:
      return g8(n, e);
    case 4:
      return b8(n, e);
    case 5:
      return x8(n);
    case 6:
      return w8(n);
    default:
      throw new Error(`${t.length}-D input sampling is not yet supported`);
  }
}
function Dk(n, e) {
  switch (n.shapeInfo.logicalShape.length) {
    case 0:
      return l8(n);
    case 1:
      return d8(n, e);
    case 2:
      return p8(n, e);
    case 3:
      return m8(n, e);
    default:
      return y8(n, e);
  }
}
function V5(n, e, t = false, s) {
  let r = "";
  t ? r += Dk(n, s) : r += Cc(n, s);
  const a = n.shapeInfo.logicalShape, o = e.logicalShape;
  return a.length <= o.length && (t ? r += C8(n, e) : r += I8(n, e)), r;
}
function U5(n, e, t) {
  switch (n.length) {
    case 0:
      return Ak();
    case 1:
      return J5(n, e, t);
    case 2:
      return i8(n, e, t);
    case 3:
      return t8(n, e, t);
    default:
      return s8(n, e, t);
  }
}
function G5(n, e, t) {
  switch (n.length) {
    case 0:
      return Ak();
    case 1:
      return e8(n, e, t);
    case 2:
      return u8(n, e, t);
    case 3:
      return n8(n, e, t);
    case 4:
      return r8(n, e, t);
    case 5:
      return a8(n, e);
    case 6:
      return o8(n, e);
    default:
      throw new Error(`${n.length}-D output sampling is not yet supported`);
  }
}
function H5(n) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `;
}
function j5(n) {
  return `
    void setOutput(float val) {
      ${n.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function q5(n) {
  return `
    void setOutput(vec4 val) {
      ${n.output} = val;
    }
  `;
}
function K5(n) {
  return `${n.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${n.varyingFs} vec2 resultUV;
    ${n.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${n.defineSpecialNaN}
    ${n.defineSpecialInf}
    ${n.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${X5}
    ${Y5}
    ${Q5}
  `;
}
const X5 = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, Y5 = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, Q5 = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, Z5 = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function Ak() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function J5(n, e, t) {
  const s = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
  return s[0] === 1 ? t ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    ` : s[1] === 1 ? t ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    ` : t ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `;
}
function e8(n, e, t) {
  return e[0] === 1 ? t ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${e[1]}.0);
      }
    ` : e[1] === 1 ? t ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${e[0]}.0);
      }
    ` : t ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      return resTexRC.x * ${e[1]} + resTexRC.y;
    }
  `;
}
function t8(n, e, t) {
  if (t) return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  const s = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)], r = Math.ceil(n[2] / 2), a = r * Math.ceil(n[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      int b = index / ${a};
      index -= b * ${a};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function n8(n, e, t) {
  if (t) return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${_m(["r", "c", "d"], n)}
    return ivec3(r, c, d);
  }
`;
  const s = nl(["r", "c", "d"], n);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${s}
      return ivec3(r, c, d);
    }
  `;
}
function s8(n, e, t) {
  if (t) return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  const s = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)], r = Math.ceil(n[n.length - 1] / 2), a = r * Math.ceil(n[n.length - 2] / 2);
  let o = a, i = "", u = "b, r, c";
  for (let c = 2; c < n.length - 1; c++) o *= n[n.length - c - 1], i = `
      int b${c} = index / ${o};
      index -= b${c} * ${o};
    ` + i, u = `b${c}, ` + u;
  return `
    ivec${n.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      ${i}

      int b = index / ${a};
      index -= b * ${a};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec${n.length}(${u});
    }
  `;
}
function r8(n, e, t) {
  if (t) return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${_m(["r", "c", "d", "d2"], n)}
      return ivec4(r, c, d, d2);
    }
  `;
  const s = nl(["r", "c", "d", "d2"], n);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${s}
      return ivec4(r, c, d, d2);
    }
  `;
}
function a8(n, e) {
  const t = nl(["r", "c", "d", "d2", "d3"], n);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},
                             ${e[1]}));

      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function o8(n, e) {
  const t = nl(["r", "c", "d", "d2", "d3", "d4"], n);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function i8(n, e, t) {
  const s = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
  if (Be(n, e)) return t ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `;
  const r = Math.ceil(n[1] / 2);
  return t ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));

      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec2(r, c);
    }
  `;
}
function u8(n, e, t) {
  return Be(n, e) ? t ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));
      }
    ` : n[1] === 1 ? t ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : n[0] === 1 ? t ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : t ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      int r = index / ${n[1]};
      int c = index - r * ${n[1]};
      return ivec2(r, c);
    }
  `;
}
function sl(n) {
  return `offset${n}`;
}
function l8(n) {
  const e = n.name, t = "get" + e.charAt(0).toUpperCase() + e.slice(1), s = Pn();
  return `
    vec4 ${t}() {
      return ${s.texture2D}(${e}, halfCR);
    }
  `;
}
function c8(n, e) {
  const t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1);
  if (n.shapeInfo.isUniform) return `float ${s}() {return ${t};}`;
  const [r, a] = n.shapeInfo.texShape;
  if (r === 1 && a === 1) return `
      float ${s}() {
        return sampleTexture(${t}, halfCR);
      }
    `;
  const o = sl(t);
  if (e) return `
    float ${s}() {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], ${o});
      return sampleTexture(${t}, uv);
    }
  `;
  const [i, u] = n.shapeInfo.texShape;
  return `
    float ${s}() {
      vec2 uv = uvFromFlat(${i}, ${u}, ${o});
      return sampleTexture(${t}, uv);
    }
  `;
}
function d8(n, e) {
  const t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1), r = n.shapeInfo.texShape, a = Pn();
  if (e) return `
    vec4 ${s}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${a.texture2D}(${t}, uv);
    }
  `;
  const o = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)];
  return `
    vec4 ${s}(int index) {
      vec2 uv = packedUVfrom1D(
        ${o[0]}, ${o[1]}, index);
      return ${a.texture2D}(${t}, uv);
    }
  `;
}
function h8(n, e) {
  const t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1);
  if (n.shapeInfo.isUniform) return `
      float ${s}(int index) {
        ${Ic(n)}
      }
    `;
  const r = n.shapeInfo.texShape, a = r[0], o = r[1];
  if (o === 1 && a === 1) return `
      float ${s}(int index) {
        return sampleTexture(${t}, halfCR);
      }
    `;
  const i = sl(t);
  return o === 1 ? e ? `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${t}TexShape[0]));
        return sampleTexture(${t}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);
        return sampleTexture(${t}, uv);
      }
    ` : a === 1 ? e ? `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${t}TexShape[1]), 0.5);
        return sampleTexture(${t}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);
        return sampleTexture(${t}, uv);
      }
    ` : e ? `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], index + ${i});
      return sampleTexture(${t}, uv);
    }
  ` : `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});
      return sampleTexture(${t}, uv);
    }
  `;
}
function p8(n, e) {
  const t = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), a = n.shapeInfo.texShape, o = a[0], i = a[1], u = Pn();
  if (a != null && Be(t, a)) return e ? `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);

        return ${u.texture2D}(${s}, uv);
      }
    ` : `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);

        return ${u.texture2D}(${s}, uv);
      }
    `;
  if (e) return `
    vec4 ${r}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${u.texture2D}(${s}, uv);
    }
  `;
  const c = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)], l = Math.ceil(t[1] / 2);
  return `
    vec4 ${r}(int row, int col) {
      vec2 uv = packedUVfrom2D(${l}, ${c[0]}, ${c[1]}, row, col);
      return ${u.texture2D}(${s}, uv);
    }
  `;
}
function f8(n, e) {
  const t = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), a = n.shapeInfo.texShape;
  if (a != null && Be(t, a)) {
    if (e) return `
      float ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `;
    const h = a[0], p = a[1];
    return `
    float ${r}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${p}.0, ${h}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  }
  const { newShape: o, keptDims: i } = Wr(t), u = o;
  if (u.length < t.length) {
    const h = Sc(n, u), p = ["row", "col"];
    return `
      ${Cc(h, e)}
      float ${r}(int row, int col) {
        return ${r}(${vc(p, i)});
      }
    `;
  }
  if (n.shapeInfo.isUniform) return `
      float ${r}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));
        ${Ic(n)}
      }
    `;
  const c = a[0], l = a[1], d = sl(s);
  return l === 1 ? e ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);
      return sampleTexture(${s}, uv);
    }
  ` : c === 1 ? e ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);
      return sampleTexture(${s}, uv);
    }
  ` : e ? `
      float ${r}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s}Shape[1] + col + ${d};
        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
        return sampleTexture(${s}, uv);
      }
    ` : `
  float ${r}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${t[1]} + col + ${d};
    vec2 uv = uvFromFlat(${c}, ${l}, index);
    return sampleTexture(${s}, uv);
  }
`;
}
function m8(n, e) {
  const t = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), a = n.shapeInfo.texShape, o = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)];
  if (t[0] === 1) {
    const h = t.slice(1), p = [1, 2], f = Sc(n, h), m = ["b", "row", "col"];
    return `
        ${Dk(f, e)}
        vec4 ${r}(int b, int row, int col) {
          return ${r}(${vc(m, p)});
        }
      `;
  }
  const i = Pn();
  if (e) return `
    vec4 ${r}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${i.texture2D}(${s}, uv);
    }
  `;
  const u = o[0], c = o[1], l = Math.ceil(t[2] / 2), d = l * Math.ceil(t[1] / 2);
  return `
    vec4 ${r}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${u}, ${c}, ${d}, ${l}, b, row, col);
      return ${i.texture2D}(${s}, uv);
    }
  `;
}
function g8(n, e) {
  const t = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), a = t[1] * t[2], o = t[2], { newShape: i, keptDims: u } = Wr(t), c = i;
  if (c.length < t.length) {
    const m = Sc(n, c), g = ["row", "col", "depth"];
    return `
        ${Cc(m, e)}
        float ${r}(int row, int col, int depth) {
          return ${r}(${vc(g, u)});
        }
      `;
  }
  if (n.shapeInfo.isUniform) return `
      float ${r}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${a}, ${o}, 1)));
        ${Ic(n)}
      }
    `;
  const l = n.shapeInfo.texShape, d = l[0], h = l[1], p = n.shapeInfo.flatOffset;
  if (h === a && p == null) return e ? `
      float ${r}(int row, int col, int depth) {
        int stride1 = ${s}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
        float ${r}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${o}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${h}.0, ${d}.0);
          return sampleTexture(${s}, uv);
        }
      `;
  if (h === o && p == null) return e ? `
      float ${r}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${d}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  const f = sl(s);
  return e ? `
    float ${r}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${s}Shape[1] * ${s}Shape[2];
      int stride1 = ${s}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
      return sampleTexture(${s}, uv);
    }
    ` : `
      float ${r}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${a} + col * ${o} + depth + ${f};
        vec2 uv = uvFromFlat(${d}, ${h}, index);
        return sampleTexture(${s}, uv);
      }
  `;
}
function y8(n, e) {
  const t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1), r = Pn();
  if (e) return `
    vec4 ${s}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${t}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${t}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${t}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${t}, uv);
    }
  `;
  const a = n.shapeInfo.logicalShape, o = a.length, i = n.shapeInfo.texShape, u = [Math.ceil(i[0] / 2), Math.ceil(i[1] / 2)], c = u[0], l = u[1], d = Math.ceil(a[o - 1] / 2);
  let h = d * Math.ceil(a[o - 2] / 2), p = "int b, int row, int col", f = `b * ${h} + (row / 2) * ${d} + (col / 2)`;
  for (let m = 2; m < o - 1; m++) p = `int b${m}, ` + p, h *= a[o - m - 1], f = `b${m} * ${h} + ` + f;
  return `
    vec4 ${s}(${p}) {
      int index = ${f};
      int texR = index / ${l};
      int texC = index - texR * ${l};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${c});
      return ${r.texture2D}(${t}, uv);
    }
  `;
}
function b8(n, e) {
  const t = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), a = t[3], o = t[2] * a, i = t[1] * o, { newShape: u, keptDims: c } = Wr(t);
  if (u.length < t.length) {
    const b = Sc(n, u), x = ["row", "col", "depth", "depth2"];
    return `
      ${Cc(b, e)}
      float ${r}(int row, int col, int depth, int depth2) {
        return ${r}(${vc(x, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform) return `
      float ${r}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${i}, ${o}, ${a}, 1)));
        ${Ic(n)}
      }
    `;
  const l = n.shapeInfo.flatOffset, d = n.shapeInfo.texShape, h = d[0], p = d[1], f = `int stride2 = ${s}Shape[3];`, m = `int stride1 = ${s}Shape[2] * stride2;`, g = `int stride0 = ${s}Shape[1] * stride1;`;
  if (p === i && l == null) return e ? `
      float ${r}(int row, int col, int depth, int depth2) {
        ${f}
        ${m}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${o}, ${a}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${h}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  if (p === a && l == null) return e ? `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${t[1] * t[2]}, ${t[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${h}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  const y = sl(s);
  return e ? `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${m}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});
      return sampleTexture(${s}, uv);
    }
  ` : `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${o} +
          depth * ${a} + depth2;
      vec2 uv = uvFromFlat(${h}, ${p}, index + ${y});
      return sampleTexture(${s}, uv);
    }
  `;
}
function x8(n) {
  const e = n.shapeInfo.logicalShape, t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1), r = e[4], a = e[3] * r, o = e[2] * a, i = e[1] * o, { newShape: u, keptDims: c } = Wr(e);
  if (u.length < e.length) {
    const m = Sc(n, u), g = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${Cc(m)}
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        return ${s}(${vc(g, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform) return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${i}, ${o}, ${a}, ${r})) +
          depth3;
        ${Ic(n)}
      }
    `;
  const l = n.shapeInfo.flatOffset, d = n.shapeInfo.texShape, h = d[0], p = d[1];
  if (p === i && l == null) return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${o}, ${a}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${h}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  if (p === r && l == null) return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3]},
               ${e[2] * e[3]}, ${e[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${h}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  const f = sl(t);
  return `
    float ${s}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${o} + depth * ${a} +
          depth2 * ${r} + depth3 + ${f};
      vec2 uv = uvFromFlat(${h}, ${p}, index);
      return sampleTexture(${t}, uv);
    }
  `;
}
function w8(n) {
  const e = n.shapeInfo.logicalShape, t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1), { newShape: r, keptDims: a } = Wr(e);
  if (r.length < e.length) {
    const g = Sc(n, r), y = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${Cc(g)}
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${s}(${vc(y, a)});
      }
    `;
  }
  const o = e[5], i = e[4] * o, u = e[3] * i, c = e[2] * u, l = e[1] * c;
  if (n.shapeInfo.isUniform) return `
      float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${l}, ${c}, ${u}, ${i})) +
          dot(
            vec2(depth3, depth4),
            vec2(${o}, 1)));
        ${Ic(n)}
      }
    `;
  const d = n.shapeInfo.flatOffset, h = n.shapeInfo.texShape, p = h[0], f = h[1];
  if (f === l && d == null) return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${c}, ${u}, ${i}, ${o})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${p}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  if (f === o && d == null) return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3] * e[4]},
               ${e[2] * e[3] * e[4]},
               ${e[3] * e[4]},
               ${e[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${p}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  const m = sl(t);
  return `
    float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${c} + depth * ${u} +
          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};
      vec2 uv = uvFromFlat(${p}, ${f}, index);
      return sampleTexture(${t}, uv);
    }
  `;
}
function Ic(n) {
  const e = n.name, t = A(n.shapeInfo.logicalShape);
  return t < 2 ? `return ${e};` : `
    for (int i = 0; i < ${t}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `;
}
function C8(n, e) {
  const t = n.name, s = t.charAt(0).toUpperCase() + t.slice(1), r = "get" + s + "AtOutCoords", a = n.shapeInfo.logicalShape.length, o = e.logicalShape.length, i = Ek(n.shapeInfo.logicalShape, e.logicalShape), u = bt(o), c = o - a;
  let l;
  const d = ["x", "y", "z", "w", "u", "v"];
  a === 0 ? l = "" : o < 2 && i.length >= 1 ? l = "coords = 0;" : l = i.map((b) => `coords.${d[b + c]} = 0;`).join(`
`);
  let h = "";
  o < 2 && a > 0 ? h = "coords" : h = n.shapeInfo.logicalShape.map((b, x) => `coords.${d[x + c]}`).join(", ");
  let p = "return outputValue;";
  const m = A(n.shapeInfo.logicalShape) === 1, y = A(e.logicalShape) === 1;
  if (a === 1 && !m && !y) p = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (m && !y) o === 1 ? p = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : p = `
        return vec4(outputValue.x);
      `;
  else if (i.length) {
    const b = a - 2, x = a - 1;
    i.indexOf(b) > -1 && i.indexOf(x) > -1 ? p = "return vec4(outputValue.x);" : i.indexOf(b) > -1 ? p = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : i.indexOf(x) > -1 && (p = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${r}() {
      ${u} coords = getOutputCoords();
      ${l}
      vec4 outputValue = get${s}(${h});
      ${p}
    }
  `;
}
function I8(n, e) {
  const t = n.name, s = t.charAt(0).toUpperCase() + t.slice(1), r = "get" + s + "AtOutCoords", a = e.texShape, o = n.shapeInfo.texShape, i = n.shapeInfo.logicalShape.length, u = e.logicalShape.length;
  if (!n.shapeInfo.isUniform && i === u && n.shapeInfo.flatOffset == null && Be(o, a)) return `
      float ${r}() {
        return sampleTexture(${t}, resultUV);
      }
    `;
  const c = bt(u), l = Ek(n.shapeInfo.logicalShape, e.logicalShape), d = u - i;
  let h;
  const p = ["x", "y", "z", "w", "u", "v"];
  i === 0 ? h = "" : u < 2 && l.length >= 1 ? h = "coords = 0;" : h = l.map((m) => `coords.${p[m + d]} = 0;`).join(`
`);
  let f = "";
  return u < 2 && i > 0 ? f = "coords" : f = n.shapeInfo.logicalShape.map((m, g) => `coords.${p[g + d]}`).join(", "), `
    float ${r}() {
      ${c} coords = getOutputCoords();
      ${h}
      return get${s}(${f});
    }
  `;
}
function bt(n) {
  if (n <= 1) return "int";
  if (n === 2) return "ivec2";
  if (n === 3) return "ivec3";
  if (n === 4) return "ivec4";
  if (n === 5) return "ivec5";
  if (n === 6) return "ivec6";
  throw Error(`GPU for rank ${n} is not yet supported`);
}
function d0(n, e, t) {
  const { newShape: s, keptDims: r } = Wr(e), a = e.length, o = n && a === 3 && e[0] === 1, i = o ? e.slice(1) : s, u = !n && a > 1 && !Be(e, t) && s.length < a || o;
  return { useSqueezeShape: u, uniformShape: u ? i : e, keptDims: r };
}
function Sc(n, e) {
  const t = JSON.parse(JSON.stringify(n));
  return t.shapeInfo.logicalShape = e, t;
}
function vc(n, e) {
  return e.map((t) => n[t]).join(", ");
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function S8(n, e, t, s) {
  const r = t.map((l, d) => {
    const h = { logicalShape: l.shape, texShape: l.isUniform ? null : l.texData.texShape, isUniform: l.isUniform, isPacked: l.isUniform ? false : l.texData.isPacked, flatOffset: null };
    return l.texData != null && l.texData.slice != null && l.texData.slice.flatOffset > 0 && (h.flatOffset = l.texData.slice.flatOffset), { name: e.variableNames[d], shapeInfo: h };
  }), a = r.map((l) => l.shapeInfo), o = { logicalShape: s.shape, texShape: s.texData.texShape, isUniform: false, isPacked: s.texData.isPacked, flatOffset: null }, i = W5(r, o, e), u = lk(n.gl, i), c = n.createProgram(u);
  return U().get("ENGINE_COMPILE_ONLY") ? { program: e, fragmentShader: u, source: i, webGLProgram: c, inShapeInfos: a, outShapeInfo: o, variablesLocations: null, customUniformLocations: null, infLoc: null, nanLoc: null, outShapeLocation: null, outShapeStridesLocation: null, outTexShapeLocation: null } : (n.buildVao(c), Object.assign({ program: e, fragmentShader: u, source: i, webGLProgram: c, inShapeInfos: a, outShapeInfo: o }, Fk(n, e, c)));
}
function Fk(n, e, t) {
  const s = [], r = [];
  let a, o, i, u = null, c = null;
  c = n.getUniformLocation(t, "NAN", false), U().getNumber("WEBGL_VERSION") === 1 && (u = n.getUniformLocation(t, "INFINITY", false));
  const l = false;
  for (const d of e.variableNames) {
    const h = { name: d, uniform: n.getUniformLocation(t, d, l), offset: n.getUniformLocation(t, `offset${d}`, l) };
    e.enableShapeUniforms && (h.shape = n.getUniformLocation(t, `${d}Shape`, l), h.texShape = n.getUniformLocation(t, `${d}TexShape`, l)), s.push(h);
  }
  if (e.enableShapeUniforms && (a = n.getUniformLocation(t, "outShape", l), i = n.getUniformLocation(t, "outShapeStrides", l), o = n.getUniformLocation(t, "outTexShape", l)), e.customUniforms) for (const d of e.customUniforms) r.push(n.getUniformLocation(t, d.name, l));
  return { variablesLocations: s, customUniformLocations: r, infLoc: u, nanLoc: c, outShapeLocation: a, outShapeStridesLocation: i, outTexShapeLocation: o };
}
function iC(n, e) {
  if (n.length !== e.length) throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${e.length} inputs`);
  n.forEach((t, s) => {
    const r = t.logicalShape, a = e[s], o = a.shape;
    if (!Be(r, o)) throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${o} must match`);
    if (t.isUniform && a.isUniform) return;
    const i = t.texShape, u = a.isUniform ? null : a.texData.texShape;
    if (!Be(i, u)) throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${u} must match`);
  });
}
function v8(n, e, t, s, r) {
  e.program.enableShapeUniforms || (iC(e.inShapeInfos, t), iC([e.outShapeInfo], [s]));
  const a = s.texData.texture, o = s.texData.texShape;
  s.texData.isPacked ? n.setOutputPackedMatrixTexture(a.texture, o[0], o[1]) : n.setOutputMatrixTexture(a.texture, o[0], o[1]), n.setProgram(e.webGLProgram), n.bindVertexArray(e.webGLProgram.vao), U().getNumber("WEBGL_VERSION") === 1 && e.infLoc !== null && n.gl.uniform1f(e.infLoc, 1 / 0), e.nanLoc !== null && n.gl.uniform1f(e.nanLoc, NaN);
  for (let u = 0; u < t.length; ++u) {
    const c = t[u], { uniform: l, offset: d, shape: h, texShape: p } = e.variablesLocations[u];
    if (h) {
      const { uniformShape: f } = d0(e.program.packedInputs, c.shape, c.texData.texShape);
      switch (f.length) {
        case 1:
          n.gl.uniform1iv(h, new Int32Array(f));
          break;
        case 2:
          n.gl.uniform2iv(h, new Int32Array(f));
          break;
        case 3:
          n.gl.uniform3iv(h, new Int32Array(f));
          break;
        case 4:
          n.gl.uniform4iv(h, new Int32Array(f));
          break;
      }
    }
    if (p && n.gl.uniform2i(p, c.texData.texShape[0], c.texData.texShape[1]), l != null) {
      if (c.isUniform) {
        if (A(c.shape) < 2) n.gl.uniform1f(l, c.uniformValues[0]);
        else {
          let f = c.uniformValues;
          f instanceof Float32Array || (f = new Float32Array(f)), n.gl.uniform1fv(l, f);
        }
        continue;
      }
      c.texData.slice != null && d != null && n.gl.uniform1i(d, c.texData.slice.flatOffset), n.setInputMatrixTexture(c.texData.texture.texture, l, u);
    }
  }
  const i = e.outShapeLocation;
  if (i) switch (s.shape.length) {
    case 1:
      n.gl.uniform1iv(i, new Int32Array(s.shape));
      break;
    case 2:
      n.gl.uniform2iv(i, new Int32Array(s.shape));
      break;
    case 3:
      n.gl.uniform3iv(i, new Int32Array(s.shape));
      break;
    case 4:
      n.gl.uniform4iv(i, new Int32Array(s.shape));
      break;
  }
  if (e.outShapeStridesLocation) {
    const u = me(s.shape);
    switch (s.shape.length) {
      case 2:
        n.gl.uniform1iv(e.outShapeStridesLocation, new Int32Array(u));
        break;
      case 3:
        n.gl.uniform2iv(e.outShapeStridesLocation, new Int32Array(u));
        break;
      case 4:
        n.gl.uniform3iv(e.outShapeStridesLocation, new Int32Array(u));
        break;
    }
  }
  if (e.outTexShapeLocation && n.gl.uniform2i(e.outTexShapeLocation, s.texData.texShape[0], s.texData.texShape[1]), e.program.customUniforms && r) for (let u = 0; u < e.program.customUniforms.length; ++u) {
    const c = e.program.customUniforms[u], l = e.customUniformLocations[u], d = r[u];
    if (c.type === "float") n.gl.uniform1fv(l, d);
    else if (c.type === "vec2") n.gl.uniform2fv(l, d);
    else if (c.type === "vec3") n.gl.uniform3fv(l, d);
    else if (c.type === "vec4") n.gl.uniform4fv(l, d);
    else if (c.type === "int") n.gl.uniform1iv(l, d);
    else if (c.type === "ivec2") n.gl.uniform2iv(l, d);
    else if (c.type === "ivec3") n.gl.uniform3iv(l, d);
    else if (c.type === "ivec4") n.gl.uniform4iv(l, d);
    else throw Error(`uniform type ${c.type} is not supported yet.`);
  }
  n.executeProgram();
}
function $8(n, e, t) {
  let s = "";
  e.concat(t).forEach((o) => {
    const i = o.texData != null && o.texData.slice != null && o.texData.slice.flatOffset > 0;
    if (n.enableShapeUniforms && !o.isUniform) {
      const u = o.texData.texShape, { useSqueezeShape: c, uniformShape: l, keptDims: d } = d0(n.packedInputs, o.shape, u);
      let h = "", p = "", f = "";
      if (l.length === 1 && n.packedInputs) {
        const C = [Math.ceil(u[0] / 2), Math.ceil(u[1] / 2)];
        h = `${C[0] > 1}_${C[1] > 1}`;
      } else if (l.length === 2 && !n.packedInputs) p = `${l[0] > 1}_${l[1] > 1}`;
      else if (l.length > 2 && !n.packedInputs) {
        const C = me(l);
        f = `${C[0] === u[1]}_${C[C.length - 1] === u[1]}`;
      }
      const m = o.shape.length, g = l.length === 2 && Be(o.shape, u), y = A(o.shape) === 1, b = Br(o.shape, t.shape), x = !n.packedInputs && m === t.shape.length && Be(u, t.texData.texShape), w = n.packedInputs || l.length > 2 ? "" : `${u[0] > 1}_${u[1] > 1}`;
      s += `${m}_${x}_${c ? d : ""}_${l.length}_${y}_${b}_${g}_${h}_${p}_${f}_${w}_${i}`;
    } else {
      const u = o.isUniform ? "uniform" : o.texData.texShape;
      s += `${o.shape}_${u}_${i}`;
    }
  });
  const r = n.userCode;
  let a = n.constructor.name;
  return a += "_" + s + "_" + r + `${U().getNumber("WEBGL_VERSION")}`, a;
}
function $n(n) {
  return U().getBool("WEBGL_USE_SHAPES_UNIFORMS") && n <= 4;
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class k8 {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outPackingScheme = pd.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const t = Pn();
    this.outputShape = e, this.enableShapeUniforms = $n(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? _m(["r", "c", "d"], e) : nl(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `;
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class N8 {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outPackingScheme = pd.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const t = Pn();
    this.outputShape = e, this.enableShapeUniforms = $n(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? _m(["r", "c", "d"], e) : nl(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `;
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class T8 {
  constructor(e) {
    this.variableNames = ["A"], this.outTexUsage = xs.DOWNLOAD;
    const t = Pn();
    this.outputShape = e, this.userCode = `
      ${_k}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `;
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class R8 {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outTexUsage = xs.DOWNLOAD;
    const t = Pn();
    this.outputShape = e, this.userCode = `
      ${_k}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `;
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const _8 = { R: 0, G: 1, B: 2, A: 3 };
class uC {
  constructor(e, t = false, s = "RGBA") {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const r = Pn();
    this.outputShape = e, this.enableShapeUniforms = $n(this.outputShape.length);
    let a = "result";
    t && (a = "floor(result * 255. + 0.5)");
    let o = "";
    for (let i = 0; i < s.length; i++) {
      const u = s[i];
      o += `
          if(offset == ${i}) {
            result = values[${_8[u]}];
          }`;
    }
    this.userCode = `
      ${this.enableShapeUniforms ? c0() : l0(e)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${s.length});

        flatIndex = idiv(flatIndex, ${s.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${r.texture2D}(A, uv);
          ${o}
        }
        ${r.output} = vec4(${a}, 0., 0., 0.);
      }
    `;
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class E8 {
  constructor(e, t = false) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const s = Pn();
    this.outputShape = e, this.enableShapeUniforms = $n(this.outputShape.length);
    let r = "", a = "result";
    t && (a = "floor(result * 255. + 0.5)");
    for (let o = 0; o <= 1; o++) for (let i = 0; i <= 1; i++) {
      const u = o * 2 + i;
      r += `
          localCoords = coords;
          if(localCoords[2] + ${i} < ${this.enableShapeUniforms ? "outShape[2]" : `${e[2]}`}) {
          localCoords[2] += ${i};
          if (localCoords[1] + ${o} < ${this.enableShapeUniforms ? "outShape[1]" : `${e[1]}`}) {
            localCoords[1] += ${o};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${s.texture2D}(A, uv);

            if (offset == 0) {
              result[${u}] = values[0];
            } else if (offset == 1) {
              result[${u}] = values[1];
            } else if (offset == 2) {
              result[${u}] = values[2];
            } else {
              result[${u}] = values[3];
            }
          }
        }
        `;
    }
    this.userCode = `
        ${this.enableShapeUniforms ? c0() : l0(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${r}

          ${s.output} = ${a};
        }
    `;
  }
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ok(n) {
  const e = Pn(), t = `${e.version}
    precision highp float;
    ${e.attribute} vec3 clipSpacePos;
    ${e.attribute} vec2 uv;
    ${e.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return uk(n, t);
}
function Pk(n) {
  const e = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return hk(n, e);
}
function Lk(n) {
  const e = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return pk(n, e);
}
function Rh(n, e, t, s, r, a) {
  mk(e, t);
  const o = fk(n), i = n.TEXTURE_2D;
  return he(n, () => n.bindTexture(i, o)), he(n, () => n.texParameteri(i, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE)), he(n, () => n.texParameteri(i, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE)), he(n, () => n.texParameteri(i, n.TEXTURE_MIN_FILTER, n.NEAREST)), he(n, () => n.texParameteri(i, n.TEXTURE_MAG_FILTER, n.NEAREST)), U().getNumber("WEBGL_VERSION") === 1 ? he(n, () => n.texImage2D(i, 0, s, e, t, 0, r, a, null)) : he(n, () => n.texStorage2D(i, 1, s, e, t)), he(n, () => n.bindTexture(n.TEXTURE_2D, null)), { texture: o, texShape: [t, e] };
}
function h0(n) {
  return n.internalFormatFloat;
}
function zk(n, e, t, s) {
  const [r, a] = Th(e, t);
  return Rh(n, r, a, h0(s), s.textureFormatFloat, n.FLOAT);
}
function p0(n) {
  return n.internalFormatHalfFloat;
}
function Mk(n, e, t, s) {
  const [r, a] = Th(e, t);
  return Rh(n, r, a, p0(s), s.textureFormatFloat, s.textureTypeHalfFloat);
}
function f0(n) {
  return n.downloadTextureFormat;
}
function Bk(n, e, t, s) {
  const [r, a] = Th(e, t);
  return Rh(n, r, a, f0(s), n.RGBA, n.UNSIGNED_BYTE);
}
function m0(n) {
  return n.internalFormatPackedFloat;
}
function Wk(n, e, t, s) {
  const [r, a] = xc(e, t);
  return Rh(n, r, a, m0(s), n.RGBA, n.FLOAT);
}
function g0(n) {
  return n.internalFormatPackedHalfFloat;
}
function Vk(n, e, t, s) {
  const [r, a] = xc(e, t);
  return Rh(n, r, a, g0(s), n.RGBA, s.textureTypeHalfFloat);
}
function Uk(n, e, t) {
  return he(n, () => n.bindBuffer(n.ARRAY_BUFFER, t)), ny(n, e, "clipSpacePos", t, 3, 20, 0) && ny(n, e, "uv", t, 2, 20, 12);
}
function Gk(n, e, t, s, r, a) {
  he(n, () => n.bindTexture(n.TEXTURE_2D, e));
  let o, i, u;
  r instanceof Uint8Array ? (o = new Uint8Array(t * s * 4), i = n.UNSIGNED_BYTE, u = n.RGBA) : (o = new Float32Array(t * s * 4), i = n.FLOAT, u = a.internalFormatPackedFloat), o.set(r), U().getNumber("WEBGL_VERSION") === 2 ? he(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, t, s, n.RGBA, i, o)) : he(n, () => n.texImage2D(n.TEXTURE_2D, 0, u, t, s, 0, n.RGBA, i, o)), he(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function Hk(n, e, t) {
  he(n, () => n.bindTexture(n.TEXTURE_2D, e)), t.data instanceof Uint8Array ? U().getNumber("WEBGL_VERSION") === 2 ? he(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, t.width, t.height, n.RGBA, n.UNSIGNED_BYTE, t.data)) : he(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, t.width, t.height, 0, n.RGBA, n.UNSIGNED_BYTE, t.data)) : U().getNumber("WEBGL_VERSION") === 2 ? he(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, n.RGBA, n.UNSIGNED_BYTE, t)) : he(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, n.RGBA, n.UNSIGNED_BYTE, t)), he(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function jk(n, e, t, s) {
  const r = n.createBuffer();
  he(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, r));
  const i = 4 * 4 * e * t;
  return he(n, () => n.bufferData(n.PIXEL_PACK_BUFFER, i, n.STREAM_READ)), he(n, () => n.readPixels(0, 0, t, e, n.RGBA, n.FLOAT, 0)), he(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, null)), r;
}
function qk(n, e, t) {
  const s = n, r = new Float32Array(t);
  return s.bindBuffer(s.PIXEL_PACK_BUFFER, e), s.getBufferSubData(s.PIXEL_PACK_BUFFER, 0, r), s.bindBuffer(s.PIXEL_PACK_BUFFER, null), r;
}
function Kk(n, e, t, s) {
  const [r, a] = Th(e, t), o = 4, i = new Uint8Array(k5(e * t, o));
  return he(n, () => n.readPixels(0, 0, r, a, s.downloadTextureFormat, n.UNSIGNED_BYTE, i)), new Float32Array(i.buffer);
}
function Xk(n, e, t, s, r, a, o, i) {
  const u = n, c = new Float32Array(N5(a, o));
  return u.bindBuffer(u.PIXEL_PACK_BUFFER, e), u.getBufferSubData(u.PIXEL_PACK_BUFFER, 0, c), u.bindBuffer(u.PIXEL_PACK_BUFFER, null), c;
}
function Yk(n, e, t) {
  const s = new Float32Array(e * t * 4);
  return he(n, () => n.readPixels(0, 0, t, e, n.RGBA, n.FLOAT, s)), s;
}
const D8 = Object.freeze(Object.defineProperty({ __proto__: null, bindVertexProgramAttributeStreams: Uk, createBufferFromOutputTexture: jk, createFloat16MatrixTexture: Mk, createFloat16PackedMatrixTexture: Vk, createFloat32MatrixTexture: zk, createIndexBuffer: Lk, createPackedMatrixTexture: Wk, createUnsignedBytesMatrixTexture: Bk, createVertexBuffer: Pk, createVertexShader: Ok, downloadByteEncodedFloatMatrixFromOutputTexture: Kk, downloadFloat32MatrixFromBuffer: qk, downloadMatrixFromPackedOutputTexture: Yk, downloadPackedMatrixFromBuffer: Xk, getInternalFormatForFloat16MatrixTexture: p0, getInternalFormatForFloat16PackedMatrixTexture: g0, getInternalFormatForFloat32MatrixTexture: h0, getInternalFormatForPackedMatrixTexture: m0, getInternalFormatForUnsignedBytesMatrixTexture: f0, uploadDenseMatrixToTexture: Gk, uploadPixelDataToTexture: Hk }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class vp {
  constructor(e) {
    this.outputTexture = null, this.program = null, this.disposed = false, this.itemsToPoll = [];
    const t = U().getNumber("WEBGL_VERSION");
    if (e != null ? (this.gl = e, ak(t, e)) : this.gl = nr(t), e = this.gl, U().getNumber("WEBGL_VERSION") === 2) {
      const a = e;
      this.createVertexArray = () => he(a, () => a.createVertexArray()), this.bindVertexArray = (o) => he(a, () => a.bindVertexArray(o)), this.deleteVertexArray = (o) => he(a, () => a.deleteVertexArray(o)), this.getVertexArray = () => he(a, () => a.getParameter(a.VERTEX_ARRAY_BINDING));
    } else if (e != null) {
      const a = e.getExtension("OES_vertex_array_object");
      if (a == null) throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");
      this.createVertexArray = () => he(e, () => a.createVertexArrayOES()), this.bindVertexArray = (o) => he(e, () => a.bindVertexArrayOES(o)), this.deleteVertexArray = (o) => he(e, () => a.deleteVertexArrayOES(o)), this.getVertexArray = () => he(e, () => e.getParameter(a.VERTEX_ARRAY_BINDING_OES));
    }
    let s = "WEBGL_color_buffer_float";
    const r = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), U().getNumber("WEBGL_VERSION") === 1) {
      const a = "OES_texture_float", o = "OES_texture_half_float";
      if (this.textureFloatExtension = Uc(this.gl, a), ws(this.gl, o)) this.textureHalfFloatExtension = Uc(this.gl, o);
      else if (U().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(s), ws(this.gl, r)) this.colorBufferHalfFloatExtension = Uc(this.gl, r);
      else if (U().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (s = "EXT_color_buffer_float", ws(this.gl, s)) this.colorBufferFloatExtension = this.gl.getExtension(s);
    else if (ws(this.gl, r)) this.colorBufferHalfFloatExtension = this.gl.getExtension(r);
    else throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = Pk(this.gl), this.indexBuffer = Lk(this.gl), this.framebuffer = gk(this.gl), this.textureConfig = i0(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return U().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed) return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    const e = this.gl;
    he(e, () => e.finish()), he(e, () => e.bindFramebuffer(e.FRAMEBUFFER, null)), he(e, () => e.deleteFramebuffer(this.framebuffer)), he(e, () => e.bindBuffer(e.ARRAY_BUFFER, null)), he(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null)), he(e, () => e.deleteBuffer(this.indexBuffer)), this.disposed = true;
  }
  createFloat32MatrixTexture(e, t) {
    return this.throwIfDisposed(), zk(this.gl, e, t, this.textureConfig);
  }
  createFloat16MatrixTexture(e, t) {
    return this.throwIfDisposed(), Mk(this.gl, e, t, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(e, t) {
    return this.throwIfDisposed(), Bk(this.gl, e, t, this.textureConfig);
  }
  uploadPixelDataToTexture(e, t) {
    this.throwIfDisposed(), Hk(this.gl, e, t);
  }
  uploadDenseMatrixToTexture(e, t, s, r) {
    this.throwIfDisposed(), Gk(this.gl, e, t, s, r, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(e, t) {
    return this.throwIfDisposed(), Vk(this.gl, e, t, this.textureConfig);
  }
  createPackedMatrixTexture(e, t) {
    return this.throwIfDisposed(), Wk(this.gl, e, t, this.textureConfig);
  }
  deleteMatrixTexture(e) {
    this.throwIfDisposed(), this.outputTexture === e && (sy(this.gl, this.framebuffer), this.outputTexture = null), he(this.gl, () => this.gl.deleteTexture(e));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(e, t, s) {
    return this.downloadMatrixDriver(e, () => Kk(this.gl, t, s, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(e, t, s, r, a, o) {
    return Xk(this.gl, e, t, s, r, a, o, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(e, t) {
    return qk(this.gl, e, t);
  }
  createBufferFromTexture(e, t, s) {
    this.bindTextureToFrameBuffer(e);
    const r = jk(this.gl, t, s, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), r;
  }
  createAndWaitForFence() {
    const e = this.createFence(this.gl);
    return this.pollFence(e);
  }
  createFence(e) {
    let t, s;
    if (U().getBool("WEBGL_FENCE_API_ENABLED")) {
      const r = e, a = r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE, 0);
      e.flush(), s = () => {
        const o = r.clientWaitSync(a, 0, 0);
        return o === r.ALREADY_SIGNALED || o === r.CONDITION_SATISFIED;
      }, t = a;
    } else U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (t = this.beginQuery(), this.endQuery(), s = () => this.isQueryAvailable(t, U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : s = () => true;
    return { query: t, isFencePassed: s };
  }
  downloadMatrixFromPackedTexture(e, t, s) {
    return this.downloadMatrixDriver(e, () => Yk(this.gl, t, s));
  }
  createProgram(e) {
    this.throwIfDisposed();
    const t = this.gl;
    this.vertexShader == null && (this.vertexShader = Ok(t));
    const s = ck(t);
    he(t, () => t.attachShader(s, this.vertexShader)), he(t, () => t.attachShader(s, e)), dk(t, s);
    const r = Object.assign(s, { vao: this.createVertexArray() });
    return this.debug && wp(t, r), r;
  }
  buildVao(e) {
    this.setProgram(e), this.bindVertexArray(e.vao);
    const t = this.gl;
    he(t, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, this.indexBuffer)), Uk(t, e, this.vertexBuffer);
  }
  deleteProgram(e) {
    this.throwIfDisposed(), e === this.program && (this.program = null), e != null && (he(this.gl, () => this.gl.deleteProgram(e)), this.deleteVertexArray(e.vao));
  }
  setProgram(e) {
    this.throwIfDisposed(), this.program = e, this.program != null && this.debug && wp(this.gl, this.program), he(this.gl, () => this.gl.useProgram(e));
  }
  getUniformLocation(e, t, s = true) {
    return this.throwIfDisposed(), s ? bk(this.gl, e, t) : xk(this.gl, e, t);
  }
  getAttributeLocation(e, t) {
    return this.throwIfDisposed(), he(this.gl, () => this.gl.getAttribLocation(e, t));
  }
  getUniformLocationNoThrow(e, t) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(e, t);
  }
  setInputMatrixTexture(e, t, s) {
    this.throwIfDisposed(), this.throwIfNoProgram(), wk(this.gl, e, t, s);
  }
  setOutputMatrixTexture(e, t, s) {
    this.setOutputMatrixTextureDriver(e, s, t);
  }
  setOutputPackedMatrixTexture(e, t, s) {
    this.throwIfDisposed();
    const [r, a] = xc(t, s);
    this.setOutputMatrixTextureDriver(e, r, a);
  }
  setOutputMatrixWriteRegion(e, t, s, r) {
    this.setOutputMatrixWriteRegionDriver(s, e, r, t);
  }
  setOutputPackedMatrixWriteRegion(e, t, s, r) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && wp(this.gl, this.program), Gc(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    const e = this.gl;
    if (this.debug) {
      const t = this.getVertexArray();
      console.assert(t === this.program.vao, "VAO changed between setProgram and executeProgram!"), this.debugValidate();
    }
    he(e, () => e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), he(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = Uc(this.gl, U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const s = this.gl, r = this.getQueryTimerExtensionWebGL2(), a = s.createQuery();
      return s.beginQuery(r.TIME_ELAPSED_EXT, a), a;
    }
    const e = this.getQueryTimerExtensionWebGL1(), t = e.createQueryEXT();
    return e.beginQueryEXT(e.TIME_ELAPSED_EXT, t), t;
  }
  endQuery() {
    if (U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const t = this.gl, s = this.getQueryTimerExtensionWebGL2();
      t.endQuery(s.TIME_ELAPSED_EXT);
      return;
    }
    const e = this.getQueryTimerExtensionWebGL1();
    e.endQueryEXT(e.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(e) {
    return await fg(() => this.disposed || this.isQueryAvailable(e, U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(e, U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(e, t) {
    if (t === 0) return null;
    if (t === 2) {
      const s = this.gl;
      return s.getQueryParameter(e, s.QUERY_RESULT) / 1e6;
    } else {
      const s = this.getQueryTimerExtensionWebGL1();
      return s.getQueryObjectEXT(e, s.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(e, t) {
    if (t === 0) return true;
    if (t === 2) {
      const s = this.gl, r = this.getQueryTimerExtensionWebGL2(), a = s.getQueryParameter(e, s.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), a && !this.disjoint;
    } else {
      const s = this.getQueryTimerExtensionWebGL1(), r = s.getQueryObjectEXT(e, s.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(s.GPU_DISJOINT_EXT)), r && !this.disjoint;
    }
  }
  pollFence(e) {
    return new Promise((t) => {
      this.addItemToPoll(() => e.isFencePassed(), () => t());
    });
  }
  pollItems() {
    const e = A8(this.itemsToPoll.map((t) => t.isDoneFn));
    for (let t = 0; t <= e; ++t) {
      const { resolveFn: s } = this.itemsToPoll[t];
      s();
    }
    this.itemsToPoll = this.itemsToPoll.slice(e + 1);
  }
  addItemToPoll(e, t) {
    if (this.itemsToPoll.push({ isDoneFn: e, resolveFn: t }), this.itemsToPoll.length > 1) return;
    let s;
    "setTimeoutCustom" in U().platform && (s = U().platform.setTimeoutCustom.bind(U().platform)), fg(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, s);
  }
  bindTextureToFrameBuffer(e) {
    this.throwIfDisposed(), Cp(this.gl, e, this.framebuffer), this.debug && Gc(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (Cp(this.gl, this.outputTexture, this.framebuffer), this.debug && Gc(this.gl)) : sy(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(e, t) {
    this.bindTextureToFrameBuffer(e);
    const s = t();
    return this.unbindTextureToFrameBuffer(), s;
  }
  setOutputMatrixTextureDriver(e, t, s) {
    this.throwIfDisposed();
    const r = this.gl;
    Cp(r, e, this.framebuffer), this.debug && Gc(r), this.outputTexture = e, he(r, () => r.viewport(0, 0, t, s)), he(r, () => r.scissor(0, 0, t, s));
  }
  setOutputMatrixWriteRegionDriver(e, t, s, r) {
    this.throwIfDisposed(), he(this.gl, () => this.gl.scissor(e, t, s, r));
  }
  throwIfDisposed() {
    if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null) throw new Error("No GPU program is currently set.");
  }
}
function A8(n) {
  let e = 0;
  for (; e < n.length && n[e](); ++e) ;
  return e - 1;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const { addImpl: F8, bincountImpl: Qk, bincountReduceImpl: O8, bitwiseAndImpl: P8, castImpl: L8, ceilImpl: z8, concatImpl: M8, equalImpl: B8, expImpl: W8, expm1Impl: V8, floorImpl: U8, gatherNdImpl: G8, gatherV2Impl: H8, greaterImpl: j8, greaterEqualImpl: q8, lessImpl: K8, lessEqualImpl: X8, linSpaceImpl: Y8, logImpl: Q8, maxImpl: Z8, maximumImpl: J8, minimumImpl: eY, multiplyImpl: tY, negImpl: nY, notEqualImpl: sY, prodImpl: rY, raggedGatherImpl: aY, raggedRangeImpl: oY, raggedTensorToTensorImpl: iY, rangeImpl: uY, rsqrtImpl: lY, scatterImpl: cY, sigmoidImpl: dY, simpleAbsImpl: Zk, sliceImpl: hY, sparseFillEmptyRowsImpl: pY, sparseReshapeImpl: fY, sparseSegmentReductionImpl: Jk, sqrtImpl: mY, staticRegexReplaceImpl: gY, stridedSliceImpl: yY, stringNGramsImpl: bY, stringSplitImpl: xY, stringToHashBucketFastImpl: wY, subImpl: CY, tileImpl: IY, topKImpl: SY, transposeImpl: y0, uniqueImpl: vY } = s0;
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function eN(n, e) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, e).map((t) => `${n}.${t}`);
}
function _n(n, e) {
  return e === 1 ? [n] : eN(n, e);
}
function $Y(n, e) {
  if (n === 1) return "rc";
  let t = "";
  for (let s = 0; s < n; s++) t += e[s], s < n - 1 && (t += ",");
  return t;
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class kY {
  constructor(e) {
    if (this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outputShape = e, this.rank = e.length, this.enableShapeUniforms = $n(this.outputShape.length), this.rank === 0) this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      const t = _n("rc", this.rank), s = bt(this.rank), r = this.getOutOfBoundsCondition(t), a = this.getSetup(t), o = this.getOutput(t);
      this.userCode = `
        void main() {
          ${s} rc = getOutputCoords();

          if(${r}) {
            setOutput(vec4(0));
          } else {
            ${a}

            setOutput(vec4(${o}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(e) {
    const t = [];
    for (let s = 0; s <= 1; s++) for (let r = 0; r <= 1; r++) {
      let a = `${s === 0 ? "r" : "rp1"}, ${r === 0 ? "c" : "cp1"}`;
      for (let o = 2; o < this.rank; o++) a = `${e[e.length - 1 - o]},` + a;
      t.push(a);
    }
    return t;
  }
  getOutOfBoundsCondition(e) {
    if (this.rank === 1) return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let t = "";
    for (let s = this.rank - 2; s < this.rank; s++) t += `${e[s]} >= ${this.enableShapeUniforms ? `outShape[${s}]` : this.outputShape[s]}`, s < this.rank - 1 && (t += "||");
    return t;
  }
  getSetup(e) {
    if (this.rank === 1) return "";
    const t = e.slice(-2), s = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], r = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${s};
      bool rEdge = rp1 >= ${r};
    `;
  }
  getOutput(e) {
    const t = this.getSourceCoordsArr(e);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`;
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class tN {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = e, this.enableShapeUniforms = $n(this.outputShape.length);
    let s = "";
    for (let r = 0; r < 4; r++) {
      let a = "thisRC = rc;";
      r % 2 === 1 && (a += "thisRC.z += 1;"), r > 1 && (a += "thisRC.y += 1;"), s += `
        ${a}
        ${r > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${r}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${r > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${NY(t, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? c0() : l0(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : e[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : e[2]};

        ${s}

        setOutput(result);
      }
    `;
  }
}
function NY(n, e) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e ? B5(["r", "c", "d"], "inputShape") : nl(["r", "c", "d"], n)}
      return ivec3(r, c, d);
    }
  `;
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let TY = class {
  constructor(e) {
    this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.usedTextures = {}, this.logEnabled = false;
  }
  acquireTexture(e, t, s) {
    const r = cC(t, s), a = dC(e, r, s);
    a in this.freeTextures || (this.freeTextures[a] = []), a in this.usedTextures || (this.usedTextures[a] = []);
    const o = lC(e, r, this.gpgpu.gl, this.gpgpu.textureConfig, s);
    if (this.freeTextures[a].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= o, this.log();
      const u = this.freeTextures[a].pop();
      return this.usedTextures[a].push(u), u;
    }
    let i;
    return r === yn.PACKED_2X2_FLOAT32 ? i = this.gpgpu.createPackedMatrixTexture(e[0], e[1]) : r === yn.PACKED_2X2_FLOAT16 ? i = this.gpgpu.createFloat16PackedMatrixTexture(e[0], e[1]) : r === yn.UNPACKED_FLOAT32 ? i = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]) : r === yn.UNPACKED_FLOAT16 ? i = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]) : r === yn.PACKED_4X1_UNSIGNED_BYTE && (i = this.gpgpu.createUnsignedBytesMatrixTexture(e[0], e[1])), this.usedTextures[a].push(i), this.numUsedTextures++, this._numBytesAllocated += o, this.log(), i;
  }
  releaseTexture(e, t, s, r) {
    if (this.freeTextures == null) return;
    const a = cC(s, r), o = dC(t, a, r);
    o in this.freeTextures || (this.freeTextures[o] = []);
    const i = lC(t, a, this.gpgpu.gl, this.gpgpu.textureConfig, r), u = U().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");
    u !== -1 && this._numBytesAllocated > u ? (this.gpgpu.deleteMatrixTexture(e.texture), this._numBytesAllocated -= i) : (this.freeTextures[o].push(e), this.numFreeTextures++, this._numBytesFree += i), this.numUsedTextures--;
    const c = this.usedTextures[o], l = c && c.indexOf(e);
    if (l == null || l < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");
    c[l] = c[c.length - 1], c.pop(), this.log();
  }
  log() {
    if (!this.logEnabled) return;
    const e = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${e})`);
    const t = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * t)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (const e in this.freeTextures) this.freeTextures[e].forEach((t) => {
        this.gpgpu.deleteMatrixTexture(t.texture);
      });
      for (const e in this.usedTextures) this.usedTextures[e].forEach((t) => {
        this.gpgpu.deleteMatrixTexture(t.texture);
      });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
};
function RY(n, e) {
  const t = n;
  if (e === t.R32F) return 4;
  if (e === t.R16F) return 2;
  if (e === t.RGBA32F) return 16;
  if (e === n.RGBA) return 16;
  if (e === t.RGBA16F) return 8;
  if (e === t.RGBA8) return 4;
  throw new Error(`Unknown internal format ${e}`);
}
function lC(n, e, t, s, r) {
  const a = _Y(e, s);
  let o;
  if (r) {
    const [u, c] = xc(n[0], n[1]);
    o = u * c;
  } else {
    const [u, c] = Th(n[0], n[1]);
    o = u * c;
  }
  const i = RY(t, a);
  return o * i;
}
function _Y(n, e) {
  switch (n) {
    case yn.PACKED_2X2_FLOAT32:
      return m0(e);
    case yn.PACKED_2X2_FLOAT16:
      return g0(e);
    case yn.UNPACKED_FLOAT32:
      return h0(e);
    case yn.UNPACKED_FLOAT16:
      return p0(e);
    case yn.PACKED_4X1_UNSIGNED_BYTE:
      return f0(e);
    default:
      throw new Error(`Unknown physical texture type ${n}`);
  }
}
function EY(n) {
  return U().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? n ? yn.PACKED_2X2_FLOAT32 : yn.UNPACKED_FLOAT32 : n ? yn.PACKED_2X2_FLOAT16 : yn.UNPACKED_FLOAT16;
}
function cC(n, e) {
  if (n === xs.UPLOAD) return yn.PACKED_2X2_FLOAT32;
  if (n === xs.RENDER || n == null) return EY(e);
  if (n === xs.DOWNLOAD || n === xs.PIXELS) return yn.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${n}`);
}
function dC(n, e, t) {
  return `${n[0]}_${n[1]}_${e}_${t}`;
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let pr = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.outputShape = e, this.enableShapeUniforms = $n(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
};
const Ms = "if (isnan(x)) return x;", DY = "return x;", hC = "return abs(x);", AY = "return (x >= 0.0) ? x : (exp(x) - 1.0);", FY = Ms + `
  return (x < 0.0) ? 0.0 : x;
`, OY = Ms + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, oa = "return x;", PY = "return 1.0 / (1.0 + exp(-1.0 * x));";
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const LY = "return x;", zY = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, MY = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, BY = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, WY = "return 1.0 / (1.0 + exp(-1.0 * x));";
class da {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.enableShapeUniforms = $n(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class VY {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outputShape = e, this.enableShapeUniforms = $n(this.outputShape.length);
    const t = e.length, s = _n("rc", t), r = bt(t), a = $Y(t, s), o = s.slice(-2), i = t <= 1 ? "rc" : `vec2(${o.join(",")})`;
    this.userCode = `
      void main() {
        ${r} rc = getOutputCoords();
        vec4 packedInput = getA(${a});

        setOutput(getChannel(packedInput, ${i}));
      }
    `;
  }
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const UY = Mf, GY = 1e-7, HY = 1e-4, up = {};
function jY(n) {
  return n in up || (up[n] = {}), up[n];
}
const qY = U().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"), KY = 600;
function XY() {
  return U().global.screen == null ? 1024 : U().global.screen.height * U().global.screen.width * window.devicePixelRatio * KY / 1024 / 1024;
}
class _h extends Pl {
  nextDataId() {
    return _h.nextDataId++;
  }
  constructor(e) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = false, this.pendingDeletes = 0, this.disposed = false, !U().getBool("HAS_WEBGL")) throw new Error("WebGL is not supported on this device");
    let t;
    if (e != null) {
      if (e instanceof vp) t = e;
      else {
        const s = nr(U().getNumber("WEBGL_VERSION"), e);
        t = new vp(s);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = false;
    } else {
      const s = nr(U().getNumber("WEBGL_VERSION"));
      t = new vp(s), this.binaryCache = jY(U().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = true;
    }
    this.gpgpu = t, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new TY(this.gpgpu), this.numMBBeforeWarning = XY(), this.texData = new Cd(this, zn());
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  writeTexture(e, t, s, r, a, o) {
    const i = this.makeTensorInfo(t, s), u = this.texData.get(i.dataId);
    u.isPacked = false, u.texture = { texture: e, texShape: [r, a] }, u.texShape = [r, a];
    const c = Hc(t), l = new uC(c, false, o), d = this.runWebGLProgram(l, [i], s, [[r, a]]);
    return d.shape = t, u.texture = null, this.disposeIntermediateTensorInfo(i), d.dataId;
  }
  write(e, t, s) {
    if ((U().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || U().getBool("DEBUG")) && this.checkNumericalProblems(e), s === "complex64" && e != null) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    const r = { id: this.nextDataId() };
    return this.texData.set(r, { shape: t, dtype: s, values: e, usage: xs.UPLOAD, refCount: 1 }), r;
  }
  refCount(e) {
    return this.texData.has(e) ? this.texData.get(e).refCount : 0;
  }
  incRef(e) {
    const t = this.texData.get(e);
    t.refCount++;
  }
  decRef(e) {
    if (this.texData.has(e)) {
      const t = this.texData.get(e);
      t.refCount--;
    }
  }
  move(e, t, s, r, a) {
    if (U().getBool("DEBUG") && this.checkNumericalProblems(t), r === "complex64") throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(e, { shape: s, dtype: r, values: t, usage: xs.UPLOAD, refCount: a });
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  readSync(e) {
    const t = this.texData.get(e), { values: s, dtype: r, complexTensorInfos: a, slice: o, shape: i, isPacked: u } = t;
    if (o != null) {
      let h;
      u ? h = new da(i, oa) : h = new pr(i, oa);
      const p = this.runWebGLProgram(h, [{ dataId: e, shape: i, dtype: r }], r), f = this.readSync(p.dataId);
      return this.disposeIntermediateTensorInfo(p), f;
    }
    if (s != null) return this.convertAndCacheOnCPU(e);
    if (r === "string") return s;
    const c = this.activeTimers != null;
    let l;
    c && (l = Xt());
    let d;
    if (r === "complex64") {
      const h = this.readSync(a.real.dataId), p = this.readSync(a.imag.dataId);
      d = Qs(h, p);
    } else d = this.getValuesFromTexture(e);
    return c && (this.downloadWaitMs += Xt() - l), this.convertAndCacheOnCPU(e, d);
  }
  async read(e) {
    if (this.pendingRead.has(e)) {
      const f = this.pendingRead.get(e);
      return new Promise((m) => f.push(m));
    }
    const t = this.texData.get(e), { values: s, shape: r, slice: a, dtype: o, complexTensorInfos: i, isPacked: u } = t;
    if (a != null) {
      let f;
      u ? f = new da(r, oa) : f = new pr(r, oa);
      const m = this.runWebGLProgram(f, [{ dataId: e, shape: r, dtype: o }], o), g = this.read(m.dataId);
      return this.disposeIntermediateTensorInfo(m), g;
    }
    if (s != null) return this.convertAndCacheOnCPU(e);
    if (U().getBool("DEBUG") && !U().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && U().getNumber("WEBGL_VERSION") === 2) throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let c = null, l;
    if (o !== "complex64" && U().get("WEBGL_BUFFER_SUPPORTED")) {
      l = this.decode(e);
      const f = this.texData.get(l.dataId);
      c = this.gpgpu.createBufferFromTexture(f.texture.texture, ...op(r));
    }
    this.pendingRead.set(e, []), o !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let d;
    if (o === "complex64") {
      const f = await Promise.all([this.read(i.real.dataId), this.read(i.imag.dataId)]), m = f[0], g = f[1];
      d = Qs(m, g);
    } else if (c == null) d = this.getValuesFromTexture(e);
    else {
      const f = A(r);
      d = this.gpgpu.downloadFloat32MatrixFromBuffer(c, f);
    }
    if (l != null && this.disposeIntermediateTensorInfo(l), c != null) {
      const f = this.gpgpu.gl;
      he(f, () => f.deleteBuffer(c));
    }
    const h = this.convertAndCacheOnCPU(e, d), p = this.pendingRead.get(e);
    return this.pendingRead.delete(e), p.forEach((f) => f(h)), this.pendingDisposal.has(e) && (this.pendingDisposal.delete(e), this.disposeData(e) && zn().removeDataId(e, this), this.pendingDeletes--), h;
  }
  readToGPU(e, t = {}) {
    const s = this.texData.get(e), { values: r, shape: a, slice: o, dtype: i, isPacked: u, texture: c } = s;
    if (i === "complex64") throw new Error("Does not support reading texture for complex64 dtype.");
    if (o != null) {
      let p;
      u ? p = new da(a, oa) : p = new pr(a, oa);
      const f = this.runWebGLProgram(p, [{ dataId: e, shape: a, dtype: i }], i), m = this.readToGPU(f, t);
      return this.disposeIntermediateTensorInfo(f), m;
    }
    if (c == null) throw r != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    const l = this.decode(e, t.customTexShape), d = zn().makeTensorFromTensorInfo(l), h = this.texData.get(l.dataId);
    return Object.assign({ tensorRef: d }, h.texture);
  }
  bufferSync(e) {
    const t = this.readSync(e.dataId);
    if (e.dtype === "string") try {
      const s = t.map((r) => Fs(r));
      return Oe(e.shape, e.dtype, s);
    } catch {
      throw new Error("Failed to decode encoded string bytes into utf-8");
    }
    return Oe(e.shape, e.dtype, t);
  }
  checkNumericalProblems(e) {
    if (e != null) for (let t = 0; t < e.length; t++) {
      const s = e[t];
      if (!ok(s)) throw U().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${s} cannot be represented on this device.`);
    }
  }
  getValuesFromTexture(e) {
    const { shape: t, dtype: s, isPacked: r } = this.texData.get(e), a = A(t);
    if (U().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      const h = this.decode(e), p = this.texData.get(h.dataId), f = this.gpgpu.downloadMatrixFromPackedTexture(p.texture.texture, ...op(t)).subarray(0, a);
      return this.disposeIntermediateTensorInfo(h), f;
    }
    const o = U().getBool("WEBGL_PACK") && r === true, i = o ? Hc(t) : t, u = o ? new R8(i) : new T8(i), c = this.runWebGLProgram(u, [{ shape: i, dtype: s, dataId: e }], "float32"), l = this.texData.get(c.dataId), d = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture.texture, l.texShape[0], l.texShape[1]).subarray(0, a);
    return this.disposeIntermediateTensorInfo(c), d;
  }
  timerAvailable() {
    return U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(e) {
    const t = this.activeTimers, s = [];
    let r = false;
    this.programTimersStack == null ? (this.programTimersStack = s, r = true) : this.activeTimers.push(s), this.activeTimers = s, e();
    const a = Os(this.activeTimers.map((u) => u.query)).filter((u) => u != null), o = Os(this.activeTimers.map((u) => u.name)).filter((u) => u != null);
    this.activeTimers = t, r && (this.programTimersStack = null);
    const i = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null };
    return (async () => {
      if (U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        const u = await Promise.all(a);
        i.kernelMs = xy(u), i.getExtraProfileInfo = () => u.map((c, l) => ({ name: o[l], ms: c })).map((c) => `${c.name}: ${c.ms}`).join(", ");
      } else i.kernelMs = { error: "WebGL query timers are not supported in this environment." };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, i;
    })();
  }
  memory() {
    return { unreliable: false, numBytesInGPU: this.numBytesInGPU, numBytesInGPUAllocated: this.textureManager.numBytesAllocated, numBytesInGPUFree: this.textureManager.numBytesFree };
  }
  startTimer() {
    return U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: Xt(), endMs: null };
  }
  endTimer(e) {
    return U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), e) : (e.endMs = Xt(), e);
  }
  async getQueryTime(e) {
    if (U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) return this.gpgpu.waitForQueryAndGetTime(e);
    const t = e;
    return t.endMs - t.startMs;
  }
  disposeData(e, t = false) {
    if (this.pendingDisposal.has(e)) return false;
    if (!this.texData.has(e)) return true;
    if (t ? this.texData.get(e).refCount = 0 : this.texData.get(e).refCount--, !t && this.texData.get(e).refCount > 0) return false;
    if (this.pendingRead.has(e)) return this.pendingDisposal.add(e), this.pendingDeletes++, false;
    this.releaseGPUData(e);
    const { complexTensorInfos: s } = this.texData.get(e);
    return s != null && (this.disposeData(s.real.dataId, t), this.disposeData(s.imag.dataId, t)), this.texData.delete(e), true;
  }
  releaseGPUData(e) {
    const { texture: t, dtype: s, texShape: r, usage: a, isPacked: o, slice: i } = this.texData.get(e), u = i && i.origDataId || e, c = this.dataRefCount.get(u);
    c > 1 ? this.dataRefCount.set(u, c - 1) : (this.dataRefCount.delete(u), t != null && (this.numBytesInGPU -= this.computeBytes(r, s), this.textureManager.releaseTexture(t, r, a, o)));
    const l = this.texData.get(e);
    l.texture = null, l.texShape = null, l.isPacked = false, l.slice = null;
  }
  getTexture(e) {
    return this.uploadToGPU(e), this.texData.get(e).texture.texture;
  }
  getDataInfo(e) {
    return this.texData.get(e);
  }
  shouldExecuteOnCPU(e, t = qY) {
    return U().getBool("WEBGL_CPU_FORWARD") && e.every((s) => this.texData.get(s.dataId).texture == null && A(s.shape) < t);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(e) {
    gs("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    const t = e.dataSync();
    return UY(e.shape, t);
  }
  packedUnaryOp(e, t, s) {
    const r = new da(e.shape, t), a = this.compileAndRun(r, [e], s);
    return zn().makeTensorFromTensorInfo(a);
  }
  abs(e) {
    if (this.shouldExecuteOnCPU([e]) && e.dtype !== "complex64") {
      const r = Zk(this.texData.get(e.dataId).values);
      return this.makeOutput(e.shape, e.dtype, r);
    }
    if (U().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(e, hC, e.dtype);
    const t = new pr(e.shape, hC), s = this.compileAndRun(t, [e]);
    return zn().makeTensorFromTensorInfo(s);
  }
  makeTensorInfo(e, t, s) {
    let r;
    if (t === "string" && s != null && s.length > 0 && Hs(s[0])) {
      const a = s.map((o) => qs(o));
      r = this.write(a, e, t);
    } else r = this.write(s, e, t);
    return this.texData.get(r).usage = null, { dataId: r, shape: e, dtype: t };
  }
  makeOutput(e, t, s) {
    return zn().makeTensorFromTensorInfo(this.makeTensorInfo(e, t, s), this);
  }
  unpackTensor(e) {
    const t = new VY(e.shape);
    return this.runWebGLProgram(t, [e], e.dtype);
  }
  packTensor(e) {
    const t = new kY(e.shape);
    return this.runWebGLProgram(t, [e], e.dtype, null, true);
  }
  packedReshape(e, t) {
    const s = [Gi(e.shape), ...Hi(e.shape)], r = { dtype: e.dtype, shape: s, dataId: e.dataId }, a = [Gi(t), ...Hi(t)], o = new tN(a, s), i = true, u = [s], c = this.runWebGLProgram(o, [r], e.dtype, u, i);
    return { dataId: c.dataId, shape: t, dtype: c.dtype };
  }
  decode(e, t) {
    const s = this.texData.get(e), { isPacked: r, shape: a, dtype: o } = s;
    if (t != null) {
      const h = A(a), p = t[0] * t[1] * 4;
      $(h <= p, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    }
    const i = Hc(a);
    let u;
    r ? u = new N8(i) : u = new k8(i);
    const c = true, l = [t ?? op(i)], d = this.runWebGLProgram(u, [{ shape: i, dtype: o, dataId: e }], o, l, c, t);
    return { dtype: o, shape: a, dataId: d.dataId };
  }
  runWebGLProgram(e, t, s, r, a = false, o) {
    const i = this.makeTensorInfo(e.outputShape, s), u = this.texData.get(i.dataId);
    if (e.packedOutput && (u.isPacked = true), e.outPackingScheme === pd.DENSE) {
      const y = o ?? op(e.outputShape);
      u.texShape = y.map((b) => b * 2);
    }
    if (e.outTexUsage != null && (u.usage = e.outTexUsage), A(i.shape) === 0) return u.values = Ht(i.dtype, 0), i;
    const c = [], l = t.map((y) => {
      if (y.dtype === "complex64") throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let b = this.texData.get(y.dataId);
      if (b.texture == null) {
        if (!e.packedInputs && A(y.shape) <= U().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")) return { shape: y.shape, texData: null, isUniform: true, uniformValues: b.values };
        e.packedInputs && (b.isPacked = true, b.shape = y.shape);
      }
      if (this.uploadToGPU(y.dataId), !!b.isPacked != !!e.packedInputs) y = b.isPacked ? this.unpackTensor(y) : this.packTensor(y), c.push(y), b = this.texData.get(y.dataId);
      else if (b.isPacked && !fd(b.shape, y.shape)) {
        const x = y, w = y.shape;
        y.shape = b.shape, y = this.packedReshape(y, w), c.push(y), b = this.texData.get(y.dataId), x.shape = w;
      }
      return { shape: y.shape, texData: b, isUniform: false };
    });
    this.uploadToGPU(i.dataId);
    const d = { shape: i.shape, texData: u, isUniform: false }, h = $8(e, l, d), p = this.getAndSaveBinary(h, () => S8(this.gpgpu, e, l, d)), f = this.activeTimers != null;
    let m;
    f && (m = this.startTimer()), U().get("ENGINE_COMPILE_ONLY") || v8(this.gpgpu, p, l, d, r), c.forEach((y) => this.disposeIntermediateTensorInfo(y)), f && (m = this.endTimer(m), this.activeTimers.push({ name: e.constructor.name, query: this.getQueryTime(m) }));
    const g = U().getNumber("WEBGL_FLUSH_THRESHOLD");
    if (g > 0) {
      const y = Xt();
      y - this.lastGlFlushTime > g && (this.gpgpu.gl.flush(), this.lastGlFlushTime = y);
    }
    if (!U().getBool("WEBGL_LAZILY_UNPACK") && u.isPacked && a === false) {
      const y = this.unpackTensor(i);
      return this.disposeIntermediateTensorInfo(i), y;
    }
    return i;
  }
  compileAndRun(e, t, s, r, a = false) {
    return s = s || t[0].dtype, this.runWebGLProgram(e, t, s, r, a);
  }
  getAndSaveBinary(e, t) {
    return e in this.binaryCache || (this.binaryCache[e] = t()), this.binaryCache[e];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (U().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((t) => {
      this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram), delete this.binaryCache[t];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement < "u" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = true);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = H(() => {
      if (!U().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        const e = U().getBool("DEBUG");
        U().set("DEBUG", false);
        const t = this.abs(Ne(1e-8)).dataSync()[0];
        if (U().set("DEBUG", e), t > 0) return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  epsilon() {
    return this.floatPrecision() === 32 ? GY : HY;
  }
  uploadToGPU(e) {
    const t = this.texData.get(e), { shape: s, dtype: r, values: a, texture: o, usage: i, isPacked: u } = t;
    if (o != null) return;
    const c = this.activeTimers != null;
    let l;
    c && (l = Xt());
    let d = t.texShape;
    if (d == null && (d = Sk(s, u), t.texShape = d), a != null) {
      const h = Hc(s);
      let p, f = d[1], m = d[0];
      const g = a instanceof Uint8Array || a instanceof Uint8ClampedArray;
      (u || !g) && ([f, m] = xc(d[0], d[1])), u ? p = new E8(h, g) : p = new uC(h, g);
      const y = g ? [m, f] : d, b = this.makeTensorInfo(y, r), x = this.texData.get(b.dataId);
      g ? x.usage = xs.PIXELS : x.usage = xs.UPLOAD, x.texShape = y, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId), f, m, a);
      const w = [[m, f]], v = this.runWebGLProgram(p, [b], r, w, true), k = this.texData.get(v.dataId);
      t.texShape = k.texShape, t.isPacked = k.isPacked, t.usage = k.usage, U().get("ENGINE_COMPILE_ONLY") ? this.disposeData(v.dataId) : (t.texture = k.texture, t.values = null, this.texData.delete(v.dataId)), this.disposeIntermediateTensorInfo(b), c && (this.uploadWaitMs += Xt() - l);
    } else {
      const h = this.acquireTexture(d, i, r, u);
      t.texture = h;
    }
  }
  convertAndCacheOnCPU(e, t) {
    const s = this.texData.get(e), { dtype: r } = s;
    return t != null && (s.values = YY(t, r)), s.values;
  }
  acquireTexture(e, t, s, r) {
    if (this.numBytesInGPU += this.computeBytes(e, s), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      const a = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = true, console.warn(`High memory usage in GPU: ${a} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(e, t, r);
  }
  computeBytes(e, t) {
    return e[0] * e[1] * Ti(t);
  }
  checkCompileCompletion() {
    for (const [, e] of Object.entries(this.binaryCache)) this.checkCompletion_(e);
  }
  async checkCompileCompletionAsync() {
    const e = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (const [, t] of Object.entries(this.binaryCache)) e.push(this.checkCompletionAsync_(t));
      return Promise.all(e);
    } else {
      for (const [, t] of Object.entries(this.binaryCache)) {
        const s = new Promise((r) => {
          try {
            this.checkCompletion_(t), r(true);
          } catch (a) {
            throw a;
          }
        });
        e.push(s);
      }
      return Promise.all(e);
    }
  }
  async checkCompletionAsync_(e) {
    return this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(e) : (await Kb(), this.checkCompletionAsync_(e));
  }
  checkCompletion_(e) {
    if (this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)), this.gpgpu.gl.getShaderParameter(e.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false ? (u0(e.source, this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return true;
  }
  getUniformLocations() {
    for (const e of Object.values(this.binaryCache)) {
      this.gpgpu.buildVao(e.webGLProgram);
      const { variablesLocations: t, customUniformLocations: s, infLoc: r, nanLoc: a, outShapeLocation: o, outShapeStridesLocation: i, outTexShapeLocation: u } = Fk(this.gpgpu, e.program, e.webGLProgram);
      e.variablesLocations = t, e.customUniformLocations = s, e.infLoc = r, e.nanLoc = a, e.outShapeLocation = o, e.outShapeStridesLocation = i, e.outTexShapeLocation = u;
    }
  }
  createTensorFromGPUData(e, t, s) {
    e.channels = e.channels || "RGBA";
    const { texture: r, height: a, width: o, channels: i } = e, u = zn().backend;
    if (!u.gpgpu.gl.isTexture(r)) throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");
    const c = u.writeTexture(r, t, s, a, o, i);
    return zn().makeTensorFromDataId(c, t, s, u);
  }
}
_h.nextDataId = 0;
function YY(n, e) {
  if (e === "float32" || e === "complex64") return n;
  if (e === "int32" || e === "bool") {
    const t = e === "int32" ? new Int32Array(n.length) : new Uint8Array(n.length);
    for (let s = 0; s < t.length; ++s) t[s] = Math.round(n[s]);
    return t;
  } else throw new Error(`Unknown dtype ${e}`);
}
/** @license See the LICENSE file. */
const nN = "4.22.0";
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sN() {
  U().set("WEBGL_FORCE_F16_TEXTURES", true);
}
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
Ny() && Bd("webgl", () => new _h(), 2);
const QY = { forceHalfFloat: sN };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const b0 = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
let ji = class {
  constructor(e, t, s) {
    this.variableNames = ["A", "B"], this.outputShape = Re(t, s), this.enableShapeUniforms = $n(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const rl = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
class $c {
  constructor(e, t, s, r = false) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = true, this.packedInputs = true, this.packedOutput = true, this.outputShape = Re(t, s);
    const a = this.outputShape.length;
    this.enableShapeUniforms = $n(a);
    let o = "";
    if (r) if (a === 0 || A(this.outputShape) === 1) o = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
    else if (o = `
          ${bt(a)} coords = getOutputCoords();
        `, a === 1) this.enableShapeUniforms ? o += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : o += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
    else {
      const u = _n("coords", a);
      this.enableShapeUniforms ? o += `
            bool nextRowOutOfBounds =
              (${u[a - 2]} + 1) >= outShape[${a} - 2];
            bool nextColOutOfBounds =
              (${u[a - 1]} + 1) >= outShape[${a} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : o += `
            bool nextRowOutOfBounds =
              (${u[a - 2]} + 1) >= ${this.outputShape[a - 2]};
            bool nextColOutOfBounds =
              (${u[a - 1]} + 1) >= ${this.outputShape[a - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
    }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${o}

        setOutput(result);
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function is(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  return t.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const ZY = { kernelName: oo, backendName: "webgl", kernelFunc: is };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ni(n) {
  const { inputs: e, backend: t } = n, { real: s, imag: r } = e, a = t.makeTensorInfo(s.shape, "complex64"), o = t.texData.get(a.dataId), i = is({ inputs: { x: s }, backend: t }), u = is({ inputs: { x: r }, backend: t });
  return o.complexTensorInfos = { real: i, imag: u }, a;
}
const JY = { kernelName: Sd, backendName: "webgl", kernelFunc: ni };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const rN = "return (a < 0.) ? b * a : a;", aN = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function e7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { alpha: a } = s, o = t.makeTensorInfo([], "float32", qr(a, "float32")), i = U().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new $c(aN, r.shape, o.shape) : new ji(rN, r.shape, o.shape), u = t.runWebGLProgram(i, [r, o], "float32");
  return t.disposeIntermediateTensorInfo(o), u;
}
const t7 = { kernelName: co, backendName: "webgl", kernelFunc: e7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const oN = "return (a < 0.) ? b * a : a;", iN = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function n7(n) {
  const { inputs: e, backend: t } = n, { x: s, alpha: r } = e, a = U().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new $c(iN, s.shape, r.shape) : new ji(oN, s.shape, r.shape);
  return t.runWebGLProgram(a, [s, r], "float32");
}
const s7 = { kernelName: No, backendName: "webgl", kernelFunc: n7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const kc = "if (isnan(x)) return x;";
function nt({ opSnippet: n, packedOpSnippet: e, cpuKernelImpl: t, dtype: s }) {
  return ({ inputs: r, backend: a }) => {
    const { x: o } = r, i = a, u = s || o.dtype;
    if (i.shouldExecuteOnCPU([o]) && t != null) {
      const d = i.texData.get(o.dataId), h = t(d.values, u);
      return i.makeTensorInfo(o.shape, u, h);
    }
    const c = U().getBool("WEBGL_PACK_UNARY_OPERATIONS") && e != null;
    let l;
    return c ? l = new da(o.shape, e) : l = new pr(o.shape, n), i.runWebGLProgram(l, [o], u);
  };
}
function Cn({ opSnippet: n, packedOpSnippet: e, checkOutOfBounds: t = false, supportsComplex: s = false, cpuKernelImpl: r, dtype: a }) {
  return ({ inputs: o, backend: i }) => {
    const { a: u, b: c } = o, l = i;
    if (s && u.dtype === "complex64") {
      const f = l.texData.get(u.dataId), m = l.texData.get(c.dataId), [g, y] = [[f.complexTensorInfos.real, m.complexTensorInfos.real], [f.complexTensorInfos.imag, m.complexTensorInfos.imag]].map((x) => {
        const [w, C] = x, v = { dataId: w.dataId, dtype: w.dtype, shape: u.shape }, k = { dataId: C.dataId, dtype: C.dtype, shape: c.shape }, R = new ji(n, u.shape, c.shape);
        return l.runWebGLProgram(R, [v, k], tn(w.dtype, C.dtype));
      }), b = ni({ inputs: { real: g, imag: y }, backend: l });
      return l.disposeIntermediateTensorInfo(g), l.disposeIntermediateTensorInfo(y), b;
    }
    const d = a || tn(u.dtype, c.dtype);
    if ((u.dtype === "string" || c.dtype === "string" || l.shouldExecuteOnCPU([u, c])) && r != null) {
      const f = l.texData.get(u.dataId).values, m = l.texData.get(c.dataId).values, g = u.dtype === "string" ? Zs(f) : f, y = u.dtype === "string" ? Zs(m) : m, [b, x] = r(u.shape, c.shape, g, y, d), w = l.makeTensorInfo(x, d), C = l.texData.get(w.dataId);
      return C.values = b, w;
    }
    const h = U().getBool("WEBGL_PACK_BINARY_OPERATIONS") && e != null;
    let p;
    return h ? p = new $c(e, u.shape, c.shape, t) : p = new ji(n, u.shape, c.shape), l.runWebGLProgram(p, [u, c], d);
  };
}
function md(n, e = false) {
  if (n === "linear") return e ? LY : DY;
  if (n === "relu") return e ? MY : FY;
  if (n === "elu") return e ? zY : AY;
  if (n === "relu6") return e ? BY : OY;
  if (n === "prelu") return e ? iN : oN;
  if (n === "leakyrelu") return e ? aN : rN;
  if (n === "sigmoid") return e ? WY : PY;
  throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`);
}
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let uN = class {
  constructor(e, t, s, r = false, a = false, o = false, i = null, u = false, c = false) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = true, this.packedOutput = true, this.outputShape = s, this.enableShapeUniforms = $n(this.outputShape.length);
    const l = r ? e[1] : e[2], d = Math.ceil(l / 2), h = r ? "i * 2, rc.y" : "rc.y, i * 2", p = a ? "rc.z, i * 2" : "i * 2, rc.z", f = r ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], m = a ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"];
    let g = "", y = "";
    i && (u ? g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }` : c ? g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }` : g = `vec4 activation(vec4 x) {
          ${i}
        }`, y = "result = activation(result);");
    const b = o ? "result += getBiasAtOutCoords();" : "";
    o && this.variableNames.push("bias"), u && this.variableNames.push("preluActivationWeights"), c && this.variableNames.push("leakyreluAlpha");
    let x = "rc.x", w = "rc.x";
    e[0] < t[0] ? x = `imod(rc.x, ${e[0]})` : t[0] < e[0] && (w = `imod(rc.x, ${t[0]})`), this.userCode = `
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${d}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${x};
        int batchB = ${w};
        for (int i = 0; i < ${d}; i++) {
          vec4 a = getMatrixA(batchA, ${h});
          vec4 b = getMatrixB(batchB, ${p});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${m[0]});
          result += (${f[1]} * ${m[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${y}

        setOutput(result);
      }
    `;
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const pC = { REAL: "return areal * breal - aimag * bimag;", IMAG: "return areal * bimag + aimag * breal;" };
let fC = class {
  constructor(e, t, s) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = Re(t, s), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const mC = "return a * b;";
function x0(n) {
  const { inputs: e, backend: t } = n, { a: s, b: r } = e, a = tn(s.dtype, r.dtype);
  if (s.dtype === "complex64") {
    const i = t.texData.get(s.dataId), u = t.texData.get(r.dataId), c = new fC(pC.REAL, s.shape, r.shape), l = new fC(pC.IMAG, s.shape, r.shape), d = [{ dataId: i.complexTensorInfos.real.dataId, dtype: i.complexTensorInfos.real.dtype, shape: s.shape }, { dataId: i.complexTensorInfos.imag.dataId, dtype: i.complexTensorInfos.imag.dtype, shape: s.shape }, { dataId: u.complexTensorInfos.real.dataId, dtype: u.complexTensorInfos.real.dtype, shape: r.shape }, { dataId: u.complexTensorInfos.imag.dataId, dtype: u.complexTensorInfos.imag.dtype, shape: r.shape }], h = t.runWebGLProgram(c, d, "float32"), p = t.runWebGLProgram(l, d, "float32"), f = ni({ inputs: { real: h, imag: p }, backend: t });
    return t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(p), f;
  }
  if (t.shouldExecuteOnCPU([s, r])) {
    const i = t.texData.get(s.dataId), u = t.texData.get(r.dataId), [c, l] = tY(s.shape, r.shape, i.values, u.values, a), d = t.makeTensorInfo(l, a), h = t.texData.get(d.dataId);
    return h.values = c, d;
  }
  let o;
  return U().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? o = new $c(mC, s.shape, r.shape) : o = new ji(mC, s.shape, r.shape), t.runWebGLProgram(o, [s, r], a);
}
const r7 = { kernelName: So, backendName: "webgl", kernelFunc: x0 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function a7(n, e, t) {
  const s = [Gi(n.shape), ...Hi(n.shape)], r = { dtype: n.dtype, shape: s, dataId: n.dataId }, a = [Gi(e), ...Hi(e)], o = new tN(a, s), i = true, u = [s], c = t.runWebGLProgram(o, [r], n.dtype, u, i);
  return { dataId: c.dataId, shape: e, dtype: c.dtype };
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function de(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { shape: a } = s, o = t, i = A(r.shape), u = Id(a, i), c = A(u);
  $(i === c, () => `The new shape (${u}) has ${c} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);
  const l = o.texData.get(r.dataId);
  return l.isPacked && !fd(r.shape, u) && !(l.texture !== null && fd(l.shape, u)) ? a7(r, u, o) : (o.incRef(r.dataId), { dataId: r.dataId, shape: u, dtype: r.dtype });
}
const o7 = { kernelName: Du, backendName: "webgl", kernelFunc: de };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class gC {
  constructor(e, t) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: r, inSize: a, outSize: o } = e;
    this.outputShape = [r, o];
    const i = Math.floor(s / 4) * 4, u = s % 4;
    let c = "sumValue += dot(values, ones);";
    if (t != null) {
      const d = 1 / t;
      c = `sumValue += dot(values * ${Ni(d) ? d.toPrecision(2) : d}, ones);`;
    }
    let l = "";
    a % s > 0 && (l = `
        if (inIdx < 0 || inIdx >= ${a}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${l}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${c}
        }

        int inIdx = inOffset + ${i};
        if (${u === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${c}
        } else if (${u === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${c}
        } else if (${u === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${c}
        }
        setOutput(sumValue);
      }
    `;
  }
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let i7 = class {
  constructor(e, t) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: r, inSize: a, outSize: o } = e;
    this.outputShape = [r, o];
    let i = "0.0", u = "";
    t === "prod" ? i = "1.0" : t === "min" ? (i = "1.0 / 1e-20", u = "min") : t === "max" && (i = "-1.0 / 1e-20", u = "max");
    let c = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "sum" ? c = "sumValue" : t === "prod" ? c = "prodValue" : t === "all" ? c = "allValue" : t === "any" && (c = "anyValue");
    const l = Math.floor(s / 4) * 4, d = s % 4;
    let h = `
      if (${t === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${t === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${u}(values, minMaxValue);
        if (${t === "min"} || ${t === "max"}) {
          minMaxValue = ${u}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, p = "vec4";
    t === "all" ? (i = "1.0", h = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, p = "bvec4") : t === "any" && (i = "0.0", h = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, p = "bvec4");
    let f = "";
    a % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${l}; i += 4) {
          int inIdx = inOffset + i;
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${h}
        }

        int inIdx = inOffset + ${l};
        if (${d === 1}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${h}
        } else if (${d === 2}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${h}
        } else if (${d === 3}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${h}
        }
        setOutput(${c});
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function u7(n) {
  const e = [];
  for (; e.length === 0 || e[e.length - 1].outSize !== 1; ) {
    const t = e.length ? e[e.length - 1].outSize : n[1], s = Yf(t);
    e.push({ inSize: t, windowSize: s, outSize: Math.ceil(t / s) });
  }
  return e;
}
function al(n, e, t, s) {
  const r = u7(n.shape);
  let a = n;
  for (let o = 0; o < r.length; o++) {
    const { inSize: i, windowSize: u, outSize: c } = r[o];
    let l, d;
    t === "mean" ? l = o === 0 ? new gC({ windowSize: u, inSize: i, batchSize: n.shape[0], outSize: c }, i) : new gC({ windowSize: u, inSize: i, batchSize: n.shape[0], outSize: c }) : l = new i7({ windowSize: u, inSize: i, batchSize: n.shape[0], outSize: c }, t), d = a, a = s.runWebGLProgram(l, [a], e), d.dataId !== n.dataId && s.disposeIntermediateTensorInfo(d);
  }
  return a;
}
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let l7 = class {
  constructor(e, t) {
    this.variableNames = ["A"];
    const s = new Array(e.length);
    for (let o = 0; o < s.length; o++) s[o] = e[t[o]];
    this.outputShape = s, this.rank = s.length;
    const r = bt(this.rank), a = c7(t);
    this.userCode = `
    void main() {
      ${r} resRC = getOutputCoords();
      setOutput(getA(${a}));
    }
    `;
  }
};
function c7(n) {
  const e = n.length;
  if (e > 6) throw Error(`Transpose for rank ${e} is not yet supported`);
  const t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], s = new Array(e);
  for (let r = 0; r < n.length; r++) s[n[r]] = t[r];
  return s.join();
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class d7 {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true;
    const s = new Array(e.length);
    for (let l = 0; l < s.length; l++) s[l] = e[t[l]];
    if (this.outputShape = s, this.rank = s.length, this.rank > 6) throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    const r = bt(this.rank), a = eN("rc", this.rank), o = new Array(this.rank);
    for (let l = 0; l < t.length; l++) o[t[l]] = a[l];
    const i = `vec2(${o.slice(-2).join()})`, u = `++${a[this.rank - 1]} < ${s[this.rank - 1]}`, c = `getChannel(getA(${o.join()}), ${i})`;
    this.userCode = `
    void main() {
      ${r} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${c};
      if(${u}) {
        result[1] = ${c};
      }
      --${a[this.rank - 1]};
      if(++${a[this.rank - 2]} < ${s[this.rank - 2]}) {
        result[2] = ${c};
        if(${u}) {
          result[3] = ${c};
        }
      }
      setOutput(result);
    }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Em(n, e, t) {
  const s = U().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new d7(n.shape, e) : new l7(n.shape, e);
  return t.runWebGLProgram(s, [n], n.dtype);
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function h7(n, e, t, s) {
  const r = e, a = n.shape.length, o = Ee(r, n.shape);
  let i = o;
  const u = ct(i, a), c = u != null;
  let l = n;
  c && (l = Em(n, u, s), i = it(i.length, a)), mt("sum", i, a);
  const [d, h] = xt(l.shape, i);
  let p = d;
  t && (p = ft(d, o));
  const f = A(h), g = A(n.shape) / f, y = de({ inputs: { x: l }, attrs: { shape: [g, f] }, backend: s }), b = Md(n.dtype), x = al(y, b, "sum", s), w = de({ inputs: { x }, attrs: { shape: p }, backend: s });
  return s.disposeIntermediateTensorInfo(y), s.disposeIntermediateTensorInfo(x), c && s.disposeIntermediateTensorInfo(l), w;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Dm(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s;
  return h7(r, a, o, t);
}
const p7 = { kernelName: Go, backendName: "webgl", kernelFunc: Dm };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Dn(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { perm: a } = s, o = t, i = r.shape.length, u = new Array(i);
  for (let l = 0; l < u.length; l++) u[l] = r.shape[a[l]];
  let c;
  if (o.shouldExecuteOnCPU([r])) {
    const d = o.texData.get(r.dataId).values, h = y0(d, r.shape, r.dtype, a, u);
    c = o.makeTensorInfo(u, r.dtype);
    const p = o.texData.get(c.dataId);
    p.values = h;
  } else c = Em(r, a, o);
  return c;
}
const f7 = { kernelName: fr, backendName: "webgl", kernelFunc: Dn };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const lN = 1e3;
function Zp({ a: n, b: e, transposeA: t, transposeB: s, backend: r, bias: a = null, preluActivationWeights: o = null, leakyreluAlpha: i = 0, activation: u = null }) {
  const c = n.shape.length, l = e.shape.length, d = t ? n.shape[c - 2] : n.shape[c - 1], h = s ? e.shape[l - 1] : e.shape[l - 2], p = t ? n.shape[c - 1] : n.shape[c - 2], f = s ? e.shape[l - 2] : e.shape[l - 1], m = n.shape.slice(0, -2), g = e.shape.slice(0, -2), y = A(m), b = A(g), w = Re(n.shape.slice(0, -2), e.shape.slice(0, -2)).concat([p, f]);
  $(d === h, () => `Error in matMul: inner shapes (${d}) and (${h}) of Tensors with shapes ${n.shape} and ${e.shape} and transposeA=${t} and transposeB=${s} must match.`);
  const C = t ? [y, d, p] : [y, p, d], v = s ? [b, f, h] : [b, h, f], k = de({ inputs: { x: n }, backend: r, attrs: { shape: C } }), R = de({ inputs: { x: e }, backend: r, attrs: { shape: v } }), N = [k, R], T = Math.max(y, b), S = t ? k.shape[1] : k.shape[2], E = a != null, P = o != null, M = u === "leakyrelu", L = u != null ? md(u, true) : null, V = E || P || M || L != null;
  let q;
  if ((p === 1 || f === 1) && S > lN && V === false) {
    let K = k, X = R;
    t && (K = Dn({ inputs: { x: k }, backend: r, attrs: { perm: [0, 2, 1] } }), N.push(K)), s && (X = Dn({ inputs: { x: R }, backend: r, attrs: { perm: [0, 2, 1] } }), N.push(X));
    const Z = f !== 1, ee = f === 1;
    let J = K;
    Z && (J = de({ inputs: { x: K }, backend: r, attrs: { shape: [T, S, 1] } }), N.push(J));
    const re = f === 1 ? 2 : 1;
    let se = X;
    ee && (se = de({ inputs: { x: X }, backend: r, attrs: { shape: [T, 1, S] } }), N.push(se));
    const pe = x0({ inputs: { a: J, b: se }, backend: r });
    q = Dm({ inputs: { x: pe }, backend: r, attrs: { axis: re, keepDims: true } }), N.push(pe);
  } else {
    const K = tn(n.dtype, e.dtype), X = new uN(C, v, [T, p, f], t, s, E, L, P, M), Z = [k, R];
    if (a != null && Z.push(a), P && Z.push(o), M) {
      const ee = r.makeTensorInfo([], "float32", qr(i, "float32"));
      Z.push(ee), N.push(ee);
    }
    q = r.runWebGLProgram(X, Z, K);
  }
  const G = de({ inputs: { x: q }, backend: r, attrs: { shape: w } });
  N.push(q);
  for (const K of N) r.disposeIntermediateTensorInfo(K);
  return G;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function m7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: a, bias: o, preluActivationWeights: i } = e, { transposeA: u, transposeB: c, activation: l, leakyreluAlpha: d } = s;
  return Zp({ a: r, b: a, transposeA: u, transposeB: c, backend: t, bias: o, preluActivationWeights: i, leakyreluAlpha: d, activation: l });
}
const g7 = { kernelName: ba, backendName: "webgl", kernelFunc: m7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const yC = "return abs(x);";
function y7(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (t.shouldExecuteOnCPU([s]) && s.dtype !== "complex64") {
    const a = t.texData.get(s.dataId), o = Zk(a.values);
    return t.makeTensorInfo(s.shape, s.dtype, o);
  }
  let r;
  return U().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new da(s.shape, yC) : r = new pr(s.shape, yC), t.runWebGLProgram(r, [s], s.dtype);
}
const b7 = { kernelName: Yi, backendName: "webgl", kernelFunc: y7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const x7 = Ms + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`, w7 = nt({ opSnippet: x7 }), C7 = { kernelName: Ea, backendName: "webgl", kernelFunc: w7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const I7 = Ms + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`, S7 = nt({ opSnippet: I7 }), v7 = { kernelName: Da, backendName: "webgl", kernelFunc: S7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bC = "return a + b;", $7 = Cn({ opSnippet: bC, packedOpSnippet: bC, supportsComplex: true, cpuKernelImpl: F8 }), k7 = { kernelName: Ur, backendName: "webgl", kernelFunc: $7 };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class N7 {
  constructor(e, t) {
    this.outputShape = [], this.outputShape = e, this.variableNames = t.map((a, o) => `T${o}`);
    const s = [];
    this.variableNames.forEach((a) => {
      s.push(`float v${a} = get${a}AtOutCoords();`);
    });
    const r = this.variableNames.map((a) => `v${a}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        float result = ${r};
        setOutput(result);
      }
    `;
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let T7 = class {
  constructor(e, t) {
    this.outputShape = [], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.variableNames = t.map((a, o) => `T${o}`);
    const s = [];
    this.variableNames.forEach((a) => {
      s.push(`vec4 v${a} = get${a}AtOutCoords();`);
    });
    const r = this.variableNames.map((a) => `v${a}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        vec4 result = ${r};
        setOutput(result);
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function $p(n) {
  const { inputs: e, backend: t } = n, s = e;
  if (s.length === 1) return is({ inputs: { x: s[0] }, backend: t });
  if (s.length > U().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    const u = Math.floor(s.length / 2), c = $p({ inputs: s.slice(0, u), backend: t }), l = $p({ inputs: s.slice(u), backend: t });
    return $p({ inputs: [c, l], backend: t });
  }
  const r = s.map((u) => u.dtype).reduce((u, c) => tn(u, c)), a = s.map((u) => u.shape), i = U().getBool("WEBGL_PACK") ? new T7(s[0].shape, a) : new N7(s[0].shape, a);
  return t.runWebGLProgram(i, s, r);
}
const R7 = { kernelName: Aa, backendName: "webgl", kernelFunc: $p };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s, i = r.shape.length, u = Ee(a, r.shape);
  let c = u;
  const l = ct(c, i);
  let d = r;
  l != null && (d = Dn({ inputs: { x: r }, backend: t, attrs: { perm: l } }), c = it(c.length, i)), mt("all", c, i);
  const [h, p] = xt(d.shape, c), f = A(p), m = de({ inputs: { x: d }, backend: t, attrs: { shape: [-1, f] } }), g = al(m, m.dtype, "all", t);
  let y;
  if (o) {
    const b = ft(h, u);
    y = de({ inputs: { x: g }, backend: t, attrs: { shape: b } });
  } else y = de({ inputs: { x: g }, backend: t, attrs: { shape: h } });
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), l != null && t.disposeIntermediateTensorInfo(d), y;
}
const E7 = { kernelName: Qi, backendName: "webgl", kernelFunc: _7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function D7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s, i = r.shape.length, u = Ee(a, r.shape);
  let c = u;
  const l = ct(c, i);
  let d = r;
  l != null && (d = Dn({ inputs: { x: r }, backend: t, attrs: { perm: l } }), c = it(c.length, i)), mt("any", c, i);
  const [h, p] = xt(d.shape, c), f = A(p), m = de({ inputs: { x: d }, backend: t, attrs: { shape: [-1, f] } }), g = al(m, m.dtype, "any", t);
  let y;
  if (o) {
    const b = ft(h, u);
    y = de({ inputs: { x: g }, backend: t, attrs: { shape: b } });
  } else y = de({ inputs: { x: g }, backend: t, attrs: { shape: h } });
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), l != null && t.disposeIntermediateTensorInfo(d), y;
}
const A7 = { kernelName: Zi, backendName: "webgl", kernelFunc: D7 };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let F7 = class {
  constructor(e, t, s) {
    this.variableNames = ["A"];
    const { windowSize: r, batchSize: a, outSize: o } = e;
    s || this.variableNames.push("bestIndicesA"), this.outputShape = [a, o];
    const i = t === "max" ? ">" : "<", u = s ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${r}; i++) {
          int inIdx = ${u};
          float candidate = getA(batch, inIdx);
          if (candidate ${i} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
};
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class O7 {
  constructor(e, t, s, r) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, $(e.length > 2, () => `Packed arg${s.charAt(0).toUpperCase() + s.slice(1)} supports only inputs with rank above 2.`);
    const a = e[e.length - 1], o = Math.ceil(a / t);
    this.outputShape = e.slice(0, -1), o > 1 && this.outputShape.push(o), r || this.variableNames.push("bestIndicesA");
    const i = this.outputShape, u = i.length, c = bt(u), l = _n("coords", u);
    let d, h;
    if (o === 1) {
      h = u + 1;
      const R = bt(h);
      d = `
        ${R} sourceLocR = ${R}(${l.join()}, 0);
        ++${l[u - 1]};
        ${R} sourceLocG = ${R}(${l.join()}, 0);
        ++${l[u - 2]};
        ${R} sourceLocA = ${R}(${l.join()}, 0);
        --${l[u - 1]};
        ${R} sourceLocB = ${R}(${l.join()}, 0);
        --${l[u - 2]};`;
    } else h = u, d = `
        ${c} sourceLocR = coords;
        ++${l[u - 1]};
        ${c} sourceLocG = coords;
        ++${l[u - 2]};
        ${c} sourceLocA = coords;
        --${l[u - 1]};
        ${c} sourceLocB = coords;
        --${l[u - 2]};`;
    const p = ["x", "y", "z", "w", "u", "v"].slice(0, h), f = "." + p[h - 1], m = p.map((R) => "int " + R), g = _n("sourceLocR", h - 1).concat("inIdx.r"), y = _n("sourceLocG", h - 1).concat("inIdx.g"), b = _n("sourceLocB", h - 1).concat("inIdx.b"), x = _n("sourceLocA", h - 1).concat("inIdx.a"), w = s === "max" ? "greaterThan" : "lessThan", C = r ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${x.join()})));`, v = `vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${y.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`, k = r ? "" : `
      float getBestIndicesAChannel(${m.join()}) {
        return getChannel(getBestIndicesA(${p.join()}),
                                          vec2(${p.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${m.join()}) {
        return getChannel(getA(${p.join()}),
                               vec2(${p.slice(-2).join()}));
      }
      ${k}
      void main() {
        ${c} coords = getOutputCoords();
        bool hasNextCol = ${l[u - 1]} < ${i[u - 1] - 1};
        bool hasNextRow = ${l[u - 2]} < ${i[u - 2] - 1};
        ${d}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${v};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${C}
          vec4 candidate = ${v};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function cN(n, e, t, s = null) {
  let r = e.shape[0], a = e.shape[1];
  s != null && (r = s.shape[0], a = s.shape[1]);
  const o = Yf(a), i = { windowSize: o, inSize: a, batchSize: r, outSize: Math.ceil(a / o) }, u = new F7(i, t, s == null), c = [e];
  s != null && c.push(s);
  const l = n.runWebGLProgram(u, c, "int32");
  if (l.shape[1] === 1) return l;
  const d = cN(n, e, t, l);
  return n.disposeIntermediateTensorInfo(l), d;
}
function dN(n, e, t, s = null) {
  const r = s != null ? s.shape : e.shape, a = r[r.length - 1], o = Yf(a), i = new O7(r, o, t, s == null), u = s == null ? [e] : [e, s], c = n.runWebGLProgram(i, u, "int32");
  if (c.shape.length === e.shape.length) {
    const l = dN(n, e, t, c);
    return n.disposeIntermediateTensorInfo(c), l;
  }
  return c;
}
function hN(n, e, t, s) {
  const r = [t];
  if (mt("arg" + s.charAt(0).toUpperCase() + s.slice(1), r, e.shape.length), !U().getBool("WEBGL_PACK_REDUCE") || e.shape.length <= 2) {
    const a = [], o = n.texData.get(e.dataId), i = o !== null && o.isPacked;
    let u = e;
    i && (u = n.unpackTensor(e), a.push(u));
    const [c, l] = xt(u.shape, r), d = A(l), h = de({ inputs: { x: u }, backend: n, attrs: { shape: [-1, d] } });
    a.push(h);
    const p = cN(n, h, s);
    a.push(p);
    const f = de({ inputs: { x: p }, backend: n, attrs: { shape: c } });
    return a.forEach((m) => n.disposeIntermediateTensorInfo(m)), f;
  }
  return dN(n, e, s);
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function P7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a } = s;
  let o = Ee(a, r.shape);
  const i = ct(o, r.shape.length);
  let u = r;
  const c = [];
  i != null && (u = Dn({ inputs: { x: r }, backend: t, attrs: { perm: i } }), c.push(u), o = it(o.length, u.shape.length)), mt("argMax", [o[0]], u.shape.length);
  const l = hN(t, u, o[0], "max");
  return c.forEach((d) => t.disposeIntermediateTensorInfo(d)), l;
}
const L7 = { kernelName: Ji, backendName: "webgl", kernelFunc: P7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function z7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a } = s;
  let o = Ee(a, r.shape);
  const i = ct(o, r.shape.length);
  let u = r;
  const c = [];
  i != null && (u = Dn({ inputs: { x: r }, backend: t, attrs: { perm: i } }), c.push(u), o = it(o.length, u.shape.length)), mt("argMin", [o[0]], u.shape.length);
  const l = hN(t, u, o[0], "min");
  return c.forEach((d) => t.disposeIntermediateTensorInfo(d)), l;
}
const M7 = { kernelName: eu, backendName: "webgl", kernelFunc: z7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const B7 = Ms + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`, W7 = nt({ opSnippet: B7 }), V7 = { kernelName: Fa, backendName: "webgl", kernelFunc: W7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const U7 = Ms + "return log(x + sqrt(x * x + 1.0));", G7 = nt({ opSnippet: U7 }), H7 = { kernelName: Oa, backendName: "webgl", kernelFunc: G7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const j7 = Ms + `
  return atan(x);
`, q7 = nt({ opSnippet: j7 }), K7 = { kernelName: Pa, backendName: "webgl", kernelFunc: q7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const X7 = b0 + `
  return atan(a, b);
`, Y7 = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + rl + `
  return result;
`, Q7 = Cn({ opSnippet: X7, packedOpSnippet: Y7 }), Z7 = { kernelName: za, backendName: "webgl", kernelFunc: Q7 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const J7 = Ms + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`, eQ = nt({ opSnippet: J7 }), tQ = { kernelName: La, backendName: "webgl", kernelFunc: eQ };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let gd = class {
  constructor(e, t, s, r = false, a = false) {
    if (this.variableNames = ["x"], t === "avg" && s) throw new Error("Cannot compute positions for average pool.");
    const o = e.filterWidth, i = e.strideHeight, u = e.strideWidth, c = e.dilationHeight, l = e.dilationWidth, d = e.effectiveFilterHeight, h = e.effectiveFilterWidth, p = e.padInfo.top, f = e.padInfo.left;
    this.outputShape = e.outShape;
    const m = t === "avg", g = `((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`, y = `(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;
    let b = "0.0";
    if (m || (b = "-1.0 / 1e-20"), s) {
      const R = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${i}, ${u});
        const ivec2 pads = ivec2(${p}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${d};
              wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${h};
                wC += ${l}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${R} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${r ? a ? g : y : `wR * ${h} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const x = "max";
    let w = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && (w = "avgValue / max(count, 1.0)");
    const C = Math.floor(o / 4) * 4, v = o % 4, k = `
      if (${m}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${x}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${i}, ${u});
      const ivec2 pads = ivec2(${p}, ${f});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${d};
            wR += ${c}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${C}; wC += 4) {
            int xC = xCCorner + wC * ${l};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${l}, d),
              getValue(batch, xR, xC + 2 * ${l}, d),
              getValue(batch, xR, xC + 3 * ${l}, d)
            );

            ${k}
          }

          int xC = xCCorner + ${C};
          if (${v === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${k}
          } else if (${v === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${l}, d),
              initializationValue,
              initializationValue
            );

            ${k}
          } else if (${v === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${l}, d),
              getValue(batch, xR, xC + 2 * ${l}, d),
              initializationValue
            );

            ${k}
          }
        }
        setOutput(${w});
      }
    `;
  }
}, w0 = class {
  constructor(e, t, s, r = false, a = false) {
    if (this.variableNames = ["x"], t === "avg" && s) throw new Error("Cannot compute positions for average pool.");
    const o = e.filterWidth, i = e.strideDepth, u = e.strideHeight, c = e.strideWidth, l = e.dilationDepth, d = e.dilationHeight, h = e.dilationWidth, p = e.effectiveFilterDepth, f = e.effectiveFilterHeight, m = e.effectiveFilterWidth, g = e.padInfo.front, y = e.padInfo.top, b = e.padInfo.left;
    this.outputShape = e.outShape;
    const x = t === "avg";
    let w = "0.0";
    if (x || (w = "-1.0 / 1e-20"), s) {
      const T = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${i}, ${u}, ${c});
        const ivec3 pads = ivec3(${g}, ${y}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${p};
              wD += ${l}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${d}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${m};
                  wC += ${h}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${T} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${r ? a ? `(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `wD * ${f} * ${m} +
                      wR * ${m} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const C = "max";
    let v = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && (v = "avgValue / max(count, 1.0)");
    const k = Math.floor(o / 4) * 4, R = o % 4, N = `
      if (${x}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${C}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${i}, ${u}, ${c});
      const ivec3 pads = ivec3(${g}, ${y}, ${b});
      const float initializationValue = ${w};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${w});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${l}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${d}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${k}; wC += 4) {
              int xC = xCCorner + wC * ${h};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                getValue(batch, xD, xR, xC + 2 * ${h}, ch),
                getValue(batch, xD, xR, xC + 3 * ${h}, ch)
              );

              ${N}
            }

            int xC = xCCorner + ${k};
            if (${R === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${N}
            } else if (${R === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                initializationValue,
                initializationValue
              );

              ${N}
            } else if (${R === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                getValue(batch, xD, xR, xC + 2 * ${h}, ch),
                initializationValue
              );

              ${N}
            }
          }
        }
        setOutput(${v});
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nQ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e;
  wc(r, "avgPool");
  const { filterSize: a, strides: o, pad: i, dimRoundingMode: u } = s, c = 1;
  $(qt(o, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);
  const l = zt(r.shape, a, o, c, i, u);
  if (l.filterWidth === 1 && l.filterHeight === 1 && Be(l.inShape, l.outShape)) return is({ inputs: { x: r }, backend: t });
  const d = new gd(l, "avg", false);
  return t.runWebGLProgram(d, [r], "float32");
}
const sQ = { kernelName: Ma, backendName: "webgl", kernelFunc: nQ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function rQ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: a, strides: o, pad: i, dimRoundingMode: u, dataFormat: c } = s, l = [1, 1, 1], d = Sn(r.shape, a, o, l, i, u, c), h = new w0(d, "avg", false);
  return t.runWebGLProgram(h, [r], "float32");
}
const aQ = { kernelName: tu, backendName: "webgl", kernelFunc: rQ };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let oQ = class {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    const t = e.filterHeight, s = e.filterWidth, r = e.strideHeight, a = e.strideWidth, o = e.dilationHeight, i = e.dilationWidth, u = e.effectiveFilterHeight, c = e.effectiveFilterWidth, l = u - 1 - e.padInfo.top, d = c - 1 - e.padInfo.left, h = 1 / (t * s);
    this.userCode = `
      const ivec2 pads = ivec2(${l}, ${d});
      const float avgMultiplier = float(${h});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${u};
            wR += ${o}) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${c};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}, iQ = class {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    const t = e.filterDepth, s = e.filterHeight, r = e.filterWidth, a = e.strideDepth, o = e.strideHeight, i = e.strideWidth, u = e.dilationDepth, c = e.dilationHeight, l = e.dilationWidth, d = e.effectiveFilterDepth, h = e.effectiveFilterHeight, p = e.effectiveFilterWidth, f = d - 1 - e.padInfo.front, m = h - 1 - e.padInfo.top, g = p - 1 - e.padInfo.left, y = 1 / (t * s * r);
    this.userCode = `
      const ivec3 pads = ivec3(${f}, ${m}, ${g});
      const float avgMultiplier = float(${y});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${u}) {
          float dyD = float(dyDCorner + wD) / ${a}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${h};
              wR += ${c}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${p};
                wC += ${l}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function uQ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, o = a, { filterSize: i, strides: u, pad: c, dimRoundingMode: l } = s, d = [1, 1, 1], h = Sn(o.shape, i, u, d, c, l), p = new iQ(h);
  return t.runWebGLProgram(p, [r], o.dtype);
}
const lQ = { kernelName: zl, backendName: "webgl", kernelFunc: uQ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function cQ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, o = a;
  wc([r, a], "avgPoolGrad");
  const { filterSize: i, strides: u, pad: c } = s, l = zt(o.shape, i, u, 1, c), d = new oQ(l);
  return t.runWebGLProgram(d, [r], o.dtype);
}
const dQ = { kernelName: Ll, backendName: "webgl", kernelFunc: cQ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function hQ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: a } = e, { transposeA: o, transposeB: i } = s;
  return Zp({ a: r, b: a, transposeA: o, transposeB: i, backend: t });
}
const pQ = { kernelName: Ba, backendName: "webgl", kernelFunc: hQ };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let fQ = class {
  constructor(e, t, s, r, a, o) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], Re(e, t), Re(e, s);
    let i = "0.0";
    r != null && (Re(e, r), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let u = "1.0";
    a != null && (Re(e, a), this.variableNames.push("scale"), u = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${u};
        float inv = scale * inversesqrt(variance + float(${o}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class mQ {
  constructor(e, t, s, r, a, o) {
    this.packedInputs = true, this.packedOutput = true, this.variableNames = ["x", "mean", "variance"], Re(e, t), Re(e, s);
    let i = "vec4(0.0)";
    r != null && (Re(e, r), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let u = "vec4(1.0)";
    a != null && (Re(e, a), this.variableNames.push("scale"), u = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${u};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${o}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const gQ = ({ inputs: n, backend: e, attrs: t }) => {
  const { x: s, mean: r, variance: a, offset: o, scale: i } = n;
  $(r.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), $(o == null || r.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), $(i == null || r.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: u } = t;
  u == null && (u = 1e-3);
  const c = [s, r, a];
  let l = null;
  o != null && (l = o.shape, c.push(o));
  let d = null;
  i != null && (d = i.shape, c.push(i));
  const h = U().getBool("WEBGL_PACK_NORMALIZATION") ? new mQ(s.shape, r.shape, a.shape, l, d, u) : new fQ(s.shape, r.shape, a.shape, l, d, u);
  return e.runWebGLProgram(h, c, c[0].dtype);
}, yQ = { kernelName: ro, backendName: "webgl", kernelFunc: gQ };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let bQ = class {
  constructor(e) {
    this.variableNames = ["source"], this.outputShape = e, this.rank = e.length;
    const t = bt(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const s = xQ(this.rank);
    let r;
    const a = e.map((o, i) => `sourceLoc.${oy[i]} = start[${i}] + coords.${oy[i]};`);
    r = `
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${a.join(`
`)}
      `, this.userCode = `
      void main() {
        ${r}
        setOutput(getSource(${s}));
      }
    `;
  }
};
const oy = ["x", "y", "z", "w", "u", "v"];
function xQ(n) {
  if (n === 1) return "sourceLoc";
  if (n <= 6) return oy.slice(0, n).map((e) => "sourceLoc." + e).join(",");
  throw Error(`Slicing for rank ${n} is not yet supported`);
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class wQ {
  constructor(e) {
    this.variableNames = ["source"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.rank = e.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const t = bt(this.rank), s = _n("coords", this.rank), r = _n("sourceLoc", this.rank), a = this.rank === 1 ? "sourceLoc" : `vec2(${r.slice(-2).join()})`, o = `getChannel(getSource(${r.join()}), ${a})`, i = `
      result.x = ${o};
      if (++${s[this.rank - 1]} < ${e[this.rank - 1]}) {
        ++${r[this.rank - 1]};
        result.y = ${o};
        --${r[this.rank - 1]};
      }
    `, u = this.rank === 1 ? "" : `
      --${s[this.rank - 1]};
      if (++${s[this.rank - 2]} < ${e[this.rank - 2]}) {
        ++${r[this.rank - 2]};
        result.z = ${o};
        if (++${s[this.rank - 1]} < ${e[this.rank - 1]}) {
          ++${r[this.rank - 1]};
          result.w = ${o};
        }
      }
    `, c = this.rank <= 4 ? `sourceLoc = coords +
            ${t}(${e.map((l, d) => `start[${d}]`).join()});` : e.map((l, d) => `${r[d]} = ${s[d]} + start[${d}];`).join(`
`);
    this.userCode = `
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${c}
        vec4 result = vec4(0.);
        ${i}
        ${u}
        setOutput(result);
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function CQ(n, e, t, s) {
  const r = s.texData.get(n.dataId), a = s.makeTensorInfo(t, n.dtype), o = s.texData.get(a.dataId);
  Object.assign(o, r), o.refCount = 1, o.shape = t, o.dtype = n.dtype;
  let i = Xf(e, me(n.shape));
  r.slice && (i += r.slice.flatOffset), o.slice = { flatOffset: i, origDataId: r.slice && r.slice.origDataId || n.dataId };
  const u = s.dataRefCount.get(o.slice.origDataId) || 1;
  return s.dataRefCount.set(o.slice.origDataId, u + 1), a;
}
function Nc(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { begin: a, size: o } = s, [i, u] = hc(r, a, o);
  if (qf(r, i, u), A(u) === 0) return t.makeTensorInfo(u, r.dtype, []);
  if (t.shouldExecuteOnCPU([r]) || r.dtype === "string") {
    const d = t.texData.get(r.dataId), h = hY(d.values, i, u, r.shape, r.dtype);
    return t.makeTensorInfo(u, r.dtype, h);
  }
  const { isPacked: c } = t.texData.get(r.dataId), l = Kf(r.shape, i, u);
  if (c || !l) {
    const d = U().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new wQ(u) : new bQ(u), h = [i];
    return t.runWebGLProgram(d, [r], r.dtype, h);
  }
  return t.uploadToGPU(r.dataId), CQ(r, i, u, t);
}
const IQ = { kernelName: Mu, backendName: "webgl", kernelFunc: Nc };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const SQ = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: a, crops: o } = s;
  $(r.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  const i = a.reduce((b, x) => b * x), u = Zr(r.shape, a, i), c = Jr(u.length, a.length), l = ea(r.shape, a, i), d = dh(o, a.length), h = hh(l, o, a.length), p = [], f = de({ inputs: { x: r }, backend: t, attrs: { shape: u } }), m = Dn({ inputs: { x: f }, backend: t, attrs: { perm: c } }), g = de({ inputs: { x: m }, backend: t, attrs: { shape: l } }), y = Nc({ inputs: { x: g }, backend: t, attrs: { begin: d, size: h } });
  return p.push(f), p.push(m), p.push(g), p.forEach((b) => t.disposeIntermediateTensorInfo(b)), y;
}, vQ = { kernelName: nu, backendName: "webgl", kernelFunc: SQ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function $Q(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, weights: a } = e, { size: o } = s, i = t.readSync(r.dataId), u = t.readSync(a.dataId), c = Qk(i, u, a.dtype, a.shape, o);
  return t.makeTensorInfo([o], a.dtype, c);
}
const kQ = { kernelName: su, backendName: "webgl", kernelFunc: $Q };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const NQ = `
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`, TQ = `
  return float(int(a.r) & int(b.r));
`;
function RQ(n) {
  const { inputs: e, backend: t } = n, { a: s, b: r } = e, a = U().getBool("WEBGL_PACK_BINARY_OPERATIONS"), o = U().getNumber("WEBGL_VERSION");
  if (t.shouldExecuteOnCPU([s, r]) || o === 1) {
    const u = t.texData.get(s.dataId).values, c = t.texData.get(r.dataId).values, [l, d] = P8(s.shape, r.shape, u, c, s.dtype), h = t.makeTensorInfo(d, s.dtype), p = t.texData.get(h.dataId);
    return p.values = l, h;
  }
  let i;
  return a ? i = new $c(NQ, s.shape, r.shape, false) : i = new ji(TQ, s.shape, r.shape), t.runWebGLProgram(i, [s, r], s.dtype);
}
const _Q = { kernelName: Ml, backendName: "webgl", kernelFunc: RQ };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function EQ(n) {
  const { inputs: e, backend: t } = n, { s0: s, s1: r } = e, a = t.readSync(s.dataId), o = t.readSync(r.dataId), i = Re(Array.from(a), Array.from(o));
  return t.makeTensorInfo([i.length], "int32", Int32Array.from(i));
}
const DQ = { kernelName: Bl, backendName: "webgl", kernelFunc: EQ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const AQ = "return float(a != b);", pN = Cn({ opSnippet: AQ, cpuKernelImpl: sY, dtype: "bool" }), FQ = { kernelName: Nu, backendName: "webgl", kernelFunc: pN };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Eh(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = t.texData.get(s.dataId);
  return is({ inputs: { x: r.complexTensorInfos.real }, backend: t });
}
const OQ = { kernelName: Dd, backendName: "webgl", kernelFunc: Eh };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const PQ = "return float(int(x));";
function LQ(n, e) {
  const t = new pr(n.shape, PQ), s = e.runWebGLProgram(t, [n], "int32");
  return { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function iy(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { dtype: a } = s;
  if (a === "complex64") {
    if (r.dtype === "complex64") return is({ inputs: { x: r }, backend: t });
    const o = Ot(r.shape), i = iy({ inputs: { x: r }, backend: t, attrs: { dtype: "float32" } }), u = ni({ inputs: { real: i, imag: o }, backend: t });
    return o.dispose(), t.disposeIntermediateTensorInfo(i), u;
  }
  if (r.dtype === "complex64") {
    const o = Eh({ inputs: { input: r }, backend: t }), i = iy({ inputs: { x: o }, backend: t, attrs: { dtype: a } });
    return t.disposeIntermediateTensorInfo(o), i;
  }
  if (!of(r.dtype, a)) {
    const o = is({ inputs: { x: r }, backend: t });
    return { dataId: o.dataId, shape: o.shape, dtype: a };
  }
  if (t.shouldExecuteOnCPU([r])) {
    const o = t.texData.get(r.dataId).values, [i, u, c] = L8(o, r.shape, r.dtype, a);
    return t.makeTensorInfo(i, u, c);
  }
  if (a === "int32") return LQ(r, t);
  if (a === "bool") {
    const o = t.makeTensorInfo([], "bool", Ht("bool", 1)), u = pN({ inputs: { a: r, b: o }, backend: t });
    return t.disposeIntermediateTensorInfo(o), u;
  }
  throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`);
}
const zQ = { kernelName: Wa, backendName: "webgl", kernelFunc: iy };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const xC = "return ceil(x);", MQ = nt({ opSnippet: xC, packedOpSnippet: xC, cpuKernelImpl: z8 }), BQ = { kernelName: Va, backendName: "webgl", kernelFunc: MQ };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let WQ = class {
  constructor(e) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class VQ {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function UQ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { clipValueMin: a, clipValueMax: o } = s;
  let i;
  U().getBool("WEBGL_PACK_CLIP") ? i = new VQ(r.shape) : i = new WQ(r.shape);
  const u = [[a], [o]];
  return t.runWebGLProgram(i, [r], r.dtype, u);
}
const GQ = { kernelName: Gr, backendName: "webgl", kernelFunc: UQ };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let HQ = class {
  constructor(e) {
    this.variableNames = ["real", "imag"], this.outputShape = e, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function wC(n, e) {
  return { dataId: e.dataId, dtype: e.dtype, shape: n.shape };
}
function jQ(n) {
  const { inputs: e, backend: t } = n, { x: s } = e, r = t.texData.get(s.dataId), a = new HQ(s.shape), o = [wC(s, r.complexTensorInfos.real), wC(s, r.complexTensorInfos.imag)];
  return t.runWebGLProgram(a, o, o[0].dtype);
}
const qQ = { kernelName: Wl, backendName: "webgl", kernelFunc: jQ };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let KQ = class {
  constructor(e) {
    this.outputShape = [], this.outputShape = xn(e, 1), this.variableNames = e.map((o, i) => `T${i}`);
    const t = new Array(e.length - 1);
    t[0] = e[0][1];
    for (let o = 1; o < t.length; o++) t[o] = t[o - 1] + e[o][1];
    const s = [`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];
    for (let o = 1; o < t.length; o++) {
      const i = t[o - 1];
      s.push(`else if (yC < ${t[o]}) setOutput(getT${o}(yR, yC-${i}));`);
    }
    const r = t.length, a = t[t.length - 1];
    s.push(`else setOutput(getT${r}(yR, yC-${a}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${s.join(`
        `)}
      }
    `;
  }
};
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class XQ {
  constructor(e, t) {
    this.packedInputs = true, this.packedOutput = true, this.outputShape = [], this.outputShape = xn(e, t);
    const s = this.outputShape, r = s.length, a = bt(r), o = _n("coords", r), i = ["x", "y", "z", "w", "u", "v"].slice(0, r);
    this.variableNames = e.map((m, g) => `T${g}`);
    const u = new Array(e.length - 1);
    u[0] = e[0][t];
    for (let m = 1; m < u.length; m++) u[m] = u[m - 1] + e[m][t];
    const c = i[t], l = i.slice(-2), d = i.join();
    let h = `if (${c} < ${u[0]}) {
        return getChannel(
            getT0(${d}), vec2(${l.join()}));
        }`;
    for (let m = 1; m < u.length; m++) {
      const g = u[m - 1];
      h += `
        if (${c} < ${u[m]}  && ${c} >= ${u[m - 1]}) {
          return getChannel(
            getT${m}(${lp(i, c, g)}),
            vec2(${lp(l, c, g)}));
        }`;
    }
    const p = u.length, f = u[u.length - 1];
    h += `
        return getChannel(
          getT${p}(${lp(i, c, f)}),
          vec2(${lp(l, c, f)}));`, this.userCode = `
      float getValue(${i.map((m) => "int " + m)}) {
        ${h}
      }

      void main() {
        ${a} coords = getOutputCoords();
        vec4 result = vec4(getValue(${o}), 0., 0., 0.);

        ${o[r - 1]} = ${o[r - 1]} + 1;
        if (${o[r - 1]} < ${s[r - 1]}) {
          result.g = getValue(${o});
        }

        ${o[r - 2]} = ${o[r - 2]} + 1;
        if (${o[r - 2]} < ${s[r - 2]}) {
          result.a = getValue(${o});
        }

        ${o[r - 1]} = ${o[r - 1]} - 1;
        if (${o[r - 2]} < ${s[r - 2]} &&
            ${o[r - 1]} < ${s[r - 1]}) {
          result.b = getValue(${o});
        }
        setOutput(result);
      }
    `;
  }
}
function lp(n, e, t) {
  const s = n.indexOf(e);
  return n.map((a, o) => o === s ? `${a} - ${t}` : a).join();
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Am(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = t.texData.get(s.dataId);
  return is({ inputs: { x: r.complexTensorInfos.imag }, backend: t });
}
const YQ = { kernelName: Ed, backendName: "webgl", kernelFunc: Am };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function jc(n, e, t) {
  const s = n[0].dtype;
  if (s === "complex64") {
    const p = n.map((b) => Eh({ inputs: { input: b }, backend: t })), f = n.map((b) => Am({ inputs: { input: b }, backend: t })), m = jc(p, e, t), g = jc(f, e, t), y = ni({ inputs: { real: m, imag: g }, backend: t });
    return p.forEach((b) => t.disposeIntermediateTensorInfo(b)), f.forEach((b) => t.disposeIntermediateTensorInfo(b)), t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), y;
  }
  let r = t.shouldExecuteOnCPU(n);
  if (s === "string" && (r = true), r) {
    const p = n.map((w) => {
      const v = [-1, A(w.shape.slice(e))];
      return de({ inputs: { x: w }, backend: t, attrs: { shape: v } });
    }), f = p.map((w) => ({ vals: t.readSync(w.dataId), shape: w.shape })), m = xn(p.map((w) => w.shape), 1), g = p[0].shape[0] === 1, y = M8(f, m, s, g), b = xn(n.map((w) => w.shape), e), x = t.makeTensorInfo(b, s, y);
    return p.forEach((w) => t.disposeIntermediateTensorInfo(w)), x;
  }
  const a = n.filter((p) => A(p.shape) > 0), o = U().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && a[0].shape.length > 1;
  if (a.length === 1) {
    const p = o ? new pr(n[0].shape, oa) : new da(n[0].shape, oa);
    return t.runWebGLProgram(p, n, s);
  }
  const i = U().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
  if (a.length > i) {
    const p = [];
    for (let m = 0; m < a.length; m += i) {
      const g = a.slice(m, m + i);
      p.push(jc(g, e, t));
    }
    const f = jc(p, e, t);
    for (const m of p) t.disposeIntermediateTensorInfo(m);
    return f;
  }
  if (o) {
    const p = new XQ(a.map((f) => f.shape), e);
    return t.runWebGLProgram(p, a, s);
  }
  const { tensors2D: u, outShape: c } = QQ(a, e, t), l = new KQ(u.map((p) => p.shape)), d = t.runWebGLProgram(l, u, s);
  u.forEach((p) => t.disposeIntermediateTensorInfo(p));
  const h = de({ inputs: { x: d }, attrs: { shape: c }, backend: t });
  return t.disposeIntermediateTensorInfo(d), h;
}
function QQ(n, e, t) {
  const s = xn(n.map((a) => a.shape), e);
  return { tensors2D: n.map((a) => de({ inputs: { x: a }, attrs: { shape: [-1, A(a.shape.slice(e))] }, backend: t })), outShape: s };
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function fN(n) {
  const { inputs: e, backend: t, attrs: s } = n, { axis: r } = s, a = Ee(r, e[0].shape)[0], o = e.map((c) => c.shape);
  lh(o, a);
  const i = xn(e.map((c) => c.shape), a);
  if (A(i) === 0) return t.makeTensorInfo(i, e[0].dtype, []);
  const u = e.filter((c) => A(c.shape) > 0);
  return u.length === 1 ? is({ inputs: { x: u[0] }, backend: t }) : jc(u, a, t);
}
const ZQ = { kernelName: ru, backendName: "webgl", kernelFunc: fN };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class mN {
  constructor(e, t = false, s = null, r = false, a = false) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    const o = e.padInfo.top, i = e.padInfo.left, u = e.strideHeight, c = e.strideWidth, l = e.dilationHeight, d = e.dilationWidth, h = e.filterHeight, p = e.filterWidth, f = Math.floor(e.inChannels / 4) * 4, m = e.inChannels % 4, g = e.dataFormat === "channelsLast", y = g ? 1 : 2, b = g ? 2 : 3, x = g ? 3 : 1;
    let w = "", C = "";
    s && (r ? w = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : a ? w = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : w = `
          float activation(float x) {
            ${s}
          }
        `, C = "result = activation(result);");
    const v = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), a && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${w}

      const ivec2 strides = ivec2(${u}, ${c});
      const ivec2 pads = ivec2(${o}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${x}];

        ivec2 xRCCorner =
            ivec2(coords[${y}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${h}; wR++) {
          int xR = xRCorner + wR * ${l};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${p}; wC++) {
            int xC = xCCorner + wC * ${d};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${m === 1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${m === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${m === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${v}
        ${C}
        setOutput(result);
      }
    `;
  }
}
class JQ {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    const t = e.padInfo.front, s = e.padInfo.top, r = e.padInfo.left, a = e.strideDepth, o = e.strideHeight, i = e.strideWidth, u = e.dilationDepth, c = e.dilationHeight, l = e.dilationWidth, d = e.filterDepth, h = e.filterHeight, p = e.filterWidth, f = Math.floor(e.inChannels / 4) * 4, m = e.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${a}, ${o}, ${i});
      const ivec3 pads = ivec3(${t}, ${s}, ${r});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${d}; wF++) {
          int xF = xFCorner + wF * ${u};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h}; wR++) {
            int xR = xRCorner + wR * ${c};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p}; wC++) {
              int xC = xCCorner + wC * ${l};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${m === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${m === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${m === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class gN {
  constructor(e, t = false, s = null, r = false, a = false) {
    this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = $n(this.outputShape.length);
    const o = e.padInfo.left, i = e.strideWidth, u = e.dilationWidth, c = e.filterHeight, l = e.filterWidth, d = l;
    let h = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let g = 0; g < l; g++) h += `
           vec4 xTexelC${g * 2};
           int xTexelC${g * 2}Ready;
           vec4 xTexelC${g * 2 + 1};
           int xTexelC${g * 2 + 1}Ready;
           vec4 xC${g};`;
    h += `
     for (int r = 0; r < ${c}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;
    for (let g = 0; g < l; g++) h += `
           xTexelC${g * 2} = vec4(0.0);
           xTexelC${g * 2}Ready = 0;
           xTexelC${g * 2 + 1} = vec4(0.0);
           xTexelC${g * 2 + 1}Ready = 0;
           xC${g} = vec4(0.0);`;
    h += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let g = 0; g < (d + 1) / 2; g++) {
      const y = g * 2;
      if (h += `
           xC = xCCorner + ${y * u};
           `, i === 1) {
        if (y < l && (o % 2 === 1 ? (h += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }
               `, u === 1 && y > 0 ? h += `
                 xC${y} = vec4(xTexelC${y - 2}.zw, xTexelC${y}.xy);
                 ` : h += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);
                   } else {
                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);
                   }
                   `) : h += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xC${y} = xTexelC${y};
                 `, y + 1 < l)) {
          const b = o % 2 === 0 ? af(u) : u;
          u % 2 === 0 && o % 2 === 1 || u % 2 !== 0 && o % 2 !== 1 ? (h += `
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                     xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${y + 1}.zw = vec2(0.0);
                     }
                     xTexelC${y + 1}Ready = 1;
                   }
                   `, u > 1 ? h += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${y + 1} = vec4(previous.zw, xTexelC${y + 1}.xy);
                     } else {
                      xC${y + 1} = vec4(0.0, 0.0, xTexelC${y + 1}.xy);
                     }
                     ` : h += `
                     xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.xy);
                     `) : b === 1 ? h += `
                     xC${y + 1} = xTexelC${y};
                     ` : h += `
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                       xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${y + 1}.zw = vec2(0.0);
                       }
                       xTexelC${y + 1}Ready = 1;
                     }

                     xC${y + 1} = xTexelC${y + 1};
                     `;
        }
      } else y < l && (o % 2 === 1 ? (h += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y + 1}Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.0);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
               `, y + 1 < l && (h += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${y + 1} = vec4(xTexelC${y + 1}.xy, final.xy);
                 `)) : (h += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(
                   xTexelC${y}.xy, xTexelC${y + 1}.xy);
               `, y + 1 < l && (h += `
                   xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
                 `)));
      y < l && (h += `
             wTexel = getW(r, ${y}, d1, d2);
             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, y + 1 < l && (h += `
               wTexel = getW(r, ${y + 1}, d1, d2);
               dotProd += xC${y + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${y + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
    }
    h += `
     }
   `, h += `
     }
   `, h += `
     }
   `;
    let p = "", f = "";
    s && (r ? p = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${s}
         }` : a ? p = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${s}
         }` : p = `vec4 activation(vec4 x) {
           ${s}
         }`, f = "result = activation(result);");
    const m = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), a && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${h}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${m}
         ${f}
         setOutput(result);
       }
     `;
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class eZ {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec4" }, { name: "pad", type: "ivec2" }, { name: "stride", type: "ivec2" }, { name: "dilation", type: "ivec2" }, { name: "inChannels", type: "int" }, { name: "itemsPerBlockRow", type: "int" }, { name: "outWidth", type: "int" }], this.outputShape = e, this.enableShapeUniforms = $n(this.outputShape.length);
    const { dataFormat: s } = t, r = Pn(), a = s === "channelsLast", o = a ? 1 : 2, i = a ? 2 : 3, u = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;
    let c = "";
    for (let l = 0; l <= 1; l++) for (let d = 0; d <= 1; d++) c += `
          blockIndex = rc.z + ${d};
          pos = rc.y + ${l};

          ${u}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${o}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${a}) {
                  innerDims = vec2(d1, ch);
                  result[${l * 2 + d}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${l * 2 + d}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${c}

        ${r.output} = result;
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Jp(n, e) {
  const t = n.length;
  return t >= 3 ? e ? [...n.slice(0, -3), n[t - 3] * n[t - 2], n[t - 1]] : [...n.slice(0, -3), n[t - 3], n[t - 2] * n[t - 1]] : !e && t === 1 && n[0] > 1 ? [n[0], 1] : null;
}
function yN({ x: n, filter: e, convInfo: t, backend: s, bias: r = null, preluActivationWeights: a = null, leakyreluAlpha: o = 0, activation: i = null }) {
  const u = n.shape, c = s.texData.get(n.dataId), l = t.inChannels, d = u[0] * u[1] * u[2], h = t.outChannels, p = t.dataFormat === "channelsLast", f = false, m = false;
  let g;
  const y = [];
  if (a != null) {
    const w = Jp(a.shape, p);
    w != null && (a = de({ inputs: { x: a }, backend: s, attrs: { shape: w } }), y.push(a));
  }
  if (r != null) {
    const w = Jp(r.shape, p);
    w != null && (r = de({ inputs: { x: r }, backend: s, attrs: { shape: w } }), y.push(r));
  }
  if (!((d === 1 || h === 1) && l > lN) && c.isPacked && p && c.texture != null && u[2] % 2 !== 0 && Be(c.shape.slice(-3), u.slice(-3))) {
    const w = u[0] * u[1] * (u[2] + 1), C = { dataId: n.dataId, shape: [1, w, t.inChannels], dtype: n.dtype }, v = c.shape;
    c.shape = c.shape.slice(), c.shape[c.shape.length - 2]++, $(fd(c.shape, C.shape), () => `packed reshape ${c.shape} to ${C.shape} isn't free`);
    const k = de({ inputs: { x: e }, backend: s, attrs: { shape: [1, t.inChannels, t.outChannels] } });
    y.push(k);
    const R = Zp({ a: C, b: k, backend: s, transposeA: f, transposeB: m, bias: r, activation: i, preluActivationWeights: a, leakyreluAlpha: o }), N = s.texData.get(R.dataId);
    $(N.isPacked, () => "batchMatMul result is expected to be packed"), c.shape = v, N.shape = t.outShape, g = is({ inputs: { x: R }, backend: s }), g.shape = t.outShape, y.push(R);
  } else {
    const w = t.outHeight * t.outWidth, C = de({ inputs: { x: n }, backend: s, attrs: { shape: p ? [t.batchSize, w, t.inChannels] : [t.batchSize, t.inChannels, w] } }), v = de({ inputs: { x: e }, backend: s, attrs: { shape: [1, t.inChannels, t.outChannels] } }), k = Zp({ a: p ? C : v, b: p ? v : C, transposeA: !p, transposeB: m, backend: s, bias: r, activation: i, preluActivationWeights: a, leakyreluAlpha: o });
    g = de({ inputs: { x: k }, backend: s, attrs: { shape: t.outShape } }), y.push(C), y.push(v), y.push(k);
  }
  for (const w of y) s.disposeIntermediateTensorInfo(w);
  return g;
}
function bN({ x: n, filter: e, convInfo: t, backend: s, bias: r = null, preluActivationWeights: a = null, leakyreluAlpha: o = 0, activation: i = null }) {
  const { filterWidth: u, filterHeight: c, inChannels: l, outWidth: d, outHeight: h, dataFormat: p } = t, f = p === "channelsLast", m = u * c * l, g = h * d, y = [t.batchSize, m, g], b = true, x = false, w = [];
  if (a != null) {
    const G = Jp(a.shape, f);
    G != null && (a = de({ inputs: { x: a }, backend: s, attrs: { shape: G } }), w.push(a));
  }
  if (r != null) {
    const G = Jp(r.shape, f);
    G != null && (r = de({ inputs: { x: r }, backend: s, attrs: { shape: G } }), w.push(r));
  }
  const C = de({ inputs: { x: e }, backend: s, attrs: { shape: [1, m, A(e.shape) / m] } });
  w.push(C);
  const v = new eZ(y, t), k = [n.shape, [t.padInfo.top, t.padInfo.left], [t.strideHeight, t.strideWidth], [t.dilationHeight, t.dilationWidth], [t.inChannels], [t.filterWidth * t.inChannels], [t.outWidth]], R = s.runWebGLProgram(v, [n], "float32", k), N = de({ inputs: { x: R }, backend: s, attrs: { shape: y } });
  w.push(R), w.push(N);
  const T = r != null, S = a != null, E = i === "leakyrelu", P = i ? md(i, true) : null, M = new uN(f ? N.shape : C.shape, f ? C.shape : N.shape, f ? [t.batchSize, g, t.outChannels] : [t.batchSize, t.outChannels, g], b, x, T, P, S, E), L = f ? [N, C] : [C, N];
  if (r && L.push(r), S && L.push(a), E) {
    const G = s.makeTensorInfo([], "float32", qr(o, "float32"));
    L.push(G), w.push(G);
  }
  const V = s.runWebGLProgram(M, L, "float32"), q = de({ inputs: { x: V }, backend: s, attrs: { shape: t.outShape } });
  w.push(V);
  for (const G of w) s.disposeIntermediateTensorInfo(G);
  return q;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function tZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dataFormat: u, dilations: c, dimRoundingMode: l } = s, d = An(u), h = lt(r.shape, a.shape, o, c, i, l, false, d);
  let p;
  if (h.filterHeight === 1 && h.filterWidth === 1 && h.dilationHeight === 1 && h.dilationWidth === 1 && h.strideHeight === 1 && h.strideWidth === 1 && (h.padInfo.type === "SAME" || h.padInfo.type === "VALID")) p = yN({ x: r, filter: a, convInfo: h, backend: t });
  else if (h.strideWidth <= 2 && d === "channelsLast" && U().getBool("WEBGL_EXP_CONV")) {
    const m = new gN(h), g = [[h.padInfo.top, h.padInfo.left], [h.strideHeight, h.strideWidth], [h.dilationHeight, h.dilationWidth], [h.inHeight, h.inWidth]];
    p = t.runWebGLProgram(m, [r, a], "float32", g);
  } else if (U().getBool("WEBGL_CONV_IM2COL")) p = bN({ x: r, filter: a, convInfo: h, backend: t });
  else {
    const m = new mN(h);
    p = t.runWebGLProgram(m, [r, a], "float32");
  }
  const f = de({ inputs: { x: p }, backend: t, attrs: { shape: h.outShape } });
  return t.disposeIntermediateTensorInfo(p), f;
}
const nZ = { kernelName: Ua, backendName: "webgl", kernelFunc: tZ };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let sZ = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    const t = e.strideHeight, s = e.strideWidth, r = e.padInfo.top, a = e.padInfo.left, o = e.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${r};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              ${o ? `float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);` : `float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}, rZ = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    const t = e.filterHeight, s = e.filterWidth, r = e.strideHeight, a = e.strideWidth, o = e.dataFormat === "channelsLast", i = t - 1 - e.padInfo.top, u = s - 1 - e.padInfo.left, c = o ? 1 : 2, l = o ? 2 : 3, d = o ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${u});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${d}];

        ivec2 dyCorner = ivec2(coords[${c}], coords[${l}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${o}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}, aZ = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    const t = e.strideDepth, s = e.strideHeight, r = e.strideWidth, a = e.padInfo.front, o = e.padInfo.top, i = e.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${a};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${s} - ${o};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${r} - ${i};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}, oZ = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    const t = e.filterDepth, s = e.filterHeight, r = e.filterWidth, a = e.strideDepth, o = e.strideHeight, i = e.strideWidth, u = t - 1 - e.padInfo.front, c = s - 1 - e.padInfo.top, l = r - 1 - e.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${u}, ${c}, ${l});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${a}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${s}; wR++) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${s} - 1 - wR;

            for (int wC = 0; wC < ${r}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${r} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function iZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: a } = e, { strides: o, pad: i, dataFormat: u, dimRoundingMode: c, filterShape: l } = s, d = An(u), h = lt(r.shape, l, o, 1, i, c, false, d), p = new sZ(h);
  return t.runWebGLProgram(p, [r, a], "float32");
}
const uZ = { kernelName: vd, backendName: "webgl", kernelFunc: iZ };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class lZ {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "strides", type: "vec2" }], this.outputShape = e.inShape, this.enableShapeUniforms = $n(this.outputShape.length);
    const t = e.filterHeight, s = e.filterWidth, r = t - 1 - e.padInfo.top, a = s - 1 - e.padInfo.left;
    this.userCode = `
      const ivec2 pads = ivec2(${r}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            int wCPerm = ${s} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function cZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: a } = e, { inputShape: o, strides: i, pad: u, dataFormat: c, dimRoundingMode: l } = s, d = An(c), h = lt(o, a.shape, i, 1, u, l, false, d);
  if (U().getBool("WEBGL_PACK_CONV2DTRANSPOSE") && d === "channelsLast") {
    const p = [[h.strideHeight, h.strideWidth]], f = new lZ(h);
    return t.runWebGLProgram(f, [r, a], "float32", p);
  } else {
    const p = new rZ(h);
    return t.runWebGLProgram(p, [r, a], "float32");
  }
}
const dZ = { kernelName: Ga, backendName: "webgl", kernelFunc: cZ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function hZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dilations: u } = s, c = cs(r.shape, a.shape, o, u, i), l = new JQ(c);
  return t.runWebGLProgram(l, [r, a], "float32");
}
const pZ = { kernelName: Ha, backendName: "webgl", kernelFunc: hZ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function fZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: a } = e, { strides: o, pad: i, filterShape: u } = s, c = cs(r.shape, u, o, 1, i), l = new aZ(c);
  return t.runWebGLProgram(l, [r, a], "float32");
}
const mZ = { kernelName: au, backendName: "webgl", kernelFunc: fZ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function gZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: a } = e, { pad: o, strides: i, inputShape: u } = s, c = cs(u, a.shape, i, 1, o), l = new oZ(c);
  return t.runWebGLProgram(l, [r, a], "float32");
}
const yZ = { kernelName: ou, backendName: "webgl", kernelFunc: gZ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bZ = kc + `
  return cos(x);
`, xZ = `
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${rl}
  return result;
`, wZ = nt({ opSnippet: bZ, packedOpSnippet: xZ }), CZ = { kernelName: ja, backendName: "webgl", kernelFunc: wZ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const IZ = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`, SZ = nt({ opSnippet: IZ }), vZ = { kernelName: qa, backendName: "webgl", kernelFunc: SZ };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let $Z = class {
  constructor(e, t, s, r, a) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    const [o, i, u, c] = e, [l] = t, [d, h] = s;
    this.outputShape = [l, d, h, c];
    const p = r === "bilinear" ? 1 : 0, [f, m] = [`${i - 1}.0`, `${u - 1}.0`], [g, y, b] = d > 1 ? [`${(i - 1) / (d - 1)}`, "(y2-y1) * height_ratio", `y1*${f} + float(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${f}`], [x, w, C] = h > 1 ? [`${(u - 1) / (h - 1)}`, "(x2-x1) * width_ratio", `x1*${m} + float(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${m}`];
    this.userCode = `
      const float height_ratio = float(${g});
      const float width_ratio = float(${x});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${o}) {
          return;
        }

        float height_scale = ${y};
        float width_scale = ${w};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${a}));
          return;
        }
        float in_x = ${C};
        if( in_x < 0.0 || in_x > ${m} ) {
          setOutput(float(${a}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${p} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const kZ = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { image: r, boxes: a, boxInd: o } = e, { cropSize: i, method: u, extrapolationValue: c } = s, l = new $Z(r.shape, a.shape, i, u, c);
  return t.runWebGLProgram(l, [r, a, o], "float32");
}, NZ = { kernelName: uu, backendName: "webgl", kernelFunc: kZ };
var yd;
(function(n) {
  n.Prod = "*", n.Sum = "+";
})(yd || (yd = {}));
let CC = class {
  constructor(e, t, s, r) {
    this.op = e, this.outputShape = t, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }];
    const a = this.outputShape.length, o = this.op === yd.Prod ? "1.0" : "0.0", i = s ? o : `getX(${IC(a, "coords", this.op)})`, u = this.outputShape[this.outputShape.length - 1];
    let c = "", l = "";
    s ? (c = r ? `end != ${u - 1}` : "end != 0", l = r ? "end + 1" : "end - 1") : (c = r ? `end + pow2 < ${u}` : "end >= pow2", l = r ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${bt(a)} coords = getOutputCoords();
        int end = ${SC(a, "coords", this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${c}) {
          int idx = ${l};
          ${SC(a, "coords", this.op)} = idx;
          val ${this.op}= getX(${IC(a, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
};
function IC(n, e, t) {
  if (n === 1) return `${e}`;
  if (n === 2) return `${e}.x, ${e}.y`;
  if (n === 3) return `${e}.x, ${e}.y, ${e}.z`;
  if (n === 4) return `${e}.x, ${e}.y, ${e}.z, ${e}.w`;
  throw new Error(`Cumulative ${t} for rank ${n} is not yet supported`);
}
function SC(n, e, t) {
  if (n === 1) return `${e}`;
  if (n === 2) return `${e}.y`;
  if (n === 3) return `${e}.z`;
  if (n === 4) return `${e}.w`;
  throw new Error(`Cumulative ${t} for rank ${n} is not yet supported`);
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function xN(n, e, t, s, r, a) {
  const o = e.shape.length, i = ct([s], o);
  let u = e;
  i != null && (u = Dn({ inputs: { x: e }, backend: t, attrs: { perm: i } }));
  const c = it(1, o)[0];
  if (c !== o - 1) throw new Error(`WebGL cumprod shader expects an inner-most axis=${e.shape.length - 1} but got axis=${s}`);
  const l = u.shape[c];
  let d = is({ inputs: { x: u }, backend: t });
  for (let h = 0; h <= Math.ceil(Math.log2(l)) - 1; h++) {
    const p = new CC(n, u.shape, false, a), f = [[h]], m = d;
    d = t.runWebGLProgram(p, [d], d.dtype, f), t.disposeIntermediateTensorInfo(m);
  }
  if (r) {
    const h = new CC(n, u.shape, r, a), p = d;
    d = t.runWebGLProgram(h, [d], d.dtype), t.disposeIntermediateTensorInfo(p);
  }
  if (i != null) {
    const h = Ls(i), p = Dn({ inputs: { x: d }, backend: t, attrs: { perm: h } });
    return t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(u), p;
  }
  return d;
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function TZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, exclusive: o, reverse: i } = s;
  return xN(yd.Prod, r, t, a, o, i);
}
const RZ = { kernelName: iu, backendName: "webgl", kernelFunc: TZ };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _Z(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, exclusive: o, reverse: i } = s;
  return xN(yd.Sum, r, t, a, o, i);
}
const EZ = { kernelName: Ka, backendName: "webgl", kernelFunc: _Z };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function DZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, weights: a } = e, { size: o, binaryOutput: i } = s;
  if (r.shape.length === 1) {
    const u = t.readSync(r.dataId), c = t.readSync(a.dataId), l = Qk(u, c, a.dtype, a.shape, o);
    return t.makeTensorInfo([o], a.dtype, l);
  } else if (r.shape.length === 2) {
    const u = t.bufferSync(r), c = t.bufferSync(a), l = O8(u, c, o, i);
    return t.makeTensorInfo(l.shape, a.dtype, l.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
const AZ = { kernelName: Vl, backendName: "webgl", kernelFunc: DZ };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let FZ = class {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = e, this.blockSize = t, this.dataFormat = s, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function OZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockSize: a, dataFormat: o } = s, i = r.shape[0], u = o === "NHWC" ? r.shape[1] : r.shape[2], c = o === "NHWC" ? r.shape[2] : r.shape[3], l = o === "NHWC" ? r.shape[3] : r.shape[1], d = u * a, h = c * a, p = l / (a * a), f = o === "NHWC" ? [i, d, h, p] : [i, p, d, h], m = new FZ(f, a, o);
  return t.runWebGLProgram(m, [r], r.dtype);
}
const PZ = { kernelName: lu, backendName: "webgl", kernelFunc: OZ };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let wN = class {
  constructor(e, t = false, s = null, r = false, a = false) {
    this.variableNames = ["x", "W"], this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = $n(this.outputShape.length);
    const o = e.filterHeight, i = e.filterWidth, u = e.outChannels / e.inChannels;
    let c = "", l = "";
    s && (r ? c = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : a ? c = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : c = `
          float activation(float x) {
            ${s}
          }
        `, l = "result = activation(result);");
    const d = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), a && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${c}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${u};
        int q = d2 - d1 * ${u};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${o}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${d}
        ${l}
        setOutput(result);
      }
    `;
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class CN {
  constructor(e, t = false, s = null, r = false, a = false) {
    this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = $n(this.outputShape.length);
    const o = e.outChannels / e.inChannels, i = e.padInfo.left, u = e.strideWidth, c = e.dilationWidth, l = e.filterHeight, d = e.filterWidth, h = d;
    let p = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let y = 0; y < d; y++) p += `
          vec4 xTexelC${y * 2};
          int xTexelC${y * 2}Ready;
          vec4 xTexelC${y * 2 + 1};
          int xTexelC${y * 2 + 1}Ready;
          vec4 xC${y};`;
    p += `
    for (int r = 0; r < ${l}; r++) {
      `;
    for (let y = 0; y < d; y++) p += `
          xTexelC${y * 2} = vec4(0.0);
          xTexelC${y * 2}Ready = 0;
          xTexelC${y * 2 + 1} = vec4(0.0);
          xTexelC${y * 2 + 1}Ready = 0;
          xC${y} = vec4(0.0);`;
    p += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let y = 0; y < (h + 1) / 2; y++) {
      const b = y * 2;
      if (p += `
          xC = xCCorner + ${b * c};
          `, u === 1) {
        if (b < d && (i % 2 === 1 ? (p += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `, c === 1 && b > 0 ? p += `
                xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                ` : p += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `) : p += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `, b + 1 < d)) {
          const x = i % 2 === 0 ? af(c) : c;
          c % 2 === 0 && i % 2 === 1 || c % 2 !== 0 && i % 2 !== 1 ? (p += `
                  xCOffset = xC + imod(pads[1], 2) + ${x};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                    xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b + 1}.zw = vec2(0.0);
                    }
                    xTexelC${b + 1}Ready = 1;
                  }
                  `, c > 1 ? p += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                    } else {
                     xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                    }
                    ` : p += `
                    xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                    `) : x === 1 ? p += `
                    xC${b + 1} = xTexelC${b};
                    ` : p += `
                    xCOffset = xC + ${x};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                      xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b + 1}.zw = vec2(0.0);
                      }
                      xTexelC${b + 1}Ready = 1;
                    }

                    xC${b + 1} = xTexelC${b + 1};
                    `;
        }
      } else b < d && (i % 2 === 1 ? (p += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.0);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
              `, b + 1 < d && (p += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                `)) : (p += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b + 1}.xy);
              `, b + 1 < d && (p += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                `)));
      b < d && (p += `
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `, b + 1 < d && (p += `
              wTexel = getW(r, ${b + 1}, d1, q);
              dotProd += xC${b + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    p += `
    }
  `, p += `
      }
    `;
    let f = "", m = "";
    s && (r ? f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : a ? f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : f = `vec4 activation(vec4 x) {
          ${s}
        }`, m = "result = activation(result);");
    const g = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), a && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${o};
        int q = d2 - d1 * ${o};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${m}
        setOutput(result);
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function LZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dilations: u, dimRoundingMode: c } = s;
  let l = u;
  l == null && (l = [1, 1]), $(qt(o, l), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${l}'`);
  const d = lt(r.shape, a.shape, o, l, i, c, true);
  let h;
  U().getBool("WEBGL_PACK_DEPTHWISECONV") && d.strideWidth <= 2 && d.outChannels / d.inChannels === 1 ? h = new CN(d) : h = new wN(d);
  const p = [[d.padInfo.top, d.padInfo.left], [d.strideHeight, d.strideWidth], [d.dilationHeight, d.dilationWidth], [d.inHeight, d.inWidth]];
  return t.runWebGLProgram(h, [r, a], "float32", p);
}
const zZ = { kernelName: Xa, backendName: "webgl", kernelFunc: LZ };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let MZ = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    const t = e.strideHeight, s = e.strideWidth, r = e.padInfo.top, a = e.padInfo.left, o = e.outChannels / e.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${o} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${r};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}, BZ = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    const t = e.filterHeight, s = e.filterWidth, r = e.strideHeight, a = e.strideWidth, o = t - 1 - e.padInfo.top, i = s - 1 - e.padInfo.left, u = e.outChannels / e.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${o}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${u}; dm++) {
              int d2 = d1 * ${u} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function WZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: a } = e, { strides: o, dilations: i, pad: u, dimRoundingMode: c, filterShape: l } = s, d = lt(r.shape, l, o, i, u, c, true), h = new MZ(d);
  return t.runWebGLProgram(h, [r, a], "float32");
}
const VZ = { kernelName: $d, backendName: "webgl", kernelFunc: WZ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function UZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: a } = e, { strides: o, dilations: i, pad: u, dimRoundingMode: c, inputShape: l } = s, d = lt(l, a.shape, o, i, u, c, true), h = new BZ(d);
  return t.runWebGLProgram(h, [r, a], "float32");
}
const GZ = { kernelName: kd, backendName: "webgl", kernelFunc: UZ };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let HZ = class {
  constructor(e) {
    this.variableNames = ["X"], this.outputShape = [e, e], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function jZ(n) {
  const { inputs: e, backend: t } = n, { x: s } = e, r = [...s.shape, ...s.shape], a = A(s.shape), o = de({ inputs: { x: s }, backend: t, attrs: { shape: [a] } }), i = new HZ(a), u = t.runWebGLProgram(i, [o], o.dtype), c = de({ inputs: { x: u }, backend: t, attrs: { shape: r } });
  return t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(u), c;
}
const qZ = { kernelName: Ul, backendName: "webgl", kernelFunc: jZ };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let KZ = class {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    const { inHeight: t, inWidth: s, padInfo: r, strideHeight: a, strideWidth: o, filterHeight: i, filterWidth: u, dilationHeight: c, dilationWidth: l } = e, { top: d, left: h } = r;
    this.userCode = `
      const ivec2 strides = ivec2(${a}, ${o});
      const ivec2 pads = ivec2(${d}, ${h});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${c};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${u}; w++) {
              int wIn = wBeg + w * ${l};

              if (wIn >= 0 && wIn < ${s}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function XZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dilations: u } = s, c = rr(r.shape, a.shape, o, i, "NHWC", u);
  let l;
  const d = new KZ(c);
  l = t.runWebGLProgram(d, [r, a], "float32");
  const h = de({ inputs: { x: l }, backend: t, attrs: { shape: c.outShape } });
  return t.disposeIntermediateTensorInfo(l), h;
}
const YZ = { kernelName: Ya, backendName: "webgl", kernelFunc: XZ };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function QZ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { equation: r } = s, a = e, { allDims: o, summedDims: i, idDims: u } = sm(r, a.length);
  am(o.length, u, a);
  const { path: c, steps: l } = om(i, u), d = l.length;
  let h = null, p = o.length;
  const f = [];
  for (let m = 0; m < d; ++m) {
    for (const g of l[m]) {
      const { permutationIndices: y, expandDims: b } = rm(p, u[g]);
      let x;
      im(y) ? x = a[g] : (x = Dn({ inputs: { x: a[g] }, backend: t, attrs: { perm: y } }), f.push(x));
      const w = x.shape.slice();
      for (let C = 0; C < b.length; ++C) w.splice(b[C], 0, 1);
      Be(x.shape, w) || (x = de({ inputs: { x }, backend: t, attrs: { shape: w } }), f.push(x)), h === null ? h = x : (h = x0({ inputs: { a: x, b: h }, backend: t }), f.push(h));
    }
    m < d - 1 && (c[m] >= 0 && (h = Dm({ inputs: { x: h }, backend: t, attrs: { axis: c[m] - (o.length - p), keepDims: false } }), f.push(h)), p--);
  }
  for (const m of f) m !== h && t.disposeIntermediateTensorInfo(m);
  return h;
}
const ZZ = { kernelName: Td, backendName: "webgl", kernelFunc: QZ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const JZ = "return (x >= 0.0) ? x : (exp(x) - 1.0);", e9 = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, t9 = nt({ opSnippet: JZ, packedOpSnippet: e9 }), n9 = { kernelName: Za, backendName: "webgl", kernelFunc: t9 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const s9 = "return (b >= 0.0) ? a : a * (b + 1.0);", r9 = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`, a9 = (n) => {
  const { inputs: e, backend: t } = n, { dy: s, y: r } = e, a = U().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new $c(r9, s.shape, r.shape) : new ji(s9, s.shape, r.shape);
  return t.runWebGLProgram(a, [s, r], s.dtype);
}, o9 = { kernelName: cu, backendName: "webgl", kernelFunc: a9 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const i9 = `
  return vec4(equal(a, b));
`, u9 = "return float(a == b);", l9 = Cn({ opSnippet: u9, packedOpSnippet: i9, dtype: "bool", cpuKernelImpl: B8 }), c9 = { kernelName: du, backendName: "webgl", kernelFunc: l9 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const d9 = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${Qf};
  float a1 = ${Zf};
  float a2 = ${Jf};
  float a3 = ${em};
  float a4 = ${tm};
  float a5 = ${nm};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`, h9 = nt({ opSnippet: d9 }), p9 = { kernelName: Ja, backendName: "webgl", kernelFunc: h9 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const f9 = kc + `
  return exp(x);
`, m9 = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, IN = nt({ opSnippet: f9, packedOpSnippet: m9, cpuKernelImpl: W8, dtype: "float32" }), g9 = { kernelName: eo, backendName: "webgl", kernelFunc: IN };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function uy(n) {
  const { inputs: e, attrs: t, backend: s } = n, { dim: r } = t, { input: a } = e, o = a.shape.length, i = a.shape.slice();
  let u = r;
  return r < 0 && ($(-(o + 1) <= r, () => `Axis must be in the interval [${-(o + 1)}, ${o}]`), u = o + r + 1), i.splice(u, 0, 1), de({ inputs: { x: a }, backend: s, attrs: { shape: i } });
}
const y9 = { kernelName: hu, backendName: "webgl", kernelFunc: uy };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const vC = "return exp(x) - 1.0;", b9 = nt({ opSnippet: vC, packedOpSnippet: vC, cpuKernelImpl: V8 }), x9 = { kernelName: to, backendName: "webgl", kernelFunc: b9 };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let $C = class {
  constructor(e, t, s) {
    this.variableNames = ["real", "imag"];
    const r = t[1];
    this.outputShape = t;
    const a = s ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, o = s ? `${r}.0` : "1.0";
    let i;
    if (e === "real") i = "return real * expR - imag * expI;";
    else if (e === "imag") i = "return real * expI + imag * expR;";
    else throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);
    this.userCode = `
      const float exponentMultiplier = ${a};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${i}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${r});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${r}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${o};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function SN(n, e, t) {
  const s = t.texData.get(n.dataId), r = A(n.shape), a = n.shape[n.shape.length - 1], o = r / a, i = de({ inputs: { x: n }, backend: t, attrs: { shape: [o, a] } }), u = i.shape, c = new $C("real", u, e), l = new $C("imag", u, e), d = [{ dataId: s.complexTensorInfos.real.dataId, dtype: s.complexTensorInfos.real.dtype, shape: u }, { dataId: s.complexTensorInfos.imag.dataId, dtype: s.complexTensorInfos.imag.dtype, shape: u }], h = t.runWebGLProgram(c, d, "float32"), p = t.runWebGLProgram(l, d, "float32"), f = ni({ inputs: { real: h, imag: p }, backend: t });
  t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(p);
  const m = de({ inputs: { x: f }, backend: t, attrs: { shape: n.shape } });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(f), m;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function w9(n) {
  const { inputs: e, backend: t } = n, { input: s } = e;
  return SN(s, false, t);
}
const C9 = { kernelName: Rd, backendName: "webgl", kernelFunc: w9 };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let I9 = class {
  constructor(e, t) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = e, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Dh(n) {
  const { backend: e, attrs: t } = n, { shape: s, value: r } = t;
  let { dtype: a } = t;
  if (a = a || Vr(r), a === "string") {
    const o = Dt(a, A(s));
    return o.fill(r), e.makeTensorInfo(s, a, o);
  } else {
    const o = new I9(s, r), i = [[r]];
    return e.runWebGLProgram(o, [], a, i);
  }
}
const S9 = { kernelName: Gl, backendName: "webgl", kernelFunc: Dh };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let v9 = class {
  constructor(e) {
    this.variableNames = ["Image"], this.outputShape = [];
    const t = e[2];
    this.outputShape = e, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $9 = { kernelName: pu, backendName: "webgl", kernelFunc: ({ inputs: n, backend: e }) => {
  const { image: t } = n, s = e, r = new v9(t.shape);
  return s.runWebGLProgram(r, [t], t.dtype);
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const kC = "return floor(x);", k9 = nt({ opSnippet: kC, packedOpSnippet: kC, cpuKernelImpl: U8 }), N9 = { kernelName: no, backendName: "webgl", kernelFunc: k9 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const T9 = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`, R9 = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`, _9 = Cn({ opSnippet: T9, packedOpSnippet: R9, dtype: "int32" }), E9 = { kernelName: so, backendName: "webgl", kernelFunc: _9 };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let D9 = class {
  constructor(e) {
    this.variableNames = ["A"];
    const t = Pn(), [s, r] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
};
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class A9 {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true;
    const t = Pn(), [s, r] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${r}.0, ${s}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `;
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const F9 = { kernelName: ed, backendName: "webgl", kernelFunc: O9 };
let pl, ug = U().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function O9(n) {
  const { inputs: e, backend: t, attrs: s } = n;
  let { pixels: r } = e;
  const { numChannels: a } = s, o = typeof HTMLVideoElement < "u" && r instanceof HTMLVideoElement, i = typeof HTMLImageElement < "u" && r instanceof HTMLImageElement, [u, c] = o ? [r.videoWidth, r.videoHeight] : [r.width, r.height], l = [c, u], d = [c, u, a];
  if (i || o) {
    const m = U().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
    (pl == null || m !== ug) && (ug = m, pl = document.createElement("canvas").getContext("2d", { willReadFrequently: ug })), pl.canvas.width = u, pl.canvas.height = c, pl.drawImage(r, 0, 0, u, c), r = pl.canvas;
  }
  const h = t.makeTensorInfo(l, "int32");
  t.texData.get(h.dataId).usage = xs.PIXELS, t.gpgpu.uploadPixelDataToTexture(t.getTexture(h.dataId), r);
  const p = U().getBool("WEBGL_PACK") ? new A9(d) : new D9(d), f = t.runWebGLProgram(p, [h], "int32");
  return t.disposeData(h.dataId), f;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function P9(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a, bias: o, preluActivationWeights: i } = e, { strides: u, pad: c, dataFormat: l, dilations: d, dimRoundingMode: h, activation: p, leakyreluAlpha: f } = s, m = An(l), g = lt(r.shape, a.shape, u, d, c, h, false, m);
  let y;
  const b = [], x = o != null, w = i != null, C = p === "leakyrelu", v = () => {
    const R = [r, a], N = (T, S) => {
      if (S === "NCHW" && T.shape.length === 1 && T.shape[0] !== 1) {
        const E = de({ inputs: { x: T }, backend: t, attrs: { shape: [T.shape[0], 1, 1] } });
        return b.push(E), E;
      }
      return T;
    };
    if (x && R.push(N(o, l)), w && R.push(N(i, l)), C) {
      const T = t.makeTensorInfo([], "float32", qr(f, "float32"));
      R.push(T), b.push(T);
    }
    return R;
  };
  if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID")) y = yN({ x: r, filter: a, convInfo: g, backend: t, bias: o, activation: p, preluActivationWeights: i, leakyreluAlpha: f });
  else if (g.strideWidth <= 2 && m === "channelsLast" && U().getBool("WEBGL_EXP_CONV")) {
    const R = p ? md(p, true) : null, N = new gN(g, x, R, w, C), T = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], S = v();
    y = t.runWebGLProgram(N, S, "float32", T);
  } else if (U().getBool("WEBGL_CONV_IM2COL")) y = bN({ x: r, filter: a, convInfo: g, backend: t, bias: o, activation: p, preluActivationWeights: i, leakyreluAlpha: f });
  else {
    const R = p ? md(p, false) : null, N = new mN(g, x, R, w, C), T = v();
    y = t.runWebGLProgram(N, T, "float32");
  }
  const k = de({ inputs: { x: y }, backend: t, attrs: { shape: g.outShape } });
  return b.push(y), b.forEach((R) => t.disposeIntermediateTensorInfo(R)), k;
}
const L9 = { kernelName: xa, backendName: "webgl", kernelFunc: P9 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function z9(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a, bias: o, preluActivationWeights: i } = e, { strides: u, pad: c, dilations: l, dimRoundingMode: d, activation: h, leakyreluAlpha: p } = s, f = [];
  let m = l;
  m == null && (m = [1, 1]), $(qt(u, m), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`);
  const g = lt(r.shape, a.shape, u, m, c, d, true), y = U().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels === 1, b = h ? md(h, y) : null, x = [r, a], w = o != null, C = i != null, v = h === "leakyrelu";
  if (w && x.push(o), C && x.push(i), v) {
    const T = t.makeTensorInfo([], "float32", qr(p, "float32"));
    x.push(T), f.push(T);
  }
  let k;
  y ? k = new CN(g, w, b, C, v) : k = new wN(g, w, b, C, v);
  const R = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], N = t.runWebGLProgram(k, x, "float32", R);
  return f.forEach((T) => t.disposeIntermediateTensorInfo(T)), N;
}
const M9 = { kernelName: wa, backendName: "webgl", kernelFunc: z9 };
let B9 = class {
  constructor(e, t, s, r) {
    this.sliceDim = e, this.strides = t, this.paramsShape = r, this.variableNames = ["x", "indices"], this.outputShape = s;
    const a = bt(s.length);
    let o = `
    int index;`;
    for (let i = 0; i < this.sliceDim; i++) o += `
          index = round(getIndices(coords[0], ${i}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};
          flattenIndex += index * ${this.strides[i]};`;
    this.userCode = `
         void main() {
          ${a} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${o}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function W9(n) {
  const { inputs: e, backend: t } = n, { params: s, indices: r } = e, a = r.shape, o = a[a.length - 1], i = A(s.shape), [u, c, l, d] = dc(s, r), h = de({ inputs: { x: r }, backend: t, attrs: { shape: [c, o] } }), p = de({ inputs: { x: s }, backend: t, attrs: { shape: [A(s.shape) / l, l] } });
  if (t.shouldExecuteOnCPU([s, r]) || s.dtype === "string") {
    const y = t.readSync(r.dataId), b = t.bufferSync(s), x = G8(y, b, s.dtype, c, o, l, d, s.shape, i);
    return t.makeTensorInfo(u, s.dtype, x.values);
  }
  const f = new B9(o, d, [c, l], s.shape), m = t.runWebGLProgram(f, [p, h], p.dtype), g = de({ inputs: { x: m }, backend: t, attrs: { shape: u } });
  return t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(m), g;
}
const V9 = { kernelName: mu, backendName: "webgl", kernelFunc: W9 };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let U9 = class {
  constructor(e, t) {
    this.variableNames = ["A", "indices"], this.outputShape = t, this.rank = t.length;
    const s = bt(this.rank), r = G9(e);
    this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${r}));
      }
    `;
  }
};
function G9(n, e) {
  const t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [];
  for (let r = 0; r < n.length; r++) r === 2 ? s.push("index") : s.push(`${t[r]}`);
  return s.join();
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function vN(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, indices: a } = e, { axis: o, batchDims: i } = s, u = Ee(o, r.shape)[0];
  if (U().get("DEBUG")) {
    const b = t.readSync(a.dataId), x = r.shape[u];
    for (let w = 0; w < b.length; ++w) {
      const C = b[w];
      $(C <= x - 1 && C >= 0, () => `GatherV2: the index value ${C} is not in [0, ${x - 1}]`);
    }
  }
  const c = gh(r, a, u, i), l = A(a.shape), d = [], h = de({ inputs: { x: r }, backend: t, attrs: { shape: [c.batchSize, c.outerSize, c.dimSize, c.sliceSize] } }), p = de({ inputs: { x: a }, backend: t, attrs: { shape: [c.batchSize, l / c.batchSize] } });
  d.push(h), d.push(p);
  const f = [c.batchSize, c.outerSize, l / c.batchSize, c.sliceSize];
  if (t.shouldExecuteOnCPU([r, a]) || r.dtype === "string") {
    const b = t.bufferSync(p), x = t.bufferSync(h), w = H8(x, b, f);
    return d.forEach((C) => t.disposeIntermediateTensorInfo(C)), t.makeTensorInfo(c.outputShape, w.dtype, w.values);
  }
  const m = new U9(h.shape, f), g = t.runWebGLProgram(m, [h, p], h.dtype);
  d.push(g);
  const y = de({ inputs: { x: g }, backend: t, attrs: { shape: c.outputShape } });
  return d.forEach((b) => t.disposeIntermediateTensorInfo(b)), y;
}
const H9 = { kernelName: fu, backendName: "webgl", kernelFunc: vN };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const j9 = "return float(a > b);", q9 = `
  return vec4(greaterThan(a, b));
`, K9 = Cn({ opSnippet: j9, packedOpSnippet: q9, cpuKernelImpl: j8, dtype: "bool" }), X9 = { kernelName: gu, backendName: "webgl", kernelFunc: K9 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Y9 = "return float(a >= b);", Q9 = `
  return vec4(greaterThanEqual(a, b));
`, Z9 = Cn({ opSnippet: Y9, packedOpSnippet: Q9, dtype: "bool", cpuKernelImpl: q8 }), J9 = { kernelName: ao, backendName: "webgl", kernelFunc: Z9 };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function eJ(n) {
  const { inputs: e, backend: t } = n, { input: s } = e;
  return SN(s, true, t);
}
const tJ = { kernelName: _d, backendName: "webgl", kernelFunc: eJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const nJ = "return float(!isnan(x) && !isinf(x));", sJ = nt({ opSnippet: nJ, dtype: "bool" }), rJ = { kernelName: io, backendName: "webgl", kernelFunc: sJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const aJ = "return float(isinf(x));", oJ = nt({ opSnippet: aJ, dtype: "bool" }), iJ = { kernelName: uo, backendName: "webgl", kernelFunc: oJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const uJ = "return float(isnan(x));", lJ = nt({ opSnippet: uJ, dtype: "bool" }), cJ = { kernelName: lo, backendName: "webgl", kernelFunc: lJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const dJ = "return float(a < b);", hJ = `
  return vec4(lessThan(a, b));
`, pJ = Cn({ opSnippet: dJ, packedOpSnippet: hJ, cpuKernelImpl: K8, dtype: "bool" }), fJ = { kernelName: yu, backendName: "webgl", kernelFunc: pJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const mJ = "return float(a <= b);", gJ = `
  return vec4(lessThanEqual(a, b));
`, yJ = Cn({ opSnippet: mJ, packedOpSnippet: gJ, cpuKernelImpl: X8, dtype: "bool" }), bJ = { kernelName: bu, backendName: "webgl", kernelFunc: yJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function xJ(n) {
  const { backend: e, attrs: t } = n, { start: s, stop: r, num: a } = t, o = Y8(s, r, a);
  return e.makeTensorInfo([o.length], "float32", o);
}
const wJ = { kernelName: xu, backendName: "webgl", kernelFunc: xJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const CJ = kc + `
  return x < 0.0 ? 0./0. : log(x);
`, IJ = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`, SJ = nt({ opSnippet: CJ, packedOpSnippet: IJ, cpuKernelImpl: Q8 }), vJ = { kernelName: ho, backendName: "webgl", kernelFunc: SJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $J = kc + `
  return log(1.0 + x);
`, kJ = nt({ opSnippet: $J }), NJ = { kernelName: po, backendName: "webgl", kernelFunc: kJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const TJ = "return float(a >= 1.0 && b >= 1.0);", RJ = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`, _J = Cn({ opSnippet: TJ, packedOpSnippet: RJ, dtype: "bool" }), EJ = { kernelName: wu, backendName: "webgl", kernelFunc: _J };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const DJ = "return float(!(x >= 1.0));", AJ = nt({ opSnippet: DJ }), FJ = { kernelName: Cu, backendName: "webgl", kernelFunc: AJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const OJ = "return float(a >= 1.0 || b >= 1.0);", PJ = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`, LJ = Cn({ opSnippet: OJ, packedOpSnippet: PJ, dtype: "bool" }), zJ = { kernelName: Iu, backendName: "webgl", kernelFunc: LJ };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let MJ = class {
  constructor(e, t, s, r, a) {
    this.variableNames = ["x"], this.outputShape = [];
    const o = t, i = e[3] - 1;
    this.outputShape = e;
    let u;
    const c = `float(${s}) + float(${r}) * sum`;
    a === 0.5 ? u = `inversesqrt(${c})` : a === 1 ? u = `1.0/(${c})` : u = `exp(log(${c}) * float(-${a}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${o}; j <= ${o}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${u};
        setOutput(val);
      }
    `;
  }
};
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class BJ {
  constructor(e, t, s, r, a) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = true, this.packedOutput = true;
    const o = t, i = e[3] - 1;
    this.outputShape = e;
    let u;
    const c = `float(${s}) + float(${r}) * sum`;
    a === 0.5 ? u = `inversesqrt(${c})` : a === 1 ? u = `1.0/(${c})` : u = `exp(log(${c}) * float(-${a}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${o};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${o}; j <= ${o}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${u};
        setOutput(result);
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const WJ = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { depthRadius: a, bias: o, alpha: i, beta: u } = s, c = U().getBool("WEBGL_PACK_NORMALIZATION") ? new BJ(r.shape, a, o, i, u) : new MJ(r.shape, a, o, i, u);
  return t.runWebGLProgram(c, [r], r.dtype);
}, VJ = { kernelName: fo, backendName: "webgl", kernelFunc: WJ };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let UJ = class {
  constructor(e, t, s, r, a) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = e, this.depth = e[3], this.depthRadius = t, this.bias = s, this.alpha = r, this.beta = a, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${r}) * norm + float(${s});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${r})
                * float(${a})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${a});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const GJ = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, y: a, dy: o } = e, { depthRadius: i, bias: u, alpha: c, beta: l } = s, d = new UJ(r.shape, i, u, c, l);
  return t.runWebGLProgram(d, [r, a, o], r.dtype);
}, HJ = { kernelName: Su, backendName: "webgl", kernelFunc: GJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function jJ(n, e, t, s) {
  const r = A(e), o = A(n.shape) / r, i = de({ inputs: { x: n }, attrs: { shape: [o, r] }, backend: s }), u = al(i, n.dtype, "max", s), c = de({ inputs: { x: u }, attrs: { shape: t }, backend: s });
  return s.disposeIntermediateTensorInfo(i), s.disposeIntermediateTensorInfo(u), c;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function $N(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { reductionIndices: a, keepDims: o } = s, i = r.shape.length, u = Ee(a, r.shape);
  let c = u;
  const l = ct(c, i), d = l != null, h = t.shouldExecuteOnCPU([r]);
  let p = r;
  if (d) {
    if (h) {
      const x = t.texData.get(p.dataId).values, w = new Array(i);
      for (let k = 0; k < w.length; k++) w[k] = r.shape[l[k]];
      const C = y0(x, r.shape, r.dtype, l, w);
      p = t.makeTensorInfo(w, r.dtype);
      const v = t.texData.get(p.dataId);
      v.values = C;
    } else p = Em(r, l, t);
    c = it(c.length, i);
  }
  mt("max", c, i);
  const [f, m] = xt(p.shape, c);
  let g = f;
  o && (g = ft(f, u));
  let y;
  if (h) {
    const x = t.texData.get(p.dataId).values, w = Z8(x, A(m), g, r.dtype);
    y = t.makeTensorInfo(g, r.dtype);
    const C = t.texData.get(y.dataId);
    C.values = w;
  } else y = jJ(p, m, g, t);
  return d && t.disposeIntermediateTensorInfo(p), y;
}
const qJ = { kernelName: mo, backendName: "webgl", kernelFunc: $N };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const KJ = b0 + `
  return max(a, b);
`, XJ = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + rl + `
  return result;
`, YJ = Cn({ opSnippet: KJ, packedOpSnippet: XJ, cpuKernelImpl: J8 }), QJ = { kernelName: go, backendName: "webgl", kernelFunc: YJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ZJ(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e;
  wc(r, "maxPool");
  const { filterSize: a, strides: o, pad: i, dimRoundingMode: u } = s, c = 1;
  $(qt(o, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);
  const l = zt(r.shape, a, o, c, i, u);
  if (l.filterWidth === 1 && l.filterHeight === 1 && Be(l.inShape, l.outShape)) return is({ inputs: { x: r }, backend: t });
  const d = new gd(l, "max", false);
  return t.runWebGLProgram(d, [r], r.dtype);
}
const JJ = { kernelName: yo, backendName: "webgl", kernelFunc: ZJ };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function eee(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: a, strides: o, pad: i, dataFormat: u, dimRoundingMode: c } = s, l = [1, 1, 1], d = Sn(r.shape, a, o, l, i, c, u), h = new w0(d, "max", false);
  return t.runWebGLProgram(h, [r], r.dtype);
}
const tee = { kernelName: vu, backendName: "webgl", kernelFunc: eee };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let nee = class {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    const t = e.strideHeight, s = e.strideWidth, r = e.dilationHeight, a = e.effectiveFilterHeight, o = e.effectiveFilterWidth, i = a - 1 - e.padInfo.top, u = o - 1 - e.padInfo.left, c = a * o - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${u});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${a};
          wR += ${r}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${c} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${o} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}, see = class {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    const t = e.strideDepth, s = e.strideHeight, r = e.strideWidth, a = e.dilationDepth, o = e.dilationHeight, i = e.dilationWidth, u = e.effectiveFilterDepth, c = e.effectiveFilterHeight, l = e.effectiveFilterWidth, d = u - 1 - e.padInfo.front, h = c - 1 - e.padInfo.top, p = l - 1 - e.padInfo.left, f = u * c * l - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${d}, ${h}, ${p});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${u};
           wD += ${a}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${c};
              wR += ${o}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${l};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${r}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${c} * ${l} +
                  wR * ${l} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ree(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, o = a, { filterSize: i, strides: u, pad: c, dimRoundingMode: l } = s, d = [1, 1, 1], h = Sn(o.shape, i, u, d, c, l), p = new w0(h, "max", true), f = t.runWebGLProgram(p, [o], o.dtype), m = new see(h), g = t.runWebGLProgram(m, [r, f], o.dtype);
  return t.disposeIntermediateTensorInfo(f), g;
}
const aee = { kernelName: jl, backendName: "webgl", kernelFunc: ree };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function oee(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a, output: o } = e, i = a;
  wc([a, o], "maxPoolGrad");
  const { filterSize: u, strides: c, pad: l, dimRoundingMode: d } = s, h = zt(i.shape, u, c, 1, l, d), p = true, f = new gd(h, "max", p), m = t.runWebGLProgram(f, [i], i.dtype), g = new nee(h), y = t.runWebGLProgram(g, [r, m], i.dtype);
  return t.disposeIntermediateTensorInfo(m), y;
}
const iee = { kernelName: Hl, backendName: "webgl", kernelFunc: oee };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function uee(n, e, t, s) {
  let r = new gd(t, "max", false);
  const a = s.runWebGLProgram(r, [n], "float32");
  r = new gd(t, "max", true, true, e);
  const o = s.runWebGLProgram(r, [n], "float32");
  return [a, o];
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const lee = { kernelName: ql, backendName: "webgl", kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
  const { x: s } = n, { filterSize: r, strides: a, pad: o, includeBatchInIndex: i } = e, u = t;
  $(s.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);
  const c = [1, 1];
  $(qt(a, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);
  const l = zt(s.shape, r, a, c, o), [d, h] = uee(s, i, l, u);
  return [d, h];
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function cee(n, e, t, s) {
  const r = A(e), o = A(n.shape) / r, i = de({ inputs: { x: n }, attrs: { shape: [o, r] }, backend: s }), u = al(i, "float32", "mean", s), c = de({ inputs: { x: u }, attrs: { shape: t }, backend: s });
  return s.disposeIntermediateTensorInfo(i), s.disposeIntermediateTensorInfo(u), c;
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const dee = { kernelName: bo, backendName: "webgl", kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
  const { x: s } = n, { keepDims: r, axis: a } = e, o = t, i = s.shape.length, u = Ee(a, s.shape);
  let c = u;
  const l = ct(c, i), d = l != null, h = o.shouldExecuteOnCPU([s]), p = [];
  let f = s;
  if (d) {
    if (h) {
      const w = o.texData.get(f.dataId).values, C = new Array(i);
      for (let R = 0; R < C.length; R++) C[R] = s.shape[l[R]];
      const v = y0(w, s.shape, s.dtype, l, C);
      f = o.makeTensorInfo(C, s.dtype);
      const k = o.texData.get(f.dataId);
      k.values = v;
    } else f = Em(s, l, o);
    p.push(f), c = it(c.length, i);
  }
  mt("sum", c, i);
  const [m, g] = xt(f.shape, c);
  let y = m;
  r && (y = ft(m, u));
  const b = cee(f, g, y, o);
  for (const x of p) o.disposeIntermediateTensorInfo(x);
  return b;
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function hee(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s, i = r.shape.length, u = Ee(a, r.shape);
  let c = u;
  const l = ct(c, i);
  let d = r;
  l != null && (d = Dn({ inputs: { x: r }, backend: t, attrs: { perm: l } }), c = it(c.length, r.shape.length)), mt("min", c, i);
  const [h, p] = xt(d.shape, c), f = A(p), m = de({ inputs: { x: d }, backend: t, attrs: { shape: [-1, f] } }), g = al(m, m.dtype, "min", t);
  let y;
  if (o) {
    const b = ft(h, u);
    y = de({ inputs: { x: g }, backend: t, attrs: { shape: b } });
  } else y = de({ inputs: { x: g }, backend: t, attrs: { shape: h } });
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), l != null && t.disposeIntermediateTensorInfo(d), y;
}
const pee = { kernelName: xo, backendName: "webgl", kernelFunc: hee };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const fee = b0 + `
  return min(a, b);
`, mee = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + rl + `
  return result;
`, gee = Cn({ opSnippet: fee, packedOpSnippet: mee, cpuKernelImpl: eY }), yee = { kernelName: wo, backendName: "webgl", kernelFunc: gee };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let bee = class {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.outputShape = t.map((l, d) => l[0] + e[d] + l[1]);
    const r = e.length, a = bt(r), o = t.map((l) => l[0]).join(","), i = t.map((l, d) => l[0] + e[d]).join(","), u = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r), c = s === "reflect" ? 0 : 1;
    if (r === 1) {
      this.userCode = `
        int start = ${o};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${c};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${c};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${a} start = ${a}(${o});
      ${a} end = ${a}(${i});

      void main() {
        ${a} outC = getOutputCoords();
        for (int i = 0; i < ${r}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${c};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${c};
          }
        }
        ${a} coords = outC - start;
        setOutput(getX(${u}));
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class xee {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t.map((f, m) => f[0] + e[m] + f[1]);
    const r = e.length, a = bt(r), o = t.map((f) => f[0]).join(","), i = t.map((f, m) => f[0] + e[m]).join(","), u = _n("rc", r), c = _n("source", r), l = `${u[r - 1]} < ${this.outputShape[r - 1]}`, d = r === 1 ? "source" : `vec2(${c.slice(-2).join()})`, h = s === "reflect" ? 0 : 1;
    let p = "";
    if (r === 1) {
      const f = `
        ${a} source = rc;
        if (source < start) {
          source = start * 2 - source - ${h};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${h};
        }
        source -= start;
      `;
      p = `
        ${a} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${d});
        ${u[r - 1]} += 1;
        if(${l}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${d});
        }
      `;
    } else {
      const f = `
        ${a} source = rc;
        ${a} lt = ${a}(lessThan(source, start));
        ${a} gte = ${a}(greaterThanEqual(source, end));
        ${a} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${h}) +
                gte * ((end - 1) * 2 - source + ${h});
        source -= start;
      `;
      p = `
        ${a} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${d});
        ${u[r - 1]} += 1;
        if(${l}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${d});
        }
        rc = outputLoc;
        ${u[r - 2]} += 1;
        if(${u[r - 2]} < ${this.outputShape[r - 2]}) {
          ${f}
          result[2] = getChannel(getX(${c.join()}), ${d});
          ${u[r - 1]} += 1;
          if(${l}) {
            ${f}
            result[3] = getChannel(getX(${c.join()}), ${d});
          }
        }
      `;
    }
    this.userCode = `
      const ${a} start = ${a}(${o});
      const ${a} end = ${a}(${i});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${p}
        setOutput(result);
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const wee = ({ inputs: n, backend: e, attrs: t }) => {
  const { x: s } = n, { paddings: r, mode: a } = t, o = U().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new xee(s.shape, r, a) : new bee(s.shape, r, a);
  return e.runWebGLProgram(o, [s], s.dtype);
}, Cee = { kernelName: Co, backendName: "webgl", kernelFunc: wee };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Iee = `if (b == 0.0) return NAN;
  return mod(a, b);`, See = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + rl + `
  return result;
`, vee = Cn({ opSnippet: Iee, packedOpSnippet: See }), $ee = { kernelName: Io, backendName: "webgl", kernelFunc: vee };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let kee = class {
  constructor(e, t, s) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [e, s], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t - 1}));
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Nee = `
if (a == b) {
  return 1.0;
};
return a / b;`, Tee = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`, kN = Cn({ opSnippet: Nee, packedOpSnippet: Tee, checkOutOfBounds: true }), Ree = { kernelName: Qa, backendName: "webgl", kernelFunc: kN };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const NC = "return a - b;", NN = Cn({ opSnippet: NC, packedOpSnippet: NC, supportsComplex: true, cpuKernelImpl: CY }), _ee = { kernelName: qo, backendName: "webgl", kernelFunc: NN };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function TN(n) {
  const { inputs: e, backend: t, attrs: s } = n, { logits: r } = e, { dim: a } = s, o = Ee([a], r.shape), i = $N({ inputs: { x: r }, backend: t, attrs: { reductionIndices: o, keepDims: false } }), u = ft(i.shape, o), c = de({ inputs: { x: i }, backend: t, attrs: { shape: u } }), l = NN({ inputs: { a: r, b: c }, backend: t }), d = IN({ inputs: { x: l }, backend: t }), h = Dm({ inputs: { x: d }, backend: t, attrs: { axis: o, keepDims: false } }), p = de({ inputs: { x: h }, backend: t, attrs: { shape: u } }), f = kN({ inputs: { a: d, b: p }, backend: t });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(l), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(p), f;
}
const Eee = { kernelName: Ho, backendName: "webgl", kernelFunc: TN };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Dee(n) {
  const { inputs: e, backend: t, attrs: s } = n, { logits: r } = e, { numSamples: a, seed: o, normalized: i } = s, u = i ? r : TN({ inputs: { logits: r }, backend: t, attrs: { dim: r.shape.length - 1 } }), c = u.shape[0], l = u.shape[1], d = new kee(c, l, a), h = [[o]], p = t.runWebGLProgram(d, [u], "int32", h);
  return i || t.disposeIntermediateTensorInfo(u), p;
}
const Aee = { kernelName: $u, backendName: "webgl", kernelFunc: Dee };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Fee = Ms + `
  return -x;
`, Oee = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function Pee(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (t.shouldExecuteOnCPU([s])) {
    const a = t.texData.get(s.dataId), [o, i] = nY(a.values, s.shape, s.dtype);
    return t.makeTensorInfo(i, s.dtype, o);
  }
  let r;
  return U().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new da(s.shape, Oee) : r = new pr(s.shape, Fee), t.runWebGLProgram(r, [s], s.dtype);
}
const Lee = { kernelName: ku, backendName: "webgl", kernelFunc: Pee };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const zee = ah;
function Mee(n) {
  gs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: a } = e, { maxOutputSize: o, iouThreshold: i, scoreThreshold: u } = s, c = t.readSync(r.dataId), l = t.readSync(a.dataId), { selectedIndices: d } = zee(c, l, o, i, u);
  return t.makeTensorInfo([d.length], "int32", new Int32Array(d));
}
const Bee = { kernelName: Tu, backendName: "webgl", kernelFunc: Mee };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Wee = Hf;
function Vee(n) {
  gs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: a } = e, { maxOutputSize: o, iouThreshold: i, scoreThreshold: u, padToMaxOutputSize: c } = s, l = t.readSync(r.dataId), d = t.readSync(a.dataId), { selectedIndices: h, validOutputs: p } = Wee(l, d, o, i, u, c);
  return [t.makeTensorInfo([h.length], "int32", new Int32Array(h)), t.makeTensorInfo([], "int32", new Int32Array([p]))];
}
const Uee = { kernelName: Kl, backendName: "webgl", kernelFunc: Vee };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Gee = oh;
function Hee(n) {
  gs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: a } = e, { maxOutputSize: o, iouThreshold: i, scoreThreshold: u, softNmsSigma: c } = s, l = t.readSync(r.dataId), d = t.readSync(a.dataId), h = o, p = i, f = u, m = c, { selectedIndices: g, selectedScores: y } = Gee(l, d, h, p, f, m);
  return [t.makeTensorInfo([g.length], "int32", new Int32Array(g)), t.makeTensorInfo([y.length], "float32", new Float32Array(y))];
}
const jee = { kernelName: Ru, backendName: "webgl", kernelFunc: Hee };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let qee = class {
  constructor(e, t, s, r) {
    this.variableNames = ["indices"], this.outputShape = [e, t], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${r}), float(${s}),
                      float(index == coords.y)));
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Kee = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { indices: r } = e, { dtype: a, depth: o, onValue: i, offValue: u } = s, c = A(r.shape), l = new qee(c, o, i, u), d = de({ inputs: { x: r }, backend: t, attrs: { shape: [c] } }), h = t.runWebGLProgram(l, [d], a);
  t.disposeIntermediateTensorInfo(d);
  const p = [...r.shape, o], f = de({ inputs: { x: h }, backend: t, attrs: { shape: p } });
  return t.disposeIntermediateTensorInfo(h), f;
}, Xee = { kernelName: vo, backendName: "webgl", kernelFunc: Kee };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ef(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (s.dtype === "complex64") {
    const r = Eh({ inputs: { input: s }, backend: t }), a = ef({ inputs: { x: r }, backend: t }), o = Am({ inputs: { input: s }, backend: t }), i = ef({ inputs: { x: o }, backend: t }), u = ni({ inputs: { real: a, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(r), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(i), u;
  } else return Dh({ attrs: { shape: s.shape, dtype: s.dtype, value: s.dtype === "string" ? "" : 0 }, backend: t });
}
const Yee = { kernelName: qu, backendName: "webgl", kernelFunc: ef };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function RN(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (s.dtype === "string") throw new Error("onesLike is not supported under string dtype");
  if (s.dtype === "complex64") {
    const r = Eh({ inputs: { input: s }, backend: t }), a = RN({ inputs: { x: r }, backend: t }), o = Am({ inputs: { input: s }, backend: t }), i = ef({ inputs: { x: o }, backend: t }), u = ni({ inputs: { real: a, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(r), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(i), u;
  } else return Dh({ attrs: { shape: s.shape, dtype: s.dtype, value: 1 }, backend: t });
}
const Qee = { kernelName: _u, backendName: "webgl", kernelFunc: RN };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Zee(n) {
  const { inputs: e, backend: t, attrs: s } = n, { axis: r } = s;
  if (e.length === 1) return uy({ inputs: { input: e[0] }, backend: t, attrs: { dim: r } });
  const a = e[0].shape, o = e[0].dtype;
  e.forEach((l) => {
    nn(a, l.shape, "All tensors passed to stack must have matching shapes"), $(o === l.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const i = [], u = e.map((l) => {
    const d = uy({ inputs: { input: l }, backend: t, attrs: { dim: r } });
    return i.push(d), d;
  }), c = fN({ inputs: u, backend: t, attrs: { axis: r } });
  return i.forEach((l) => t.disposeIntermediateTensorInfo(l)), c;
}
const Jee = { kernelName: Eu, backendName: "webgl", kernelFunc: Zee };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let ete = class {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map((c, l) => c[0] + e[l] + c[1]);
    const r = e.length, a = bt(r), o = t.map((c) => c[0]).join(","), i = t.map((c, l) => c[0] + e[l]).join(","), u = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r);
    if (r === 1) {
      this.userCode = `
        int start = ${o};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${a} start = ${a}(${o});
      ${a} end = ${a}(${i});

      void main() {
        ${a} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${a} coords = outC - start;
          setOutput(getX(${u}));
        }
      }
    `;
  }
};
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class tte {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map((m, g) => m[0] + e[g] + m[1]);
    const r = e.length, a = bt(r), o = t.map((m) => m[0]).join(","), i = t.map((m, g) => m[0] + e[g]).join(","), u = _n("rc", r), c = _n("source", r), l = `${u[r - 1]} < ${this.outputShape[r - 1]}`, d = r === 1 ? "source" : `vec2(${c.slice(-2).join()})`, h = [`${a} rc = outputLoc;`, `${u[r - 1]} += 1;
       if(${l}) {
      `, r === 1 ? "" : `}
       rc = outputLoc;
       ${u[r - 2]} += 1;
       if(${u[r - 2]} < ${this.outputShape[r - 2]}) {`, r === 1 ? "" : `  ${u[r - 1]} += 1;
         if(${l}) {`], p = r === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
    let f = "";
    for (let m = 0, g = r === 1 ? 2 : 4; m < g; m++) f += `
        ${h[m]}
        if (${p}) {
          result[${m}] = float(value);
        } else {
          ${a} source = rc - start;
          result[${m}] = getChannel(getX(${c.join()}), ${d});
        }
      `;
    f += r === 1 ? "} " : "}}", this.userCode = `
      const ${a} start = ${a}(${o});
      const ${a} end = ${a}(${i});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const _N = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { paddings: a, constantValue: o } = s;
  if (A(r.shape) === 0) {
    const c = a.map((l, d) => l[0] + r.shape[d] + l[1]);
    return Dh({ backend: t, attrs: { shape: c, value: o, dtype: r.dtype } });
  }
  const i = U().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new tte(r.shape, a, o) : new ete(r.shape, a, o), u = [[o]];
  return t.runWebGLProgram(i, [r], r.dtype, u);
}, nte = { kernelName: $o, backendName: "webgl", kernelFunc: _N };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ste = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`, rte = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + rl + `
  return result;
`, ate = Cn({ opSnippet: ste, packedOpSnippet: rte }), ote = { kernelName: ko, backendName: "webgl", kernelFunc: ate };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ite(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s, i = r.shape.length, u = [], c = Ee(a, r.shape);
  let l = c;
  const d = ct(l, i);
  let h = r;
  d != null && (h = Dn({ inputs: { x: r }, backend: t, attrs: { perm: d } }), l = it(l.length, i), u.push(h)), mt("prod", l, i);
  let p;
  if (t.shouldExecuteOnCPU([h])) {
    const f = t.texData.get(h.dataId).values, { outVals: m, outShape: g, outDtype: y } = rY(h.shape, h.dtype, f, l);
    p = t.makeTensorInfo(g, y, m);
  } else {
    const [f, m] = xt(h.shape, l), g = A(m), y = de({ inputs: { x: h }, backend: t, attrs: { shape: [-1, g] } }), b = Md(r.dtype), x = al(y, b, "prod", t);
    p = de({ inputs: { x }, backend: t, attrs: { shape: f } }), u.push(y), u.push(x);
  }
  if (o) {
    u.push(p);
    const f = ft(p.shape, c);
    p = de({ inputs: { x: p }, backend: t, attrs: { shape: f } });
  }
  return u.forEach((f) => t.disposeIntermediateTensorInfo(f)), p;
}
const ute = { kernelName: To, backendName: "webgl", kernelFunc: ite };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function lte(n) {
  const { inputs: e, backend: t, attrs: s } = n, { paramsNestedSplits: r, paramsDenseValues: a, indices: o } = e, { outputRaggedRank: i } = s, u = r.map((y) => t.readSync(y.dataId)), c = r.map((y) => y.shape), l = t.readSync(a.dataId), d = t.readSync(o.dataId), [h, p, f] = aY(u, c, l, a.shape, a.dtype, d, o.shape, i), m = h.map((y) => t.makeTensorInfo([y.length], "int32", y)), g = t.makeTensorInfo(f, a.dtype, p);
  return m.concat([g]);
}
const cte = { kernelName: lf, backendName: "webgl", kernelFunc: lte };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function dte(n) {
  const { inputs: e, backend: t } = n, { starts: s, limits: r, deltas: a } = e, o = t.readSync(s.dataId), i = t.readSync(r.dataId), u = t.readSync(a.dataId), [c, l] = oY(o, s.shape, s.dtype, i, r.shape, u, a.shape), d = t.makeTensorInfo([c.length], "int32", c), h = t.makeTensorInfo([l.length], s.dtype, l);
  return [d, h];
}
const hte = { kernelName: cf, backendName: "webgl", kernelFunc: dte };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function pte(n) {
  const { inputs: e, backend: t, attrs: s } = n, { shape: r, values: a, defaultValue: o, rowPartitionTensors: i } = e, { rowPartitionTypes: u } = s, c = t.readSync(r.dataId), l = t.readSync(a.dataId), d = t.readSync(o.dataId), h = i.map((g) => t.readSync(g.dataId)), p = i.map((g) => g.shape), [f, m] = iY(c, r.shape, l, a.shape, a.dtype, d, o.shape, h, p, u);
  return t.makeTensorInfo(f, a.dtype, m);
}
const fte = { kernelName: df, backendName: "webgl", kernelFunc: pte };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const EN = (n) => {
  const { backend: e, attrs: t } = n, { start: s, stop: r, step: a, dtype: o } = t, i = uY(s, r, a, o);
  return e.makeTensorInfo([i.length], o, i);
}, mte = { kernelName: Xl, backendName: "webgl", kernelFunc: EN };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const gte = "return 1.0 / x;", yte = nt({ opSnippet: gte }), bte = { kernelName: Ro, backendName: "webgl", kernelFunc: yte };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const xte = Ms + `
  return (x < 0.0) ? 0.0 : x;
`, wte = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, Cte = nt({ opSnippet: xte, packedOpSnippet: wte }), Ite = { kernelName: _o, backendName: "webgl", kernelFunc: Cte };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ste = Ms + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, vte = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, $te = nt({ opSnippet: Ste, packedOpSnippet: vte }), kte = { kernelName: Ao, backendName: "webgl", kernelFunc: $te };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let Nte = class {
  constructor(e, t, s, r, a) {
    this.variableNames = ["A"], this.outputShape = [];
    const [o, i, u, c] = e;
    this.outputShape = [o, t, s, c];
    const l = [r && t > 1 ? i - 1 : i, r && s > 1 ? u - 1 : u], d = [r && t > 1 ? t - 1 : t, r && s > 1 ? s - 1 : s];
    let h;
    a ? h = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : h = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${l[0] / d[0]},
          ${l[1] / d[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${u}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${h};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
};
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Tte {
  constructor(e, t, s, r, a) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    const [o, i, u, c] = e;
    this.outputShape = [o, t, s, c];
    const l = [r && t > 1 ? i - 1 : i, r && s > 1 ? u - 1 : u], d = [r && t > 1 ? t - 1 : t, r && s > 1 ? s - 1 : s];
    let h;
    a ? h = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : h = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${l[0] / d[0]},
          ${l[1] / d[1]},
          ${l[1] / d[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${u}.0,
                                     ${u}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${h};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Rte(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r } = e, { alignCorners: a, halfPixelCenters: o, size: i } = s, [u, c] = i, l = U().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new Tte(r.shape, u, c, a, o) : new Nte(r.shape, u, c, a, o);
  return t.runWebGLProgram(l, [r], "float32");
}
const _te = { kernelName: Do, backendName: "webgl", kernelFunc: Rte };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let Ete = class {
  constructor(e, t, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    const [, r, a] = t, [, o, i] = e, u = [s && o > 1 ? r - 1 : r, s && i > 1 ? a - 1 : a], c = [s && o > 1 ? o - 1 : o, s && i > 1 ? i - 1 : i], l = u[0] / c[0], d = u[1] / c[1], h = 1 / l, p = 1 / d, f = Math.ceil(h) * 2 + 2, m = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${l});
        const float widthScale = float(${d});

        const float invHeightScale = float(${h});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${o}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${r - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${a - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Dte(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: a } = e, { alignCorners: o } = s, i = new Ete(a.shape, r.shape, o);
  return t.runWebGLProgram(i, [a], a.dtype);
}
const Ate = { kernelName: Fu, backendName: "webgl", kernelFunc: Dte };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let Fte = class {
  constructor(e, t, s, r, a) {
    this.variableNames = ["A"], this.outputShape = [];
    const [o, i, u, c] = e;
    this.outputShape = [o, t, s, c];
    const l = [r && t > 1 ? i - 1 : i, r && s > 1 ? u - 1 : u], d = [r && t > 1 ? t - 1 : t, r && s > 1 ? s - 1 : s], h = r ? "0.5" : "0.0";
    let p;
    a ? p = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : p = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${l[0] / d[0]},
          ${l[1] / d[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${u}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
};
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Ote {
  constructor(e, t, s, r, a) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    const [o, i, u, c] = e;
    this.outputShape = [o, t, s, c];
    const l = [r && t > 1 ? i - 1 : i, r && s > 1 ? u - 1 : u], d = [r && t > 1 ? t - 1 : t, r && s > 1 ? s - 1 : s], h = r ? "0.5" : "0.0";
    let p;
    a ? p = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : p = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${l[0] / d[0]},
          ${l[1] / d[1]},
          ${l[1] / d[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${u}.0,
                                     ${u}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Pte(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r } = e, { alignCorners: a, halfPixelCenters: o, size: i } = s, [u, c] = i, l = U().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new Ote(r.shape, u, c, a, o) : new Fte(r.shape, u, c, a, o);
  return t.runWebGLProgram(l, [r], r.dtype);
}
const Lte = { kernelName: Eo, backendName: "webgl", kernelFunc: Pte };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let zte = class {
  constructor(e, t, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    const [, r, a] = t, [, o, i] = e, u = [s && o > 1 ? r - 1 : r, s && i > 1 ? a - 1 : a], c = [s && o > 1 ? o - 1 : o, s && i > 1 ? i - 1 : i], l = u[0] / c[0], d = u[1] / c[1], h = 1 / l, p = 1 / d, f = Math.ceil(h) * 2 + 2, m = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${l});
        const float widthScale = float(${d});

        const float invHeightScale = float(${h});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${o}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${u[0]}) *
                (float(dyR) / float(${c[0]}));

            float sourceFracCol =
                float(${u[1]}) *
                  (float(dyC) / float(${c[1]}));

            int sourceNearestRow = int(min(
                float(int(${r}) - 1),
                ${s} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${a}) - 1),
                ${s} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Mte(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: a } = e, { alignCorners: o } = s, i = new zte(a.shape, r.shape, o);
  return t.runWebGLProgram(i, [a], a.dtype);
}
const Bte = { kernelName: Au, backendName: "webgl", kernelFunc: Mte };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let Wte = class {
  constructor(e, t) {
    this.variableNames = ["x"];
    const s = e.length;
    if (s > 4) throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    if (this.outputShape = e, s === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;
      return;
    }
    const r = (i) => t.indexOf(i) !== -1 && e[i] !== 1 ? `${e[i]} - coords[${i}] - 1` : `coords[${i}]`, a = e.map((i, u) => r(u)).join(","), o = bt(s);
    this.userCode = `
      void main() {
        ${o} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `;
  }
};
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Vte {
  constructor(e, t) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true;
    const s = e.length;
    if (s > 4) throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    this.outputShape = e;
    const r = _n("rc", s), a = `${r[s - 1]} + 1 < ${this.outputShape[s - 1]}`, o = `${r[s - 2]} + 1 < ${this.outputShape[s - 2]}`, i = bt(s);
    s === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${a}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${u(r.slice())};
          if(${a}){
            result.g = ${c(r.slice())};
          }
          if(${o}) {
            result.b = ${l(r.slice())};
            if(${a}) {
              result.a = ${d(r.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function u(f) {
      return h(f);
    }
    function c(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", h(f);
    }
    function l(f) {
      return f[s - 2] = "(" + f[s - 2] + " + 1)", h(f);
    }
    function d(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", f[s - 2] = "(" + f[s - 2] + " + 1)", h(f);
    }
    function h(f) {
      const m = e.map((b, x) => p(x, f)), g = m.join(","), y = m.slice(-2).join(",");
      return `getChannel(getX(${g}), vec2(${y}))`;
    }
    function p(f, m) {
      return t.indexOf(f) !== -1 && e[f] !== 1 ? `${e[f]} - ${m[f]} - 1` : `${m[f]}`;
    }
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ute(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { dims: a } = s, o = r.shape.length, i = Ee(a, r.shape);
  if (o === 0) return is({ inputs: { x: r }, backend: t });
  const u = U().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Vte(r.shape, i) : new Wte(r.shape, i);
  return t.runWebGLProgram(u, [r], r.dtype);
}
const Gte = { kernelName: Fo, backendName: "webgl", kernelFunc: Ute };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let Hte = class {
  constructor(e, t) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    const s = e[1], r = e[2];
    this.outputShape = e;
    let a = "";
    typeof t == "number" ? a = `float outputValue = ${t.toFixed(2)};` : a = `
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${a}
          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const jte = { kernelName: Ku, backendName: "webgl", kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
  const { image: s } = n, { radians: r, fillValue: a, center: o } = e, i = t, u = new Hte(s.shape, a), [c, l] = ch(o, s.shape[1], s.shape[2]), d = [[c, l, Math.sin(r), Math.cos(r)]];
  return i.runWebGLProgram(u, [s], s.dtype, d);
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const qte = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`, Kte = nt({ opSnippet: qte }), Xte = { kernelName: Oo, backendName: "webgl", kernelFunc: Kte };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Yte = "return inversesqrt(x);", Qte = nt({ opSnippet: Yte, cpuKernelImpl: lY }), Zte = { kernelName: Po, backendName: "webgl", kernelFunc: Qte };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let C0 = class {
  constructor(e, t, s, r, a, o, i = true, u = false) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = o;
    const c = bt(a.length), l = bt(o.length);
    let d = "";
    s === 1 ? d = "i" : s === 2 && (d = "i, j");
    const h = `getIndices(${d})`;
    let p = "";
    r === 1 ? p = "i" : r === 2 && (p = "i, coords[1]");
    const f = `getUpdates(${p})`;
    let m = "";
    u && (m = "coords[0], coords[1]");
    const g = `getDefaultValue(${m})`, y = t > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${c} strides = ${c}(${a});

        void main() {
          ${l} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${h});
              flattenedIndex += index * ${y};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(${g}, sum, float(found)));
        }
      `;
  }
};
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Jte {
  constructor(e, t, s, r, a, o, i = true, u = false) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.packedInputs = true, this.packedOutput = true, this.outputShape = o;
    const c = bt(a.length), l = bt(o.length);
    let d = "";
    s === 1 ? d = "i" : s === 2 && (d = "i, j");
    const h = `getIndices(${d})`;
    let p = "";
    r === 1 ? p = "i" : r === 2 && (p = "i, coords[1]");
    const f = `getUpdates(${p})`;
    let m = "";
    u && (m = "coords[0], coords[1]");
    const g = `getDefaultValue(${m})`, y = t > 1 ? "strides[j]" : "strides", b = t > 1 ? "strides[j + 1]" : "strides";
    this.userCode = `
        ${c} strides = ${c}(${a});

        void main() {
          ${l} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${e}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${t}; j+=2) {
              ivec4 index = round(${h});
              flattenedIndex += index.xz * ${y};
              if (j + 1 < ${t}) {
                flattenedIndex += index.yw * ${b};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${f};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${g}, sum, found));
        }
      `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ene(n) {
  const { inputs: e, backend: t, attrs: s } = n, { indices: r, updates: a } = e, { shape: o } = s, { sliceRank: i, numUpdates: u, sliceSize: c, strides: l, outputSize: d } = ds(a, r, o), h = [d / c, c];
  if (d === 0) return t.makeTensorInfo(o, r.dtype);
  const p = de({ inputs: { x: r }, backend: t, attrs: { shape: [u, i] } }), f = de({ inputs: { x: a }, backend: t, attrs: { shape: [u, c] } }), m = t.makeTensorInfo([], "float32", new Float32Array([0]));
  let g;
  U().getBool("WEBGL_PACK") ? g = new Jte(u, i, p.shape.length, f.shape.length, l, h) : g = new C0(u, i, p.shape.length, f.shape.length, l, h);
  const y = t.runWebGLProgram(g, [f, p, m], f.dtype), b = de({ inputs: { x: y }, backend: t, attrs: { shape: o } });
  return t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(m), b;
}
const tne = { kernelName: Ou, backendName: "webgl", kernelFunc: ene };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let nne = class {
  constructor(e, t, s, r) {
    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [e, s];
    const a = "while (left < right) {", o = `for (int i = 0; i < ${Math.ceil(Math.log2(t + 1))}; ++i) { if (left >= right) break;`, i = U().getNumber("WEBGL_VERSION") === 2 ? a : o, u = r === "left" ? "<" : "<=";
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${i}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${u} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
};
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sne(n) {
  const { inputs: e, backend: t, attrs: s } = n, { sortedSequence: r, values: a } = e, { side: o } = s, i = new nne(r.shape[0], r.shape[1], a.shape[1], o), u = [[r.shape[1]]];
  return t.runWebGLProgram(i, [r, a], "int32", u);
}
const rne = { kernelName: Lu, backendName: "webgl", kernelFunc: sne };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let ane = class {
  constructor(e, t, s) {
    this.variableNames = ["c", "a", "b"], this.outputShape = t;
    let r, a;
    if (s > 4) throw Error(`Where for rank ${s} is not yet supported`);
    if (s === 1) a = "resRC", r = "resRC";
    else {
      const i = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], u = [], c = [];
      for (let l = 0; l < t.length; l++) c.push(`${i[l]}`), l < e && u.push(`${i[l]}`);
      r = u.join(), a = c.join();
    }
    const o = bt(s);
    this.userCode = `
      void main() {
        ${o} resRC = getOutputCoords();
        float cVal = getC(${r});
        if (cVal >= 1.0) {
          setOutput(getA(${a}));
        } else {
          setOutput(getB(${a}));
        }
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function one(n) {
  const { inputs: e, backend: t } = n, { condition: s, t: r, e: a } = e, o = new ane(s.shape.length, r.shape, r.shape.length);
  return t.runWebGLProgram(o, [s, r, a], tn(r.dtype, a.dtype));
}
const ine = { kernelName: zu, backendName: "webgl", kernelFunc: one };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const une = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${ph};
  float scale = ${fh};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`, lne = nt({ opSnippet: une }), cne = { kernelName: Lo, backendName: "webgl", kernelFunc: lne };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const dne = kc + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`, hne = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, pne = nt({ opSnippet: dne, packedOpSnippet: hne, cpuKernelImpl: dY }), fne = { kernelName: Wo, backendName: "webgl", kernelFunc: pne };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const mne = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`, gne = nt({ opSnippet: mne }), yne = { kernelName: Bo, backendName: "webgl", kernelFunc: gne };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bne = kc + `
  return sin(x);
`, xne = `
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${rl}
  return result;
`, wne = nt({ opSnippet: bne, packedOpSnippet: xne }), Cne = { kernelName: zo, backendName: "webgl", kernelFunc: wne };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ine = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`, Sne = nt({ opSnippet: Ine }), vne = { kernelName: Mo, backendName: "webgl", kernelFunc: Sne };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $ne = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`, kne = nt({ opSnippet: $ne }), Nne = { kernelName: Vo, backendName: "webgl", kernelFunc: kne };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Tne = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: a, paddings: o } = s;
  $(r.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  const i = a.reduce((y, b) => y * b), u = [[0, 0]];
  u.push(...o);
  for (let y = 1 + a.length; y < r.shape.length; ++y) u.push([0, 0]);
  const c = [], l = _N({ inputs: { x: r }, backend: t, attrs: { paddings: u, constantValue: 0 } }), d = Zr(l.shape, a, i, false), h = Jr(d.length, a.length, false), p = ea(l.shape, a, i, false), f = de({ inputs: { x: l }, backend: t, attrs: { shape: d } }), m = Dn({ inputs: { x: f }, backend: t, attrs: { perm: h } }), g = de({ inputs: { x: m }, backend: t, attrs: { shape: p } });
  return c.push(l), c.push(f), c.push(m), c.forEach((y) => t.disposeIntermediateTensorInfo(y)), g;
}, Rne = { kernelName: Bu, backendName: "webgl", kernelFunc: Tne };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _ne(n) {
  const { inputs: e, backend: t } = n, { indices: s, values: r, denseShape: a, defaultValue: o } = e;
  if (a.shape.length !== 1) throw new Error(`Dense shape must be a vector, saw:
         ${a.shape}`);
  if (s.shape.length !== 2) throw new Error(`Indices must be a matrix, saw:
         ${s.shape}`);
  if (r.shape.length !== 1) throw new Error(`Values must be a vector, saw:
         ${r.shape}`);
  if (o.shape.length !== 0) throw new Error(`Default value must be a scalar, saw:
        ${o.shape}`);
  const i = t.readSync(s.dataId), u = t.readSync(r.dataId), c = t.readSync(a.dataId), l = t.readSync(o.dataId)[0], [d, h, p, f, m] = pY(i, s.shape, s.dtype, u, r.dtype, c, l);
  return [t.makeTensorInfo(h, s.dtype, d), t.makeTensorInfo([h[0]], r.dtype, p), t.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))), t.makeTensorInfo([m.length], s.dtype, new Int32Array(m))];
}
const Ene = { kernelName: Ad, backendName: "webgl", kernelFunc: _ne };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Dne(n) {
  const { inputs: e, backend: t } = n, { inputIndices: s, inputShape: r, newShape: a } = e;
  if (s.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);
  if (r.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape ${r.shape}`);
  if (a.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${a.shape}`);
  const o = Array.from(t.readSync(r.dataId)), i = t.readSync(s.dataId), u = Array.from(t.readSync(a.dataId)), [c, l, d] = fY(i, s.shape, s.dtype, o, u);
  return [t.makeTensorInfo(l, s.dtype, c), t.makeTensorInfo([d.length], a.dtype, new Int32Array(d))];
}
const Ane = { kernelName: Yl, backendName: "webgl", kernelFunc: Dne };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Fne(n) {
  const { inputs: e, backend: t } = n, { data: s, indices: r, segmentIds: a } = e;
  if (s.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
              ${r.shape}`);
  if (a.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
              ${a.shape}`);
  const o = t.readSync(s.dataId), i = t.readSync(r.dataId), u = t.readSync(a.dataId), [c, l] = Jk(o, s.shape, s.dtype, i, u, true);
  return t.makeTensorInfo(l, s.dtype, c);
}
const One = { kernelName: Ql, backendName: "webgl", kernelFunc: Fne };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Pne(n) {
  const { inputs: e, backend: t } = n, { data: s, indices: r, segmentIds: a } = e;
  if (s.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
             ${r.shape}`);
  if (a.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
             ${a.shape}`);
  const o = t.readSync(s.dataId), i = t.readSync(r.dataId), u = t.readSync(a.dataId), [c, l] = Jk(o, s.shape, s.dtype, i, u);
  return t.makeTensorInfo(l, s.dtype, c);
}
const Lne = { kernelName: Zl, backendName: "webgl", kernelFunc: Pne };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function zne(n) {
  const { inputs: e, backend: t, attrs: s } = n, { sparseIndices: r, sparseValues: a, defaultValue: o } = e, { outputShape: i } = s, { sliceRank: u, numUpdates: c, sliceSize: l, strides: d, outputSize: h } = ds(a, r, i), p = false;
  if (a.dtype === "string") {
    const y = t.bufferSync(r), b = t.bufferSync(a), x = Fs(t.readSync(o.dataId)[0]), w = cY(y, b, i, h, l, c, u, d, x, p);
    return t.makeTensorInfo(i, w.dtype, w.values);
  }
  const f = new C0(c, u, r.shape.length, a.shape.length, d, [h, 1], p), m = t.runWebGLProgram(f, [a, r, o], a.dtype), g = de({ inputs: { x: m }, backend: t, attrs: { shape: i } });
  return t.disposeIntermediateTensorInfo(m), g;
}
const Mne = { kernelName: Vu, backendName: "webgl", kernelFunc: zne };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Bne(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { numOrSizeSplits: a, axis: o } = s, i = Ee(o, r.shape)[0], u = mh(r, a, i), c = r.shape.length, l = new Array(c).fill(0), d = r.shape.slice();
  return u.map((h) => {
    const p = [...d];
    p[i] = h;
    const f = Nc({ inputs: { x: r }, backend: t, attrs: { begin: l, size: p } });
    return l[i] += h, f;
  });
}
const Wne = { kernelName: Wu, backendName: "webgl", kernelFunc: Bne };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const TC = "return sqrt(x);", Vne = nt({ opSnippet: TC, packedOpSnippet: TC, cpuKernelImpl: mY }), Une = { kernelName: Uo, backendName: "webgl", kernelFunc: Vne };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Gne = "return x * x;", Hne = nt({ opSnippet: Gne }), jne = { kernelName: Jl, backendName: "webgl", kernelFunc: Hne };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const RC = "return (a - b) * (a - b);", qne = Cn({ opSnippet: RC, packedOpSnippet: RC }), Kne = { kernelName: jo, backendName: "webgl", kernelFunc: qne };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Xne(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e;
  if (r.dtype !== "string") throw new Error("Input must be of datatype string");
  const a = t.readSync(r.dataId), o = Zs(a), i = gY(o, "string", s);
  return t.makeTensorInfo(r.shape, "string", i);
}
const Yne = { kernelName: Fd, backendName: "webgl", kernelFunc: Xne };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Qne({ inputs: n, attrs: e, backend: t }) {
  const { x: s } = n, r = Ms + `
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `, a = new pr(s.shape, r);
  return t.runWebGLProgram(a, [s], s.dtype);
}
const Zne = { kernelName: jr, backendName: "webgl", kernelFunc: Qne };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let Jne = class {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.outputShape = s;
    const r = s.length, a = bt(s.length), o = bt(s.length);
    let i = "";
    if (r === 1) i = "coords * strides + begin";
    else {
      let u = 0;
      i = s.map((c, l) => (u++, s.length === 1 ? `coords * strides[${l}] + begin[${l}]` : `coords[${u - 1}] * strides[${l}] + begin[${l}]`)).join(",");
    }
    this.userCode = `
      ${a} begin = ${a}(${e});
      ${a} strides = ${a}(${t});

      void main() {
        ${o} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ese(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { begin: a, end: o, strides: i, beginMask: u, endMask: c, ellipsisMask: l, newAxisMask: d, shrinkAxisMask: h } = s, { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: x, strides: w } = uh(r.shape, a, o, i, u, c, l, d, h);
  let C;
  if (m) C = de({ inputs: { x: r }, backend: t, attrs: { shape: f } });
  else if (g || y) {
    $(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    const k = ih(b, x, w), R = Nc({ inputs: { x: r }, backend: t, attrs: { begin: b, size: k } });
    C = de({ inputs: { x: R }, backend: t, attrs: { shape: f } }), t.disposeIntermediateTensorInfo(R);
  } else if (t.shouldExecuteOnCPU([r])) {
    const R = t.readSync(r.dataId), N = Oe(r.shape, r.dtype, R), T = yY(p, N, w, b);
    C = t.makeTensorInfo(f, r.dtype, T.values);
  } else {
    const R = new Jne(b, w, p);
    C = t.runWebGLProgram(R, [r], r.dtype);
  }
  const v = de({ inputs: { x: C }, backend: t, attrs: { shape: f } });
  return t.disposeIntermediateTensorInfo(C), v;
}
const tse = { kernelName: Uu, backendName: "webgl", kernelFunc: ese };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nse(n) {
  const { inputs: e, backend: t, attrs: s } = n, { separator: r, nGramWidths: a, leftPad: o, rightPad: i, padWidth: u, preserveShortSequences: c } = s, { data: l, dataSplits: d } = e, h = t.readSync(l.dataId), p = t.readSync(d.dataId), [f, m] = bY(h, p, r, a, o, i, u, c);
  return [t.makeTensorInfo([f.length], "string", f), t.makeTensorInfo(d.shape, "int32", m)];
}
const sse = { kernelName: ec, backendName: "webgl", kernelFunc: nse };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function rse(n) {
  const { inputs: e, backend: t, attrs: s } = n, { skipEmpty: r } = s, { input: a, delimiter: o } = e;
  if (a.dtype !== "string") throw new Error("Input must be of datatype string");
  if (a.shape.length !== 1) throw new Error(`Input must be a vector, got shape: ${a.shape}`);
  if (o.shape.length !== 0) throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);
  const i = t.readSync(a.dataId), u = t.readSync(o.dataId)[0], [c, l, d] = xY(i, u, r), h = l.length;
  return [t.makeTensorInfo([h, 2], "int32", c), t.makeTensorInfo([h], "string", l), t.makeTensorInfo([2], "int32", new Int32Array(d))];
}
const ase = { kernelName: Od, backendName: "webgl", kernelFunc: rse };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ose(n) {
  const { inputs: e, backend: t, attrs: s } = n, { numBuckets: r } = s, { input: a } = e;
  if (a.dtype !== "string") throw new Error("Input must be of datatype string");
  if (r <= 0) throw new Error("Number of buckets must be at least 1");
  const o = t.readSync(a.dataId), i = wY(o, r);
  return t.makeTensorInfo(a.shape, "int32", i);
}
const ise = { kernelName: Pd, backendName: "webgl", kernelFunc: ose };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const use = "return tan(x);", lse = nt({ opSnippet: use }), cse = { kernelName: Ko, backendName: "webgl", kernelFunc: lse };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const dse = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`, hse = nt({ opSnippet: dse }), pse = { kernelName: Xo, backendName: "webgl", kernelFunc: hse };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function fse(n) {
  const { inputs: e, backend: t, attrs: s } = n, { tensor: r, indices: a, updates: o } = e, { sliceRank: i, numUpdates: u, sliceSize: c, strides: l, outputSize: d } = ds(o, a, r.shape), h = [d / c, c];
  if (d === 0) return t.makeTensorInfo(r.shape, a.dtype);
  const p = de({ inputs: { x: a }, backend: t, attrs: { shape: [u, i] } }), f = de({ inputs: { x: o }, backend: t, attrs: { shape: [u, c] } }), m = de({ inputs: { x: r }, backend: t, attrs: { shape: h } }), g = new C0(u, i, p.shape.length, f.shape.length, l, h, false, true), y = t.runWebGLProgram(g, [f, p, m], m.dtype), b = de({ inputs: { x: y }, backend: t, attrs: { shape: r.shape } });
  return t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(y), b;
}
const mse = { kernelName: Pu, backendName: "webgl", kernelFunc: fse };
/**
* @license
* Copyright 2017 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let gse = class {
  constructor(e, t) {
    this.variableNames = ["A"];
    const s = new Array(e.length);
    for (let o = 0; o < s.length; o++) s[o] = e[o] * t[o];
    this.outputShape = s, this.rank = s.length;
    const r = bt(this.rank), a = yse(e);
    this.userCode = `
      void main() {
        ${r} resRC = getOutputCoords();
        setOutput(getA(${a}));
      }
    `;
  }
};
function yse(n) {
  const e = n.length;
  if (e > 5) throw Error(`Tile for rank ${e} is not yet supported`);
  if (e === 1) return `imod(resRC, ${n[0]})`;
  const t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], s = [];
  for (let r = 0; r < n.length; r++) s.push(`imod(${t[r]}, ${n[r]})`);
  return s.join();
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function DN(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { reps: a } = s;
  if (r.dtype === "string" || r.shape.length > 5) {
    const u = t.readSync(r.dataId), c = r.dtype === "string" ? u.map((h) => Fs(h)) : u, l = Oe(r.shape, r.dtype, c), d = IY(l, a);
    return t.makeTensorInfo(d.shape, d.dtype, d.values);
  }
  const o = new gse(r.shape, a);
  return t.runWebGLProgram(o, [r], r.dtype);
}
const bse = { kernelName: Hr, backendName: "webgl", kernelFunc: DN };
let xse = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "negativeInf", type: "float" }, { name: "dir", type: "int" }, { name: "inc", type: "int" }], this.outputShape = e, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
}, wse = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "k", type: "int" }], this.outputShape = e, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
};
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ci(n, e) {
  e !== null && n.disposeIntermediateTensorInfo(e);
}
function _C(n) {
  let e = 1;
  for (; e < n; ) e *= 2;
  return e;
}
function Cse(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { k: a, sorted: o } = s, i = U().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), u = U().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), c = r.shape, l = c[c.length - 1];
  if (t.shouldExecuteOnCPU([r]) || l < i || a > u) {
    const T = t.readSync(r.dataId), [S, E] = SY(T, c, r.dtype, a, o);
    return [t.makeTensorInfo(S.shape, S.dtype, S.values), t.makeTensorInfo(E.shape, E.dtype, E.values)];
  }
  if (a === 0) return c[c.length - 1] = 0, [t.makeTensorInfo(c, r.dtype, []), t.makeTensorInfo(c, "int32", [])];
  if (l === 1) return [r, Dh({ attrs: { shape: c, dtype: "int32", value: 0 }, backend: t })];
  const d = t.texData.get(r.dataId), h = d !== null && d.isPacked, p = h ? t.unpackTensor(r) : r, m = A(c) / l, g = de({ inputs: { x: p }, attrs: { shape: [m, l] }, backend: t });
  h && ci(t, p);
  const y = _C(a), b = _C(l);
  let x = null;
  const w = () => x === null ? [g, g] : [g, x], C = (T, S, E) => {
    const P = w(), M = new xse(E), V = [[l], [x === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [T], [S]], q = x;
    x = t.runWebGLProgram(M, P, "int32", V), ci(t, q);
  };
  for (let T = 1; T < y; T *= 2) {
    const S = T * 2;
    for (let E = T; E >= 1; E /= 2) C(S, E, [m, b]);
  }
  for (let T = b; T > y; T /= 2) {
    const S = w(), E = new wse([m, T / 2]), M = [[l], [x === null ? 1 : 0], [y]], L = x;
    x = t.runWebGLProgram(E, S, "int32", M), ci(t, L);
    const V = y / 2, q = V * 2;
    for (let G = V; G >= 1; G /= 2) C(q, G, x.shape);
  }
  let v = x;
  x = Nc({ inputs: { x }, backend: t, attrs: { begin: 0, size: [m, a] } }), ci(t, v);
  let k = vN({ inputs: { x: g, indices: x }, backend: t, attrs: { axis: 1, batchDims: 1 } });
  ci(t, g);
  const R = c.slice(0, -1);
  R.push(a), v = x, x = de({ inputs: { x }, attrs: { shape: R }, backend: t }), ci(t, v);
  const N = k;
  return k = de({ inputs: { x: k }, attrs: { shape: R }, backend: t }), ci(t, N), [k, x];
}
const Ise = { kernelName: Gu, backendName: "webgl", kernelFunc: Cse };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let Sse = class {
  constructor(e, t, s, r, a, o) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = o;
    const i = s === "nearest" ? 1 : 2;
    let u;
    switch (r) {
      case "constant":
        u = 1;
        break;
      case "reflect":
        u = 2;
        break;
      case "wrap":
        u = 3;
        break;
      case "nearest":
        u = 4;
        break;
      default:
        u = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${u} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${u} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${u} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${a});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${a});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${i} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
};
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function vse(n) {
  const { inputs: e, backend: t, attrs: s } = n, { image: r, transforms: a } = e, { interpolation: o, fillMode: i, fillValue: u, outputShape: c } = s, [l, d, h, p] = r.shape, [f, m] = c ?? [d, h], g = [l, f, m, p], y = new Sse(d, h, o, i, u, g);
  return t.runWebGLProgram(y, [r, a], "float32");
}
const $se = { kernelName: Hu, backendName: "webgl", kernelFunc: vse };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function kse(n) {
  const { inputs: e, attrs: t, backend: s } = n, { axis: r } = t, { x: a } = e;
  wc(a, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  const o = s.readSync(a.dataId), { outputValues: i, outputShape: u, indices: c } = vY(o, r, a.shape, a.dtype);
  return [s.makeTensorInfo(u, a.dtype, i), s.makeTensorInfo([c.length], "int32", c)];
}
const Nse = { kernelName: Ld, backendName: "webgl", kernelFunc: kse };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Tse(n) {
  const { inputs: e, backend: t, attrs: s } = n, { value: r } = e;
  let { axis: a } = s;
  a < 0 && (a += r.shape.length);
  const o = r, i = o.shape.length, u = r.shape[a], c = new Array(i - 1);
  let l = 0;
  for (let m = 0; m < i; m++) m !== a && (c[l++] = o.shape[m]);
  const d = [], h = new Array(i).fill(0), p = o.shape.slice();
  p[a] = 1;
  const f = new Array(u);
  for (let m = 0; m < f.length; m++) {
    h[a] = m;
    const g = Nc({ inputs: { x: o }, backend: t, attrs: { begin: h, size: p } }), y = de({ inputs: { x: g }, backend: t, attrs: { shape: c } });
    f[m] = y, d.push(g);
  }
  return d.forEach((m) => t.disposeIntermediateTensorInfo(m)), f;
}
const Rse = { kernelName: ju, backendName: "webgl", kernelFunc: Tse };
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class _se {
  constructor(e, t) {
    this.variableNames = ["x", "segmentIds"];
    const s = e.windowSize, r = e.batchSize, a = e.inSize, o = e.numSegments, i = o * Math.ceil(a / s);
    this.outputShape = [r, i];
    const u = "0.0", c = "sumValue", l = Math.floor(s / 4) * 4, d = s % 4, h = `
        sumValue += dot(values, segFilter);
    `;
    let p = "";
    a % s > 0 && (p = `
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `);
    let f = "";
    a % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${a}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${u};

      float getValue(int batch, int inIdx) {
        ${p}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${o})) * float(${s}));
        int currentSeg = int(mod(float(outIdx), float(${o})));

        float sumValue = 0.0;

        for (int i = 0; i < ${l}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${h}
        }

        int inIdx = inOffset + ${l};
        if (${d === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${h}
        } else if (${d === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${h}
        } else if (${d === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${h}
        }
        setOutput(${c});
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ese(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, segmentIds: a } = e, { numSegments: o } = s, i = r.shape.length, u = [];
  let c = 0;
  const l = ct([c], i);
  let d = r;
  l != null && (d = Dn({ inputs: { x: r }, backend: t, attrs: { perm: l } }), u.push(d), c = it(1, i)[0]);
  const h = ux(d.shape, c, o), p = A([d.shape[c]]), f = de({ inputs: { x: d }, backend: t, attrs: { shape: [-1, p] } });
  u.push(f);
  const m = Md(r.dtype), g = (w, C, v, k, R) => {
    const N = w.shape[0], T = w.shape[1], S = bv(T, R), E = { windowSize: S, inSize: T, batchSize: N, numSegments: R }, P = new _se(E, C), M = t.compileAndRun(P, [w, v], k);
    if (u.push(M), M.shape[1] === R) return M;
    const L = EN({ backend: t, attrs: { start: 0, stop: R, step: 1, dtype: "float32" } }), V = DN({ inputs: { x: L }, backend: t, attrs: { reps: [T / S] } });
    return u.push(L), u.push(V), g(M, C, V, k, R);
  }, y = g(f, "unsortedSegmentSum", a, m, o), b = de({ inputs: { x: y }, backend: t, attrs: { shape: h } });
  let x = b;
  if (l != null) {
    u.push(b);
    const w = Ls(l);
    x = Dn({ inputs: { x }, backend: t, attrs: { perm: w } });
  }
  return u.forEach((w) => t.disposeIntermediateTensorInfo(w)), x;
}
const Dse = { kernelName: tc, backendName: "webgl", kernelFunc: Ese };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ase = [g7, b7, C7, v7, k7, R7, E7, A7, L7, M7, V7, H7, K7, Z7, tQ, sQ, aQ, lQ, dQ, pQ, yQ, vQ, kQ, _Q, DQ, zQ, BQ, GQ, JY, qQ, ZQ, nZ, uZ, dZ, pZ, mZ, yZ, CZ, vZ, NZ, RZ, EZ, AZ, PZ, zZ, VZ, GZ, qZ, YZ, ZZ, n9, o9, c9, p9, g9, y9, x9, C9, S9, $9, N9, E9, F9, L9, M9, V9, H9, X9, J9, ZY, tJ, YQ, rJ, iJ, cJ, t7, fJ, bJ, wJ, vJ, NJ, EJ, FJ, zJ, VJ, HJ, qJ, QJ, JJ, tee, aee, iee, lee, dee, pee, yee, Cee, $ee, Aee, r7, Lee, Bee, Uee, jee, FQ, Xee, Qee, Jee, nte, ote, s7, ute, cte, hte, fte, mte, OQ, Ree, bte, Ite, kte, o7, _te, Ate, Lte, Bte, Gte, jte, Xte, Zte, tne, rne, ine, cne, fne, yne, Cne, vne, IQ, Eee, Nne, Rne, Ene, Ane, One, Lne, Mne, Wne, Une, jne, Kne, Yne, Zne, tse, sse, ase, ise, _ee, p7, cse, pse, mse, bse, Ise, $se, f7, Nse, Rse, Dse, Yee];
for (const n of Ase) nc(n);
/** @license See the LICENSE file. */
const Fse = "4.22.0";
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ose = { "tfjs-core": ov, "tfjs-backend-cpu": V2, "tfjs-backend-webgl": nN, "tfjs-data": e2, "tfjs-layers": wm, "tfjs-converter": z$, tfjs: Fse }, Qwe = Object.freeze(Object.defineProperty({ __proto__: null, Abs: Yi, Acos: Ea, Acosh: Da, AdadeltaOptimizer: Mb, AdagradOptimizer: Bb, AdamOptimizer: Wb, AdamaxOptimizer: Vb, Add: Ur, AddN: Aa, All: Qi, Any: Zi, ArgMax: Ji, ArgMin: eu, Asin: Fa, Asinh: Oa, Atan: Pa, Atan2: za, Atanh: La, AvgPool: Ma, AvgPool3D: tu, AvgPool3DGrad: zl, AvgPoolGrad: Ll, BatchMatMul: Ba, BatchToSpaceND: nu, Bincount: su, BitwiseAnd: Ml, BroadcastArgs: Bl, BroadcastTo: aI, Callback: A$, CallbackList: Pv, Cast: Wa, Ceil: Va, ClipByValue: Gr, Complex: Sd, ComplexAbs: Wl, Concat: ru, Conv2D: Ua, Conv2DBackpropFilter: vd, Conv2DBackpropInput: Ga, Conv3D: Ha, Conv3DBackpropFilterV2: au, Conv3DBackpropInputV2: ou, Cos: ja, Cosh: qa, CropAndResize: uu, Cumprod: iu, Cumsum: Ka, CustomCallback: zv, DataStorage: Cd, DenseBincount: Vl, DepthToSpace: lu, DepthwiseConv2dNative: Xa, DepthwiseConv2dNativeBackpropFilter: $d, DepthwiseConv2dNativeBackpropInput: kd, Diag: Ul, Dilation2D: Ya, Dilation2DBackpropFilter: _i, Dilation2DBackpropInput: Ri, Draw: Nd, get ENV() {
  return Cy;
}, EarlyStopping: F$, Einsum: Td, Elu: Za, EluGrad: cu, Environment: sI, Equal: du, Erf: Ja, Exp: eo, ExpandDims: hu, Expm1: to, FFT: Rd, Fill: Gl, FlipLeftRight: pu, Floor: no, FloorDiv: so, FromPixels: ed, FusedBatchNorm: ro, FusedConv2D: xa, FusedDepthwiseConv2D: wa, GPGPUContext: vp, GatherNd: mu, GatherV2: fu, GraphModel: Bw, Greater: gu, GreaterEqual: ao, History: Lv, IFFT: _d, Identity: oo, Imag: Ed, InputSpec: Ut, IsFinite: io, IsInf: uo, IsNan: lo, KernelBackend: Pl, LRN: fo, LRNGrad: Su, LayerVariable: Dv, LayersModel: Fr, LeakyRelu: co, Less: yu, LessEqual: bu, LinSpace: xu, Log: ho, Log1p: po, LogSoftmax: iI, LogicalAnd: wu, LogicalNot: Cu, LogicalOr: Iu, LogicalXor: oI, LowerBound: I_, MathBackendCPU: kh, MathBackendWebGL: _h, MatrixBandPart: S_, Max: mo, MaxPool: yo, MaxPool3D: vu, MaxPool3DGrad: jl, MaxPoolGrad: Hl, MaxPoolWithArgmax: ql, Maximum: go, Mean: bo, Min: xo, Minimum: wo, MirrorPad: Co, Mod: Io, MomentumOptimizer: Ub, Multinomial: $u, Multiply: So, Neg: ku, NonMaxSuppressionV3: Tu, NonMaxSuppressionV4: Kl, NonMaxSuppressionV5: Ru, NotEqual: Nu, OP_SCOPE_SUFFIX: Ty, OneHot: vo, OnesLike: _u, Optimizer: Qr, OptimizerConstructors: iv, Pack: Eu, PadV2: $o, Pool: v_, Pow: ko, Prelu: No, Prod: To, RMSPropOptimizer: Gb, RNN: ir, RaggedGather: lf, RaggedRange: cf, RaggedTensorToTensor: df, Range: Xl, get Rank() {
  return yg;
}, Real: Dd, RealDiv: Qa, Reciprocal: Ro, get Reduction() {
  return Rn;
}, Relu: _o, Relu6: Ao, Reshape: Du, ResizeBilinear: Do, ResizeBilinearGrad: Fu, ResizeNearestNeighbor: Eo, ResizeNearestNeighborGrad: Au, Reverse: Fo, RotateWithOffset: Ku, Round: Oo, Rsqrt: Po, SGDOptimizer: jf, ScatterNd: Ou, SearchSorted: Lu, Select: zu, Selu: Lo, Sequential: Bi, Sigmoid: Wo, Sign: Bo, Sin: zo, Sinh: Mo, Slice: Mu, Softmax: Ho, Softplus: Vo, SpaceToBatchND: Bu, SparseFillEmptyRows: Ad, SparseReshape: Yl, SparseSegmentMean: Ql, SparseSegmentSum: Zl, SparseToDense: Vu, SplitV: Wu, Sqrt: Uo, Square: Jl, SquaredDifference: jo, StaticRegexReplace: Fd, Step: jr, StridedSlice: Uu, StringNGrams: ec, StringSplit: Od, StringToHashBucketFast: Pd, Sub: qo, Sum: Go, SymbolicTensor: tr, Tan: Ko, Tanh: Xo, Tensor: tt, TensorBuffer: Gt, TensorScatterUpdate: Pu, Tile: Hr, TopK: Gu, Transform: Hu, Transpose: fr, Unique: Ld, Unpack: ju, UnsortedSegmentSum: tc, UpperBound: $_, Variable: sd, ZerosLike: qu, _FusedMatMul: ba, abs: Vt, acos: Oy, acosh: Py, add: te, addN: LI, all: ff, any: ad, argMax: Fi, argMin: Ly, asin: zy, asinh: My, atan: By, atan2: Wy, atanh: Vy, avgPool: Vd, avgPool3d: Gy, backend: Ry, backend_util: xv, basicLSTMCell: zI, batchNorm: sc, batchNorm2d: Hy, batchNorm3d: jy, batchNorm4d: qy, batchToSpaceND: Ud, bincount: Ky, bitwiseAnd: MI, booleanMaskAsync: SS, broadcastArgs: BI, broadcastTo: Si, broadcast_util: nA, browser: xL, buffer: Oe, callbacks: PU, cast: ue, ceil: Xy, clipByValue: jn, clone: mr, complex: zr, concat: Lt, concat1d: Yy, concat2d: Qy, concat3d: Zy, concat4d: Jy, constraints: CB, conv1d: mf, conv2d: Mr, conv2dTranspose: gf, conv3d: tb, conv3dTranspose: nb, copyRegisteredKernels: R_, cos: Gd, cosh: yf, cosineWindow: Bf, cumprod: ud, cumsum: bf, customGrad: wr, data: XG, denseBincount: Dp, deprecationWarn: II, depthToSpace: sb, depthwiseConv2d: rc, deregisterOp: MU, device_util: tE, diag: VI, dilation2d: rb, disableDeprecationWarnings: oE, dispose: Me, disposeVariables: iE, div: ve, divNoNan: ab, dot: ob, dropout: Fb, einsum: mi, elu: ac, enableDebugMode: aE, enableProdMode: rE, enclosingPowerOfTwo: Ob, engine: zn, ensureShape: UI, env: U, equal: rs, erf: xf, euclideanNorm: ub, exp: qn, expandDims: mn, expm1: lb, eye: wf, fft: sh, fill: Xu, findBackend: pE, findBackendFactory: fE, floor: ic, floorDiv: pf, forceHalfFloat: sN, fused: DS, gather: uc, gatherND: NS, gather_util: wL, getBackend: SI, getGradient: mg, getKernel: nd, getKernelsForBackend: _p, gpgpu_util: D8, grad: MA, grads: BA, greater: On, greaterEqual: Kr, ifft: Tl, imag: Hd, image: Ds, inTopKAsync: TS, initializers: LB, input: Zv, io: qb, irfft: Ff, isFinite: cb, isInf: db, isNaN: hb, keep: Qt, kernel_impls: RL, layers: hU, leakyRelu: jd, less: vl, lessEqual: Zo, linalg: zb, linspace: jI, loadGraphModel: cG, loadGraphModelSync: dG, loadLayersModel: NW, localResponseNormalization: pb, log: as, log1p: qd, logSigmoid: fb, logSoftmax: If, logSumExp: Kd, logicalAnd: Ps, logicalNot: Xd, logicalOr: Sf, logicalXor: mb, losses: MS, lowerBound: KI, matMul: je, math: cL, max: Is, maxPool: Yd, maxPool3d: gb, maxPoolWithArgmax: XI, maximum: Sr, mean: Et, memory: Sg, meshgrid: YI, metrics: RU, min: Sl, minimum: va, mirrorPad: yb, mod: bb, model: _W, models: _U, moments: Qd, movingAverage: vS, mul: z, multiRNNCell: QI, multinomial: ZI, neg: St, nextFrame: Kb, norm: oc, notEqual: Pi, oneHot: $l, ones: Bn, onesLike: os, op: O, outerProduct: JI, pad: Xr, pad1d: eS, pad2d: tS, pad3d: nS, pad4d: sS, pool: xb, pow: xr, prelu: Jd, print: Fy, prod: wb, profile: uE, raggedGather: rS, raggedRange: aS, raggedTensorToTensor: oS, rand: iS, randomGamma: cS, randomNormal: $f, randomStandardNormal: dS, randomUniform: Jo, randomUniformInt: hS, range: Li, ready: dE, real: kl, reciprocal: vb, registerBackend: Bd, registerCallbackConstructor: DW, registerGradient: uI, registerKernel: nc, registerOp: zU, regularizers: FU, relu: ar, relu6: kf, removeBackend: hE, reshape: B, reverse: Ss, reverse1d: pS, reverse2d: fS, reverse3d: mS, reverse4d: gS, rfft: rh, round: Nf, rsqrt: Tf, scalar: Ne, scatterND: $S, scatter_util: UF, searchSorted: vf, selu: Rf, separableConv2d: _f, sequential: EW, serialization: GP, setBackend: cE, setPlatform: mE, setWebGLContext: ak, setdiff1dAsync: yS, shared: s0, sigmoid: Ks, sign: $b, signal: zS, sin: Ef, sinh: Df, slice: Qe, slice1d: eh, slice2d: Af, slice3d: th, slice4d: Nl, slice_util: av, softmax: nh, softplus: Yu, spaceToBatchND: Zd, sparse: BS, sparseToDense: kS, spectral: LS, split: Vn, sqrt: ln, square: yt, squaredDifference: Of, squeeze: ei, stack: En, step: Qu, stridedSlice: kb, string: WS, sub: xe, sum: we, sumOutType: Md, tan: Nb, tanh: Sa, tensor: Wn, tensor1d: bn, tensor2d: pa, tensor3d: Tb, tensor4d: bS, tensor5d: xS, tensor6d: wS, tensorScatterUpdate: CS, tensor_util: Y_, test_util: nF, tidy: H, tile: bs, time: lE, topk: _b, train: hi, transpose: Ye, truncatedNormal: Lf, unique: Eb, unregisterGradient: T_, unregisterKernel: N_, unsortedSegmentSum: zf, unstack: vs, upcastType: tn, upperBound: IS, util: z_, valueAndGrad: WA, valueAndGrads: VA, variable: Db, variableGrads: qI, version: Ose, version_converter: z$, version_core: ov, version_cpu: V2, version_layers: wm, version_webgl: nN, webgl: QY, webgl_util: z5, where: on, whereAsync: Ab, zeros: Ot, zerosLike: Ze }, Symbol.toStringTag, { value: "Module" }));
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ks = U();
ks.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE", () => 15);
ks.registerFlag("WEBGPU_CPU_FORWARD", () => true);
ks.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE", () => -1);
ks.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE", () => true);
ks.registerFlag("WEBGPU_USE_LOW_POWER_GPU", () => false);
ks.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e3);
ks.registerFlag("WEBGPU_USE_PROFILE_TOOL", () => false);
ks.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE", () => true);
ks.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG", () => false);
ks.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL", () => -1);
ks.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER", () => false);
ks.registerFlag("WEBGPU_PRINT_SHADER", () => "");
ks.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY", () => false);
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Pse {
  constructor(e) {
    e && (this.vendor = e.vendor, this.architecture = e.architecture, this.intelGPUGeneration = this.getIntelGPUGeneration());
  }
  getIntelGPUGeneration() {
    if (this.isIntel()) {
      if (this.architecture.startsWith("gen")) return Number(this.architecture.match(/\d+/));
      if (this.architecture.startsWith("xe")) return 12;
    }
    return 0;
  }
  isIntel() {
    return this.vendor === "intel";
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Lse {
  constructor(e) {
    this.device = e, this.numUsedBuffers = 0, this.numFreeBuffers = 0, this.freeBuffers = /* @__PURE__ */ new Map(), this.usedBuffers = /* @__PURE__ */ new Map(), this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
  acquireBuffer(e, t, s = false, r = true) {
    let a;
    const o = EC(e, t);
    return r ? (this.freeBuffers.has(o) || this.freeBuffers.set(o, []), this.freeBuffers.get(o).length > 0 ? (a = this.freeBuffers.get(o).pop(), this.numFreeBuffers--) : (a = this.device.createBuffer({ size: e, usage: t, mappedAtCreation: s }), this.numBytesAllocated += e)) : (a = this.device.createBuffer({ size: e, usage: t, mappedAtCreation: s }), this.numBytesAllocated += e), this.usedBuffers.has(o) || this.usedBuffers.set(o, []), this.usedBuffers.get(o).push(a), this.numUsedBuffers++, this.numBytesUsed += e, a;
  }
  releaseBuffer(e, t = true) {
    if (this.freeBuffers.size === 0) return;
    const s = e.size, r = e.usage, a = EC(s, r), o = this.usedBuffers.get(a), i = o.indexOf(e);
    if (i < 0) throw new Error("Cannot find the buffer in buffer manager");
    o[i] = o[o.length - 1], o.pop(), this.numUsedBuffers--, this.numBytesUsed -= s, t ? (this.freeBuffers.get(a).push(e), this.numFreeBuffers++) : (e.destroy(), this.numBytesAllocated -= s);
  }
  getNumUsedBuffers() {
    return this.numUsedBuffers;
  }
  getNumFreeBuffers() {
    return this.numFreeBuffers;
  }
  dispose() {
    this.freeBuffers.forEach((e, t) => {
      e.forEach((s) => {
        s.destroy();
      });
    }), this.usedBuffers.forEach((e, t) => {
      e.forEach((s) => {
        s.destroy();
      });
    }), this.freeBuffers = /* @__PURE__ */ new Map(), this.usedBuffers = /* @__PURE__ */ new Map(), this.numUsedBuffers = 0, this.numFreeBuffers = 0, this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
}
function EC(n, e) {
  return `${n}_${e}`;
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class zse {
  constructor(e) {
    this.device = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = /* @__PURE__ */ new Map(), this.usedTextures = /* @__PURE__ */ new Map(), this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
  acquireTexture(e, t, s, r) {
    const a = AC(s), o = e * t * a, i = DC(e, t, s, r);
    if (this.freeTextures.has(i) || this.freeTextures.set(i, []), this.usedTextures.has(i) || this.usedTextures.set(i, []), this.numBytesUsed += o, this.numUsedTextures++, this.freeTextures.get(i).length > 0) {
      this.numFreeTextures--;
      const c = this.freeTextures.get(i).shift();
      return this.usedTextures.get(i).push(c), c;
    }
    this.numBytesAllocated += o;
    const u = this.device.createTexture({ size: [e, t], format: s, usage: r });
    return this.usedTextures.get(i).push(u), u;
  }
  releaseTexture(e) {
    if (this.freeTextures.size === 0) return;
    const t = e.width, s = e.height, r = e.format, a = e.usage, o = DC(t, s, r, a);
    this.freeTextures.has(o) || this.freeTextures.set(o, []), this.freeTextures.get(o).push(e), this.numFreeTextures++, this.numUsedTextures--;
    const i = this.usedTextures.get(o), u = i.indexOf(e);
    if (u < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");
    i.splice(u, 1);
    const c = AC(r), l = t * s * c;
    this.numBytesUsed -= l;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    this.freeTextures.forEach((e, t) => {
      e.forEach((s) => {
        s.destroy();
      });
    }), this.usedTextures.forEach((e, t) => {
      e.forEach((s) => {
        s.destroy();
      });
    }), this.freeTextures = /* @__PURE__ */ new Map(), this.usedTextures = /* @__PURE__ */ new Map(), this.numUsedTextures = 0, this.numFreeTextures = 0, this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
}
function DC(n, e, t, s) {
  return `${n}_${e}_${t}_${s}`;
}
function AC(n) {
  if (n === "rgba8unorm") return 16;
  throw new Error(`${n} is not supported!`);
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Mse(n, e) {
  if (Math.max(...n) > 5) throw new Error("Cannot symbolically compute strides for rank > 6 tensor.");
  const t = n.length, s = "xyzwuv", r = n.map((o) => `${e}.${s[o]}`), a = new Array(t - 1);
  a[t - 2] = r[t - 1];
  for (let o = t - 3; o >= 0; --o) a[o] = `(${a[o + 1]} * ${r[o + 1]})`;
  return a;
}
const si = (n, e, t) => t === "int32" ? `atomicAdd(${n}, bitcast<i32>(${e}));` : `
          {
            var oldValue = 0;
            loop {
              let newValueF32 = bitcast<f32>(oldValue) + (${e});
              let newValue = bitcast<i32>(newValueF32);
              let res = atomicCompareExchangeWeak(${n}, oldValue, newValue);
              if res.exchanged {
                break;
              }
              oldValue = res.old_value;
            }
          }`;
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var Ol;
(function(n) {
  n[n.FROM_PIXELS = 0] = "FROM_PIXELS", n[n.DRAW = 1] = "DRAW";
})(Ol || (Ol = {}));
const Bse = (n, e, t, s, r) => {
  const a = { dtype: s.dtype, shape: s.shape }, o = Vse(t, a, e), i = n.createShaderModule({ code: o, label: e.constructor.name });
  let u = U().get("WEBGPU_PRINT_SHADER");
  if (u !== "") {
    u = u.toLowerCase();
    const c = u.split(",");
    (u === "all" || c.some((l) => e.shaderKey.toLowerCase().includes(l))) && (console.group(e.shaderKey), console.debug(o), console.groupEnd());
  }
  return r ? n.createComputePipelineAsync({ compute: { module: i, entryPoint: "_start" }, label: e.constructor.name, layout: "auto" }) : n.createComputePipeline({ compute: { module: i, entryPoint: "_start" }, label: e.constructor.name, layout: "auto" });
}, He = (n, e = "f32") => {
  switch (n) {
    case 1:
      return `${e}`;
    case 2:
      return `vec2<${e}>`;
    case 3:
      return `vec3<${e}>`;
    case 4:
      return `vec4<${e}>`;
    default:
      throw new Error(`${n}-component ${e} is not supported.`);
  }
};
function Pt(n) {
  if (n <= 1) return "i32";
  if (n === 2) return "vec2<i32>";
  if (n === 3) return "vec3<i32>";
  if (n === 4) return "vec4<i32>";
  if (n === 5) return "vec5";
  if (n === 6) return "vec6";
  throw Error(`GPU for rank ${n} is not yet supported`);
}
function Or(n) {
  if (n === 0) return "x";
  if (n === 1) return "y";
  if (n === 2) return "z";
  if (n === 3) return "w";
  if (n === 4) return "u";
  if (n === 5) return "v";
  throw Error(`Index ${n} is not yet supported`);
}
function le(...n) {
  let e;
  switch (n.length) {
    case 0:
      e = `
        fn main()
      `;
      break;
    case 1:
      e = `
        fn main(${n[0]} : i32)
      `;
      break;
    default:
      throw Error("Unreachable");
  }
  return e;
}
function FC(n, e) {
  let t;
  return t = `
     ${Wse(e)}
      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                @builtin(global_invocation_id) GlobalId : vec3<u32>,
                @builtin(local_invocation_index) LocalIndex: u32,
                @builtin(workgroup_id) WorkgroupId : vec3<u32>,
                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
        localId = LocalId;
        localIndex = LocalIndex;
        globalId = GlobalId;
        numWorkgroups = NumWorkgroups;
        workgroupId = WorkgroupId;
        ${n ? "main(getGlobalIndex());" : "main();"};
      }
    `, t;
}
function Wse(n) {
  return `
  @compute @workgroup_size(${n.workgroupSize[0]}, ${n.workgroupSize[1]}, ${n.workgroupSize[2]})
`;
}
function Vse(n, e, t) {
  const s = [], r = t.workgroupSize[0] * t.workgroupSize[1] * t.workgroupSize[2];
  if (t.outputComponent = t.outputComponent ? t.outputComponent : 1, s.push(`

      var<private> localId: vec3<u32>;
      var<private> localIndex: u32;
      var<private> globalId: vec3<u32>;
      var<private> numWorkgroups: vec3<u32>;
      var<private> workgroupId: vec3<u32>;

      // Only used when the y/z dimension of workgroup size is 1.
      fn getGlobalIndex() -> i32 {
        ${AN(t) ? "  return i32(globalId.x);" : `  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +
                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${r}u +
                localIndex);
        `}
      }
    `), t.pixelsOpType != null) {
    const f = t.pixelsOpType === Ol.FROM_PIXELS ? `@group(0) @binding(0) var<storage, read_write> result: array<${xi(e.dtype, t.outputComponent)}>;` : `@group(0) @binding(1) var<storage, read> inBuf : array<${xi(n[0].dtype, t.outputComponent)}>;`, m = e.shape.length === 3 ? "vec2<i32>" : "i32";
    s.push(`
        struct Uniform {
          outShapeStrides : ${m},
          size            : i32,
          numChannels     : i32,
          alpha           : f32,
        };

        ${f}
        @group(0) @binding(2) var<uniform> uniforms: Uniform;
      `);
    const g = PC(t);
    return [OC, s.join(`
`), kp(e.shape), t.getUserCode(), FC(g, t)].join(`
`);
  }
  let a, o, i = "struct Uniforms { NAN : f32, INFINITY : f32, ";
  t.variableNames.forEach((f, m) => {
    const g = Pt(n[m].shape.length);
    i += `${f.charAt(0).toLowerCase() + f.slice(1)}Shape : ${g}, `, a = n[m].shape.length - 1, o = Pt(a), i += `${f.charAt(0).toLowerCase() + f.slice(1)}ShapeStrides: ${o}, `;
  });
  const u = Pt(e.shape.length);
  i += `outShape : ${u}, `, a = e.shape.length - 1, o = Pt(a), i += `
         outShapeStrides: ${o}, `, t.size && (i += "size : i32, "), t.uniforms && (i += t.uniforms), i += "};", i = Qse(i), s.push(i), t.atomic ? s.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
    `) : s.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<${xi(e.dtype, t.outputComponent)}>;
    `), t.variableNames.forEach((f, m) => {
    s.push(`
      @group(0) @binding(${1 + m}) var<storage, read> ${f}: array<${t.variableComponents ? xi(n[m].dtype, t.variableComponents[m]) : xi(n[m].dtype, t.outputComponent)}>;
        `);
  }), i !== "" && s.push(`
      @group(0) @binding(${1 + t.variableNames.length}) var<uniform> uniforms: Uniforms;
      `);
  const c = Kse(e.shape, t.dispatchLayout), l = [OC, s.join(`
`) + Gse, kp(e.shape), c, Xse(e.shape.length)];
  t.atomic || l.push(Yse(e.shape, e.dtype, t.outputComponent)), t.variableNames.forEach((f, m) => {
    l.push(`${kp(n[m].shape, f)}`);
  });
  const d = n.map((f, m) => qse(f, e.shape, t.variableComponents ? t.variableComponents[m] : t.outputComponent, t.dispatchLayout.x.length === e.shape.length)).join(`
`);
  l.push(d), l.push(t.getUserCode());
  const h = PC(t);
  return l.push(FC(h, t)), l.join(`
`);
}
function Use(n, e, t) {
  let s = n.shaderKey;
  if (n.pixelsOpType != null) return s;
  const r = [], a = [];
  e.forEach((l) => {
    r.push(l.shape), a.push(l.dtype);
  }), r.push(t.shape), a.push(t.dtype);
  const o = e.map((l) => Br(l.shape, t.shape)), i = e.map((l) => Be(l.shape, t.shape)).join("_"), u = o.map((l) => l.join("_")).join(";"), c = AN(n) ? "flatDispatch" : "";
  return s += "_" + (n.workgroupSize ? n.workgroupSize.join(",") : "") + r.map((l) => l.length).join(",") + a.join(",") + n.variableNames.join(",") + u + i + c, s;
}
const OC = `
  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};
  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};

  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }
  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {
    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;
  }
  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {
    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);
    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);
  }
`, Gse = `
  fn isinf(val: f32) -> bool {
    return abs(val) == uniforms.INFINITY;
  }
`;
function kp(n, e = "") {
  const t = n.length, s = e !== "" ? `get${e.charAt(0).toUpperCase() + e.slice(1)}CoordsFromIndex` : "getCoordsFromIndex", r = e !== "" ? `${e.charAt(0).toLowerCase() + e.slice(1)}ShapeStrides` : "outShapeStrides";
  if (t <= 1) return `fn ${s}(index : i32) -> i32 { return index; }`;
  const a = me(n), o = Pt(t), i = [];
  for (let c = 0; c < t; c++) i.push(`d${c}`);
  if (a.length === 1) return `    fn ${s}(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.${r}; let d1 = index - d0 * uniforms.${r};
      return vec2<i32>(d0, d1);
    }`;
  let u;
  return u = "var index2 = index;" + a.map((c, l) => {
    const d = `let ${i[l]} = index2 / uniforms.${r}.${Or(l)}`, h = l === a.length - 1 ? `let ${i[l + 1]} = index2 - ${i[l]} * uniforms.${r}.${Or(l)}` : `index2 = index2 - ${i[l]} * uniforms.${r}.${Or(l)}`;
    return `${d}; ${h};`;
  }).join(""), `
    fn ${s}(index : i32) -> ${o} {
      ${u}
      return ${o}(${i.join(",")});
    }
  `;
}
function Hse(n, e) {
  const t = n.name, s = n.shape.length, r = Pt(s), a = "get" + t.charAt(0).toUpperCase() + t.slice(1), o = ["d0", "d1", "d2", "d3", "d4", "d5"].slice(0, s), i = o.map((l) => `${l} : i32`).join(", ");
  if (s < 1) return `
      fn ${a}() -> ${He(e)} {
        return ${He(e)}(${t}[0]);
      }
    `;
  const u = `uniforms.${t.charAt(0).toLowerCase() + t.slice(1)}Shape`;
  let c = `${s}D`;
  return s === 0 && (c = "1D"), `
    fn ${a}(${i}) -> ${He(e)} {
      return ${He(e)}(${t}[getIndexFromCoords${c}(${r}(${o.join(",")}),
        ${u})${e === 1 ? "" : ` / ${e}`}]);
    }
   `;
}
function jse(n, e, t, s) {
  const r = n.name, a = r.charAt(0).toUpperCase() + r.slice(1), o = "get" + a + "ByOutput", i = n.shape.length, u = e.length, c = Pt(u);
  if (Be(n.shape, e) && s) return `
    fn ${o}Index(globalIndex : i32) -> ${He(t)} {
      return ${He(t)}(${r}[globalIndex]);
    }

    fn ${o}Coords(coords : ${c}) -> ${He(t)} {
      return ${He(t)}(${r}[${u > 1 ? "getOutputIndexFromCoords(coords)" : "coords"}${t === 1 ? "" : ` / ${t}`}]);
    }
    `;
  const l = Br(n.shape, e), d = u - i;
  let h = "";
  if (i === 0) return `
    fn ${o}Index(globalIndex : i32) -> ${He(t)}{
      return get${a}();
    }

    fn ${o}Coords(coords : ${c}) -> ${He(t)}{
      return get${a}();
    }
  `;
  u < 2 && l.length >= 1 ? h = "coords = 0;" : h = l.map((g) => `coords.${Or(g + d)} = 0;`).join(`
`);
  let p = "";
  if (u < 2 && i > 0) p = "coords";
  else if (u > 1) {
    const g = Pt(i), y = n.shape.map((b, x) => `coords.${Or(x + d)}`).join(", ");
    p = `${g}(${y})`;
  } else p = "coords";
  const f = `uniforms.${r.charAt(0).toLowerCase() + r.slice(1)}Shape`, m = `${i}D`;
  return `
  fn ${o}Index(globalIndex : i32) -> ${He(t)} {
    var coords = getCoordsFromIndex(globalIndex);
    ${h}
    return ${He(t)}(${r}[getIndexFromCoords${m}(${p}, ${f})${t === 1 ? "" : ` / ${t}`}]);
  }

  fn ${o}Coords(coordsIn : ${c}) -> ${He(t)} {
    var coords = coordsIn;
    ${h}
    return ${He(t)}(${r}[getIndexFromCoords${m}(${p}, ${f})${t === 1 ? "" : ` / ${t}`}]);
  }
`;
}
function qse(n, e, t, s) {
  let r = Hse(n, t);
  return n.shape.length <= e.length && (r += jse(n, e, t, s)), r;
}
function Kse(n, e) {
  const { x: t, y: s = [], z: r = [] } = e, a = n.length, o = t.length + s.length + r.length;
  if (o !== a) return "";
  if (t.length === a) return `fn getOutputCoords() -> ${Pt(a)}{
    let globalIndex = getGlobalIndex();
    return getCoordsFromIndex(globalIndex);
  }
  `;
  let i = "";
  const u = [t, s, r];
  for (let h = 0; h < u.length; h++) {
    const p = u[h];
    if (p.length !== 0) if (p.length === 1) i += `let d${p[0]} = i32(globalId[${h}]);`;
    else {
      const f = Mse(p, "uniforms.outShape");
      i += `var index${h} = i32(globalId[${h}]);`;
      for (let m = 0; m < f.length; m++) i += `let d${p[m]} = index${h} / ${f[m]};`, m === f.length - 1 ? i += `let d${p[m + 1]} = index${h} - d${p[m]} * ${f[m]};` : i += `index${h} = index${h} - d${p[m]} * ${f[m]};`;
    }
  }
  const c = [];
  for (let h = 0; h < o; h++) c.push(`d${h}`);
  const l = Pt(o);
  let d = `fn getOutputCoords() -> ${l} {
  ${i}
`;
  return c.length === 0 ? d += `return ${l}(0); }` : d += `return ${l}(${c.join(",")}); }`, d;
}
function Xse(n) {
  let e = "";
  switch (n) {
    case 0:
    case 1:
      e += `
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;
      break;
    case 2:
      e += `
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;
      break;
    case 3:
      e += `
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;
      break;
    case 4:
      e += `
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;
      break;
    case 5:
      e += `
        fn getOutputIndexFromCoords(coords : vec5) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u;
        }
        `;
      break;
    case 6:
      e += `
        fn getOutputIndexFromCoords(coords : vec6) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u * uniforms.outShapeStrides.u +
              coords.v;
        }
        `;
      break;
    default:
      $(false, () => `Unsupported ${n}D shape`);
      break;
  }
  return e;
}
function AN(n) {
  return n.dispatch[1] === 1 && n.dispatch[2] === 1;
}
function xi(n, e = 1) {
  if (n === "float32") return He(e, "f32");
  if (n === "int32" || n === "bool") return He(e, "i32");
  throw new Error(`type ${n} is not supported.`);
}
function Yse(n, e, t) {
  const s = n.length, r = xi(e, t);
  let a = `fn setOutputAtIndex(flatIndex : i32, value : ${He(t)}) {
      result[flatIndex] = ${r}(value);
    }

    fn setOutputAtIndexI32(flatIndex : i32, value : ${He(t, "i32")}) {
      result[flatIndex] = ${r}(value);
    }
    `;
  if (s >= 2) {
    const o = ["d0", "d1", "d2", "d3", "d4", "d5"].slice(0, s), i = Pt(s);
    a += `
      fn setOutputAtCoords(${o.map((u) => `${u} : i32`).join(", ")}, value : ${He(t)}) {
        let flatIndex = getOutputIndexFromCoords(${i}(${o.join(", ")}));
        setOutputAtIndex(flatIndex${t === 1 ? "" : ` / ${t}`}, value);
      }
      fn setOutputAtCoordsI32(${o.map((u) => `${u} : i32`).join(", ")}, value : ${He(t, "i32")}) {
        let flatIndex = getOutputIndexFromCoords(${i}(${o.join(", ")}));
        setOutputAtIndexI32(flatIndex${t === 1 ? "" : ` / ${t}`}, value);
      }
    `;
  }
  return a;
}
function Qse(n) {
  const e = /(\w+)\s*:\s*vec(5|6)/g;
  n = n.replace(e, (s) => "@align(16) " + s);
  const t = /vec(5|6)\s*,\s*(\w+)/g;
  return n = n.replace(t, (s, r, a) => `vec${r}, @align(16) ${a}`), n;
}
function PC(n) {
  return !(n.dispatchLayout.hasOwnProperty("y") && n.dispatchLayout.y.length !== 0 || n.dispatchLayout.hasOwnProperty("z") && n.dispatchLayout.z.length !== 0);
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ki = (n) => {
  let e = 1;
  for (let t = 0; t < n.length; t++) e *= n[t];
  return e;
};
function ce(n, e, t = [1, 1, 1], s = [1, 1, 1]) {
  const [r, a, o] = [Math.ceil(ki(n.x.map((i) => e[i])) / (t[0] * s[0])), n.y ? Math.ceil(ki(n.y.map((i) => e[i])) / (t[1] * s[1])) : 1, n.z ? Math.ceil(ki(n.z.map((i) => e[i])) / (t[2] * s[2])) : 1];
  return [r, a, o];
}
function Zse(n, e, t, s = false) {
  const r = [8, 8, 1], a = [4, 4, 1];
  return s || (n <= 8 && (a[1] = 1), e <= 16 && t <= 16 && (r[0] = 4)), { workgroupSize: r, elementsPerThread: a };
}
function FN(n, e, t = false) {
  if (t) return [8, 8, 1];
  const s = ki(n.x.map((a) => e[a])), r = ki(n.y.map((a) => e[a]));
  return s <= 4 ? [4, 16, 1] : r <= 4 ? [16, 4, 1] : [16, 16, 1];
}
function ON(n, e, t = false) {
  if (t) return [4, 4, 1];
  const s = ki(n.x.map((a) => e[a])), r = ki(n.y.map((a) => e[a]));
  return s <= 4 ? [1, 2, 1] : r <= 4 ? [2, 1, 1] : [2, 2, 1];
}
function ye(n) {
  return { x: n.map((e, t) => t) };
}
function LC(n) {
  if (n === "float32" || n === "int32" || n === "bool" || n === "string") return 4;
  if (n === "complex64") return 8;
  throw new Error(`Unknown dtype ${n}`);
}
function PN() {
  return !!(typeof globalThis < "u" && globalThis.navigator && globalThis.navigator.gpu);
}
function LN(n, e) {
  Array.isArray(n) || (n = [n]), n.forEach((t) => {
    t != null && $(t.dtype !== "complex64", () => `${e} does not support complex64 tensors in the WebGPU backend.`);
  });
}
var lr;
(function(n) {
  n[n.MatMulReduceProgram = 0] = "MatMulReduceProgram", n[n.MatMulSplitKProgram = 1] = "MatMulSplitKProgram", n[n.MatMulSmallOutputSizeProgram = 2] = "MatMulSmallOutputSizeProgram", n[n.MatMulPackedProgram = 3] = "MatMulPackedProgram", n[n.MatMulMax = 4] = "MatMulMax";
})(lr || (lr = {}));
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Jse = U().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD"), ere = (n, e) => {
  const t = n.limits.maxComputeWorkgroupsPerDimension, s = e.dispatchLayout, r = e.dispatch;
  if (r.every((o) => o <= t)) return r;
  $(r[0] > t && s.y === void 0 && s.z === void 0, () => "Dispatch size exceeds WebGPU limits in Y or Z dimension.");
  let a = Math.ceil(Math.sqrt(r[0]));
  return a > t ? (a = Math.ceil(Math.cbrt(r[0])), $(a <= t, () => "Total dispatch size exceeds WebGPU maximum."), [a, a, a]) : [a, a, 1];
};
class Fm extends Pl {
  nextDataId() {
    return Fm.nextDataId++;
  }
  constructor(e, t) {
    if (super(), this.commandQueueOwnedIds = /* @__PURE__ */ new WeakSet(), this.dispatchCountInPass = 0, this.disposed = false, this.downloadWaitMs = 0, this.tensorDataPendingDisposal = [], this.queryResolveBuffer = null, this.querySet = null, this.querySetCount = 2, this.stagingPendingDisposal = [], this.uniformPendingDisposal = [], this.uploadWaitMs = 0, this.hasReadSyncWarned = false, this.hasTimestampQueryWarned = false, !PN()) throw new Error("WebGPU is not supported on this device");
    this.pipelineCache = {}, this.device = e, this.queue = e.queue, this.commandEncoder = null, this.computePassEncoder = null, this.adapterInfo = new Pse(t), this.supportTimestampQuery = this.device.features.has("timestamp-query"), this.thresholdToIncreaseWorkgroups = this.adapterInfo.intelGPUGeneration >= 12 ? 16 : 8, this.bufferManager = new Lse(this.device), this.textureManager = new zse(this.device), this.tensorMap = new Cd(this, zn()), U().getBool("WEBGPU_USE_PROFILE_TOOL") && (this.dummyCanvas = document.createElement("canvas"), this.dummyCanvas.width = 1, this.dummyCanvas.height = 1, this.dummyContext = this.dummyCanvas.getContext("webgpu"), this.dummyContext.configure({ device: e, format: "bgra8unorm" }), document.body.appendChild(this.dummyCanvas));
  }
  floatPrecision() {
    return 32;
  }
  disposeData(e, t = false) {
    if (!this.tensorMap.has(e)) return true;
    const s = this.tensorMap.get(e);
    return t ? s.refCount = 0 : s.refCount--, s.refCount > 0 ? false : (s.complexTensorInfos != null && (this.disposeData(s.complexTensorInfos.real.dataId), this.disposeData(s.complexTensorInfos.imag.dataId)), this.commandQueueOwnedIds.has(e) ? (this.tensorDataPendingDisposal.push(e), true) : (this.releaseResource(e), this.tensorMap.delete(e), true));
  }
  memory() {
    return { numBytesInGPU: this.bufferManager.numBytesUsed, numBytesAllocatedInGPU: this.bufferManager.numBytesAllocated, unreliable: false };
  }
  releaseResource(e) {
    const t = this.tensorMap.get(e);
    if (!(!t || !t.resource)) {
      if (t.external) {
        t.resource = null;
        return;
      }
      t.resource instanceof GPUBuffer ? this.bufferManager.releaseBuffer(t.resource) : t.resource instanceof GPUTexture && this.textureManager.releaseTexture(t.resource), t.resource = null;
    }
  }
  refCount(e) {
    return this.tensorMap.has(e) ? this.tensorMap.get(e).refCount : 0;
  }
  incRef(e) {
    const t = this.tensorMap.get(e);
    t.refCount++;
  }
  decRef(e) {
    if (this.tensorMap.has(e)) {
      const t = this.tensorMap.get(e);
      t.refCount--;
    }
  }
  write(e, t, s) {
    if (s === "complex64" && e != null) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    const r = { id: this.nextDataId() };
    return this.tensorMap.set(r, { dtype: s, shape: t, values: e, refCount: 1 }), r;
  }
  move(e, t, s, r, a) {
    if (r === "complex64") throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.tensorMap.set(e, { dtype: r, shape: s, values: t, refCount: a });
  }
  submitQueue() {
    this.queue.submit([this.commandEncoder.finish()]), this.commandEncoder = null, this.dispatchCountInPass = 0, this.commandQueueOwnedIds = /* @__PURE__ */ new WeakSet(), this.tensorDataPendingDisposal.forEach((e) => {
      this.releaseResource(e), this.tensorMap.delete(e);
    }), this.uniformPendingDisposal.forEach((e) => this.bufferManager.releaseBuffer(e)), this.stagingPendingDisposal.forEach((e) => this.bufferManager.releaseBuffer(e, false)), this.tensorDataPendingDisposal = [], this.uniformPendingDisposal = [], this.stagingPendingDisposal = [];
  }
  ensureCommandEncoderReady() {
    this.commandEncoder || (this.commandEncoder = this.device.createCommandEncoder());
  }
  endComputePassEncoder() {
    this.computePassEncoder && (this.computePassEncoder.end(), this.computePassEncoder = null);
  }
  async checkCompileCompletionAsync() {
    let e;
    try {
      e = await Promise.all(Object.values(this.pipelineCache));
    } catch (t) {
      throw new Error(t.message);
    }
    Object.keys(this.pipelineCache).map((t, s) => {
      this.pipelineCache[t] = e[s];
    });
  }
  async getBufferData(e) {
    if (U().getBool("WEBGPU_ENGINE_COMPILE_ONLY")) return console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"), null;
    const t = e.size, s = this.bufferManager.acquireBuffer(t, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ);
    this.ensureCommandEncoderReady(), this.endComputePassEncoder(), this.commandEncoder.copyBufferToBuffer(e, 0, s, 0, t), this.submitQueue(), await s.mapAsync(GPUMapMode.READ);
    const r = s.getMappedRange().slice(0);
    return s.unmap(), s != null && this.bufferManager.releaseBuffer(s), U().getBool("WEBGPU_USE_PROFILE_TOOL") && ($(this.dummyContext !== void 0, () => "Fail to get context for profiling tool"), this.dummyContext.getCurrentTexture()), r;
  }
  convertAndCacheOnCPU(e, t) {
    const s = this.tensorMap.get(e);
    return s.values = t, s.values;
  }
  readSync(e) {
    const t = this.tensorMap.get(e), { values: s, complexTensorInfos: r } = t;
    if (s != null || t.dtype === "string") return s;
    if (t.dtype === "complex64") {
      const m = this.readSync(r.real.dataId), g = this.readSync(r.imag.dataId), y = Xc(Qs(m, g).buffer, "float32");
      return this.convertAndCacheOnCPU(e, y), y;
    }
    this.hasReadSyncWarned || (this.hasReadSyncWarned = true, console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));
    const a = ["opaque", "premultiplied"], o = t.resource, i = o.size;
    $(i % 4 === 0, () => "Because there is 4 bytes for one pixel, buffer size must be multiple of 4.");
    const u = i / 4, c = new ArrayBuffer(i), l = 256, d = 256, h = a.map((m) => new OffscreenCanvas(l, d)), p = new OffscreenCanvas(l, d);
    this.endComputePassEncoder(), h.map((m, g) => {
      const y = m.getContext("webgpu");
      return y.configure({ device: this.device, format: "bgra8unorm", usage: GPUTextureUsage.COPY_DST, alphaMode: a[g] }), y.getCurrentTexture();
    }).map((m, g) => {
      const y = l * 4, b = (R, N, T) => {
        this.ensureCommandEncoderReady(), this.commandEncoder.copyBufferToTexture({ buffer: o, bytesPerRow: y, offset: T }, { texture: m }, { width: R, height: N }), this.submitQueue();
        const S = p.getContext("2d", { willReadFrequently: true });
        S.clearRect(0, 0, R, N), S.drawImage(h[g], 0, 0);
        const E = S.getImageData(0, 0, R, N).data, P = a[g], M = new Uint8ClampedArray(c, T, R * N * 4);
        for (let L = 0; L < M.length; L += 4) if (P === "premultiplied") M[L + 3] = E[L + 3];
        else {
          const V = E[L];
          M[L] = E[L + 2], M[L + 1] = E[L + 1], M[L + 2] = V;
        }
      }, x = Math.floor(u / (l * d));
      let w = l, C = d, v = 0;
      for (let R = 0; R < x; R++) b(w, C, v), v += l * d * 4;
      const k = u % (l * d);
      C = Math.floor(k / l), C > 0 && (b(w, C, v), v += C * (l * 4)), w = k % l, w > 0 && b(w, 1, v);
    });
    const f = Xc(c, t.dtype);
    return this.convertAndCacheOnCPU(e, f), f;
  }
  async read(e) {
    if (!this.tensorMap.has(e)) throw new Error(`Tensor ${e} was not registered!`);
    const t = this.tensorMap.get(e), { values: s } = t;
    if (s != null) return s;
    let r;
    if (t.dtype === "complex64") {
      const a = await Promise.all([this.read(t.complexTensorInfos.real.dataId), this.read(t.complexTensorInfos.imag.dataId)]), o = a[0], i = a[1];
      r = Qs(o, i);
    } else {
      const a = await this.getBufferData(t.resource);
      r = Xc(a, t.dtype);
    }
    return this.convertAndCacheOnCPU(e, r), r;
  }
  copyBuffer(e) {
    const t = e.size, s = e.usage, r = this.bufferManager.acquireBuffer(t, s);
    return this.ensureCommandEncoderReady(), this.endComputePassEncoder(), this.commandEncoder.copyBufferToBuffer(e, 0, r, 0, t), this.submitQueue(), r;
  }
  createTensorFromGPUData(e, t, s) {
    let r = e.buffer;
    if (s === "complex64") throw new Error("Cannot write to a complex64 dtype. ");
    const a = { id: this.nextDataId() };
    this.tensorMap.set(a, { dtype: s, shape: t, values: null, refCount: 1, external: e.zeroCopy });
    const o = this.tensorMap.get(a), i = LC(o.dtype) * A(o.shape);
    if (e.buffer.size < i) throw new Error(`GPUBuffer size(${e.buffer.size}) is smaller than tensor size(${i})!`);
    if ((e.buffer.usage & (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC)) !== (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC)) throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");
    return e.zeroCopy !== true && (r = this.copyBuffer(r)), o.resource = r, zn().makeTensorFromDataId(a, t, s, this);
  }
  readToGPU(e) {
    const t = this.tensorMap.get(e), { values: s, dtype: r, shape: a, resource: o } = t;
    if (r === "complex64") throw new Error("Does not support reading buffer for complex64 dtype.");
    if (o == null) throw s != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    const i = o, u = i.size, c = i.usage, l = this.bufferManager.acquireBuffer(u, c);
    this.ensureCommandEncoderReady(), this.endComputePassEncoder(), this.commandEncoder.copyBufferToBuffer(o, 0, l, 0, u), this.submitQueue();
    const d = this.makeTensorInfo(a, r), h = zn().makeTensorFromTensorInfo(d), p = this.tensorMap.get(d.dataId);
    return p.resource = l, { tensorRef: h, buffer: l };
  }
  bufferSync(e) {
    const t = this.readSync(e.dataId);
    if (e.dtype === "string") try {
      const s = t.map((r) => Fs(r));
      return Oe(e.shape, e.dtype, s);
    } catch {
      throw new Error("Failed to decode encoded string bytes into utf-8");
    }
    return Oe(e.shape, e.dtype, t);
  }
  async time(e) {
    !this.supportTimestampQuery && !this.hasTimestampQueryWarned && (console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --enable-dawn-features=allow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."), this.hasTimestampQueryWarned = true);
    const t = this.activeTimers, s = [];
    let r = false;
    this.programTimersStack == null ? (this.programTimersStack = s, r = true) : this.activeTimers.push(s), this.activeTimers = s, e();
    const a = Os(this.activeTimers.map((c) => c.query)).filter((c) => c != null), o = Os(this.activeTimers.map((c) => c.name)).filter((c) => c != null);
    this.activeTimers = t, r && (this.programTimersStack = null);
    const i = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null }, u = await Promise.all(a);
    return i.kernelMs = xy(u), i.getExtraProfileInfo = () => u.map((c, l) => ({ name: o[l], ms: c })).map((c) => `${c.name}: ${c.ms}`).join(", "), this.uploadWaitMs = 0, this.downloadWaitMs = 0, i;
  }
  makeTensorInfo(e, t, s) {
    return t === "string" && s != null && s.length > 0 && Hs(s[0]) && (s = s.map((a) => qs(a))), { dataId: this.write(s, e, t), shape: e, dtype: t };
  }
  tensorToBinding(e) {
    if (!e) return null;
    const s = this.tensorMap.get(e.dataId).resource;
    return s instanceof GPUBuffer ? { buffer: s } : s instanceof GPUTexture ? s.createView() : s;
  }
  uploadToGPU(e) {
    const t = this.tensorMap.get(e);
    if (t.resource != null) return;
    const s = LC(t.dtype) * A(t.shape);
    let r;
    const a = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST;
    if (t.values) {
      if (r = this.bufferManager.acquireBuffer(s, a, true), r.mapState === "unmapped") {
        const o = this.bufferManager.acquireBuffer(s, GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC, true, false), i = o.getMappedRange();
        t.dtype === "int32" || t.dtype === "bool" ? new Int32Array(i).set(t.values) : new Float32Array(i).set(t.values), o.unmap(), this.ensureCommandEncoderReady(), this.endComputePassEncoder(), this.commandEncoder.copyBufferToBuffer(o, 0, r, 0, s), this.stagingPendingDisposal.push(o);
      } else {
        const o = r.getMappedRange();
        t.dtype === "int32" || t.dtype === "bool" ? new Int32Array(o).set(t.values) : new Float32Array(o).set(t.values), r.unmap();
      }
      t.values = null;
    } else r = this.bufferManager.acquireBuffer(s, a);
    t.resource = r;
  }
  makeUniforms(e) {
    let t = 0, s = 0;
    const r = [];
    let a = 1;
    e.forEach((u) => {
      u.data.length === 0 && (u.data = [1]);
      let c;
      switch (u.data.length) {
        case 1:
          c = 4;
          break;
        case 2:
          c = 8;
          break;
        case 3:
          c = 16;
          break;
        case 4:
          c = 16;
          break;
        case 5:
          c = 16;
          break;
        case 6:
          c = 16;
          break;
        default:
          $(false, () => `Unsupported ${u.data.length}D shape`);
      }
      (s === 5 || s === 6) && (c = 16), c > a && (a = c), t = Math.ceil(t / c) * c, s = u.data.length, r.push(t), t += u.data.length * 4;
    }), t = Math.ceil(t / a) * a;
    const o = new ArrayBuffer(t);
    e.forEach((u, c) => {
      const l = r[c];
      u.type === "int32" ? new Int32Array(o, l, u.data.length).set(u.data) : u.type === "uint32" ? new Uint32Array(o, l, u.data.length).set(u.data) : new Float32Array(o, l, u.data.length).set(u.data);
    });
    const i = this.bufferManager.acquireBuffer(t, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);
    return this.queue.writeBuffer(i, 0, o, 0, t), this.uniformPendingDisposal.push(i), { offset: 0, size: t, buffer: i };
  }
  runWebGPUProgram(e, t, s, r, a) {
    if (a || (a = this.makeTensorInfo(e.outputShape, s)), A(a.shape) === 0) return this.tensorMap.get(a.dataId).values = Ht(a.dtype, 0), a;
    this.uploadToGPU(a.dataId), e.dispatch = ere(this.device, e);
    const o = t.map((u, c) => {
      if (u.dtype === "complex64") throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      return this.uploadToGPU(u.dataId), { dtype: this.tensorMap.get(u.dataId).dtype, shape: u.shape, name: e.variableNames[c] };
    });
    e.shaderKey = Use(e, o, a);
    const i = U().getBool("WEBGPU_ENGINE_COMPILE_ONLY");
    return e.shaderKey in this.pipelineCache || (this.pipelineCache[e.shaderKey] = Bse(this.device, e, o, a, i)), e.pipeline = this.pipelineCache[e.shaderKey], i || this.recordAndSubmit(e, a, t, r), a;
  }
  recordAndSubmit(e, t, s, r) {
    if (e.pipeline instanceof Promise) throw new Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");
    let a = [], o = [];
    const i = "int32";
    if (e.pixelsOpType == null) {
      a.push({ type: "float32", data: [NaN] }, { type: "float32", data: [1 / 0] }), o = s.concat(t).map((p) => p.shape);
      const h = "int32";
      o.map((p) => {
        a.push({ type: h, data: p });
        const f = me(p);
        a.push({ type: h, data: f });
      });
    } else {
      const h = me(t.shape);
      a.push({ type: i, data: h });
    }
    if (e.size) {
      const h = A(e.outputShape);
      a.push({ type: i, data: [e.outputComponent ? h / e.outputComponent : h] });
    }
    r && (a = [...a, ...r]);
    const u = [this.tensorToBinding(t), ...s.map((h) => this.tensorToBinding(h)), this.makeUniforms(a)];
    s.forEach((h) => {
      this.commandQueueOwnedIds.add(h.dataId);
    }), this.commandQueueOwnedIds.add(t.dataId);
    const c = this.device.createBindGroup({ layout: e.pipeline.getBindGroupLayout(0), entries: u.map((h, p) => ({ binding: p, resource: h })) }), l = this.activeTimers != null;
    this.ensureCommandEncoderReady();
    const d = {};
    l && this.supportTimestampQuery ? (this.endComputePassEncoder(), this.querySet == null && (this.querySet = this.device.createQuerySet({ type: "timestamp", count: this.querySetCount })), d.timestampWrites = { querySet: this.querySet, beginningOfPassWriteIndex: 0, endOfPassWriteIndex: 1 }, this.computePassEncoder = this.commandEncoder.beginComputePass(d)) : this.computePassEncoder || (this.computePassEncoder = this.commandEncoder.beginComputePass(d)), this.computePassEncoder.setPipeline(e.pipeline), this.computePassEncoder.setBindGroup(0, c), this.computePassEncoder.dispatchWorkgroups(e.dispatch[0], e.dispatch[1], e.dispatch[2]), this.dispatchCountInPass++, (l || U().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE") <= this.dispatchCountInPass || e.pixelsOpType === Ol.DRAW) && (this.endComputePassEncoder(), l ? this.activeTimers.push({ name: e.constructor.name, query: this.getQueryTime() }) : this.submitQueue());
  }
  async getQueryTime() {
    if (!this.supportTimestampQuery) return 0;
    this.queryResolveBuffer == null && (this.queryResolveBuffer = this.bufferManager.acquireBuffer(this.querySetCount * 8, GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.QUERY_RESOLVE)), this.commandEncoder.resolveQuerySet(this.querySet, 0, this.querySetCount, this.queryResolveBuffer, 0);
    const e = this.bufferManager.acquireBuffer(this.querySetCount * 8, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);
    this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer, 0, e, 0, this.querySetCount * 8), this.submitQueue(), await e.mapAsync(GPUMapMode.READ);
    const t = new BigUint64Array(e.getMappedRange()), s = Number(t[1] - t[0]) / 1e6;
    return e.unmap(), this.bufferManager.releaseBuffer(e), s;
  }
  shouldExecuteOnCPU(e, t = Jse) {
    return U().getBool("WEBGPU_CPU_FORWARD") && e.every((s) => this.tensorMap.get(s.dataId).resource == null && A(s.shape) < t);
  }
  numDataIds() {
    return this.tensorMap.numDataIds() - this.tensorDataPendingDisposal.length;
  }
  dispose() {
    this.disposed || (this.querySet != null && this.querySet.destroy(), this.bufferManager.dispose(), this.textureManager.dispose(), this.disposed = true);
  }
}
Fm.nextDataId = 0;
/**
* @license
* Copyright 2022 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
PN() && Bd("webgpu", async () => {
  const n = { powerPreference: U().get("WEBGPU_USE_LOW_POWER_GPU") ? "low-power" : "high-performance" }, e = await navigator.gpu.requestAdapter(n), t = {}, s = [];
  e.features.has("timestamp-query") && s.push("timestamp-query"), e.features.has("bgra8unorm-storage") && s.push(["bgra8unorm-storage"]), t.requiredFeatures = s;
  const r = e.limits;
  t.requiredLimits = { maxComputeWorkgroupStorageSize: r.maxComputeWorkgroupStorageSize, maxComputeWorkgroupsPerDimension: r.maxComputeWorkgroupsPerDimension, maxStorageBufferBindingSize: r.maxStorageBufferBindingSize, maxBufferSize: r.maxBufferSize, maxComputeWorkgroupSizeX: r.maxComputeWorkgroupSizeX, maxComputeInvocationsPerWorkgroup: r.maxComputeInvocationsPerWorkgroup };
  const a = await e.requestDevice(t), o = "info" in e ? e.info : "requestAdapterInfo" in e ? await e.requestAdapterInfo() : void 0;
  return new Fm(a, o);
}, 3);
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var Ae;
(function(n) {
  n[n.ADD = 0] = "ADD", n[n.ATAN2 = 1] = "ATAN2", n[n.COMPLEX_MULTIPLY_IMAG = 2] = "COMPLEX_MULTIPLY_IMAG", n[n.COMPLEX_MULTIPLY_REAL = 3] = "COMPLEX_MULTIPLY_REAL", n[n.DIV = 4] = "DIV", n[n.ELU_DER = 5] = "ELU_DER", n[n.EQUAL = 6] = "EQUAL", n[n.FLOOR_DIV = 7] = "FLOOR_DIV", n[n.GREATER = 8] = "GREATER", n[n.GREATER_EQUAL = 9] = "GREATER_EQUAL", n[n.LESS = 10] = "LESS", n[n.LESS_EQUAL = 11] = "LESS_EQUAL", n[n.LOGICAL_AND = 12] = "LOGICAL_AND", n[n.LOGICAL_OR = 13] = "LOGICAL_OR", n[n.MAX = 14] = "MAX", n[n.MIN = 15] = "MIN", n[n.MOD = 16] = "MOD", n[n.MUL = 17] = "MUL", n[n.NOT_EQUAL = 18] = "NOT_EQUAL", n[n.POW = 19] = "POW", n[n.PRELU = 20] = "PRELU", n[n.SQUARED_DIFFERENCE = 21] = "SQUARED_DIFFERENCE", n[n.SUB = 22] = "SUB";
})(Ae || (Ae = {}));
const tre = "let resultTemp = a + b;", nre = "let resultTemp = atan2(a, b);", sre = "let resultTemp = areal * breal - aimag * bimag;", rre = "let resultTemp = areal * bimag + aimag * breal;", are = "let resultTemp = a / b;", ore = "let resultTemp = select(a * (b + 1.0), a, b >= b - b);", ire = `
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a == b);
`, ure = `
  let remainder =
      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));
  let quotient = (a - remainder) / b;
  let resultTemp =
      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));
`, lre = `
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a > b);
`, cre = `
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a >= b);
`, dre = `
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a < b);
`, hre = `
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a <= b);
`, pre = "return f32(a >= 1.0 && b >= 1.0);", fre = `return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`, mre = "return f32(a >= 1.0 || b >= 1.0);", gre = `return min(vec4<f32>(a >= vec4<f32>(1.0)) +
  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));`, yre = "let resultTemp = max(a, b);", bre = "let resultTemp = min(a, b);", xre = `
  let isNaN = b == 0.;
  var resultTemp = a % b;
  resultTemp = select((resultTemp + b) % b, resultTemp,
      (a < 0. && b < 0.) || (a >= 0. && b > 0.));
`, wre = `
  let isNaN = !vec4<bool>(b);
  var resultTemp = vec4<f32>(a % b);
  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {
    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];
  }
  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {
    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];
  }
  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {
    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];
  }
  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {
    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];
  }
`, Cre = "let resultTemp = a * b;", Ire = `
  var resultTemp = f32(a != b);
  let valueForNaN = 1.0;
`, Sre = `
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
`, vre = `
  let isNaN = a < 0.0 && floor(b) < b;
  if (b == 0.0) {
    return 1.0;
  }
  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),
      round(abs(b) % 2.0) != 1.0);
`, $re = `
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);
`, kre = "if (a < 0.0) { return b * a; }  return a;", Nre = `
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`, Tre = "let resultTemp = (a - b) * (a - b);", Rre = "let resultTemp = a - b;";
function I0(n, e) {
  let t;
  do {
    switch (n) {
      case Ae.ATAN2:
        t = nre;
        break;
      case Ae.MAX:
        t = yre;
        break;
      case Ae.MIN:
        t = bre;
        break;
      case Ae.MOD:
        t = e ? wre : xre;
        break;
      case Ae.NOT_EQUAL:
        t = e ? Sre : Ire;
        break;
      case Ae.POW:
        t = e ? $re : vre;
        break;
      default:
        continue;
    }
    let s, r, a;
    return e ? (s = "isnanVec4", r = "vec4<f32>", a = "vec4<bool>") : (s = "isnan", r = "f32", a = "bool"), `
      let aIsNaN = ${s}(a);
      let aPostLegalization = select(a, ${r}(42), aIsNaN);
      let bIsNaN = ${s}(b);
      let bPostLegalization = select(b, ${r}(42), bIsNaN);
      let isNaN = false;
      let valueForNaN = uniforms.NAN;
      {
        let a = aPostLegalization;
        let b = bPostLegalization;
        ${t}
        return select(
            resultTemp, ${r}(valueForNaN),
            ${a}(isNaN) | aIsNaN | bIsNaN);
      }
    `;
  } while (false);
  switch (n) {
    case Ae.ADD:
      t = tre;
      break;
    case Ae.COMPLEX_MULTIPLY_IMAG:
      t = rre;
      break;
    case Ae.COMPLEX_MULTIPLY_REAL:
      t = sre;
      break;
    case Ae.DIV:
      t = are;
      break;
    case Ae.ELU_DER:
      t = ore;
      break;
    case Ae.EQUAL:
      t = ire;
      break;
    case Ae.FLOOR_DIV:
      t = ure;
      break;
    case Ae.GREATER:
      t = lre;
      break;
    case Ae.GREATER_EQUAL:
      t = cre;
      break;
    case Ae.LESS:
      t = dre;
      break;
    case Ae.LESS_EQUAL:
      t = hre;
      break;
    case Ae.LOGICAL_AND:
      return e ? fre : pre;
    case Ae.LOGICAL_OR:
      return e ? gre : mre;
    case Ae.MUL:
      t = Cre;
      break;
    case Ae.PRELU:
      return e ? Nre : kre;
    case Ae.SQUARED_DIFFERENCE:
      t = Tre;
      break;
    case Ae.SUB:
      t = Rre;
      break;
  }
  return `
    ${t}
    return resultTemp;
  `;
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var ie;
(function(n) {
  n[n.ABS = 0] = "ABS", n[n.ACOS = 1] = "ACOS", n[n.ACOSH = 2] = "ACOSH", n[n.ASIN = 3] = "ASIN", n[n.ASINH = 4] = "ASINH", n[n.ATAN = 5] = "ATAN", n[n.ATANH = 6] = "ATANH", n[n.CEIL = 7] = "CEIL", n[n.COS = 8] = "COS", n[n.COSH = 9] = "COSH", n[n.ELU = 10] = "ELU", n[n.ERF = 11] = "ERF", n[n.EXP = 12] = "EXP", n[n.EXPM1 = 13] = "EXPM1", n[n.FLOOR = 14] = "FLOOR", n[n.IS_FINITE = 15] = "IS_FINITE", n[n.IS_INF = 16] = "IS_INF", n[n.IS_NAN = 17] = "IS_NAN", n[n.LINEAR = 18] = "LINEAR", n[n.LOG = 19] = "LOG", n[n.LOG1P = 20] = "LOG1P", n[n.LOGICAL_NOT = 21] = "LOGICAL_NOT", n[n.NEG = 22] = "NEG", n[n.RELU = 23] = "RELU", n[n.RELU6 = 24] = "RELU6", n[n.LEAKYRELU = 25] = "LEAKYRELU", n[n.RECIPROCAL = 26] = "RECIPROCAL", n[n.ROUND = 27] = "ROUND", n[n.RSQRT = 28] = "RSQRT", n[n.SELU = 29] = "SELU", n[n.SIGMOID = 30] = "SIGMOID", n[n.SIGN = 31] = "SIGN", n[n.SIN = 32] = "SIN", n[n.SINH = 33] = "SINH", n[n.SOFTPLUS = 34] = "SOFTPLUS", n[n.SQRT = 35] = "SQRT", n[n.SQUARE = 36] = "SQUARE", n[n.STEP = 37] = "STEP", n[n.TAN = 38] = "TAN", n[n.TANH = 39] = "TANH", n[n.TO_INT = 40] = "TO_INT";
})(ie || (ie = {}));
const _re = "return abs(a);", Ere = `
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return acos(a);
`, Dre = `
  if (a < 1.) {
    return uniforms.NAN;
  }
  return acosh(a);
`, Are = `
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return asin(a);
`, Fre = "return asinh(a);", Ore = `
  if (isnan(a)) {
    return uniforms.NAN;
  }
  return atan(a);
`, Pre = `
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  if (a == 1.) {
    return uniforms.INFINITY;
  }
  if (a == -1.) {
    return -uniforms.INFINITY;
  }
  return atanh(a);
`, Lre = "return ceil(a);", zre = "return cos(a);", Mre = `
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`, Bre = "return exp(a) - 1.0;", Wre = "if (a >= 0.0) { return a; }  return (exp(a) - 1.0);", Vre = `
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`, Ure = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  let p = ${Qf};
  let a1 = ${Zf};
  let a2 = ${Jf};
  let a3 = ${em};
  let a4 = ${tm};
  let a5 = ${nm};

  let sign = sign(a);
  let absA = abs(a);
  let t = 1.0 / (1.0 + p * absA);
  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));
`, Gre = "return exp(a);", Hre = "return floor(a);", jre = "return f32(!isnan(a) && !isinf(a));", qre = "return f32(isinf(a));", Kre = "return f32(isnan(a));", Xre = "return a;", Yre = `if (a < 0.0) { return uniforms.NAN; }
  return log(a);`, Qre = `
  if (isnan(a)) { return a; }
  return log(1.0 + a);
`, Zre = "return f32(!(a >= 1.0));", Jre = "return -a;", eae = "if (a < 0.0) { return uniforms.alpha * a; } return a;", tae = `
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`, nae = "return 1.0 / a;", sae = "return select(a, 0.0, a < 0.0);", rae = "return clamp(a, 0.0, 6.0);", aae = "return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));", oae = `
  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));
`, iae = "return round(a);", uae = "return inverseSqrt(a);", lae = `
  if (a >= 0.0) {
    return ${fh} * a;
  } else {
    return ${ph} * (exp(a) - 1.0);
  }
`, cae = "return 1.0 / (1.0 + exp(-1.0 * a));", dae = "return sign(a);", hae = "return sin(a);", pae = `
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`, fae = `
  let epsilon = 1.1920928955078125e-7;
  let threshold = log(epsilon) + 2.0;

  let too_large = a > -threshold;
  let too_small = a < threshold;
  let exp_a = exp(a);

  if (too_large) {
    return a;
  } else if (too_small) {
    return exp_a;
  } else {
    return log(exp_a + 1.0);
  }
`, mae = "return sqrt(a);", gae = "return a * a;", yae = `
  if (isnan(a)) {
    return a;
  }

  return select(uniforms.stepAlpha, 1.0, a > 0.0);
`, bae = "return tan(a);", xae = `
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`, wae = "return f32(i32((a)));";
function pi(n, e) {
  switch (n) {
    case ie.ABS:
      return _re;
    case ie.ACOS:
      return Ere;
    case ie.ACOSH:
      return Dre;
    case ie.ASIN:
      return Are;
    case ie.ASINH:
      return Fre;
    case ie.ATAN:
      return Ore;
    case ie.ATANH:
      return Pre;
    case ie.COS:
      return zre;
    case ie.COSH:
      return Mre;
    case ie.CEIL:
      return Lre;
    case ie.ELU:
      return e ? Vre : Wre;
    case ie.ERF:
      return Ure;
    case ie.EXP:
      return Gre;
    case ie.EXPM1:
      return Bre;
    case ie.FLOOR:
      return Hre;
    case ie.IS_FINITE:
      return jre;
    case ie.IS_INF:
      return qre;
    case ie.IS_NAN:
      return Kre;
    case ie.LINEAR:
      return Xre;
    case ie.LOG:
      return Yre;
    case ie.LOG1P:
      return Qre;
    case ie.LOGICAL_NOT:
      return Zre;
    case ie.NEG:
      return Jre;
    case ie.LEAKYRELU:
      return e ? tae : eae;
    case ie.RECIPROCAL:
      return nae;
    case ie.RELU:
      return e ? oae : sae;
    case ie.RELU6:
      return e ? aae : rae;
    case ie.ROUND:
      return iae;
    case ie.RSQRT:
      return uae;
    case ie.SELU:
      return lae;
    case ie.SIGMOID:
      return cae;
    case ie.SIGN:
      return dae;
    case ie.SIN:
      return hae;
    case ie.SINH:
      return pae;
    case ie.SOFTPLUS:
      return fae;
    case ie.SQRT:
      return mae;
    case ie.SQUARE:
      return gae;
    case ie.STEP:
      return yae;
    case ie.TAN:
      return bae;
    case ie.TANH:
      return xae;
    case ie.TO_INT:
      return wae;
    default:
      throw new Error(`BinaryType ${n} is not implemented!`);
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function na(n, e = false, t = false, s = 3) {
  if (n === null) return "";
  let r = "";
  if (n === "linear") r = pi(ie.LINEAR);
  else if (n === "relu") r = pi(ie.RELU, t);
  else if (n === "elu") r = pi(ie.ELU, t);
  else if (n === "relu6") r = pi(ie.RELU6, t);
  else if (n === "prelu") r = I0(Ae.PRELU, t);
  else if (n === "sigmoid") r = pi(ie.SIGMOID, t);
  else if (n === "leakyrelu") r = pi(ie.LEAKYRELU, t);
  else throw new Error(`Activation ${n} has not been implemented for the WebGPU backend.`);
  const o = He(t ? 4 : 1);
  let i = "";
  return e ? i = `
      fn activation(a : ${o}, coords : vec${s}<i32>) -> ${o} {
        let b = getPreluActivationWeightsByOutputCoords(coords);
        ${r}
      }` : i = `
      fn activation(a : ${o}, coords : vec${s}<i32>) -> ${o} {
        ${r}
      }`, i;
}
function ol(n, e) {
  return `
      ${n ? "value = value + getBiasByOutputCoords(coords);" : ""}
      ${e ? "value = activation(value, coords);" : ""}
      `;
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function zN(n, e, t = false, s = false, r = false, a = 1) {
  $(n && a === 1 || !n, () => `transposeA ${n} is not compatible with component size ${a}`);
  const o = `
      ${n ? "value = getA(batch, col, row);" : "value = getA(batch, row, col);"}

    `, i = e ? "value = getB(batch, col, row);" : "value = getB(batch, row, col);";
  return `
  fn mm_readA(batch: i32, row: i32, col: i32) -> ${He(a)} {
    var value = ${He(a)}(0.0);
    ${t && r ? o : `
    ${n ? "if(row < uniforms.dimAOuter && col < uniforms.dimInner)" : "if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}
    {
      ${o}
    }
    `}
    return value;
  }

  fn mm_readB(batch: i32, row: i32, col: i32) -> ${He(a)} {
    var value = ${He(a)}(0.0);
    ${i}
    return value;
  }
  `;
}
function S0(n, e, t, s, r = false, a = false, o = false, i = 1) {
  return `
  ${zN(t, s, r, a, o, i)}
  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${He(i)}) {
    ${r && a ? "" : "if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}
    {
      var value = valueIn;
      let coords = vec3<i32>(batch, row, col);
      ${ol(n, e)}
      setOutputAtCoords(coords[0], coords[1], coords[2], value);
    }
  }
  `;
}
const Cae = (n, e) => n ? `
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol * ${e});
        ` : `
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRow + innerRow,
          kStart + inputCol * ${e});
        `, Iae = (n, e, t, s) => {
  if (n) return `
      for (var k = 0; k < ${s}; k++) {
        let BCached0 = mm_Bsub[k][tileCol];
        let ACached0 = mm_Asub[k][localRow];
        for (var i = 0; i < ${t}; i++) {
          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);
        }
      }`;
  {
    let r = "", a = "";
    for (let o = 0; o < e; o++) r += `let BCached${o} = mm_Bsub[k * ${e} + ${o}][tileCol];`, a += `acc[i] = fma(BCached${o}, vec4<f32>(ACached[${o}]), acc[i]);`;
    return `
      for (var k = 0; k < ${s / e}; k++) {
        ${r}
        for (var i = 0; i < ${t}; i++) {
          let ACached = mm_Asub[tileRow + i][k];
          ${a}
        }
      }`;
  }
};
function Om(n, e, t = false, s = 32, r = false, a = 32, o = false) {
  const i = e[1] * n[1], u = e[0] * n[0], c = t ? i : s, l = t ? s : i, d = c / e[0], h = s / e[1], p = n[1], f = n[0];
  return $((t && d === 4 && n[1] === 4 || !t && (d === 3 || d === 4)) && c % e[0] === 0 && s % e[1] === 0 && n[0] === 4, () => `If transposeA ${t} is true, innerElementSize ${d} and workPerThread[1] ${n[1]} must be 4.
          Otherwise, innerElementSize ${d} must be 3 or 4.
      tileAWidth ${c} must be divisible by workgroupSize[0]${e[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${e[1]}. colPerThread ${n[0]} must be 4.`), `
  var<workgroup> mm_Asub : array<array<vec${d}<f32>, ${c / d}>, ${l}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${u / n[0]}>, ${s}>;

  ${le()} {
    let localRow = i32(localId.y);
    let tileRow = localRow * ${p};
    let tileCol = i32(localId.x);

    let globalRow = i32(globalId.y) * ${p};
    let globalCol = i32(globalId.x) * ${f};
    let batch = ${r ? "0" : "i32(globalId.z)"};
    let batchA = ${r || !o ? "batch" : "batch % uniforms.aShape[0]"};
    let batchB = ${r || !o ? "batch" : "batch % uniforms.bShape[0]"};
    let globalRowStart = i32(workgroupId.y) * ${i};

    let numTiles = ${r ? `${Math.ceil(a / s)}` : `(uniforms.dimInner - 1) / ${s} + 1`};
    var kStart = ${r ? `i32(globalId.z) * ${a}` : "0"};

    var acc: array<vec4<f32>, ${p}>;

    // Loop over shared dimension.
    let tileRowB = localRow * ${h};
    for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < ${p}; innerRow++) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            ${Cae(t, d)}
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${h}; innerRow++) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);
        }
        kStart = kStart + ${s};
        workgroupBarrier();

        // Compute acc values for a single thread.
        ${Iae(t, d, p, s)}
        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < ${p}; innerRow++) {
        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
    }
  }`;
}
const zC = (n) => n ? `
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol);
        ` : `
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRowStart + inputRow,
          kStart + inputCol);
        `, Sae = (n) => n ? "let ACached = mm_Asub[k][tileRow + innerRow];" : "let ACached = mm_Asub[tileRow + innerRow][k];";
function Pm(n, e, t = false, s = 32, r = false, a = 32, o = false, i = false) {
  const u = n[1] * e[1], c = n[0] * e[0], l = t ? u : s, d = t ? s : u;
  $(d % e[1] === 0 && l % e[0] === 0 && s % e[1] === 0, () => `tileAHight ${d} must be divisible by workgroupSize[1]${e[1]}, tileAWidth ${l} must be divisible by workgroupSize[0]${e[0]}, tileInner ${s} must be divisible by workgroupSize[1]${e[1]}`);
  const h = d / e[1], p = l / e[0], f = s / e[1], m = n[1], g = n[0], y = o ? `
      let localRow = i32(localId.y);
      let localCol = i32(localId.x);
      let globalRowStart = i32(workgroupId.y) * ${u};
      let globalColStart = i32(workgroupId.x) * ${c};

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var inputRow = localRow; inputRow < ${d}; inputRow = inputRow + ${e[1]}) {
          for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${e[0]}) {
            ${zC(t)}
          }
        }
        // Load one tile of B into local memory.
        for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${e[1]}) {
              for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${e[0]}) {
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
              kStart + inputRow,
              globalColStart + inputCol);
          }
        }
        kStart = kStart + ${s};
        workgroupBarrier();

        // Compute acc values for a single thread.
        var BCached : array<f32, ${g}>;
        for (var k = 0; k < ${s}; k++) {
          for (var inner = 0; inner < ${g}; inner++) {
            BCached[inner] = mm_Bsub[k][localCol + inner * ${e[0]}];
          }
          for (var innerRow = 0; innerRow < ${m}; innerRow++) {
            let ACached = ${t ? `mm_Asub[k][localRow + innerRow * ${e[1]}];` : `mm_Asub[localRow + innerRow * ${e[1]}][k];`}
            for (var innerCol = 0; innerCol < ${g}; innerCol++) {
              acc[innerRow][innerCol] =
                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
            }
          }
        }
        workgroupBarrier();
      }
      for (var innerRow = 0; innerRow < ${m}; innerRow++) {
        let gRow = globalRowStart + localRow + innerRow * ${e[1]};
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          let gCol = globalColStart + localCol + innerCol * ${e[0]};
          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
        }
      }
      ` : `
  let tileRow = i32(localId.y) * ${m};
  let tileCol = i32(localId.x) * ${g};

  let globalRow = i32(globalId.y) * ${m};
  let globalCol = i32(globalId.x) * ${g};
  let globalRowStart = i32(workgroupId.y) * ${u};

  let tileRowA = i32(localId.y) * ${h};
  let tileColA = i32(localId.x) * ${p};
  let tileRowB = i32(localId.y) * ${f};
  // Loop over shared dimension.
  for (var t = 0; t < numTiles; t++) {
    // Load one tile of A into local memory.
    for (var innerRow = 0; innerRow < ${h}; innerRow++) {
      for (var innerCol = 0; innerCol < ${p}; innerCol++) {
        let inputRow = tileRowA + innerRow;
        let inputCol = tileColA + innerCol;
        ${zC(t)}
      }
    }

    // Load one tile of B into local memory.
    for (var innerRow = 0; innerRow < ${f}; innerRow++) {
      for (var innerCol = 0; innerCol < ${g}; innerCol++) {
        let inputRow = tileRowB + innerRow;
        let inputCol = tileCol + innerCol;
        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
          kStart + inputRow,
          globalCol + innerCol);
      }
    }
    kStart = kStart + ${s};
    workgroupBarrier();

    // Compute acc values for a single thread.
    var BCached : array<f32, ${g}>;
    for (var k = 0; k < ${s}; k++) {
      for (var inner = 0; inner < ${g}; inner++) {
        BCached[inner] = mm_Bsub[k][tileCol + inner];
      }

      for (var innerRow = 0; innerRow < ${m}; innerRow++) {
        ${Sae(t)}
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] =
              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
        }
      }
    }

    workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < ${m}; innerRow++) {
    for (var innerCol = 0; innerCol < ${g}; innerCol++) {
      mm_write(batch, globalRow + innerRow, globalCol + innerCol,
          acc[innerRow][innerCol]);
    }
  }
  `;
  return `
    var<workgroup> mm_Asub : array<array<f32, ${l}>, ${d}>;
    var<workgroup> mm_Bsub : array<array<f32, ${c}>, ${s}>;

    ${le()} {
      let batch = ${r ? "0" : "i32(globalId.z)"};
      let batchA = ${r || !i ? "batch" : "batch % uniforms.aShape[0]"};
      let batchB = ${r || !i ? "batch" : "batch % uniforms.bShape[0]"};
      let numTiles = ${r ? `${Math.ceil(a / s)}` : `(uniforms.dimInner - 1) / ${s} + 1`};
      var kStart = ${r ? `i32(globalId.z) * ${a}` : "0"};

      var acc : array<array<f32, ${g}>, ${m}>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < ${m}; innerRow++) {
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] = 0.0;
        }
      }
      ${y}
    }
  `;
}
const vae = (n) => n ? `
      mm_readA(batchA, colA, globalRow),
      mm_readA(batchA, colA + 1, globalRow),
      mm_readA(batchA, colA + 2, globalRow),
      mm_readA(batchA, colA + 3, globalRow)
  ` : `
      mm_readA(batchA, globalRow, colA),
      mm_readA(batchA, globalRow, colA + 1),
      mm_readA(batchA, globalRow, colA + 2),
      mm_readA(batchA, globalRow, colA + 3)
  `;
function $ae(n, e = false) {
  $(n[1] === 1 && n[2] === 1, () => `A linear work group size is required. But got ${n}.`);
  const t = n[0] * 4;
  return `
    var<workgroup> mm_Asub : array<vec4<f32>, ${n[0]}>;

    ${le()} {
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / ${t} + 1;
      let batch = i32(globalId.z);
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        let colA = t * ${t} + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(${vae(e)});
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < ${t / 4}; k++) {
          let rowB = t * ${t} + k * 4;
          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),
                              mm_readB(batchB, rowB + 1, globalCol),
                              mm_readB(batchB, rowB + 2, globalCol),
                              mm_readB(batchB, rowB + 3, globalCol));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      mm_write(batch, globalRow, globalCol, acc);
    }
  `;
}
class kae {
  constructor(e, t, s = false, r = false, a = null, o = null, i = null, u = false) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.outputShape = t, this.dispatchLayout = { x: [2], y: [1], z: [0] };
    const c = s ? e[1] : e[2];
    if (this.isVec4 = (c % 4 === 0 && !s || t[1] % 4 === 0 && s) && t[2] % 4 === 0 && !r, this.outputComponent = this.isVec4 ? 4 : 1, this.isVectorA = t[1] === 1 && !s, !this.isVec4 && this.isVectorA) this.elementsPerThread = [1, 1, 1], this.workgroupSize = [32, 1, 1];
    else {
      const h = Zse(t[1], c, t[2], s);
      this.workgroupSize = h.workgroupSize, this.elementsPerThread = h.elementsPerThread;
    }
    this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread);
    const l = a != null, d = i != null;
    l && this.variableNames.push("bias"), d && this.variableNames.push("preluActivationWeights"), this.sequentialAccessByThreads = u, this.transposeA = s, this.transposeB = r, this.addBias = l, this.activation = o, this.hasPreluActivationWeights = d, [this.fitAOuter, this.fitBOuter, this.fitInner] = this.getShapeFit(t[1], t[2], c), this.shaderKey = `matMulPacked_${this.elementsPerThread}_${s}_${r}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`;
  }
  getShapeFit(e, t, s) {
    const r = this.workgroupSize[1] * this.elementsPerThread[1], a = this.workgroupSize[0] * this.elementsPerThread[0];
    !this.isVec4 && this.isVectorA ? this.tileInner = this.workgroupSize[0] * 4 : this.tileInner = a;
    const o = e % r === 0, i = t % a === 0, u = s % this.tileInner === 0;
    return [o, i, u];
  }
  getUserCode() {
    return `
      ${na(this.activation, this.hasPreluActivationWeights, this.isVec4)}
      ${S0(this.addBias, this.activation, false, this.transposeB, this.fitAOuter, this.fitBOuter, this.fitInner, this.isVec4 ? 4 : 1)}
      ${this.isVec4 ? Om(this.elementsPerThread, this.workgroupSize, this.transposeA, this.tileInner, false, null, true) : this.isVectorA ? $ae(this.workgroupSize, this.transposeA) : Pm(this.elementsPerThread, this.workgroupSize, this.transposeA, this.tileInner, false, null, this.sequentialAccessByThreads, true)}
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Nae(n) {
  return `
    var<workgroup> sumValues : array<f32, ${n}>;
    ${le()} {
      let coords = getOutputCoords();
      let batch = coords[0];
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + ${n}) {
        let dataA = mm_readA(batchA, row, k);
        let dataB = mm_readB(batchB, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = ${n / 2}u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `;
}
class Tae {
  constructor(e, t = false, s = false, r = null, a = null, o = null) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workgroupSize = [256, 1, 1], this.outputShape = e, this.dispatchLayout = { x: [], y: [1, 2], z: [0] }, this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize);
    const i = r != null, u = o != null;
    i && this.variableNames.push("bias"), u && this.variableNames.push("preluActivationWeights"), this.transposeA = t, this.transposeB = s, this.addBias = i, this.activation = a, this.hasPreluActivationWeights = u, this.shaderKey = `matMulReduce_${this.activation}_${t}_${s}`;
  }
  getUserCode() {
    return `
      ${na(this.activation, this.hasPreluActivationWeights)}
      ${S0(this.addBias, this.activation, this.transposeA, this.transposeB)}
      ${Nae(this.workgroupSize[0])}
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Rae(n) {
  const e = n[1], t = n[0], s = e > t ? e : t;
  return `
  var<workgroup> mm_Asub : array<array<f32, ${s}>, ${e}>;
  var<workgroup> mm_Bsub : array<array<f32, ${t}>, ${s}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Read data from global memory to registers firstly, then store them into
  // shared memory, so it is instruction-Level parallelism for arithmetic
  // operations and others handle IO operations between barrier api, makes ALU
  // and load/store units work simultaneously, could improves the performance.
  ${le()} {
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);
    let batch = i32(globalId.z);
    let batchA = batch % uniforms.aShape[0];
    let batchB = batch % uniforms.bShape[0];

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${s} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = 0;
    var regA = mm_readA(batchA, globalRow, globalColA);
    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
    globalColA = globalColA + ${s};
    globalRowB = globalRowB + ${s};

    for (var t = 0; t < numTiles; t = t + 1) {
      mm_Asub[tileRow][tileCol] = regA;
      mm_Bsub[2 * tileRow][tileCol] = regB0;
      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;

      workgroupBarrier();

      regA = mm_readA(batchA, globalRow, globalColA);
      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
      globalColA = globalColA + ${s};
      globalRowB = globalRowB + ${s};

      for (var k = 0; k < ${s}; k = k + 1) {
        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];
      }
      workgroupBarrier();
    }

    mm_write(batch, globalRow, globalCol, acc);
  }
  `;
}
class _ae {
  constructor(e, t, s, r = false, a = false, o = null, i = null, u = null) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workgroupSize = [16, 8, 1], this.outputShape = s, this.dispatchLayout = { x: [2], y: [1], z: [0] }, this.dispatch = [Math.ceil(s[2] / this.workgroupSize[0]), Math.ceil(s[1] / this.workgroupSize[1]), s[0]];
    const c = o != null;
    c && this.variableNames.push("bias");
    const l = u != null;
    l && this.variableNames.push("preluActivationWeights"), this.transposeA = r, this.transposeB = a, this.addBias = c, this.activation = i, this.hasPreluActivationWeights = l, this.shaderKey = `matMulSmallOutputSize_${this.activation}_${r}_${a}`;
  }
  getUserCode() {
    return `
      ${na(this.activation, this.hasPreluActivationWeights)}
      ${S0(this.addBias, this.activation, this.transposeA, this.transposeB)}
      ${Rae(this.workgroupSize)}
    `;
  }
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Eae {
  constructor(e, t, s = false, r = false) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workgroupSize = [8, 8, 1], this.atomic = true, this.splitedDimInner = 128, $(e[0] === 1, () => "MatMulSplitKProgram only supports batch = 1."), this.outputShape = e, this.dispatchLayout = { x: [2], y: [1], z: [0, 3] };
    const a = (s && this.outputShape[1] % 4 === 0 || !s && t % 4 === 0) && this.outputShape[2] % 4 === 0;
    this.elementsPerThread = [4, 4, this.splitedDimInner], this.outputComponent = a ? 4 : 1, a || (this.outputShape[1] < 16 && (this.elementsPerThread[1] = 1), this.outputShape[2] < 16 && (this.elementsPerThread[0] = 1)), this.dispatch = ce(this.dispatchLayout, [this.outputShape[0], this.outputShape[1], this.outputShape[2], t], this.workgroupSize, this.elementsPerThread), this.transposeA = s, this.transposeB = r, this.shaderKey = `matMulSplitK_${s}_${r}_${this.elementsPerThread}_${this.outputComponent}`;
  }
  getUserCode() {
    const e = this.outputComponent;
    return `
      ${zN(false, this.transposeB, false, false, false, e)}
      fn mm_write(batch: i32, row : i32, col : i32, value : ${He(e)}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
          let coords = vec3<i32>(batch, row, col);
          let flatIndex = getOutputIndexFromCoords(coords);
          // The problem is that we should initialize output to zero before using.
          // Otherwise, the original value will be added to the result.
          for (var i = 0; i < ${e}; i = i + 1) {
            ${si("&result[flatIndex + i]", `${e > 1 ? "value[i]" : "value"}`, "float32")}
          }
        }
      }
      ${e === 4 ? Om(this.elementsPerThread, this.workgroupSize, this.transposeA, 32, true, this.splitedDimInner) : Pm(this.elementsPerThread, this.workgroupSize, this.transposeA, 32, true, this.splitedDimInner)}
    `;
  }
}
class Dae {
  constructor(e, t = null, s = null, r = null) {
    this.uniforms = "", this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.addBias = t != null, this.hasPreluActivationWeights = r != null, this.activation = s, this.addBias && this.variableNames.push("bias"), this.hasPreluActivationWeights && this.variableNames.push("preluActivationWeights"), this.shaderKey = `biasActivation_${s}`;
  }
  getUserCode() {
    return `
    ${na(this.activation, this.hasPreluActivationWeights)}
    ${le("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        var value = getXByOutputIndex(index);
        ${ol(this.addBias, this.activation)}
        setOutputAtIndex(index, value);
      }
    }
    `;
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Aae {
  constructor(e) {
    this.variableNames = [], this.outputShape = [], this.uniforms = "value : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "fill";
  }
  getUserCode() {
    return `
    ${le("index")} {
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Un(n) {
  const { backend: e, attrs: t } = n, { shape: s, value: r } = t;
  let { dtype: a } = t;
  if (a = a || Vr(r), a === "string") {
    const o = Dt(a, A(s));
    return o.fill(r), e.makeTensorInfo(s, a, o);
  } else {
    const o = new Aae(s), i = [{ type: "float32", data: [r] }];
    return e.runWebGPUProgram(o, [], a, i);
  }
}
const Fae = { kernelName: Gl, backendName: "webgpu", kernelFunc: Un };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ce(n) {
  const { inputs: e, attrs: t } = n, { x: s } = e, { shape: r } = t, a = A(s.shape), o = Id(r, a), i = A(o);
  return $(a === i, () => `The new shape (${o}) has ${i} elements and the old shape (${s.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`), n.backend.incRef(s.dataId), { dataId: s.dataId, shape: o, dtype: s.dtype };
}
const Oae = { kernelName: Du, backendName: "webgpu", kernelFunc: Ce };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Lm({ a: n, b: e, transposeA: t, transposeB: s, backend: r, bias: a = null, preluActivationWeights: o = null, leakyreluAlpha: i = 0, activation: u = null }) {
  const c = n.shape.length, l = e.shape.length, d = t ? n.shape[c - 2] : n.shape[c - 1], h = s ? e.shape[l - 1] : e.shape[l - 2], p = t ? n.shape[c - 1] : n.shape[c - 2], f = s ? e.shape[l - 2] : e.shape[l - 1], m = n.shape.slice(0, -2), g = e.shape.slice(0, -2), y = A(m), b = A(g), w = Re(n.shape.slice(0, -2), e.shape.slice(0, -2)).concat([p, f]);
  $(d === h, () => `Error in matMul: inner shapes (${d}) and (${h}) of Tensors with shapes ${n.shape} and ${e.shape} and transposeA=${t} and transposeB=${s} must match.`);
  const C = t ? [y, d, p] : [y, p, d], v = s ? [b, f, h] : [b, h, f], k = Ce({ inputs: { x: n }, backend: r, attrs: { shape: C } }), R = Ce({ inputs: { x: e }, backend: r, attrs: { shape: v } }), N = [k, R], T = Math.max(y, b), S = [k, R], E = [{ type: "int32", data: [p] }, { type: "int32", data: [f] }, { type: "int32", data: [d] }];
  let P, M;
  const L = [T, p, f];
  let V = U().get("WEBGPU_MATMUL_PROGRAM_TYPE");
  if (V < 0) {
    const G = U().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"), K = G > 0 ? G : r.thresholdToIncreaseWorkgroups, X = T * Math.ceil(p / 32) * Math.ceil(f / 32);
    X <= K || p <= 8 && X <= K * 2 ? T * p * f <= 128 ? V = lr.MatMulReduceProgram : T === 1 && h >= 2e3 ? V = lr.MatMulSplitKProgram : V = lr.MatMulSmallOutputSizeProgram : V = lr.MatMulPackedProgram;
  }
  switch (V) {
    case lr.MatMulReduceProgram:
      P = new Tae(L, t, s, a, u, o);
      break;
    case lr.MatMulSplitKProgram: {
      if (M = Un({ backend: r, attrs: { shape: L, value: 0, dtype: n.dtype } }), P = new Eae(L, h, t, s), a || u) {
        M = r.runWebGPUProgram(P, S, n.dtype, E, M);
        const K = new Dae(M.shape, a, u, o);
        let X = null;
        const Z = [M];
        a && Z.push(a), o && Z.push(o), u === "leakyrelu" && (X = [{ type: "float32", data: [i] }], K.uniforms += " alpha : f32,");
        const ee = r.runWebGPUProgram(K, Z, M.dtype, X);
        N.push(M);
        const J = Ce({ inputs: { x: ee }, backend: r, attrs: { shape: w } });
        N.push(ee);
        for (const re of N) r.disposeData(re.dataId);
        return J;
      }
      break;
    }
    case lr.MatMulSmallOutputSizeProgram:
      P = new _ae(C, v, L, t, s, a, u, o);
      break;
    case lr.MatMulPackedProgram:
      const G = r.adapterInfo.isIntel();
      P = new kae(C, L, t, s, a, u, o, G);
      break;
    default:
      throw new Error(`Unsupported MatMulProgramType ${V}.`);
  }
  a && S.push(a), o && S.push(o), u === "leakyrelu" && (E.push({ type: "float32", data: [i] }), P.uniforms += " alpha : f32,"), M = r.runWebGPUProgram(P, S, n.dtype, E, M);
  const q = Ce({ inputs: { x: M }, backend: r, attrs: { shape: w } });
  N.push(M);
  for (const G of N) r.disposeData(G.dataId);
  return q;
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Pae(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: a, bias: o, preluActivationWeights: i } = e, { transposeA: u, transposeB: c, activation: l, leakyreluAlpha: d } = s;
  return Lm({ a: r, b: a, transposeA: u, transposeB: c, backend: t, bias: o, preluActivationWeights: i, leakyreluAlpha: d, activation: l });
}
const Lae = { kernelName: ba, backendName: "webgpu", kernelFunc: Pae };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class MC {
  constructor(e, t, s) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.workgroupSize = [128, 1, 1], this.size = true, this.outputShape = Re(t, s), this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = `binaryOpComplex_${e}`, this.op = e;
  }
  getUserCode() {
    return `
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${I0(this.op, false)}
      }

      ${le("index")} {
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class tf {
  constructor(e, t, s) {
    if (this.size = true, this.variableNames = ["A", "B"], this.outputShape = Re(t, s), this.dispatchLayout = ye(this.outputShape), this.op = e, this.useSharedMemoryWithA = t.length <= 1 && s.length > 1 && t[0] < 128, this.useSharedMemoryWithB = s.length <= 1 && t.length > 1 && s[0] < 128, this.useSharedMemoryWithA || this.useSharedMemoryWithB) this.outputComponent = 1, this.variableComponents = [1, 1], this.lastDimensionSize = this.useSharedMemoryWithB ? s[0] : t[0], this.shaderKey = `binary_${e}_${this.lastDimensionSize}`, this.type = "shared", this.workgroupSize = [256, 1, 1];
    else {
      const r = t.length > 0 && t[t.length - 1] % 4 === 0, a = s.length > 0 && s[s.length - 1] % 4 === 0;
      r && a ? (this.outputComponent = 4, this.variableComponents = [4, 4]) : r && (pg(s) || s[s.length - 1] === 1) || a && (pg(t) || t[t.length - 1] === 1) ? (this.outputComponent = 4, this.variableComponents = r ? [4, 1] : [1, 4]) : (this.outputComponent = 1, this.variableComponents = [1, 1]), this.type = "nonshared", this.shaderKey = `binary_${e}_${this.variableComponents}`, this.workgroupSize = [128, 1, 1];
    }
    this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.outputComponent, 1, 1]);
  }
  getUserCode() {
    let e;
    const t = this.outputComponent === 4 ? "vec4<f32>" : "f32", s = `
    fn binaryOperation(a : ${t}, b : ${t}) -> ${t} {
      ${I0(this.op, this.outputComponent === 4)}
    };
    `;
    if (this.type === "shared") {
      const r = this.lastDimensionSize > 1 ? `coords[${this.outputShape.length - 1}]` : "0", a = this.useSharedMemoryWithB ? `let a = getAByOutputIndex(index);
          let b = sharedBuf[${r}];` : `let a = sharedBuf[${r}];
          let b = getBByOutputIndex(index);`;
      e = `
        ${s}
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${le("index")} {
          // Fill in the shared memory buffer.
          let localIndex = i32(localId.x);
          if(localIndex < ${this.lastDimensionSize}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB ? "B" : "A"}[localIndex]);
          }
          workgroupBarrier();

          if(index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            ${a}
            setOutputAtIndex(index, binaryOperation(a, b));
          }
        }
        `;
    } else e = `
       ${s}
       ${le("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index * ${this.outputComponent});
           let a = ${t}(getAByOutputCoords(coords));
           let b = ${t}(getBByOutputCoords(coords));
           setOutputAtIndex(index, binaryOperation(a, b));
         }
       }
       `;
    return e;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function us(n) {
  const { inputs: e } = n, { x: t } = e;
  return n.backend.incRef(t.dataId), { dataId: t.dataId, shape: t.shape, dtype: t.dtype };
}
const zae = { kernelName: oo, backendName: "webgpu", kernelFunc: us };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function il(n) {
  const { inputs: e, backend: t } = n, { real: s, imag: r } = e, a = t.makeTensorInfo(s.shape, "complex64"), o = t.tensorMap.get(a.dataId), i = us({ inputs: { x: s }, backend: t }), u = us({ inputs: { x: r }, backend: t });
  return o.complexTensorInfos = { real: i, imag: u }, a;
}
const Mae = { kernelName: Sd, backendName: "webgpu", kernelFunc: il };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Tc {
  constructor(e, t, s = "") {
    this.variableNames = ["A"], this.size = true;
    const r = 128;
    this.workgroupSize = [r, 1, 1], this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.op = t, s !== "" && (this.uniforms = s), this.shaderKey = `unary_${t}`;
  }
  getUserCode() {
    return `
      fn unaryOperation(a : f32) -> f32 {
        ${pi(this.op, false)}
      }
      ${le("index")} {
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function st({ opType: n, cpuKernelImpl: e, dtype: t }) {
  return ({ inputs: s, backend: r }) => {
    const { x: a } = s, o = r, i = t || a.dtype;
    if (o.shouldExecuteOnCPU([a]) && e != null) {
      const c = o.tensorMap.get(a.dataId), l = e(c.values, i);
      return o.makeTensorInfo(a.shape, i, l);
    }
    const u = new Tc(a.shape, n);
    return o.runWebGPUProgram(u, [a], i);
  };
}
function dn({ opType: n, cpuKernelImpl: e, supportsComplex: t = false, dtype: s }) {
  return ({ inputs: r, backend: a }) => {
    const { a: o, b: i } = r, u = a;
    if (t && o.dtype === "complex64") {
      const d = u.tensorMap.get(o.dataId), h = u.tensorMap.get(i.dataId);
      let p, f;
      if (n !== Ae.MUL) [p, f] = [[d.complexTensorInfos.real, h.complexTensorInfos.real], [d.complexTensorInfos.imag, h.complexTensorInfos.imag]].map((g) => {
        const [y, b] = g, x = { dataId: y.dataId, dtype: y.dtype, shape: o.shape }, w = { dataId: b.dataId, dtype: b.dtype, shape: i.shape }, C = new tf(n, o.shape, i.shape);
        return u.runWebGPUProgram(C, [x, w], tn(y.dtype, b.dtype));
      });
      else {
        const g = new MC(Ae.COMPLEX_MULTIPLY_REAL, o.shape, i.shape), y = new MC(Ae.COMPLEX_MULTIPLY_IMAG, o.shape, i.shape), b = [{ dataId: d.complexTensorInfos.real.dataId, dtype: d.complexTensorInfos.real.dtype, shape: o.shape }, { dataId: d.complexTensorInfos.imag.dataId, dtype: d.complexTensorInfos.imag.dtype, shape: o.shape }, { dataId: h.complexTensorInfos.real.dataId, dtype: h.complexTensorInfos.real.dtype, shape: i.shape }, { dataId: h.complexTensorInfos.imag.dataId, dtype: h.complexTensorInfos.imag.dtype, shape: i.shape }];
        p = u.runWebGPUProgram(g, b, "float32"), f = u.runWebGPUProgram(y, b, "float32");
      }
      const m = il({ inputs: { real: p, imag: f }, backend: u });
      return u.disposeData(p.dataId), u.disposeData(f.dataId), m;
    }
    const c = s || tn(o.dtype, i.dtype);
    if ((o.dtype === "string" || i.dtype === "string" || u.shouldExecuteOnCPU([o, i])) && e != null) {
      const d = u.tensorMap.get(o.dataId).values, h = u.tensorMap.get(i.dataId).values, p = o.dtype === "string" ? Zs(d) : d, f = o.dtype === "string" ? Zs(h) : h, [m, g] = e(o.shape, i.shape, p, f, c);
      return u.makeTensorInfo(g, c, m);
    }
    const l = new tf(n, o.shape, i.shape);
    return u.runWebGPUProgram(l, [o, i], c);
  };
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const { addImpl: Bae, castImpl: Wae, ceilImpl: Vae, concatImpl: Uae, equalImpl: Gae, expImpl: Hae, expm1Impl: jae, floorImpl: qae, floorDivImpl: Kae, gatherNdImpl: Xae, gatherV2Impl: Yae, greaterEqualImpl: Qae, greaterImpl: Zae, lessEqualImpl: Jae, lessImpl: eoe, logImpl: toe, maxImpl: noe, maximumImpl: soe, minimumImpl: roe, multiplyImpl: aoe, negImpl: ooe, notEqualImpl: ioe, prodImpl: uoe, rangeImpl: loe, rsqrtImpl: coe, scatterImpl: doe, simpleAbsImpl: hoe, sliceImpl: poe, stridedSliceImpl: foe, stringNGramsImpl: moe, subImpl: goe, tileImpl: yoe, topKImpl: boe, transposeImpl: xoe } = s0;
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const woe = st({ opType: ie.ABS, cpuKernelImpl: hoe }), Coe = { kernelName: Yi, backendName: "webgpu", kernelFunc: woe };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ioe = st({ opType: ie.ACOS }), Soe = { kernelName: Ea, backendName: "webgpu", kernelFunc: Ioe };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const voe = st({ opType: ie.ACOSH }), $oe = { kernelName: Da, backendName: "webgpu", kernelFunc: voe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const koe = dn({ opType: Ae.ADD, cpuKernelImpl: Bae, supportsComplex: true }), Noe = { kernelName: Ur, backendName: "webgpu", kernelFunc: koe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Toe {
  constructor(e) {
    this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e[0], this.variableNames = e.map((t, s) => `T${s}`), this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.shaderKey = "addN";
  }
  getUserCode() {
    const e = [];
    this.variableNames.forEach((r) => {
      e.push(`let v${r} = get${r}ByOutputCoords(coords);`);
    });
    const t = this.variableNames.map((r) => `v${r}`).join(" + ");
    return `
      ${le("index")} {
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${e.join(`
        `)}
            setOutputAtIndex(flatIndex, ${t});
          }
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Roe(n) {
  const { inputs: e, backend: t } = n, s = e;
  if (s.length === 1) return us({ inputs: { x: s[0] }, backend: t });
  const r = s.map((i) => i.dtype).reduce((i, u) => tn(i, u)), a = s.map((i) => i.shape), o = new Toe(a);
  return t.runWebGPUProgram(o, s, r);
}
const _oe = { kernelName: Aa, backendName: "webgpu", kernelFunc: Roe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Eoe {
  constructor(e, t) {
    this.variableNames = ["A"], this.workgroupSize = [16, 16, 1];
    const s = new Array(e.length);
    for (let r = 0; r < s.length; r++) s[r] = e[t[r]];
    this.outputShape = s, this.dispatchLayout = { x: [0], y: [1] }, this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, [1, 1, 1]), this.shaderKey = "transposeShared";
  }
  getUserCode() {
    $(this.workgroupSize[0] === this.workgroupSize[1], () => `Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);
    const e = this.workgroupSize[0];
    return `
      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0] + 1}>, ${this.workgroupSize[0]}>;
      ${le()} {
        var x = i32(workgroupId.x) * ${e} + i32(localId.x);
        var y = i32(workgroupId.y) * ${e} + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = f32(A[y * width + x]);
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * ${e} + i32(localId.x);
        y = i32(workgroupId.x) * ${e} + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Doe {
  constructor(e, t) {
    this.variableNames = ["A"], this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true;
    const s = new Array(e.length);
    for (let r = 0; r < s.length; r++) s[r] = e[t[r]];
    this.outputShape = s, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.newDim = t, this.shaderKey = `transpose_${t}`;
  }
  getUserCode() {
    const e = Pt(this.outputShape.length), t = MN(this.newDim);
    return `
      ${le("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${e}(${t}), uniforms.aShape)]);
          }
        }
      }
    `;
  }
}
function MN(n) {
  const e = n.length;
  if (e > 6) throw Error(`Transpose for rank ${e} is not yet supported`);
  const t = new Array(e);
  for (let s = 0; s < n.length; s++) t[n[s]] = `coords.${Or(s)}`;
  return t.join();
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ir(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { perm: a } = s, o = t, i = r.shape.length, u = new Array(i);
  for (let l = 0; l < u.length; l++) u[l] = r.shape[a[l]];
  if (t.shouldExecuteOnCPU([r])) {
    const d = o.tensorMap.get(r.dataId).values, h = xoe(d, r.shape, r.dtype, a, u);
    return t.makeTensorInfo(u, r.dtype, h);
  }
  if (r.shape.length === 2 && Be(a, [1, 0])) {
    const l = new Eoe(r.shape, a);
    return o.runWebGPUProgram(l, [r], r.dtype);
  }
  const c = new Doe(r.shape, a);
  return o.runWebGPUProgram(c, [r], r.dtype);
}
const Aoe = { kernelName: fr, backendName: "webgpu", kernelFunc: Ir };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Foe {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.uniforms = "reduceSize : i32,", this.size = true, this.inputShape = [e.batchSize, e.inSize];
    const [r] = xt(this.inputShape, [1]);
    this.outputShape = r.length === 0 ? [1] : r, e.inSize >= 32768 && s >= 512 ? this.workgroupSize = [512, 1, 1] : e.inSize >= 4096 ? this.workgroupSize = [256, 1, 1] : this.workgroupSize = [64, 1, 1], this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, [1, 1, 1]), this.reduceType = t, this.shaderKey = `reduce_${t}`;
  }
  getUserCode() {
    let e = "", t = "0.0";
    const s = this.workgroupSize[0];
    this.reduceType === "min" || this.reduceType === "max" ? (e = `
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${this.reduceType === "min" ? "<" : ">"} bestValue)
           {  bestValue = candidate; }`, t = "f32(x[offset])") : this.reduceType === "sum" || this.reduceType === "mean" ? e = " bestValue = bestValue + candidate; " : this.reduceType === "prod" ? (e = " bestValue = bestValue * candidate; ", t = "1.0") : this.reduceType === "all" ? (e = " bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ", t = "1.0") : this.reduceType === "any" && (e = " bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ", t = "0.0");
    const r = this.reduceType === "mean" ? "setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));" : "setOutputAtIndex(outputIndex, bestValue);";
    return `
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${`
         var<workgroup> xBestValues : array<f32, ${s}>;
       `}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${this.outputShape.length === 1 ? "outputCoords" : "outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${le("index")} {
         let outputIndex = index / ${s};
         let offset = getOffset(outputIndex);
         var bestValue = ${t};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), ${s}u);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + ${s}) {
           let candidate = f32(x[offset + k]);
           ${e}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), ${s}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${e}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${r}
        }
       }
     `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ooe = { mean: "float32", all: "bool", any: "bool" };
function ul(n, e, t, s, r) {
  const a = n.shape.length, o = [], i = Ee(e, n.shape);
  let u = i;
  const c = ct(u, a);
  let l = n;
  c != null && (l = Ir({ inputs: { x: n }, attrs: { perm: c }, backend: r }), u = it(u.length, a), o.push(l)), mt(s, u, a);
  const [d, h] = xt(l.shape, u);
  let p = d;
  t && (p = ft(d, i));
  let f;
  if ((s === "max" || s === "prod") && r.shouldExecuteOnCPU([l])) {
    const m = r.tensorMap.get(l.dataId).values;
    switch (s) {
      case "max":
        const g = noe(m, A(h), p, n.dtype);
        f = r.makeTensorInfo(p, n.dtype, g);
        break;
      case "prod":
        const { outVals: y, outShape: b, outDtype: x } = uoe(l.shape, l.dtype, m, u);
        f = r.makeTensorInfo(b, x, y);
        break;
      default:
        throw new Error(`${s} CPU implementation is not yet supported.`);
    }
  } else {
    const m = A(h), y = A(l.shape) / m, b = { windowSize: m, inSize: m, batchSize: y, outSize: 1 }, x = Ooe[s] || Md(n.dtype), w = [{ type: "int32", data: [m] }], C = new Foe(b, s, r.device.limits.maxComputeWorkgroupSizeX), v = r.runWebGPUProgram(C, [l], x, w);
    o.push(v), f = Ce({ inputs: { x: v }, attrs: { shape: p }, backend: r });
  }
  return o.forEach((m) => r.disposeData(m.dataId)), f;
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Poe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { keepDims: a, axis: o } = s;
  return ul(r, o, a, "all", t);
}
const Loe = { kernelName: Qi, backendName: "webgpu", kernelFunc: Poe };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function zoe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { keepDims: a, axis: o } = s;
  return ul(r, o, a, "any", t);
}
const Moe = { kernelName: Zi, backendName: "webgpu", kernelFunc: zoe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class BN {
  constructor(e, t, s) {
    this.workgroupSize = [64, 1, 1], this.variableNames = ["x"], this.uniforms = "infinityValue : f32,", this.size = true;
    const r = [t];
    this.op = s === "min" ? "<" : ">";
    const [a, o] = xt(e, r);
    this.outputShape = a.length === 0 ? [1] : a, this.dispatchLayout = ye(this.outputShape), A(o) < 32 ? (this.type = "plain", this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize)) : (this.type = "shared", this.dispatch = ce(this.dispatchLayout, this.outputShape, [1, 1, 1])), this.inputShape = e, this.shaderKey = `argMinMax_${this.op}_${this.type}`;
  }
  getUserCode() {
    const e = this.workgroupSize[0], t = () => this.inputShape.length === 1 ? "uniforms.xShape" : `uniforms.xShape.${Or(this.inputShape.length - 1)}`, s = () => {
      let r = "";
      if (this.outputShape.length === 1) this.inputShape.length !== 1 && (r += "outputCoords,");
      else for (let a = 0; a < this.outputShape.length; a++) r += `outputCoords.${Or(a)},`;
      return r;
    };
    return this.type === "shared" ? `
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${`
      var<workgroup> xBestIndices : array<i32, ${e}>;
      var<workgroup> xBestValues : array<f32, ${e}>;
    `}

      ${le("index")} {
        let outputIndex = index / ${e};
        let reduceLength = ${t()};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;
        let outputCoords = getCoordsFromIndex(outputIndex);
        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;
            k = k + ${e}) {
          let candidate = getX(${s()} k);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(reduceLength), ${e}u);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    ` : `
      ${le("index")} {
        if (index < uniforms.size) {
          let outputCoords = getCoordsFromIndex(index);
          var bestIndex = 0;
          var bestValue = getX(${s()} 0);
          let reduceLength = ${t()};
          for (var i = 1; i < reduceLength; i++) {
            let candidate = getX(${s()} i);
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              bestIndex = i;
            }
          }
          setOutputAtIndexI32(index, bestIndex);
        }
      }
      `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Boe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a } = s;
  let o = Ee(a, r.shape);
  const i = ct(o, r.shape.length);
  let u = r;
  const c = [];
  i != null && (u = Ir({ inputs: { x: r }, backend: t, attrs: { perm: i } }), c.push(u), o = it(o.length, u.shape.length)), mt("argMax", [o[0]], u.shape.length);
  const l = new BN(u.shape, o[0], "max"), d = [{ type: "float32", data: [Number.NEGATIVE_INFINITY] }], h = t.runWebGPUProgram(l, [u], "int32", d);
  return c.forEach((p) => t.disposeData(p.dataId)), h;
}
const Woe = { kernelName: Ji, backendName: "webgpu", kernelFunc: Boe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Voe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a } = s;
  let o = Ee(a, r.shape);
  const i = ct(o, r.shape.length);
  let u = r;
  const c = [];
  i != null && (u = Ir({ inputs: { x: r }, backend: t, attrs: { perm: i } }), c.push(u), o = it(o.length, u.shape.length)), mt("argMin", [o[0]], u.shape.length);
  const l = new BN(u.shape, o[0], "min"), d = [{ type: "float32", data: [Number.POSITIVE_INFINITY] }], h = t.runWebGPUProgram(l, [u], "int32", d);
  return c.forEach((p) => t.disposeData(p.dataId)), h;
}
const Uoe = { kernelName: eu, backendName: "webgpu", kernelFunc: Voe };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Goe = st({ opType: ie.ASIN }), Hoe = { kernelName: Fa, backendName: "webgpu", kernelFunc: Goe };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const joe = st({ opType: ie.ASINH }), qoe = { kernelName: Oa, backendName: "webgpu", kernelFunc: joe };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Koe = st({ opType: ie.ATAN }), Xoe = { kernelName: Pa, backendName: "webgpu", kernelFunc: Koe };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Yoe = dn({ opType: Ae.ATAN2 }), Qoe = { kernelName: za, backendName: "webgpu", kernelFunc: Yoe };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Zoe = st({ opType: ie.ATANH }), Joe = { kernelName: La, backendName: "webgpu", kernelFunc: Zoe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class eie {
  constructor(e) {
    this.variableNames = ["x"], this.uniforms = "strides : vec2<i32>,", this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = e.outShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "poolWithFilterSizeEqualsOne";
  }
  getUserCode() {
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.strides;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class bd {
  constructor(e, t, s = false, r = false, a = false) {
    if (this.variableNames = ["x"], this.uniforms = "strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,", this.workgroupSize = [128, 1, 1], this.size = true, t === "avg" && s) throw new Error("Cannot compute positions for average pool.");
    this.outputShape = e.outShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.poolType = t, this.computePositions = s, this.flattenPositions = r, this.includeBatchIndex = a, this.shaderKey = `pool2D_${t}_${s}_${r}_${a}`;
  }
  getUserCode() {
    let e;
    this.poolType === "avg" ? e = "resultValue = resultValue + value; count = count + 1.0;" : this.computePositions ? e = `let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${this.flattenPositions ? this.includeBatchIndex ? "((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d" : "(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d" : "wR * uniforms.filterDims.y + wC"};
      }` : e = "resultValue = max(value, resultValue);";
    let t = "resultValue";
    return this.poolType === "avg" && (t = "resultValue / max(count, 1.0)"), `
      ${le("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          ${this.computePositions ? `var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;` : `var resultValue = ${this.poolType === "avg" ? "0.0" : "-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, d);
              ${e}
            }
          }

          ${this.computePositions ? "setOutputAtIndexI32(index, maxPosition);" : `setOutputAtIndex(index, ${t});`}
        }
      }
    `;
  }
}
class v0 {
  constructor(e, t, s = false, r = false, a = false) {
    if (this.variableNames = ["x"], this.uniforms = "strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,", this.workgroupSize = [128, 1, 1], this.size = true, t === "avg" && s) throw new Error("Cannot compute positions for average pool.");
    this.outputShape = e.outShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.poolType = t, this.computePositions = s, this.flattenPositions = r, this.includeBatchIndex = a, this.shaderKey = `pool3D_${t}_${s}_${r}_${a}`;
  }
  getUserCode() {
    let e;
    this.poolType === "avg" ? e = "resultValue += value; count += 1.0;" : this.computePositions ? e = `let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${this.flattenPositions ? this.includeBatchIndex ? "(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch" : "((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch" : "wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC"};
      }` : e = "resultValue = max(value, resultValue);";
    let t = "resultValue";
    return this.poolType === "avg" && (t = "resultValue / max(count, 1.0)"), `
      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords.x;
          let ch = coords.u;

          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
          let xDCorner = xCorner.x;
          let xRCorner = xCorner.y;
          let xCCorner = xCorner.z;

          ${this.computePositions ? `var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;` : `var resultValue = ${this.poolType === "avg" ? "0.0" : "-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {
            let xD = xDCorner + wD;
            if (xD < 0 || xD >= uniforms.convDims.x) {
              continue;
            }

            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {
              let xR = xRCorner + wR;
              if (xR < 0 || xR >= uniforms.convDims.y) {
                continue;
              }

              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {
                let xC = xCCorner + wC;
                if (xC < 0 || xC >= uniforms.convDims.z) {
                  continue;
                }

                let value = getX(batch, xD, xR, xC, ch);
                ${e}
              }
            }
          }

          ${this.computePositions ? "setOutputAtIndexI32(index, maxPosition);" : `setOutputAtIndex(index, ${t});`}
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function WN(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { reductionIndices: a, keepDims: o } = s;
  return ul(r, a, o, "max", t);
}
const tie = { kernelName: mo, backendName: "webgpu", kernelFunc: WN };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function VN(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { keepDims: a, axis: o } = s;
  return ul(r, o, a, "mean", t);
}
const nie = { kernelName: bo, backendName: "webgpu", kernelFunc: VN };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function UN(n, e, t, s) {
  if (e.filterWidth === 1 && e.filterHeight === 1 && Be(e.inShape, e.outShape)) return us({ inputs: { x: n }, backend: s });
  if (e.filterWidth === e.inWidth && e.filterHeight === e.inHeight && e.batchSize === 1 && e.padInfo.type === "VALID") {
    const o = n.shape.length, i = Ce({ inputs: { x: n }, backend: s, attrs: { shape: [n.shape[o - 3] * n.shape[o - 2], n.shape[o - 1]] } });
    let u;
    t === "avg" ? u = VN({ inputs: { x: i }, backend: s, attrs: { axis: 0, keepDims: false } }) : ($(t === "max", () => `Invalid pool type ${t}`), u = WN({ inputs: { x: i }, backend: s, attrs: { reductionIndices: 0, keepDims: false } }));
    const c = Ce({ inputs: { x: u }, backend: s, attrs: { shape: e.outShape } });
    return s.disposeData(i.dataId), s.disposeData(u.dataId), c;
  }
  let r;
  const a = [{ type: "int32", data: [e.strideHeight, e.strideWidth] }];
  return e.filterHeight === 1 && e.filterWidth === 1 ? r = new eie(e) : (t === "avg" ? r = new bd(e, "avg") : ($(t === "max", () => `Invalid pool type ${t}`), r = new bd(e, "max")), a.push({ type: "int32", data: [e.padInfo.top, e.padInfo.left] }, { type: "int32", data: [e.dilationHeight, e.dilationWidth] }, { type: "int32", data: [e.inHeight, e.inWidth] }, { type: "int32", data: [e.effectiveFilterHeight, e.effectiveFilterWidth] })), s.runWebGPUProgram(r, [n], n.dtype, a);
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sie(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: a, strides: o, pad: i, dimRoundingMode: u } = s, l = zt(r.shape, a, o, 1, i, u);
  return UN(r, l, "avg", t);
}
const rie = { kernelName: Ma, backendName: "webgpu", kernelFunc: sie };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function aie(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: a, strides: o, pad: i, dataFormat: u, dimRoundingMode: c } = s, l = [1, 1, 1], d = Sn(r.shape, a, o, l, i, c, u), h = new v0(d, "avg"), p = [{ type: "int32", data: [d.strideDepth, d.strideHeight, d.strideWidth] }, { type: "int32", data: [d.padInfo.front, d.padInfo.top, d.padInfo.left] }, { type: "int32", data: [d.inDepth, d.inHeight, d.inWidth] }, { type: "int32", data: [d.effectiveFilterDepth, d.effectiveFilterHeight, d.effectiveFilterWidth] }];
  return t.runWebGPUProgram(h, [r], r.dtype, p);
}
const oie = { kernelName: tu, backendName: "webgpu", kernelFunc: aie };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class iie {
  constructor(e) {
    this.variableNames = ["dy"], this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, avgMultiplier : f32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.inShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "avgPool2DBackprop";
  }
  getUserCode() {
    return `
      ${le("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);

            dotProd = dotProd + dyValue * uniforms.avgMultiplier;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
}
class uie {
  constructor(e) {
    this.variableNames = ["dy"], this.uniforms = `strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.inShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "avgPool3DBackprop";
  }
  getUserCode() {
    return `
      ${le("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              dotProd += dyValue * uniforms.avgMultiplier;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function lie(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, o = a, { filterSize: i, strides: u, pad: c, dimRoundingMode: l } = s, d = Sn(o.shape, i, u, 1, c, l), h = new uie(d), p = 1 / (d.filterDepth * d.filterHeight * d.filterWidth), f = [{ type: "int32", data: [d.strideDepth, d.strideHeight, d.strideWidth] }, { type: "int32", data: [d.effectiveFilterDepth - 1 - d.padInfo.front, d.effectiveFilterHeight - 1 - d.padInfo.top, d.effectiveFilterWidth - 1 - d.padInfo.left] }, { type: "int32", data: [d.effectiveFilterDepth, d.effectiveFilterHeight, d.effectiveFilterWidth] }, { type: "int32", data: [d.outDepth] }, { type: "int32", data: [d.outHeight] }, { type: "int32", data: [d.outWidth] }, { type: "float32", data: [p] }];
  return t.runWebGPUProgram(h, [r], o.dtype, f);
}
const cie = { kernelName: zl, backendName: "webgpu", kernelFunc: lie };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function die(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, o = a;
  LN([r, a], "avgPoolGrad");
  const { filterSize: i, strides: u, pad: c } = s, l = zt(o.shape, i, u, 1, c), d = new iie(l), h = 1 / (l.filterHeight * l.filterWidth), p = [{ type: "int32", data: [l.strideHeight, l.strideWidth] }, { type: "int32", data: [l.effectiveFilterHeight - 1 - l.padInfo.top, l.effectiveFilterWidth - 1 - l.padInfo.left] }, { type: "int32", data: [l.dilationHeight, l.dilationWidth] }, { type: "int32", data: [l.effectiveFilterHeight, l.effectiveFilterWidth] }, { type: "int32", data: [l.outHeight] }, { type: "int32", data: [l.outWidth] }, { type: "float32", data: [h] }];
  return t.runWebGPUProgram(d, [r], o.dtype, p);
}
const hie = { kernelName: Ll, backendName: "webgpu", kernelFunc: die };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function pie(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: a } = e, { transposeA: o, transposeB: i } = s;
  return Lm({ a: r, b: a, transposeA: o, transposeB: i, backend: t });
}
const fie = { kernelName: Ba, backendName: "webgpu", kernelFunc: pie };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class mie {
  constructor(e, t) {
    this.variableNames = ["source"], this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t, this.rank = t.length, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.start = e, this.uniforms = `start : ${Pt(e.length)}, `, this.shaderKey = "slice";
  }
  getUserCode() {
    const e = Pt(this.rank), t = gie(this.rank);
    let s;
    return this.start.length === 1 ? s = this.outputShape.map((a, o) => "sourceLoc = uniforms.start + coords;") : s = this.outputShape.map((a, o) => `sourceLoc.${ly[o]} = uniforms.start.${Or(o)} + coords.${ly[o]};`), `
      ${le("index")} {
        if (index < uniforms.size) {
          var sourceLoc : ${e};
          let coords = getCoordsFromIndex(index);
          ${s.join(`
`)}
          setOutputAtIndex(index, getSource(${t}));
        }
      }
    `;
  }
}
const ly = ["x", "y", "z", "w", "u", "v"];
function gie(n) {
  if (n === 1) return "sourceLoc";
  if (n <= 6) return ly.slice(0, n).map((e) => `sourceLoc.${e}`).join(",");
  throw Error(`Slicing for rank ${n} is not yet supported`);
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Rc(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { begin: a, size: o } = s, [i, u] = hc(r, a, o);
  if (qf(r, i, u), t.shouldExecuteOnCPU([r]) || r.dtype === "string") {
    const d = t.tensorMap.get(r.dataId), h = poe(d.values, i, u, r.shape, r.dtype);
    return t.makeTensorInfo(u, r.dtype, h);
  }
  if (A(u) === 0) return t.makeTensorInfo(u, r.dtype, []);
  const c = new mie(i, u), l = [{ type: "int32", data: i }];
  return t.runWebGPUProgram(c, [r], r.dtype, l);
}
const yie = { kernelName: Mu, backendName: "webgpu", kernelFunc: Rc };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bie = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: a, crops: o } = s;
  $(r.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");
  const i = a.reduce((b, x) => b * x), u = Zr(r.shape, a, i), c = Jr(u.length, a.length), l = ea(r.shape, a, i), d = dh(o, a.length), h = hh(l, o, a.length), p = [], f = Ce({ inputs: { x: r }, backend: t, attrs: { shape: u } }), m = Ir({ inputs: { x: f }, backend: t, attrs: { perm: c } }), g = Ce({ inputs: { x: m }, backend: t, attrs: { shape: l } }), y = Rc({ inputs: { x: g }, backend: t, attrs: { begin: d, size: h } });
  return p.push(f), p.push(m), p.push(g), p.forEach((b) => t.disposeData(b.dataId)), y;
}, xie = { kernelName: nu, backendName: "webgpu", kernelFunc: bie };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const wie = `
  fn bincount_write(index: i32, value: f32) {
    ${si("&result[index]", "value", "float32")}
  }
`, Cie = `
  fn bincount_write(index: i32, value: f32) {
    atomicStore(&result[index], bitcast<i32>(value));
  }
`;
class GN {
  constructor(e, t, s = false) {
    this.outputShape = [], this.variableNames = ["x"], this.uniforms = "binCountSize : i32,", this.workgroupSize = [64, 1, 1], this.atomic = true, this.hasWeights = true, this.binaryOutput = false, this.outputShape = e, this.rank = e.length, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.binaryOutput = s, s && (this.atomic = false), this.hasWeights = t, this.hasWeights && this.variableNames.push("w"), this.shaderKey = `bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`;
  }
  getUserCode() {
    return `
    ${this.binaryOutput ? Cie : wie}
  ${le("index")} {
    ${this.rank === 1 ? `if (index < uniforms.xShape) {
      let indexVal = i32(getX(index));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput ? 1 : this.hasWeights ? "getW(index)" : "1."};
        bincount_write(indexVal, value);
      }
    }` : `let coord = getCoordsFromIndex(index);
    if (coordsInBounds2D(coord, uniforms.xShape)) {
      let indexVal = i32(getX(coord[0], coord[1]));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput ? 1 : this.hasWeights ? "getW(coord[0], coord[1])" : "1."};
        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);
      }
    }`}
  }
  `;
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Iie(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, weights: a } = e, { size: o } = s, i = A(r.shape), c = A(a.shape) > 0, l = [o], d = a.dtype, h = Un({ backend: t, attrs: { shape: l, value: 0, dtype: d } }), p = new GN([i], c), f = [{ type: "int32", data: [o] }], m = c ? [r, a] : [r];
  return t.runWebGPUProgram(p, m, d, f, h);
}
const Sie = { kernelName: su, backendName: "webgpu", kernelFunc: Iie };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class vie {
  constructor(e) {
    this.outputShape = [], this.variableNames = ["s0", "s1"], this.uniforms = "s0Size : i32, s1Size : i32, ", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [e], this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "broadcastArgs";
  }
  getUserCode() {
    return `
  ${le("index")} {
    if (index < uniforms.size) {
      var s0 = 1.0;
      var s1 = 1.0;
      let indexS0 = index - uniforms.size + uniforms.s0Size;
      let indexS1 = index - uniforms.size + uniforms.s1Size;
      if (indexS0 >= 0) {
        s0 = getS0(indexS0);
      }
      if (indexS1 >= 0) {
        s1 = getS1(indexS1);
      }

      if (s0 == 1.0) {
        setOutputAtIndex(index, s1);
      } else if (s1 == 1.0) {
        setOutputAtIndex(index, s0);
      } else if (s0 != s1) {
        setOutputAtIndex(index, uniforms.NAN);
      } else {
        setOutputAtIndex(index, s0);
      }
    }
  }
  `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function $ie(n) {
  const { inputs: e, backend: t } = n, { s0: s, s1: r } = e;
  if (t.shouldExecuteOnCPU([s, r])) {
    const l = t.tensorMap.get(s.dataId), d = t.tensorMap.get(r.dataId), h = l.values, p = d.values, f = Re(Array.from(h), Array.from(p));
    return t.makeTensorInfo([f.length], "int32", Int32Array.from(f));
  }
  const a = A(s.shape), o = A(r.shape), i = Math.max(a, o), u = new vie(i), c = [{ type: "int32", data: [a] }, { type: "int32", data: [o] }];
  return t.runWebGPUProgram(u, [s, r], "int32", c);
}
const kie = { kernelName: Bl, backendName: "webgpu", kernelFunc: $ie };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const HN = dn({ opType: Ae.NOT_EQUAL, dtype: "bool", cpuKernelImpl: ioe }), Nie = { kernelName: Nu, backendName: "webgpu", kernelFunc: HN };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ah(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = t.tensorMap.get(s.dataId);
  return us({ inputs: { x: r.complexTensorInfos.real }, backend: t });
}
const Tie = { kernelName: Dd, backendName: "webgpu", kernelFunc: Ah };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Rie(n, e) {
  const t = new Tc(n.shape, ie.TO_INT), s = e.runWebGPUProgram(t, [n], "int32");
  return { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function cy(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { dtype: a } = s;
  if (a === "complex64") {
    if (r.dtype === "complex64") return us({ inputs: { x: r }, backend: t });
    const o = Ot(r.shape), i = cy({ inputs: { x: r }, backend: t, attrs: { dtype: "float32" } }), u = il({ inputs: { real: i, imag: o }, backend: t });
    return o.dispose(), t.disposeData(i.dataId), u;
  }
  if (r.dtype === "complex64") {
    const o = Ah({ inputs: { input: r }, backend: t }), i = cy({ inputs: { x: o }, backend: t, attrs: { dtype: a } });
    return t.disposeData(o.dataId), i;
  }
  if (!of(r.dtype, a)) {
    const o = us({ inputs: { x: r }, backend: t });
    return { dataId: o.dataId, shape: o.shape, dtype: a };
  }
  if (t.shouldExecuteOnCPU([r])) {
    const o = t.tensorMap.get(r.dataId).values, [i, u, c] = Wae(o, r.shape, r.dtype, a);
    return t.makeTensorInfo(i, u, c);
  }
  if (a === "int32") return Rie(r, t);
  if (a === "bool") {
    const o = t.makeTensorInfo([], "bool", Ht("bool", 1)), u = HN({ inputs: { a: r, b: o }, backend: t });
    return t.disposeData(o.dataId), u;
  }
  throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`);
}
const _ie = { kernelName: Wa, backendName: "webgpu", kernelFunc: cy };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Eie = st({ opType: ie.CEIL, cpuKernelImpl: Vae }), Die = { kernelName: Va, backendName: "webgpu", kernelFunc: Eie };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Aie {
  constructor(e) {
    this.variableNames = ["A"], this.uniforms = "minVal : f32, maxVal : f32,", this.workPerThread = 4, this.workgroupSize = [64, 1, 1], this.outputComponent = 4, this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.shaderKey = "clipVec4";
  }
  getUserCode() {
    return `
      ${le("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue = clamp(
              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));
          clampedValue = select(clampedValue, value, isnanVec4(value));
          setOutputAtIndex(index, clampedValue);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Fie {
  constructor(e) {
    this.variableNames = ["A"], this.uniforms = "minVal : f32, maxVal : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "clip";
  }
  getUserCode() {
    return `
      ${le("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Oie(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { clipValueMin: a, clipValueMax: o } = s;
  let i;
  const u = [{ type: "float32", data: [a] }, { type: "float32", data: [o] }];
  return A(r.shape) % 4 === 0 ? i = new Aie(r.shape) : i = new Fie(r.shape), t.runWebGPUProgram(i, [r], r.dtype, u);
}
const Pie = { kernelName: Gr, backendName: "webgpu", kernelFunc: Oie };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Lie {
  constructor(e) {
    this.outputShape = [], this.variableNames = ["real", "imag"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "complexAbs";
  }
  getUserCode() {
    return `
    ${le("index")} {
      if (index < uniforms.size) {
        let re = abs(getRealByOutputIndex(index));
        let im = abs(getImagByOutputIndex(index));
        let mx = max(re, im);

        // The length function in wgsl may be not underflow-safe on some GPUs.
        // So the safe solution is to ensure underflow-safety in all cases.
        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));
      }
    }
  `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function BC(n, e) {
  return { dataId: e.dataId, dtype: e.dtype, shape: n.shape };
}
function zie(n) {
  const { inputs: e, backend: t } = n, { x: s } = e, r = t.tensorMap.get(s.dataId), a = new Lie(s.shape), o = [BC(s, r.complexTensorInfos.real), BC(s, r.complexTensorInfos.imag)];
  return t.runWebGPUProgram(a, o, o[0].dtype);
}
const Mie = { kernelName: Wl, backendName: "webgpu", kernelFunc: zie };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Bie {
  constructor(e) {
    this.uniforms = "", this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = xn(e, 1), this.variableNames = e.map((t, s) => `T${s}`), this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.offsetLength = e.length - 1;
    for (let t = 0; t < this.offsetLength; t++) this.uniforms += `offset${t} : i32,`;
    this.shaderKey = "concat";
  }
  getUserCode() {
    const e = [];
    if (this.offsetLength > 0) {
      e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");
      for (let a = 1; a < this.offsetLength; a++) e.push(`else if (yC < uniforms.offset${[a]}){ setOutputAtCoords(coords.x, coords.y, getT${a}(yR, yC - uniforms.offset${a - 1})); }`);
      const s = this.offsetLength, r = this.offsetLength - 1;
      e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${s}(yR, yC - uniforms.offset${r})); }`);
    } else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");
    return `
      ${le("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${e.join(`
        `)}
          }
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function zm(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = t.tensorMap.get(s.dataId);
  return us({ inputs: { x: r.complexTensorInfos.imag }, backend: t });
}
const Wie = { kernelName: Ed, backendName: "webgpu", kernelFunc: zm };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function qc(n, e, t) {
  const s = n[0].dtype;
  if (s === "complex64") {
    const f = n.map((x) => Ah({ inputs: { input: x }, backend: t })), m = n.map((x) => zm({ inputs: { input: x }, backend: t })), g = qc(f, e, t), y = qc(m, e, t), b = il({ inputs: { real: g, imag: y }, backend: t });
    return f.forEach((x) => t.disposeData(x.dataId)), m.forEach((x) => t.disposeData(x.dataId)), t.disposeData(g.dataId), t.disposeData(y.dataId), b;
  }
  let r = t.shouldExecuteOnCPU(n);
  if (s === "string" && (r = true), r) {
    const f = n.map((C) => {
      const k = [-1, A(C.shape.slice(e))];
      return Ce({ inputs: { x: C }, backend: t, attrs: { shape: k } });
    }), m = f.map((C) => ({ vals: t.readSync(C.dataId), shape: C.shape })), g = xn(f.map((C) => C.shape), 1), y = f[0].shape[0] === 1, b = Uae(m, g, s, y), x = xn(n.map((C) => C.shape), e), w = t.makeTensorInfo(x, s, b);
    return f.forEach((C) => t.disposeData(C.dataId)), w;
  }
  const a = t.device.limits.maxStorageBuffersPerShaderStage - 1;
  if (n.length > a) {
    const f = [];
    for (let g = 0; g < n.length; g += a) {
      const y = n.slice(g, g + a);
      f.push(qc(y, e, t));
    }
    const m = qc(f, e, t);
    for (const g of f) t.disposeData(g.dataId);
    return m;
  }
  const { tensors2D: o, outShape: i } = Vie(n, e, t), u = o.map((f) => f.shape), c = new Bie(u), l = [], d = new Array(u.length - 1);
  if (d.length > 0) {
    d[0] = u[0][1], l.push({ type: "int32", data: [d[0]] });
    for (let f = 1; f < d.length; f++) d[f] = d[f - 1] + u[f][1], l.push({ type: "int32", data: [d[f]] });
  }
  const h = t.runWebGPUProgram(c, o, o[0].dtype, l);
  o.forEach((f) => t.disposeData(f.dataId));
  const p = Ce({ inputs: { x: h }, backend: t, attrs: { shape: i } });
  return t.disposeData(h.dataId), p;
}
function Vie(n, e, t) {
  const s = xn(n.map((a) => a.shape), e);
  return { tensors2D: n.map((a) => Ce({ inputs: { x: a }, backend: t, attrs: { shape: [A(a.shape.slice(0, e)), A(a.shape.slice(e))] } })), outShape: s };
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function jN(n) {
  const { inputs: e, backend: t, attrs: s } = n, { axis: r } = s, a = Ee(r, e[0].shape)[0], o = e.map((c) => c.shape);
  lh(o, a);
  const i = xn(e.map((c) => c.shape), a);
  if (A(i) === 0) return t.makeTensorInfo(i, e[0].dtype, []);
  const u = e.filter((c) => A(c.shape) > 0);
  return u.length === 1 ? us({ inputs: { x: u[0] }, backend: t }) : qc(u, a, t);
}
const Uie = { kernelName: ru, backendName: "webgpu", kernelFunc: jN };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Gie(n, e, t, s, r = false, a = null, o = false, i = 4, u = 4, c = 4) {
  const l = (N) => {
    switch (N) {
      case 1:
        return "resData = f32(x[xIndex]);";
      case 3:
        return "resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";
      case 4:
        return "resData = vec4<f32>(x[xIndex / 4]);";
      default:
        throw new Error(`innerElementSize ${N} is not supported.`);
    }
  }, d = (N) => {
    switch (N) {
      case 1:
        return "return f32(W[row * uniforms.wShape[3] + col]);";
      case 4:
        return "return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);";
      default:
        throw new Error(`innerElementSize ${N} is not supported.`);
    }
  }, h = n ? `
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      ` : `
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `, p = n ? `
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      ` : `
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `, f = n ? "uniforms.xShape[1]" : "uniforms.xShape[2]", m = n ? "uniforms.xShape[2]" : "uniforms.xShape[3]", g = n ? "row" : "col", y = n ? "col" : "row", b = `
      let inChannels = uniforms.wShape[2];
      let outWidth = ${n ? "uniforms.outShape[2]" : "uniforms.outShape[3]"};
      let outRow = ${g} / outWidth;
      let outCol = ${g} % outWidth;

      let WRow = ${y} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${y} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];
      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];
      let xCh = ${y} % inChannels;
      var resData = ${He(i)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${m}) {
        ${h}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${l(i)}
      }
      return resData;`, x = n ? e && s ? `
      ${b}` : `
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${b}
      }
      return ${He(i)}(0.0);` : s && t ? `
      ${b}` : `
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${b}
      }
      return ${He(i)}(0.0);`, w = `${d(u)}`, C = He(c), v = He(n ? i : u), k = He(n ? u : i);
  return `
      ${na(a, o, c === 4, 4)}
      fn mm_readA(batch: i32, row : i32, col : i32) -> ${v} {
        ${n ? x : w}
      }

      fn mm_readB(batch: i32, row : i32, col : i32) -> ${k} {
        ${n ? w : x}
      }

      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${C}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${n ? "uniforms.outShape[2]" : "uniforms.outShape[3]"};
        ${p}
        ${ol(r, a)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`;
}
class Hie {
  constructor(e, t, s, r, a = false, o = null, i = false, u = false) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.outputShape = e.outShape, this.isChannelsLast = e.dataFormat === "channelsLast", this.isVec4 = ((e.inChannels % 4 === 0 || e.inChannels % 3 === 0) && this.isChannelsLast || e.outWidth % 4 === 0 && !this.isChannelsLast) && e.outChannels % 4 === 0, this.dispatchLayout = this.isChannelsLast ? { x: [3], y: [1, 2], z: [0] } : { x: [2, 3], y: [1], z: [0] }, this.workgroupSize = FN(this.dispatchLayout, this.outputShape, this.isVec4), this.elementsPerThread = ON(this.dispatchLayout, this.outputShape, this.isVec4), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread), this.isVec4 ? (this.outputComponent = 4, this.isChannelsLast && e.inChannels % 4 !== 0 ? (this.innerElementSize = 3, this.variableComponents = [1, 4]) : (this.innerElementSize = 4, this.variableComponents = [4, 4]), a && (this.variableNames.push("bias"), this.variableComponents.push(4)), i && (this.variableNames.push("preluActivationWeights"), this.variableComponents.push(4))) : (this.innerElementSize = this.elementsPerThread[0], a && this.variableNames.push("bias"), i && this.variableNames.push("preluActivationWeights")), this.sequentialAccessByThreads = u, this.addBias = a, this.activation = o, this.hasPreluActivationWeights = i, this.tileAOuter = this.workgroupSize[1] * this.elementsPerThread[1], this.tileBOuter = this.workgroupSize[0] * this.elementsPerThread[0], this.tileInner = Math.max(this.workgroupSize[0] * this.innerElementSize, this.workgroupSize[1]), this.fitAOuter = t % this.tileAOuter === 0, this.fitBOuter = s % this.tileBOuter === 0, this.fitInner = r % this.tileInner === 0, this.shaderKey = `conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`;
  }
  getUserCode() {
    const e = this.isVec4 ? Om(this.elementsPerThread, this.workgroupSize, !this.isChannelsLast, this.tileInner) : Pm(this.elementsPerThread, this.workgroupSize, !this.isChannelsLast, this.tileInner, false, null, this.sequentialAccessByThreads), t = this.isVec4 ? [this.innerElementSize, 4, 4] : [1, 1, 1];
    return `
    ${Gie(this.isChannelsLast, this.fitAOuter, this.fitBOuter, this.fitInner, this.addBias, this.activation, this.hasPreluActivationWeights, t[0], t[1], t[2])}
    ${e}
  `;
  }
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class jie {
  constructor(e, t = false, s = null, r = false) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,", this.workgroupSize = [4, 4, 8], this.outputShape = e.outShape, this.isChannelsLast = e.dataFormat === "channelsLast", this.dispatchLayout = this.isChannelsLast ? { x: [2], y: [1], z: [0, 3] } : { x: [3], y: [2], z: [0, 1] }, this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.addBias = t, this.activation = s, this.hasPreluActivationWeights = r, t && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), this.shaderKey = `conv2dnaive_${this.activation}_${this.isChannelsLast}`;
  }
  getUserCode() {
    return `
       ${na(this.activation, this.hasPreluActivationWeights, false, 4)}
       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{
         let coords = vec4<i32>(batch, row, col, chan);
         if (coordsInBounds4D(coords, uniforms.xShape)) {
           return  getX(batch, row, col, chan);
         } else {
          return 0.0;
         }
       }
       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{
         let coords = vec4<i32>(row, col, xChannel, outChannel);
         if(coordsInBounds4D(coords, uniforms.wShape)) {
           return getW(row, col, xChannel, outChannel);
          } else {
            return 0.0;
          }
       }
       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {
         let coords = ${this.isChannelsLast ? "vec4<i32>(batch, row, col, chan);" : "vec4<i32>(batch, chan, row, col);"}
         if (coordsInBounds4D(coords, uniforms.outShape)) {
           var value = valueIn;
           ${ol(this.addBias, this.activation)}
           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);
         }
       }
       ${le("index")} {
         let coords = getOutputCoords();
         let batch = coords[0];
         let outChannel = ${this.isChannelsLast ? "coords[3];" : "coords[1];"}
         let outRow = ${this.isChannelsLast ? "coords[1];" : "coords[2];"}
         let outCol = ${this.isChannelsLast ? "coords[2];" : "coords[3];"}
         var acc : f32 = 0.0;
         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {
           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {
             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];
             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];
             for (var xChannel = 0; xChannel < ${this.isChannelsLast ? "uniforms.xShape[3];" : "uniforms.xShape[1];"} xChannel = xChannel + 1) {
               ${this.isChannelsLast ? "let v = readInp(batch, xRow, xCol, xChannel);" : "let v = readInp(batch, xChannel, xRow, xCol);"}
               let f = readFilt(row, col, xChannel, outChannel);
               acc = acc + v * f;
             }
           }
         }
         writeResult(batch, outRow, outCol, outChannel, acc);
       }
     `;
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class qie {
  constructor(e, t) {
    this.variableNames = ["x"], this.uniforms = `pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,
       inChannels : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.isChannelsLast = t, this.shaderKey = `im2col_${this.isChannelsLast}`;
  }
  getUserCode() {
    const e = this.isChannelsLast ? 1 : 2, t = this.isChannelsLast ? 2 : 3, s = this.isChannelsLast ? "coords[1]" : "coords[2]", r = this.isChannelsLast ? "coords[2]" : "coords[1]", a = this.isChannelsLast ? "getX(batch, xRow, xCol, ch)" : "getX(batch, ch, xRow, xCol)";
    return `
    ${le("index")} {
      let coords = getCoordsFromIndex(index);
      if(index < uniforms.size) {
        let batch = coords[0];
        let row = ${s};
        let col = ${r};
        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];
        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);
        var value = 0.0;
        if(xRow < uniforms.xShape[${e}] && xRow >= 0) {
          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -
              uniforms.pads[1];
          let xCol = offsetX + uniforms.dilations[1] * ((col %
              uniforms.itemsPerBlockRow) / uniforms.inChannels);
          let ch = col % uniforms.inChannels;
          if(xCol < uniforms.xShape[${t}] && xCol >= 0) {
            value = ${a};
          }
        }
        setOutputAtIndex(index, value);
      }
    }
   `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nf(n, e) {
  const t = n.length;
  return t >= 3 ? e ? [...n.slice(0, -3), n[t - 3] * n[t - 2], n[t - 1]] : [...n.slice(0, -3), n[t - 3], n[t - 2] * n[t - 1]] : !e && t === 1 && n[0] > 1 ? [n[0], 1] : null;
}
function Kie({ x: n, filter: e, convInfo: t, backend: s, bias: r = null, preluActivationWeights: a = null, leakyreluAlpha: o = 0, activation: i = null }) {
  const u = t.dataFormat === "channelsLast", c = !u, l = false, d = u && t.filterHeight === t.inHeight && t.filterWidth === t.inWidth && t.padInfo.type === "VALID", h = [];
  let p, f;
  if (d) {
    const y = t.inHeight * t.inWidth * t.inChannels;
    p = Ce({ inputs: { x: n }, backend: s, attrs: { shape: [1, t.batchSize, y] } }), f = Ce({ inputs: { x: e }, backend: s, attrs: { shape: [1, y, t.outChannels] } });
  } else p = Ce({ inputs: { x: n }, backend: s, attrs: { shape: u ? [t.batchSize, t.inHeight * t.inWidth, t.inChannels] : [t.batchSize, t.inChannels, t.inHeight * t.inWidth] } }), f = Ce({ inputs: { x: e }, backend: s, attrs: { shape: [1, t.inChannels, t.outChannels] } });
  if (h.push(p), h.push(f), a != null) {
    const y = nf(a.shape, u);
    y != null && (a = Ce({ inputs: { x: a }, backend: s, attrs: { shape: y } }), h.push(a));
  }
  if (r != null) {
    const y = nf(r.shape, u);
    y != null && (r = Ce({ inputs: { x: r }, backend: s, attrs: { shape: y } }), h.push(r));
  }
  const m = Lm({ a: u ? p : f, b: u ? f : p, transposeA: c, transposeB: l, backend: s, bias: r, activation: i, preluActivationWeights: a, leakyreluAlpha: o }), g = Ce({ inputs: { x: m }, backend: s, attrs: { shape: t.outShape } });
  h.push(m);
  for (const y of h) s.disposeData(y.dataId);
  return g;
}
function Xie({ x: n, filter: e, convInfo: t, backend: s, bias: r = null, preluActivationWeights: a = null, leakyreluAlpha: o = 0, activation: i = null }) {
  const { filterWidth: u, filterHeight: c, inChannels: l, strideWidth: d, strideHeight: h, padInfo: p, outWidth: f, outHeight: m, dilationWidth: g, dilationHeight: y, dataFormat: b } = t, x = b === "channelsLast", w = u * c * l, C = m * f, v = x ? [t.batchSize, C, w] : [t.batchSize, w, C], k = new qie(v, x), R = [{ type: "int32", data: [p.top, p.left] }, { type: "int32", data: [h, d] }, { type: "int32", data: [y, g] }, { type: "int32", data: [f] }, { type: "int32", data: [l * u] }, { type: "int32", data: [l] }], N = s.runWebGPUProgram(k, [n], n.dtype, R), T = [];
  T.push(N);
  const S = Ce({ inputs: { x: e }, backend: s, attrs: { shape: [1, w, -1] } });
  if (T.push(S), a != null) {
    const V = nf(a.shape, x);
    V != null && (a = Ce({ inputs: { x: a }, backend: s, attrs: { shape: V } }), T.push(a));
  }
  if (r != null) {
    const V = nf(r.shape, x);
    V != null && (r = Ce({ inputs: { x: r }, backend: s, attrs: { shape: V } }), T.push(r));
  }
  const M = Lm({ a: x ? N : S, b: x ? S : N, transposeA: !x, transposeB: false, backend: s, bias: r, activation: i, preluActivationWeights: a, leakyreluAlpha: o }), L = Ce({ inputs: { x: M }, backend: s, attrs: { shape: t.outShape } });
  T.push(M);
  for (const V of T) s.disposeData(V.dataId);
  return L;
}
function qN({ x: n, filter: e, convInfo: t, backend: s, bias: r = null, preluActivationWeights: a = null, leakyreluAlpha: o = 0, activation: i = null }) {
  const u = r != null, c = a != null, l = t.dataFormat === "channelsLast", d = l && t.filterHeight === t.inHeight && t.filterWidth === t.inWidth && t.padInfo.type === "VALID", h = U().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");
  if (!h && (d || t.filterHeight === 1 && t.filterWidth === 1 && t.dilationHeight === 1 && t.dilationWidth === 1 && t.strideHeight === 1 && t.strideWidth === 1 && (t.padInfo.type === "SAME" || t.padInfo.type === "VALID"))) return Kie({ x: n, filter: e, convInfo: t, backend: s, bias: r, activation: i, preluActivationWeights: a, leakyreluAlpha: o });
  const p = U().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"), f = p > -1 ? p : s.thresholdToIncreaseWorkgroups, m = t.batchSize * Math.ceil(t.outHeight * t.outWidth / 32) * Math.ceil(t.outChannels / 32);
  if (U().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER") || m <= f) return Xie({ x: n, filter: e, convInfo: t, backend: s, bias: r, preluActivationWeights: a, leakyreluAlpha: o, activation: i });
  let g;
  const y = [t.padInfo.top, t.padInfo.left], b = [{ type: "int32", data: [t.filterHeight, t.filterWidth] }, { type: "int32", data: [...y] }, { type: "int32", data: [t.strideHeight, t.strideWidth] }, { type: "int32", data: [t.dilationHeight, t.dilationWidth] }];
  if (h) g = new jie(t, u, i, c);
  else {
    const v = l ? t.outHeight * t.outWidth : t.outChannels, k = l ? t.outChannels : t.outHeight * t.outWidth, R = t.filterHeight * t.filterWidth * t.inChannels;
    b.push({ type: "int32", data: [v] }, { type: "int32", data: [k] }, { type: "int32", data: [R] });
    const N = s.adapterInfo.isIntel();
    g = new Hie(t, v, k, R, u, i, c, N);
  }
  const x = [], w = [n, e];
  u && (!l && r.shape.length === 1 && (r = Ce({ inputs: { x: r }, backend: s, attrs: { shape: [r.shape[0], 1, 1] } }), x.push(r)), w.push(r)), c && (!l && a.shape.length === 1 && (a = Ce({ inputs: { x: a }, backend: s, attrs: { shape: [a.shape[0], 1, 1] } }), x.push(a)), w.push(a)), i === "leakyrelu" && (b.push({ type: "float32", data: [o] }), g.uniforms += " alpha : f32,");
  const C = s.runWebGPUProgram(g, w, n.dtype, b);
  for (const v of x) s.disposeData(v.dataId);
  return C;
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Yie(n) {
  const { inputs: e, attrs: t, backend: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dataFormat: u, dilations: c, dimRoundingMode: l } = t, d = An(u), h = lt(r.shape, a.shape, o, c, i, l, false, d);
  return qN({ x: r, filter: a, convInfo: h, backend: s });
}
const Qie = { kernelName: Ua, backendName: "webgpu", kernelFunc: Yie };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Zie {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.uniforms = "filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,", this.workgroupSize = [64, 1, 1], this.size = false, this.isVec4 = false, this.workPerThread = 1, this.outputShape = e.inShape, this.isChannelsLast = e.dataFormat === "channelsLast", this.isVec4 = this.isChannelsLast && e.outChannels % 4 === 0 && e.inChannels % 4 === 0, this.isVec4 ? (this.workPerThread = 2, this.outputComponent = 4, this.workgroupSize = [4, 4, 4], this.dispatchLayout = { x: [3], y: [2], z: [0, 1] }, this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, [4, this.workPerThread, 1])) : (this.size = true, this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize)), this.shaderKey = `conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`;
  }
  getUserCode() {
    const e = this.isChannelsLast ? 1 : 2, t = this.isChannelsLast ? 2 : 3, s = this.isChannelsLast ? 3 : 1, r = `
    ${le()} {
      let batch = i32(globalId.z) / uniforms.outShape[1];
      let r = i32(globalId.z) % uniforms.outShape[1];
      let c = i32(globalId.y) * ${this.workPerThread};
      let d1 = i32(globalId.x) * 4;

      let dyCorner = vec2<i32>(r, c) - uniforms.pads;

      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
      // ? = to be determined. : = across all values in that axis.
      var dotProd: array<vec4<f32>, ${this.workPerThread}>;
      for (var i = 0; i < ${this.workPerThread}; i++) {
        dotProd[i] = vec4<f32>(0.0);
      }
      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);
        let wRPerm = uniforms.filterDims.x - 1 - wR;
        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||
            fract(dyR) > 0.0) {
          continue;
        }
        let idyR = i32(dyR);

        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);
          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);
          let wCPerm = uniforms.filterDims.y - 1 - wC;
          var bDyCVal = true;
          var bDyCVal2 = true;
          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
              fract(dyC) > 0.0) {
            bDyCVal = false;
          }
          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||
              fract(dyC2) > 0.0) {
            bDyCVal2 = false;
          }

          let idyC = i32(dyC);
          let idyC2 = i32(dyC2);
          if (bDyCVal && bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
              xValue = getDy(batch, idyR, idyC2, d2);
              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),
                                                  dot(xValue, wValue1),
                                                  dot(xValue, wValue2),
                                                  dot(xValue, wValue3));
            }
          } else if (bDyCVal) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
            }
          } else if (bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC2, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[1] = dotProd[1] + tmpval;
            }
          }
        }
      }

      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
        let coords = vec4<i32>(batch, r, c + i, d1);
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);
        }
      }
    }
    `;
    return this.isVec4 ? `
    ${r}
    ` : `
    ${le("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${s}];

        let dyCorner = vec2<i32>(coords[${e}], coords[${t}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = i32(dyC);

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              let xValue = ${this.isChannelsLast ? "getDy(batch, idyR, idyC, d2)" : "getDy(batch, d2, idyR, idyC)"};
              let wValue = getW(wRPerm, wCPerm, d1, d2);
              dotProd = dotProd + xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `;
  }
}
class Jie {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.uniforms = "pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.filterShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.isChannelsLast = e.dataFormat === "channelsLast", this.shaderKey = `conv2DDerFilter_${this.isChannelsLast}`;
  }
  getUserCode() {
    return `
    ${le("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let d2 = coords[3];

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b = b + 1) {
          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];
            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              if (${this.isChannelsLast}) {
                let dyValue = getDy(b, yR, yC, d2);
                let xValue = getX(b, xR, xC, d1);
                dotProd = dotProd + xValue * dyValue;
              } else {
                let dyValue = getDy(b, d2, yR, yC);
                let xValue = getX(b, d1, xR, xC);
                dotProd = dotProd + xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `;
  }
}
class eue {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.uniforms = `pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,
       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.filterShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "conv3DDerFilter";
  }
  getUserCode() {
    return `
    ${le("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wF = coords.x;
        let wR = coords.y;
        let wC = coords.z;
        let d1 = coords.w;
        let d2 = coords.u;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yF = 0; yF < uniforms.outDepth; yF++) {
            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];
            if (xF < 0 || xF >= uniforms.inDepth) {
              continue;
            }

            for (var yR = 0; yR < uniforms.outHeight; yR++) {
              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];
              if (xR < 0 || xR >= uniforms.inHeight) {
                continue;
              }

              for (var yC = 0; yC < uniforms.outWidth; yC++) {
                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];
                if (xC < 0 || xC >= uniforms.inWidth) {
                  continue;
                }

                let dyValue = getDy(b, yF, yR, yC, d2);
                let xValue = getX(b, xF, xR, xC, d1);
                dotProd += xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `;
  }
}
class tue {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.uniforms = `filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.inShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "conv3DDerInput";
  }
  getUserCode() {
    return `
    ${le("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let d1 = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyFCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);
          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {
            continue;
          }
          let idyF = i32(dyF);

          let wFPerm = uniforms.filterDims[0] - 1 - wF;

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            let wRPerm = uniforms.filterDims[1] - 1 - wR;

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let wCPerm = uniforms.filterDims[2] - 1 - wC;

              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {
                let xValue = getDy(batch, idyF, idyR, idyC, d2);
                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `;
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: a } = e, { strides: o, pad: i, dataFormat: u, dimRoundingMode: c, filterShape: l } = s, d = An(u), h = lt(r.shape, l, o, 1, i, c, false, d), p = new Jie(h), f = [{ type: "int32", data: [h.padInfo.top, h.padInfo.left] }, { type: "int32", data: [h.strideHeight, h.strideWidth] }, { type: "int32", data: [h.batchSize] }, { type: "int32", data: [h.outHeight] }, { type: "int32", data: [h.outWidth] }, { type: "int32", data: [h.inHeight] }, { type: "int32", data: [h.inWidth] }];
  return t.runWebGPUProgram(p, [r, a], r.dtype, f);
}
const sue = { kernelName: vd, backendName: "webgpu", kernelFunc: nue };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function rue(n = 4) {
  const e = (a) => {
    switch (a) {
      case 1:
        return "return W[getIndexFromCoords4D(coord, uniforms.wShape)];";
      case 4:
        return `
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;
      default:
        throw new Error(`innerElementSize ${a} is not supported.`);
    }
  }, s = `if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${`
      let outRow = row / uniforms.outShape[2];
      let outCol = row % uniforms.outShape[2];

      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
        return ${He(n)}(0.0);
      }
      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
        return ${He(n)}(0.0);
      }
      let coord = vec4<i32>(
          batch,
          i32(xR),
          i32(xC),
          col % uniforms.outBackprop[3]);
      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${n}];`}
      }
      return ${He(n)}(0.0);`;
  return `
  fn mm_readA(batch: i32, row : i32, col : i32) -> ${He(n)} {
    ${s}
  }

  fn mm_readB(batch: i32, row : i32, col : i32) -> ${He(n)} {
    let coordX = uniforms.filterDims.x - 1 -
        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let coordY = uniforms.filterDims.y - 1 -
        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
        coordX >= 0 && coordY >= 0) {
      let rowInner = row % uniforms.outBackprop[3];
      let coord = vec4<i32>(coordX, coordY, col, rowInner);
      ${e(n)}
    }
    return ${He(n)}(0.0);
  }

  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${He(n)}) {
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${n}] = value;
    }
  }`;
}
class aue {
  constructor(e) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.outputShape = e.inShape, $(e.dataFormat === "channelsLast", () => "TODO: NCHW is unimplemented"), this.isVec4 = e.inChannels % 4 === 0 && e.outChannels % 4 === 0, this.dispatchLayout = { x: [3], y: [1, 2], z: [0] }, this.workgroupSize = FN(this.dispatchLayout, this.outputShape, this.isVec4), this.elementsPerThread = ON(this.dispatchLayout, this.outputShape, this.isVec4), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread), this.isVec4 && (this.outputComponent = 4, this.variableComponents = [4, 1]), this.shaderKey = `conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`;
  }
  getUserCode() {
    const e = this.isVec4 ? Om(this.elementsPerThread, this.workgroupSize) : Pm(this.elementsPerThread, this.workgroupSize);
    return `
    ${rue(this.isVec4 ? 4 : 1)}
    ${e}
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function oue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: a } = e, { inputShape: o, strides: i, pad: u, dataFormat: c, dimRoundingMode: l } = s, d = An(c), h = lt(o, a.shape, i, 1, u, l, false, d), p = [{ type: "int32", data: [h.filterHeight, h.filterWidth] }, { type: "int32", data: [h.filterHeight - 1 - h.padInfo.top, h.filterWidth - 1 - h.padInfo.left] }, { type: "int32", data: [h.strideHeight, h.strideWidth] }, { type: "int32", data: [h.batchSize, h.outHeight, h.outWidth, h.outChannels] }];
  let f;
  if (U().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE") || h.dataFormat !== "channelsLast") f = new Zie(h);
  else {
    f = new aue(h);
    const m = h.inHeight * h.inWidth, g = h.inChannels, y = h.filterHeight * h.filterWidth * h.outChannels;
    p.push({ type: "uint32", data: [m] }, { type: "uint32", data: [g] }, { type: "uint32", data: [y] });
  }
  return t.runWebGPUProgram(f, [r, a], "float32", p);
}
const iue = { kernelName: Ga, backendName: "webgpu", kernelFunc: oue };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class uue {
  constructor(e) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.outShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "conv3dnaive";
  }
  getUserCode() {
    return `
    ${le("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords.x;
        let d2 = coords.u;

        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
        let xFCorner = xFRCCorner.x;
        let xRCorner = xFRCCorner.y;
        let xCCorner = xFRCCorner.z;

        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;
        let inputDepthVec4Remainder = uniforms.xShape.u % 4;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let xF = xFCorner + wF * uniforms.dilations[0];
          if (xF < 0 || xF >= uniforms.xShape.y) {
            continue;
          }

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let xR = xRCorner + wR * uniforms.dilations[1];
            if (xR < 0 || xR >= uniforms.xShape.z) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let xC = xCCorner + wC * uniforms.dilations[2];
              if (xC < 0 || xC >= uniforms.xShape.w) {
                continue;
              }

              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {
                let xValues = vec4<f32>(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                let wValues = vec4<f32>(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (inputDepthVec4Remainder == 1) {
                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *
                  getW(wF, wR, wC, inputDepthNearestVec4, d2);
              } else if (inputDepthVec4Remainder == 2) {
                let xValues = vec2<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)
                );
                let wValues = vec2<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (inputDepthVec4Remainder == 3) {
                let xValues = vec3<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)
                );
                let wValues = vec3<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }`;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function lue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dilations: u } = s, c = cs(r.shape, a.shape, o, u, i), l = [c.padInfo.front, c.padInfo.top, c.padInfo.left], d = [{ type: "int32", data: [c.filterDepth, c.filterHeight, c.filterWidth] }, { type: "int32", data: [...l] }, { type: "int32", data: [c.strideDepth, c.strideHeight, c.strideWidth] }, { type: "int32", data: [c.dilationDepth, c.dilationHeight, c.dilationWidth] }], h = new uue(c), p = tn(r.dtype, a.dtype);
  return t.runWebGPUProgram(h, [r, a], p, d);
}
const cue = { kernelName: Ha, backendName: "webgpu", kernelFunc: lue };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function due(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: a } = e, { strides: o, pad: i, filterShape: u } = s, c = cs(r.shape, u, o, 1, i), l = new eue(c), d = [{ type: "int32", data: [c.padInfo.front, c.padInfo.top, c.padInfo.left] }, { type: "int32", data: [c.strideDepth, c.strideHeight, c.strideWidth] }, { type: "int32", data: [c.batchSize] }, { type: "int32", data: [c.outDepth] }, { type: "int32", data: [c.outHeight] }, { type: "int32", data: [c.outWidth] }, { type: "int32", data: [c.inDepth] }, { type: "int32", data: [c.inHeight] }, { type: "int32", data: [c.inWidth] }];
  return t.runWebGPUProgram(l, [r, a], a.dtype, d);
}
const hue = { kernelName: au, backendName: "webgpu", kernelFunc: due };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function pue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: a } = e, { strides: o, pad: i, inputShape: u } = s, c = cs(u, a.shape, o, 1, i), l = new tue(c), d = [{ type: "int32", data: [c.filterDepth, c.filterHeight, c.filterWidth] }, { type: "int32", data: [c.filterDepth - 1 - c.padInfo.front, c.filterHeight - 1 - c.padInfo.top, c.filterWidth - 1 - c.padInfo.left] }, { type: "int32", data: [c.strideDepth, c.strideHeight, c.strideWidth] }, { type: "int32", data: [c.outDepth] }, { type: "int32", data: [c.outHeight] }, { type: "int32", data: [c.outWidth] }, { type: "int32", data: [c.outChannels] }];
  return t.runWebGPUProgram(l, [r, a], r.dtype, d);
}
const fue = { kernelName: ou, backendName: "webgpu", kernelFunc: pue };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const mue = st({ opType: ie.COS }), gue = { kernelName: ja, backendName: "webgpu", kernelFunc: mue };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const yue = st({ opType: ie.COSH }), bue = { kernelName: qa, backendName: "webgpu", kernelFunc: yue };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class xue {
  constructor(e, t, s, r) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.uniforms = "extrapolationValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true;
    const [a] = t;
    this.outputShape = [a, s[0], s[1], e], this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.methodId = r === "bilinear" ? 1 : 0, this.cropHeightBiggerThan1 = this.outputShape[1] > 1, this.cropWidthBiggerThan1 = this.outputShape[2] > 1, this.shaderKey = `cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`;
  }
  getUserCode() {
    const [e, t] = ["f32(uniforms.imageShape[1] - 1)", "f32(uniforms.imageShape[2] - 1)"], [s, r, a] = this.cropHeightBiggerThan1 ? [`(${e} / f32(uniforms.outShape[1] - 1))`, "(y2-y1) * height_ratio", `y1*${e} + f32(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${e}`], [o, i, u] = this.cropWidthBiggerThan1 ? [`(${t} / f32(uniforms.outShape[2] - 1))`, "(x2-x1) * width_ratio", `x1*${t} + f32(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${t}`];
    return `
    ${le("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${s});
        let width_ratio = f32(${o});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${r};
        let width_scale = ${i};
        let in_y = ${a};
        if( in_y < 0.0 || in_y > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${u};
        if( in_x < 0.0 || in_x > ${t} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const wue = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { image: r, boxes: a, boxInd: o } = e, { cropSize: i, method: u, extrapolationValue: c } = s, l = new xue(r.shape[3], a.shape, i, u), d = [{ type: "float32", data: [c] }];
  return t.runWebGPUProgram(l, [r, a, o], "float32", d);
}, Cue = { kernelName: uu, backendName: "webgpu", kernelFunc: wue };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var xd;
(function(n) {
  n.Prod = "*", n.Sum = "+";
})(xd || (xd = {}));
class WC {
  constructor(e, t, s, r) {
    this.variableNames = ["x"], this.uniforms = "index : f32,", this.size = true, this.workgroupSize = [128, 1, 1], this.outputShape = t, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.exclusive = s, this.reverse = r, this.op = e, this.shaderKey = `cum_${this.op}_${this.exclusive}_${this.reverse}`;
  }
  getUserCode() {
    const e = this.outputShape.length, t = this.op === xd.Prod ? "1.0" : "0.0", s = this.exclusive ? t : `getX(${VC(e, "coords", this.op)})`, r = this.outputShape[this.outputShape.length - 1];
    let a = "", o = "";
    return this.exclusive ? (a = this.reverse ? `end != ${r - 1}` : "end != 0", o = this.reverse ? "end + 1" : "end - 1") : (a = this.reverse ? `end + pow2 < ${r}` : "end >= pow2", o = this.reverse ? "end + pow2" : "end - pow2"), `
      ${le("index")} {
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${UC(e, "coords", this.op)};
         var val = ${s};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${a}) {
           let idx = ${o};
           ${UC(e, "coords", this.op)} = idx;
           val ${this.op}= getX(${VC(e, "coords", this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `;
  }
}
function VC(n, e, t) {
  if (n === 1) return `${e}`;
  if (n === 2) return `${e}.x, ${e}.y`;
  if (n === 3) return `${e}.x, ${e}.y, ${e}.z`;
  if (n === 4) return `${e}.x, ${e}.y, ${e}.z, ${e}.w`;
  throw Error(`Cumulative ${t} for rank ${n} is not yet supported`);
}
function UC(n, e, t) {
  if (n === 1) return `${e}`;
  if (n === 2) return `${e}.y`;
  if (n === 3) return `${e}.z`;
  if (n === 4) return `${e}.w`;
  throw Error(`Cumulative ${t} for rank ${n} is not yet supported`);
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function KN(n, e, t, s, r, a) {
  const o = e.shape.length, i = ct([s], o);
  let u = e;
  i != null && (u = Ir({ inputs: { x: e }, backend: t, attrs: { perm: i } }));
  const c = it(1, o)[0];
  if (c !== o - 1) throw new Error(`WebGPU cumprod shader expects an inner-most axis=${e.shape.length - 1} but got axis=${s}`);
  const l = u.shape[c];
  let d = us({ inputs: { x: u }, backend: t });
  for (let h = 0; h <= Math.ceil(Math.log2(l)) - 1; h++) {
    const p = new WC(n, u.shape, false, a), f = d, m = [{ type: "float32", data: [h] }];
    d = t.runWebGPUProgram(p, [d], d.dtype, m), t.disposeData(f.dataId);
  }
  if (r) {
    const h = new WC(n, u.shape, r, a), p = d, f = [{ type: "float32", data: [0] }];
    d = t.runWebGPUProgram(h, [d], d.dtype, f), t.disposeData(p.dataId);
  }
  if (i != null) {
    const h = Ls(i), p = Ir({ inputs: { x: d }, backend: t, attrs: { perm: h } });
    return t.disposeData(d.dataId), t.disposeData(u.dataId), p;
  }
  return d;
}
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Iue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, exclusive: o, reverse: i } = s;
  return KN(xd.Prod, r, t, a, o, i);
}
const Sue = { kernelName: iu, backendName: "webgpu", kernelFunc: Iue };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function vue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, exclusive: o, reverse: i } = s;
  return KN(xd.Sum, r, t, a, o, i);
}
const $ue = { kernelName: Ka, backendName: "webgpu", kernelFunc: vue };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function kue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, weights: a } = e, { size: o, binaryOutput: i } = s, u = r.shape.length === 1, l = A(a.shape) > 0, d = a.dtype, h = u ? [r.shape[0]] : [r.shape[0], r.shape[1]], p = u ? [o] : [r.shape[0], o], f = Un({ backend: t, attrs: { shape: p, value: 0, dtype: d } }), m = new GN(h, l, i), g = [{ type: "int32", data: [o] }], y = l ? [r, a] : [r];
  return t.runWebGPUProgram(m, y, d, g, f);
}
const Nue = { kernelName: Vl, backendName: "webgpu", kernelFunc: kue };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Tue {
  constructor(e, t) {
    this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.uniforms = "blockSize : i32,", this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = `depthToSpace_${t}`, this.dataFormat = t;
  }
  getUserCode() {
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? "uniforms.outShape[3]" : "uniforms.outShape[1]";
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Rue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockSize: a, dataFormat: o } = s, i = r.shape[0], u = o === "NHWC" ? r.shape[1] : r.shape[2], c = o === "NHWC" ? r.shape[2] : r.shape[3], l = o === "NHWC" ? r.shape[3] : r.shape[1], d = u * a, h = c * a, p = l / (a * a), f = o === "NHWC" ? [i, d, h, p] : [i, p, d, h], m = [{ type: "int32", data: [a] }], g = new Tue(f, o);
  return t.runWebGPUProgram(g, [r], r.dtype, m);
}
const _ue = { kernelName: lu, backendName: "webgpu", kernelFunc: Rue };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Eue {
  constructor(e, t, s, r = false, a = null, o = false) {
    this.variableNames = ["x", "W"], this.uniforms = "pads : vec2<i32>, inDims : vec2<i32>,", this.workgroupSize = [16, 16, 1], this.outputShape = e, this.dispatchLayout = { x: [3], y: [2], z: [0, 1] }, this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), r && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), this.addBias = r, this.activation = a, this.hasPreluActivation = o, this.filterHeight = t, this.filterWidth = s, this.shaderKey = `depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`;
  }
  getUserCode() {
    const e = this.filterWidth * this.filterHeight, t = this.workgroupSize[0] * this.workgroupSize[1] * this.workgroupSize[2], s = this.workgroupSize[1] + this.filterHeight - 1, r = this.workgroupSize[0] + this.filterWidth - 1;
    return `
      ${na(this.activation, this.hasPreluActivation, false, 4)}

      var<workgroup> mm_Asub : array<array<f32, ${r}>, ${s}>;
      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;
      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {
        var value = 0.0;
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, channel, row, col);
        }
        return value;
      }

      ${le()} {
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;
        let channelMul = uniforms.wShape[3];
        let d1 = coords[1] / channelMul;
        let q = coords[1] % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;

        let localRow = i32(localId.y);
        let localCol = i32(localId.x);

        // Load one tile of X into local memory.
        for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${this.workgroupSize[1]}) {
          for (var inputCol = localCol; inputCol < ${r}; inputCol = inputCol + ${this.workgroupSize[0]}) {
            let rowOffset = inputRow - localRow;
            let colOffset = inputCol - localCol;
            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);
          }
        }

        // Load one tile of W into local memory.
        var wIndex = i32(localIndex);
        ${e < t ? `if (wIndex < ${e})` : `for(; wIndex < ${e}; wIndex = wIndex + ${t})`}

        {
          let wRow = wIndex / ${this.filterWidth};
          let wCol = wIndex % ${this.filterWidth};
          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);
        }

        workgroupBarrier();

        var value = 0.0;
        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {
          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {
            let xVal = mm_Asub[localRow + wR][localCol + wC];
            let wVal = mm_Bsub[wR][wC];
            value = fma(xVal, wVal, value);
          }
        }
        ${ol(this.addBias, this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class XN {
  constructor(e, t = false, s = null, r = false) {
    this.variableNames = ["x", "W"], this.uniforms = "pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,", this.workgroupSize = [64, 1, 1], this.workPerThread = 4, this.outputComponent = 4, this.outputShape = e.outShape, this.virtualWidth = Math.ceil(this.outputShape[2] / this.workPerThread) * this.workPerThread;
    const a = [this.outputShape[0], this.outputShape[1], this.virtualWidth, this.outputShape[3]];
    this.dispatchLayout = ye(a), this.dispatch = ce(this.dispatchLayout, a, this.workgroupSize, [this.outputComponent * this.workPerThread, 1, 1]), $(e.dataFormat === "channelsLast", () => "TODO: NCHW is unimplemented"), t && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), this.convInfo = e, this.addBias = t, this.activation = s, this.hasPreluActivation = r, this.shaderKey = `depthwiseVec4_${s}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`;
  }
  getUserCode() {
    const e = (this.workPerThread - 1) * this.convInfo.strideWidth + this.convInfo.filterWidth, t = this.convInfo.strideHeight, s = this.convInfo.strideWidth;
    return `
      ${na(this.activation, this.hasPreluActivation, true, 4)}
      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {
        var value = vec4<f32>(0.0);
        if (col >=0 && col < uniforms.inDims[1]) {
          value = getX(batch, row, col, channel);
        }
        return value;
      }

      ${le("index")} {
        let width0 = uniforms.outShape[3] / ${this.outputComponent};
        let d1 = (index % width0) * ${this.outputComponent};
        var index1 = index / width0;
        let width1 = uniforms.virtualWidth / ${this.workPerThread};
        let c = (index1 % width1) * ${this.workPerThread};
        index1 = index1 / width1;
        let r = index1 % uniforms.outShape[1];
        let batch = index1 / uniforms.outShape[1];

        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${t}, ${s}) - uniforms.pads;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;
        var xVals : array<vec4<f32>, ${e}>;
        var dotProd : array<vec4<f32>, ${this.workPerThread}>;
        for (var i = 0; i < ${this.workPerThread}; i++) {
          dotProd[i] = vec4<f32>(0.0);
        }

        // Use constant instead of uniform can give better performance.
        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {
          let xR = xRCorner + wR;
          if (xR >=0 && xR < uniforms.inDims[0]) {
            for (var i = 0; i < ${e}; i++) {
              xVals[i] = readX(batch, xR, xCCorner + i, d1);
            }
            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {
              let wValue = getW(wR, wC, d1, 0);
              for (var i = 0; i < ${this.workPerThread}; i++) {
                dotProd[i] = fma(xVals[i * ${s} + wC], wValue, dotProd[i]);
              }
            }
          }
        }

        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d1);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            var value = dotProd[i];
            ${ol(this.addBias, this.activation)}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
          }
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class YN {
  constructor(e, t = false, s = null, r = false) {
    this.variableNames = ["x", "W"], this.uniforms = `pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,
      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,`, this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = e.outShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.isChannelsLast = e.dataFormat === "channelsLast", t && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), this.convInfo = e, this.addBias = t, this.activation = s, this.hasPreluActivation = r, this.shaderKey = `depthwise_${this.activation}_${this.isChannelsLast}`;
  }
  getUserCode() {
    const e = this.isChannelsLast ? "getX(batch, xR, xC, d1);" : "getX(batch, d1, xR, xC);";
    return `
      ${na(this.activation, this.hasPreluActivation, false, 4)}

      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast ? "yz" : "zw"}) * uniforms.strides - uniforms.pads;
          let d2 = coords[${this.isChannelsLast ? 3 : 1}];
          let channelMul = uniforms.wShape[3];
          let d1 = d2 / channelMul;
          let q = d2 % channelMul;

          let inputRowStart = xRCCorner.x;
          let inputColStart = xRCCorner.y;
          let inputRowEnd = inputRowStart + uniforms.filterHeight *
              uniforms.dilations[0];
          let inputColEnd = inputColStart + uniforms.filterWidth *
              uniforms.dilations[1];

          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get
          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all
          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.
          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.
          var value = 0.0;

          // Extract if checking out of for loop for performance.
          if (inputRowStart >= 0 && inputColStart >= 0 &&
            inputRowEnd < uniforms.inDims[0] &&
                inputColEnd < uniforms.inDims[1]) {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            } else {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                if (xR < 0 || xR >= uniforms.inDims[0]) {
                  continue;
                }

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  if (xC < 0 || xC >= uniforms.inDims[1]) {
                    continue;
                  }

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            }
            ${ol(this.addBias, this.activation)}
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Due(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dataFormat: u, dilations: c, dimRoundingMode: l } = s, d = An(u);
  let h = c;
  h == null && (h = [1, 1]);
  const p = lt(r.shape, a.shape, o, h, i, l, true, d), f = [{ type: "int32", data: [p.padInfo.top, p.padInfo.left] }, { type: "int32", data: [p.inHeight, p.inWidth] }], m = p.dataFormat === "channelsLast";
  let g;
  return !m && p.inHeight > 16 && p.inWidth > 16 && p.strideHeight === 1 && p.strideWidth === 1 && p.dilationWidth === 1 && p.dilationHeight === 1 && p.inChannels === p.outChannels ? g = new Eue(p.outShape, p.filterHeight, p.filterWidth) : m && p.outHeight > 4 && p.outWidth > 4 && p.strideWidth <= 2 && p.inChannels === p.outChannels && p.dilationHeight === 1 && p.dilationWidth === 1 && p.inChannels % 4 === 0 ? (g = new XN(p), f.push({ type: "int32", data: [g.virtualWidth] })) : (g = new YN(p), f.push({ type: "int32", data: [p.filterHeight] }, { type: "int32", data: [p.filterWidth] }, { type: "int32", data: [p.strideHeight, p.strideWidth] }, { type: "int32", data: [p.dilationHeight, p.dilationWidth] })), t.runWebGPUProgram(g, [r, a], r.dtype, f);
}
const Aue = { kernelName: Xa, backendName: "webgpu", kernelFunc: Due };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Fue {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,
      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.filterShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "depthwise_conv2d_backprop_filter";
  }
  getUserCode() {
    return `
      ${le("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let dm = coords[3];
        let d2 = d1 * uniforms.channelMul + dm;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yR = 0; yR < uniforms.outHeight; yR++) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];

            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC++) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              let dyValue = getDy(b, yR, yC, d2);
              let xValue = getX(b, xR, xC, d1);
              dotProd += xValue * dyValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
}
class Oue {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, channelMul : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.inShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "depthwise_conv2d_backprop_input";
  }
  getUserCode() {
    return `
      ${le("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[3];
        let dyCorner = coords.yz - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }

          let idyR = i32(dyR);
          let wRPerm = uniforms.filterDims[0] - 1 - wR;

          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }

            let idyC = i32(dyC);
            let wCPerm = uniforms.filterDims[1] - 1 - wC;

            for (var dm = 0; dm < uniforms.channelMul; dm++) {
              let d2 = d1 * uniforms.channelMul + dm;
              let xValue = getDy(batch, idyR, idyC, d2);
              let wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Pue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: a } = e, { strides: o, dilations: i, pad: u, dimRoundingMode: c, filterShape: l } = s, d = lt(r.shape, l, o, i, u, c, true), h = new Fue(d), p = [{ type: "int32", data: [d.strideHeight, d.strideWidth] }, { type: "int32", data: [d.padInfo.top, d.padInfo.left] }, { type: "int32", data: [d.filterHeight, d.filterWidth] }, { type: "int32", data: [d.outHeight] }, { type: "int32", data: [d.outWidth] }, { type: "int32", data: [d.inHeight] }, { type: "int32", data: [d.inWidth] }, { type: "int32", data: [d.batchSize] }, { type: "int32", data: [d.outChannels / d.inChannels] }];
  return t.runWebGPUProgram(h, [r, a], "float32", p);
}
const Lue = { kernelName: $d, backendName: "webgpu", kernelFunc: Pue };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function zue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: a } = e, { strides: o, dilations: i, pad: u, dimRoundingMode: c, inputShape: l } = s, d = lt(l, a.shape, o, i, u, c, true), h = new Oue(d), p = [{ type: "int32", data: [d.strideHeight, d.strideWidth] }, { type: "int32", data: [d.filterHeight - 1 - d.padInfo.top, d.filterWidth - 1 - d.padInfo.left] }, { type: "int32", data: [d.filterHeight, d.filterWidth] }, { type: "int32", data: [d.outHeight] }, { type: "int32", data: [d.outWidth] }, { type: "int32", data: [d.outChannels / d.inChannels] }];
  return t.runWebGPUProgram(h, [r, a], r.dtype, p);
}
const Mue = { kernelName: kd, backendName: "webgpu", kernelFunc: zue };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Bue {
  constructor(e) {
    this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [e, e], this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "diag";
  }
  getUserCode() {
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);
          setOutputAtIndex(index, value);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Wue(n) {
  const { inputs: e, backend: t } = n, { x: s } = e, r = [...s.shape, ...s.shape], a = A(s.shape), o = Ce({ inputs: { x: s }, backend: t, attrs: { shape: [a] } }), i = new Bue(a), u = t.runWebGPUProgram(i, [o], o.dtype), c = Ce({ inputs: { x: u }, backend: t, attrs: { shape: r } });
  return t.disposeData(o.dataId), t.disposeData(u.dataId), c;
}
const Vue = { kernelName: Ul, backendName: "webgpu", kernelFunc: Wue };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Uue {
  constructor(e) {
    this.variableNames = ["x", "w"], this.uniforms = "filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.outShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "dilation2d";
  }
  getUserCode() {
    return `
       ${le("index")} {
         if (index < uniforms.size) {
           let neg_infinity = -3.4e38;
           let coords = getOutputCoords();
           let batch = coords.x;
           let d1 = coords.w;
           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;
           let hBeg = outTopLeftCorner.x;
           let wBeg = outTopLeftCorner.y;

           var curVal = neg_infinity;
           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {
             let hIn = hBeg + h * uniforms.dilations[0];

             if (hIn >= 0 && hIn < uniforms.xShape[1]) {
               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {
                 let wIn = wBeg + w * uniforms.dilations[1];

                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {
                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);
                   if (val > curVal) {
                     curVal = val;
                   }
                 }
               }
             }
           }

           setOutputAtIndex(index, curVal);
         }
       }
     `;
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Gue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dilations: u } = s, c = rr(r.shape, a.shape, o, i, "NHWC", u), l = [c.padInfo.top, c.padInfo.left], d = [{ type: "int32", data: [c.filterHeight, c.filterWidth] }, { type: "int32", data: [...l] }, { type: "int32", data: [c.strideHeight, c.strideWidth] }, { type: "int32", data: [c.dilationHeight, c.dilationWidth] }], h = new Uue(c);
  return t.runWebGPUProgram(h, [r, a], r.dtype, d);
}
const Hue = { kernelName: Ya, backendName: "webgpu", kernelFunc: Gue };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class jue {
  constructor(e, t) {
    if (this.variableNames = ["x", "w", "dy"], this.uniforms = "filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,", this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = e.inShape, this.dispatchLayout = ye(e.outShape), this.dispatch = ce(this.dispatchLayout, e.outShape, this.workgroupSize), t !== "float32" && t !== "int32") throw new Error(`Dilation2DBackpropInput only supports float32 and int32
          types, does not support ${t} type.`);
    this.type = t, this.shaderKey = "dilation2DBackpropInput";
  }
  getUserCode() {
    return `
       ${le("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var xRMax = 0;
           var xCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     xRMax = xR;
                     xCMax = xC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.xShape[3] *
               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));
           let value = getDy(b, r, c, d);
           ${si("&result[flatIndexIn]", "value", this.type)}
         }
       }
     `;
  }
}
class que {
  constructor(e, t, s) {
    if (this.variableNames = ["x", "w", "dy"], this.uniforms = "filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,", this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = e.filterShape, this.dispatchLayout = ye(e.outShape), this.dispatch = ce(this.dispatchLayout, e.outShape, this.workgroupSize), s !== "float32" && s !== "int32") throw new Error(`Dilation2DBackpropFilter only supports float32 and int32
          types, does not support ${s} type.`);
    this.type = s, this.shaderKey = "dilation2DBackpropFilter";
  }
  getUserCode() {
    return `
       ${le("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var wRMax = 0;
           var wCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     wRMax = wR;
                     wCMax = wC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);
           let value = getDy(b, r, c, d);
           ${si("&result[flatIndexIn]", "value", this.type)}
         }
       }
     `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Kue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a, dy: o } = e, { strides: i, pad: u, dilations: c } = s, l = rr(r.shape, a.shape, i, u, "NHWC", c), d = a.dtype, h = new que(l, a.shape, d), p = [{ type: "int32", data: [l.filterHeight, l.filterWidth] }, { type: "int32", data: [l.padInfo.top, l.padInfo.left] }, { type: "int32", data: [l.strideHeight, l.strideWidth] }, { type: "int32", data: [l.dilationHeight, l.dilationWidth] }, { type: "int32", data: [A(l.outShape)] }], f = Un({ backend: t, attrs: { shape: a.shape, value: 0, dtype: d } });
  return t.runWebGPUProgram(h, [r, a, o], d, p, f);
}
const Xue = { kernelName: _i, backendName: "webgpu", kernelFunc: Kue };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Yue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a, dy: o } = e, { strides: i, pad: u, dilations: c } = s, l = rr(r.shape, a.shape, i, u, "NHWC", c), d = r.dtype, h = new jue(l, d), p = [{ type: "int32", data: [l.filterHeight, l.filterWidth] }, { type: "int32", data: [l.padInfo.top, l.padInfo.left] }, { type: "int32", data: [l.strideHeight, l.strideWidth] }, { type: "int32", data: [l.dilationHeight, l.dilationWidth] }, { type: "int32", data: [A(l.outShape)] }], f = Un({ backend: t, attrs: { shape: l.inShape, value: 0, dtype: d } });
  return t.runWebGPUProgram(h, [r, a, o], d, p, f);
}
const Que = { kernelName: Ri, backendName: "webgpu", kernelFunc: Yue };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Zue {
  constructor(e, t, s) {
    this.variableNames = ["Image"], this.uniforms = "alpha: f32,", this.workgroupSize = [64, 1, 1], this.pixelsOpType = Ol.DRAW, this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.type = t, this.textureFormat = s, this.shaderKey = `draw_${t}_${s}`;
  }
  getUserCode() {
    let e;
    const t = this.type === "float32" ? "value" : "value / 255.0";
    return e = `
      if (uniforms.numChannels == 1) {
        rgba[0] = ${t};
        rgba[1] = ${t};
        rgba[2] = ${t};
      } else {
        rgba[d] = ${t};
      }`, `
       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;
       ${le("index")} {
         if (index < uniforms.size) {
           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);
           for (var d = 0; d < uniforms.numChannels; d = d + 1) {
             let value = f32(inBuf[index * uniforms.numChannels + d]);
             ${e}
           }
           rgba.x = rgba.x * rgba.w;
           rgba.y = rgba.y * rgba.w;
           rgba.z = rgba.z * rgba.w;
           let coords = getCoordsFromIndex(index);
           textureStore(outImage, vec2<i32>(coords.yx), rgba);
         }
       }
      `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use backend file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Jue(n) {
  const { inputs: e, backend: t, attrs: s } = n, { image: r } = e, { canvas: a, options: o } = s, [i, u] = r.shape.slice(0, 2), { imageOptions: c } = o || {}, l = (c == null ? void 0 : c.alpha) || 1, d = t.device.features.has("bgra8unorm-storage") ? "bgra8unorm" : "rgba8unorm", h = [i, u], p = new Zue(h, r.dtype, d);
  a.width = u, a.height = i;
  const f = "webgpu";
  let m = a.getContext(f), g;
  m || (g = new OffscreenCanvas(u, i), m = g.getContext(f));
  const y = r.shape.length === 3 ? r.shape[2] : 1;
  m.configure({ device: t.device, format: d, usage: GPUTextureUsage.STORAGE_BINDING, alphaMode: "premultiplied" });
  const b = "int32", x = t.makeTensorInfo(h, b), w = t.tensorMap.get(x.dataId);
  w.resource = m.getCurrentTexture(), w.external = true;
  const C = [{ type: "uint32", data: [y] }, { type: "float32", data: [l] }];
  if (t.runWebGPUProgram(p, [r], b, C, x), g) {
    const v = a.getContext("2d");
    if (!v) throw new Error("Please make sure this canvas has only been used for 2d or webgpu context!");
    v.drawImage(g, 0, 0);
  }
  return t.disposeData(x.dataId), r;
}
const ele = { kernelName: Nd, backendName: "webgpu", kernelFunc: Jue };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const QN = dn({ opType: Ae.MUL, cpuKernelImpl: aoe, supportsComplex: true }), tle = { kernelName: So, backendName: "webgpu", kernelFunc: QN };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ZN(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s;
  return ul(r, a, o, "sum", t);
}
const nle = { kernelName: Go, backendName: "webgpu", kernelFunc: ZN };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sle(n) {
  const { inputs: e, backend: t, attrs: s } = n, { equation: r } = s, a = e, { allDims: o, summedDims: i, idDims: u } = sm(r, a.length);
  am(o.length, u, a);
  const { path: c, steps: l } = om(i, u), d = l.length;
  let h = null, p = o.length;
  const f = [];
  for (let m = 0; m < d; ++m) {
    for (const g of l[m]) {
      const { permutationIndices: y, expandDims: b } = rm(p, u[g]);
      let x;
      im(y) ? x = a[g] : (x = Ir({ inputs: { x: a[g] }, backend: t, attrs: { perm: y } }), f.push(x));
      const w = x.shape.slice();
      for (let C = 0; C < b.length; ++C) w.splice(b[C], 0, 1);
      Be(x.shape, w) || (x = Ce({ inputs: { x }, backend: t, attrs: { shape: w } }), f.push(x)), h === null ? h = x : (h = QN({ inputs: { a: x, b: h }, backend: t }), f.push(h));
    }
    m < d - 1 && (c[m] >= 0 && (h = ZN({ inputs: { x: h }, backend: t, attrs: { axis: c[m] - (o.length - p), keepDims: false } }), f.push(h)), p--);
  }
  for (const m of f) m !== h && t.disposeData(m.dataId);
  return h;
}
const rle = { kernelName: Td, backendName: "webgpu", kernelFunc: sle };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ale = st({ opType: ie.ELU }), ole = { kernelName: Za, backendName: "webgpu", kernelFunc: ale };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ile = (n) => {
  const { inputs: e, backend: t } = n, { dy: s, y: r } = e, a = new tf(Ae.ELU_DER, s.shape, r.shape);
  return t.runWebGPUProgram(a, [s, r], s.dtype);
}, ule = { kernelName: cu, backendName: "webgpu", kernelFunc: ile };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const lle = dn({ opType: Ae.EQUAL, dtype: "bool", cpuKernelImpl: Gae }), cle = { kernelName: du, backendName: "webgpu", kernelFunc: lle };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const dle = st({ opType: ie.ERF }), hle = { kernelName: Ja, backendName: "webgpu", kernelFunc: dle };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ple = st({ opType: ie.EXP, cpuKernelImpl: Hae, dtype: "float32" }), fle = { kernelName: eo, backendName: "webgpu", kernelFunc: ple };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function dy(n) {
  const { inputs: e, attrs: t, backend: s } = n, { dim: r } = t, { input: a } = e, o = a.shape.length, i = a.shape.slice();
  let u = r;
  return r < 0 && ($(-(o + 1) <= r, () => `Axis must be in the interval [${-(o + 1)}, ${o}]`), u = o + r + 1), i.splice(u, 0, 1), Ce({ inputs: { x: a }, backend: s, attrs: { shape: i } });
}
const mle = { kernelName: hu, backendName: "webgpu", kernelFunc: dy };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const gle = st({ opType: ie.EXPM1, cpuKernelImpl: jae }), yle = { kernelName: to, backendName: "webgpu", kernelFunc: gle };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class GC {
  constructor(e, t) {
    this.variableNames = ["real", "imag"], this.outputShape = [], this.uniforms = "exponentMultiplier : f32, denominator: f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.component = e, this.shaderKey = `fft_${e}`;
  }
  getUserCode() {
    return `
    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {
      ${this.component === "real" ? "return real * expR - imag * expI;" : "return real * expI + imag * expR;"}
    }

    fn mulMatDFT(batch: i32, index: i32) -> f32 {
      let indexRatio = f32(index) / f32(uniforms.realShape[1]);
      let exponentMultiplierTimesIndexRatio =
          uniforms.exponentMultiplier * indexRatio;

      var result = 0.0;

      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {
        // x = (-2|2 * PI / N) * index * i;
        let x = exponentMultiplierTimesIndexRatio * f32(i);
        let expR = cos(x);
        let expI = sin(x);
        let real = getReal(batch, i);
        let imag = getImag(batch, i);

        result = result +
            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;
      }

      return result;
    }

    ${le("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));
      }
    }
  `;
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function JN(n, e, t) {
  const s = t.tensorMap.get(n.dataId), r = A(n.shape), a = n.shape[n.shape.length - 1], o = r / a, i = [], u = Ce({ inputs: { x: n }, backend: t, attrs: { shape: [o, a] } });
  i.push(u);
  const c = u.shape, l = new GC("real", c), d = new GC("imag", c), h = [{ dataId: s.complexTensorInfos.real.dataId, dtype: s.complexTensorInfos.real.dtype, shape: c }, { dataId: s.complexTensorInfos.imag.dataId, dtype: s.complexTensorInfos.imag.dtype, shape: c }], p = e ? 2 * Math.PI : -2 * Math.PI, f = e ? c[1] : 1, m = [{ type: "float32", data: [p] }, { type: "float32", data: [f] }], g = t.runWebGPUProgram(l, h, "float32", m);
  i.push(g);
  const y = t.runWebGPUProgram(d, h, "float32", m);
  i.push(y);
  const b = il({ inputs: { real: g, imag: y }, backend: t });
  i.push(b);
  const x = Ce({ inputs: { x: b }, backend: t, attrs: { shape: n.shape } });
  return i.forEach((w) => t.disposeData(w.dataId)), x;
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ble(n) {
  const { inputs: e, backend: t } = n, { input: s } = e;
  return JN(s, false, t);
}
const xle = { kernelName: Rd, backendName: "webgpu", kernelFunc: ble };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class wle {
  constructor(e) {
    this.outputShape = [], this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "flipLeftRight";
  }
  getUserCode() {
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Cle = { kernelName: pu, backendName: "webgpu", kernelFunc: ({ inputs: n, backend: e }) => {
  const { image: t } = n, s = e, r = new wle(t.shape);
  return s.runWebGPUProgram(r, [t], t.dtype);
} };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ile = st({ opType: ie.FLOOR, cpuKernelImpl: qae }), Sle = { kernelName: no, backendName: "webgpu", kernelFunc: Ile };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const vle = dn({ opType: Ae.FLOOR_DIV, cpuKernelImpl: Kae, dtype: "int32" }), $le = { kernelName: so, backendName: "webgpu", kernelFunc: vle };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class kle {
  constructor(e, t, s = false) {
    this.pixelsOpType = Ol.FROM_PIXELS, this.outputShape = [0], this.variableNames = [], this.workgroupSize = [256, 1, 1], this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, [t, 1, 1]), this.importVideo = s, this.shaderKey = `fromPixels_${this.importVideo}`;
  }
  getUserCode() {
    const e = this.importVideo ? "textureLoad(src, vec2<i32>(coords.yx));" : "textureLoad(src, vec2<i32>(coords.yx), 0)";
    return `
      @binding(1) @group(0) var src: ${this.importVideo ? "texture_external" : "texture_2d<f32>"};
      ${le("index")} {
        let flatIndex = index * uniforms.numChannels;
        if (flatIndex < uniforms.size) {
          let coords = getCoordsFromIndex(flatIndex);
          let values = ${e};
          for (var i = 0; i < uniforms.numChannels; i = i + 1) {
            result[flatIndex + i] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use backend file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Nle = { kernelName: ed, backendName: "webgpu", kernelFunc: Tle };
let fl, lg = U().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function Tle(n) {
  const { inputs: e, backend: t, attrs: s } = n;
  let { pixels: r } = e;
  const { numChannels: a } = s;
  if (r == null) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  const o = typeof HTMLVideoElement < "u" && r instanceof HTMLVideoElement, i = typeof HTMLImageElement < "u" && r instanceof HTMLImageElement, u = typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement || typeof OffscreenCanvas < "u" && r instanceof OffscreenCanvas, c = typeof ImageBitmap < "u" && r instanceof ImageBitmap, [l, d] = o ? [r.videoWidth, r.videoHeight] : [r.width, r.height], h = [d, l, a], p = U().getBool("WEBGPU_IMPORT_EXTERNAL_TEXTURE") && o, f = o || i;
  if (c || u || f) {
    let b;
    if (p) b = t.device.importExternalTexture({ source: r });
    else {
      if (f) {
        const P = U().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
        (fl == null || P !== lg) && (lg = P, fl = document.createElement("canvas").getContext("2d", { willReadFrequently: lg })), fl.canvas.width = l, fl.canvas.height = d, fl.drawImage(r, 0, 0, l, d), r = fl.canvas;
      }
      const T = GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING, E = t.textureManager.acquireTexture(h[1], h[0], "rgba8unorm", T);
      t.queue.copyExternalImageToTexture({ source: r }, { texture: E }, [h[1], h[0]]), b = E;
    }
    const x = A(h), w = me(h), C = new kle(h, a, p), v = [{ type: "uint32", data: [x] }, { type: "uint32", data: [a] }, { type: "uint32", data: [...w] }], k = t.makeTensorInfo([d, l], "int32"), R = t.tensorMap.get(k.dataId);
    R.resource = b;
    const N = t.runWebGPUProgram(C, [k], "int32", v);
    return t.disposeData(k.dataId), N;
  }
  const m = r.data;
  let g = m;
  if (a != null && a !== 4) {
    g = new Uint8Array(r.width * r.height * a);
    const b = m.length;
    let x = 0;
    for (let w = 0; w < b; w++) w % 4 < a && (g[x++] = m[w]);
  }
  const y = t.makeTensorInfo(h, "int32", new Int32Array(g));
  return t.uploadToGPU(y.dataId), y;
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Rle {
  constructor(e, t, s, r, a) {
    this.uniforms = "varianceEpsilon : f32,", this.workgroupSize = [128, 1, 1], this.size = true, this.variableNames = ["x", "mean", "variance"], Re(e, t), Re(e, s), this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), r != null && (Re(e, r), this.variableNames.push("offset")), a != null && (Re(e, a), this.variableNames.push("scale")), this.offsetShape = r, this.scaleShape = a, this.shaderKey = "batchNorm";
  }
  getUserCode() {
    let e = "0.0";
    this.offsetShape != null && (e = "getOffsetByOutputIndex(index)");
    let t = "1.0";
    return this.scaleShape != null && (t = "getScaleByOutputIndex(index)"), `
      ${le("index")} {
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${e};
          let scaleValue = ${t};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const _le = { kernelName: ro, backendName: "webgpu", kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
  const { x: s, scale: r, offset: a, mean: o, variance: i } = n, { varianceEpsilon: u } = e, c = t, l = [s, o, i];
  let d = null;
  a != null && (d = a.shape, l.push(a));
  let h = null;
  r != null && (h = r.shape, l.push(r));
  const p = new Rle(s.shape, o.shape, i.shape, d, h), f = [{ type: "float32", data: [u] }];
  return c.runWebGPUProgram(p, l, s.dtype, f);
} };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ele(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a, bias: o, preluActivationWeights: i } = e, { strides: u, pad: c, dataFormat: l, dilations: d, dimRoundingMode: h, activation: p, leakyreluAlpha: f } = s, m = An(l), g = lt(r.shape, a.shape, u, d, c, h, false, m);
  return qN({ x: r, filter: a, convInfo: g, backend: t, bias: o, preluActivationWeights: i, leakyreluAlpha: f, activation: p });
}
const Dle = { kernelName: xa, backendName: "webgpu", kernelFunc: Ele };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ale(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a, bias: o, preluActivationWeights: i } = e, { strides: u, pad: c, dilations: l, dimRoundingMode: d, activation: h, leakyreluAlpha: p } = s;
  let f = l;
  f == null && (f = [1, 1]), $(qt(u, f), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${f}'`);
  const m = lt(r.shape, a.shape, u, f, c, d, true), g = [r, a], y = o != null, b = i != null;
  y && g.push(o), b && g.push(i);
  const x = [{ type: "int32", data: [m.padInfo.top, m.padInfo.left] }, { type: "int32", data: [m.inHeight, m.inWidth] }];
  let w;
  return m.outHeight > 4 && m.outWidth > 4 && m.strideWidth <= 2 && m.inChannels === m.outChannels && m.dilationHeight === 1 && m.dilationWidth === 1 && m.inChannels % 4 === 0 ? (w = new XN(m, y, h, b), x.push({ type: "int32", data: [w.virtualWidth] })) : (w = new YN(m, y, h, b), x.push({ type: "int32", data: [m.filterHeight] }, { type: "int32", data: [m.filterWidth] }, { type: "int32", data: [m.strideHeight, m.strideWidth] }, { type: "int32", data: [m.dilationHeight, m.dilationWidth] })), h === "leakyrelu" && (x.push({ type: "float32", data: [p] }), w.uniforms += " alpha : f32,"), t.runWebGPUProgram(w, g, "float32", x);
}
const Fle = { kernelName: wa, backendName: "webgpu", kernelFunc: Ale };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Ole {
  constructor(e, t) {
    this.variableNames = ["A", "indices"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = `gathernd_${e}`, this.sliceDim = e, this.uniforms = `sliceDim : i32, strides : ${Pt(e)},`;
  }
  getUserCode() {
    let e;
    return this.sliceDim > 1 ? e = "uniforms.strides[j]" : e = "uniforms.strides", `
      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${e};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ple(n) {
  const { inputs: e, backend: t } = n, { params: s, indices: r } = e, a = r.shape, o = a[a.length - 1], i = A(s.shape), [u, c, l, d] = dc(s, r), h = Ce({ inputs: { x: r }, backend: t, attrs: { shape: [c, o] } }), p = Ce({ inputs: { x: s }, backend: t, attrs: { shape: [A(s.shape) / l, l] } });
  if (t.shouldExecuteOnCPU([s, r]) || s.dtype === "string") {
    const b = t.readSync(r.dataId), x = t.bufferSync(s), w = Xae(b, x, s.dtype, c, o, l, d, s.shape, i);
    return t.makeTensorInfo(u, s.dtype, w.values);
  }
  const f = new Ole(o, [c, l]), m = [{ type: "int32", data: [o] }, { type: "int32", data: d }], g = t.runWebGPUProgram(f, [p, h], p.dtype, m), y = Ce({ inputs: { x: g }, backend: t, attrs: { shape: u } });
  return t.disposeData(h.dataId), t.disposeData(p.dataId), t.disposeData(g.dataId), y;
}
const Lle = { kernelName: mu, backendName: "webgpu", kernelFunc: Ple };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class zle {
  constructor(e, t) {
    this.variableNames = ["A", "indices"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.slice(), this.aShape = e, this.outputShape = t, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "gather";
  }
  getUserCode() {
    const e = Mle(this.aShape);
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${e}));
        }
      }
    `;
  }
}
function Mle(n) {
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], t = [];
  for (let s = 0; s < n.length; s++) s === 2 ? t.push("indexZ") : t.push(`${e[s]}`);
  return t.join();
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function eT(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, indices: a } = e, { axis: o, batchDims: i } = s, u = Ee(o, r.shape)[0], c = gh(r, a, u, i), l = A(a.shape), d = [], h = Ce({ inputs: { x: r }, backend: t, attrs: { shape: [c.batchSize, c.outerSize, c.dimSize, c.sliceSize] } }), p = Ce({ inputs: { x: a }, backend: t, attrs: { shape: [c.batchSize, l / c.batchSize] } });
  d.push(h), d.push(p);
  const f = [c.batchSize, c.outerSize, l / c.batchSize, c.sliceSize];
  if (t.shouldExecuteOnCPU([r, a])) {
    const x = t.tensorMap.get(p.dataId).values, w = Oe(p.shape, p.dtype, x), v = t.tensorMap.get(h.dataId).values, k = Oe(h.shape, h.dtype, v), R = Yae(k, w, f);
    return d.forEach((N) => t.disposeData(N.dataId)), t.makeTensorInfo(c.outputShape, R.dtype, R.values);
  }
  const m = new zle(h.shape, f), g = t.runWebGPUProgram(m, [h, p], h.dtype);
  d.push(g);
  const y = Ce({ inputs: { x: g }, backend: t, attrs: { shape: c.outputShape } });
  return d.forEach((b) => t.disposeData(b.dataId)), y;
}
const Ble = { kernelName: fu, backendName: "webgpu", kernelFunc: eT };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Wle = dn({ opType: Ae.GREATER, cpuKernelImpl: Zae, dtype: "bool" }), Vle = { kernelName: gu, backendName: "webgpu", kernelFunc: Wle };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ule = dn({ opType: Ae.GREATER_EQUAL, dtype: "bool", cpuKernelImpl: Qae }), Gle = { kernelName: ao, backendName: "webgpu", kernelFunc: Ule };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Hle(n) {
  const { inputs: e, backend: t } = n, { input: s } = e;
  return JN(s, true, t);
}
const jle = { kernelName: _d, backendName: "webgpu", kernelFunc: Hle };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const qle = st({ opType: ie.IS_FINITE, dtype: "bool" }), Kle = { kernelName: io, backendName: "webgpu", kernelFunc: qle };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Xle = st({ opType: ie.IS_INF, dtype: "bool" }), Yle = { kernelName: uo, backendName: "webgpu", kernelFunc: Xle };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Qle = st({ opType: ie.IS_NAN, dtype: "bool" }), Zle = { kernelName: lo, backendName: "webgpu", kernelFunc: Qle };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Jle(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { alpha: a } = s, o = [{ type: "float32", data: [a] }], i = new Tc(r.shape, ie.LEAKYRELU, "alpha : f32,");
  return t.runWebGPUProgram(i, [r], "float32", o);
}
const ece = { kernelName: co, backendName: "webgpu", kernelFunc: Jle };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const tce = dn({ opType: Ae.LESS, dtype: "bool", cpuKernelImpl: eoe }), nce = { kernelName: yu, backendName: "webgpu", kernelFunc: tce };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const sce = dn({ opType: Ae.LESS_EQUAL, dtype: "bool", cpuKernelImpl: Jae }), rce = { kernelName: bu, backendName: "webgpu", kernelFunc: sce };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class ace {
  constructor(e) {
    this.variableNames = [], this.outputShape = [], this.uniforms = "start : f32, step : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [e], this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "linSpace";
  }
  getUserCode() {
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function oce(n) {
  const { backend: e, attrs: t } = n, { start: s, stop: r, num: a } = t, o = (r - s) / (a - 1), i = new ace(a), u = [{ type: "float32", data: [s] }, { type: "float32", data: [o] }];
  return e.runWebGPUProgram(i, [], "float32", u);
}
const ice = { kernelName: xu, backendName: "webgpu", kernelFunc: oce };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const uce = st({ opType: ie.LOG, cpuKernelImpl: toe }), lce = { kernelName: ho, backendName: "webgpu", kernelFunc: uce };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const cce = st({ opType: ie.LOG1P }), dce = { kernelName: po, backendName: "webgpu", kernelFunc: cce };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const hce = dn({ opType: Ae.LOGICAL_AND, dtype: "bool" }), pce = { kernelName: wu, backendName: "webgpu", kernelFunc: hce };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const fce = st({ opType: ie.LOGICAL_NOT }), mce = { kernelName: Cu, backendName: "webgpu", kernelFunc: fce };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const gce = dn({ opType: Ae.LOGICAL_OR }), yce = { kernelName: Iu, backendName: "webgpu", kernelFunc: gce };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const tT = `
  var powValue = 0.0;
  let basis = uniforms.bias + uniforms.alpha * sum;
  if (uniforms.beta == 0.5) {
    powValue = inverseSqrt(basis);
  } else if (uniforms.beta == 1.0) {
    powValue = 1.0 / basis;
  } else {
    powValue = exp(log(basis) * (-uniforms.beta));
  }
`;
class bce {
  constructor(e) {
    this.outputShape = [], this.variableNames = ["x"], this.uniforms = "radius : i32, bias : f32, alpha : f32, beta : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "lrn";
  }
  getUserCode() {
    return `
    ${le("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];
        let d = coords[3];

        let x = getX(b, r, c, d);
        var sum = 0.0;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let idx = d + i;
          if (idx >= 0 && idx < uniforms.xShape[3]) {
            let z = getX(b, r, c, idx);
            sum = sum + z * z;
          }
        }
        ${tT}

        setOutputAtIndex(index, x * powValue);
      }
    }
  `;
  }
}
class xce {
  constructor(e, t) {
    this.outputShape = [], this.variableNames = ["x"], this.uniforms = "radius : i32, bias : f32, alpha : f32, beta : f32,", this.workgroupSize = [256, 1, 1], this.maxAllowRadius = 16, $(t <= this.maxAllowRadius, () => `Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${t}`), this.outputShape = e, this.elementsPerWorkgroup = this.workgroupSize[0] - 2 * this.maxAllowRadius, this.dispatchLayout = { x: [3], y: [2], z: [0, 1] }, this.dispatch = ce(this.dispatchLayout, this.outputShape, [this.elementsPerWorkgroup, this.workgroupSize[1], this.workgroupSize[2]]), this.shaderKey = "lrn_shared";
  }
  getUserCode() {
    return `
    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;
    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};
    const maxAllowRadius = ${this.maxAllowRadius};

    ${le()} {
      let localDepth = i32(localId.x);
      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;
      let xDepth = workgroupDepth + localDepth - maxAllowRadius;
      let b = i32(globalId.z) / uniforms.xShape[1];
      let r = i32(globalId.z) - b * uniforms.xShape[1];
      let c = i32(globalId.y);
      let d = workgroupDepth + localDepth;

      var x = 0.0;
      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {
        x = getX(b, r, c, xDepth);
      }
      lrnSub[localDepth] = x;
      workgroupBarrier();

      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {
        var sum = 0.0;
        let index = localDepth + maxAllowRadius;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let z = lrnSub[index + i];
          sum = sum + z * z;
        }
        ${tT}

        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);
      }
    } `;
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function wce(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { depthRadius: a, bias: o, alpha: i, beta: u } = s;
  let c;
  a > 16 ? c = new bce(r.shape) : c = new xce(r.shape, a);
  const l = [{ type: "int32", data: [a] }, { type: "float32", data: [o] }, { type: "float32", data: [i] }, { type: "float32", data: [u] }];
  return t.runWebGPUProgram(c, [r], r.dtype, l);
}
const Cce = { kernelName: fo, backendName: "webgpu", kernelFunc: wce };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Ice {
  constructor(e) {
    this.outputShape = [], this.variableNames = ["inputImage", "outputImage", "dy"], this.uniforms = "depthRadius : i32, bias : f32, alpha : f32, beta : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "lrn_grad";
  }
  getUserCode() {
    return `
    ${le("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];

        let MIN_DEPTH_BEGIN = 0;
        let MAX_DEPTH_END = uniforms.outShape[3];
        var result = 0.0;
        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {
          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);
          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);

          var norm = 0.0;
          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            } else {
              break;
            }
          }

          norm = uniforms.alpha * norm + uniforms.bias;

          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              var dyi = -2.0 * uniforms.alpha * uniforms.beta
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * uniforms.beta);
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            } else {
              break;
            }
          }
        }

        setOutputAtIndex(index, result);
      }
    }
  `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Sce(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, y: a, dy: o } = e, { depthRadius: i, bias: u, alpha: c, beta: l } = s, d = new Ice(r.shape), h = [{ type: "int32", data: [i] }, { type: "float32", data: [u] }, { type: "float32", data: [c] }, { type: "float32", data: [l] }];
  return t.runWebGPUProgram(d, [r, a, o], r.dtype, h);
}
const vce = { kernelName: Su, backendName: "webgpu", kernelFunc: Sce };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const $ce = dn({ opType: Ae.MAX, cpuKernelImpl: soe }), kce = { kernelName: go, backendName: "webgpu", kernelFunc: $ce };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Nce(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: a, strides: o, pad: i, dimRoundingMode: u } = s, l = zt(r.shape, a, o, 1, i, u);
  return UN(r, l, "max", t);
}
const Tce = { kernelName: yo, backendName: "webgpu", kernelFunc: Nce };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Rce(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: a, strides: o, pad: i, dataFormat: u, dimRoundingMode: c } = s, l = [1, 1, 1], d = Sn(r.shape, a, o, l, i, c, u), h = new v0(d, "max"), p = [{ type: "int32", data: [d.strideDepth, d.strideHeight, d.strideWidth] }, { type: "int32", data: [d.padInfo.front, d.padInfo.top, d.padInfo.left] }, { type: "int32", data: [d.inDepth, d.inHeight, d.inWidth] }, { type: "int32", data: [d.effectiveFilterDepth, d.effectiveFilterHeight, d.effectiveFilterWidth] }];
  return t.runWebGPUProgram(h, [r], r.dtype, p);
}
const _ce = { kernelName: vu, backendName: "webgpu", kernelFunc: Rce };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Ece {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.inShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "maxPool2DBackprop";
  }
  getUserCode() {
    return `
      ${le("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);
            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            let curPosValue = wR * uniforms.filterDims[1] + wC;
            let mask = select(0.0, 1.0, maxPosValue == curPosValue);
            dotProd += dyValue * mask;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
}
class Dce {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.uniforms = `strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.inShape, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "maxPool3DBackprop";
  }
  getUserCode() {
    return `
      ${le("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;

        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;
              let mask = select(0.0, 1.0, maxPosValue == curPosValue);
              dotProd += dyValue * mask;
            }
          }
        }

        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ace(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, o = a, { filterSize: i, strides: u, pad: c, dimRoundingMode: l } = s, d = [1, 1, 1], h = Sn(o.shape, i, u, d, c, l), p = new v0(h, "max", true);
  let f = [{ type: "int32", data: [h.strideDepth, h.strideHeight, h.strideWidth] }, { type: "int32", data: [h.padInfo.front, h.padInfo.top, h.padInfo.left] }, { type: "int32", data: [h.inDepth, h.inHeight, h.inWidth] }, { type: "int32", data: [h.effectiveFilterDepth, h.effectiveFilterHeight, h.effectiveFilterWidth] }];
  const m = t.runWebGPUProgram(p, [o], "int32", f), g = new Dce(h);
  f = [{ type: "int32", data: [h.strideDepth, h.strideHeight, h.strideWidth] }, { type: "int32", data: [h.effectiveFilterDepth - 1 - h.padInfo.front, h.effectiveFilterHeight - 1 - h.padInfo.top, h.effectiveFilterWidth - 1 - h.padInfo.left] }, { type: "int32", data: [h.effectiveFilterDepth, h.effectiveFilterHeight, h.effectiveFilterWidth] }, { type: "int32", data: [h.outDepth] }, { type: "int32", data: [h.outHeight] }, { type: "int32", data: [h.outWidth] }];
  const y = t.runWebGPUProgram(g, [r, m], o.dtype, f);
  return t.disposeData(m.dataId), y;
}
const Fce = { kernelName: jl, backendName: "webgpu", kernelFunc: Ace };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Oce(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a, output: o } = e, i = a;
  LN([a, o], "maxPoolGrad");
  const { filterSize: u, strides: c, pad: l, dimRoundingMode: d } = s, h = zt(i.shape, u, c, 1, l, d), p = new bd(h, "max", true);
  let f = [{ type: "int32", data: [h.strideHeight, h.strideWidth] }, { type: "int32", data: [h.padInfo.top, h.padInfo.left] }, { type: "int32", data: [h.dilationHeight, h.dilationWidth] }, { type: "int32", data: [h.inHeight, h.inWidth] }, { type: "int32", data: [h.effectiveFilterHeight, h.effectiveFilterWidth] }];
  const m = t.runWebGPUProgram(p, [i], "int32", f), g = new Ece(h);
  f = [{ type: "int32", data: [h.strideHeight, h.strideWidth] }, { type: "int32", data: [h.effectiveFilterHeight - 1 - h.padInfo.top, h.effectiveFilterWidth - 1 - h.padInfo.left] }, { type: "int32", data: [h.dilationHeight, h.dilationWidth] }, { type: "int32", data: [h.effectiveFilterHeight, h.effectiveFilterWidth] }, { type: "int32", data: [h.outHeight] }, { type: "int32", data: [h.outWidth] }];
  const y = t.runWebGPUProgram(g, [r, m], i.dtype, f);
  return t.disposeData(m.dataId), y;
}
const Pce = { kernelName: Hl, backendName: "webgpu", kernelFunc: Oce };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Lce(n) {
  const { inputs: e, backend: t, attrs: s } = n, { filterSize: r, strides: a, pad: o, includeBatchInIndex: i } = s, { x: u } = e;
  $(u.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${u.shape.length}.`);
  const c = [1, 1];
  $(qt(a, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);
  const l = zt(u.shape, r, a, c, o), d = [{ type: "int32", data: [l.strideHeight, l.strideWidth] }, { type: "int32", data: [l.padInfo.top, l.padInfo.left] }, { type: "int32", data: [l.dilationHeight, l.dilationWidth] }, { type: "int32", data: [l.inHeight, l.inWidth] }, { type: "int32", data: [l.effectiveFilterHeight, l.effectiveFilterWidth] }];
  let h = new bd(l, "max", false);
  const p = t.runWebGPUProgram(h, [u], u.dtype, d);
  h = new bd(l, "max", true, true, i);
  const f = t.runWebGPUProgram(h, [u], "int32", d);
  return [p, f];
}
const zce = { kernelName: ql, backendName: "webgpu", kernelFunc: Lce };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Mce(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s;
  return ul(r, a, o, "min", t);
}
const Bce = { kernelName: xo, backendName: "webgpu", kernelFunc: Mce };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Wce = dn({ opType: Ae.MIN, cpuKernelImpl: roe }), Vce = { kernelName: wo, backendName: "webgpu", kernelFunc: Wce };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Uce {
  constructor(e, t, s) {
    this.uniforms = "", this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t.map((r, a) => r[0] + e[a] + r[1]), this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.xShape = e, t.map((r, a) => {
      this.uniforms += ` pad${a} : vec2<i32>,`;
    }), this.offset = s === "reflect" ? 0 : 1, this.shaderKey = `mirrorPad_${s}`;
  }
  getUserCode() {
    const e = this.xShape.length, t = this.xShape.map((c, l) => `uniforms.pad${l}[0]`).join(","), s = this.xShape.map((c, l) => `uniforms.pad${l}[0] + uniforms.xShape${e > 1 ? `[${l}]` : ""}`).join(","), r = e === 1 ? "start" : "start[i]", a = e === 1 ? "end" : "end[i]", o = e === 1 ? "outC" : "outC[i]", i = Pt(e), u = e > 1 ? ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, e) : "coords";
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          let start = ${i}(${t});
          let end = ${i}(${s});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${e}; i = i + 1) {
            if (${o} < ${r}) {
              ${o} = ${r} * 2 - ${o} - ${this.offset};
            } else if(${o} >= ${a}) {
              ${o} = (${a} - 1) * 2 - ${o} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${u}));
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Gce = { kernelName: Co, backendName: "webgpu", kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
  const { x: s } = n, { paddings: r, mode: a } = e, o = t, i = r.map((l) => ({ type: "int32", data: [l[0], l[1]] })), u = new Uce(s.shape, r, a);
  return o.runWebGPUProgram(u, [s], s.dtype, i);
} };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Hce = dn({ opType: Ae.MOD }), jce = { kernelName: Io, backendName: "webgpu", kernelFunc: Hce };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class qce {
  constructor(e, t) {
    this.variableNames = ["probs"], this.outputShape = [], this.uniforms = "seed : f32, numOutcomes: i32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [e, t], this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "multinomial";
  }
  getUserCode() {
    return `
    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {
      let HASHSCALE1 = 443.8975;
      let p = resultUV * seed;
      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);
      p3 = p3 + dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${le("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords[0];

        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),
            f32(coords[0]) / f32(uniforms.outShape[0]));
        let r = random(uniforms.seed, resUV);
        var cdf = 0.0;
        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {
          cdf = cdf + getProbs(batch, i);

          if (r < cdf) {
            setOutputAtIndexI32(index, i);
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);
      }
    }
  `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Kce {
  constructor(e) {
    this.variableNames = ["logits"], this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = [this.outputShape[0], 1, 1], this.outputShape[1] >= 4096 ? this.workgroupSize = [256, 1, 1] : this.workgroupSize = [64, 1, 1], this.shaderKey = "softmax";
  }
  getUserCode() {
    return `
    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;
    var<workgroup> rowMaxShared : f32;
    var<workgroup> rowSumShared : f32;
    const blockSize = ${this.workgroupSize[0]};
    ${le("index")} {
      let row = index / blockSize;
      let tid = i32(localId.x);
      let cols = uniforms.outShape[1];

      var threadMax = -3.402823e+38f;
      for (var col = tid; col < cols; col += blockSize) {
        let value = getLogits(row, col);
        threadMax = max(threadMax, value);
      }
      if (tid < cols) {
        buf[tid] = threadMax;
      }
      workgroupBarrier();

      var reduceSize = min(cols, blockSize);
      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
        reduceSize = currSize + (reduceSize & 1);
        if (tid < currSize) {
          buf[tid] = max(buf[tid], buf[tid + reduceSize]);
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowMaxShared = buf[0];
      }
      workgroupBarrier();

      var threadSum = 0.0;
      for (var col = tid; col < cols; col += blockSize) {
        let subExp = exp(getLogits(row, col) - rowMaxShared);
        threadSum += subExp;
      }
      buf[tid] = threadSum;
      workgroupBarrier();

      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {
        if (tid < currSize) {
          buf[tid] = buf[tid] + buf[tid + currSize];
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowSumShared = buf[0];
      }
      workgroupBarrier();

      for (var col = tid; col < cols; col += blockSize) {
        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;
        setOutputAtCoords(row, col, value);
      }
  }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nT(n) {
  const { inputs: e, backend: t, attrs: s } = n, { logits: r } = e, { dim: a } = s, o = Ce({ inputs: { x: r }, backend: t, attrs: { shape: [A(r.shape) / r.shape[a], r.shape[a]] } }), i = new Kce(o.shape), u = t.runWebGPUProgram(i, [o], r.dtype), c = Ce({ inputs: { x: u }, backend: t, attrs: { shape: r.shape } });
  return t.disposeData(o.dataId), t.disposeData(u.dataId), c;
}
const Xce = { kernelName: Ho, backendName: "webgpu", kernelFunc: nT };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Yce(n) {
  const { inputs: e, backend: t, attrs: s } = n, { logits: r } = e, { numSamples: a, seed: o, normalized: i } = s, u = i ? r : nT({ inputs: { logits: r }, backend: t, attrs: { dim: r.shape.length - 1 } }), c = u.shape[0], l = u.shape[1], d = new qce(c, a), h = [{ type: "float32", data: [o] }, { type: "int32", data: [l] }], p = t.runWebGPUProgram(d, [u], "int32", h);
  return i || t.disposeData(u.dataId), p;
}
const Qce = { kernelName: $u, backendName: "webgpu", kernelFunc: Yce };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Zce(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (t.shouldExecuteOnCPU([s])) {
    const a = t.tensorMap.get(s.dataId), [o, i] = ooe(a.values, s.shape, s.dtype);
    return t.makeTensorInfo(i, s.dtype, o);
  }
  const r = new Tc(s.shape, ie.NEG);
  return t.runWebGPUProgram(r, [s], s.dtype);
}
const Jce = { kernelName: ku, backendName: "webgpu", kernelFunc: Zce };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ede(n) {
  console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: a } = e, { maxOutputSize: o, iouThreshold: i, scoreThreshold: u } = s, c = t.readSync(r.dataId), l = t.readSync(a.dataId), { selectedIndices: d } = ah(c, l, o, i, u);
  return t.makeTensorInfo([d.length], "int32", new Int32Array(d));
}
const tde = { kernelName: Tu, backendName: "webgpu", kernelFunc: ede };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function nde(n) {
  console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: a } = e, { maxOutputSize: o, iouThreshold: i, scoreThreshold: u, softNmsSigma: c } = s, l = t.readSync(r.dataId), d = t.readSync(a.dataId), h = o, p = i, f = u, m = c, { selectedIndices: g, selectedScores: y } = oh(l, d, h, p, f, m);
  return [t.makeTensorInfo([g.length], "int32", new Int32Array(g)), t.makeTensorInfo([y.length], "float32", new Float32Array(y))];
}
const sde = { kernelName: Ru, backendName: "webgpu", kernelFunc: nde };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class rde {
  constructor(e, t) {
    this.variableNames = ["x"], this.uniforms = "onValue : f32, offValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [e, t], this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "onehot";
  }
  getUserCode() {
    return `
      ${le("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,
                                      f32(i32(round(getX(coords.x))) == coords.y)));
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ade(n) {
  const { inputs: e, backend: t, attrs: s } = n, { indices: r } = e, { dtype: a, depth: o, onValue: i, offValue: u } = s, c = A(r.shape), l = new rde(c, o), d = Ce({ inputs: { x: r }, backend: t, attrs: { shape: [c] } }), h = [{ type: "float32", data: [i] }, { type: "float32", data: [u] }], p = t.runWebGPUProgram(l, [d], a, h);
  t.disposeData(d.dataId);
  const f = [...r.shape, o], m = Ce({ inputs: { x: p }, backend: t, attrs: { shape: f } });
  return t.disposeData(p.dataId), m;
}
const ode = { kernelName: vo, backendName: "webgpu", kernelFunc: ade };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sf(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (s.dtype === "complex64") {
    const r = Ah({ inputs: { input: s }, backend: t }), a = sf({ inputs: { x: r }, backend: t }), o = zm({ inputs: { input: s }, backend: t }), i = sf({ inputs: { x: o }, backend: t }), u = il({ inputs: { real: a, imag: i }, backend: t });
    return t.disposeData(r.dataId), t.disposeData(a.dataId), t.disposeData(o.dataId), t.disposeData(i.dataId), u;
  } else return Un({ attrs: { shape: s.shape, dtype: s.dtype, value: s.dtype === "string" ? "" : 0 }, backend: t });
}
const ide = { kernelName: qu, backendName: "webgpu", kernelFunc: sf };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function sT(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (s.dtype === "string") throw new Error("onesLike is not supported under string dtype");
  if (s.dtype === "complex64") {
    const r = Ah({ inputs: { input: s }, backend: t }), a = sT({ inputs: { x: r }, backend: t }), o = zm({ inputs: { input: s }, backend: t }), i = sf({ inputs: { x: o }, backend: t }), u = il({ inputs: { real: a, imag: i }, backend: t });
    return t.disposeData(r.dataId), t.disposeData(a.dataId), t.disposeData(o.dataId), t.disposeData(i.dataId), u;
  } else return Un({ attrs: { shape: s.shape, dtype: s.dtype, value: 1 }, backend: t });
}
const ude = { kernelName: _u, backendName: "webgpu", kernelFunc: sT };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function lde(n) {
  const { inputs: e, backend: t, attrs: s } = n, { axis: r } = s;
  if (e.length === 1) return dy({ inputs: { input: e[0] }, backend: t, attrs: { dim: r } });
  const a = e[0].shape, o = e[0].dtype;
  e.forEach((l) => {
    nn(a, l.shape, "All tensors passed to stack must have matching shapes"), $(o === l.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const i = [], u = e.map((l) => {
    const d = dy({ inputs: { input: l }, backend: t, attrs: { dim: r } });
    return i.push(d), d;
  }), c = jN({ inputs: u, backend: t, attrs: { axis: r } });
  return i.forEach((l) => t.disposeData(l.dataId)), c;
}
const cde = { kernelName: Eu, backendName: "webgpu", kernelFunc: lde };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function rT(n, e = false) {
  const t = n.length, s = Pt(t), r = n.map((d, h) => `uniforms.pad${h}[0]`).join(","), a = n.map((d, h) => `uniforms.pad${h}[0] + uniforms.xShape${t > 1 ? `[${h}]` : ""}`).join(","), o = t > 1 ? `${s}(${r})` : `${r}`, i = t > 1 ? `${s}(${a})` : `${a}`, u = t > 1 ? "any(paddedCoords < start)" : "paddedCoords < start", c = t > 1 ? "any(paddedCoords >= end)" : "paddedCoords >= end", l = t > 1 ? ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, t) : "coords";
  return `
        let start = ${o};
        let end = ${i};
        if (${u} || ${c}) {
          setOutputAtIndex(index, ${e ? 0 : "uniforms.constantValue"});
        } else {
          let coords = paddedCoords - start;
          setOutputAtIndex(index, getX(${l}));
        }
  `;
}
class dde {
  constructor(e, t) {
    this.variableNames = ["x"], this.uniforms = "constantValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t.map((s, r) => s[0] + e[r] + s[1]), this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), t.map((s, r) => {
      this.uniforms += ` pad${r} : vec2<i32>,`;
    }), this.xShape = e, this.shaderKey = "pad";
  }
  getUserCode() {
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          let paddedCoords = getCoordsFromIndex(index);
          ${rT(this.xShape)}
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const hde = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { paddings: a, constantValue: o } = s;
  if (a.every((c) => Be(c, [0, 0]))) return us({ inputs: { x: r }, backend: t });
  if (A(r.shape) === 0) {
    const c = a.map((l, d) => l[0] + r.shape[d] + l[1]);
    return Un({ backend: t, attrs: { shape: c, value: o, dtype: r.dtype } });
  }
  const i = [{ type: "float32", data: [o] }];
  a.map((c) => i.push({ type: "int32", data: [c[0], c[1]] }));
  const u = new dde(r.shape, a);
  return t.runWebGPUProgram(u, [r], r.dtype, i);
}, pde = { kernelName: $o, backendName: "webgpu", kernelFunc: hde };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const fde = dn({ opType: Ae.POW }), mde = { kernelName: ko, backendName: "webgpu", kernelFunc: fde };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function gde(n) {
  const { inputs: e, backend: t } = n, { x: s, alpha: r } = e, a = new tf(Ae.PRELU, s.shape, r.shape);
  return t.runWebGPUProgram(a, [s, r], "float32");
}
const yde = { kernelName: No, backendName: "webgpu", kernelFunc: gde };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function bde(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, keepDims: o } = s;
  return ul(r, a, o, "prod", t);
}
const xde = { kernelName: To, backendName: "webgpu", kernelFunc: bde };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const wde = (n) => {
  const { backend: e, attrs: t } = n, { start: s, stop: r, step: a, dtype: o } = t, i = loe(s, r, a, o);
  return e.makeTensorInfo([i.length], o, i);
}, Cde = { kernelName: Xl, backendName: "webgpu", kernelFunc: wde };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ide = dn({ opType: Ae.DIV }), Sde = { kernelName: Qa, backendName: "webgpu", kernelFunc: Ide };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const vde = st({ opType: ie.RECIPROCAL }), $de = { kernelName: Ro, backendName: "webgpu", kernelFunc: vde };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const kde = st({ opType: ie.RELU }), Nde = { kernelName: _o, backendName: "webgpu", kernelFunc: kde };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Tde = st({ opType: ie.RELU6 }), Rde = { kernelName: Ao, backendName: "webgpu", kernelFunc: Tde };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class _de {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.uniforms = "adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [e[0], t, s, e[3]], this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "resizeBilinear";
  }
  getUserCode() {
    return `
      ${le("index")} {
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ede(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r } = e, { alignCorners: a, size: o, halfPixelCenters: i } = s, [u, c] = o, l = a && u > 1 ? 1 : 0, d = a && c > 1 ? 1 : 0, p = [{ type: "float32", data: [l, d] }, { type: "float32", data: [i ? 0.5 : 0] }], f = new _de(r.shape, u, c);
  return t.runWebGPUProgram(f, [r], "float32", p);
}
const Dde = { kernelName: Do, backendName: "webgpu", kernelFunc: Ede };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Ade {
  constructor(e, t) {
    this.variableNames = ["dy"], this.uniforms = `effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,
       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.alignCorners = t, this.shaderKey = `resizeBilinearBackprop_${t}`;
  }
  getUserCode() {
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let dxR = f32(dyR) * uniforms.heightScale;
              let topDxRIndex = i32(floor(dxR));
              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));
              let dxRLerp = dxR - f32(topDxRIndex);
              let inverseDxRLerp = 1.0 - dxRLerp;

              let dxC = f32(dyC) * uniforms.widthScale;
              let leftDxCIndex = i32(floor(dxC));
              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));
              let dxCLerp = dxC - f32(leftDxCIndex);
              let inverseDxCLerp = 1.0 - dxCLerp;

              if (r == topDxRIndex && c == leftDxCIndex) {
                // topLeft
                accumulator +=
                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
              }

              if (r == topDxRIndex && c == rightDxCIndex) {
                // topRight
                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
              }

              if (r == bottomDxRIndex && c == leftDxCIndex) {
                // bottomLeft
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
              }

              if (r == bottomDxRIndex && c == rightDxCIndex) {
                // bottomRight
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Fde(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: a } = e, { alignCorners: o } = s, [, i, u] = r.shape, [, c, l] = a.shape, d = [o && c > 1 ? i - 1 : i, o && l > 1 ? u - 1 : u], h = [o && c > 1 ? c - 1 : c, o && l > 1 ? l - 1 : l], p = d[0] / h[0], f = d[1] / h[1], m = 1 / p, g = 1 / f, y = Math.ceil(m) * 2 + 2, b = Math.ceil(g) * 2 + 2, x = new Ade(r.shape, o), w = [{ type: "int32", data: d }, { type: "int32", data: h }, { type: "float32", data: [p] }, { type: "float32", data: [f] }, { type: "float32", data: [m] }, { type: "float32", data: [g] }, { type: "int32", data: [y] }, { type: "int32", data: [b] }];
  return t.runWebGPUProgram(x, [a], a.dtype, w);
}
const Ode = { kernelName: Fu, backendName: "webgpu", kernelFunc: Fde };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Pde {
  constructor(e, t, s, r) {
    this.variableNames = ["x"], this.uniforms = "adjustHeightWidth : vec2<f32>, roundBase : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [e[0], t, s, e[3]], this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.halfPixelCenters = r, this.shaderKey = `resizeNearest_${r}`;
  }
  getUserCode() {
    let e;
    return this.halfPixelCenters ? e = "max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))" : e = "vec2<f32>(rc) * effectiveInputOverOutputRatioRC", `
      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${e};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Lde(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r } = e, { alignCorners: a, halfPixelCenters: o, size: i } = s, [u, c] = i, l = a && u > 1 ? 1 : 0, d = a && c > 1 ? 1 : 0, p = [{ type: "float32", data: [l, d] }, { type: "float32", data: [a ? 0.5 : 0] }], f = new Pde(r.shape, u, c, o);
  return t.runWebGPUProgram(f, [r], r.dtype, p);
}
const zde = { kernelName: Eo, backendName: "webgpu", kernelFunc: Lde };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Mde {
  constructor(e, t) {
    this.variableNames = ["dy"], this.uniforms = `effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,
       winHeight : i32, winWidth : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.alignCorners = t, this.shaderKey = `resizeNearestNeigborBackprop_${t}`;
  }
  getUserCode() {
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *
                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));

              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *
                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));

              let sourceNearestRow =
                  i32(min(f32(uniforms.outShape[1] - 1),
                  ${this.alignCorners ? "floor(sourceFracRow + 0.5)" : "floor(sourceFracRow)"}));

              let sourceNearestCol =
                  i32(min(f32(uniforms.outShape[2] - 1),
                  ${this.alignCorners ? "floor(sourceFracCol + 0.5)" : "floor(sourceFracCol)"}));

              if (r == sourceNearestRow && c == sourceNearestCol) {
                accumulator += getDy(b, dyR, dyC, d);
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Bde(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: a } = e, { alignCorners: o } = s, [, i, u] = r.shape, [, c, l] = a.shape, d = [o && c > 1 ? i - 1 : i, o && l > 1 ? u - 1 : u], h = [o && c > 1 ? c - 1 : c, o && l > 1 ? l - 1 : l], p = d[0] / h[0], f = d[1] / h[1], m = 1 / p, g = 1 / f, y = Math.ceil(m) * 2 + 2, b = Math.ceil(g) * 2 + 2, x = new Mde(r.shape, o), w = [{ type: "int32", data: d }, { type: "int32", data: h }, { type: "float32", data: [m] }, { type: "float32", data: [g] }, { type: "int32", data: [y] }, { type: "int32", data: [b] }];
  return t.runWebGPUProgram(x, [a], a.dtype, w);
}
const Wde = { kernelName: Au, backendName: "webgpu", kernelFunc: Bde };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Vde {
  constructor(e) {
    this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = " axis : vec4<i32>,", this.shaderKey = "reverse";
  }
  getUserCode() {
    return `
      
      // Using uniform variables as judging conditions, so the function has
      // coherent execution within all threads.
      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {
        var reverseCoords = coords;
        if (uniforms.axis[0] == 1) {
          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;
        }
        if (uniforms.axis[1] == 1) {
          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;
        }
        if (uniforms.axis[2] == 1) {
          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;
        }
        if (uniforms.axis[3] == 1) {
          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;
        }

        return reverseCoords;
      }
    
      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let reverseCoords = getReverseCoords(coords);
          setOutputAtIndex(index, getX(reverseCoords[0],
              reverseCoords[1], reverseCoords[2], reverseCoords[3]));
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ude(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { dims: a } = s, o = r.shape.length;
  if (o === 0) return us({ inputs: { x: r }, backend: t });
  const i = r.shape, u = [1, 1, 1, 1];
  i.forEach((g, y) => {
    const b = y + 4 - o;
    u[b] = g;
  });
  const c = Ee(a, r.shape), l = [0, 0, 0, 0];
  c.forEach((g) => {
    const y = g + 4 - o;
    l[y] = 1;
  });
  const d = [{ type: "int32", data: l }], h = Ce({ inputs: { x: r }, backend: t, attrs: { shape: u } }), p = new Vde(u), f = t.runWebGPUProgram(p, [h], h.dtype, d);
  t.disposeData(h.dataId);
  const m = Ce({ inputs: { x: f }, backend: t, attrs: { shape: i } });
  return t.disposeData(f.dataId), m;
}
const Gde = { kernelName: Fo, backendName: "webgpu", kernelFunc: Ude };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Hde {
  constructor(e, t) {
    this.outputShape = [], this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = `centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`, this.shaderKey = "rotate", this.outputShape = e, typeof t == "number" ? (this.uniforms += " fillValue : f32,", this.fillSnippet = "var outputValue = uniforms.fillValue;", this.shaderKey += "_float") : (this.uniforms += " fillValue : vec3<f32>,", this.fillSnippet = "var outputValue = uniforms.fillValue[coords[3]];", this.shaderKey += "_vec3");
  }
  getUserCode() {
    return `
        ${le("index")} {
          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const jde = { kernelName: Ku, backendName: "webgpu", kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
  const { image: s } = n, { radians: r, fillValue: a, center: o } = e, i = t, u = new Hde(s.shape, a), [c, l] = ch(o, s.shape[1], s.shape[2]), d = [{ type: "float32", data: [c] }, { type: "float32", data: [l] }, { type: "float32", data: [Math.sin(r)] }, { type: "float32", data: [Math.cos(r)] }];
  return typeof a == "number" ? d.push({ type: "float32", data: [Number.parseFloat(a.toFixed(2))] }) : d.push({ type: "float32", data: a }), i.runWebGPUProgram(u, [s], s.dtype, d);
} };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const qde = st({ opType: ie.ROUND }), Kde = { kernelName: Oo, backendName: "webgpu", kernelFunc: qde };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Xde = st({ opType: ie.RSQRT, cpuKernelImpl: coe }), Yde = { kernelName: Po, backendName: "webgpu", kernelFunc: Xde };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Qc {
  constructor(e, t, s, r, a, o, i, u = true) {
    this.variableNames = ["updates", "indices"], this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = o, this.type = i, this.sumDupeIndices = u, this.dispatchLayout = ye(e), this.dispatch = ce(this.dispatchLayout, e, this.workgroupSize), this.sliceDimGreaterThanOne = t > 1, this.shaderKey = `scatter_${s}_${r}_${this.sliceDimGreaterThanOne}_${i}_${u}_${a.length}`;
    const c = Pt(a.length);
    this.uniforms = `sliceDim : i32, strides: ${c}, updatesSize: i32,`, this.updatesRank = r, this.indicesRank = s;
  }
  getUserCode() {
    let e = "";
    this.indicesRank === 1 ? e = "coords[0]" : this.indicesRank === 2 && (e = "coords[0], j");
    const t = `getIndices(${e})`, s = this.sliceDimGreaterThanOne ? "uniforms.strides[j]" : "uniforms.strides";
    let r = "", a = "";
    this.dispatchLayout.x.length === 1 ? (r = "flattenedIndex", a = `
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `) : this.dispatchLayout.x.length === 2 && (r = "vec2<i32>(flattenedIndex, coords[1])", a = `
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        // N.B. |updates| could be a scalar tensor, conceptually representing a
        // 2D tensor with all values equal to that. By design, its size must be
        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|
        // gives the other.
        let sliceSize = uniforms.outShape[1];
        let d0 = index / sliceSize;
        let d1 = index - d0 * sliceSize;
        return vec2<i32>(d0, d1);
      }
      `);
    const i = `getUpdates(${Array.from({ length: this.updatesRank }, (c, l) => `coords[${l}]`).join(", ")})`;
    return `
    ${a}
      ${le("index")} {
        if (index < uniforms.updatesSize) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${t}));
            flattenedIndex = flattenedIndex + indexInside * ${s};
          }
          let updateValue =
              ${xi(this.type)}(${i});
          let flatIndex = getOutputIndexFromCoords(${r});

          ${this.sumDupeIndices ? si("&result[flatIndex]", "updateValue", this.type) : "atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}
        }
      }`;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Qde(n) {
  const { inputs: e, backend: t, attrs: s } = n, { indices: r, updates: a } = e, { shape: o } = s, { sliceRank: i, numUpdates: u, sliceSize: c, strides: l, outputSize: d } = ds(a, r, o), h = [d / c, c];
  if (d === 0) return t.makeTensorInfo(o, r.dtype);
  const p = Ce({ inputs: { x: r }, backend: t, attrs: { shape: [u, i] } }), f = Ce({ inputs: { x: a }, backend: t, attrs: { shape: [u, c] } }), m = f.dtype, g = Un({ backend: t, attrs: { shape: h, value: 0, dtype: m } }), y = A(f.shape), b = [{ type: "int32", data: [i] }, { type: "int32", data: l }, { type: "int32", data: [y] }], x = new Qc(f.shape, i, p.shape.length, f.shape.length, l, h, m), w = t.runWebGPUProgram(x, [f, p], m, b, g), C = Ce({ inputs: { x: w }, backend: t, attrs: { shape: o } });
  return t.disposeData(p.dataId), t.disposeData(f.dataId), t.disposeData(w.dataId), C;
}
const Zde = { kernelName: Ou, backendName: "webgpu", kernelFunc: Qde };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Jde {
  constructor(e, t) {
    this.outputShape = [], this.variableNames = ["sortedSequence", "values"], this.uniforms = "numInputs : i32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.side = t, this.shaderKey = `search_sorted_${t}`;
  }
  getUserCode() {
    return `
      fn findBound(batch: i32, value: f32) -> i32 {
        var left = i32(0);
        var right = uniforms.numInputs;
        while (left < right) {
          var mid = (left + right) / 2;
          if (getSortedSequence(batch, mid) ${this.side === "left" ? "<" : "<="} value) {
            left = mid + 1;
          } else {
            right = mid;
          }
        }
        return right;
      }

      ${le("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let value = getValuesByOutputIndex(index);
          setOutputAtIndexI32(index, findBound(coords[0], value));
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ehe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { sortedSequence: r, values: a } = e, { side: o } = s, i = new Jde([a.shape[0], a.shape[1]], o), u = [{ type: "int32", data: [r.shape[1]] }];
  return t.runWebGPUProgram(i, [r, a], "int32", u);
}
const the = { kernelName: Lu, backendName: "webgpu", kernelFunc: ehe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class nhe {
  constructor(e, t, s) {
    this.variableNames = ["c", "a", "b"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.cRank = e, this.rank = s, this.shaderKey = "select";
  }
  getUserCode() {
    let e, t;
    if (this.rank > 4) throw Error(`Where for rank ${this.rank} is not yet supported`);
    if (this.rank === 1) t = "resRC", e = "resRC";
    else {
      const r = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], a = [], o = [];
      for (let i = 0; i < this.outputShape.length; i++) o.push(`${r[i]}`), i < this.cRank && a.push(`${r[i]}`);
      e = a.join(), t = o.join();
    }
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${e});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${t}));
          } else {
            setOutputAtIndex(index, getB(${t}));
          }
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function she(n) {
  const { inputs: e, backend: t } = n, { condition: s, t: r, e: a } = e, o = new nhe(s.shape.length, r.shape, r.shape.length);
  return t.runWebGPUProgram(o, [s, r, a], tn(r.dtype, a.dtype));
}
const rhe = { kernelName: zu, backendName: "webgpu", kernelFunc: she };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ahe = st({ opType: ie.SELU }), ohe = { kernelName: Lo, backendName: "webgpu", kernelFunc: ahe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ihe = st({ opType: ie.SIGMOID }), uhe = { kernelName: Wo, backendName: "webgpu", kernelFunc: ihe };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const lhe = st({ opType: ie.SIGN }), che = { kernelName: Bo, backendName: "webgpu", kernelFunc: lhe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const dhe = st({ opType: ie.SIN }), hhe = { kernelName: zo, backendName: "webgpu", kernelFunc: dhe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const phe = st({ opType: ie.SINH }), fhe = { kernelName: Mo, backendName: "webgpu", kernelFunc: phe };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const mhe = st({ opType: ie.SOFTPLUS }), ghe = { kernelName: Vo, backendName: "webgpu", kernelFunc: mhe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class yhe {
  constructor(e, t, s, r, a, o) {
    this.variableNames = ["x"], this.outputShape = [], this.uniforms = "", this.workgroupSize = [64, 1, 1], this.size = true;
    const i = new Array(r.length);
    for (let u = 0; u < i.length; u++) i[u] = r[a[u]];
    this.outputShape = i, this.newDim = a, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.xShape = e, this.paddedXShape = t, this.uniforms += `reshapedPaddedXShape : ${Pt(r.length)}, paddedXShapeStrides : ${Pt(o)}, `, s.map((u, c) => {
      this.uniforms += ` pad${c} : vec2<i32>,`;
    }), this.shaderKey = `spaceToBatchND_${a}`;
  }
  getUserCode() {
    const e = Pt(this.outputShape.length), t = MN(this.newDim);
    return `
      ${kp(this.paddedXShape, "PaddedX")}
      ${le("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${e}(${t}), uniforms.reshapedPaddedXShape);
          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);
          ${rT(this.xShape, true)}
        }
      }
    `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bhe = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: a, paddings: o } = s;
  $(r.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");
  const i = a.reduce((b, x) => b * x), u = [[0, 0]];
  u.push(...o);
  for (let b = 1 + a.length; b < r.shape.length; ++b) u.push([0, 0]);
  const c = u.map((b, x) => b[0] + r.shape[x] + b[1]), l = Zr(c, a, i, false), d = Jr(l.length, a.length, false), h = ea(c, a, i, false), p = me(c), f = new yhe(r.shape, c, u, l, d, p.length), m = [{ type: "int32", data: l }, { type: "int32", data: p }];
  u.map((b) => m.push({ type: "int32", data: [b[0], b[1]] }));
  const g = t.runWebGPUProgram(f, [r], r.dtype, m), y = Ce({ inputs: { x: g }, backend: t, attrs: { shape: h } });
  return t.disposeData(g.dataId), y;
}, xhe = { kernelName: Bu, backendName: "webgpu", kernelFunc: bhe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class whe {
  constructor(e, t, s) {
    this.variableNames = ["input", "indices", "segmentIds"], this.outputShape = [], this.uniforms = "segmentSize : i32, sparseSize : i32,", this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = e, this.type = s, this.dispatchLayout = ye([t]), this.dispatch = ce(this.dispatchLayout, [t], this.workgroupSize), this.shaderKey = "sparseSegmentSum";
  }
  getUserCode() {
    return `
    ${le("index")} {
      if (index < uniforms.sparseSize) {
        let indexInSegmentIds = index / uniforms.segmentSize;
        let indexInSegment = index % uniforms.segmentSize;
        let indexInInput = indices[indexInSegmentIds];
        let segmentId = segmentIds[indexInSegmentIds];

        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];
        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;
        ${si("&result[outIndex]", "value", this.type)}
      }
    }
  `;
  }
}
class Che {
  constructor(e, t) {
    this.variableNames = ["segmentIds"], this.outputShape = [], this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = [e], this.dispatchLayout = ye(t), this.dispatch = ce(this.dispatchLayout, t, this.workgroupSize), this.shaderKey = "sparseSegmentIdCountProgram";
  }
  getUserCode() {
    return `
    ${le("index")} {
      if (index < uniforms.segmentIdsShape) {
        let segmentId = segmentIds[index];
        ${si("&result[segmentId]", "1", "int32")}
      }
    }
  `;
  }
}
class Ihe {
  constructor(e, t) {
    this.variableNames = ["segmentSum", "sameSegmentIdCount"], this.outputShape = [], this.uniforms = "segmentSize : i32", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.type = t, this.dispatchLayout = ye(e), this.dispatch = ce(this.dispatchLayout, e, this.workgroupSize), this.shaderKey = "sparseSegmentMean";
  }
  getUserCode() {
    return `
    ${le("index")} {
      if (index < uniforms.size) {
        let segmentId = index / uniforms.segmentSize;
        let count = sameSegmentIdCount[segmentId];
        if (count != 0) {
          ${this.type === "float32" ? "setOutputAtIndex(index, segmentSum[index] / f32(count));" : "setOutputAtIndexI32(index, segmentSum[index] / count);"}
        }
      }
    }
  `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function aT(n, e, t, s = false, r) {
  const o = A(n.shape) / n.shape[0], i = n.dtype, u = A(e.shape), c = r.readSync(t.dataId), d = u > 0 ? c[u - 1] + 1 : 0;
  let h;
  const p = n.shape.slice();
  p[0] = d;
  const f = u * o, m = Un({ backend: r, attrs: { shape: p, value: 0, dtype: i } });
  h = new whe(p, f, i);
  let g = [{ type: "int32", data: [o] }, { type: "int32", data: [f] }];
  const y = r.runWebGPUProgram(h, [n, e, t], i, g, m);
  if (s) return y;
  const b = Un({ backend: r, attrs: { shape: [d], value: 0, dtype: "int32" } });
  h = new Che(d, t.shape);
  const x = r.runWebGPUProgram(h, [t], "int32", null, b), w = Un({ backend: r, attrs: { shape: p, value: 0, dtype: i } });
  h = new Ihe(p, i), g = [{ type: "int32", data: [o] }];
  const C = r.runWebGPUProgram(h, [y, x], i, g, w);
  return r.disposeData(y.dataId), r.disposeData(x.dataId), C;
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function She(n) {
  const { inputs: e, backend: t } = n, { data: s, indices: r, segmentIds: a } = e;
  return aT(s, r, a, false, t);
}
const vhe = { kernelName: Ql, backendName: "webgpu", kernelFunc: She };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function $he(n) {
  const { inputs: e, backend: t } = n, { data: s, indices: r, segmentIds: a } = e;
  return aT(s, r, a, true, t);
}
const khe = { kernelName: Zl, backendName: "webgpu", kernelFunc: $he };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Nhe {
  constructor(e, t) {
    this.variableNames = ["A"], this.workgroupSize = [64, 1, 1], this.size = true;
    const s = new Array(e.length);
    for (let r = 0; r < s.length; r++) s[r] = e[r] * t[r];
    this.outputShape = s, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.rank = this.outputShape.length, this.shaderKey = "tile";
  }
  getUserCode() {
    const e = The(this.rank, "uniforms.");
    return `
      ${le("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${e}));
        }
      }
    `;
  }
}
function The(n, e = "") {
  if (n >= 5) throw Error(`Tile for rank ${n} is not yet supported`);
  if (n === 1) return `(resRC % ${e}aShape)`;
  const t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [];
  for (let r = 0; r < n; r++) s.push(`(${t[r]} % ${e}aShape[${r}])`);
  return s.join();
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function $0(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { reps: a } = s;
  if (t.shouldExecuteOnCPU([r]) || r.dtype === "string" || r.shape.length >= 5) {
    const u = t.readSync(r.dataId), c = r.dtype === "string" ? u.map((h) => Fs(h)) : u, l = Oe(r.shape, r.dtype, c), d = yoe(l, a);
    return t.makeTensorInfo(d.shape, d.dtype, d.values);
  }
  const o = new Nhe(r.shape, a);
  return t.runWebGPUProgram(o, [r], r.dtype);
}
const Rhe = { kernelName: Hr, backendName: "webgpu", kernelFunc: $0 };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _he(n) {
  const { inputs: e, backend: t, attrs: s } = n, { sparseIndices: r, sparseValues: a, defaultValue: o } = e, { outputShape: i } = s, { sliceRank: u, numUpdates: c, sliceSize: l, strides: d, outputSize: h } = ds(a, r, i), p = false;
  if (a.dtype === "string") {
    const R = t.bufferSync(r), N = t.bufferSync(a), T = Fs(t.readSync(o.dataId)[0]), S = doe(R, N, i, h, l, c, u, d, T, p);
    return t.makeTensorInfo(i, S.dtype, S.values);
  }
  const f = [h / l, l], m = Ce({ inputs: { x: r }, backend: t, attrs: { shape: [c, u] } }), g = a.shape.length ? Ce({ inputs: { x: a }, backend: t, attrs: { shape: [c, l] } }) : us({ inputs: { x: a }, backend: t }), y = g.dtype, b = t.makeTensorInfo([], y, un(1, y)), x = Ce({ inputs: { x: o }, backend: t, attrs: { shape: Array(f.length).fill(1) } }), w = $0({ inputs: { x }, backend: t, attrs: { reps: f } }), C = A([c, l]), v = [{ type: "int32", data: [u] }, { type: "int32", data: d }, { type: "int32", data: [C] }];
  switch (c) {
    case 0:
      break;
    case 1:
      {
        const R = new Qc([c, l], u, m.shape.length, g.shape.length, d, f, y, p);
        t.runWebGPUProgram(R, [g, m], y, v, w);
      }
      break;
    default:
      {
        const R = new Qc([c, l], u, m.shape.length, b.shape.length, d, f, y, p);
        t.runWebGPUProgram(R, [b, m], y, v, w);
      }
      {
        const R = new Qc([c, l], u, m.shape.length, g.shape.length, d, f, y);
        t.runWebGPUProgram(R, [g, m], y, v, w);
      }
  }
  const k = Ce({ inputs: { x: w }, backend: t, attrs: { shape: i } });
  return t.disposeData(m.dataId), t.disposeData(g.dataId), t.disposeData(x.dataId), t.disposeData(b.dataId), t.disposeData(w.dataId), k;
}
const Ehe = { kernelName: Vu, backendName: "webgpu", kernelFunc: _he };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Dhe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { numOrSizeSplits: a, axis: o } = s, i = Ee(o, r.shape)[0], u = mh(r, a, i), c = r.shape.length, l = new Array(c).fill(0), d = r.shape.slice();
  return u.map((h) => {
    const p = [...d];
    p[i] = h;
    const f = Rc({ inputs: { x: r }, backend: t, attrs: { begin: l, size: p } });
    return l[i] += h, f;
  });
}
const Ahe = { kernelName: Wu, backendName: "webgpu", kernelFunc: Dhe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Fhe = st({ opType: ie.SQRT }), Ohe = { kernelName: Uo, backendName: "webgpu", kernelFunc: Fhe };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Phe = { kernelName: Jl, backendName: "webgpu", kernelFunc: ({ inputs: n, backend: e }) => {
  const { x: t } = n, s = e, r = new Tc(t.shape, ie.SQUARE);
  return s.runWebGPUProgram(r, [t], t.dtype);
} };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Lhe = dn({ opType: Ae.SQUARED_DIFFERENCE }), zhe = { kernelName: jo, backendName: "webgpu", kernelFunc: Lhe };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Mhe({ inputs: n, attrs: e, backend: t }) {
  const { x: s } = n, r = new Tc(s.shape, ie.STEP, "stepAlpha : f32,"), a = [{ type: "float32", data: [e.alpha] }];
  return t.runWebGPUProgram(r, [s], s.dtype, a);
}
const Bhe = { kernelName: jr, backendName: "webgpu", kernelFunc: Mhe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class Whe {
  constructor(e) {
    this.variableNames = ["x"], this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);
    const t = Pt(this.outputShape.length);
    this.uniforms = `begin : ${t},  strides : ${t}, `, this.shaderKey = "stridedSlice";
  }
  getUserCode() {
    const e = this.outputShape.length;
    let t = "";
    if (e === 1) t = "coords * uniforms.strides + uniforms.begin";
    else {
      let r = 0;
      t = this.outputShape.map((a, o) => (r++, this.outputShape.length === 1 ? `coords * uniforms.strides[${o}] + uniforms.begin[${o}]` : `coords[${r - 1}] * uniforms.strides[${o}] + uniforms.begin[${o}]`)).join(",");
    }
    return `
       ${le("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${t}));
         }
       }
     `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Vhe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { begin: a, end: o, strides: i, beginMask: u, endMask: c, ellipsisMask: l, newAxisMask: d, shrinkAxisMask: h } = s, { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: x, strides: w } = uh(r.shape, a, o, i, u, c, l, d, h);
  let C;
  if (m) C = Ce({ inputs: { x: r }, backend: t, attrs: { shape: f } });
  else if (g || y) {
    $(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    const v = ih(b, x, w), k = Rc({ inputs: { x: r }, backend: t, attrs: { begin: b, size: v } });
    C = Ce({ inputs: { x: k }, backend: t, attrs: { shape: f } }), t.disposeData(k.dataId);
  } else if (t.shouldExecuteOnCPU([r])) {
    const k = t.readSync(r.dataId), R = Oe(r.shape, r.dtype, k), N = foe(p, R, w, b);
    C = t.makeTensorInfo(f, r.dtype, N.values);
  } else {
    const k = new Whe(p), R = [{ type: "int32", data: b }, { type: "int32", data: w }], N = t.runWebGPUProgram(k, [r], r.dtype, R);
    C = Ce({ inputs: { x: N }, backend: t, attrs: { shape: f } }), t.disposeData(N.dataId);
  }
  return C;
}
const Uhe = { kernelName: Uu, backendName: "webgpu", kernelFunc: Vhe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ghe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { separator: r, nGramWidths: a, leftPad: o, rightPad: i, padWidth: u, preserveShortSequences: c } = s, { data: l, dataSplits: d } = e, h = t.readSync(l.dataId), p = t.readSync(d.dataId), [f, m] = moe(h, p, r, a, o, i, u, c);
  return [t.makeTensorInfo([f.length], "string", f), t.makeTensorInfo(d.shape, "int32", m)];
}
const Hhe = { kernelName: ec, backendName: "webgpu", kernelFunc: Ghe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const jhe = dn({ opType: Ae.SUB, cpuKernelImpl: goe, supportsComplex: true }), qhe = { kernelName: qo, backendName: "webgpu", kernelFunc: jhe };
/**
* @license
* Copyright 2022 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Khe = st({ opType: ie.TAN }), Xhe = { kernelName: Ko, backendName: "webgpu", kernelFunc: Khe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Yhe = st({ opType: ie.TANH }), Qhe = { kernelName: Xo, backendName: "webgpu", kernelFunc: Yhe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Zhe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { tensor: r, indices: a, updates: o } = e, { sliceRank: i, numUpdates: u, sliceSize: c, strides: l, outputSize: d } = ds(o, a, r.shape), h = [d / c, c];
  if (d === 0) return t.makeTensorInfo(r.shape, a.dtype);
  const p = [], f = Ce({ inputs: { x: a }, backend: t, attrs: { shape: [u, i] } });
  p.push(f);
  const m = Ce({ inputs: { x: o }, backend: t, attrs: { shape: [u, c] } });
  p.push(m);
  const g = Ce({ inputs: { x: r }, backend: t, attrs: { shape: h } });
  p.push(g);
  const y = $0({ inputs: { x: g }, backend: t, attrs: { reps: Array(h.length).fill(1) } }), b = new Qc([u, c], i, f.shape.length, m.shape.length, l, h, r.dtype, false), x = A([u, c]), w = [{ type: "int32", data: [i] }, { type: "int32", data: l }, { type: "int32", data: [x] }], C = t.runWebGPUProgram(b, [m, f], g.dtype, w, y);
  p.push(C);
  const v = Ce({ inputs: { x: C }, backend: t, attrs: { shape: r.shape } });
  return p.forEach((k) => t.disposeData(k.dataId)), v;
}
const Jhe = { kernelName: Pu, backendName: "webgpu", kernelFunc: Zhe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class epe {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = `inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`, this.shaderKey = "swap";
  }
  getUserCode() {
    return `
        ${le("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `;
  }
}
class tpe {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = "inputSize : i32, firstPass : i32, k : i32,", this.shaderKey = "merge";
  }
  getUserCode() {
    return `
        ${le("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ml(n, e) {
  e !== null && n.disposeData(e.dataId);
}
function HC(n) {
  let e = 1;
  for (; e < n; ) e *= 2;
  return e;
}
function npe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { k: a, sorted: o } = s, i = r.shape, u = i[i.length - 1];
  if (t.shouldExecuteOnCPU([r])) {
    const C = t.readSync(r.dataId), [v, k] = boe(C, i, r.dtype, a, o);
    return [t.makeTensorInfo(v.shape, v.dtype, v.values), t.makeTensorInfo(k.shape, k.dtype, k.values)];
  }
  if (a === 0) return i[i.length - 1] = 0, [t.makeTensorInfo(i, r.dtype, []), t.makeTensorInfo(i, "int32", [])];
  if (u === 1) return [r, Un({ attrs: { shape: i, dtype: "int32", value: 0 }, backend: t })];
  const l = A(i) / u, d = Ce({ inputs: { x: r }, attrs: { shape: [l, u] }, backend: t }), h = HC(a), p = HC(u);
  let f = null;
  const m = () => f === null ? [d, d] : [d, f], g = (C, v, k) => {
    const R = m(), N = new epe(k), S = [{ type: "int32", data: [u] }, { type: "int32", data: [f === null ? 1 : 0] }, { type: "float32", data: [Number.NEGATIVE_INFINITY] }, { type: "int32", data: [C] }, { type: "int32", data: [v] }], E = f;
    f = t.runWebGPUProgram(N, R, "int32", S), ml(t, E);
  };
  for (let C = 1; C < h; C *= 2) {
    const v = C * 2;
    for (let k = C; k >= 1; k /= 2) g(v, k, [l, p]);
  }
  for (let C = p; C > h; C /= 2) {
    const v = m(), k = new tpe([l, C / 2]), N = [{ type: "int32", data: [u] }, { type: "int32", data: [f === null ? 1 : 0] }, { type: "int32", data: [h] }], T = f;
    f = t.runWebGPUProgram(k, v, "int32", N), ml(t, T);
    const S = h / 2, E = S * 2;
    for (let P = S; P >= 1; P /= 2) g(E, P, f.shape);
  }
  let y = f;
  f = Rc({ inputs: { x: f }, backend: t, attrs: { begin: 0, size: [l, a] } }), ml(t, y);
  let b = eT({ inputs: { x: d, indices: f }, backend: t, attrs: { axis: 1, batchDims: 1 } });
  ml(t, d);
  const x = i.slice(0, -1);
  x.push(a), y = f, f = Ce({ inputs: { x: f }, attrs: { shape: x }, backend: t }), ml(t, y);
  const w = b;
  return b = Ce({ inputs: { x: b }, attrs: { shape: x }, backend: t }), ml(t, w), [b, f];
}
const spe = { kernelName: Gu, backendName: "webgpu", kernelFunc: npe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class rpe {
  constructor(e) {
    this.variableNames = ["Image", "Transforms"], this.uniforms = "interpolationModeId : i32, fillModeId : i32, fillValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ye(this.outputShape), this.dispatch = ce(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "transform";
  }
  getUserCode() {
    return `
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${le("index")} {
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `;
  }
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ape(n) {
  const { inputs: e, backend: t, attrs: s } = n, { image: r, transforms: a } = e, { interpolation: o, fillMode: i, fillValue: u, outputShape: c } = s, [l, d, h, p] = r.shape, [f, m] = c ?? [d, h], g = [l, f, m, p], y = new rpe(g), b = o === "nearest" ? 1 : 2;
  let x;
  switch (i) {
    case "constant":
      x = 1;
      break;
    case "reflect":
      x = 2;
      break;
    case "wrap":
      x = 3;
      break;
    case "nearest":
      x = 4;
      break;
    default:
      x = 1;
      break;
  }
  const w = [{ type: "int32", data: [b] }, { type: "int32", data: [x] }, { type: "float32", data: [u] }];
  return t.runWebGPUProgram(y, [r, a], "float32", w);
}
const ope = { kernelName: Hu, backendName: "webgpu", kernelFunc: ape };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ipe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { value: r } = e;
  let { axis: a } = s;
  a < 0 && (a += r.shape.length);
  const o = r, i = o.shape.length, u = r.shape[a], c = new Array(i - 1);
  let l = 0;
  for (let m = 0; m < i; m++) m !== a && (c[l++] = o.shape[m]);
  const d = [], h = new Array(i).fill(0), p = o.shape.slice();
  p[a] = 1;
  const f = new Array(u);
  for (let m = 0; m < f.length; m++) {
    h[a] = m;
    const g = Rc({ inputs: { x: o }, backend: t, attrs: { begin: h, size: p } }), y = Ce({ inputs: { x: g }, backend: t, attrs: { shape: c } });
    f[m] = y, d.push(g);
  }
  return d.forEach((m) => t.disposeData(m.dataId)), f;
}
const upe = { kernelName: ju, backendName: "webgpu", kernelFunc: ipe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
class lpe {
  constructor(e, t, s) {
    if (this.outputShape = [], this.variableNames = ["x", "segmentIds"], this.uniforms = "numSegments : i32, xSize: i32,", this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = t, this.dispatchLayout = ye(e), this.dispatch = ce(this.dispatchLayout, e, this.workgroupSize), s !== "float32" && s !== "int32") throw new Error(`UnsortedSegmentSum only supports float32 and int32
              types, does not support ${s} type.`);
    this.type = s, this.shaderKey = "unsortedSegmentSum";
  }
  getUserCode() {
    return `
    ${le("index")} {
      if (index < uniforms.xSize) {
        let coords = getXCoordsFromIndex(index);
        let b = coords[0];
        let inCol = coords[1];

        let segmentId = i32(getSegmentIds(inCol));
        if (segmentId >= 0) {
          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;
          let value = getX(b, inCol);

          ${si("&result[flatIndex]", "value", this.type)}
        }
      }
    }
  `;
  }
}
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function cpe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, segmentIds: a } = e, { numSegments: o } = s, i = r.shape.length, u = [];
  let c = 0;
  const l = ct([c], i);
  let d = r;
  l != null && (d = Ir({ inputs: { x: r }, backend: t, attrs: { perm: l } }), u.push(d), c = it(1, i)[0]);
  const h = ux(d.shape, c, o), p = A([d.shape[c]]), f = Ce({ inputs: { x: d }, backend: t, attrs: { shape: [-1, p] } });
  u.push(f);
  const m = r.dtype, g = [f.shape[0], o], y = Un({ backend: t, attrs: { shape: g, value: 0, dtype: m } }), b = new lpe(f.shape, g, m), x = [{ type: "int32", data: [o] }, { type: "int32", data: [A(f.shape)] }], w = t.runWebGPUProgram(b, [f, a], m, x, y), C = Ce({ inputs: { x: w }, backend: t, attrs: { shape: h } });
  u.push(w);
  let v = C;
  if (l != null) {
    u.push(C);
    const k = Ls(l);
    v = Ir({ inputs: { x: v }, backend: t, attrs: { perm: k } });
  }
  return u.forEach((k) => t.disposeData(k.dataId)), v;
}
const dpe = { kernelName: tc, backendName: "webgpu", kernelFunc: cpe };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const hpe = [Lae, Coe, Soe, $oe, Noe, _oe, Loe, Moe, Woe, Uoe, Hoe, qoe, Xoe, Qoe, Joe, rie, oie, cie, hie, fie, xie, Sie, kie, _ie, Die, Pie, Mae, Mie, Uie, Qie, sue, iue, cue, hue, fue, gue, bue, Cue, Sue, $ue, Nue, _ue, Lue, Mue, Aue, Vue, Hue, Xue, Que, ele, rle, ole, ule, cle, hle, fle, mle, yle, xle, Fae, Cle, Nle, Sle, $le, _le, Dle, Fle, Lle, Ble, Vle, Gle, zae, jle, Wie, Kle, Yle, Zle, ece, nce, rce, ice, dce, lce, pce, mce, yce, Cce, vce, tie, kce, Tce, Pce, _ce, Fce, zce, nie, Bce, Vce, Gce, jce, Qce, tle, Jce, tde, sde, Nie, ode, ude, cde, pde, mde, yde, xde, Cde, Tie, Sde, $de, Nde, Rde, Oae, Dde, Ode, zde, Wde, Gde, jde, Kde, Yde, Zde, the, rhe, ohe, uhe, che, hhe, fhe, yie, Bhe, Uhe, Hhe, Xce, ghe, xhe, vhe, khe, Ehe, Ahe, Ohe, Phe, zhe, qhe, nle, Xhe, Qhe, Jhe, Rhe, spe, ope, Aoe, upe, dpe, ide];
for (const n of hpe) nc(n);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var ot;
(function(n) {
  n[n.float32 = 0] = "float32", n[n.int32 = 1] = "int32", n[n.bool = 2] = "bool", n[n.string = 3] = "string", n[n.complex64 = 4] = "complex64";
})(ot || (ot = {}));
var wd;
(function(n) {
  n[n.linear = 0] = "linear", n[n.relu = 1] = "relu", n[n.relu6 = 2] = "relu6", n[n.prelu = 3] = "prelu", n[n.leakyrelu = 4] = "leakyrelu", n[n.sigmoid = 5] = "sigmoid", n[n.elu = 6] = "elu";
})(wd || (wd = {}));
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let oT;
function ppe(n) {
  oT = n.wasm.cwrap(ba, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function fpe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: a, bias: o, preluActivationWeights: i } = e;
  if (r.dtype !== "float32" || a.dtype !== "float32") throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");
  const { transposeA: u, transposeB: c, activation: l, leakyreluAlpha: d } = s, h = t.dataIdMap.get(r.dataId).id, p = t.dataIdMap.get(a.dataId).id;
  let f = 0;
  if (o != null) {
    const R = t.dataIdMap.get(o.dataId);
    if (R.shape.length !== 1) throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${R.shape.length}.`);
    f = R.id;
  }
  const m = i == null ? 0 : t.dataIdMap.get(i.dataId).id, g = wd[l];
  if (g == null) throw new Error(`${l} activation not yet supported for FusedConv2D in the wasm backend.`);
  const y = u ? r.shape[2] : r.shape[1], b = c ? a.shape[1] : a.shape[2], x = Re(r.shape.slice(0, -2), a.shape.slice(0, -2)), w = t.makeOutput([...x, y, b], r.dtype), C = t.dataIdMap.get(w.dataId).id, v = new Uint8Array(new Int32Array(r.shape).buffer), k = new Uint8Array(new Int32Array(a.shape).buffer);
  return oT(h, v, r.shape.length, p, k, a.shape.length, u, c, g, f, m, d || 0, C), w;
}
const mpe = { kernelName: ba, backendName: "wasm", setupFunc: ppe, kernelFunc: fpe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Je(n, e) {
  let t;
  function s(a) {
    t = a.wasm.cwrap(n, null, ["number", "number", "number"]);
  }
  function r(a) {
    const { backend: o, inputs: { x: i } } = a, u = o.dataIdMap.get(i.dataId).id, c = o.makeOutput(i.shape, e || i.dtype), l = o.dataIdMap.get(c.dataId).id;
    return A(c.shape) === 0 || t(u, ot[i.dtype], l), c;
  }
  return { kernelName: n, backendName: "wasm", setupFunc: s, kernelFunc: r };
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const gpe = Je(Yi);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const ype = Je(Ea);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bpe = Je(Da);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Kt(n, e, t) {
  let s;
  function r(o) {
    s = o.wasm.cwrap(n, null, ["number", "array", "number", "number", "array", "number", "number", "number"]);
  }
  function a(o) {
    const { backend: i, inputs: u } = o, { a: c, b: l } = u, d = i.dataIdMap.get(c.dataId).id, h = i.dataIdMap.get(l.dataId).id, p = t ?? c.dtype, f = Re(c.shape, l.shape), m = i.makeOutput(f, p);
    if (A(f) === 0) return m;
    const g = new Uint8Array(new Int32Array(c.shape).buffer), y = new Uint8Array(new Int32Array(l.shape).buffer), b = i.dataIdMap.get(m.dataId).id;
    return s(d, g, c.shape.length, h, y, l.shape.length, ot[c.dtype], b), m;
  }
  return { kernelName: n, backendName: "wasm", setupFunc: r, kernelFunc: a };
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const xpe = Kt(Ur);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let iT;
function wpe(n) {
  iT = n.wasm.cwrap(Aa, null, ["array", "number", "number", "number"]);
}
function Cpe(n) {
  const { inputs: e, backend: t } = n, s = t.makeOutput(e[0].shape, e[0].dtype);
  if (A(s.shape) === 0) return s;
  const r = e.map((i) => t.dataIdMap.get(i.dataId).id), a = new Uint8Array(new Int32Array(r).buffer), o = t.dataIdMap.get(s.dataId).id;
  return iT(a, r.length, ot[s.dtype], o), s;
}
const Ipe = { kernelName: Aa, backendName: "wasm", setupFunc: wpe, kernelFunc: Cpe };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Mm(n) {
  const { inputs: { x: e }, backend: t } = n;
  if (e.dtype === "string") return Wn(t.readSync(e.dataId), e.shape, e.dtype);
  const s = t.makeOutput(e.shape, e.dtype), r = t.typedArrayFromHeap(e);
  return t.typedArrayFromHeap(s).set(r), s;
}
const Spe = { kernelName: oo, backendName: "wasm", kernelFunc: Mm };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let uT;
function vpe(n) {
  uT = n.wasm.cwrap(fr, null, ["number", "array", "number", "number", "number", "array", "number"]);
}
function _a(n) {
  const { inputs: e, backend: t, attrs: s } = n, [r, a] = kpe(e.x.shape, s.perm);
  let o = true;
  for (let f = 0; f < a.length; f++) a[f] !== f && (o = false);
  const i = $pe(e.x.shape, s.perm), u = { dataId: e.x.dataId, shape: r, dtype: e.x.dtype };
  if (o) {
    const f = Mm({ inputs: e, backend: t });
    return f.shape = i, f;
  }
  const c = t.makeOutput(i, u.dtype), l = t.dataIdMap.get(u.dataId).id, d = t.dataIdMap.get(c.dataId).id, h = new Uint8Array(new Int32Array(a).buffer), p = new Uint8Array(new Int32Array(u.shape).buffer);
  return uT(l, p, u.shape.length, ot[u.dtype], d, h, a.length), c;
}
function $pe(n, e) {
  const t = new Array(n.length);
  for (let s = 0; s < t.length; s++) t[s] = n[e[s]];
  return t;
}
function kpe(n, e) {
  const t = [], s = [];
  for (let r = 0; r < n.length; ++r) n[r] !== 1 && t.push(n[r]), n[e[r]] !== 1 && s.push(e[r]);
  for (let r = 0; r < s.length; ++r) {
    let a = -1;
    for (let o = 0; o < s.length; ++o) s[o] >= r && (a === -1 || s[a] > s[o]) && (a = o);
    s[a] = r;
  }
  return [t, s];
}
const Npe = { kernelName: fr, backendName: "wasm", kernelFunc: _a, setupFunc: vpe };
/**
* @license
* Copyright 2020 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ri(n, e, t) {
  const s = n.shape, r = n.shape.length, a = Ee(e, s);
  let o = a;
  const i = ct(o, r);
  let u = null, c = false;
  if (i != null) {
    const l = new Array(r);
    for (let p = 0; p < l.length; p++) l[p] = s[i[p]];
    o = it(o.length, r), u = _a({ inputs: { x: n }, attrs: { perm: i }, backend: t });
    const d = t.dataIdMap.get(n.dataId).id;
    t.dataIdMap.get(u.dataId).id !== d && (c = true);
  }
  return { transposed: u, originalAxes: a, axes: o, inputWasTransposed: c };
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let lT;
function Tpe(n) {
  lT = n.wasm.cwrap(Qi, null, ["number, number, number"]);
}
function Rpe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { axis: r, keepDims: a } = s, { x: o } = t;
  let u = e.dataIdMap.get(o.dataId).id, c = o;
  const { transposed: l, axes: d, originalAxes: h, inputWasTransposed: p } = ri(o, r, e);
  if (p) {
    const x = e.dataIdMap.get(l.dataId).id;
    c = l, u = x;
  }
  const f = c.shape.length;
  mt("all", d, f);
  const [m, g] = xt(c.shape, d), y = A(g), b = e.makeOutput(m, o.dtype);
  if (A(c.shape) !== 0) {
    const x = e.dataIdMap.get(b.dataId).id;
    lT(u, y, x);
  }
  if (p && e.disposeData(l.dataId), a) {
    const x = ft(b.shape, h);
    b.shape = x;
  }
  return b;
}
const _pe = { kernelName: Qi, backendName: "wasm", setupFunc: Tpe, kernelFunc: Rpe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let cT;
function Epe(n) {
  cT = n.wasm.cwrap(Zi, null, ["number, number, number"]);
}
function Dpe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { axis: r, keepDims: a } = s, { x: o } = t;
  let u = e.dataIdMap.get(o.dataId).id, c = o;
  const { transposed: l, axes: d, originalAxes: h, inputWasTransposed: p } = ri(o, r, e);
  if (p) {
    const x = e.dataIdMap.get(l.dataId).id;
    c = l, u = x;
  }
  const f = c.shape.length;
  mt("any", d, f);
  const [m, g] = xt(c.shape, d), y = A(g), b = e.makeOutput(m, o.dtype);
  if (A(c.shape) !== 0) {
    const x = e.dataIdMap.get(b.dataId).id;
    cT(u, y, x);
  }
  if (p && e.disposeData(l.dataId), a) {
    const x = ft(b.shape, h);
    b.shape = x;
  }
  return b;
}
const Ape = { kernelName: Zi, backendName: "wasm", setupFunc: Epe, kernelFunc: Dpe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function dT(n) {
  let e;
  function t(r) {
    e = r.wasm.cwrap(n, null, ["number", "number", "number", "number", "number"]);
  }
  function s(r) {
    const { backend: a, inputs: o, attrs: i } = r, { axis: u } = i, { x: c } = o, l = a.dataIdMap.get(c.dataId).id;
    let d = l, h = c;
    const { transposed: p, axes: f, inputWasTransposed: m } = ri(c, u, a);
    if (m) {
      const C = a.dataIdMap.get(p.dataId).id;
      C !== l && (h = p, d = C);
    }
    const g = h.shape.slice(0, -1), y = a.makeOutput(g, "int32"), b = a.dataIdMap.get(y.dataId).id, x = A(y.shape), w = h.shape[f[0]];
    return e(d, ot[h.dtype], x, w, b), m && a.disposeData(p.dataId), y;
  }
  return { kernelName: n, backendName: "wasm", setupFunc: t, kernelFunc: s };
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Fpe = dT(Ji);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ope = dT(eu);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Ppe = Je(Fa);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Lpe = Je(Oa);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const zpe = Je(Pa);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Mpe = Kt(za);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Bpe = Je(La);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let hT;
function Wpe(n) {
  hT = n.wasm.cwrap(Ma, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Vpe(n) {
  const { inputs: e, attrs: t, backend: s } = n, r = e.x, a = s.dataIdMap.get(r.dataId).id, { filterSize: o, strides: i, pad: u, dimRoundingMode: c } = t, l = zt(r.shape, o, i, 1, u, c), d = l.filterHeight, h = l.filterWidth, p = l.padInfo.top, f = l.padInfo.right, m = l.padInfo.bottom, g = l.padInfo.left, y = l.strideHeight, b = l.strideWidth, x = l.inChannels;
  if (l.dataFormat !== "channelsLast") throw new Error(`wasm backend does not support dataFormat:'${l.dataFormat}'. Please use 'channelsLast'.`);
  if (l.dilationWidth !== 1 || l.dilationHeight !== 1) throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${l.dilationHeight}, ${l.dilationWidth}].`);
  const w = s.makeOutput(l.outShape, "float32"), C = s.dataIdMap.get(w.dataId).id;
  return hT(a, r.shape[0], r.shape[1], r.shape[2], d, h, p, f, m, g, y, b, x, C), w;
}
const Upe = { kernelName: Ma, backendName: "wasm", setupFunc: Wpe, kernelFunc: Vpe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let pT;
function Gpe(n) {
  pT = n.wasm.cwrap("AvgPool3D", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Hpe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: a, strides: o, pad: i, dimRoundingMode: u, dataFormat: c } = s, l = Sn(r.shape, a, o, 1, i, u, c), d = t.makeOutput(l.outShape, r.dtype);
  return pT(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(d.dataId).id, l.batchSize, l.inChannels, l.inDepth, l.inHeight, l.inWidth, l.outDepth, l.outHeight, l.outWidth, l.strideDepth, l.strideHeight, l.strideWidth, l.dilationDepth, l.dilationHeight, l.dilationWidth, l.effectiveFilterDepth, l.effectiveFilterHeight, l.effectiveFilterWidth, l.padInfo.front, l.padInfo.top, l.padInfo.left), d;
}
const jpe = { kernelName: tu, backendName: "wasm", setupFunc: Gpe, kernelFunc: Hpe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let fT;
function qpe(n) {
  fT = n.wasm.cwrap("AvgPool3DGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Kpe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, { filterSize: o, strides: i, pad: u, dimRoundingMode: c } = s, l = Sn(a.shape, o, i, 1, u, c), d = t.makeOutput(a.shape, a.dtype);
  return fT(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(d.dataId).id, l.batchSize, l.inChannels, l.inDepth, l.inHeight, l.inWidth, l.outDepth, l.outHeight, l.outWidth, l.strideDepth, l.strideHeight, l.strideWidth, l.dilationDepth, l.dilationHeight, l.dilationWidth, l.effectiveFilterDepth, l.effectiveFilterHeight, l.effectiveFilterWidth, l.padInfo.front, l.padInfo.top, l.padInfo.left, l.filterDepth, l.filterHeight, l.filterWidth), d;
}
const Xpe = { kernelName: zl, backendName: "wasm", setupFunc: qpe, kernelFunc: Kpe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let mT;
function Ype(n) {
  mT = n.wasm.cwrap("AvgPoolGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Qpe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, { filterSize: o, strides: i, pad: u } = s, c = zt(a.shape, o, i, 1, u), l = t.makeOutput(a.shape, a.dtype);
  return mT(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(l.dataId).id, c.batchSize, c.inChannels, c.inHeight, c.inWidth, c.outHeight, c.outWidth, c.strideHeight, c.strideWidth, c.dilationHeight, c.dilationWidth, c.effectiveFilterHeight, c.effectiveFilterWidth, c.padInfo.top, c.padInfo.left, c.filterHeight, c.filterWidth), l;
}
const Zpe = { kernelName: Ll, backendName: "wasm", setupFunc: Ype, kernelFunc: Qpe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Gn(n) {
  const { inputs: e, attrs: t } = n, { x: s } = e, { shape: r } = t, a = A(s.shape), o = Id(r, a);
  return $(a === A(o), () => `new shape: ${o}, old shape: ${s.shape}. New shape and old shape must have the same number of elements.`), n.backend.incRef(s.dataId), { dataId: s.dataId, shape: o, dtype: s.dtype };
}
const Jpe = { kernelName: Du, backendName: "wasm", kernelFunc: Gn };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let gT;
function efe(n) {
  gT = n.wasm.cwrap(Ba, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number"]);
}
function tfe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: a } = e, { transposeA: o, transposeB: i } = s;
  if (r.dtype !== "float32" || a.dtype !== "float32") throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");
  const u = r.shape.length, c = a.shape.length, l = o ? r.shape[u - 2] : r.shape[u - 1], d = i ? a.shape[c - 1] : a.shape[c - 2], h = o ? r.shape[u - 1] : r.shape[u - 2], p = i ? a.shape[c - 2] : a.shape[c - 1], f = r.shape.slice(0, -2), m = a.shape.slice(0, -2), g = A(f), y = A(m), x = Re(r.shape.slice(0, -2), a.shape.slice(0, -2)).concat([h, p]);
  $(l === d, () => `Error in matMul: inner shapes (${l}) and (${d}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`);
  const w = o ? [g, l, h] : [g, h, l], C = i ? [y, p, d] : [y, d, p], v = Gn({ inputs: { x: r }, backend: t, attrs: { shape: w } }), k = Gn({ inputs: { x: a }, backend: t, attrs: { shape: C } }), R = t.dataIdMap.get(v.dataId).id, N = t.dataIdMap.get(k.dataId).id, T = o ? v.shape[2] : v.shape[1], S = i ? k.shape[1] : k.shape[2], E = Math.max(g, y), P = t.makeOutput([E, T, S], v.dtype), M = t.dataIdMap.get(P.dataId).id, L = new Uint8Array(new Int32Array(v.shape).buffer), V = new Uint8Array(new Int32Array(k.shape).buffer);
  return gT(R, L, v.shape.length, N, V, k.shape.length, o, i, M), t.disposeData(v.dataId), t.disposeData(k.dataId), P.shape = x, P;
}
const nfe = { kernelName: Ba, backendName: "wasm", setupFunc: efe, kernelFunc: tfe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function qi(n) {
  const { inputs: { x: e }, attrs: { begin: t, size: s }, backend: r } = n, [a, o] = hc(e, t, s), i = Kf(e.shape, a, o), u = r.readSync(e.dataId), c = r.makeOutput(o, e.dtype), l = me(e.shape), d = r.dataIdMap.get(c.dataId);
  if (i) {
    const f = Xf(a, l);
    return e.dtype === "string" ? d.stringBytes = u.slice(f, f + A(o)) : r.typedArrayFromHeap(c).set(u.subarray(f, f + A(o))), c;
  }
  if (e.dtype === "string") {
    const f = Kp(u, a, o, e.shape, e.dtype);
    return d.stringBytes = f, c;
  }
  const h = r.typedArrayFromHeap(c), p = e.shape.length;
  if (p === 2) sfe(u, l[0], h, a, o);
  else if (p === 3) rfe(u, l[0], l[1], h, a, o);
  else if (p === 4) afe(u, l[0], l[1], l[2], h, a, o);
  else {
    const f = Kp(u, a, o, e.shape, e.dtype);
    h.set(f);
  }
  return c;
}
function sfe(n, e, t, s, r) {
  let a = 0;
  const o = s[0], i = s[1], u = o + r[0];
  for (let c = o; c < u; c++) {
    const l = c * e + i;
    t.set(n.subarray(l, l + r[1]), a), a += r[1];
  }
}
function rfe(n, e, t, s, r, a) {
  let o = 0;
  const i = r[0], u = r[1], c = r[2], l = i + a[0], d = u + a[1];
  for (let h = i; h < l; h++) for (let p = u; p < d; p++) {
    const f = h * e + p * t + c;
    s.set(n.subarray(f, f + a[2]), o), o += a[2];
  }
}
function afe(n, e, t, s, r, a, o) {
  let i = 0;
  const u = a[0], c = a[1], l = a[2], d = u + o[0], h = c + o[1], p = l + o[2], f = a[3];
  for (let m = u; m < d; m++) for (let g = c; g < h; g++) for (let y = l; y < p; y++) {
    const b = m * e + g * t + y * s + f;
    r.set(n.subarray(b, b + o[3]), i), i += o[3];
  }
}
const ofe = { kernelName: Mu, backendName: "wasm", kernelFunc: qi };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ife(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: a, crops: o } = s, i = a.reduce((y, b) => y * b), u = Zr(r.shape, a, i), c = Jr(u.length, a.length), l = ea(r.shape, a, i), d = dh(o, a.length), h = hh(l, o, a.length), p = Gn({ inputs: { x: r }, backend: t, attrs: { shape: u } }), f = _a({ inputs: { x: p }, backend: t, attrs: { perm: c } }), m = Gn({ inputs: { x: f }, backend: t, attrs: { shape: l } }), g = qi({ inputs: { x: m }, backend: t, attrs: { begin: d, size: h } });
  return t.disposeData(p.dataId), t.disposeData(f.dataId), t.disposeData(m.dataId), g;
}
const ufe = { kernelName: nu, backendName: "wasm", kernelFunc: ife };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let yT;
function lfe(n) {
  yT = n.wasm.cwrap(su, null, ["number", "number", "boolean", "number", "number", "number"]);
}
function cfe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { x: r, weights: a } = t, { size: o } = s, i = a.shape.reduce((d, h) => d * h, 1) !== 0, u = r.shape.length === 1 ? [o] : [r.shape[0], o], c = e.makeOutput(u, a.dtype);
  function l(d) {
    return e.dataIdMap.get(d.dataId).id;
  }
  return yT(l(r), o, i, l(a), ot[a.dtype], l(c)), c;
}
const dfe = { kernelName: su, backendName: "wasm", setupFunc: lfe, kernelFunc: cfe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const hfe = Kt(Ml);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function pfe(n) {
  const { inputs: e, backend: t } = n, { s0: s, s1: r } = e, a = t.typedArrayFromHeap(s), o = t.typedArrayFromHeap(r), i = Re(Array.from(a), Array.from(o));
  return t.makeOutput([i.length], "int32", void 0, new Int32Array(i));
}
const ffe = { kernelName: Bl, backendName: "wasm", kernelFunc: pfe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function ai(n) {
  const { inputs: { x: e }, attrs: { dtype: t }, backend: s } = n, r = s.makeOutput(e.shape, t), a = s.typedArrayFromHeap(e);
  return s.typedArrayFromHeap(r).set(a), r;
}
const mfe = { kernelName: Wa, backendName: "wasm", kernelFunc: ai };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const gfe = Je(Va);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let bT;
function yfe(n) {
  bT = n.wasm.cwrap(Gr, null, ["number", "number", "number", "number"]);
}
function bfe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { clipValueMin: a, clipValueMax: o } = s, i = t.dataIdMap.get(r.dataId).id, u = t.makeOutput(r.shape, r.dtype), c = t.dataIdMap.get(u.dataId).id;
  return bT(i, a, o, c), u;
}
const xfe = { kernelName: Gr, backendName: "wasm", setupFunc: yfe, kernelFunc: bfe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function xT(n) {
  const { inputs: e, backend: t } = n, s = Ee(n.attrs.axis, e[0].shape)[0], r = e.map((p) => p.shape);
  lh(r, s);
  let a = xn(e.map((p) => p.shape), s);
  const o = e.filter((p) => A(p.shape) > 0);
  if (o.length === 1) return Mm({ inputs: { x: o[0] }, backend: t });
  const i = t.makeOutput(a, e[0].dtype);
  if (A(a) === 0) return i;
  if (o[0].dtype === "string") {
    const p = o.map((x) => {
      const C = [-1, A(x.shape.slice(s))];
      return Gn({ inputs: { x }, backend: t, attrs: { shape: C } });
    }), f = p.map((x) => ({ vals: t.readSync(x.dataId), shape: x.shape }));
    a = xn(p.map((x) => x.shape), 1);
    const m = p[0].shape[0] === 1, g = qw(f, a, e[0].dtype, m), y = xn(o.map((x) => x.shape), s);
    i.shape = y;
    const b = t.dataIdMap.get(i.dataId);
    return b.stringBytes = lx(g), p.forEach((x) => t.disposeData(x.dataId)), i;
  }
  const u = A(o[0].shape.slice(0, s));
  let c = 0;
  const l = o.map((p) => {
    const f = A(p.shape.slice(s));
    return c += f, f;
  }), d = o.map((p) => t.typedArrayFromHeap(p)), h = t.typedArrayFromHeap(i);
  for (let p = 0; p < u; p++) {
    let f = p * c;
    for (let m = 0; m < d.length; m++) {
      const g = l[m], y = p * g, b = d[m].subarray(y, y + g);
      h.set(b, f), f += g;
    }
  }
  return i;
}
const wfe = { kernelName: ru, backendName: "wasm", kernelFunc: xT };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let wT;
function Cfe(n) {
  wT = n.wasm.cwrap(Ua, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Ife(n) {
  const { inputs: e, attrs: t, backend: s } = n, { x: r, filter: a } = e, o = s.dataIdMap.get(r.dataId).id, i = s.dataIdMap.get(a.dataId).id, { strides: u, dilations: c, pad: l, dimRoundingMode: d, dataFormat: h } = t, p = An(h), f = lt(r.shape, a.shape, u, c, l, d, false, p), m = f.filterHeight, g = f.filterWidth, y = f.padInfo.top, b = f.padInfo.right, x = f.padInfo.bottom, w = f.padInfo.left, C = f.dilationHeight, v = f.dilationWidth, k = f.strideHeight, R = f.strideWidth, N = f.inChannels, T = f.outChannels, S = f.padInfo.type === "SAME" ? 1 : 0;
  if (f.dataFormat !== "channelsLast") throw new Error(`wasm backend Conv2D does not support dataFormat:'${f.dataFormat}'. Please use 'channelsLast'.`);
  const E = s.makeOutput(f.outShape, "float32"), P = s.dataIdMap.get(E.dataId).id;
  return wT(o, r.shape[0], r.shape[1], r.shape[2], i, m, g, y, b, x, w, S, C, v, k, R, N, T, P), E;
}
const Sfe = { kernelName: Ua, backendName: "wasm", setupFunc: Cfe, kernelFunc: Ife };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let CT;
function vfe(n) {
  CT = n.wasm.cwrap(Ga, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function $fe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { dy: r, filter: a } = t, { strides: o, pad: i, dataFormat: u, dimRoundingMode: c, inputShape: l } = s, d = 1, h = An(u), p = lt(l, a.shape, o, d, i, c, false, h), { batchSize: f, filterHeight: m, filterWidth: g, inChannels: y, inHeight: b, inWidth: x, outChannels: w, outHeight: C, outWidth: v, strideHeight: k, strideWidth: R } = p, N = m - 1 - p.padInfo.top, T = g - 1 - p.padInfo.left, S = p.dataFormat === "channelsLast", E = me(p.inShape), P = me(r.shape), [M, L, V] = me(a.shape), q = E[0], G = S ? E[1] : E[2], K = S ? E[2] : 1, X = S ? 1 : E[1], Z = P[0], ee = S ? P[1] : P[2], J = S ? P[2] : 1, re = S ? 1 : P[1], se = e.makeOutput(p.inShape, "float32"), pe = e.dataIdMap.get(se.dataId).id, Se = e.dataIdMap.get(r.dataId).id, ge = e.dataIdMap.get(a.dataId).id;
  return CT(Se, ge, f, m, g, b, x, y, C, v, w, k, R, N, T, M, L, V, q, G, K, X, Z, ee, J, re, pe), se;
}
const kfe = { kernelName: Ga, backendName: "wasm", setupFunc: vfe, kernelFunc: $fe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let IT;
function Nfe(n) {
  IT = n.wasm.cwrap(Ha, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Tfe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dilations: u } = s;
  if (r.dtype !== "float32") throw new Error(`Tensor x must have dtype float32, got ${r.dtype}`);
  if (a.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${a.dtype}`);
  const c = cs(r.shape, a.shape, o, u, i), l = t.makeOutput(c.outShape, r.dtype);
  return IT(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(a.dataId).id, t.dataIdMap.get(l.dataId).id, c.batchSize, c.inDepth, c.inHeight, c.inWidth, c.inChannels, c.outDepth, c.outHeight, c.outWidth, c.outChannels, c.strideDepth, c.strideHeight, c.strideWidth, c.dilationDepth, c.dilationHeight, c.dilationWidth, c.filterDepth, c.filterHeight, c.filterWidth, c.padInfo.front, c.padInfo.top, c.padInfo.left), l;
}
const Rfe = { kernelName: Ha, backendName: "wasm", setupFunc: Nfe, kernelFunc: Tfe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let ST;
function _fe(n) {
  ST = n.wasm.cwrap(au, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Efe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: a } = e, { strides: o, pad: i, filterShape: u } = s;
  if (r.dtype !== "float32") throw new Error(`Tensor dy must have dtype float32, got ${r.dtype}`);
  if (a.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${a.dtype}`);
  const c = cs(r.shape, u, o, 1, i), l = t.makeOutput(c.filterShape, a.dtype);
  return ST(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(a.dataId).id, t.dataIdMap.get(l.dataId).id, c.batchSize, c.inDepth, c.inHeight, c.inWidth, c.inChannels, c.outDepth, c.outHeight, c.outWidth, c.outChannels, c.strideDepth, c.strideHeight, c.strideWidth, c.dilationDepth, c.dilationHeight, c.dilationWidth, c.filterDepth, c.filterHeight, c.filterWidth, c.padInfo.front, c.padInfo.top, c.padInfo.left), l;
}
const Dfe = { kernelName: au, backendName: "wasm", setupFunc: _fe, kernelFunc: Efe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let vT;
function Afe(n) {
  vT = n.wasm.cwrap(ou, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Ffe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: a } = e, { pad: o, strides: i, inputShape: u } = s;
  if (r.dtype !== "float32") throw new Error(`Tensor dy must have dtype float32, got ${r.dtype}`);
  if (a.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${a.dtype}`);
  const c = cs(u, a.shape, i, 1, o), l = t.makeOutput(c.inShape, r.dtype);
  return vT(t.dataIdMap.get(a.dataId).id, t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(l.dataId).id, c.batchSize, c.inDepth, c.inHeight, c.inWidth, c.inChannels, c.outDepth, c.outHeight, c.outWidth, c.outChannels, c.strideDepth, c.strideHeight, c.strideWidth, c.dilationDepth, c.dilationHeight, c.dilationWidth, c.filterDepth, c.filterHeight, c.filterWidth, c.padInfo.front, c.padInfo.top, c.padInfo.left), l;
}
const Ofe = { kernelName: ou, backendName: "wasm", setupFunc: Afe, kernelFunc: Ffe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Pfe = Je(ja);
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Lfe = Je(qa);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var hy;
(function(n) {
  n[n.bilinear = 0] = "bilinear", n[n.nearest = 1] = "nearest";
})(hy || (hy = {}));
let $T;
function zfe(n) {
  $T = n.wasm.cwrap(uu, null, ["number", "number", "number", "number", "array", "number", "number", "number", "number", "number"]);
}
function Mfe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { method: r, extrapolationValue: a, cropSize: o } = s, { image: i, boxes: u, boxInd: c } = t, l = u.shape[0], [d, h] = o, p = [l, d, h, i.shape[3]];
  let f = e.dataIdMap.get(i.dataId), m;
  i.dtype !== "float32" && (m = ai({ backend: e, inputs: { x: i }, attrs: { dtype: "float32" } }), f = e.dataIdMap.get(m.dataId));
  const g = f.id, y = e.dataIdMap.get(u.dataId).id, b = e.dataIdMap.get(c.dataId).id, x = e.makeOutput(p, "float32"), w = e.dataIdMap.get(x.dataId).id, C = new Uint8Array(new Int32Array(i.shape).buffer);
  return $T(g, y, b, l, C, d, h, hy[r], a, w), m != null && e.disposeData(m.dataId), x;
}
const Bfe = { kernelName: uu, backendName: "wasm", setupFunc: zfe, kernelFunc: Mfe };
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let kT;
function Wfe(n) {
  kT = n.wasm.cwrap(iu, null, ["number", "number", "number", "number", "number", "number"]);
}
function Vfe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, exclusive: o, reverse: i } = s, u = r.shape.length;
  $(r.dtype === "float32" || r.dtype === "int32", () => `cumprod does not support ${r.dtype} tensors in the WASM backend`);
  const c = ct([a], u);
  let l = r;
  c !== null && (l = _a({ inputs: { x: r }, attrs: { perm: c }, backend: t }));
  const d = it(1, u)[0];
  mt("cumprod", [d], u);
  const h = t.makeOutput(l.shape, l.dtype), p = l.shape[d], f = t.dataIdMap.get(l.dataId).id, m = t.dataIdMap.get(h.dataId).id;
  kT(f, o ? 1 : 0, i ? 1 : 0, p, m, ot[r.dtype]);
  let g = h;
  if (c !== null) {
    const y = Ls(c);
    g = _a({ inputs: { x: h }, attrs: { perm: y }, backend: t }), t.disposeData(l.dataId), t.disposeData(h.dataId);
  }
  return g;
}
const Ufe = { kernelName: iu, backendName: "wasm", setupFunc: Wfe, kernelFunc: Vfe };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let NT;
function Gfe(n) {
  NT = n.wasm.cwrap(Ka, null, ["number", "number", "number", "number", "number", "number"]);
}
function Hfe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: a, exclusive: o, reverse: i } = s, u = r.shape.length;
  $(r.dtype === "float32" || r.dtype === "int32", () => `cumsum does not support ${r.dtype} tensors in the WASM backend`);
  const c = ct([a], u);
  let l = r;
  c !== null && (l = _a({ inputs: { x: r }, attrs: { perm: c }, backend: t }));
  const d = it(1, u)[0];
  mt("cumsum", [d], u);
  const h = t.makeOutput(l.shape, l.dtype), p = l.shape[d], f = t.dataIdMap.get(l.dataId).id, m = t.dataIdMap.get(h.dataId).id;
  NT(f, o ? 1 : 0, i ? 1 : 0, p, m, ot[r.dtype]);
  let g = h;
  if (c !== null) {
    const y = Ls(c);
    g = _a({ inputs: { x: h }, attrs: { perm: y }, backend: t }), t.disposeData(l.dataId), t.disposeData(h.dataId);
  }
  return g;
}
const jfe = { kernelName: Ka, backendName: "wasm", setupFunc: Gfe, kernelFunc: Hfe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let TT;
function qfe(n) {
  TT = n.wasm.cwrap("DenseBincount", null, ["number", "array", "number", "number", "boolean", "number", "number", "boolean", "number"]);
}
function Kfe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { x: r, weights: a } = t, { size: o, binaryOutput: i } = s, u = a.shape.reduce((h, p) => h * p, 1) !== 0, c = r.shape.length === 1 ? [o] : [r.shape[0], o], l = e.makeOutput(c, a.dtype);
  function d(h) {
    return e.dataIdMap.get(h.dataId).id;
  }
  return TT(d(r), new Uint8Array(new Int32Array(r.shape).buffer), r.shape.length, o, u, d(a), ot[a.dtype], i, d(l)), l;
}
const Xfe = { kernelName: Vl, backendName: "wasm", setupFunc: qfe, kernelFunc: Kfe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let RT;
function Yfe(n) {
  RT = n.wasm.cwrap(lu, null, ["number", "number", "number", "array", "number", "array", "array", "number", "number"]);
}
function Qfe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { x: r } = t, { blockSize: a, dataFormat: o } = s, i = r.shape[0], u = o === "NHWC" ? r.shape[1] : r.shape[2], c = o === "NHWC" ? r.shape[2] : r.shape[3], l = o === "NHWC" ? r.shape[3] : r.shape[1], d = u * a, h = c * a, p = l / (a * a), f = o === "NHWC" ? [i, d, h, p] : [i, p, d, h], m = e.makeOutput(f, "float32"), y = e.dataIdMap.get(r.dataId).id, b = new Uint8Array(new Int32Array(me(r.shape)).buffer), x = new Uint8Array(new Int32Array(f).buffer), w = new Uint8Array(new Int32Array(me(f)).buffer), C = e.dataIdMap.get(m.dataId).id;
  return RT(y, a, o === "NHWC" ? 1 : 0, b, r.shape.length - 1, x, w, f.length, C), m;
}
const Zfe = { kernelName: lu, backendName: "wasm", setupFunc: Yfe, kernelFunc: Qfe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let _T;
function Jfe(n) {
  _T = n.wasm.cwrap(Xa, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function eme(n) {
  const { inputs: e, attrs: t, backend: s } = n, { x: r, filter: a } = e, o = s.dataIdMap.get(r.dataId).id, i = s.dataIdMap.get(a.dataId).id, { strides: u, dilations: c, pad: l, dimRoundingMode: d } = t, h = c ?? [1, 1], p = lt(r.shape, a.shape, u, h, l, d, true), f = p.filterHeight, m = p.filterWidth, g = p.padInfo.top, y = p.padInfo.right, b = p.padInfo.bottom, x = p.padInfo.left, w = p.dilationHeight, C = p.dilationWidth, v = p.strideHeight, k = p.strideWidth, R = p.inChannels, N = p.outChannels, T = p.padInfo.type === "SAME" ? 1 : 0;
  if (p.dataFormat !== "channelsLast") throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${p.dataFormat}'. Please use 'channelsLast'.`);
  const S = s.makeOutput(p.outShape, "float32"), E = s.dataIdMap.get(S.dataId).id;
  return _T(o, r.shape[0], r.shape[1], r.shape[2], i, f, m, g, y, b, x, T, w, C, v, k, R, N, E), S;
}
const tme = { kernelName: Xa, backendName: "wasm", setupFunc: Jfe, kernelFunc: eme };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let ET;
function nme(n) {
  ET = n.wasm.cwrap("Diag", null, ["number", "number", "number", "number"]);
}
function sme(n) {
  const { inputs: e, backend: t } = n, { x: s } = e, r = A(s.shape), a = t.makeOutput([...s.shape, ...s.shape], s.dtype);
  return ET(t.dataIdMap.get(s.dataId).id, ot[s.dtype], r, t.dataIdMap.get(a.dataId).id), a;
}
const rme = { kernelName: Ul, backendName: "wasm", setupFunc: nme, kernelFunc: sme };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let DT;
function ame(n) {
  DT = n.wasm.cwrap(Ya, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function ome(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a } = e, { strides: o, pad: i, dilations: u } = s;
  if (r.dtype !== a.dtype) throw new Error(`Dilation2D error: x must have the same dtype as filter. Got ${r.dtype} and ${a.dtype}`);
  const c = rr(r.shape, a.shape, o, i, "NHWC", u), l = t.makeOutput(c.outShape, r.dtype);
  return DT(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(a.dataId).id, t.dataIdMap.get(l.dataId).id, ot[r.dtype], c.batchSize, c.inChannels, c.inHeight, c.inWidth, c.outHeight, c.outWidth, c.strideHeight, c.strideWidth, c.dilationHeight, c.dilationWidth, c.filterHeight, c.filterWidth, c.padInfo.top, c.padInfo.left), l;
}
const ime = { kernelName: Ya, backendName: "wasm", setupFunc: ame, kernelFunc: ome };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let AT;
function ume(n) {
  AT = n.wasm.cwrap(_i, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function lme(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a, dy: o } = e, { strides: i, pad: u, dilations: c } = s;
  if (r.dtype !== a.dtype || r.dtype !== o.dtype) throw new Error(`Dilation2DBackpropFilter error: x must have the same dtype as filter and dy. Got ${r.dtype}, ${a.dtype}, and ${o.dtype}`);
  const l = rr(r.shape, a.shape, i, u, "NHWC", c), d = t.makeOutput(a.shape, a.dtype);
  return AT(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(a.dataId).id, t.dataIdMap.get(o.dataId).id, t.dataIdMap.get(d.dataId).id, ot[r.dtype], l.batchSize, l.inChannels, l.inHeight, l.inWidth, l.outHeight, l.outWidth, l.strideHeight, l.strideWidth, l.dilationHeight, l.dilationWidth, l.filterHeight, l.filterWidth, l.padInfo.top, l.padInfo.left), d;
}
const cme = { kernelName: _i, backendName: "wasm", setupFunc: ume, kernelFunc: lme };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let FT;
function dme(n) {
  FT = n.wasm.cwrap(Ri, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function hme(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: a, dy: o } = e, { strides: i, pad: u, dilations: c } = s;
  if (r.dtype !== a.dtype || r.dtype !== o.dtype) throw new Error(`Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${r.dtype}, ${a.dtype}, and ${o.dtype}`);
  const l = rr(r.shape, a.shape, i, u, "NHWC", c), d = t.makeOutput(r.shape, r.dtype);
  return FT(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(a.dataId).id, t.dataIdMap.get(o.dataId).id, t.dataIdMap.get(d.dataId).id, ot[r.dtype], l.batchSize, l.inChannels, l.inHeight, l.inWidth, l.outHeight, l.outWidth, l.strideHeight, l.strideWidth, l.dilationHeight, l.dilationWidth, l.filterHeight, l.filterWidth, l.padInfo.top, l.padInfo.left), d;
}
const pme = { kernelName: Ri, backendName: "wasm", setupFunc: dme, kernelFunc: hme };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const fme = Je(Za);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let OT;
function mme(n) {
  OT = n.wasm.cwrap(cu, null, ["number", "number", "number"]);
}
function gme(n) {
  const { inputs: e, backend: t } = n, { dy: s, y: r } = e, a = t.makeOutput(r.shape, "float32"), o = (i) => t.dataIdMap.get(i.dataId).id;
  return OT(o(r), o(s), o(a)), a;
}
const yme = { kernelName: cu, backendName: "wasm", setupFunc: mme, kernelFunc: gme };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bme = false, xme = Kt(du, bme, "bool");
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const wme = Je(Ja);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Cme = Je(eo, "float32");
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function py(n) {
  const { inputs: e, attrs: t, backend: s } = n, { input: r } = e, { dim: a } = t, o = r.shape.length, i = r.shape.slice();
  let u = a;
  return a < 0 && ($(-(o + 1) <= a, () => `Axis must be in the interval [${-(o + 1)}, ${o}]`), u = o + a + 1), i.splice(u, 0, 1), Gn({ inputs: { x: r }, backend: s, attrs: { shape: i } });
}
const Ime = { kernelName: hu, backendName: "wasm", kernelFunc: py };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Sme = Je(to, "float32");
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function PT(n) {
  const { attrs: { shape: e, value: t }, backend: s } = n;
  let { attrs: { dtype: r } } = n;
  r = r || Vr(t);
  const a = s.makeOutput(e, r);
  return s.typedArrayFromHeap(a).fill(t), a;
}
const vme = { kernelName: Gl, backendName: "wasm", kernelFunc: PT };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let LT;
function $me(n) {
  LT = n.wasm.cwrap(pu, null, ["number", "number", "number", "number", "number", "number"]);
}
function kme(n) {
  const { inputs: e, backend: t } = n, { image: s } = e, r = t.makeOutput(s.shape, s.dtype), a = t.dataIdMap.get(s.dataId).id, o = t.dataIdMap.get(r.dataId).id, [i, u, c, l] = s.shape;
  return LT(a, i, u, c, l, o), r;
}
const Nme = { kernelName: pu, backendName: "wasm", kernelFunc: kme, setupFunc: $me };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Tme = Je(no);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Rme = Kt(so);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let zT;
function _me(n) {
  zT = n.wasm.cwrap(ro, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function Eme(n) {
  const { backend: e, inputs: t, attrs: s } = n, { varianceEpsilon: r } = s, { x: a, mean: o, variance: i, offset: u, scale: c } = t, l = e.dataIdMap.get(a.dataId).id, d = e.dataIdMap.get(o.dataId).id, h = e.dataIdMap.get(i.dataId).id, p = u != null ? e.dataIdMap.get(u.dataId).id : 0, f = c != null ? e.dataIdMap.get(c.dataId).id : 0, m = e.makeOutput(a.shape, a.dtype);
  if (A(a.shape) === 0) return m;
  const g = e.dataIdMap.get(m.dataId).id;
  return zT(l, d, h, p, f, r, g), m;
}
const Dme = { kernelName: ro, backendName: "wasm", setupFunc: _me, kernelFunc: Eme };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let MT;
function Ame(n) {
  MT = n.wasm.cwrap(xa, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Fme(n) {
  const { inputs: e, attrs: t, backend: s } = n, { x: r, filter: a, bias: o, preluActivationWeights: i } = e, { strides: u, pad: c, dilations: l, dataFormat: d, dimRoundingMode: h, activation: p, leakyreluAlpha: f } = t, m = lt(r.shape, a.shape, u, l, c, h), g = wd[p];
  if (g == null) throw new Error(`${p} activation not yet supported for FusedConv2D in the wasm backend.`);
  const y = s.dataIdMap.get(r.dataId).id, b = s.dataIdMap.get(a.dataId).id, x = m.outChannels;
  let w = 0;
  if (o != null) {
    const J = s.dataIdMap.get(o.dataId);
    if (J.shape.length !== 1) throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${J.shape.length}.`);
    if (J.shape[0] !== x) throw new Error(`FusedConv2D bias shape (${J.shape}) does not match the number of output channels (${x})`);
    w = J.id;
  }
  const C = m.filterHeight, v = m.filterWidth, k = m.padInfo.top, R = m.padInfo.right, N = m.padInfo.bottom, T = m.padInfo.left, S = m.dilationHeight, E = m.dilationWidth, P = m.strideHeight, M = m.strideWidth, L = m.inChannels, V = m.padInfo.type === "SAME" ? 1 : 0, q = m.batchSize, G = m.inHeight, K = m.inWidth;
  if (d !== "NHWC") throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${d}'. Please use 'NHWC'.`);
  const X = s.makeOutput(m.outShape, "float32"), Z = s.dataIdMap.get(X.dataId).id, ee = i == null ? 0 : s.dataIdMap.get(i.dataId).id;
  return MT(y, q, G, K, b, C, v, w, k, R, N, T, V, S, E, P, M, L, x, g, ee, f || 0, Z), X;
}
const Ome = { kernelName: xa, backendName: "wasm", setupFunc: Ame, kernelFunc: Fme };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let BT;
function Pme(n) {
  BT = n.wasm.cwrap(wa, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Lme(n) {
  const { inputs: e, attrs: t, backend: s } = n, { x: r, filter: a, bias: o, preluActivationWeights: i } = e, { strides: u, pad: c, dilations: l, dataFormat: d, dimRoundingMode: h, activation: p, leakyreluAlpha: f } = t, m = lt(r.shape, a.shape, u, l, c, h, true), g = wd[p];
  if (g == null) throw new Error(`${p} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);
  const y = s.dataIdMap.get(r.dataId).id, b = s.dataIdMap.get(a.dataId).id, x = m.outChannels;
  let w = 0;
  if (o != null) {
    const J = s.dataIdMap.get(o.dataId);
    if (J.shape.length !== 1) throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${J.shape.length}.`);
    if (J.shape[0] !== x) throw new Error(`FusedDepthwiseConv2D bias shape (${J.shape}) does not match the number of output channels (${x})`);
    w = J.id;
  }
  const C = m.filterHeight, v = m.filterWidth, k = m.padInfo.top, R = m.padInfo.right, N = m.padInfo.bottom, T = m.padInfo.left, S = m.dilationHeight, E = m.dilationWidth, P = m.strideHeight, M = m.strideWidth, L = m.inChannels, V = m.padInfo.type === "SAME" ? 1 : 0, q = m.batchSize, G = m.inHeight, K = m.inWidth;
  if (d !== "NHWC") throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${d}'. Please use 'NHWC'.`);
  const X = s.makeOutput(m.outShape, "float32"), Z = s.dataIdMap.get(X.dataId).id, ee = i == null ? 0 : s.dataIdMap.get(i.dataId).id;
  return BT(y, q, G, K, b, C, v, w, k, R, N, T, V, S, E, P, M, L, x, g, ee, f || 0, Z), X;
}
const zme = { kernelName: wa, backendName: "wasm", setupFunc: Pme, kernelFunc: Lme };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let WT;
function Mme(n) {
  WT = n.wasm.cwrap(mu, null, ["number", "number", "number", "number", "number", "number", "array", "number"]);
}
function Bme(n) {
  const { backend: e, inputs: t } = n, { params: s, indices: r } = t, [a, o, i, u] = dc(s, r), c = e.makeOutput(a, s.dtype);
  if (o === 0) return c;
  const l = r.shape, d = l[l.length - 1], p = e.dataIdMap.get(s.dataId).id, m = e.dataIdMap.get(r.dataId).id, g = new Uint8Array(new Int32Array(u).buffer), y = e.dataIdMap.get(c.dataId).id;
  return WT(p, ot[s.dtype], m, o, d, i, g, y), c;
}
const Wme = { kernelName: mu, backendName: "wasm", setupFunc: Mme, kernelFunc: Bme };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let VT;
function Vme(n) {
  VT = n.wasm.cwrap("Gather", null, ["number", "number", "array", "number", "number", "number", "array", "number"]);
}
function Ume(n) {
  const { backend: e, inputs: t, attrs: s } = n, { x: r, indices: a } = t, { axis: o, batchDims: i } = s, u = Ee(o, r.shape)[0], c = e.readSync(a.dataId), l = r.shape[u];
  for (let N = 0; N < c.length; ++N) {
    const T = c[N];
    $(T <= l - 1 && T >= 0, () => `GatherV2: the index value ${T} is not in [0, ${l - 1}]`);
  }
  const d = gh(r, a, u, i), h = Gn({ inputs: { x: r }, attrs: { shape: [d.batchSize, d.outerSize, d.dimSize, d.sliceSize] }, backend: e }), p = A(a.shape), f = Gn({ inputs: { x: a }, attrs: { shape: [d.batchSize, p / d.batchSize] }, backend: e }), m = [d.batchSize, d.outerSize, p / d.batchSize, d.sliceSize], g = e.makeOutput(m, r.dtype);
  if (A(r.shape) === 0) return g;
  const y = h.shape.length - 1, x = e.dataIdMap.get(h.dataId).id, C = e.dataIdMap.get(f.dataId).id, v = e.dataIdMap.get(g.dataId).id, k = new Uint8Array(new Int32Array(me(h.shape)).buffer), R = new Uint8Array(new Int32Array(me(m)).buffer);
  return VT(x, ot[r.dtype], k, y, C, d.batchSize, R, v), e.disposeData(h.dataId), e.disposeData(f.dataId), g.shape = d.outputShape, g;
}
const Gme = { kernelName: fu, backendName: "wasm", setupFunc: Vme, kernelFunc: Ume };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Hme = false, jme = Kt(gu, Hme, "bool");
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const qme = false, Kme = Kt(ao, qme, "bool");
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Xme = Je(io, "bool");
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Yme = Je(uo, "bool");
/**
* @license
* Copyright 2022 The TensorFlow Authors. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an AS IS BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Qme = Je(lo, "bool");
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let UT;
function Zme(n) {
  UT = n.wasm.cwrap(co, null, ["number", "number", "number", "number"]);
}
function Jme(n) {
  const { inputs: { x: e }, attrs: { alpha: t }, backend: s } = n, r = s.dataIdMap.get(e.dataId).id, a = s.makeOutput(e.shape, "float32");
  if (A(e.shape) !== 0) {
    const o = s.dataIdMap.get(a.dataId).id;
    UT(r, ot[e.dtype], t, o);
  }
  return a;
}
const ege = { kernelName: co, backendName: "wasm", setupFunc: Zme, kernelFunc: Jme };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const tge = false, nge = Kt(yu, tge, "bool");
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const sge = false, rge = Kt(bu, sge, "bool");
/**
* @license
* Copyright 2023 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let GT;
function age(n) {
  GT = n.wasm.cwrap(xu, null, ["number", "number", "number", "number"]);
}
function oge(n) {
  const { attrs: e, backend: t } = n, { start: s, stop: r, num: a } = e, o = Math.floor(a), i = t.makeOutput([o], "float32");
  return GT(t.dataIdMap.get(i.dataId).id, s, r, o), i;
}
const ige = { kernelName: xu, backendName: "wasm", setupFunc: age, kernelFunc: oge };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const uge = Je(ho);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const lge = Je(po);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const cge = false, dge = Kt(wu, cge, "bool");
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const hge = Je(Cu);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const pge = false, fge = Kt(Iu, pge, "bool");
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const mge = false, gge = Kt(oI, mge, "bool");
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let HT;
function yge(n) {
  HT = n.wasm.cwrap(fo, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function bge(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { depthRadius: a, bias: o, alpha: i, beta: u } = s;
  if (r.dtype !== "float32") throw new Error("LRN error: x must have dtype float32");
  const c = t.makeOutput(r.shape, r.dtype);
  return HT(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(c.dataId).id, r.shape[3], a, o, i, u), c;
}
const xge = { kernelName: fo, backendName: "wasm", setupFunc: yge, kernelFunc: bge };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let jT;
function wge(n) {
  jT = n.wasm.cwrap(Su, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Cge(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, y: a, dy: o } = e, { depthRadius: i, bias: u, alpha: c, beta: l } = s;
  if (r.dtype !== "float32" || a.dtype !== "float32" || o.dtype !== "float32") throw new Error("LRNGrad error: x, y, and dy must have dtype float32");
  const d = t.makeOutput(r.shape, r.dtype);
  return jT(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(a.dataId).id, t.dataIdMap.get(o.dataId).id, t.dataIdMap.get(d.dataId).id, o.shape[3], i, u, c, l), d;
}
const Ige = { kernelName: Su, backendName: "wasm", setupFunc: wge, kernelFunc: Cge };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let qT;
function Sge(n) {
  qT = n.wasm.cwrap(mo, null, ["number", "number", "number", "number"]);
}
function vge(n) {
  const { backend: e, inputs: t, attrs: s } = n, { reductionIndices: r, keepDims: a } = s, { x: o } = t;
  let u = e.dataIdMap.get(o.dataId).id, c = o;
  const { transposed: l, axes: d, originalAxes: h, inputWasTransposed: p } = ri(o, r, e);
  if (p) {
    const x = e.dataIdMap.get(l.dataId).id;
    c = l, u = x;
  }
  const f = c.shape.length;
  mt("max", d, f);
  const [m, g] = xt(c.shape, d), y = A(g), b = e.makeOutput(m, o.dtype);
  if (A(c.shape) !== 0) {
    const x = e.dataIdMap.get(b.dataId).id;
    qT(u, ot[o.dtype], y, x);
  }
  if (p && e.disposeData(l.dataId), a) {
    const x = ft(b.shape, h);
    b.shape = x;
  }
  return b;
}
const $ge = { kernelName: mo, backendName: "wasm", setupFunc: Sge, kernelFunc: vge };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const kge = Kt(go);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let KT;
function Nge(n) {
  KT = n.wasm.cwrap(yo, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Tge(n) {
  const { inputs: e, attrs: t, backend: s } = n, r = e.x, a = s.dataIdMap.get(r.dataId).id;
  $(r.dtype === "float32", () => `Error in MaxPool: only float32 input is supported. Got ${r.dtype}.`);
  const { filterSize: o, strides: i, pad: u, dimRoundingMode: c } = t, l = zt(r.shape, o, i, 1, u, c), d = l.filterHeight, h = l.filterWidth, p = l.padInfo.top, f = l.padInfo.right, m = l.padInfo.bottom, g = l.padInfo.left, y = l.dilationHeight, b = l.dilationWidth, x = l.strideHeight, w = l.strideWidth, C = l.inChannels, v = l.outChannels;
  if (l.dataFormat !== "channelsLast") throw new Error(`wasm backend does not support dataFormat:'${l.dataFormat}'. Please use 'channelsLast'.`);
  const k = s.makeOutput(l.outShape, "float32"), R = s.dataIdMap.get(k.dataId).id;
  return KT(a, r.shape[0], r.shape[1], r.shape[2], d, h, p, f, m, g, y, b, x, w, C, v, R), k;
}
const Rge = { kernelName: yo, backendName: "wasm", setupFunc: Nge, kernelFunc: Tge };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let XT;
function _ge(n) {
  XT = n.wasm.cwrap("MaxPool3D", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Ege(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: a, strides: o, pad: i, dimRoundingMode: u, dataFormat: c } = s, l = Sn(r.shape, a, o, 1, i, u, c), d = t.makeOutput(l.outShape, r.dtype);
  return XT(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(d.dataId).id, l.batchSize, l.inChannels, l.inDepth, l.inHeight, l.inWidth, l.outDepth, l.outHeight, l.outWidth, l.strideDepth, l.strideHeight, l.strideWidth, l.dilationDepth, l.dilationHeight, l.dilationWidth, l.effectiveFilterDepth, l.effectiveFilterHeight, l.effectiveFilterWidth, l.padInfo.front, l.padInfo.top, l.padInfo.left), d;
}
const Dge = { kernelName: vu, backendName: "wasm", setupFunc: _ge, kernelFunc: Ege };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let YT;
function Age(n) {
  YT = n.wasm.cwrap("MaxPool3DGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Fge(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, { filterSize: o, strides: i, pad: u, dimRoundingMode: c } = s, l = Sn(a.shape, o, i, 1, u, c), d = t.makeOutput(a.shape, a.dtype);
  return YT(t.dataIdMap.get(a.dataId).id, t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(d.dataId).id, l.batchSize, l.inChannels, l.inDepth, l.inHeight, l.inWidth, l.outDepth, l.outHeight, l.outWidth, l.strideDepth, l.strideHeight, l.strideWidth, l.dilationDepth, l.dilationHeight, l.dilationWidth, l.effectiveFilterDepth, l.effectiveFilterHeight, l.effectiveFilterWidth, l.padInfo.front, l.padInfo.top, l.padInfo.left), d;
}
const Oge = { kernelName: jl, backendName: "wasm", setupFunc: Age, kernelFunc: Fge };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let QT;
function Pge(n) {
  QT = n.wasm.cwrap("MaxPoolGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Lge(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: a } = e, { filterSize: o, strides: i, pad: u, dimRoundingMode: c } = s, l = zt(a.shape, o, i, 1, u, c), d = t.makeOutput(a.shape, a.dtype);
  return QT(t.dataIdMap.get(a.dataId).id, t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(d.dataId).id, l.batchSize, l.inChannels, l.inHeight, l.inWidth, l.outHeight, l.outWidth, l.strideHeight, l.strideWidth, l.dilationHeight, l.dilationWidth, l.effectiveFilterHeight, l.effectiveFilterWidth, l.padInfo.top, l.padInfo.left), d;
}
const zge = { kernelName: Hl, backendName: "wasm", setupFunc: Pge, kernelFunc: Lge };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let ZT;
function Mge(n) {
  ZT = n.wasm.cwrap("MaxPoolWithArgmax", null, ["number", "number", "number", "number", "boolean", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Bge(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: a, strides: o, pad: i, includeBatchInIndex: u } = s;
  $(r.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);
  const c = [1, 1];
  $(qt(o, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);
  const l = zt(r.shape, a, o, [1, 1], i), d = t.makeOutput(l.outShape, r.dtype), h = t.makeOutput(l.outShape, "int32");
  return ZT(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(d.dataId).id, t.dataIdMap.get(h.dataId).id, ot[r.dtype], u, l.batchSize, l.inChannels, l.inHeight, l.inWidth, l.outHeight, l.outWidth, l.strideHeight, l.strideWidth, l.dilationHeight, l.dilationWidth, l.effectiveFilterHeight, l.effectiveFilterWidth, l.padInfo.top, l.padInfo.left), [d, h];
}
const Wge = { kernelName: ql, backendName: "wasm", setupFunc: Mge, kernelFunc: Bge };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let JT;
function Vge(n) {
  JT = n.wasm.cwrap(bo, null, ["number, number, number"]);
}
function Uge(n) {
  const { backend: e, inputs: t, attrs: s } = n, { axis: r, keepDims: a } = s, { x: o } = t, i = e.dataIdMap.get(o.dataId).id;
  let u = i, c = o;
  const { transposed: l, axes: d, originalAxes: h, inputWasTransposed: p } = ri(o, r, e);
  let f = d;
  if (p) {
    const w = e.dataIdMap.get(l.dataId).id;
    w !== i && (c = l, u = w, f = it(f.length, c.shape.length));
  }
  mt("mean", f, c.shape.length);
  const [m, g] = xt(c.shape, f), y = A(g);
  let b = c;
  c.dtype !== "float32" && (b = ai({ backend: e, inputs: { x: c }, attrs: { dtype: "float32" } }), u = e.dataIdMap.get(b.dataId).id);
  const x = e.makeOutput(m, "float32");
  if (A(c.shape) !== 0) {
    const w = e.dataIdMap.get(x.dataId).id;
    JT(u, y, w);
  }
  if (p && e.disposeData(l.dataId), a) {
    const w = ft(x.shape, h);
    x.shape = w;
  }
  return c.dtype !== "float32" && e.disposeData(b.dataId), x;
}
const Gge = { kernelName: bo, backendName: "wasm", setupFunc: Vge, kernelFunc: Uge };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let eR;
function Hge(n) {
  eR = n.wasm.cwrap(xo, null, ["number", "number", "number", "number"]);
}
function jge(n) {
  const { backend: e, inputs: t, attrs: s } = n, { axis: r, keepDims: a } = s, { x: o } = t, i = e.dataIdMap.get(o.dataId).id;
  let u = i, c = o;
  const { transposed: l, axes: d, originalAxes: h, inputWasTransposed: p } = ri(o, r, e);
  if (p) {
    const x = e.dataIdMap.get(l.dataId).id;
    x !== i && (c = l, u = x);
  }
  const f = c.shape.length;
  mt("min", d, f);
  const [m, g] = xt(c.shape, d), y = A(g), b = e.makeOutput(m, c.dtype);
  if (A(c.shape) !== 0) {
    const x = e.dataIdMap.get(b.dataId).id;
    eR(u, ot[o.dtype], y, x);
  }
  if (p && e.disposeData(l.dataId), a) {
    const x = ft(b.shape, h);
    b.shape = x;
  }
  return b;
}
const qge = { kernelName: xo, backendName: "wasm", setupFunc: Hge, kernelFunc: jge };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Kge = Kt(wo);
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
var fy;
(function(n) {
  n[n.reflect = 0] = "reflect", n[n.symmetric = 1] = "symmetric";
})(fy || (fy = {}));
let tR;
function Xge(n) {
  tR = n.wasm.cwrap(Co, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function Yge(n) {
  const { inputs: { x: e }, backend: t, attrs: { paddings: s, mode: r } } = n, a = s.map((f, m) => f[0] + e.shape[m] + f[1]), o = t.dataIdMap.get(e.dataId).id, i = t.makeOutput(a, e.dtype), u = t.dataIdMap.get(i.dataId).id, c = new Uint8Array(new Int32Array(e.shape).buffer), l = s.map((f) => f[0]), d = s.map((f) => f[1]), h = new Uint8Array(new Int32Array(l).buffer), p = new Uint8Array(new Int32Array(d).buffer);
  return tR(o, c, e.shape.length, ot[e.dtype], h, p, fy[r], u), i;
}
const Qge = { kernelName: Co, backendName: "wasm", kernelFunc: Yge, setupFunc: Xge };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let nR;
function Zge(n) {
  nR = n.wasm.cwrap(Ho, null, ["number", "number", "number", "number"]);
}
function sR(n) {
  const { backend: e, inputs: { logits: t }, attrs: { dim: s } } = n, r = e.dataIdMap.get(t.dataId).id, a = e.makeOutput(t.shape, t.dtype), o = e.dataIdMap.get(a.dataId).id, i = t.shape[s], u = A(t.shape) / i;
  return A(a.shape) === 0 || nR(r, o, i, u), a;
}
const Jge = { kernelName: Ho, backendName: "wasm", setupFunc: Zge, kernelFunc: sR };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let rR;
function eye(n) {
  rR = n.wasm.cwrap($u, null, ["number", "number", "number", "number", "number", "number"]);
}
function tye(n) {
  const { inputs: e, backend: t, attrs: s } = n, { logits: r } = e, { numSamples: a, seed: o, normalized: i } = s;
  if (r.dtype !== "float32") throw new Error(`Tensor logits must have dtype float32, got ${r.dtype}`);
  const u = i ? r : sR({ inputs: { logits: r }, backend: t, attrs: { dim: r.shape.length - 1 } }), [c, l] = u.shape, d = t.makeOutput([c, a], "int32");
  return rR(t.dataIdMap.get(u.dataId).id, c, l, a, o, t.dataIdMap.get(d.dataId).id), i || t.disposeData(u.dataId), d;
}
const nye = { kernelName: $u, backendName: "wasm", setupFunc: eye, kernelFunc: tye };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const sye = Kt(Io);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const rye = Kt(So);
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const aye = Je(ku);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function k0(n, e) {
  const t = new Int32Array(n.wasm.HEAPU8.buffer, e, 4), s = t[0], r = t[1], a = t[2], o = t[3];
  return n.wasm._free(e), { pSelectedIndices: s, selectedSize: r, pSelectedScores: a, pValidOutputs: o };
}
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let aR;
function oye(n) {
  aR = n.wasm.cwrap(Tu, "number", ["number", "number", "number", "number", "number"]);
}
function iye(n) {
  const { backend: e, inputs: t, attrs: s } = n, { iouThreshold: r, maxOutputSize: a, scoreThreshold: o } = s, { boxes: i, scores: u } = t, c = e.dataIdMap.get(i.dataId).id, l = e.dataIdMap.get(u.dataId).id, d = aR(c, l, a, r, o), { pSelectedIndices: h, selectedSize: p, pSelectedScores: f, pValidOutputs: m } = k0(e, d);
  return e.wasm._free(f), e.wasm._free(m), e.makeOutput([p], "int32", h);
}
const uye = { kernelName: Tu, backendName: "wasm", setupFunc: oye, kernelFunc: iye };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let oR;
function lye(n) {
  oR = n.wasm.cwrap(Kl, "number", ["number", "number", "number", "number", "number", "bool"]);
}
function cye(n) {
  const { backend: e, inputs: t, attrs: s } = n, { iouThreshold: r, maxOutputSize: a, scoreThreshold: o, padToMaxOutputSize: i } = s, { boxes: u, scores: c } = t, l = e.dataIdMap.get(u.dataId).id, d = e.dataIdMap.get(c.dataId).id, h = oR(l, d, a, r, o, i), { pSelectedIndices: p, selectedSize: f, pSelectedScores: m, pValidOutputs: g } = k0(e, h);
  e.wasm._free(m);
  const y = e.makeOutput([f], "int32", p), b = e.makeOutput([], "int32", g);
  return [y, b];
}
const dye = { kernelName: Kl, backendName: "wasm", setupFunc: lye, kernelFunc: cye };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let iR;
function hye(n) {
  iR = n.wasm.cwrap(Ru, "number", ["number", "number", "number", "number", "number", "number"]);
}
function pye(n) {
  const { backend: e, inputs: t, attrs: s } = n, { iouThreshold: r, maxOutputSize: a, scoreThreshold: o, softNmsSigma: i } = s, { boxes: u, scores: c } = t, l = e.dataIdMap.get(u.dataId).id, d = e.dataIdMap.get(c.dataId).id, h = iR(l, d, a, r, o, i), { pSelectedIndices: p, selectedSize: f, pSelectedScores: m, pValidOutputs: g } = k0(e, h);
  e.wasm._free(g);
  const y = e.makeOutput([f], "int32", p), b = e.makeOutput([f], "float32", m);
  return [y, b];
}
const fye = { kernelName: Ru, backendName: "wasm", setupFunc: hye, kernelFunc: pye };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const mye = false, gye = Kt(Nu, mye, "bool");
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let uR;
function yye(n) {
  uR = n.wasm.cwrap(vo, null, ["number", "number", "number", "number", "number"]);
}
function bye(n) {
  const { inputs: e, backend: t, attrs: s } = n, { indices: r } = e, { dtype: a, depth: o, onValue: i, offValue: u } = s, c = t.makeOutput([...r.shape, o], a), l = t.dataIdMap.get(c.dataId).id, h = t.dataIdMap.get(r.dataId).id;
  return uR(h, o, i, u, l), c;
}
const xye = { kernelName: vo, backendName: "wasm", setupFunc: yye, kernelFunc: bye };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function wye(n) {
  const { inputs: { x: e }, backend: t } = n, s = t.makeOutput(e.shape, e.dtype);
  return t.typedArrayFromHeap(s).fill(1), s;
}
const Cye = { kernelName: _u, backendName: "wasm", kernelFunc: wye };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Iye(n) {
  const { inputs: e, backend: t, attrs: s } = n, { axis: r } = s;
  if (e.length === 1) return py({ inputs: { input: e[0] }, backend: t, attrs: { dim: r } });
  const a = e[0].shape, o = e[0].dtype;
  e.forEach((l) => {
    nn(a, l.shape, "All tensors passed to stack must have matching shapes"), $(o === l.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const i = [], u = e.map((l) => {
    const d = py({ inputs: { input: l }, backend: t, attrs: { dim: r } });
    return i.push(d), d;
  }), c = xT({ inputs: u, backend: t, attrs: { axis: r } });
  return i.forEach((l) => t.disposeData(l.dataId)), c;
}
const Sye = { kernelName: Eu, backendName: "wasm", kernelFunc: Iye };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let lR;
function vye(n) {
  lR = n.wasm.cwrap($o, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function $ye(n) {
  const { inputs: { x: e }, backend: t, attrs: { paddings: s, constantValue: r } } = n, a = s.map((m, g) => m[0] + e.shape[g] + m[1]);
  if (A(e.shape) === 0) return PT({ backend: t, attrs: { shape: a, value: r, dtype: e.dtype } });
  const o = t.dataIdMap.get(e.dataId).id, i = t.makeOutput(a, e.dtype), c = t.dataIdMap.get(i.dataId).id, l = new Uint8Array(new Int32Array(e.shape).buffer), d = s.map((m) => m[0]), h = s.map((m) => m[1]), p = new Uint8Array(new Int32Array(d).buffer), f = new Uint8Array(new Int32Array(h).buffer);
  return lR(o, l, e.shape.length, ot[e.dtype], p, f, r, c), i;
}
const cR = { kernelName: $o, backendName: "wasm", kernelFunc: $ye, setupFunc: vye };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const kye = Kt(ko);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let dR;
function Nye(n) {
  dR = n.wasm.cwrap(No, null, ["number", "number", "number"]);
}
function Tye(n) {
  const { inputs: e, backend: t } = n, { x: s, alpha: r } = e, a = t.dataIdMap.get(s.dataId).id, o = t.dataIdMap.get(r.dataId).id;
  let i = a;
  const u = s;
  let c = u;
  u.dtype !== "float32" && (c = ai({ backend: t, inputs: { x: s }, attrs: { dtype: "float32" } }), i = t.dataIdMap.get(c.dataId).id);
  const l = t.makeOutput(s.shape, "float32"), d = t.dataIdMap.get(l.dataId).id;
  return dR(i, o, d), u.dtype !== "float32" && t.disposeData(c.dataId), l;
}
const Rye = { kernelName: No, backendName: "wasm", setupFunc: Nye, kernelFunc: Tye };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let hR;
function _ye(n) {
  hR = n.wasm.cwrap(To, null, ["number", "number", "number", "number"]);
}
function Eye(n) {
  const { backend: e, inputs: t, attrs: s } = n, { axis: r, keepDims: a } = s, { x: o } = t, i = e.dataIdMap.get(o.dataId).id;
  let u = i, c = o;
  const { transposed: l, axes: d, originalAxes: h, inputWasTransposed: p } = ri(o, r, e);
  let f = d;
  if (p) {
    const x = e.dataIdMap.get(l.dataId).id;
    x !== i && (c = l, u = x, f = it(f.length, c.shape.length));
  }
  mt("prod", f, c.shape.length);
  const [m, g] = xt(c.shape, f), y = A(g), b = e.makeOutput(m, c.dtype);
  if (A(c.shape) !== 0) {
    const x = e.dataIdMap.get(b.dataId).id;
    hR(u, y, ot[b.dtype], x);
  }
  if (p && e.disposeData(l.dataId), a) {
    const x = ft(b.shape, h);
    b.shape = x;
  }
  return b;
}
const Dye = { kernelName: To, backendName: "wasm", setupFunc: _ye, kernelFunc: Eye };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Aye = (n) => {
  const { backend: e, attrs: t } = n, { start: s, stop: r, step: a, dtype: o } = t, i = Yw(s, r, a, o), u = e.makeOutput([i.length], o);
  return e.typedArrayFromHeap(u).set(i), u;
}, Fye = { kernelName: Xl, backendName: "wasm", kernelFunc: Aye };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Oye = Kt(Qa);
/**
* @license
* Copyright 2022 The TensorFlow Authors. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Pye = Je(Ro);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Lye = Je(_o);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const zye = Je(Ao);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let pR;
function Mye(n) {
  pR = n.wasm.cwrap(Do, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Bye(n) {
  const { backend: e, inputs: t, attrs: s } = n, { images: r } = t, { alignCorners: a, halfPixelCenters: o, size: i } = s, [u, c] = i, [l, d, h, p] = r.shape, f = [l, u, c, p];
  let m = e.dataIdMap.get(r.dataId), g;
  m.dtype !== "float32" && (g = ai({ backend: e, inputs: { x: r }, attrs: { dtype: "float32" } }), m = e.dataIdMap.get(g.dataId));
  const y = m.id, b = e.makeOutput(f, "float32");
  if (A(r.shape) === 0) return b;
  const x = e.dataIdMap.get(b.dataId).id;
  return pR(y, l, d, h, p, u, c, a ? 1 : 0, o ? 1 : 0, x), g != null && e.disposeData(g.dataId), b;
}
const Wye = { kernelName: Do, backendName: "wasm", setupFunc: Mye, kernelFunc: Bye };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let fR;
function Vye(n) {
  fR = n.wasm.cwrap(Fu, null, ["number", "number", "number", "array", "array", "boolean"]);
}
function Uye(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: a } = e, { alignCorners: o } = s, i = t.makeOutput(r.shape, "float32");
  let u = t.dataIdMap.get(r.dataId), c;
  return u.dtype !== "float32" && (c = ai({ backend: t, inputs: { x: r }, attrs: { dtype: "float32" } }), u = t.dataIdMap.get(c.dataId)), fR(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(a.dataId).id, t.dataIdMap.get(i.dataId).id, new Uint8Array(new Int32Array(r.shape).buffer), new Uint8Array(new Int32Array(a.shape).buffer), o), c != null && t.disposeData(c.dataId), i;
}
const Gye = { kernelName: Fu, backendName: "wasm", setupFunc: Vye, kernelFunc: Uye };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the 'License');
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an 'AS IS' BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let mR;
function Hye(n) {
  mR = n.wasm.cwrap(Eo, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function jye(n) {
  const { backend: e, inputs: t, attrs: s } = n, { images: r } = t, { alignCorners: a, halfPixelCenters: o, size: i } = s, [u, c] = i, [l, d, h, p] = r.shape, f = [l, u, c, p], m = e.makeOutput(f, "float32");
  if (A(r.shape) === 0) return m;
  let g = e.dataIdMap.get(r.dataId), y;
  g.dtype !== "float32" && (y = ai({ backend: e, inputs: { x: r }, attrs: { dtype: "float32" } }), g = e.dataIdMap.get(y.dataId));
  const b = g.id, x = e.dataIdMap.get(m.dataId).id;
  return mR(b, l, d, h, p, u, c, a ? 1 : 0, o ? 1 : 0, x), y != null && e.disposeData(y.dataId), m;
}
const qye = { kernelName: Eo, backendName: "wasm", setupFunc: Hye, kernelFunc: jye };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let gR;
function Kye(n) {
  gR = n.wasm.cwrap(Au, null, ["number", "number", "number", "array", "array", "boolean"]);
}
function Xye(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: a } = e, { alignCorners: o } = s, i = t.makeOutput(r.shape, "float32");
  let u = t.dataIdMap.get(r.dataId), c;
  return u.dtype !== "float32" && (c = ai({ backend: t, inputs: { x: r }, attrs: { dtype: "float32" } }), u = t.dataIdMap.get(c.dataId)), gR(t.dataIdMap.get(r.dataId).id, t.dataIdMap.get(a.dataId).id, t.dataIdMap.get(i.dataId).id, new Uint8Array(new Int32Array(r.shape).buffer), new Uint8Array(new Int32Array(a.shape).buffer), o), c != null && t.disposeData(c.dataId), i;
}
const Yye = { kernelName: Au, backendName: "wasm", setupFunc: Kye, kernelFunc: Xye };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let yR;
function Qye(n) {
  yR = n.wasm.cwrap(Fo, null, ["number", "array", "number", "array", "number", "number"]);
}
function Zye(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { dims: a } = s, o = Ee(a, r.shape);
  if (r.shape.length === 0) return Mm({ inputs: { x: r }, backend: t });
  const i = t.makeOutput(r.shape, r.dtype), u = t.dataIdMap.get(r.dataId).id, c = t.dataIdMap.get(i.dataId).id, l = new Uint8Array(new Int32Array(o).buffer), d = new Uint8Array(new Int32Array(r.shape).buffer);
  yR(u, l, o.length, d, r.shape.length, c);
  const h = Gn({ inputs: { x: i }, attrs: { shape: r.shape }, backend: t });
  return t.disposeData(i.dataId), h;
}
const Jye = { kernelName: Fo, backendName: "wasm", kernelFunc: Zye, setupFunc: Qye };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let bR;
function ebe(n) {
  bR = n.wasm.cwrap(Ku, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function tbe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { image: r } = e, { radians: a, fillValue: o, center: i } = s, u = t.makeOutput(r.shape, r.dtype), c = t.dataIdMap.get(r.dataId).id, l = t.dataIdMap.get(u.dataId).id, [d, h, p, f] = r.shape, [m, g] = ch(i, h, p), y = o === 0, b = 255, x = typeof o == "number" ? [o, o, o, y ? 0 : b] : [...o, b], w = new Uint8Array(new Int32Array(x).buffer);
  return bR(c, d, h, p, f, a, m, g, w, x.length, l), u;
}
const nbe = { kernelName: Ku, backendName: "wasm", kernelFunc: tbe, setupFunc: ebe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const sbe = Je(Oo);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const rbe = Je(Po);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let xR;
function abe(n) {
  xR = n.wasm.cwrap(Ou, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function obe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { indices: r, updates: a } = t, { shape: o } = s, i = e.makeOutput(o, a.dtype);
  if (A(o) === 0) return i;
  const { sliceRank: u, numUpdates: c, sliceSize: l, strides: d, outputSize: h } = ds(a, r, o), f = e.dataIdMap.get(r.dataId).id, g = e.dataIdMap.get(a.dataId).id, y = new Uint8Array(new Int32Array(d).buffer), b = e.dataIdMap.get(i.dataId).id;
  return xR(f, g, ot[a.dtype], u, c, l, y, h, b), i;
}
const ibe = { kernelName: Ou, backendName: "wasm", setupFunc: abe, kernelFunc: obe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let wR;
function ube(n) {
  wR = n.wasm.cwrap(Lu, null, ["number", "number", "number", "number", "number", "number", "bool", "number"]);
}
function lbe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { sortedSequence: r, values: a } = e, { side: o } = s;
  if (r.dtype !== a.dtype) throw new Error(`SearchSorted error: sorted_sequence must have the same dtype as values. Got ${r.dtype} and ${a.dtype}`);
  const i = t.makeOutput(a.shape, "int32");
  function u(c) {
    return t.dataIdMap.get(c.dataId).id;
  }
  return wR(u(r), u(a), r.shape[0], r.shape[1], a.shape[1], ot[r.dtype], o === "left", u(i)), i;
}
const cbe = { kernelName: Lu, backendName: "wasm", setupFunc: ube, kernelFunc: lbe };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let CR;
function dbe(n) {
  CR = n.wasm.cwrap("SelectV2", null, ["number", "number", "number", "number", "number"]);
}
function hbe(n) {
  const { inputs: e, backend: t } = n, { condition: s, t: r, e: a } = e, o = t.dataIdMap.get(s.dataId).id, i = t.dataIdMap.get(r.dataId).id, u = t.dataIdMap.get(a.dataId).id, c = t.makeOutput(r.shape, r.dtype), l = t.dataIdMap.get(c.dataId).id, d = s.shape.length, h = r.shape.length, p = d === 0 || d > 1 || h === 1 ? 1 : A(r.shape.slice(1));
  return CR(o, i, u, p, l), c;
}
const pbe = { kernelName: zu, backendName: "wasm", kernelFunc: hbe, setupFunc: dbe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const fbe = Je(Lo);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let IR;
function mbe(n) {
  IR = n.wasm.cwrap(Wo, null, ["number", "number"]);
}
function gbe(n) {
  const { backend: e, inputs: { x: t } } = n, s = e.dataIdMap.get(t.dataId).id, r = e.makeOutput(t.shape, t.dtype), a = e.dataIdMap.get(r.dataId).id;
  return A(r.shape) === 0 || IR(s, a), r;
}
const ybe = { kernelName: "Sigmoid", backendName: "wasm", setupFunc: mbe, kernelFunc: gbe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const bbe = Je(Bo);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const xbe = Je(zo);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const wbe = Je(Mo);
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Cbe = Je(Vo);
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ibe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: a, paddings: o } = s, i = A(a), u = [[0, 0]];
  u.push(...o);
  for (let v = 1 + a.length; v < r.shape.length; ++v) u.push([0, 0]);
  const c = cR.kernelFunc({ inputs: { x: r }, backend: t, attrs: { paddings: u, constantValue: 0 } }), l = Zr(c.shape, a, i, false), d = Jr(l.length, a.length, false), h = ea(c.shape, a, i, false), m = Gn({ inputs: { x: c }, backend: t, attrs: { shape: l } }), b = _a({ inputs: { x: m }, backend: t, attrs: { perm: d } }), C = Gn({ inputs: { x: b }, backend: t, attrs: { shape: h } });
  return t.disposeData(c.dataId), t.disposeData(m.dataId), t.disposeData(b.dataId), C;
}
const Sbe = { kernelName: Bu, backendName: "wasm", kernelFunc: Ibe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let SR;
function vbe(n) {
  SR = n.wasm.cwrap("SparseFillEmptyRows", "number", ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function $be(n) {
  const { backend: e, inputs: t } = n, { indices: s, values: r, denseShape: a, defaultValue: o } = t, i = s.shape[0], u = s.shape[1], c = e.readSync(a.dataId)[0], l = [i + c, u], d = e.dataIdMap.get(s.dataId).id, h = e.dataIdMap.get(r.dataId).id, p = e.dataIdMap.get(o.dataId).id, f = e.makeOutput(l, s.dtype), m = e.dataIdMap.get(f.dataId).id, g = e.makeOutput(l.slice(0, 1), r.dtype), y = e.dataIdMap.get(g.dataId).id, b = e.makeOutput([c], "bool"), x = e.dataIdMap.get(b.dataId).id, w = e.makeOutput([i], s.dtype), C = e.dataIdMap.get(w.dataId).id, v = e.makeOutput([4], "int32"), k = e.dataIdMap.get(v.dataId).id, R = SR(d, h, ot[r.dtype], i, c, u, p, m, y, x, C, k), N = e.readSync(v.dataId);
  let T;
  switch (N[0]) {
    case 1: {
      T = Qb(N[1]);
      break;
    }
    case 2: {
      T = Zb(N[1], N[2]);
      break;
    }
    case 3:
      T = Jb(N[1], N[2], N[3]);
      break;
    default:
      T = "";
  }
  if (e.disposeData(v.dataId), T) throw e.disposeData(f.dataId), e.disposeData(g.dataId), e.disposeData(b.dataId), e.disposeData(w.dataId), new Error(T);
  let S = f, E = g;
  return R !== l[0] && (S = qi({ inputs: { x: f }, attrs: { begin: 0, size: [R, u] }, backend: e }), E = qi({ inputs: { x: g }, attrs: { begin: 0, size: R }, backend: e }), e.disposeData(f.dataId), e.disposeData(g.dataId)), [S, E, b, w];
}
const kbe = { kernelName: Ad, backendName: "wasm", setupFunc: vbe, kernelFunc: $be };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let vR;
function Nbe(n) {
  vR = n.wasm.cwrap(Yl, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function Tbe(n) {
  const { backend: e, inputs: t } = n, { inputIndices: s, inputShape: r, newShape: a } = t;
  if (s.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
  if (r.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`);
  if (a.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${a.shape}`);
  const o = e.dataIdMap.get(s.dataId).id, i = e.dataIdMap.get(r.dataId).id, u = e.dataIdMap.get(a.dataId).id, c = s.shape[0], l = A(a.shape), d = e.makeOutput([c, l], s.dtype), h = e.dataIdMap.get(d.dataId).id, p = e.makeOutput([l], a.dtype), f = e.dataIdMap.get(p.dataId).id, m = e.makeOutput([3], "int32"), g = e.dataIdMap.get(m.dataId).id;
  vR(o, i, u, c, h, f, g);
  const y = e.readSync(m.dataId);
  let b;
  switch (y[0]) {
    case 0: {
      b = ex(y[1], y[2]);
      break;
    }
    case 1: {
      b = tx(y[1], y[2]);
      break;
    }
    case 2:
      b = nx();
      break;
    case 3: {
      const x = Array.from(e.readSync(r.dataId)), w = Array.from(e.readSync(p.dataId));
      b = sx(x, w);
      break;
    }
    case 4: {
      const x = Array.from(e.readSync(r.dataId)), w = Array.from(e.readSync(p.dataId));
      b = rx(x, w);
      break;
    }
    default:
      b = "";
  }
  if (e.disposeData(m.dataId), b) throw e.disposeData(d.dataId), e.disposeData(p.dataId), new Error(b);
  return [d, p];
}
const Rbe = { kernelName: Yl, backendName: "wasm", setupFunc: Nbe, kernelFunc: Tbe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let $R;
function kR(n) {
  $R = n.wasm.cwrap("SparseSegmentReduction", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function NR(n, e) {
  const { backend: t, inputs: s } = n, { data: r, indices: a, segmentIds: o } = s, i = a.shape[0], u = t.readSync(o.dataId, i - 1, i)[0], l = i > 0 ? u + 1 : 0;
  if (l < 0) throw new Error(ld());
  const d = r.shape.slice();
  d[0] = l;
  const h = t.dataIdMap.get(r.dataId).id, p = t.dataIdMap.get(a.dataId).id, f = t.dataIdMap.get(o.dataId).id, m = t.makeOutput(d, r.dtype), g = t.dataIdMap.get(m.dataId).id, y = t.makeOutput([4], "int32"), b = t.dataIdMap.get(y.dataId).id;
  $R(h, ot[r.dtype], r.shape[0], p, f, g, b, e, 0);
  const x = t.readSync(y.dataId);
  let w;
  switch (x[0]) {
    case 0: {
      w = ld();
      break;
    }
    case 1: {
      w = ax();
      break;
    }
    case 2:
      w = ox(x[1], x[2]);
      break;
    case 3:
      w = ix(x[1], x[2], x[3]);
      break;
    default:
      w = "";
  }
  if (t.disposeData(y.dataId), w) throw t.disposeData(m.dataId), new Error(w);
  return m;
}
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function _be(n) {
  return NR(n, true);
}
const Ebe = { kernelName: Ql, backendName: "wasm", setupFunc: kR, kernelFunc: _be };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Dbe(n) {
  return NR(n, false);
}
const Abe = { kernelName: Zl, backendName: "wasm", setupFunc: kR, kernelFunc: Dbe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let TR;
function Fbe(n) {
  TR = n.wasm.cwrap(Vu, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function Obe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { sparseIndices: r, sparseValues: a, defaultValue: o } = t, { outputShape: i } = s, u = e.makeOutput(i, o.dtype);
  if (A(i) === 0) return u;
  const { sliceRank: c, numUpdates: l, sliceSize: d, strides: h, outputSize: p } = ds(a, r, i), f = e.dataIdMap.get(r.dataId).id, m = e.dataIdMap.get(a.dataId).id, g = e.dataIdMap.get(o.dataId).id, y = new Uint8Array(new Int32Array(h).buffer), b = e.dataIdMap.get(u.dataId).id;
  return TR(f, m, a.shape.length, g, ot[o.dtype], c, l, d, y, p, b), u;
}
const Pbe = { kernelName: Vu, backendName: "wasm", setupFunc: Fbe, kernelFunc: Obe };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Lbe(n) {
  const { inputs: e, attrs: t, backend: s } = n, { x: r } = e, { numOrSizeSplits: a, axis: o } = t, i = Ee(o, r.shape)[0], u = mh(r, a, i), c = new Array(r.shape.length).fill(0), l = r.shape.slice();
  return u.map((d) => {
    const h = [...l];
    h[i] = d;
    const p = qi({ inputs: { x: r }, attrs: { begin: c, size: h }, backend: s });
    return c[i] += d, p;
  });
}
const zbe = { kernelName: Wu, backendName: "wasm", kernelFunc: Lbe };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Mbe = Je(Uo);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Bbe = Je(Jl);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Wbe = Kt(jo);
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let RR;
function Vbe(n) {
  RR = n.wasm.cwrap(jr, null, ["number", "number", "number", "number"]);
}
function Ube(n) {
  const { backend: e, inputs: t, attrs: s } = n, { alpha: r } = s, { x: a } = t, o = e.dataIdMap.get(a.dataId).id, i = e.makeOutput(a.shape, a.dtype), u = e.dataIdMap.get(i.dataId).id;
  return RR(o, r, ot[a.dtype], u), i;
}
const Gbe = { kernelName: jr, backendName: "wasm", setupFunc: Vbe, kernelFunc: Ube };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let _R;
function Hbe(n) {
  _R = n.wasm.cwrap(Uu, null, ["number", "array", "number", "array", "array", "array", "array", "array", "number", "number"]);
}
function jbe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { x: r } = t, { begin: a, end: o, strides: i, beginMask: u, endMask: c, ellipsisMask: l, newAxisMask: d, shrinkAxisMask: h } = s, { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: x, strides: w } = uh(r.shape, a, o, i, u, c, l, d, h);
  let C;
  if (m) C = Gn({ inputs: { x: r }, backend: e, attrs: { shape: f } });
  else if (g || y) {
    $(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    const v = ih(b, x, w), k = qi({ inputs: { x: r }, backend: e, attrs: { begin: b, size: v } });
    C = Gn({ inputs: { x: k }, backend: e, attrs: { shape: f } }), e.disposeData(k.dataId);
  } else {
    const v = e.makeOutput(p, "float32"), k = e.dataIdMap.get(r.dataId).id, R = new Uint8Array(new Int32Array(me(r.shape)).buffer), N = new Uint8Array(new Int32Array(b).buffer), T = new Uint8Array(new Int32Array(x).buffer), S = new Uint8Array(new Int32Array(w).buffer), E = new Uint8Array(new Int32Array(p).buffer), P = new Uint8Array(new Int32Array(me(p)).buffer), M = e.dataIdMap.get(v.dataId).id;
    _R(k, R, r.shape.length, N, T, S, E, P, p.length, M), C = Gn({ inputs: { x: v }, backend: e, attrs: { shape: f } }), e.disposeData(v.dataId);
  }
  return C;
}
const qbe = { kernelName: Uu, backendName: "wasm", setupFunc: Hbe, kernelFunc: jbe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Kbe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { data: r, dataSplits: a } = t, { separator: o, nGramWidths: i, leftPad: u, rightPad: c, padWidth: l, preserveShortSequences: d } = s, h = e.readSync(r.dataId), p = e.readSync(a.dataId), [f, m] = Zw(h, p, o, i, u, c, l, d), g = e.makeOutput([f.length], "string"), y = e.dataIdMap.get(g.dataId);
  y.stringBytes = f;
  const b = e.makeOutput(a.shape, "int32");
  return e.typedArrayFromHeap(b).set(m), [g, b];
}
const Xbe = { kernelName: ec, backendName: "wasm", kernelFunc: Kbe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ybe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { input: r, delimiter: a } = t, { skipEmpty: o } = s, i = e.readSync(r.dataId), u = e.readSync(a.dataId), [c, l, d] = Jw(i, u[0], o), h = l.length, p = e.makeOutput([h, 2], "int32");
  e.typedArrayFromHeap(p).set(c);
  const m = e.makeOutput([h], "string"), g = e.dataIdMap.get(m.dataId);
  g.stringBytes = l;
  const y = e.makeOutput([2], "int32");
  return e.typedArrayFromHeap(y).set(d), [p, m, y];
}
const Qbe = { kernelName: Od, backendName: "wasm", kernelFunc: Ybe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Zbe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { input: r } = t, { numBuckets: a } = s, o = e.readSync(r.dataId), i = e0(o, a), u = e.makeOutput(r.shape, "int32");
  return e.typedArrayFromHeap(u).set(i), u;
}
const Jbe = { kernelName: Pd, backendName: "wasm", kernelFunc: Zbe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const exe = Kt(qo);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let ER;
function txe(n) {
  ER = n.wasm.cwrap(Go, null, ["number", "number", "number", "number"]);
}
function nxe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { axis: r, keepDims: a } = s, { x: o } = t, i = e.dataIdMap.get(o.dataId).id;
  let u = i, c = o;
  const { transposed: l, axes: d, originalAxes: h, inputWasTransposed: p } = ri(o, r, e);
  let f = d;
  if (p) {
    const x = e.dataIdMap.get(l.dataId).id;
    x !== i && (c = l, u = x, f = it(f.length, c.shape.length));
  }
  mt("sum", f, c.shape.length);
  const [m, g] = xt(c.shape, f), y = A(g), b = e.makeOutput(m, c.dtype);
  if (A(c.shape) !== 0) {
    const x = e.dataIdMap.get(b.dataId).id;
    ER(u, y, ot[b.dtype], x);
  }
  if (p && e.disposeData(l.dataId), a) {
    const x = ft(b.shape, h);
    b.shape = x;
  }
  return b;
}
const sxe = { kernelName: Go, backendName: "wasm", setupFunc: txe, kernelFunc: nxe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const rxe = Je(Ko);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const axe = Je(Xo);
/**
* @license
* Copyright 2022 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let DR;
function oxe(n) {
  DR = n.wasm.cwrap(Pu, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number", "number"]);
}
function ixe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { tensor: r, indices: a, updates: o } = t, i = e.makeOutput(r.shape, r.dtype);
  if (A(r.shape) === 0) return i;
  const { sliceRank: u, numUpdates: c, sliceSize: l, strides: d, outputSize: h } = ds(o, a, r.shape), f = e.dataIdMap.get(a.dataId).id, g = e.dataIdMap.get(o.dataId).id, b = e.dataIdMap.get(r.dataId).id, x = new Uint8Array(new Int32Array(d).buffer), w = e.dataIdMap.get(i.dataId).id;
  return DR(f, g, ot[o.dtype], u, c, l, x, h, w, b), i;
}
const uxe = { kernelName: Pu, backendName: "wasm", setupFunc: oxe, kernelFunc: ixe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let AR;
function lxe(n) {
  AR = n.wasm.cwrap(Hr, null, ["number", "array", "number", "array", "number", "number"]);
}
function cxe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, a = t.dataIdMap.get(r.dataId).id, { reps: o } = s, i = new Array(r.shape.length);
  for (let h = 0; h < i.length; h++) i[h] = r.shape[h] * o[h];
  const u = new Uint8Array(new Int32Array(r.shape).buffer), c = new Uint8Array(new Int32Array(i).buffer), l = t.makeOutput(i, r.dtype), d = t.dataIdMap.get(l.dataId).id;
  return AR(a, u, r.shape.length, c, i.length, ot[l.dtype], d), l;
}
const dxe = { kernelName: Hr, backendName: "wasm", setupFunc: lxe, kernelFunc: cxe };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let FR;
function hxe(n) {
  FR = n.wasm.cwrap(Gu, null, ["number", "array", "number", "number", "number", "bool", "number", "number"]);
}
const pxe = ({ inputs: n, backend: e, attrs: t }) => {
  const { x: s } = n, { k: r, sorted: a } = t, o = e.dataIdMap.get(s.dataId).id, i = new Uint8Array(new Int32Array(s.shape).buffer), u = s.shape.slice();
  u[u.length - 1] = r;
  const c = e.makeOutput(u, s.dtype), l = e.dataIdMap.get(c.dataId).id, d = e.makeOutput(u, "int32"), h = e.dataIdMap.get(d.dataId).id;
  return FR(o, i, s.shape.length, ot[s.dtype], r, a, l, h), [c, d];
}, fxe = { kernelName: Gu, backendName: "wasm", setupFunc: hxe, kernelFunc: pxe };
/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
let OR;
function mxe(n) {
  OR = n.wasm.cwrap(Hu, null, ["number", "number", "bool", "number", "number", "number", "number", "number", "number", "array", "number", "array", "number", "number", "number", "number", "number"]);
}
function gxe(n) {
  const { backend: e, inputs: t, attrs: s } = n, { image: r, transforms: a } = t, { interpolation: o, fillMode: i, fillValue: u, outputShape: c } = s, [l, d, h, p] = r.shape, [f, m] = c ?? [d, h], g = [l, f, m, p], y = new Uint8Array(new Int32Array(me(r.shape)).buffer), b = new Uint8Array(new Int32Array(me(g)).buffer), x = e.makeOutput(g, r.dtype), w = e.dataIdMap.get(x.dataId).id, v = e.dataIdMap.get(r.dataId).id, R = e.dataIdMap.get(a.dataId).id, N = o === "nearest" ? 1 : 2;
  let T;
  switch (i) {
    case "constant":
      T = 1;
      break;
    case "reflect":
      T = 2;
      break;
    case "wrap":
      T = 3;
      break;
    case "nearest":
      T = 4;
      break;
    default:
      T = 1;
      break;
  }
  return OR(v, R, a.shape[0] > 1, l, f, m, p, h, d, y, r.shape.length - 1, b, g.length - 1, N, T, u, w), x;
}
const yxe = { kernelName: Hu, backendName: "wasm", setupFunc: mxe, kernelFunc: gxe };
/**
* @license
* Copyright 2023 Google LLC.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function bxe(n) {
  const { inputs: e, attrs: t, backend: s } = n, { axis: r } = t, { x: a } = e, { outputValues: o, outputShape: i, indices: u } = n0(s.readSync(a.dataId), r, a.shape, a.dtype);
  return [s.makeOutput(i, a.dtype, void 0, o), s.makeOutput([u.length], "int32", void 0, u)];
}
const xxe = { kernelName: Ld, backendName: "wasm", kernelFunc: bxe };
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function wxe(n) {
  const { inputs: e, backend: t, attrs: s } = n, { value: r } = e;
  let { axis: a } = s;
  a < 0 && (a += r.shape.length);
  const o = r.shape[a], i = r.shape.length, u = new Array(i - 1);
  let c = 0;
  for (let p = 0; p < i; p++) p !== a && (u[c++] = r.shape[p]);
  const l = new Array(o), d = new Array(i).fill(0), h = r.shape.slice();
  h[a] = 1;
  for (let p = 0; p < l.length; p++) d[a] = p, l[p] = qi({ inputs: { x: r }, attrs: { begin: d, size: h }, backend: t });
  return l.map(({ dataId: p, dtype: f }) => ({ dataId: p, dtype: f, shape: u }));
}
const Cxe = { kernelName: ju, backendName: "wasm", kernelFunc: wxe };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
function Ixe(n) {
  const { inputs: { x: e }, backend: t } = n, s = t.makeOutput(e.shape, e.dtype);
  return t.typedArrayFromHeap(s).fill(0), s;
}
const Sxe = { kernelName: qu, backendName: "wasm", kernelFunc: Ixe };
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const vxe = [mpe, gpe, ype, bpe, xpe, Ipe, _pe, Ape, Fpe, Ope, Ppe, Lpe, zpe, Mpe, Bpe, Upe, Zpe, jpe, Xpe, nfe, ufe, dfe, hfe, ffe, mfe, gfe, xfe, wfe, Sfe, kfe, Rfe, Dfe, Ofe, Pfe, Lfe, Bfe, Ufe, jfe, Xfe, Zfe, tme, rme, ime, cme, pme, fme, yme, xme, wme, Cme, Ime, Sme, vme, Nme, Tme, Rme, Dme, Ome, zme, Wme, Gme, jme, Kme, Spe, Xme, Yme, Qme, ege, nge, rge, ige, lge, uge, dge, hge, fge, gge, xge, Ige, $ge, kge, Rge, Dge, Oge, zge, Wge, Gge, qge, Kge, Qge, nye, sye, rye, aye, uye, dye, fye, gye, xye, Cye, Sye, cR, kye, Rye, Dye, Fye, Oye, Pye, Lye, zye, Jpe, Wye, Gye, qye, Yye, Jye, nbe, sbe, rbe, ibe, cbe, pbe, fbe, ybe, bbe, xbe, wbe, ofe, Jge, Cbe, Sbe, kbe, Rbe, Ebe, Abe, Pbe, zbe, Mbe, Bbe, Wbe, Gbe, qbe, Xbe, Qbe, Jbe, exe, sxe, rxe, axe, uxe, dxe, fxe, yxe, Npe, xxe, Cxe, Sxe];
for (const n of vxe) nc(n);
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const my = U();
my.registerFlag("WASM_HAS_SIMD_SUPPORT", async () => {
  try {
    return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]));
  } catch {
    return false;
  }
});
my.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT", async () => {
  if (my.get("IS_NODE")) return false;
  try {
    return new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11]));
  } catch {
    return false;
  }
});
var cg = { exports: {} }, jC;
function $xe() {
  return jC || (jC = 1, function(n, e) {
    var t = (() => {
      var s = typeof document < "u" && document.currentScript ? document.currentScript.src : void 0;
      return typeof __filename < "u" && (s = s || __filename), function(r) {
        r = r || {};
        function a() {
          return G.buffer != ge && rt(G.buffer), ke;
        }
        function o() {
          return G.buffer != ge && rt(G.buffer), Pe;
        }
        function i() {
          return G.buffer != ge && rt(G.buffer), ze;
        }
        function u() {
          return G.buffer != ge && rt(G.buffer), Xe;
        }
        function c() {
          return G.buffer != ge && rt(G.buffer), ut;
        }
        var l = typeof r < "u" ? r : {}, d, h;
        l.ready = new Promise(function(D, j) {
          d = D, h = j;
        });
        var p;
        typeof process < "u" && process.listeners && (p = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") });
        var f = Object.assign({}, l), m = (D, j) => {
          throw j;
        }, g = typeof window == "object", y = typeof importScripts == "function", b = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", x = l.ENVIRONMENT_IS_PTHREAD || false, w = "";
        function C(D) {
          return l.locateFile ? l.locateFile(D, w) : w + D;
        }
        var v, k, R;
        function N(D) {
          if (D instanceof kr) return;
          L("exiting due to exception: " + D);
        }
        if (b) {
          var T = ia, S = ia;
          y ? w = S.dirname(w) + "/" : w = __dirname + "/", v = (j, oe) => (j = sa(j) ? new URL(j) : S.normalize(j), T.readFileSync(j, oe ? void 0 : "utf8")), R = (j) => {
            var oe = v(j, true);
            return oe.buffer || (oe = new Uint8Array(oe)), oe;
          }, k = (j, oe, De) => {
            j = sa(j) ? new URL(j) : S.normalize(j), T.readFile(j, function(We, Ue) {
              We ? De(We) : oe(Ue.buffer);
            });
          }, process.argv.length > 1 && process.argv[1].replace(/\\/g, "/"), process.argv.slice(2), process.on("uncaughtException", function(j) {
            if (!(j instanceof kr)) throw j;
          }), process.on("unhandledRejection", function(j) {
            throw j;
          }), m = (j, oe) => {
            if ($t()) throw process.exitCode = j, oe;
            N(oe), process.exit(j);
          }, l.inspect = function() {
            return "[Emscripten Module object]";
          };
          let D;
          try {
            D = ia;
          } catch (j) {
            throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), j;
          }
          U0.Worker = D.Worker;
        } else (g || y) && (y ? w = self.location.href : typeof document < "u" && document.currentScript && (w = document.currentScript.src), typeof s < "u" && s && (w = s), w.indexOf("blob:") !== 0 ? w = w.substr(0, w.replace(/[?#].*/, "").lastIndexOf("/") + 1) : w = "", b || (v = (D) => {
          var j = new XMLHttpRequest();
          return j.open("GET", D, false), j.send(null), j.responseText;
        }, y && (R = (D) => {
          var j = new XMLHttpRequest();
          return j.open("GET", D, false), j.responseType = "arraybuffer", j.send(null), new Uint8Array(j.response);
        }), k = (D, j, oe) => {
          var De = new XMLHttpRequest();
          De.open("GET", D, true), De.responseType = "arraybuffer", De.onload = () => {
            if (De.status == 200 || De.status == 0 && De.response) {
              j(De.response);
              return;
            }
            oe();
          }, De.onerror = oe, De.send(null);
        }));
        b && typeof performance > "u" && (U0.performance = ia.performance);
        var E = console.log.bind(console), P = console.warn.bind(console);
        b && (E = (D) => T.writeSync(1, D + `
`), P = (D) => T.writeSync(2, D + `
`));
        var M = l.print || E, L = l.printErr || P;
        Object.assign(l, f), f = null, l.arguments && l.arguments, l.thisProgram && l.thisProgram, l.quit && (m = l.quit);
        var V;
        l.wasmBinary && (V = l.wasmBinary);
        var q = l.noExitRuntime || true;
        typeof WebAssembly != "object" && Bs("no native wasm support detected");
        var G, K, X = false, Z;
        function ee(D, j) {
          D || Bs(j);
        }
        var J = typeof TextDecoder < "u" ? new TextDecoder("utf8") : void 0;
        function re(D, j, oe) {
          j >>>= 0;
          for (var De = j + oe, We = j; D[We] && !(We >= De); ) ++We;
          if (We - j > 16 && D.buffer && J) return J.decode(D.buffer instanceof SharedArrayBuffer ? D.slice(j, We) : D.subarray(j, We));
          for (var Ue = ""; j < We; ) {
            var be = D[j++];
            if (!(be & 128)) {
              Ue += String.fromCharCode(be);
              continue;
            }
            var Te = D[j++] & 63;
            if ((be & 224) == 192) {
              Ue += String.fromCharCode((be & 31) << 6 | Te);
              continue;
            }
            var Rt = D[j++] & 63;
            if ((be & 240) == 224 ? be = (be & 15) << 12 | Te << 6 | Rt : be = (be & 7) << 18 | Te << 12 | Rt << 6 | D[j++] & 63, be < 65536) Ue += String.fromCharCode(be);
            else {
              var fs = be - 65536;
              Ue += String.fromCharCode(55296 | fs >> 10, 56320 | fs & 1023);
            }
          }
          return Ue;
        }
        function se(D, j) {
          return D >>>= 0, D ? re(o(), D, j) : "";
        }
        function pe(D, j, oe, De) {
          if (oe >>>= 0, !(De > 0)) return 0;
          for (var We = oe, Ue = oe + De - 1, be = 0; be < D.length; ++be) {
            var Te = D.charCodeAt(be);
            if (Te >= 55296 && Te <= 57343) {
              var Rt = D.charCodeAt(++be);
              Te = 65536 + ((Te & 1023) << 10) | Rt & 1023;
            }
            if (Te <= 127) {
              if (oe >= Ue) break;
              j[oe++ >>> 0] = Te;
            } else if (Te <= 2047) {
              if (oe + 1 >= Ue) break;
              j[oe++ >>> 0] = 192 | Te >> 6, j[oe++ >>> 0] = 128 | Te & 63;
            } else if (Te <= 65535) {
              if (oe + 2 >= Ue) break;
              j[oe++ >>> 0] = 224 | Te >> 12, j[oe++ >>> 0] = 128 | Te >> 6 & 63, j[oe++ >>> 0] = 128 | Te & 63;
            } else {
              if (oe + 3 >= Ue) break;
              j[oe++ >>> 0] = 240 | Te >> 18, j[oe++ >>> 0] = 128 | Te >> 12 & 63, j[oe++ >>> 0] = 128 | Te >> 6 & 63, j[oe++ >>> 0] = 128 | Te & 63;
            }
          }
          return j[oe >>> 0] = 0, oe - We;
        }
        function Se(D, j, oe) {
          return pe(D, o(), j, oe);
        }
        var ge, ke, Pe, ze, Xe, ut;
        x && (ge = l.buffer);
        function rt(D) {
          ge = D, l.HEAP8 = ke = new Int8Array(D), l.HEAP16 = new Int16Array(D), l.HEAP32 = ze = new Int32Array(D), l.HEAPU8 = Pe = new Uint8Array(D), l.HEAPU16 = new Uint16Array(D), l.HEAPU32 = Xe = new Uint32Array(D), l.HEAPF32 = new Float32Array(D), l.HEAPF64 = ut = new Float64Array(D);
        }
        var et = l.INITIAL_MEMORY || 16777216;
        if (x) G = l.wasmMemory, ge = l.buffer;
        else if (l.wasmMemory) G = l.wasmMemory;
        else if (G = new WebAssembly.Memory({ initial: et / 65536, maximum: 65536, shared: true }), !(G.buffer instanceof SharedArrayBuffer)) throw L("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), b && L("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
        G && (ge = G.buffer), et = ge.byteLength, rt(ge);
        var Le, dt = [], ht = [], Yn = [];
        function $t() {
          return q;
        }
        function Qn() {
          if (l.preRun) for (typeof l.preRun == "function" && (l.preRun = [l.preRun]); l.preRun.length; ) Ln(l.preRun.shift());
          Ct(dt);
        }
        function hn() {
          x || Ct(ht);
        }
        function Ns() {
          if (!x) {
            if (l.postRun) for (typeof l.postRun == "function" && (l.postRun = [l.postRun]); l.postRun.length; ) Ts(l.postRun.shift());
            Ct(Yn);
          }
        }
        function Ln(D) {
          dt.unshift(D);
        }
        function hs(D) {
          ht.unshift(D);
        }
        function Ts(D) {
          Yn.unshift(D);
        }
        var pn = 0, kn = null;
        function $r(D) {
          pn++, l.monitorRunDependencies && l.monitorRunDependencies(pn);
        }
        function oi(D) {
          if (pn--, l.monitorRunDependencies && l.monitorRunDependencies(pn), pn == 0 && kn) {
            var j = kn;
            kn = null, j();
          }
        }
        function Bs(D) {
          l.onAbort && l.onAbort(D), D = "Aborted(" + D + ")", L(D), X = true, Z = 1, D += ". Build with -sASSERTIONS for more info.";
          var j = new WebAssembly.RuntimeError(D);
          throw h(j), j;
        }
        var _c = "data:application/octet-stream;base64,";
        function ur(D) {
          return D.startsWith(_c);
        }
        function sa(D) {
          return D.startsWith("file://");
        }
        var fn;
        fn = "tfjs-backend-wasm-threaded-simd.wasm", ur(fn) || (fn = C(fn));
        function Fh(D) {
          try {
            if (D == fn && V) return new Uint8Array(V);
            if (R) return R(D);
            throw "both async and sync fetching of the wasm failed";
          } catch (j) {
            Bs(j);
          }
        }
        function Oh() {
          if (!V && (g || y)) {
            if (typeof fetch == "function" && !sa(fn)) return fetch(fn, { credentials: "same-origin" }).then(function(D) {
              if (!D.ok) throw "failed to load wasm binary file at '" + fn + "'";
              return D.arrayBuffer();
            }).catch(function() {
              return Fh(fn);
            });
            if (k) return new Promise(function(D, j) {
              k(fn, function(oe) {
                D(new Uint8Array(oe));
              }, j);
            });
          }
          return Promise.resolve().then(function() {
            return Fh(fn);
          });
        }
        function Ph() {
          var D = { env: A0, wasi_snapshot_preview1: A0 };
          function j(be, Te) {
            var Rt = be.exports;
            if (l.asm = Rt, Nr(l.asm._emscripten_tls_init), Le = l.asm.__indirect_function_table, hs(l.asm.__wasm_call_ctors), K = Te, !x) {
              var fs = fe.unusedWorkers.length;
              fe.unusedWorkers.forEach(function(Tr) {
                fe.loadWasmModuleToWorker(Tr, function() {
                  --fs || oi();
                });
              });
            }
          }
          x || $r();
          function oe(be) {
            j(be.instance, be.module);
          }
          function De(be) {
            return Oh().then(function(Te) {
              return WebAssembly.instantiate(Te, D);
            }).then(function(Te) {
              return Te;
            }).then(be, function(Te) {
              L("failed to asynchronously prepare wasm: " + Te), Bs(Te);
            });
          }
          function We() {
            return !V && typeof WebAssembly.instantiateStreaming == "function" && !ur(fn) && !sa(fn) && !b && typeof fetch == "function" ? fetch(fn, { credentials: "same-origin" }).then(function(be) {
              var Te = WebAssembly.instantiateStreaming(be, D);
              return Te.then(oe, function(Rt) {
                return L("wasm streaming compile failed: " + Rt), L("falling back to ArrayBuffer instantiation"), De(oe);
              });
            }) : De(oe);
          }
          if (l.instantiateWasm) try {
            var Ue = l.instantiateWasm(D, j);
            return Ue;
          } catch (be) {
            L("Module.instantiateWasm callback failed with error: " + be), h(be);
          }
          return We().catch(h), {};
        }
        var Lh = {};
        function kr(D) {
          this.name = "ExitStatus", this.message = "Program terminated with exit(" + D + ")", this.status = D;
        }
        function ll(D) {
          var j = fe.pthreads[D];
          delete fe.pthreads[D], j.terminate(), Um(D), fe.runningWorkers.splice(fe.runningWorkers.indexOf(j), 1), j.pthread_ptr = 0;
        }
        function zh(D) {
          var j = fe.pthreads[D];
          j.postMessage({ cmd: "cancel" });
        }
        function ii(D) {
          var j = fe.pthreads[D];
          ee(j), fe.returnWorkerToPool(j);
        }
        function ui(D) {
          var j = fe.getNewWorker();
          if (!j) return 6;
          fe.runningWorkers.push(j), fe.pthreads[D.pthread_ptr] = j, j.pthread_ptr = D.pthread_ptr;
          var oe = { cmd: "run", start_routine: D.startRoutine, arg: D.arg, pthread_ptr: D.pthread_ptr };
          return j.runPthread = () => {
            b && j.ref(), j.postMessage(oe, D.transferList), delete j.runPthread;
          }, j.loaded && j.runPthread(), 0;
        }
        function Mh(D) {
          if (x) return cl(1, 1, D);
          Z = D, $t() || (fe.terminateAllThreads(), l.onExit && l.onExit(D), X = true), m(D, new kr(D));
        }
        function Q(D, j) {
          if (Z = D, !j && x) throw Ke(D), "unwind";
          Mh(D);
        }
        var ae = Q;
        function _e(D) {
          if (D instanceof kr || D == "unwind") return Z;
          m(1, D);
        }
        var fe = { unusedWorkers: [], runningWorkers: [], tlsInitFunctions: [], pthreads: {}, init: function() {
          x ? fe.initWorker() : fe.initMainThread();
        }, initMainThread: function() {
          for (var D = 8; D--; ) fe.allocateUnusedWorker();
        }, initWorker: function() {
          q = false;
        }, setExitStatus: function(D) {
          Z = D;
        }, terminateAllThreads: function() {
          for (var D of Object.values(fe.pthreads)) fe.returnWorkerToPool(D);
          for (var D of fe.unusedWorkers) D.terminate();
          fe.unusedWorkers = [];
        }, returnWorkerToPool: function(D) {
          var j = D.pthread_ptr;
          delete fe.pthreads[j], fe.unusedWorkers.push(D), fe.runningWorkers.splice(fe.runningWorkers.indexOf(D), 1), D.pthread_ptr = 0, b && D.unref(), Um(j);
        }, receiveObjectTransfer: function(D) {
        }, threadInitTLS: function() {
          fe.tlsInitFunctions.forEach((D) => D());
        }, loadWasmModuleToWorker: function(D, j) {
          D.onmessage = (Ue) => {
            var be = Ue.data, Te = be.cmd;
            if (D.pthread_ptr && (fe.currentProxiedOperationCallerThread = D.pthread_ptr), be.targetThread && be.targetThread != Uh()) {
              var Rt = fe.pthreads[be.targetThread];
              Rt ? Rt.postMessage(be, be.transferList) : L('Internal error! Worker sent a message "' + Te + '" to target pthread ' + be.targetThread + ", but that thread no longer exists!"), fe.currentProxiedOperationCallerThread = void 0;
              return;
            }
            Te === "processProxyingQueue" ? Bm(be.queue) : Te === "spawnThread" ? ui(be) : Te === "cleanupThread" ? ii(be.thread) : Te === "killThread" ? ll(be.thread) : Te === "cancelThread" ? zh(be.thread) : Te === "loaded" ? (D.loaded = true, b && D.unref(), j && j(D), D.runPthread && D.runPthread()) : Te === "print" ? M("Thread " + be.threadId + ": " + be.text) : Te === "printErr" ? L("Thread " + be.threadId + ": " + be.text) : Te === "alert" ? alert("Thread " + be.threadId + ": " + be.text) : be.target === "setimmediate" ? D.postMessage(be) : Te === "callHandler" ? l[be.handler](...be.args) : Te && L("worker sent an unknown command " + Te), fe.currentProxiedOperationCallerThread = void 0;
          }, D.onerror = (Ue) => {
            var be = "worker sent an error!";
            throw L(be + " " + Ue.filename + ":" + Ue.lineno + ": " + Ue.message), Ue;
          }, b && (D.on("message", function(Ue) {
            D.onmessage({ data: Ue });
          }), D.on("error", function(Ue) {
            D.onerror(Ue);
          }), D.on("detachedExit", function() {
          }));
          var oe = [], De = ["onExit", "onAbort", "print", "printErr"];
          for (var We of De) l.hasOwnProperty(We) && oe.push(We);
          D.postMessage({ cmd: "load", handlers: oe, urlOrBlob: l.mainScriptUrlOrBlob || s, wasmMemory: G, wasmModule: K });
        }, allocateUnusedWorker: function() {
          var D, j = C("tfjs-backend-wasm-threaded-simd.worker.js");
          D = new Worker(j), fe.unusedWorkers.push(D);
        }, getNewWorker: function() {
          return fe.unusedWorkers.length == 0 && (fe.allocateUnusedWorker(), fe.loadWasmModuleToWorker(fe.unusedWorkers[0])), fe.unusedWorkers.pop();
        } };
        l.PThread = fe;
        function Ct(D) {
          for (; D.length > 0; ) D.shift()(l);
        }
        function kt() {
          var D = Uh(), j = i()[D + 52 >>> 2], oe = i()[D + 56 >>> 2], De = j - oe;
          z0(j, De), Gh(j);
        }
        l.establishStackSpace = kt;
        function Ke(D) {
          if (x) return cl(2, 0, D);
          try {
            ae(D);
          } catch (j) {
            _e(j);
          }
        }
        var Ve = [];
        function Wt(D) {
          var j = Ve[D];
          return j || (D >= Ve.length && (Ve.length = D + 1), Ve[D] = j = Le.get(D)), j;
        }
        function ps(D, j) {
          var oe = Wt(D)(j);
          $t() ? fe.setExitStatus(oe) : L0(oe);
        }
        l.invokeEntryPoint = ps;
        function Nr(D) {
          fe.tlsInitFunctions.push(D);
        }
        function Bh(D) {
          F0(D, !y, 1, !g), fe.threadInitTLS();
        }
        function Ec(D) {
          x ? postMessage({ cmd: "cleanupThread", thread: D }) : ii(D);
        }
        function Wh(D, j, oe, De) {
          return x ? cl(3, 1, D, j, oe, De) : In(D, j, oe, De);
        }
        function In(D, j, oe, De) {
          if (typeof SharedArrayBuffer > "u") return L("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
          var We = [], Ue = 0;
          if (x && (We.length === 0 || Ue)) return Wh(D, j, oe, De);
          var be = { startRoutine: oe, pthread_ptr: D, arg: De, transferList: We };
          return x ? (be.cmd = "spawnThread", postMessage(be, We), 0) : ui(be);
        }
        function ra() {
          return 65536;
        }
        var Vh = true;
        function VR() {
          return Vh;
        }
        function Bm(D) {
          Atomics.store(i(), D >> 2, 1), Uh() && P0(D), Atomics.compareExchange(i(), D >> 2, 1, 0);
        }
        l.executeNotifiedProxyingQueue = Bm;
        function UR(D, j, oe, De) {
          if (D == j) setTimeout(() => Bm(De));
          else if (x) postMessage({ targetThread: D, cmd: "processProxyingQueue", queue: De });
          else {
            var We = fe.pthreads[D];
            if (!We) return;
            We.postMessage({ cmd: "processProxyingQueue", queue: De });
          }
          return 1;
        }
        function GR(D, j, oe) {
          return -1;
        }
        function HR() {
          Bs("");
        }
        function Dc(D) {
          Dc.shown || (Dc.shown = {}), Dc.shown[D] || (Dc.shown[D] = 1, b && (D = "warning: " + D), L(D));
        }
        function jR() {
          b || y || Dc("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread");
        }
        function qR() {
          return Date.now();
        }
        function T0() {
          return 4294901760;
        }
        function KR() {
          return T0();
        }
        var Wm;
        b ? Wm = () => {
          var D = process.hrtime();
          return D[0] * 1e3 + D[1] / 1e6;
        } : Wm = () => performance.timeOrigin + performance.now();
        function XR(D, j, oe) {
          o().copyWithin(D >>> 0, j >>> 0, j + oe >>> 0);
        }
        function YR() {
          return b ? ia.cpus().length : navigator.hardwareConcurrency;
        }
        function QR(D) {
          var j = Gm(), oe = D();
          return Gh(j), oe;
        }
        function cl(D, j) {
          var oe = arguments.length - 2, De = arguments;
          return QR(() => {
            for (var We = oe, Ue = Hh(We * 8), be = Ue >> 3, Te = 0; Te < oe; Te++) {
              var Rt = De[2 + Te];
              c()[be + Te >>> 0] = Rt;
            }
            return O0(D, We, Ue, j);
          });
        }
        var Vm = [];
        function ZR(D, j, oe) {
          Vm.length = j;
          for (var De = oe >> 3, We = 0; We < j; We++) Vm[We] = c()[De + We >>> 0];
          var Ue = D < 0, be = Ue ? Lh[-D - 1] : i_[D];
          return be.apply(null, Vm);
        }
        function JR(D) {
          try {
            return G.grow(D - ge.byteLength + 65535 >>> 16), rt(G.buffer), 1;
          } catch {
          }
        }
        function e_(D) {
          var j = o().length;
          if (D = D >>> 0, D <= j) return false;
          var oe = T0();
          if (D > oe) return false;
          let De = (Rt, fs) => Rt + (fs - Rt % fs) % fs;
          for (var We = 1; We <= 4; We *= 2) {
            var Ue = j * (1 + 0.2 / We);
            Ue = Math.min(Ue, D + 100663296);
            var be = Math.min(oe, De(Math.max(D, Ue), 65536)), Te = JR(be);
            if (Te) return true;
          }
          return false;
        }
        function t_() {
          throw "unwind";
        }
        function R0(D) {
          return x ? cl(4, 1, D) : 52;
        }
        function _0(D, j, oe, De, We) {
          return x ? cl(5, 1, D, j, oe, De, We) : 70;
        }
        var n_ = [null, [], []];
        function s_(D, j) {
          var oe = n_[D];
          j === 0 || j === 10 ? ((D === 1 ? M : L)(re(oe, 0)), oe.length = 0) : oe.push(j);
        }
        function E0(D, j, oe, De) {
          if (x) return cl(6, 1, D, j, oe, De);
          for (var We = 0, Ue = 0; Ue < oe; Ue++) {
            var be = u()[j >>> 2], Te = u()[j + 4 >>> 2];
            j += 8;
            for (var Rt = 0; Rt < Te; Rt++) s_(D, o()[be + Rt >>> 0]);
            We += Te;
          }
          return u()[De >>> 2] = We, 0;
        }
        function D0(D) {
          var j = l["_" + D];
          return j;
        }
        function r_(D, j) {
          a().set(D, j >>> 0);
        }
        function a_(D, j, oe, De, We) {
          var Ue = { string: (Zn) => {
            var dl = 0;
            if (Zn != null && Zn !== 0) {
              var W0 = (Zn.length << 2) + 1;
              dl = Hh(W0), Se(Zn, dl, W0);
            }
            return dl;
          }, array: (Zn) => {
            var dl = Hh(Zn.length);
            return r_(Zn, dl), dl;
          } };
          function be(Zn) {
            return j === "string" ? se(Zn) : j === "boolean" ? !!Zn : Zn;
          }
          var Te = D0(D), Rt = [], fs = 0;
          if (De) for (var Tr = 0; Tr < De.length; Tr++) {
            var B0 = Ue[oe[Tr]];
            B0 ? (fs === 0 && (fs = Gm()), Rt[Tr] = B0(De[Tr])) : Rt[Tr] = De[Tr];
          }
          var Hm = Te.apply(null, Rt);
          function l_(Zn) {
            return fs !== 0 && Gh(fs), be(Zn);
          }
          return Hm = l_(Hm), Hm;
        }
        function o_(D, j, oe, De) {
          oe = oe || [];
          var We = oe.every((be) => be === "number" || be === "boolean"), Ue = j !== "string";
          return Ue && We && !De ? D0(D) : function() {
            return a_(D, j, oe, arguments);
          };
        }
        fe.init();
        var i_ = [null, Mh, Ke, Wh, R0, _0, E0], A0 = { __emscripten_init_main_thread_js: Bh, __emscripten_thread_cleanup: Ec, __pthread_create_js: In, _emscripten_default_pthread_stack_size: ra, _emscripten_get_now_is_monotonic: VR, _emscripten_notify_task_queue: UR, _emscripten_set_offscreencanvas_size: GR, abort: HR, emscripten_check_blocking_allowed: jR, emscripten_date_now: qR, emscripten_get_heap_max: KR, emscripten_get_now: Wm, emscripten_memcpy_big: XR, emscripten_num_logical_cores: YR, emscripten_receive_on_main_thread_js: ZR, emscripten_resize_heap: e_, emscripten_unwind_to_js_event_loop: t_, exit: ae, fd_close: R0, fd_seek: _0, fd_write: E0, memory: G || l.wasmMemory };
        Ph(), l.___wasm_call_ctors = function() {
          return (l.___wasm_call_ctors = l.asm.__wasm_call_ctors).apply(null, arguments);
        }, l._init = function() {
          return (l._init = l.asm.init).apply(null, arguments);
        }, l._init_with_threads_count = function() {
          return (l._init_with_threads_count = l.asm.init_with_threads_count).apply(null, arguments);
        }, l._get_threads_count = function() {
          return (l._get_threads_count = l.asm.get_threads_count).apply(null, arguments);
        }, l._register_tensor = function() {
          return (l._register_tensor = l.asm.register_tensor).apply(null, arguments);
        }, l._dispose_data = function() {
          return (l._dispose_data = l.asm.dispose_data).apply(null, arguments);
        }, l._dispose = function() {
          return (l._dispose = l.asm.dispose).apply(null, arguments);
        }, l._Abs = function() {
          return (l._Abs = l.asm.Abs).apply(null, arguments);
        }, l._Acos = function() {
          return (l._Acos = l.asm.Acos).apply(null, arguments);
        }, l._Acosh = function() {
          return (l._Acosh = l.asm.Acosh).apply(null, arguments);
        }, l._Add = function() {
          return (l._Add = l.asm.Add).apply(null, arguments);
        }, l._AddN = function() {
          return (l._AddN = l.asm.AddN).apply(null, arguments);
        }, l._All = function() {
          return (l._All = l.asm.All).apply(null, arguments);
        }, l._Any = function() {
          return (l._Any = l.asm.Any).apply(null, arguments);
        }, l._ArgMax = function() {
          return (l._ArgMax = l.asm.ArgMax).apply(null, arguments);
        }, l._ArgMin = function() {
          return (l._ArgMin = l.asm.ArgMin).apply(null, arguments);
        }, l._Asin = function() {
          return (l._Asin = l.asm.Asin).apply(null, arguments);
        }, l._Asinh = function() {
          return (l._Asinh = l.asm.Asinh).apply(null, arguments);
        }, l._Atan = function() {
          return (l._Atan = l.asm.Atan).apply(null, arguments);
        }, l._Atan2 = function() {
          return (l._Atan2 = l.asm.Atan2).apply(null, arguments);
        }, l._Atanh = function() {
          return (l._Atanh = l.asm.Atanh).apply(null, arguments);
        }, l._AvgPool = function() {
          return (l._AvgPool = l.asm.AvgPool).apply(null, arguments);
        }, l._AvgPool3D = function() {
          return (l._AvgPool3D = l.asm.AvgPool3D).apply(null, arguments);
        }, l._AvgPool3DGrad = function() {
          return (l._AvgPool3DGrad = l.asm.AvgPool3DGrad).apply(null, arguments);
        }, l._AvgPoolGrad = function() {
          return (l._AvgPoolGrad = l.asm.AvgPoolGrad).apply(null, arguments);
        }, l._BatchMatMul = function() {
          return (l._BatchMatMul = l.asm.BatchMatMul).apply(null, arguments);
        }, l._Bincount = function() {
          return (l._Bincount = l.asm.Bincount).apply(null, arguments);
        }, l._BitwiseAnd = function() {
          return (l._BitwiseAnd = l.asm.BitwiseAnd).apply(null, arguments);
        }, l._Ceil = function() {
          return (l._Ceil = l.asm.Ceil).apply(null, arguments);
        }, l._ClipByValue = function() {
          return (l._ClipByValue = l.asm.ClipByValue).apply(null, arguments);
        }, l._Conv2D = function() {
          return (l._Conv2D = l.asm.Conv2D).apply(null, arguments);
        }, l._Conv2DBackpropInput = function() {
          return (l._Conv2DBackpropInput = l.asm.Conv2DBackpropInput).apply(null, arguments);
        }, l._Conv3D = function() {
          return (l._Conv3D = l.asm.Conv3D).apply(null, arguments);
        }, l._Conv3DBackpropFilterV2 = function() {
          return (l._Conv3DBackpropFilterV2 = l.asm.Conv3DBackpropFilterV2).apply(null, arguments);
        }, l._Conv3DBackpropInputV2 = function() {
          return (l._Conv3DBackpropInputV2 = l.asm.Conv3DBackpropInputV2).apply(null, arguments);
        }, l._Cos = function() {
          return (l._Cos = l.asm.Cos).apply(null, arguments);
        }, l._Cosh = function() {
          return (l._Cosh = l.asm.Cosh).apply(null, arguments);
        }, l._CropAndResize = function() {
          return (l._CropAndResize = l.asm.CropAndResize).apply(null, arguments);
        }, l._Cumprod = function() {
          return (l._Cumprod = l.asm.Cumprod).apply(null, arguments);
        }, l._Cumsum = function() {
          return (l._Cumsum = l.asm.Cumsum).apply(null, arguments);
        }, l._DenseBincount = function() {
          return (l._DenseBincount = l.asm.DenseBincount).apply(null, arguments);
        }, l._DepthToSpace = function() {
          return (l._DepthToSpace = l.asm.DepthToSpace).apply(null, arguments);
        }, l._DepthwiseConv2dNative = function() {
          return (l._DepthwiseConv2dNative = l.asm.DepthwiseConv2dNative).apply(null, arguments);
        }, l._Diag = function() {
          return (l._Diag = l.asm.Diag).apply(null, arguments);
        }, l._Dilation2D = function() {
          return (l._Dilation2D = l.asm.Dilation2D).apply(null, arguments);
        }, l._Dilation2DBackpropFilter = function() {
          return (l._Dilation2DBackpropFilter = l.asm.Dilation2DBackpropFilter).apply(null, arguments);
        }, l._Dilation2DBackpropInput = function() {
          return (l._Dilation2DBackpropInput = l.asm.Dilation2DBackpropInput).apply(null, arguments);
        }, l._Elu = function() {
          return (l._Elu = l.asm.Elu).apply(null, arguments);
        }, l._EluGrad = function() {
          return (l._EluGrad = l.asm.EluGrad).apply(null, arguments);
        }, l._Equal = function() {
          return (l._Equal = l.asm.Equal).apply(null, arguments);
        }, l._Erf = function() {
          return (l._Erf = l.asm.Erf).apply(null, arguments);
        }, l._Exp = function() {
          return (l._Exp = l.asm.Exp).apply(null, arguments);
        }, l._Expm1 = function() {
          return (l._Expm1 = l.asm.Expm1).apply(null, arguments);
        }, l._FlipLeftRight = function() {
          return (l._FlipLeftRight = l.asm.FlipLeftRight).apply(null, arguments);
        }, l._Floor = function() {
          return (l._Floor = l.asm.Floor).apply(null, arguments);
        }, l._FloorDiv = function() {
          return (l._FloorDiv = l.asm.FloorDiv).apply(null, arguments);
        }, l._FusedBatchNorm = function() {
          return (l._FusedBatchNorm = l.asm.FusedBatchNorm).apply(null, arguments);
        }, l._FusedConv2D = function() {
          return (l._FusedConv2D = l.asm.FusedConv2D).apply(null, arguments);
        }, l._FusedDepthwiseConv2D = function() {
          return (l._FusedDepthwiseConv2D = l.asm.FusedDepthwiseConv2D).apply(null, arguments);
        }, l._Gather = function() {
          return (l._Gather = l.asm.Gather).apply(null, arguments);
        }, l._GatherNd = function() {
          return (l._GatherNd = l.asm.GatherNd).apply(null, arguments);
        }, l._Greater = function() {
          return (l._Greater = l.asm.Greater).apply(null, arguments);
        }, l._GreaterEqual = function() {
          return (l._GreaterEqual = l.asm.GreaterEqual).apply(null, arguments);
        }, l._IsFinite = function() {
          return (l._IsFinite = l.asm.IsFinite).apply(null, arguments);
        }, l._IsInf = function() {
          return (l._IsInf = l.asm.IsInf).apply(null, arguments);
        }, l._IsNan = function() {
          return (l._IsNan = l.asm.IsNan).apply(null, arguments);
        }, l._LRN = function() {
          return (l._LRN = l.asm.LRN).apply(null, arguments);
        }, l._LRNGrad = function() {
          return (l._LRNGrad = l.asm.LRNGrad).apply(null, arguments);
        }, l._LeakyRelu = function() {
          return (l._LeakyRelu = l.asm.LeakyRelu).apply(null, arguments);
        }, l._Less = function() {
          return (l._Less = l.asm.Less).apply(null, arguments);
        }, l._LessEqual = function() {
          return (l._LessEqual = l.asm.LessEqual).apply(null, arguments);
        }, l._LinSpace = function() {
          return (l._LinSpace = l.asm.LinSpace).apply(null, arguments);
        }, l._Log = function() {
          return (l._Log = l.asm.Log).apply(null, arguments);
        }, l._Log1p = function() {
          return (l._Log1p = l.asm.Log1p).apply(null, arguments);
        }, l._LogicalAnd = function() {
          return (l._LogicalAnd = l.asm.LogicalAnd).apply(null, arguments);
        }, l._LogicalNot = function() {
          return (l._LogicalNot = l.asm.LogicalNot).apply(null, arguments);
        }, l._LogicalOr = function() {
          return (l._LogicalOr = l.asm.LogicalOr).apply(null, arguments);
        }, l._LogicalXor = function() {
          return (l._LogicalXor = l.asm.LogicalXor).apply(null, arguments);
        }, l._Max = function() {
          return (l._Max = l.asm.Max).apply(null, arguments);
        }, l._MaxPool = function() {
          return (l._MaxPool = l.asm.MaxPool).apply(null, arguments);
        }, l._MaxPool3D = function() {
          return (l._MaxPool3D = l.asm.MaxPool3D).apply(null, arguments);
        }, l._MaxPool3DGrad = function() {
          return (l._MaxPool3DGrad = l.asm.MaxPool3DGrad).apply(null, arguments);
        }, l._MaxPoolGrad = function() {
          return (l._MaxPoolGrad = l.asm.MaxPoolGrad).apply(null, arguments);
        }, l._MaxPoolWithArgmax = function() {
          return (l._MaxPoolWithArgmax = l.asm.MaxPoolWithArgmax).apply(null, arguments);
        }, l._Maximum = function() {
          return (l._Maximum = l.asm.Maximum).apply(null, arguments);
        }, l._Mean = function() {
          return (l._Mean = l.asm.Mean).apply(null, arguments);
        }, l._Min = function() {
          return (l._Min = l.asm.Min).apply(null, arguments);
        }, l._Minimum = function() {
          return (l._Minimum = l.asm.Minimum).apply(null, arguments);
        }, l._MirrorPad = function() {
          return (l._MirrorPad = l.asm.MirrorPad).apply(null, arguments);
        }, l._Mod = function() {
          return (l._Mod = l.asm.Mod).apply(null, arguments);
        }, l._Multinomial = function() {
          return (l._Multinomial = l.asm.Multinomial).apply(null, arguments);
        }, l._Multiply = function() {
          return (l._Multiply = l.asm.Multiply).apply(null, arguments);
        }, l._Neg = function() {
          return (l._Neg = l.asm.Neg).apply(null, arguments);
        }, l._NonMaxSuppressionV3 = function() {
          return (l._NonMaxSuppressionV3 = l.asm.NonMaxSuppressionV3).apply(null, arguments);
        }, l._NonMaxSuppressionV4 = function() {
          return (l._NonMaxSuppressionV4 = l.asm.NonMaxSuppressionV4).apply(null, arguments);
        }, l._NonMaxSuppressionV5 = function() {
          return (l._NonMaxSuppressionV5 = l.asm.NonMaxSuppressionV5).apply(null, arguments);
        }, l._NotEqual = function() {
          return (l._NotEqual = l.asm.NotEqual).apply(null, arguments);
        }, l._OneHot = function() {
          return (l._OneHot = l.asm.OneHot).apply(null, arguments);
        }, l._PadV2 = function() {
          return (l._PadV2 = l.asm.PadV2).apply(null, arguments);
        }, l._Pow = function() {
          return (l._Pow = l.asm.Pow).apply(null, arguments);
        }, l._Prelu = function() {
          return (l._Prelu = l.asm.Prelu).apply(null, arguments);
        }, l._Prod = function() {
          return (l._Prod = l.asm.Prod).apply(null, arguments);
        }, l._RealDiv = function() {
          return (l._RealDiv = l.asm.RealDiv).apply(null, arguments);
        }, l._Reciprocal = function() {
          return (l._Reciprocal = l.asm.Reciprocal).apply(null, arguments);
        }, l._Relu = function() {
          return (l._Relu = l.asm.Relu).apply(null, arguments);
        }, l._Relu6 = function() {
          return (l._Relu6 = l.asm.Relu6).apply(null, arguments);
        }, l._ResizeBilinear = function() {
          return (l._ResizeBilinear = l.asm.ResizeBilinear).apply(null, arguments);
        }, l._ResizeBilinearGrad = function() {
          return (l._ResizeBilinearGrad = l.asm.ResizeBilinearGrad).apply(null, arguments);
        }, l._ResizeNearestNeighbor = function() {
          return (l._ResizeNearestNeighbor = l.asm.ResizeNearestNeighbor).apply(null, arguments);
        }, l._ResizeNearestNeighborGrad = function() {
          return (l._ResizeNearestNeighborGrad = l.asm.ResizeNearestNeighborGrad).apply(null, arguments);
        }, l._Reverse = function() {
          return (l._Reverse = l.asm.Reverse).apply(null, arguments);
        }, l._RotateWithOffset = function() {
          return (l._RotateWithOffset = l.asm.RotateWithOffset).apply(null, arguments);
        }, l._Round = function() {
          return (l._Round = l.asm.Round).apply(null, arguments);
        }, l._Rsqrt = function() {
          return (l._Rsqrt = l.asm.Rsqrt).apply(null, arguments);
        }, l._ScatterNd = function() {
          return (l._ScatterNd = l.asm.ScatterNd).apply(null, arguments);
        }, l._SearchSorted = function() {
          return (l._SearchSorted = l.asm.SearchSorted).apply(null, arguments);
        }, l._SelectV2 = function() {
          return (l._SelectV2 = l.asm.SelectV2).apply(null, arguments);
        }, l._Selu = function() {
          return (l._Selu = l.asm.Selu).apply(null, arguments);
        }, l._Sigmoid = function() {
          return (l._Sigmoid = l.asm.Sigmoid).apply(null, arguments);
        }, l._Sign = function() {
          return (l._Sign = l.asm.Sign).apply(null, arguments);
        }, l._Sin = function() {
          return (l._Sin = l.asm.Sin).apply(null, arguments);
        }, l._Sinh = function() {
          return (l._Sinh = l.asm.Sinh).apply(null, arguments);
        }, l._Softmax = function() {
          return (l._Softmax = l.asm.Softmax).apply(null, arguments);
        }, l._Softplus = function() {
          return (l._Softplus = l.asm.Softplus).apply(null, arguments);
        }, l._SparseFillEmptyRows = function() {
          return (l._SparseFillEmptyRows = l.asm.SparseFillEmptyRows).apply(null, arguments);
        }, l._SparseReshape = function() {
          return (l._SparseReshape = l.asm.SparseReshape).apply(null, arguments);
        }, l._SparseSegmentReduction = function() {
          return (l._SparseSegmentReduction = l.asm.SparseSegmentReduction).apply(null, arguments);
        }, l._SparseToDense = function() {
          return (l._SparseToDense = l.asm.SparseToDense).apply(null, arguments);
        }, l._Sqrt = function() {
          return (l._Sqrt = l.asm.Sqrt).apply(null, arguments);
        }, l._Square = function() {
          return (l._Square = l.asm.Square).apply(null, arguments);
        }, l._SquaredDifference = function() {
          return (l._SquaredDifference = l.asm.SquaredDifference).apply(null, arguments);
        }, l._Step = function() {
          return (l._Step = l.asm.Step).apply(null, arguments);
        }, l._StridedSlice = function() {
          return (l._StridedSlice = l.asm.StridedSlice).apply(null, arguments);
        }, l._Sub = function() {
          return (l._Sub = l.asm.Sub).apply(null, arguments);
        }, l._Sum = function() {
          return (l._Sum = l.asm.Sum).apply(null, arguments);
        }, l._Tan = function() {
          return (l._Tan = l.asm.Tan).apply(null, arguments);
        }, l._Tanh = function() {
          return (l._Tanh = l.asm.Tanh).apply(null, arguments);
        }, l._TensorScatterUpdate = function() {
          return (l._TensorScatterUpdate = l.asm.TensorScatterUpdate).apply(null, arguments);
        }, l._Tile = function() {
          return (l._Tile = l.asm.Tile).apply(null, arguments);
        }, l._TopK = function() {
          return (l._TopK = l.asm.TopK).apply(null, arguments);
        }, l._Transform = function() {
          return (l._Transform = l.asm.Transform).apply(null, arguments);
        }, l._Transpose = function() {
          return (l._Transpose = l.asm.Transpose).apply(null, arguments);
        }, l.__FusedMatMul = function() {
          return (l.__FusedMatMul = l.asm._FusedMatMul).apply(null, arguments);
        }, l._malloc = function() {
          return (l._malloc = l.asm.malloc).apply(null, arguments);
        }, l._free = function() {
          return (l._free = l.asm.free).apply(null, arguments);
        }, l.__emscripten_tls_init = function() {
          return (l.__emscripten_tls_init = l.asm._emscripten_tls_init).apply(null, arguments);
        };
        var Uh = l._pthread_self = function() {
          return (Uh = l._pthread_self = l.asm.pthread_self).apply(null, arguments);
        };
        l.___errno_location = function() {
          return (l.___errno_location = l.asm.__errno_location).apply(null, arguments);
        };
        var F0 = l.__emscripten_thread_init = function() {
          return (F0 = l.__emscripten_thread_init = l.asm._emscripten_thread_init).apply(null, arguments);
        };
        l.__emscripten_thread_crashed = function() {
          return (l.__emscripten_thread_crashed = l.asm._emscripten_thread_crashed).apply(null, arguments);
        }, l._emscripten_main_thread_process_queued_calls = function() {
          return (l._emscripten_main_thread_process_queued_calls = l.asm.emscripten_main_thread_process_queued_calls).apply(null, arguments);
        }, l._emscripten_main_browser_thread_id = function() {
          return (l._emscripten_main_browser_thread_id = l.asm.emscripten_main_browser_thread_id).apply(null, arguments);
        };
        var O0 = l._emscripten_run_in_main_runtime_thread_js = function() {
          return (O0 = l._emscripten_run_in_main_runtime_thread_js = l.asm.emscripten_run_in_main_runtime_thread_js).apply(null, arguments);
        };
        l._emscripten_dispatch_to_thread_ = function() {
          return (l._emscripten_dispatch_to_thread_ = l.asm.emscripten_dispatch_to_thread_).apply(null, arguments);
        };
        var P0 = l.__emscripten_proxy_execute_task_queue = function() {
          return (P0 = l.__emscripten_proxy_execute_task_queue = l.asm._emscripten_proxy_execute_task_queue).apply(null, arguments);
        }, Um = l.__emscripten_thread_free_data = function() {
          return (Um = l.__emscripten_thread_free_data = l.asm._emscripten_thread_free_data).apply(null, arguments);
        }, L0 = l.__emscripten_thread_exit = function() {
          return (L0 = l.__emscripten_thread_exit = l.asm._emscripten_thread_exit).apply(null, arguments);
        }, z0 = l._emscripten_stack_set_limits = function() {
          return (z0 = l._emscripten_stack_set_limits = l.asm.emscripten_stack_set_limits).apply(null, arguments);
        }, Gm = l.stackSave = function() {
          return (Gm = l.stackSave = l.asm.stackSave).apply(null, arguments);
        }, Gh = l.stackRestore = function() {
          return (Gh = l.stackRestore = l.asm.stackRestore).apply(null, arguments);
        }, Hh = l.stackAlloc = function() {
          return (Hh = l.stackAlloc = l.asm.stackAlloc).apply(null, arguments);
        };
        l.dynCall_iijjiiii = function() {
          return (l.dynCall_iijjiiii = l.asm.dynCall_iijjiiii).apply(null, arguments);
        }, l.dynCall_jiji = function() {
          return (l.dynCall_jiji = l.asm.dynCall_jiji).apply(null, arguments);
        }, l.keepRuntimeAlive = $t, l.wasmMemory = G, l.cwrap = o_, l.ExitStatus = kr, l.PThread = fe;
        var jh;
        kn = function D() {
          jh || M0(), jh || (kn = D);
        };
        function M0(D) {
          if (pn > 0) return;
          if (x) {
            d(l), hn(), startWorker(l);
            return;
          }
          if (Qn(), pn > 0) return;
          function j() {
            jh || (jh = true, l.calledRun = true, !X && (hn(), d(l), l.onRuntimeInitialized && l.onRuntimeInitialized(), Ns()));
          }
          l.setStatus ? (l.setStatus("Running..."), setTimeout(function() {
            setTimeout(function() {
              l.setStatus("");
            }, 1), j();
          }, 1)) : j();
        }
        if (l.preInit) for (typeof l.preInit == "function" && (l.preInit = [l.preInit]); l.preInit.length > 0; ) l.preInit.pop()();
        M0();
        var qh;
        p && (qh = { uncaughtException: process.listeners("uncaughtException").filter(function(D) {
          return !p.uncaughtException.indexOf(D) > -1;
        }), unhandledRejection: process.listeners("unhandledRejection").filter(function(D) {
          return !p.unhandledRejection.indexOf(D) > -1;
        }) });
        var Kh;
        if (typeof WasmBackendModule < "u") Kh = WasmBackendModule;
        else if (typeof r < "u") Kh = r;
        else throw new Error("Could not find wasm module in post.js");
        if (qh) {
          var u_ = Kh._dispose;
          Kh._dispose = function() {
            u_(), qh.uncaughtException.forEach(function(D) {
              process.removeListener("uncaughtException", D);
            }), qh.unhandledRejection.forEach(function(D) {
              process.removeListener("unhandledRejection", D);
            });
          };
        }
        return r.ready;
      };
    })();
    n.exports = t;
  }(cg)), cg.exports;
}
var PR = $xe();
const LR = vy(PR), kxe = yy({ __proto__: null, default: LR }, [PR]);
var dg = {}, qC;
function Nxe() {
  return qC || (qC = 1, dg.wasmWorkerContents = `"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f)},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}var initializedJS=false;var pendingNotifiedProxyingQueues=[];function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"
");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var instance=new WebAssembly.Instance(Module["wasmModule"],info);receiveInstance(instance);Module["wasmModule"]=null;return instance.exports};self.onunhandledrejection=e=>{throw e.reason??e};self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"})};self.onmessage=e=>{try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=function(){postMessage({cmd:"callHandler",handler:handler,args:[...arguments]})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,0,0,1);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){pendingNotifiedProxyingQueues.forEach(queue=>{Module["executeNotifiedProxyingQueue"](queue)});pendingNotifiedProxyingQueues=[];initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["keepRuntimeAlive"]()){}else{Module["__emscripten_thread_exit"](ex.status)}}else{throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processProxyingQueue"){if(initializedJS){Module["executeNotifiedProxyingQueue"](e.data.queue)}else{pendingNotifiedProxyingQueues.push(e.data.queue)}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}};`), dg;
}
var Txe = Nxe(), hg = { exports: {} }, KC;
function Rxe() {
  return KC || (KC = 1, function(n, e) {
    var t = (() => {
      var s = typeof document < "u" && document.currentScript ? document.currentScript.src : void 0;
      return typeof __filename < "u" && (s = s || __filename), function(r) {
        r = r || {};
        var a = typeof r < "u" ? r : {}, o, i;
        a.ready = new Promise(function(Q, ae) {
          o = Q, i = ae;
        });
        var u;
        typeof process < "u" && process.listeners && (u = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") });
        var c = Object.assign({}, a), l = typeof window == "object", d = typeof importScripts == "function", h = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", p = "";
        function f(Q) {
          return a.locateFile ? a.locateFile(Q, p) : p + Q;
        }
        var m, g, y;
        if (h) {
          var b = ia, x = ia;
          d ? p = x.dirname(p) + "/" : p = __dirname + "/", m = (Q, ae) => (Q = et(Q) ? new URL(Q) : x.normalize(Q), b.readFileSync(Q, ae ? void 0 : "utf8")), y = (Q) => {
            var ae = m(Q, true);
            return ae.buffer || (ae = new Uint8Array(ae)), ae;
          }, g = (Q, ae, _e) => {
            Q = et(Q) ? new URL(Q) : x.normalize(Q), b.readFile(Q, function(fe, Ct) {
              fe ? _e(fe) : ae(Ct.buffer);
            });
          }, process.argv.length > 1 && process.argv[1].replace(/\\/g, "/"), process.argv.slice(2), process.on("uncaughtException", function(Q) {
            if (!(Q instanceof $t)) throw Q;
          }), process.on("unhandledRejection", function(Q) {
            throw Q;
          }), a.inspect = function() {
            return "[Emscripten Module object]";
          };
        } else (l || d) && (d ? p = self.location.href : typeof document < "u" && document.currentScript && (p = document.currentScript.src), s && (p = s), p.indexOf("blob:") !== 0 ? p = p.substr(0, p.replace(/[?#].*/, "").lastIndexOf("/") + 1) : p = "", m = (Q) => {
          var ae = new XMLHttpRequest();
          return ae.open("GET", Q, false), ae.send(null), ae.responseText;
        }, d && (y = (Q) => {
          var ae = new XMLHttpRequest();
          return ae.open("GET", Q, false), ae.responseType = "arraybuffer", ae.send(null), new Uint8Array(ae.response);
        }), g = (Q, ae, _e) => {
          var fe = new XMLHttpRequest();
          fe.open("GET", Q, true), fe.responseType = "arraybuffer", fe.onload = () => {
            if (fe.status == 200 || fe.status == 0 && fe.response) {
              ae(fe.response);
              return;
            }
            _e();
          }, fe.onerror = _e, fe.send(null);
        });
        var w = a.print || console.log.bind(console), C = a.printErr || console.warn.bind(console);
        Object.assign(a, c), c = null, a.arguments && a.arguments, a.thisProgram && a.thisProgram, a.quit && a.quit;
        var v;
        a.wasmBinary && (v = a.wasmBinary), a.noExitRuntime, typeof WebAssembly != "object" && Xe("no native wasm support detected");
        var k, R = false, N = typeof TextDecoder < "u" ? new TextDecoder("utf8") : void 0;
        function T(Q, ae, _e) {
          ae >>>= 0;
          for (var fe = ae + _e, Ct = ae; Q[Ct] && !(Ct >= fe); ) ++Ct;
          if (Ct - ae > 16 && Q.buffer && N) return N.decode(Q.subarray(ae, Ct));
          for (var kt = ""; ae < Ct; ) {
            var Ke = Q[ae++];
            if (!(Ke & 128)) {
              kt += String.fromCharCode(Ke);
              continue;
            }
            var Ve = Q[ae++] & 63;
            if ((Ke & 224) == 192) {
              kt += String.fromCharCode((Ke & 31) << 6 | Ve);
              continue;
            }
            var Wt = Q[ae++] & 63;
            if ((Ke & 240) == 224 ? Ke = (Ke & 15) << 12 | Ve << 6 | Wt : Ke = (Ke & 7) << 18 | Ve << 12 | Wt << 6 | Q[ae++] & 63, Ke < 65536) kt += String.fromCharCode(Ke);
            else {
              var ps = Ke - 65536;
              kt += String.fromCharCode(55296 | ps >> 10, 56320 | ps & 1023);
            }
          }
          return kt;
        }
        function S(Q, ae) {
          return Q >>>= 0, Q ? T(V, Q, ae) : "";
        }
        function E(Q, ae, _e, fe) {
          if (_e >>>= 0, !(fe > 0)) return 0;
          for (var Ct = _e, kt = _e + fe - 1, Ke = 0; Ke < Q.length; ++Ke) {
            var Ve = Q.charCodeAt(Ke);
            if (Ve >= 55296 && Ve <= 57343) {
              var Wt = Q.charCodeAt(++Ke);
              Ve = 65536 + ((Ve & 1023) << 10) | Wt & 1023;
            }
            if (Ve <= 127) {
              if (_e >= kt) break;
              ae[_e++ >>> 0] = Ve;
            } else if (Ve <= 2047) {
              if (_e + 1 >= kt) break;
              ae[_e++ >>> 0] = 192 | Ve >> 6, ae[_e++ >>> 0] = 128 | Ve & 63;
            } else if (Ve <= 65535) {
              if (_e + 2 >= kt) break;
              ae[_e++ >>> 0] = 224 | Ve >> 12, ae[_e++ >>> 0] = 128 | Ve >> 6 & 63, ae[_e++ >>> 0] = 128 | Ve & 63;
            } else {
              if (_e + 3 >= kt) break;
              ae[_e++ >>> 0] = 240 | Ve >> 18, ae[_e++ >>> 0] = 128 | Ve >> 12 & 63, ae[_e++ >>> 0] = 128 | Ve >> 6 & 63, ae[_e++ >>> 0] = 128 | Ve & 63;
            }
          }
          return ae[_e >>> 0] = 0, _e - Ct;
        }
        function P(Q, ae, _e) {
          return E(Q, V, ae, _e);
        }
        var M, L, V, q;
        function G(Q) {
          M = Q, a.HEAP8 = L = new Int8Array(Q), a.HEAP16 = new Int16Array(Q), a.HEAP32 = new Int32Array(Q), a.HEAPU8 = V = new Uint8Array(Q), a.HEAPU16 = new Uint16Array(Q), a.HEAPU32 = q = new Uint32Array(Q), a.HEAPF32 = new Float32Array(Q), a.HEAPF64 = new Float64Array(Q);
        }
        a.INITIAL_MEMORY;
        var K = [], X = [], Z = [];
        function ee() {
          if (a.preRun) for (typeof a.preRun == "function" && (a.preRun = [a.preRun]); a.preRun.length; ) se(a.preRun.shift());
          Qn(K);
        }
        function J() {
          Qn(X);
        }
        function re() {
          if (a.postRun) for (typeof a.postRun == "function" && (a.postRun = [a.postRun]); a.postRun.length; ) Se(a.postRun.shift());
          Qn(Z);
        }
        function se(Q) {
          K.unshift(Q);
        }
        function pe(Q) {
          X.unshift(Q);
        }
        function Se(Q) {
          Z.unshift(Q);
        }
        var ge = 0, ke = null;
        function Pe(Q) {
          ge++, a.monitorRunDependencies && a.monitorRunDependencies(ge);
        }
        function ze(Q) {
          if (ge--, a.monitorRunDependencies && a.monitorRunDependencies(ge), ge == 0 && ke) {
            var ae = ke;
            ke = null, ae();
          }
        }
        function Xe(Q) {
          a.onAbort && a.onAbort(Q), Q = "Aborted(" + Q + ")", C(Q), R = true, Q += ". Build with -sASSERTIONS for more info.";
          var ae = new WebAssembly.RuntimeError(Q);
          throw i(ae), ae;
        }
        var ut = "data:application/octet-stream;base64,";
        function rt(Q) {
          return Q.startsWith(ut);
        }
        function et(Q) {
          return Q.startsWith("file://");
        }
        var Le;
        Le = "tfjs-backend-wasm.wasm", rt(Le) || (Le = f(Le));
        function dt(Q) {
          try {
            if (Q == Le && v) return new Uint8Array(v);
            if (y) return y(Q);
            throw "both async and sync fetching of the wasm failed";
          } catch (ae) {
            Xe(ae);
          }
        }
        function ht() {
          if (!v && (l || d)) {
            if (typeof fetch == "function" && !et(Le)) return fetch(Le, { credentials: "same-origin" }).then(function(Q) {
              if (!Q.ok) throw "failed to load wasm binary file at '" + Le + "'";
              return Q.arrayBuffer();
            }).catch(function() {
              return dt(Le);
            });
            if (g) return new Promise(function(Q, ae) {
              g(Le, function(_e) {
                Q(new Uint8Array(_e));
              }, ae);
            });
          }
          return Promise.resolve().then(function() {
            return dt(Le);
          });
        }
        function Yn() {
          var Q = { env: Oh, wasi_snapshot_preview1: Oh };
          function ae(Ke, Ve) {
            var Wt = Ke.exports;
            a.asm = Wt, k = a.asm.memory, G(k.buffer), a.asm.__indirect_function_table, pe(a.asm.__wasm_call_ctors), ze();
          }
          Pe();
          function _e(Ke) {
            ae(Ke.instance);
          }
          function fe(Ke) {
            return ht().then(function(Ve) {
              return WebAssembly.instantiate(Ve, Q);
            }).then(function(Ve) {
              return Ve;
            }).then(Ke, function(Ve) {
              C("failed to asynchronously prepare wasm: " + Ve), Xe(Ve);
            });
          }
          function Ct() {
            return !v && typeof WebAssembly.instantiateStreaming == "function" && !rt(Le) && !et(Le) && !h && typeof fetch == "function" ? fetch(Le, { credentials: "same-origin" }).then(function(Ke) {
              var Ve = WebAssembly.instantiateStreaming(Ke, Q);
              return Ve.then(_e, function(Wt) {
                return C("wasm streaming compile failed: " + Wt), C("falling back to ArrayBuffer instantiation"), fe(_e);
              });
            }) : fe(_e);
          }
          if (a.instantiateWasm) try {
            var kt = a.instantiateWasm(Q, ae);
            return kt;
          } catch (Ke) {
            C("Module.instantiateWasm callback failed with error: " + Ke), i(Ke);
          }
          return Ct().catch(i), {};
        }
        function $t(Q) {
          this.name = "ExitStatus", this.message = "Program terminated with exit(" + Q + ")", this.status = Q;
        }
        function Qn(Q) {
          for (; Q.length > 0; ) Q.shift()(a);
        }
        function hn() {
          Xe("");
        }
        function Ns() {
          return 4294901760;
        }
        function Ln() {
          return Ns();
        }
        function hs(Q, ae, _e) {
          V.copyWithin(Q >>> 0, ae >>> 0, ae + _e >>> 0);
        }
        function Ts(Q) {
          try {
            return k.grow(Q - M.byteLength + 65535 >>> 16), G(k.buffer), 1;
          } catch {
          }
        }
        function pn(Q) {
          var ae = V.length;
          Q = Q >>> 0;
          var _e = Ns();
          if (Q > _e) return false;
          let fe = (Wt, ps) => Wt + (ps - Wt % ps) % ps;
          for (var Ct = 1; Ct <= 4; Ct *= 2) {
            var kt = ae * (1 + 0.2 / Ct);
            kt = Math.min(kt, Q + 100663296);
            var Ke = Math.min(_e, fe(Math.max(Q, kt), 65536)), Ve = Ts(Ke);
            if (Ve) return true;
          }
          return false;
        }
        function kn(Q) {
          return 52;
        }
        function $r(Q, ae, _e, fe, Ct) {
          return 70;
        }
        var oi = [null, [], []];
        function Bs(Q, ae) {
          var _e = oi[Q];
          ae === 0 || ae === 10 ? ((Q === 1 ? w : C)(T(_e, 0)), _e.length = 0) : _e.push(ae);
        }
        function _c(Q, ae, _e, fe) {
          for (var Ct = 0, kt = 0; kt < _e; kt++) {
            var Ke = q[ae >>> 2], Ve = q[ae + 4 >>> 2];
            ae += 8;
            for (var Wt = 0; Wt < Ve; Wt++) Bs(Q, V[Ke + Wt >>> 0]);
            Ct += Ve;
          }
          return q[fe >>> 2] = Ct, 0;
        }
        function ur(Q) {
          var ae = a["_" + Q];
          return ae;
        }
        function sa(Q, ae) {
          L.set(Q, ae >>> 0);
        }
        function fn(Q, ae, _e, fe, Ct) {
          var kt = { string: (In) => {
            var ra = 0;
            if (In != null && In !== 0) {
              var Vh = (In.length << 2) + 1;
              ra = kr(Vh), P(In, ra, Vh);
            }
            return ra;
          }, array: (In) => {
            var ra = kr(In.length);
            return sa(In, ra), ra;
          } };
          function Ke(In) {
            return ae === "string" ? S(In) : ae === "boolean" ? !!In : In;
          }
          var Ve = ur(Q), Wt = [], ps = 0;
          if (fe) for (var Nr = 0; Nr < fe.length; Nr++) {
            var Bh = kt[_e[Nr]];
            Bh ? (ps === 0 && (ps = Ph()), Wt[Nr] = Bh(fe[Nr])) : Wt[Nr] = fe[Nr];
          }
          var Ec = Ve.apply(null, Wt);
          function Wh(In) {
            return ps !== 0 && Lh(ps), Ke(In);
          }
          return Ec = Wh(Ec), Ec;
        }
        function Fh(Q, ae, _e, fe) {
          _e = _e || [];
          var Ct = _e.every((Ke) => Ke === "number" || Ke === "boolean"), kt = ae !== "string";
          return kt && Ct && !fe ? ur(Q) : function() {
            return fn(Q, ae, _e, arguments);
          };
        }
        var Oh = { abort: hn, emscripten_get_heap_max: Ln, emscripten_memcpy_big: hs, emscripten_resize_heap: pn, fd_close: kn, fd_seek: $r, fd_write: _c };
        Yn(), a.___wasm_call_ctors = function() {
          return (a.___wasm_call_ctors = a.asm.__wasm_call_ctors).apply(null, arguments);
        }, a._init = function() {
          return (a._init = a.asm.init).apply(null, arguments);
        }, a._init_with_threads_count = function() {
          return (a._init_with_threads_count = a.asm.init_with_threads_count).apply(null, arguments);
        }, a._get_threads_count = function() {
          return (a._get_threads_count = a.asm.get_threads_count).apply(null, arguments);
        }, a._register_tensor = function() {
          return (a._register_tensor = a.asm.register_tensor).apply(null, arguments);
        }, a._dispose_data = function() {
          return (a._dispose_data = a.asm.dispose_data).apply(null, arguments);
        }, a._dispose = function() {
          return (a._dispose = a.asm.dispose).apply(null, arguments);
        }, a._Abs = function() {
          return (a._Abs = a.asm.Abs).apply(null, arguments);
        }, a._Acos = function() {
          return (a._Acos = a.asm.Acos).apply(null, arguments);
        }, a._Acosh = function() {
          return (a._Acosh = a.asm.Acosh).apply(null, arguments);
        }, a._Add = function() {
          return (a._Add = a.asm.Add).apply(null, arguments);
        }, a._AddN = function() {
          return (a._AddN = a.asm.AddN).apply(null, arguments);
        }, a._All = function() {
          return (a._All = a.asm.All).apply(null, arguments);
        }, a._Any = function() {
          return (a._Any = a.asm.Any).apply(null, arguments);
        }, a._ArgMax = function() {
          return (a._ArgMax = a.asm.ArgMax).apply(null, arguments);
        }, a._ArgMin = function() {
          return (a._ArgMin = a.asm.ArgMin).apply(null, arguments);
        }, a._Asin = function() {
          return (a._Asin = a.asm.Asin).apply(null, arguments);
        }, a._Asinh = function() {
          return (a._Asinh = a.asm.Asinh).apply(null, arguments);
        }, a._Atan = function() {
          return (a._Atan = a.asm.Atan).apply(null, arguments);
        }, a._Atan2 = function() {
          return (a._Atan2 = a.asm.Atan2).apply(null, arguments);
        }, a._Atanh = function() {
          return (a._Atanh = a.asm.Atanh).apply(null, arguments);
        }, a._AvgPool = function() {
          return (a._AvgPool = a.asm.AvgPool).apply(null, arguments);
        }, a._AvgPool3D = function() {
          return (a._AvgPool3D = a.asm.AvgPool3D).apply(null, arguments);
        }, a._AvgPool3DGrad = function() {
          return (a._AvgPool3DGrad = a.asm.AvgPool3DGrad).apply(null, arguments);
        }, a._AvgPoolGrad = function() {
          return (a._AvgPoolGrad = a.asm.AvgPoolGrad).apply(null, arguments);
        }, a._BatchMatMul = function() {
          return (a._BatchMatMul = a.asm.BatchMatMul).apply(null, arguments);
        }, a._Bincount = function() {
          return (a._Bincount = a.asm.Bincount).apply(null, arguments);
        }, a._BitwiseAnd = function() {
          return (a._BitwiseAnd = a.asm.BitwiseAnd).apply(null, arguments);
        }, a._Ceil = function() {
          return (a._Ceil = a.asm.Ceil).apply(null, arguments);
        }, a._ClipByValue = function() {
          return (a._ClipByValue = a.asm.ClipByValue).apply(null, arguments);
        }, a._Conv2D = function() {
          return (a._Conv2D = a.asm.Conv2D).apply(null, arguments);
        }, a._Conv2DBackpropInput = function() {
          return (a._Conv2DBackpropInput = a.asm.Conv2DBackpropInput).apply(null, arguments);
        }, a._Conv3D = function() {
          return (a._Conv3D = a.asm.Conv3D).apply(null, arguments);
        }, a._Conv3DBackpropFilterV2 = function() {
          return (a._Conv3DBackpropFilterV2 = a.asm.Conv3DBackpropFilterV2).apply(null, arguments);
        }, a._Conv3DBackpropInputV2 = function() {
          return (a._Conv3DBackpropInputV2 = a.asm.Conv3DBackpropInputV2).apply(null, arguments);
        }, a._Cos = function() {
          return (a._Cos = a.asm.Cos).apply(null, arguments);
        }, a._Cosh = function() {
          return (a._Cosh = a.asm.Cosh).apply(null, arguments);
        }, a._CropAndResize = function() {
          return (a._CropAndResize = a.asm.CropAndResize).apply(null, arguments);
        }, a._Cumprod = function() {
          return (a._Cumprod = a.asm.Cumprod).apply(null, arguments);
        }, a._Cumsum = function() {
          return (a._Cumsum = a.asm.Cumsum).apply(null, arguments);
        }, a._DenseBincount = function() {
          return (a._DenseBincount = a.asm.DenseBincount).apply(null, arguments);
        }, a._DepthToSpace = function() {
          return (a._DepthToSpace = a.asm.DepthToSpace).apply(null, arguments);
        }, a._DepthwiseConv2dNative = function() {
          return (a._DepthwiseConv2dNative = a.asm.DepthwiseConv2dNative).apply(null, arguments);
        }, a._Diag = function() {
          return (a._Diag = a.asm.Diag).apply(null, arguments);
        }, a._Dilation2D = function() {
          return (a._Dilation2D = a.asm.Dilation2D).apply(null, arguments);
        }, a._Dilation2DBackpropFilter = function() {
          return (a._Dilation2DBackpropFilter = a.asm.Dilation2DBackpropFilter).apply(null, arguments);
        }, a._Dilation2DBackpropInput = function() {
          return (a._Dilation2DBackpropInput = a.asm.Dilation2DBackpropInput).apply(null, arguments);
        }, a._Elu = function() {
          return (a._Elu = a.asm.Elu).apply(null, arguments);
        }, a._EluGrad = function() {
          return (a._EluGrad = a.asm.EluGrad).apply(null, arguments);
        }, a._Equal = function() {
          return (a._Equal = a.asm.Equal).apply(null, arguments);
        }, a._Erf = function() {
          return (a._Erf = a.asm.Erf).apply(null, arguments);
        }, a._Exp = function() {
          return (a._Exp = a.asm.Exp).apply(null, arguments);
        }, a._Expm1 = function() {
          return (a._Expm1 = a.asm.Expm1).apply(null, arguments);
        }, a._FlipLeftRight = function() {
          return (a._FlipLeftRight = a.asm.FlipLeftRight).apply(null, arguments);
        }, a._Floor = function() {
          return (a._Floor = a.asm.Floor).apply(null, arguments);
        }, a._FloorDiv = function() {
          return (a._FloorDiv = a.asm.FloorDiv).apply(null, arguments);
        }, a._FusedBatchNorm = function() {
          return (a._FusedBatchNorm = a.asm.FusedBatchNorm).apply(null, arguments);
        }, a._FusedConv2D = function() {
          return (a._FusedConv2D = a.asm.FusedConv2D).apply(null, arguments);
        }, a._FusedDepthwiseConv2D = function() {
          return (a._FusedDepthwiseConv2D = a.asm.FusedDepthwiseConv2D).apply(null, arguments);
        }, a._Gather = function() {
          return (a._Gather = a.asm.Gather).apply(null, arguments);
        }, a._GatherNd = function() {
          return (a._GatherNd = a.asm.GatherNd).apply(null, arguments);
        }, a._Greater = function() {
          return (a._Greater = a.asm.Greater).apply(null, arguments);
        }, a._GreaterEqual = function() {
          return (a._GreaterEqual = a.asm.GreaterEqual).apply(null, arguments);
        }, a._IsFinite = function() {
          return (a._IsFinite = a.asm.IsFinite).apply(null, arguments);
        }, a._IsInf = function() {
          return (a._IsInf = a.asm.IsInf).apply(null, arguments);
        }, a._IsNan = function() {
          return (a._IsNan = a.asm.IsNan).apply(null, arguments);
        }, a._LRN = function() {
          return (a._LRN = a.asm.LRN).apply(null, arguments);
        }, a._LRNGrad = function() {
          return (a._LRNGrad = a.asm.LRNGrad).apply(null, arguments);
        }, a._LeakyRelu = function() {
          return (a._LeakyRelu = a.asm.LeakyRelu).apply(null, arguments);
        }, a._Less = function() {
          return (a._Less = a.asm.Less).apply(null, arguments);
        }, a._LessEqual = function() {
          return (a._LessEqual = a.asm.LessEqual).apply(null, arguments);
        }, a._LinSpace = function() {
          return (a._LinSpace = a.asm.LinSpace).apply(null, arguments);
        }, a._Log = function() {
          return (a._Log = a.asm.Log).apply(null, arguments);
        }, a._Log1p = function() {
          return (a._Log1p = a.asm.Log1p).apply(null, arguments);
        }, a._LogicalAnd = function() {
          return (a._LogicalAnd = a.asm.LogicalAnd).apply(null, arguments);
        }, a._LogicalNot = function() {
          return (a._LogicalNot = a.asm.LogicalNot).apply(null, arguments);
        }, a._LogicalOr = function() {
          return (a._LogicalOr = a.asm.LogicalOr).apply(null, arguments);
        }, a._LogicalXor = function() {
          return (a._LogicalXor = a.asm.LogicalXor).apply(null, arguments);
        }, a._Max = function() {
          return (a._Max = a.asm.Max).apply(null, arguments);
        }, a._MaxPool = function() {
          return (a._MaxPool = a.asm.MaxPool).apply(null, arguments);
        }, a._MaxPool3D = function() {
          return (a._MaxPool3D = a.asm.MaxPool3D).apply(null, arguments);
        }, a._MaxPool3DGrad = function() {
          return (a._MaxPool3DGrad = a.asm.MaxPool3DGrad).apply(null, arguments);
        }, a._MaxPoolGrad = function() {
          return (a._MaxPoolGrad = a.asm.MaxPoolGrad).apply(null, arguments);
        }, a._MaxPoolWithArgmax = function() {
          return (a._MaxPoolWithArgmax = a.asm.MaxPoolWithArgmax).apply(null, arguments);
        }, a._Maximum = function() {
          return (a._Maximum = a.asm.Maximum).apply(null, arguments);
        }, a._Mean = function() {
          return (a._Mean = a.asm.Mean).apply(null, arguments);
        }, a._Min = function() {
          return (a._Min = a.asm.Min).apply(null, arguments);
        }, a._Minimum = function() {
          return (a._Minimum = a.asm.Minimum).apply(null, arguments);
        }, a._MirrorPad = function() {
          return (a._MirrorPad = a.asm.MirrorPad).apply(null, arguments);
        }, a._Mod = function() {
          return (a._Mod = a.asm.Mod).apply(null, arguments);
        }, a._Multinomial = function() {
          return (a._Multinomial = a.asm.Multinomial).apply(null, arguments);
        }, a._Multiply = function() {
          return (a._Multiply = a.asm.Multiply).apply(null, arguments);
        }, a._Neg = function() {
          return (a._Neg = a.asm.Neg).apply(null, arguments);
        }, a._NonMaxSuppressionV3 = function() {
          return (a._NonMaxSuppressionV3 = a.asm.NonMaxSuppressionV3).apply(null, arguments);
        }, a._NonMaxSuppressionV4 = function() {
          return (a._NonMaxSuppressionV4 = a.asm.NonMaxSuppressionV4).apply(null, arguments);
        }, a._NonMaxSuppressionV5 = function() {
          return (a._NonMaxSuppressionV5 = a.asm.NonMaxSuppressionV5).apply(null, arguments);
        }, a._NotEqual = function() {
          return (a._NotEqual = a.asm.NotEqual).apply(null, arguments);
        }, a._OneHot = function() {
          return (a._OneHot = a.asm.OneHot).apply(null, arguments);
        }, a._PadV2 = function() {
          return (a._PadV2 = a.asm.PadV2).apply(null, arguments);
        }, a._Pow = function() {
          return (a._Pow = a.asm.Pow).apply(null, arguments);
        }, a._Prelu = function() {
          return (a._Prelu = a.asm.Prelu).apply(null, arguments);
        }, a._Prod = function() {
          return (a._Prod = a.asm.Prod).apply(null, arguments);
        }, a._RealDiv = function() {
          return (a._RealDiv = a.asm.RealDiv).apply(null, arguments);
        }, a._Reciprocal = function() {
          return (a._Reciprocal = a.asm.Reciprocal).apply(null, arguments);
        }, a._Relu = function() {
          return (a._Relu = a.asm.Relu).apply(null, arguments);
        }, a._Relu6 = function() {
          return (a._Relu6 = a.asm.Relu6).apply(null, arguments);
        }, a._ResizeBilinear = function() {
          return (a._ResizeBilinear = a.asm.ResizeBilinear).apply(null, arguments);
        }, a._ResizeBilinearGrad = function() {
          return (a._ResizeBilinearGrad = a.asm.ResizeBilinearGrad).apply(null, arguments);
        }, a._ResizeNearestNeighbor = function() {
          return (a._ResizeNearestNeighbor = a.asm.ResizeNearestNeighbor).apply(null, arguments);
        }, a._ResizeNearestNeighborGrad = function() {
          return (a._ResizeNearestNeighborGrad = a.asm.ResizeNearestNeighborGrad).apply(null, arguments);
        }, a._Reverse = function() {
          return (a._Reverse = a.asm.Reverse).apply(null, arguments);
        }, a._RotateWithOffset = function() {
          return (a._RotateWithOffset = a.asm.RotateWithOffset).apply(null, arguments);
        }, a._Round = function() {
          return (a._Round = a.asm.Round).apply(null, arguments);
        }, a._Rsqrt = function() {
          return (a._Rsqrt = a.asm.Rsqrt).apply(null, arguments);
        }, a._ScatterNd = function() {
          return (a._ScatterNd = a.asm.ScatterNd).apply(null, arguments);
        }, a._SearchSorted = function() {
          return (a._SearchSorted = a.asm.SearchSorted).apply(null, arguments);
        }, a._SelectV2 = function() {
          return (a._SelectV2 = a.asm.SelectV2).apply(null, arguments);
        }, a._Selu = function() {
          return (a._Selu = a.asm.Selu).apply(null, arguments);
        }, a._Sigmoid = function() {
          return (a._Sigmoid = a.asm.Sigmoid).apply(null, arguments);
        }, a._Sign = function() {
          return (a._Sign = a.asm.Sign).apply(null, arguments);
        }, a._Sin = function() {
          return (a._Sin = a.asm.Sin).apply(null, arguments);
        }, a._Sinh = function() {
          return (a._Sinh = a.asm.Sinh).apply(null, arguments);
        }, a._Softmax = function() {
          return (a._Softmax = a.asm.Softmax).apply(null, arguments);
        }, a._Softplus = function() {
          return (a._Softplus = a.asm.Softplus).apply(null, arguments);
        }, a._SparseFillEmptyRows = function() {
          return (a._SparseFillEmptyRows = a.asm.SparseFillEmptyRows).apply(null, arguments);
        }, a._SparseReshape = function() {
          return (a._SparseReshape = a.asm.SparseReshape).apply(null, arguments);
        }, a._SparseSegmentReduction = function() {
          return (a._SparseSegmentReduction = a.asm.SparseSegmentReduction).apply(null, arguments);
        }, a._SparseToDense = function() {
          return (a._SparseToDense = a.asm.SparseToDense).apply(null, arguments);
        }, a._Sqrt = function() {
          return (a._Sqrt = a.asm.Sqrt).apply(null, arguments);
        }, a._Square = function() {
          return (a._Square = a.asm.Square).apply(null, arguments);
        }, a._SquaredDifference = function() {
          return (a._SquaredDifference = a.asm.SquaredDifference).apply(null, arguments);
        }, a._Step = function() {
          return (a._Step = a.asm.Step).apply(null, arguments);
        }, a._StridedSlice = function() {
          return (a._StridedSlice = a.asm.StridedSlice).apply(null, arguments);
        }, a._Sub = function() {
          return (a._Sub = a.asm.Sub).apply(null, arguments);
        }, a._Sum = function() {
          return (a._Sum = a.asm.Sum).apply(null, arguments);
        }, a._Tan = function() {
          return (a._Tan = a.asm.Tan).apply(null, arguments);
        }, a._Tanh = function() {
          return (a._Tanh = a.asm.Tanh).apply(null, arguments);
        }, a._TensorScatterUpdate = function() {
          return (a._TensorScatterUpdate = a.asm.TensorScatterUpdate).apply(null, arguments);
        }, a._Tile = function() {
          return (a._Tile = a.asm.Tile).apply(null, arguments);
        }, a._TopK = function() {
          return (a._TopK = a.asm.TopK).apply(null, arguments);
        }, a._Transform = function() {
          return (a._Transform = a.asm.Transform).apply(null, arguments);
        }, a._Transpose = function() {
          return (a._Transpose = a.asm.Transpose).apply(null, arguments);
        }, a.__FusedMatMul = function() {
          return (a.__FusedMatMul = a.asm._FusedMatMul).apply(null, arguments);
        }, a._malloc = function() {
          return (a._malloc = a.asm.malloc).apply(null, arguments);
        }, a._free = function() {
          return (a._free = a.asm.free).apply(null, arguments);
        }, a.___errno_location = function() {
          return (a.___errno_location = a.asm.__errno_location).apply(null, arguments);
        };
        var Ph = a.stackSave = function() {
          return (Ph = a.stackSave = a.asm.stackSave).apply(null, arguments);
        }, Lh = a.stackRestore = function() {
          return (Lh = a.stackRestore = a.asm.stackRestore).apply(null, arguments);
        }, kr = a.stackAlloc = function() {
          return (kr = a.stackAlloc = a.asm.stackAlloc).apply(null, arguments);
        };
        a.dynCall_iijjiiii = function() {
          return (a.dynCall_iijjiiii = a.asm.dynCall_iijjiiii).apply(null, arguments);
        }, a.dynCall_jiji = function() {
          return (a.dynCall_jiji = a.asm.dynCall_jiji).apply(null, arguments);
        }, a.cwrap = Fh;
        var ll;
        ke = function Q() {
          ll || zh(), ll || (ke = Q);
        };
        function zh(Q) {
          if (ge > 0 || (ee(), ge > 0)) return;
          function ae() {
            ll || (ll = true, a.calledRun = true, !R && (J(), o(a), a.onRuntimeInitialized && a.onRuntimeInitialized(), re()));
          }
          a.setStatus ? (a.setStatus("Running..."), setTimeout(function() {
            setTimeout(function() {
              a.setStatus("");
            }, 1), ae();
          }, 1)) : ae();
        }
        if (a.preInit) for (typeof a.preInit == "function" && (a.preInit = [a.preInit]); a.preInit.length > 0; ) a.preInit.pop()();
        zh();
        var ii;
        u && (ii = { uncaughtException: process.listeners("uncaughtException").filter(function(Q) {
          return !u.uncaughtException.indexOf(Q) > -1;
        }), unhandledRejection: process.listeners("unhandledRejection").filter(function(Q) {
          return !u.unhandledRejection.indexOf(Q) > -1;
        }) });
        var ui;
        if (typeof r < "u") ui = r;
        else if (typeof WasmBackendModuleThreadedSimd < "u") ui = WasmBackendModuleThreadedSimd;
        else throw new Error("Could not find wasm module in post.js");
        if (ii) {
          var Mh = ui._dispose;
          ui._dispose = function() {
            Mh(), ii.uncaughtException.forEach(function(Q) {
              process.removeListener("uncaughtException", Q);
            }), ii.unhandledRejection.forEach(function(Q) {
              process.removeListener("unhandledRejection", Q);
            });
          };
        }
        return r.ready;
      };
    })();
    n.exports = t;
  }(hg)), hg.exports;
}
var zR = Rxe();
const MR = vy(zR), _xe = yy({ __proto__: null, default: MR }, [zR]);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const XC = LR || kxe, Exe = MR || _xe;
class BR extends Pl {
  constructor(e) {
    super(), this.wasm = e, this.dataIdNextNumber = 1, this.wasm.tfjs.initWithThreadsCount(WR), gy = this.wasm.tfjs.getThreadsCount(), this.dataIdMap = new Cd(this, zn());
  }
  write(e, t, s) {
    const r = { id: this.dataIdNextNumber++ };
    return this.move(r, e, t, s, 1), r;
  }
  numDataIds() {
    return this.dataIdMap.numDataIds();
  }
  async time(e) {
    const t = Xt();
    return e(), { kernelMs: Xt() - t };
  }
  move(e, t, s, r, a) {
    const o = this.dataIdNextNumber++;
    if (r === "string") {
      const l = t;
      this.dataIdMap.set(e, { id: o, stringBytes: l, shape: s, dtype: r, memoryOffset: null, refCount: a });
      return;
    }
    const i = A(s), u = i * Ti(r), c = this.wasm._malloc(u) >>> 0;
    this.dataIdMap.set(e, { id: o, memoryOffset: c, shape: s, dtype: r, refCount: a }), this.wasm.tfjs.registerTensor(o, i, c), t != null && this.wasm.HEAPU8.set(new Uint8Array(t.buffer, t.byteOffset, u), c);
  }
  async read(e) {
    return this.readSync(e);
  }
  readSync(e, t, s) {
    const { memoryOffset: r, dtype: a, shape: o, stringBytes: i } = this.dataIdMap.get(e);
    if (a === "string") return (t == null || t === 0) && (s == null || s >= i.length) ? i : i.slice(t, s);
    t = t || 0, s = s || A(o);
    const u = Ti(a), c = this.wasm.HEAPU8.slice(r + t * u, r + s * u);
    return Fxe(c.buffer, a);
  }
  disposeData(e, t = false) {
    if (this.dataIdMap.has(e)) {
      const s = this.dataIdMap.get(e);
      if (s.refCount--, !t && s.refCount > 0) return false;
      this.wasm._free(s.memoryOffset), this.wasm.tfjs.disposeData(s.id), this.dataIdMap.delete(e);
    }
    return true;
  }
  refCount(e) {
    return this.dataIdMap.has(e) ? this.dataIdMap.get(e).refCount : 0;
  }
  incRef(e) {
    const t = this.dataIdMap.get(e);
    t != null && t.refCount++;
  }
  floatPrecision() {
    return 32;
  }
  getMemoryOffset(e) {
    return this.dataIdMap.get(e).memoryOffset;
  }
  dispose() {
    this.wasm.tfjs.dispose(), "PThread" in this.wasm && this.wasm.PThread.terminateAllThreads(), this.wasm = null;
  }
  memory() {
    return { unreliable: false };
  }
  makeOutput(e, t, s, r) {
    let a;
    if (s == null) a = this.write(r ?? null, e, t);
    else {
      const o = this.dataIdNextNumber++;
      a = { id: o }, this.dataIdMap.set(a, { id: o, memoryOffset: s, shape: e, dtype: t, refCount: 1 });
      const i = A(e);
      this.wasm.tfjs.registerTensor(o, i, s);
    }
    return { dataId: a, shape: e, dtype: t };
  }
  typedArrayFromHeap({ shape: e, dtype: t, dataId: s }) {
    const r = this.wasm.HEAPU8.buffer, { memoryOffset: a } = this.dataIdMap.get(s), o = A(e);
    switch (t) {
      case "float32":
        return new Float32Array(r, a, o);
      case "int32":
        return new Int32Array(r, a, o);
      case "bool":
        return new Uint8Array(r, a, o);
      default:
        throw new Error(`Unknown dtype ${t}`);
    }
  }
}
function Dxe(n) {
  return (e, t) => ($y(n, { credentials: "same-origin" }).then((s) => {
    s.ok || e.env.a(`failed to load wasm binary file at '${n}'`), s.arrayBuffer().then((r) => {
      WebAssembly.instantiate(r, e).then((a) => {
        t(a.instance, a.module);
      });
    });
  }), {});
}
function YC(n, e, t) {
  if (rf != null) return rf;
  let s = "tfjs-backend-wasm.wasm";
  return n && e ? s = "tfjs-backend-wasm-threaded-simd.wasm" : n && (s = "tfjs-backend-wasm-simd.wasm"), Zc != null && Zc[s] != null ? Zc[s] : t + s;
}
async function Axe() {
  const [n, e] = await Promise.all([U().getAsync("WASM_HAS_SIMD_SUPPORT"), U().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]);
  return new Promise((t, s) => {
    const r = {};
    r.locateFile = (i, u) => {
      if (i.endsWith(".worker.js")) {
        const c = Txe.wasmWorkerContents.replace(/\n/g, "\\n"), l = new Blob([c], { type: "application/javascript" });
        return URL.createObjectURL(l);
      }
      return i.endsWith(".wasm") ? YC(n, e, Kc ?? u) : u + i;
    }, N0 && (r.instantiateWasm = Dxe(YC(n, e, Kc ?? "")));
    let a = false;
    r.onAbort = () => {
      if (a || Jc) return;
      Jc = true, s({ message: "Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers" });
    };
    let o;
    e && n && rf == null ? (r.mainScriptUrlOrBlob = new Blob(["var WasmBackendModuleThreadedSimd = " + XC.toString()], { type: "text/javascript" }), o = XC(r)) : o = Exe(r), o.then((i) => {
      a = true, Jc = false;
      const u = null;
      i.tfjs = { init: i.cwrap("init", null, []), initWithThreadsCount: i.cwrap("init_with_threads_count", null, ["number"]), getThreadsCount: i.cwrap("get_threads_count", "number", []), registerTensor: i.cwrap("register_tensor", null, ["number", "number", "number"]), disposeData: i.cwrap("dispose_data", u, ["number"]), dispose: i.cwrap("dispose", u, []) }, t({ wasm: i });
    }).catch(s);
  });
}
function Fxe(n, e) {
  switch (e) {
    case "float32":
      return new Float32Array(n);
    case "int32":
      return new Int32Array(n);
    case "bool":
      return new Uint8Array(n);
    default:
      throw new Error(`Unknown dtype ${e}`);
  }
}
const Oxe = ["tfjs-backend-wasm.wasm", "tfjs-backend-wasm-simd.wasm", "tfjs-backend-wasm-threaded-simd.wasm"];
let rf = null, Kc = null, Zc = {}, Jc = false, N0 = false;
function Pxe(n, e = false) {
  if (II("setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release."), Jc) throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`");
  rf = n, N0 = e;
}
function Lxe(n, e = false) {
  if (Jc) throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`");
  if (typeof n == "string") Kc = n;
  else {
    Zc = n;
    const t = Oxe.filter((s) => Zc[s] == null);
    if (t.length > 0) throw new Error(`There were no entries found for the following binaries: ${t.join(",")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`);
  }
  N0 = e;
}
let WR = -1, gy = -1;
function zxe(n) {
  WR = n;
}
function Mxe() {
  if (gy === -1) throw new Error("WASM backend not initialized.");
  return gy;
}
/** @license See the LICENSE file. */
const Bxe = "4.22.0";
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Wxe = 2;
Bd("wasm", async () => {
  const { wasm: n } = await Axe();
  return new BR(n);
}, Wxe);
/**
* @license
* Copyright 2019 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
const Zwe = Object.freeze(Object.defineProperty({ __proto__: null, BackendWasm: BR, getThreadsCount: Mxe, setThreadsCount: zxe, setWasmPath: Pxe, setWasmPaths: Lxe, version_wasm: Bxe }, Symbol.toStringTag, { value: "Module" }));
export {
  vy as a,
  U as e,
  SI as g,
  Zwe as i,
  dE as r,
  cE as s,
  Qwe as t
};
