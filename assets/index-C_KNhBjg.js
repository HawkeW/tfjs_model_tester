const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/ModelPerformanceTest-zQ3DIqG6.js","assets/base-D4gcL655.js","assets/ModelPerformanceTest-D85_fE6k.css","assets/index-BSeBy09o.js"])))=>i.map(i=>d[i]);
let wa, Lc, Sp, vp, Qy, C, Wc, hm, Rx, Aa, Ee, Ax, CE, Uc, oh, ih, ah, Px, Iu, Ru, qo, zx, $p, Gc, Cp, ba, xa, pc, Fe, hu, jc, Ox, tr, YT, ak, qc, Or, jt, Kc, Xc, Vp, Ta, Ea, tu, fc, mc, Wp, um, nu, Jx, su, Ra, _a, Da, Oa, ru, ou, iu, Hp, Fa, La, au, lu, cu, MO, uu, jp, vo, kp, Tp, va, Sa, Rp, Ep, So, Yc, Ap, _p, Zc, Fp, Jc, Vu, Nd, Id, Ca, zp, Qc, Ia, Na, eu, ka, Bp, yi, ha, QN, Pa, du, pu, Kp, qp, Xp, sn, fu, mu, za, Nu, of, Tu, Cf, Lx, Ha, ja, lf, No, uf, Eu, qa, Za, Ya, Ka, Xa, Ja, _u, hf, YN, XN, KN, df, tk, ek, JN, ZN, gu, Ou, Yp, Ma, Ba, yu, Zp, Jp, Qp, bu, wu, xu, vu, nn, Su, Va, $u, Cu, sf, vE, $a, Wa, Ua, Ga, ku, af, da, Bx, ty, rk, sk, nk, pf, ff, mf, Du, Zx, Qa, lz, mle, KO, gp, Zy, $s, Xt, dc, NF, UC, lb, rC, cD, ri, Ue, AC, Tr, Cr, Me, or, CC, Xs, Qs, Ut, fm, pm, Mx, gf, el, ol, yf, _x, Ex, bf, RE, xf, AE, wf, _E, tl, Au, nl, sl, cf, rl, vf, Sf, $f, PE, Lu, zu, If, j, xi, Vm, Vx, Wx, Ux, Gx, xt, AO, Ip, An, Er, zE, uC, QC, ZC, JC, fle, n$, ap, hA, ds, Jl, wt, A$, k_, hs, Js, AA, F$, Tn, dp, cp, Vi, fA, kg, CA, ale, nle, gs, Nf, Tx, rf, Tt, eb, Hc, Gp, Np, Dp, Op, Lp, Pp, jx, Kx, Xx, qx, Yx, Mp, kd, Up, im, lm, tn, Pu, ik, Pc, ole, so, $_, Ki, Dc, bd, ple, dle, sp, cle, tle, v_, rle, lle, OA, s$, HR, Wy, jh, rp, x_, tC, sle, ule, GR, S_, ile, hle, mD, Ct, bt, xp, rn, qt, $t, wp, zc, Mc, pa, Ve, fa, ma, X, Un, ya, ga, Bc, bs, Vc, Dr;
let __tla = (async () => {
  function RR(t, e) {
    for (var n = 0; n < e.length; n++) {
      const s = e[n];
      if (typeof s != "string" && !Array.isArray(s)) {
        for (const r in s) if (r !== "default" && !(r in t)) {
          const o = Object.getOwnPropertyDescriptor(s, r);
          o && Object.defineProperty(t, r, o.get ? o : {
            enumerable: true,
            get: () => s[r]
          });
        }
      }
    }
    return Object.freeze(Object.defineProperty(t, Symbol.toStringTag, {
      value: "Module"
    }));
  }
  (function() {
    const e = document.createElement("link").relList;
    if (e && e.supports && e.supports("modulepreload")) return;
    for (const r of document.querySelectorAll('link[rel="modulepreload"]')) s(r);
    new MutationObserver((r) => {
      for (const o of r) if (o.type === "childList") for (const i of o.addedNodes) i.tagName === "LINK" && i.rel === "modulepreload" && s(i);
    }).observe(document, {
      childList: true,
      subtree: true
    });
    function n(r) {
      const o = {};
      return r.integrity && (o.integrity = r.integrity), r.referrerPolicy && (o.referrerPolicy = r.referrerPolicy), r.crossOrigin === "use-credentials" ? o.credentials = "include" : r.crossOrigin === "anonymous" ? o.credentials = "omit" : o.credentials = "same-origin", o;
    }
    function s(r) {
      if (r.ep) return;
      r.ep = true;
      const o = n(r);
      fetch(r.href, o);
    }
  })();
  function Ay(t) {
    const e = /* @__PURE__ */ Object.create(null);
    for (const n of t.split(",")) e[n] = 1;
    return (n) => n in e;
  }
  let at, Mi, Zs, AR, Jd, _y, gn, Dy, _R, tt, De, Bi, Qd, i1, Le, St, As, ct, KS, XS, _c, DR, YS, Oy, ql, ep, OR, FR, go, tp, Zr, Gh, ZS, hd;
  at = {};
  Mi = [];
  Zs = () => {
  };
  AR = () => false;
  Jd = (t) => t.charCodeAt(0) === 111 && t.charCodeAt(1) === 110 && (t.charCodeAt(2) > 122 || t.charCodeAt(2) < 97);
  _y = (t) => t.startsWith("onUpdate:");
  gn = Object.assign;
  Dy = (t, e) => {
    const n = t.indexOf(e);
    n > -1 && t.splice(n, 1);
  };
  _R = Object.prototype.hasOwnProperty;
  tt = (t, e) => _R.call(t, e);
  De = Array.isArray;
  Bi = (t) => _c(t) === "[object Map]";
  Qd = (t) => _c(t) === "[object Set]";
  i1 = (t) => _c(t) === "[object Date]";
  Le = (t) => typeof t == "function";
  St = (t) => typeof t == "string";
  As = (t) => typeof t == "symbol";
  ct = (t) => t !== null && typeof t == "object";
  KS = (t) => (ct(t) || Le(t)) && Le(t.then) && Le(t.catch);
  XS = Object.prototype.toString;
  _c = (t) => XS.call(t);
  DR = (t) => _c(t).slice(8, -1);
  YS = (t) => _c(t) === "[object Object]";
  Oy = (t) => St(t) && t !== "NaN" && t[0] !== "-" && "" + parseInt(t, 10) === t;
  ql = Ay(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
  ep = (t) => {
    const e = /* @__PURE__ */ Object.create(null);
    return (n) => e[n] || (e[n] = t(n));
  };
  OR = /-(\w)/g;
  gs = ep((t) => t.replace(OR, (e, n) => n ? n.toUpperCase() : ""));
  FR = /\B([A-Z])/g;
  go = ep((t) => t.replace(FR, "-$1").toLowerCase());
  tp = ep((t) => t.charAt(0).toUpperCase() + t.slice(1));
  Vm = ep((t) => t ? `on${tp(t)}` : "");
  Zr = (t, e) => !Object.is(t, e);
  Gh = (t, ...e) => {
    for (let n = 0; n < t.length; n++) t[n](...e);
  };
  ZS = (t, e, n, s = false) => {
    Object.defineProperty(t, e, {
      configurable: true,
      enumerable: false,
      writable: s,
      value: n
    });
  };
  hd = (t) => {
    const e = parseFloat(t);
    return isNaN(e) ? t : e;
  };
  let a1;
  const np = () => a1 || (a1 = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : typeof global < "u" ? global : {});
  sp = function(t) {
    if (De(t)) {
      const e = {};
      for (let n = 0; n < t.length; n++) {
        const s = t[n], r = St(s) ? MR(s) : sp(s);
        if (r) for (const o in r) e[o] = r[o];
      }
      return e;
    } else if (St(t) || ct(t)) return t;
  };
  const LR = /;(?![^(]*\))/g, PR = /:([^]+)/, zR = /\/\*[^]*?\*\//g;
  function MR(t) {
    const e = {};
    return t.replace(zR, "").split(LR).forEach((n) => {
      if (n) {
        const s = n.split(PR);
        s.length > 1 && (e[s[0].trim()] = s[1].trim());
      }
    }), e;
  }
  rp = function(t) {
    let e = "";
    if (St(t)) e = t;
    else if (De(t)) for (let n = 0; n < t.length; n++) {
      const s = rp(t[n]);
      s && (e += s + " ");
    }
    else if (ct(t)) for (const n in t) t[n] && (e += n + " ");
    return e.trim();
  };
  tle = function(t) {
    if (!t) return null;
    let { class: e, style: n } = t;
    return e && !St(e) && (t.class = rp(e)), n && (t.style = sp(n)), t;
  };
  const BR = "itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly", VR = Ay(BR);
  function JS(t) {
    return !!t || t === "";
  }
  function WR(t, e) {
    if (t.length !== e.length) return false;
    let n = true;
    for (let s = 0; n && s < t.length; s++) n = op(t[s], e[s]);
    return n;
  }
  function op(t, e) {
    if (t === e) return true;
    let n = i1(t), s = i1(e);
    if (n || s) return n && s ? t.getTime() === e.getTime() : false;
    if (n = As(t), s = As(e), n || s) return t === e;
    if (n = De(t), s = De(e), n || s) return n && s ? WR(t, e) : false;
    if (n = ct(t), s = ct(e), n || s) {
      if (!n || !s) return false;
      const r = Object.keys(t).length, o = Object.keys(e).length;
      if (r !== o) return false;
      for (const i in t) {
        const a = t.hasOwnProperty(i), l = e.hasOwnProperty(i);
        if (a && !l || !a && l || !op(t[i], e[i])) return false;
      }
    }
    return String(t) === String(e);
  }
  function UR(t, e) {
    return t.findIndex((n) => op(n, e));
  }
  let QS, e$, Wm;
  QS = (t) => !!(t && t.__v_isRef === true);
  GR = (t) => St(t) ? t : t == null ? "" : De(t) || ct(t) && (t.toString === XS || !Le(t.toString)) ? QS(t) ? GR(t.value) : JSON.stringify(t, e$, 2) : String(t);
  e$ = (t, e) => QS(e) ? e$(t, e.value) : Bi(e) ? {
    [`Map(${e.size})`]: [
      ...e.entries()
    ].reduce((n, [s, r], o) => (n[Wm(s, o) + " =>"] = r, n), {})
  } : Qd(e) ? {
    [`Set(${e.size})`]: [
      ...e.values()
    ].map((n) => Wm(n))
  } : As(e) ? Wm(e) : ct(e) && !De(e) && !YS(e) ? String(e) : e;
  Wm = (t, e = "") => {
    var n;
    return As(t) ? `Symbol(${(n = t.description) != null ? n : e})` : t;
  };
  let In;
  class t$ {
    constructor(e = false) {
      this.detached = e, this._active = true, this.effects = [], this.cleanups = [], this._isPaused = false, this.parent = In, !e && In && (this.index = (In.scopes || (In.scopes = [])).push(this) - 1);
    }
    get active() {
      return this._active;
    }
    pause() {
      if (this._active) {
        this._isPaused = true;
        let e, n;
        if (this.scopes) for (e = 0, n = this.scopes.length; e < n; e++) this.scopes[e].pause();
        for (e = 0, n = this.effects.length; e < n; e++) this.effects[e].pause();
      }
    }
    resume() {
      if (this._active && this._isPaused) {
        this._isPaused = false;
        let e, n;
        if (this.scopes) for (e = 0, n = this.scopes.length; e < n; e++) this.scopes[e].resume();
        for (e = 0, n = this.effects.length; e < n; e++) this.effects[e].resume();
      }
    }
    run(e) {
      if (this._active) {
        const n = In;
        try {
          return In = this, e();
        } finally {
          In = n;
        }
      }
    }
    on() {
      In = this;
    }
    off() {
      In = this.parent;
    }
    stop(e) {
      if (this._active) {
        this._active = false;
        let n, s;
        for (n = 0, s = this.effects.length; n < s; n++) this.effects[n].stop();
        for (this.effects.length = 0, n = 0, s = this.cleanups.length; n < s; n++) this.cleanups[n]();
        if (this.cleanups.length = 0, this.scopes) {
          for (n = 0, s = this.scopes.length; n < s; n++) this.scopes[n].stop(true);
          this.scopes.length = 0;
        }
        if (!this.detached && this.parent && !e) {
          const r = this.parent.scopes.pop();
          r && r !== this && (this.parent.scopes[this.index] = r, r.index = this.index);
        }
        this.parent = void 0;
      }
    }
  }
  n$ = function(t) {
    return new t$(t);
  };
  s$ = function() {
    return In;
  };
  HR = function(t, e = false) {
    In && In.cleanups.push(t);
  };
  let ht;
  const Um = /* @__PURE__ */ new WeakSet();
  class r$ {
    constructor(e) {
      this.fn = e, this.deps = void 0, this.depsTail = void 0, this.flags = 5, this.next = void 0, this.cleanup = void 0, this.scheduler = void 0, In && In.active && In.effects.push(this);
    }
    pause() {
      this.flags |= 64;
    }
    resume() {
      this.flags & 64 && (this.flags &= -65, Um.has(this) && (Um.delete(this), this.trigger()));
    }
    notify() {
      this.flags & 2 && !(this.flags & 32) || this.flags & 8 || i$(this);
    }
    run() {
      if (!(this.flags & 1)) return this.fn();
      this.flags |= 2, l1(this), a$(this);
      const e = ht, n = Ns;
      ht = this, Ns = true;
      try {
        return this.fn();
      } finally {
        l$(this), ht = e, Ns = n, this.flags &= -3;
      }
    }
    stop() {
      if (this.flags & 1) {
        for (let e = this.deps; e; e = e.nextDep) Py(e);
        this.deps = this.depsTail = void 0, l1(this), this.onStop && this.onStop(), this.flags &= -2;
      }
    }
    trigger() {
      this.flags & 64 ? Um.add(this) : this.scheduler ? this.scheduler() : this.runIfDirty();
    }
    runIfDirty() {
      bg(this) && this.run();
    }
    get dirty() {
      return bg(this);
    }
  }
  let o$ = 0, Kl, Xl;
  function i$(t, e = false) {
    if (t.flags |= 8, e) {
      t.next = Xl, Xl = t;
      return;
    }
    t.next = Kl, Kl = t;
  }
  function Fy() {
    o$++;
  }
  function Ly() {
    if (--o$ > 0) return;
    if (Xl) {
      let e = Xl;
      for (Xl = void 0; e; ) {
        const n = e.next;
        e.next = void 0, e.flags &= -9, e = n;
      }
    }
    let t;
    for (; Kl; ) {
      let e = Kl;
      for (Kl = void 0; e; ) {
        const n = e.next;
        if (e.next = void 0, e.flags &= -9, e.flags & 1) try {
          e.trigger();
        } catch (s) {
          t || (t = s);
        }
        e = n;
      }
    }
    if (t) throw t;
  }
  function a$(t) {
    for (let e = t.deps; e; e = e.nextDep) e.version = -1, e.prevActiveLink = e.dep.activeLink, e.dep.activeLink = e;
  }
  function l$(t) {
    let e, n = t.depsTail, s = n;
    for (; s; ) {
      const r = s.prevDep;
      s.version === -1 ? (s === n && (n = r), Py(s), jR(s)) : e = s, s.dep.activeLink = s.prevActiveLink, s.prevActiveLink = void 0, s = r;
    }
    t.deps = e, t.depsTail = n;
  }
  function bg(t) {
    for (let e = t.deps; e; e = e.nextDep) if (e.dep.version !== e.version || e.dep.computed && (c$(e.dep.computed) || e.dep.version !== e.version)) return true;
    return !!t._dirty;
  }
  function c$(t) {
    if (t.flags & 4 && !(t.flags & 16) || (t.flags &= -17, t.globalVersion === rc)) return;
    t.globalVersion = rc;
    const e = t.dep;
    if (t.flags |= 2, e.version > 0 && !t.isSSR && t.deps && !bg(t)) {
      t.flags &= -3;
      return;
    }
    const n = ht, s = Ns;
    ht = t, Ns = true;
    try {
      a$(t);
      const r = t.fn(t._value);
      (e.version === 0 || Zr(r, t._value)) && (t._value = r, e.version++);
    } catch (r) {
      throw e.version++, r;
    } finally {
      ht = n, Ns = s, l$(t), t.flags &= -3;
    }
  }
  function Py(t, e = false) {
    const { dep: n, prevSub: s, nextSub: r } = t;
    if (s && (s.nextSub = r, t.prevSub = void 0), r && (r.prevSub = s, t.nextSub = void 0), n.subs === t && (n.subs = s, !s && n.computed)) {
      n.computed.flags &= -5;
      for (let o = n.computed.deps; o; o = o.nextDep) Py(o, true);
    }
    !e && !--n.sc && n.map && n.map.delete(n.key);
  }
  function jR(t) {
    const { prevDep: e, nextDep: n } = t;
    e && (e.nextDep = n, t.prevDep = void 0), n && (n.prevDep = e, t.nextDep = void 0);
  }
  let Ns = true;
  const u$ = [];
  function yo() {
    u$.push(Ns), Ns = false;
  }
  function bo() {
    const t = u$.pop();
    Ns = t === void 0 ? true : t;
  }
  function l1(t) {
    const { cleanup: e } = t;
    if (t.cleanup = void 0, e) {
      const n = ht;
      ht = void 0;
      try {
        e();
      } finally {
        ht = n;
      }
    }
  }
  let rc = 0;
  class qR {
    constructor(e, n) {
      this.sub = e, this.dep = n, this.version = n.version, this.nextDep = this.prevDep = this.nextSub = this.prevSub = this.prevActiveLink = void 0;
    }
  }
  class zy {
    constructor(e) {
      this.computed = e, this.version = 0, this.activeLink = void 0, this.subs = void 0, this.map = void 0, this.key = void 0, this.sc = 0;
    }
    track(e) {
      if (!ht || !Ns || ht === this.computed) return;
      let n = this.activeLink;
      if (n === void 0 || n.sub !== ht) n = this.activeLink = new qR(ht, this), ht.deps ? (n.prevDep = ht.depsTail, ht.depsTail.nextDep = n, ht.depsTail = n) : ht.deps = ht.depsTail = n, h$(n);
      else if (n.version === -1 && (n.version = this.version, n.nextDep)) {
        const s = n.nextDep;
        s.prevDep = n.prevDep, n.prevDep && (n.prevDep.nextDep = s), n.prevDep = ht.depsTail, n.nextDep = void 0, ht.depsTail.nextDep = n, ht.depsTail = n, ht.deps === n && (ht.deps = s);
      }
      return n;
    }
    trigger(e) {
      this.version++, rc++, this.notify(e);
    }
    notify(e) {
      Fy();
      try {
        for (let n = this.subs; n; n = n.prevSub) n.sub.notify() && n.sub.dep.notify();
      } finally {
        Ly();
      }
    }
  }
  function h$(t) {
    if (t.dep.sc++, t.sub.flags & 4) {
      const e = t.dep.computed;
      if (e && !t.dep.subs) {
        e.flags |= 20;
        for (let s = e.deps; s; s = s.nextDep) h$(s);
      }
      const n = t.dep.subs;
      n !== t && (t.prevSub = n, n && (n.nextSub = t)), t.dep.subs = t;
    }
  }
  const dd = /* @__PURE__ */ new WeakMap(), Go = Symbol(""), xg = Symbol(""), oc = Symbol("");
  function hn(t, e, n) {
    if (Ns && ht) {
      let s = dd.get(t);
      s || dd.set(t, s = /* @__PURE__ */ new Map());
      let r = s.get(n);
      r || (s.set(n, r = new zy()), r.map = s, r.key = n), r.track();
    }
  }
  function br(t, e, n, s, r, o) {
    const i = dd.get(t);
    if (!i) {
      rc++;
      return;
    }
    const a = (l) => {
      l && l.trigger();
    };
    if (Fy(), e === "clear") i.forEach(a);
    else {
      const l = De(t), c = l && Oy(n);
      if (l && n === "length") {
        const u = Number(s);
        i.forEach((h, d) => {
          (d === "length" || d === oc || !As(d) && d >= u) && a(h);
        });
      } else switch ((n !== void 0 || i.has(void 0)) && a(i.get(n)), c && a(i.get(oc)), e) {
        case "add":
          l ? c && a(i.get("length")) : (a(i.get(Go)), Bi(t) && a(i.get(xg)));
          break;
        case "delete":
          l || (a(i.get(Go)), Bi(t) && a(i.get(xg)));
          break;
        case "set":
          Bi(t) && a(i.get(Go));
          break;
      }
    }
    Ly();
  }
  function KR(t, e) {
    const n = dd.get(t);
    return n && n.get(e);
  }
  function Ai(t) {
    const e = Je(t);
    return e === t ? e : (hn(e, "iterate", oc), ms(t) ? e : e.map(dn));
  }
  function ip(t) {
    return hn(t = Je(t), "iterate", oc), t;
  }
  const XR = {
    __proto__: null,
    [Symbol.iterator]() {
      return Gm(this, Symbol.iterator, dn);
    },
    concat(...t) {
      return Ai(this).concat(...t.map((e) => De(e) ? Ai(e) : e));
    },
    entries() {
      return Gm(this, "entries", (t) => (t[1] = dn(t[1]), t));
    },
    every(t, e) {
      return dr(this, "every", t, e, void 0, arguments);
    },
    filter(t, e) {
      return dr(this, "filter", t, e, (n) => n.map(dn), arguments);
    },
    find(t, e) {
      return dr(this, "find", t, e, dn, arguments);
    },
    findIndex(t, e) {
      return dr(this, "findIndex", t, e, void 0, arguments);
    },
    findLast(t, e) {
      return dr(this, "findLast", t, e, dn, arguments);
    },
    findLastIndex(t, e) {
      return dr(this, "findLastIndex", t, e, void 0, arguments);
    },
    forEach(t, e) {
      return dr(this, "forEach", t, e, void 0, arguments);
    },
    includes(...t) {
      return Hm(this, "includes", t);
    },
    indexOf(...t) {
      return Hm(this, "indexOf", t);
    },
    join(t) {
      return Ai(this).join(t);
    },
    lastIndexOf(...t) {
      return Hm(this, "lastIndexOf", t);
    },
    map(t, e) {
      return dr(this, "map", t, e, void 0, arguments);
    },
    pop() {
      return El(this, "pop");
    },
    push(...t) {
      return El(this, "push", t);
    },
    reduce(t, ...e) {
      return c1(this, "reduce", t, e);
    },
    reduceRight(t, ...e) {
      return c1(this, "reduceRight", t, e);
    },
    shift() {
      return El(this, "shift");
    },
    some(t, e) {
      return dr(this, "some", t, e, void 0, arguments);
    },
    splice(...t) {
      return El(this, "splice", t);
    },
    toReversed() {
      return Ai(this).toReversed();
    },
    toSorted(t) {
      return Ai(this).toSorted(t);
    },
    toSpliced(...t) {
      return Ai(this).toSpliced(...t);
    },
    unshift(...t) {
      return El(this, "unshift", t);
    },
    values() {
      return Gm(this, "values", dn);
    }
  };
  function Gm(t, e, n) {
    const s = ip(t), r = s[e]();
    return s !== t && !ms(t) && (r._next = r.next, r.next = () => {
      const o = r._next();
      return o.value && (o.value = n(o.value)), o;
    }), r;
  }
  const YR = Array.prototype;
  function dr(t, e, n, s, r, o) {
    const i = ip(t), a = i !== t && !ms(t), l = i[e];
    if (l !== YR[e]) {
      const h = l.apply(t, o);
      return a ? dn(h) : h;
    }
    let c = n;
    i !== t && (a ? c = function(h, d) {
      return n.call(this, dn(h), d, t);
    } : n.length > 2 && (c = function(h, d) {
      return n.call(this, h, d, t);
    }));
    const u = l.call(i, c, s);
    return a && r ? r(u) : u;
  }
  function c1(t, e, n, s) {
    const r = ip(t);
    let o = n;
    return r !== t && (ms(t) ? n.length > 3 && (o = function(i, a, l) {
      return n.call(this, i, a, l, t);
    }) : o = function(i, a, l) {
      return n.call(this, i, dn(a), l, t);
    }), r[e](o, ...s);
  }
  function Hm(t, e, n) {
    const s = Je(t);
    hn(s, "iterate", oc);
    const r = s[e](...n);
    return (r === -1 || r === false) && Vy(n[0]) ? (n[0] = Je(n[0]), s[e](...n)) : r;
  }
  function El(t, e, n = []) {
    yo(), Fy();
    const s = Je(t)[e].apply(t, n);
    return Ly(), bo(), s;
  }
  const ZR = Ay("__proto__,__v_isRef,__isVue"), d$ = new Set(Object.getOwnPropertyNames(Symbol).filter((t) => t !== "arguments" && t !== "caller").map((t) => Symbol[t]).filter(As));
  function JR(t) {
    As(t) || (t = String(t));
    const e = Je(this);
    return hn(e, "has", t), e.hasOwnProperty(t);
  }
  class p$ {
    constructor(e = false, n = false) {
      this._isReadonly = e, this._isShallow = n;
    }
    get(e, n, s) {
      if (n === "__v_skip") return e.__v_skip;
      const r = this._isReadonly, o = this._isShallow;
      if (n === "__v_isReactive") return !r;
      if (n === "__v_isReadonly") return r;
      if (n === "__v_isShallow") return o;
      if (n === "__v_raw") return s === (r ? o ? lA : y$ : o ? g$ : m$).get(e) || Object.getPrototypeOf(e) === Object.getPrototypeOf(s) ? e : void 0;
      const i = De(e);
      if (!r) {
        let l;
        if (i && (l = XR[n])) return l;
        if (n === "hasOwnProperty") return JR;
      }
      const a = Reflect.get(e, n, wt(e) ? e : s);
      return (As(n) ? d$.has(n) : ZR(n)) || (r || hn(e, "get", n), o) ? a : wt(a) ? i && Oy(n) ? a : a.value : ct(a) ? r ? x$(a) : Dc(a) : a;
    }
  }
  class f$ extends p$ {
    constructor(e = false) {
      super(false, e);
    }
    set(e, n, s, r) {
      let o = e[n];
      if (!this._isShallow) {
        const l = Zo(o);
        if (!ms(s) && !Zo(s) && (o = Je(o), s = Je(s)), !De(e) && wt(o) && !wt(s)) return l ? false : (o.value = s, true);
      }
      const i = De(e) && Oy(n) ? Number(n) < e.length : tt(e, n), a = Reflect.set(e, n, s, wt(e) ? e : r);
      return e === Je(r) && (i ? Zr(s, o) && br(e, "set", n, s) : br(e, "add", n, s)), a;
    }
    deleteProperty(e, n) {
      const s = tt(e, n);
      e[n];
      const r = Reflect.deleteProperty(e, n);
      return r && s && br(e, "delete", n, void 0), r;
    }
    has(e, n) {
      const s = Reflect.has(e, n);
      return (!As(n) || !d$.has(n)) && hn(e, "has", n), s;
    }
    ownKeys(e) {
      return hn(e, "iterate", De(e) ? "length" : Go), Reflect.ownKeys(e);
    }
  }
  class QR extends p$ {
    constructor(e = false) {
      super(true, e);
    }
    set(e, n) {
      return true;
    }
    deleteProperty(e, n) {
      return true;
    }
  }
  const eA = new f$(), tA = new QR(), nA = new f$(true);
  const wg = (t) => t, Ih = (t) => Reflect.getPrototypeOf(t);
  function sA(t, e, n) {
    return function(...s) {
      const r = this.__v_raw, o = Je(r), i = Bi(o), a = t === "entries" || t === Symbol.iterator && i, l = t === "keys" && i, c = r[t](...s), u = n ? wg : e ? vg : dn;
      return !e && hn(o, "iterate", l ? xg : Go), {
        next() {
          const { value: h, done: d } = c.next();
          return d ? {
            value: h,
            done: d
          } : {
            value: a ? [
              u(h[0]),
              u(h[1])
            ] : u(h),
            done: d
          };
        },
        [Symbol.iterator]() {
          return this;
        }
      };
    };
  }
  function Nh(t) {
    return function(...e) {
      return t === "delete" ? false : t === "clear" ? void 0 : this;
    };
  }
  function rA(t, e) {
    const n = {
      get(r) {
        const o = this.__v_raw, i = Je(o), a = Je(r);
        t || (Zr(r, a) && hn(i, "get", r), hn(i, "get", a));
        const { has: l } = Ih(i), c = e ? wg : t ? vg : dn;
        if (l.call(i, r)) return c(o.get(r));
        if (l.call(i, a)) return c(o.get(a));
        o !== i && o.get(r);
      },
      get size() {
        const r = this.__v_raw;
        return !t && hn(Je(r), "iterate", Go), Reflect.get(r, "size", r);
      },
      has(r) {
        const o = this.__v_raw, i = Je(o), a = Je(r);
        return t || (Zr(r, a) && hn(i, "has", r), hn(i, "has", a)), r === a ? o.has(r) : o.has(r) || o.has(a);
      },
      forEach(r, o) {
        const i = this, a = i.__v_raw, l = Je(a), c = e ? wg : t ? vg : dn;
        return !t && hn(l, "iterate", Go), a.forEach((u, h) => r.call(o, c(u), c(h), i));
      }
    };
    return gn(n, t ? {
      add: Nh("add"),
      set: Nh("set"),
      delete: Nh("delete"),
      clear: Nh("clear")
    } : {
      add(r) {
        !e && !ms(r) && !Zo(r) && (r = Je(r));
        const o = Je(this);
        return Ih(o).has.call(o, r) || (o.add(r), br(o, "add", r, r)), this;
      },
      set(r, o) {
        !e && !ms(o) && !Zo(o) && (o = Je(o));
        const i = Je(this), { has: a, get: l } = Ih(i);
        let c = a.call(i, r);
        c || (r = Je(r), c = a.call(i, r));
        const u = l.call(i, r);
        return i.set(r, o), c ? Zr(o, u) && br(i, "set", r, o) : br(i, "add", r, o), this;
      },
      delete(r) {
        const o = Je(this), { has: i, get: a } = Ih(o);
        let l = i.call(o, r);
        l || (r = Je(r), l = i.call(o, r)), a && a.call(o, r);
        const c = o.delete(r);
        return l && br(o, "delete", r, void 0), c;
      },
      clear() {
        const r = Je(this), o = r.size !== 0, i = r.clear();
        return o && br(r, "clear", void 0, void 0), i;
      }
    }), [
      "keys",
      "values",
      "entries",
      Symbol.iterator
    ].forEach((r) => {
      n[r] = sA(r, t, e);
    }), n;
  }
  function My(t, e) {
    const n = rA(t, e);
    return (s, r, o) => r === "__v_isReactive" ? !t : r === "__v_isReadonly" ? t : r === "__v_raw" ? s : Reflect.get(tt(n, r) && r in s ? n : s, r, o);
  }
  const oA = {
    get: My(false, false)
  }, iA = {
    get: My(false, true)
  }, aA = {
    get: My(true, false)
  };
  const m$ = /* @__PURE__ */ new WeakMap(), g$ = /* @__PURE__ */ new WeakMap(), y$ = /* @__PURE__ */ new WeakMap(), lA = /* @__PURE__ */ new WeakMap();
  function cA(t) {
    switch (t) {
      case "Object":
      case "Array":
        return 1;
      case "Map":
      case "Set":
      case "WeakMap":
      case "WeakSet":
        return 2;
      default:
        return 0;
    }
  }
  function uA(t) {
    return t.__v_skip || !Object.isExtensible(t) ? 0 : cA(DR(t));
  }
  Dc = function(t) {
    return Zo(t) ? t : By(t, false, eA, oA, m$);
  };
  function b$(t) {
    return By(t, false, nA, iA, g$);
  }
  function x$(t) {
    return By(t, true, tA, aA, y$);
  }
  function By(t, e, n, s, r) {
    if (!ct(t) || t.__v_raw && !(e && t.__v_isReactive)) return t;
    const o = r.get(t);
    if (o) return o;
    const i = uA(t);
    if (i === 0) return t;
    const a = new Proxy(t, i === 2 ? s : n);
    return r.set(t, a), a;
  }
  function Jr(t) {
    return Zo(t) ? Jr(t.__v_raw) : !!(t && t.__v_isReactive);
  }
  function Zo(t) {
    return !!(t && t.__v_isReadonly);
  }
  function ms(t) {
    return !!(t && t.__v_isShallow);
  }
  function Vy(t) {
    return t ? !!t.__v_raw : false;
  }
  function Je(t) {
    const e = t && t.__v_raw;
    return e ? Je(e) : t;
  }
  Wy = function(t) {
    return !tt(t, "__v_skip") && Object.isExtensible(t) && ZS(t, "__v_skip", true), t;
  };
  const dn = (t) => ct(t) ? Dc(t) : t, vg = (t) => ct(t) ? x$(t) : t;
  wt = function(t) {
    return t ? t.__v_isRef === true : false;
  };
  ap = function(t) {
    return w$(t, false);
  };
  hA = function(t) {
    return w$(t, true);
  };
  function w$(t, e) {
    return wt(t) ? t : new dA(t, e);
  }
  class dA {
    constructor(e, n) {
      this.dep = new zy(), this.__v_isRef = true, this.__v_isShallow = false, this._rawValue = n ? e : Je(e), this._value = n ? e : dn(e), this.__v_isShallow = n;
    }
    get value() {
      return this.dep.track(), this._value;
    }
    set value(e) {
      const n = this._rawValue, s = this.__v_isShallow || ms(e) || Zo(e);
      e = s ? e : Je(e), Zr(e, n) && (this._rawValue = e, this._value = s ? e : dn(e), this.dep.trigger());
    }
  }
  Vi = function(t) {
    return wt(t) ? t.value : t;
  };
  const pA = {
    get: (t, e, n) => e === "__v_raw" ? t : Vi(Reflect.get(t, e, n)),
    set: (t, e, n, s) => {
      const r = t[e];
      return wt(r) && !wt(n) ? (r.value = n, true) : Reflect.set(t, e, n, s);
    }
  };
  function v$(t) {
    return Jr(t) ? t : new Proxy(t, pA);
  }
  fA = function(t) {
    const e = De(t) ? new Array(t.length) : {};
    for (const n in t) e[n] = S$(t, n);
    return e;
  };
  class mA {
    constructor(e, n, s) {
      this._object = e, this._key = n, this._defaultValue = s, this.__v_isRef = true, this._value = void 0;
    }
    get value() {
      const e = this._object[this._key];
      return this._value = e === void 0 ? this._defaultValue : e;
    }
    set value(e) {
      this._object[this._key] = e;
    }
    get dep() {
      return KR(Je(this._object), this._key);
    }
  }
  class gA {
    constructor(e) {
      this._getter = e, this.__v_isRef = true, this.__v_isReadonly = true, this._value = void 0;
    }
    get value() {
      return this._value = this._getter();
    }
  }
  nle = function(t, e, n) {
    return wt(t) ? t : Le(t) ? new gA(t) : ct(t) && arguments.length > 1 ? S$(t, e, n) : ap(t);
  };
  function S$(t, e, n) {
    const s = t[e];
    return wt(s) ? s : new mA(t, e, n);
  }
  class yA {
    constructor(e, n, s) {
      this.fn = e, this.setter = n, this._value = void 0, this.dep = new zy(this), this.__v_isRef = true, this.deps = void 0, this.depsTail = void 0, this.flags = 16, this.globalVersion = rc - 1, this.next = void 0, this.effect = this, this.__v_isReadonly = !n, this.isSSR = s;
    }
    notify() {
      if (this.flags |= 16, !(this.flags & 8) && ht !== this) return i$(this, true), true;
    }
    get value() {
      const e = this.dep.track();
      return c$(this), e && (e.version = this.dep.version), this._value;
    }
    set value(e) {
      this.setter && this.setter(e);
    }
  }
  function bA(t, e, n = false) {
    let s, r;
    return Le(t) ? s = t : (s = t.get, r = t.set), new yA(s, r, n);
  }
  const kh = {}, pd = /* @__PURE__ */ new WeakMap();
  let Do;
  function xA(t, e = false, n = Do) {
    if (n) {
      let s = pd.get(n);
      s || pd.set(n, s = []), s.push(t);
    }
  }
  function wA(t, e, n = at) {
    const { immediate: s, deep: r, once: o, scheduler: i, augmentJob: a, call: l } = n, c = (x) => r ? x : ms(x) || r === false || r === 0 ? xr(x, 1) : xr(x);
    let u, h, d, p, f = false, m = false;
    if (wt(t) ? (h = () => t.value, f = ms(t)) : Jr(t) ? (h = () => c(t), f = true) : De(t) ? (m = true, f = t.some((x) => Jr(x) || ms(x)), h = () => t.map((x) => {
      if (wt(x)) return x.value;
      if (Jr(x)) return c(x);
      if (Le(x)) return l ? l(x, 2) : x();
    })) : Le(t) ? e ? h = l ? () => l(t, 2) : t : h = () => {
      if (d) {
        yo();
        try {
          d();
        } finally {
          bo();
        }
      }
      const x = Do;
      Do = u;
      try {
        return l ? l(t, 3, [
          p
        ]) : t(p);
      } finally {
        Do = x;
      }
    } : h = Zs, e && r) {
      const x = h, S = r === true ? 1 / 0 : r;
      h = () => xr(x(), S);
    }
    const g = s$(), y = () => {
      u.stop(), g && g.active && Dy(g.effects, u);
    };
    if (o && e) {
      const x = e;
      e = (...S) => {
        x(...S), y();
      };
    }
    let b = m ? new Array(t.length).fill(kh) : kh;
    const w = (x) => {
      if (!(!(u.flags & 1) || !u.dirty && !x)) if (e) {
        const S = u.run();
        if (r || f || (m ? S.some((I, E) => Zr(I, b[E])) : Zr(S, b))) {
          d && d();
          const I = Do;
          Do = u;
          try {
            const E = [
              S,
              b === kh ? void 0 : m && b[0] === kh ? [] : b,
              p
            ];
            l ? l(e, 3, E) : e(...E), b = S;
          } finally {
            Do = I;
          }
        }
      } else u.run();
    };
    return a && a(w), u = new r$(h), u.scheduler = i ? () => i(w, false) : w, p = (x) => xA(x, false, u), d = u.onStop = () => {
      const x = pd.get(u);
      if (x) {
        if (l) l(x, 4);
        else for (const S of x) S();
        pd.delete(u);
      }
    }, e ? s ? w(true) : b = u.run() : i ? i(w.bind(null, true), true) : u.run(), y.pause = u.pause.bind(u), y.resume = u.resume.bind(u), y.stop = y, y;
  }
  function xr(t, e = 1 / 0, n) {
    if (e <= 0 || !ct(t) || t.__v_skip || (n = n || /* @__PURE__ */ new Set(), n.has(t))) return t;
    if (n.add(t), e--, wt(t)) xr(t.value, e, n);
    else if (De(t)) for (let s = 0; s < t.length; s++) xr(t[s], e, n);
    else if (Qd(t) || Bi(t)) t.forEach((s) => {
      xr(s, e, n);
    });
    else if (YS(t)) {
      for (const s in t) xr(t[s], e, n);
      for (const s of Object.getOwnPropertySymbols(t)) Object.prototype.propertyIsEnumerable.call(t, s) && xr(t[s], e, n);
    }
    return t;
  }
  function Oc(t, e, n, s) {
    try {
      return s ? t(...s) : t();
    } catch (r) {
      lp(r, e, n);
    }
  }
  function rr(t, e, n, s) {
    if (Le(t)) {
      const r = Oc(t, e, n, s);
      return r && KS(r) && r.catch((o) => {
        lp(o, e, n);
      }), r;
    }
    if (De(t)) {
      const r = [];
      for (let o = 0; o < t.length; o++) r.push(rr(t[o], e, n, s));
      return r;
    }
  }
  function lp(t, e, n, s = true) {
    const r = e ? e.vnode : null, { errorHandler: o, throwUnhandledErrorInProduction: i } = e && e.appContext.config || at;
    if (e) {
      let a = e.parent;
      const l = e.proxy, c = `https://vuejs.org/error-reference/#runtime-${n}`;
      for (; a; ) {
        const u = a.ec;
        if (u) {
          for (let h = 0; h < u.length; h++) if (u[h](t, l, c) === false) return;
        }
        a = a.parent;
      }
      if (o) {
        yo(), Oc(o, null, 10, [
          t,
          l,
          c
        ]), bo();
        return;
      }
    }
    vA(t, n, r, s, i);
  }
  function vA(t, e, n, s = true, r = false) {
    if (r) throw t;
    console.error(t);
  }
  const Nn = [];
  let Gs = -1;
  const Wi = [];
  let Ur = null, Fi = 0;
  const $$ = Promise.resolve();
  let fd = null;
  cp = function(t) {
    const e = fd || $$;
    return t ? e.then(this ? t.bind(this) : t) : e;
  };
  function SA(t) {
    let e = Gs + 1, n = Nn.length;
    for (; e < n; ) {
      const s = e + n >>> 1, r = Nn[s], o = ic(r);
      o < t || o === t && r.flags & 2 ? e = s + 1 : n = s;
    }
    return e;
  }
  function Uy(t) {
    if (!(t.flags & 1)) {
      const e = ic(t), n = Nn[Nn.length - 1];
      !n || !(t.flags & 2) && e >= ic(n) ? Nn.push(t) : Nn.splice(SA(e), 0, t), t.flags |= 1, C$();
    }
  }
  function C$() {
    fd || (fd = $$.then(N$));
  }
  function $A(t) {
    De(t) ? Wi.push(...t) : Ur && t.id === -1 ? Ur.splice(Fi + 1, 0, t) : t.flags & 1 || (Wi.push(t), t.flags |= 1), C$();
  }
  function u1(t, e, n = Gs + 1) {
    for (; n < Nn.length; n++) {
      const s = Nn[n];
      if (s && s.flags & 2) {
        if (t && s.id !== t.uid) continue;
        Nn.splice(n, 1), n--, s.flags & 4 && (s.flags &= -2), s(), s.flags & 4 || (s.flags &= -2);
      }
    }
  }
  function I$(t) {
    if (Wi.length) {
      const e = [
        ...new Set(Wi)
      ].sort((n, s) => ic(n) - ic(s));
      if (Wi.length = 0, Ur) {
        Ur.push(...e);
        return;
      }
      for (Ur = e, Fi = 0; Fi < Ur.length; Fi++) {
        const n = Ur[Fi];
        n.flags & 4 && (n.flags &= -2), n.flags & 8 || n(), n.flags &= -2;
      }
      Ur = null, Fi = 0;
    }
  }
  const ic = (t) => t.id == null ? t.flags & 2 ? -1 : 1 / 0 : t.id;
  function N$(t) {
    try {
      for (Gs = 0; Gs < Nn.length; Gs++) {
        const e = Nn[Gs];
        e && !(e.flags & 8) && (e.flags & 4 && (e.flags &= -2), Oc(e, e.i, e.i ? 15 : 14), e.flags & 4 || (e.flags &= -2));
      }
    } finally {
      for (; Gs < Nn.length; Gs++) {
        const e = Nn[Gs];
        e && (e.flags &= -2);
      }
      Gs = -1, Nn.length = 0, I$(), fd = null, (Nn.length || Wi.length) && N$();
    }
  }
  let Bt = null, k$ = null;
  function md(t) {
    const e = Bt;
    return Bt = t, k$ = t && t.type.__scopeId || null, e;
  }
  CA = function(t, e = Bt, n) {
    if (!e || t._n) return t;
    const s = (...r) => {
      s._d && $1(-1);
      const o = md(e);
      let i;
      try {
        i = t(...r);
      } finally {
        md(o), s._d && $1(1);
      }
      return i;
    };
    return s._n = true, s._c = true, s._d = true, s;
  };
  sle = function(t, e) {
    if (Bt === null) return t;
    const n = pp(Bt), s = t.dirs || (t.dirs = []);
    for (let r = 0; r < e.length; r++) {
      let [o, i, a, l = at] = e[r];
      o && (Le(o) && (o = {
        mounted: o,
        updated: o
      }), o.deep && xr(i), s.push({
        dir: o,
        instance: n,
        value: i,
        oldValue: void 0,
        arg: a,
        modifiers: l
      }));
    }
    return t;
  };
  function Eo(t, e, n, s) {
    const r = t.dirs, o = e && e.dirs;
    for (let i = 0; i < r.length; i++) {
      const a = r[i];
      o && (a.oldValue = o[i].value);
      let l = a.dir[s];
      l && (yo(), rr(l, n, 8, [
        t.el,
        a,
        t,
        e
      ]), bo());
    }
  }
  const T$ = Symbol("_vte"), IA = (t) => t.__isTeleport, Yl = (t) => t && (t.disabled || t.disabled === ""), h1 = (t) => t && (t.defer || t.defer === ""), d1 = (t) => typeof SVGElement < "u" && t instanceof SVGElement, p1 = (t) => typeof MathMLElement == "function" && t instanceof MathMLElement, Sg = (t, e) => {
    const n = t && t.to;
    return St(n) ? e ? e(n) : null : n;
  }, E$ = {
    name: "Teleport",
    __isTeleport: true,
    process(t, e, n, s, r, o, i, a, l, c) {
      const { mc: u, pc: h, pbc: d, o: { insert: p, querySelector: f, createText: m, createComment: g } } = c, y = Yl(e.props);
      let { shapeFlag: b, children: w, dynamicChildren: x } = e;
      if (t == null) {
        const S = e.el = m(""), I = e.anchor = m("");
        p(S, n, s), p(I, n, s);
        const E = (N, k) => {
          b & 16 && (r && r.isCE && (r.ce._teleportTarget = N), u(w, N, k, r, o, i, a, l));
        }, R = () => {
          const N = e.target = Sg(e.props, f), k = R$(N, e, m, p);
          N && (i !== "svg" && d1(N) ? i = "svg" : i !== "mathml" && p1(N) && (i = "mathml"), y || (E(N, k), Hh(e, false)));
        };
        y && (E(n, I), Hh(e, true)), h1(e.props) ? Cn(() => {
          R(), e.el.__isMounted = true;
        }, o) : R();
      } else {
        if (h1(e.props) && !t.el.__isMounted) {
          Cn(() => {
            E$.process(t, e, n, s, r, o, i, a, l, c), delete t.el.__isMounted;
          }, o);
          return;
        }
        e.el = t.el, e.targetStart = t.targetStart;
        const S = e.anchor = t.anchor, I = e.target = t.target, E = e.targetAnchor = t.targetAnchor, R = Yl(t.props), N = R ? n : I, k = R ? S : E;
        if (i === "svg" || d1(I) ? i = "svg" : (i === "mathml" || p1(I)) && (i = "mathml"), x ? (d(t.dynamicChildren, x, N, r, o, i, a), jy(t, e, true)) : l || h(t, e, N, k, r, o, i, a, false), y) R ? e.props && t.props && e.props.to !== t.props.to && (e.props.to = t.props.to) : Th(e, n, S, c, 1);
        else if ((e.props && e.props.to) !== (t.props && t.props.to)) {
          const $ = e.target = Sg(e.props, f);
          $ && Th(e, $, null, c, 0);
        } else R && Th(e, I, E, c, 1);
        Hh(e, y);
      }
    },
    remove(t, e, n, { um: s, o: { remove: r } }, o) {
      const { shapeFlag: i, children: a, anchor: l, targetStart: c, targetAnchor: u, target: h, props: d } = t;
      if (h && (r(c), r(u)), o && r(l), i & 16) {
        const p = o || !Yl(d);
        for (let f = 0; f < a.length; f++) {
          const m = a[f];
          s(m, e, n, p, !!m.dynamicChildren);
        }
      }
    },
    move: Th,
    hydrate: NA
  };
  function Th(t, e, n, { o: { insert: s }, m: r }, o = 2) {
    o === 0 && s(t.targetAnchor, e, n);
    const { el: i, anchor: a, shapeFlag: l, children: c, props: u } = t, h = o === 2;
    if (h && s(i, e, n), (!h || Yl(u)) && l & 16) for (let d = 0; d < c.length; d++) r(c[d], e, n, 2);
    h && s(a, e, n);
  }
  function NA(t, e, n, s, r, o, { o: { nextSibling: i, parentNode: a, querySelector: l, insert: c, createText: u } }, h) {
    const d = e.target = Sg(e.props, l);
    if (d) {
      const p = Yl(e.props), f = d._lpa || d.firstChild;
      if (e.shapeFlag & 16) if (p) e.anchor = h(i(t), e, a(t), n, s, r, o), e.targetStart = f, e.targetAnchor = f && i(f);
      else {
        e.anchor = i(t);
        let m = f;
        for (; m; ) {
          if (m && m.nodeType === 8) {
            if (m.data === "teleport start anchor") e.targetStart = m;
            else if (m.data === "teleport anchor") {
              e.targetAnchor = m, d._lpa = e.targetAnchor && i(e.targetAnchor);
              break;
            }
          }
          m = i(m);
        }
        e.targetAnchor || R$(d, e, u, c), h(f && i(f), e, d, n, s, r, o);
      }
      Hh(e, p);
    }
    return e.anchor && i(e.anchor);
  }
  rle = E$;
  function Hh(t, e) {
    const n = t.ctx;
    if (n && n.ut) {
      let s, r;
      for (e ? (s = t.el, r = t.anchor) : (s = t.targetStart, r = t.targetAnchor); s && s !== r; ) s.nodeType === 1 && s.setAttribute("data-v-owner", n.uid), s = s.nextSibling;
      n.ut();
    }
  }
  function R$(t, e, n, s) {
    const r = e.targetStart = n(""), o = e.targetAnchor = n("");
    return r[T$] = o, t && (s(r, t), s(o, t)), o;
  }
  function Gy(t, e) {
    t.shapeFlag & 6 && t.component ? (t.transition = e, Gy(t.component.subTree, e)) : t.shapeFlag & 128 ? (t.ssContent.transition = e.clone(t.ssContent), t.ssFallback.transition = e.clone(t.ssFallback)) : t.transition = e;
  }
  A$ = function(t, e) {
    return Le(t) ? gn({
      name: t.name
    }, e, {
      setup: t
    }) : t;
  };
  ole = function() {
    const t = k_();
    return t ? (t.appContext.config.idPrefix || "v") + "-" + t.ids[0] + t.ids[1]++ : "";
  };
  function _$(t) {
    t.ids = [
      t.ids[0] + t.ids[2]++ + "-",
      0,
      0
    ];
  }
  function gd(t, e, n, s, r = false) {
    if (De(t)) {
      t.forEach((f, m) => gd(f, e && (De(e) ? e[m] : e), n, s, r));
      return;
    }
    if (Ui(s) && !r) {
      s.shapeFlag & 512 && s.type.__asyncResolved && s.component.subTree.component && gd(t, e, n, s.component.subTree);
      return;
    }
    const o = s.shapeFlag & 4 ? pp(s.component) : s.el, i = r ? null : o, { i: a, r: l } = t, c = e && e.r, u = a.refs === at ? a.refs = {} : a.refs, h = a.setupState, d = Je(h), p = h === at ? () => false : (f) => tt(d, f);
    if (c != null && c !== l && (St(c) ? (u[c] = null, p(c) && (h[c] = null)) : wt(c) && (c.value = null)), Le(l)) Oc(l, a, 12, [
      i,
      u
    ]);
    else {
      const f = St(l), m = wt(l);
      if (f || m) {
        const g = () => {
          if (t.f) {
            const y = f ? p(l) ? h[l] : u[l] : l.value;
            r ? De(y) && Dy(y, o) : De(y) ? y.includes(o) || y.push(o) : f ? (u[l] = [
              o
            ], p(l) && (h[l] = u[l])) : (l.value = [
              o
            ], t.k && (u[t.k] = l.value));
          } else f ? (u[l] = i, p(l) && (h[l] = i)) : m && (l.value = i, t.k && (u[t.k] = i));
        };
        i ? (g.id = -1, Cn(g, n)) : g();
      }
    }
  }
  np().requestIdleCallback;
  np().cancelIdleCallback;
  const Ui = (t) => !!t.type.__asyncLoader, D$ = (t) => t.type.__isKeepAlive;
  function kA(t, e) {
    O$(t, "a", e);
  }
  function TA(t, e) {
    O$(t, "da", e);
  }
  function O$(t, e, n = Zt) {
    const s = t.__wdc || (t.__wdc = () => {
      let r = n;
      for (; r; ) {
        if (r.isDeactivated) return;
        r = r.parent;
      }
      return t();
    });
    if (up(e, s, n), n) {
      let r = n.parent;
      for (; r && r.parent; ) D$(r.parent.vnode) && EA(s, e, n, r), r = r.parent;
    }
  }
  function EA(t, e, n, s) {
    const r = up(e, t, s, true);
    F$(() => {
      Dy(s[e], r);
    }, n);
  }
  function up(t, e, n = Zt, s = false) {
    if (n) {
      const r = n[t] || (n[t] = []), o = e.__weh || (e.__weh = (...i) => {
        yo();
        const a = Fc(n), l = rr(e, n, t, i);
        return a(), bo(), l;
      });
      return s ? r.unshift(o) : r.push(o), o;
    }
  }
  let Rr, RA, _A, DA, FA, LA, PA;
  Rr = (t) => (e, n = Zt) => {
    (!cc || t === "sp") && up(t, (...s) => e(...s), n);
  };
  RA = Rr("bm");
  AA = Rr("m");
  _A = Rr("bu");
  DA = Rr("u");
  OA = Rr("bum");
  F$ = Rr("um");
  FA = Rr("sp");
  LA = Rr("rtg");
  PA = Rr("rtc");
  function zA(t, e = Zt) {
    up("ec", t, e);
  }
  const MA = "components";
  function BA(t, e) {
    return WA(MA, t, true, e) || t;
  }
  const VA = Symbol.for("v-ndc");
  function WA(t, e, n = true, s = false) {
    const r = Bt || Zt;
    if (r) {
      const o = r.type;
      {
        const a = __(o, false);
        if (a && (a === e || a === gs(e) || a === tp(gs(e)))) return o;
      }
      const i = f1(r[t] || o[t], e) || f1(r.appContext[t], e);
      return !i && s ? o : i;
    }
  }
  function f1(t, e) {
    return t && (t[e] || t[gs(e)] || t[tp(gs(e))]);
  }
  ile = function(t, e, n, s) {
    let r;
    const o = n, i = De(t);
    if (i || St(t)) {
      const a = i && Jr(t);
      let l = false;
      a && (l = !ms(t), t = ip(t)), r = new Array(t.length);
      for (let c = 0, u = t.length; c < u; c++) r[c] = e(l ? dn(t[c]) : t[c], c, void 0, o);
    } else if (typeof t == "number") {
      r = new Array(t);
      for (let a = 0; a < t; a++) r[a] = e(a + 1, a, void 0, o);
    } else if (ct(t)) if (t[Symbol.iterator]) r = Array.from(t, (a, l) => e(a, l, void 0, o));
    else {
      const a = Object.keys(t);
      r = new Array(a.length);
      for (let l = 0, c = a.length; l < c; l++) {
        const u = a[l];
        r[l] = e(t[u], u, l, o);
      }
    }
    else r = [];
    return r;
  };
  ale = function(t, e, n = {}, s, r) {
    if (Bt.ce || Bt.parent && Ui(Bt.parent) && Bt.parent.ce) return bd(), kg(hs, null, [
      Tn("slot", n, s)
    ], 64);
    let o = t[e];
    o && o._c && (o._d = false), bd();
    const i = o && L$(o(n)), a = n.key || i && i.key, l = kg(hs, {
      key: (a && !As(a) ? a : `_${e}`) + ""
    }, i || [], i && t._ === 1 ? 64 : -2);
    return l.scopeId && (l.slotScopeIds = [
      l.scopeId + "-s"
    ]), o && o._c && (o._d = true), l;
  };
  function L$(t) {
    return t.some((e) => lc(e) ? !(e.type === so || e.type === hs && !L$(e.children)) : true) ? t : null;
  }
  const $g = (t) => t ? nC(t) ? pp(t) : $g(t.parent) : null, Zl = gn(/* @__PURE__ */ Object.create(null), {
    $: (t) => t,
    $el: (t) => t.vnode.el,
    $data: (t) => t.data,
    $props: (t) => t.props,
    $attrs: (t) => t.attrs,
    $slots: (t) => t.slots,
    $refs: (t) => t.refs,
    $parent: (t) => $g(t.parent),
    $root: (t) => $g(t.root),
    $host: (t) => t.ce,
    $emit: (t) => t.emit,
    $options: (t) => z$(t),
    $forceUpdate: (t) => t.f || (t.f = () => {
      Uy(t.update);
    }),
    $nextTick: (t) => t.n || (t.n = cp.bind(t.proxy)),
    $watch: (t) => u_.bind(t)
  }), jm = (t, e) => t !== at && !t.__isScriptSetup && tt(t, e), UA = {
    get({ _: t }, e) {
      if (e === "__v_skip") return true;
      const { ctx: n, setupState: s, data: r, props: o, accessCache: i, type: a, appContext: l } = t;
      let c;
      if (e[0] !== "$") {
        const p = i[e];
        if (p !== void 0) switch (p) {
          case 1:
            return s[e];
          case 2:
            return r[e];
          case 4:
            return n[e];
          case 3:
            return o[e];
        }
        else {
          if (jm(s, e)) return i[e] = 1, s[e];
          if (r !== at && tt(r, e)) return i[e] = 2, r[e];
          if ((c = t.propsOptions[0]) && tt(c, e)) return i[e] = 3, o[e];
          if (n !== at && tt(n, e)) return i[e] = 4, n[e];
          Cg && (i[e] = 0);
        }
      }
      const u = Zl[e];
      let h, d;
      if (u) return e === "$attrs" && hn(t.attrs, "get", ""), u(t);
      if ((h = a.__cssModules) && (h = h[e])) return h;
      if (n !== at && tt(n, e)) return i[e] = 4, n[e];
      if (d = l.config.globalProperties, tt(d, e)) return d[e];
    },
    set({ _: t }, e, n) {
      const { data: s, setupState: r, ctx: o } = t;
      return jm(r, e) ? (r[e] = n, true) : s !== at && tt(s, e) ? (s[e] = n, true) : tt(t.props, e) || e[0] === "$" && e.slice(1) in t ? false : (o[e] = n, true);
    },
    has({ _: { data: t, setupState: e, accessCache: n, ctx: s, appContext: r, propsOptions: o } }, i) {
      let a;
      return !!n[i] || t !== at && tt(t, i) || jm(e, i) || (a = o[0]) && tt(a, i) || tt(s, i) || tt(Zl, i) || tt(r.config.globalProperties, i);
    },
    defineProperty(t, e, n) {
      return n.get != null ? t._.accessCache[e] = 0 : tt(n, "value") && this.set(t, e, n.value, null), Reflect.defineProperty(t, e, n);
    }
  };
  function m1(t) {
    return De(t) ? t.reduce((e, n) => (e[n] = null, e), {}) : t;
  }
  let Cg = true;
  function GA(t) {
    const e = z$(t), n = t.proxy, s = t.ctx;
    Cg = false, e.beforeCreate && g1(e.beforeCreate, t, "bc");
    const { data: r, computed: o, methods: i, watch: a, provide: l, inject: c, created: u, beforeMount: h, mounted: d, beforeUpdate: p, updated: f, activated: m, deactivated: g, beforeDestroy: y, beforeUnmount: b, destroyed: w, unmounted: x, render: S, renderTracked: I, renderTriggered: E, errorCaptured: R, serverPrefetch: N, expose: k, inheritAttrs: $, components: F, directives: M, filters: U } = e;
    if (c && HA(c, s, null), i) for (const H in i) {
      const G = i[H];
      Le(G) && (s[H] = G.bind(n));
    }
    if (r) {
      const H = r.call(n, n);
      ct(H) && (t.data = Dc(H));
    }
    if (Cg = true, o) for (const H in o) {
      const G = o[H], Y = Le(G) ? G.bind(n, n) : Le(G.get) ? G.get.bind(n, n) : Zs, te = !Le(G) && Le(G.set) ? G.set.bind(n) : Zs, se = ds({
        get: Y,
        set: te
      });
      Object.defineProperty(s, H, {
        enumerable: true,
        configurable: true,
        get: () => se.value,
        set: (re) => se.value = re
      });
    }
    if (a) for (const H in a) P$(a[H], s, n, H);
    if (l) {
      const H = Le(l) ? l.call(n) : l;
      Reflect.ownKeys(H).forEach((G) => {
        jh(G, H[G]);
      });
    }
    u && g1(u, t, "c");
    function V(H, G) {
      De(G) ? G.forEach((Y) => H(Y.bind(n))) : G && H(G.bind(n));
    }
    if (V(RA, h), V(AA, d), V(_A, p), V(DA, f), V(kA, m), V(TA, g), V(zA, R), V(PA, I), V(LA, E), V(OA, b), V(F$, x), V(FA, N), De(k)) if (k.length) {
      const H = t.exposed || (t.exposed = {});
      k.forEach((G) => {
        Object.defineProperty(H, G, {
          get: () => n[G],
          set: (Y) => n[G] = Y
        });
      });
    } else t.exposed || (t.exposed = {});
    S && t.render === Zs && (t.render = S), $ != null && (t.inheritAttrs = $), F && (t.components = F), M && (t.directives = M), N && _$(t);
  }
  function HA(t, e, n = Zs) {
    De(t) && (t = Ig(t));
    for (const s in t) {
      const r = t[s];
      let o;
      ct(r) ? "default" in r ? o = Js(r.from || s, r.default, true) : o = Js(r.from || s) : o = Js(r), wt(o) ? Object.defineProperty(e, s, {
        enumerable: true,
        configurable: true,
        get: () => o.value,
        set: (i) => o.value = i
      }) : e[s] = o;
    }
  }
  function g1(t, e, n) {
    rr(De(t) ? t.map((s) => s.bind(e.proxy)) : t.bind(e.proxy), e, n);
  }
  function P$(t, e, n, s) {
    let r = s.includes(".") ? Y$(n, s) : () => n[s];
    if (St(t)) {
      const o = e[t];
      Le(o) && Jl(r, o);
    } else if (Le(t)) Jl(r, t.bind(n));
    else if (ct(t)) if (De(t)) t.forEach((o) => P$(o, e, n, s));
    else {
      const o = Le(t.handler) ? t.handler.bind(n) : e[t.handler];
      Le(o) && Jl(r, o, t);
    }
  }
  function z$(t) {
    const e = t.type, { mixins: n, extends: s } = e, { mixins: r, optionsCache: o, config: { optionMergeStrategies: i } } = t.appContext, a = o.get(e);
    let l;
    return a ? l = a : !r.length && !n && !s ? l = e : (l = {}, r.length && r.forEach((c) => yd(l, c, i, true)), yd(l, e, i)), ct(e) && o.set(e, l), l;
  }
  function yd(t, e, n, s = false) {
    const { mixins: r, extends: o } = e;
    o && yd(t, o, n, true), r && r.forEach((i) => yd(t, i, n, true));
    for (const i in e) if (!(s && i === "expose")) {
      const a = jA[i] || n && n[i];
      t[i] = a ? a(t[i], e[i]) : e[i];
    }
    return t;
  }
  const jA = {
    data: y1,
    props: b1,
    emits: b1,
    methods: Pl,
    computed: Pl,
    beforeCreate: $n,
    created: $n,
    beforeMount: $n,
    mounted: $n,
    beforeUpdate: $n,
    updated: $n,
    beforeDestroy: $n,
    beforeUnmount: $n,
    destroyed: $n,
    unmounted: $n,
    activated: $n,
    deactivated: $n,
    errorCaptured: $n,
    serverPrefetch: $n,
    components: Pl,
    directives: Pl,
    watch: KA,
    provide: y1,
    inject: qA
  };
  function y1(t, e) {
    return e ? t ? function() {
      return gn(Le(t) ? t.call(this, this) : t, Le(e) ? e.call(this, this) : e);
    } : e : t;
  }
  function qA(t, e) {
    return Pl(Ig(t), Ig(e));
  }
  function Ig(t) {
    if (De(t)) {
      const e = {};
      for (let n = 0; n < t.length; n++) e[t[n]] = t[n];
      return e;
    }
    return t;
  }
  function $n(t, e) {
    return t ? [
      ...new Set([].concat(t, e))
    ] : e;
  }
  function Pl(t, e) {
    return t ? gn(/* @__PURE__ */ Object.create(null), t, e) : e;
  }
  function b1(t, e) {
    return t ? De(t) && De(e) ? [
      .../* @__PURE__ */ new Set([
        ...t,
        ...e
      ])
    ] : gn(/* @__PURE__ */ Object.create(null), m1(t), m1(e ?? {})) : e;
  }
  function KA(t, e) {
    if (!t) return e;
    if (!e) return t;
    const n = gn(/* @__PURE__ */ Object.create(null), t);
    for (const s in e) n[s] = $n(t[s], e[s]);
    return n;
  }
  function M$() {
    return {
      app: null,
      config: {
        isNativeTag: AR,
        performance: false,
        globalProperties: {},
        optionMergeStrategies: {},
        errorHandler: void 0,
        warnHandler: void 0,
        compilerOptions: {}
      },
      mixins: [],
      components: {},
      directives: {},
      provides: /* @__PURE__ */ Object.create(null),
      optionsCache: /* @__PURE__ */ new WeakMap(),
      propsCache: /* @__PURE__ */ new WeakMap(),
      emitsCache: /* @__PURE__ */ new WeakMap()
    };
  }
  let XA = 0;
  function YA(t, e) {
    return function(s, r = null) {
      Le(s) || (s = gn({}, s)), r != null && !ct(r) && (r = null);
      const o = M$(), i = /* @__PURE__ */ new WeakSet(), a = [];
      let l = false;
      const c = o.app = {
        _uid: XA++,
        _component: s,
        _props: r,
        _container: null,
        _context: o,
        _instance: null,
        version: O_,
        get config() {
          return o.config;
        },
        set config(u) {
        },
        use(u, ...h) {
          return i.has(u) || (u && Le(u.install) ? (i.add(u), u.install(c, ...h)) : Le(u) && (i.add(u), u(c, ...h))), c;
        },
        mixin(u) {
          return o.mixins.includes(u) || o.mixins.push(u), c;
        },
        component(u, h) {
          return h ? (o.components[u] = h, c) : o.components[u];
        },
        directive(u, h) {
          return h ? (o.directives[u] = h, c) : o.directives[u];
        },
        mount(u, h, d) {
          if (!l) {
            const p = c._ceVNode || Tn(s, r);
            return p.appContext = o, d === true ? d = "svg" : d === false && (d = void 0), t(p, u, d), l = true, c._container = u, u.__vue_app__ = c, pp(p.component);
          }
        },
        onUnmount(u) {
          a.push(u);
        },
        unmount() {
          l && (rr(a, c._instance, 16), t(null, c._container), delete c._container.__vue_app__);
        },
        provide(u, h) {
          return o.provides[u] = h, c;
        },
        runWithContext(u) {
          const h = Ho;
          Ho = c;
          try {
            return u();
          } finally {
            Ho = h;
          }
        }
      };
      return c;
    };
  }
  let Ho = null;
  jh = function(t, e) {
    if (Zt) {
      let n = Zt.provides;
      const s = Zt.parent && Zt.parent.provides;
      s === n && (n = Zt.provides = Object.create(s)), n[t] = e;
    }
  };
  Js = function(t, e, n = false) {
    const s = Zt || Bt;
    if (s || Ho) {
      const r = Ho ? Ho._context.provides : s ? s.parent == null ? s.vnode.appContext && s.vnode.appContext.provides : s.parent.provides : void 0;
      if (r && t in r) return r[t];
      if (arguments.length > 1) return n && Le(e) ? e.call(s && s.proxy) : e;
    }
  };
  function ZA() {
    return !!(Zt || Bt || Ho);
  }
  const B$ = {}, V$ = () => Object.create(B$), W$ = (t) => Object.getPrototypeOf(t) === B$;
  function JA(t, e, n, s = false) {
    const r = {}, o = V$();
    t.propsDefaults = /* @__PURE__ */ Object.create(null), U$(t, e, r, o);
    for (const i in t.propsOptions[0]) i in r || (r[i] = void 0);
    n ? t.props = s ? r : b$(r) : t.type.props ? t.props = r : t.props = o, t.attrs = o;
  }
  function QA(t, e, n, s) {
    const { props: r, attrs: o, vnode: { patchFlag: i } } = t, a = Je(r), [l] = t.propsOptions;
    let c = false;
    if ((s || i > 0) && !(i & 16)) {
      if (i & 8) {
        const u = t.vnode.dynamicProps;
        for (let h = 0; h < u.length; h++) {
          let d = u[h];
          if (hp(t.emitsOptions, d)) continue;
          const p = e[d];
          if (l) if (tt(o, d)) p !== o[d] && (o[d] = p, c = true);
          else {
            const f = gs(d);
            r[f] = Ng(l, a, f, p, t, false);
          }
          else p !== o[d] && (o[d] = p, c = true);
        }
      }
    } else {
      U$(t, e, r, o) && (c = true);
      let u;
      for (const h in a) (!e || !tt(e, h) && ((u = go(h)) === h || !tt(e, u))) && (l ? n && (n[h] !== void 0 || n[u] !== void 0) && (r[h] = Ng(l, a, h, void 0, t, true)) : delete r[h]);
      if (o !== a) for (const h in o) (!e || !tt(e, h)) && (delete o[h], c = true);
    }
    c && br(t.attrs, "set", "");
  }
  function U$(t, e, n, s) {
    const [r, o] = t.propsOptions;
    let i = false, a;
    if (e) for (let l in e) {
      if (ql(l)) continue;
      const c = e[l];
      let u;
      r && tt(r, u = gs(l)) ? !o || !o.includes(u) ? n[u] = c : (a || (a = {}))[u] = c : hp(t.emitsOptions, l) || (!(l in s) || c !== s[l]) && (s[l] = c, i = true);
    }
    if (o) {
      const l = Je(n), c = a || at;
      for (let u = 0; u < o.length; u++) {
        const h = o[u];
        n[h] = Ng(r, l, h, c[h], t, !tt(c, h));
      }
    }
    return i;
  }
  function Ng(t, e, n, s, r, o) {
    const i = t[n];
    if (i != null) {
      const a = tt(i, "default");
      if (a && s === void 0) {
        const l = i.default;
        if (i.type !== Function && !i.skipFactory && Le(l)) {
          const { propsDefaults: c } = r;
          if (n in c) s = c[n];
          else {
            const u = Fc(r);
            s = c[n] = l.call(null, e), u();
          }
        } else s = l;
        r.ce && r.ce._setProp(n, s);
      }
      i[0] && (o && !a ? s = false : i[1] && (s === "" || s === go(n)) && (s = true));
    }
    return s;
  }
  const e_ = /* @__PURE__ */ new WeakMap();
  function G$(t, e, n = false) {
    const s = n ? e_ : e.propsCache, r = s.get(t);
    if (r) return r;
    const o = t.props, i = {}, a = [];
    let l = false;
    if (!Le(t)) {
      const u = (h) => {
        l = true;
        const [d, p] = G$(h, e, true);
        gn(i, d), p && a.push(...p);
      };
      !n && e.mixins.length && e.mixins.forEach(u), t.extends && u(t.extends), t.mixins && t.mixins.forEach(u);
    }
    if (!o && !l) return ct(t) && s.set(t, Mi), Mi;
    if (De(o)) for (let u = 0; u < o.length; u++) {
      const h = gs(o[u]);
      x1(h) && (i[h] = at);
    }
    else if (o) for (const u in o) {
      const h = gs(u);
      if (x1(h)) {
        const d = o[u], p = i[h] = De(d) || Le(d) ? {
          type: d
        } : gn({}, d), f = p.type;
        let m = false, g = true;
        if (De(f)) for (let y = 0; y < f.length; ++y) {
          const b = f[y], w = Le(b) && b.name;
          if (w === "Boolean") {
            m = true;
            break;
          } else w === "String" && (g = false);
        }
        else m = Le(f) && f.name === "Boolean";
        p[0] = m, p[1] = g, (m || tt(p, "default")) && a.push(h);
      }
    }
    const c = [
      i,
      a
    ];
    return ct(t) && s.set(t, c), c;
  }
  function x1(t) {
    return t[0] !== "$" && !ql(t);
  }
  const H$ = (t) => t[0] === "_" || t === "$stable", Hy = (t) => De(t) ? t.map(Hs) : [
    Hs(t)
  ], t_ = (t, e, n) => {
    if (e._n) return e;
    const s = CA((...r) => Hy(e(...r)), n);
    return s._c = false, s;
  }, j$ = (t, e, n) => {
    const s = t._ctx;
    for (const r in t) {
      if (H$(r)) continue;
      const o = t[r];
      if (Le(o)) e[r] = t_(r, o, s);
      else if (o != null) {
        const i = Hy(o);
        e[r] = () => i;
      }
    }
  }, q$ = (t, e) => {
    const n = Hy(e);
    t.slots.default = () => n;
  }, K$ = (t, e, n) => {
    for (const s in e) (n || s !== "_") && (t[s] = e[s]);
  }, n_ = (t, e, n) => {
    const s = t.slots = V$();
    if (t.vnode.shapeFlag & 32) {
      const r = e._;
      r ? (K$(s, e, n), n && ZS(s, "_", r, true)) : j$(e, s);
    } else e && q$(t, e);
  }, s_ = (t, e, n) => {
    const { vnode: s, slots: r } = t;
    let o = true, i = at;
    if (s.shapeFlag & 32) {
      const a = e._;
      a ? n && a === 1 ? o = false : K$(r, e, n) : (o = !e.$stable, j$(e, r)), i = e;
    } else e && (q$(t, e), i = {
      default: 1
    });
    if (o) for (const a in r) !H$(a) && i[a] == null && delete r[a];
  }, Cn = y_;
  function r_(t) {
    return o_(t);
  }
  function o_(t, e) {
    const n = np();
    n.__VUE__ = true;
    const { insert: s, remove: r, patchProp: o, createElement: i, createText: a, createComment: l, setText: c, setElementText: u, parentNode: h, nextSibling: d, setScopeId: p = Zs, insertStaticContent: f } = t, m = (A, _, B, Z = null, Q = null, ee = null, he = void 0, me = null, de = !!_.dynamicChildren) => {
      if (A === _) return;
      A && !Rl(A, _) && (Z = K(A), re(A, Q, ee, true), A = null), _.patchFlag === -2 && (de = false, _.dynamicChildren = null);
      const { type: ce, ref: Te, shapeFlag: we } = _;
      switch (ce) {
        case dp:
          g(A, _, B, Z);
          break;
        case so:
          y(A, _, B, Z);
          break;
        case Km:
          A == null && b(_, B, Z, he);
          break;
        case hs:
          F(A, _, B, Z, Q, ee, he, me, de);
          break;
        default:
          we & 1 ? S(A, _, B, Z, Q, ee, he, me, de) : we & 6 ? M(A, _, B, Z, Q, ee, he, me, de) : (we & 64 || we & 128) && ce.process(A, _, B, Z, Q, ee, he, me, de, ue);
      }
      Te != null && Q && gd(Te, A && A.ref, ee, _ || A, !_);
    }, g = (A, _, B, Z) => {
      if (A == null) s(_.el = a(_.children), B, Z);
      else {
        const Q = _.el = A.el;
        _.children !== A.children && c(Q, _.children);
      }
    }, y = (A, _, B, Z) => {
      A == null ? s(_.el = l(_.children || ""), B, Z) : _.el = A.el;
    }, b = (A, _, B, Z) => {
      [A.el, A.anchor] = f(A.children, _, B, Z, A.el, A.anchor);
    }, w = ({ el: A, anchor: _ }, B, Z) => {
      let Q;
      for (; A && A !== _; ) Q = d(A), s(A, B, Z), A = Q;
      s(_, B, Z);
    }, x = ({ el: A, anchor: _ }) => {
      let B;
      for (; A && A !== _; ) B = d(A), r(A), A = B;
      r(_);
    }, S = (A, _, B, Z, Q, ee, he, me, de) => {
      _.type === "svg" ? he = "svg" : _.type === "math" && (he = "mathml"), A == null ? I(_, B, Z, Q, ee, he, me, de) : N(A, _, Q, ee, he, me, de);
    }, I = (A, _, B, Z, Q, ee, he, me) => {
      let de, ce;
      const { props: Te, shapeFlag: we, transition: Ie, dirs: Ae } = A;
      if (de = A.el = i(A.type, ee, Te && Te.is, Te), we & 8 ? u(de, A.children) : we & 16 && R(A.children, de, null, Z, Q, qm(A, ee), he, me), Ae && Eo(A, null, Z, "created"), E(de, A, A.scopeId, he, Z), Te) {
        for (const Ke in Te) Ke !== "value" && !ql(Ke) && o(de, Ke, null, Te[Ke], ee, Z);
        "value" in Te && o(de, "value", null, Te.value, ee), (ce = Te.onVnodeBeforeMount) && Us(ce, Z, A);
      }
      Ae && Eo(A, null, Z, "beforeMount");
      const Pe = i_(Q, Ie);
      Pe && Ie.beforeEnter(de), s(de, _, B), ((ce = Te && Te.onVnodeMounted) || Pe || Ae) && Cn(() => {
        ce && Us(ce, Z, A), Pe && Ie.enter(de), Ae && Eo(A, null, Z, "mounted");
      }, Q);
    }, E = (A, _, B, Z, Q) => {
      if (B && p(A, B), Z) for (let ee = 0; ee < Z.length; ee++) p(A, Z[ee]);
      if (Q) {
        let ee = Q.subTree;
        if (_ === ee || J$(ee.type) && (ee.ssContent === _ || ee.ssFallback === _)) {
          const he = Q.vnode;
          E(A, he, he.scopeId, he.slotScopeIds, Q.parent);
        }
      }
    }, R = (A, _, B, Z, Q, ee, he, me, de = 0) => {
      for (let ce = de; ce < A.length; ce++) {
        const Te = A[ce] = me ? Gr(A[ce]) : Hs(A[ce]);
        m(null, Te, _, B, Z, Q, ee, he, me);
      }
    }, N = (A, _, B, Z, Q, ee, he) => {
      const me = _.el = A.el;
      let { patchFlag: de, dynamicChildren: ce, dirs: Te } = _;
      de |= A.patchFlag & 16;
      const we = A.props || at, Ie = _.props || at;
      let Ae;
      if (B && Ro(B, false), (Ae = Ie.onVnodeBeforeUpdate) && Us(Ae, B, _, A), Te && Eo(_, A, B, "beforeUpdate"), B && Ro(B, true), (we.innerHTML && Ie.innerHTML == null || we.textContent && Ie.textContent == null) && u(me, ""), ce ? k(A.dynamicChildren, ce, me, B, Z, qm(_, Q), ee) : he || G(A, _, me, null, B, Z, qm(_, Q), ee, false), de > 0) {
        if (de & 16) $(me, we, Ie, B, Q);
        else if (de & 2 && we.class !== Ie.class && o(me, "class", null, Ie.class, Q), de & 4 && o(me, "style", we.style, Ie.style, Q), de & 8) {
          const Pe = _.dynamicProps;
          for (let Ke = 0; Ke < Pe.length; Ke++) {
            const Ge = Pe[Ke], zt = we[Ge], Kt = Ie[Ge];
            (Kt !== zt || Ge === "value") && o(me, Ge, zt, Kt, Q, B);
          }
        }
        de & 1 && A.children !== _.children && u(me, _.children);
      } else !he && ce == null && $(me, we, Ie, B, Q);
      ((Ae = Ie.onVnodeUpdated) || Te) && Cn(() => {
        Ae && Us(Ae, B, _, A), Te && Eo(_, A, B, "updated");
      }, Z);
    }, k = (A, _, B, Z, Q, ee, he) => {
      for (let me = 0; me < _.length; me++) {
        const de = A[me], ce = _[me], Te = de.el && (de.type === hs || !Rl(de, ce) || de.shapeFlag & 70) ? h(de.el) : B;
        m(de, ce, Te, null, Z, Q, ee, he, true);
      }
    }, $ = (A, _, B, Z, Q) => {
      if (_ !== B) {
        if (_ !== at) for (const ee in _) !ql(ee) && !(ee in B) && o(A, ee, _[ee], null, Q, Z);
        for (const ee in B) {
          if (ql(ee)) continue;
          const he = B[ee], me = _[ee];
          he !== me && ee !== "value" && o(A, ee, me, he, Q, Z);
        }
        "value" in B && o(A, "value", _.value, B.value, Q);
      }
    }, F = (A, _, B, Z, Q, ee, he, me, de) => {
      const ce = _.el = A ? A.el : a(""), Te = _.anchor = A ? A.anchor : a("");
      let { patchFlag: we, dynamicChildren: Ie, slotScopeIds: Ae } = _;
      Ae && (me = me ? me.concat(Ae) : Ae), A == null ? (s(ce, B, Z), s(Te, B, Z), R(_.children || [], B, Te, Q, ee, he, me, de)) : we > 0 && we & 64 && Ie && A.dynamicChildren ? (k(A.dynamicChildren, Ie, B, Q, ee, he, me), (_.key != null || Q && _ === Q.subTree) && jy(A, _, true)) : G(A, _, B, Te, Q, ee, he, me, de);
    }, M = (A, _, B, Z, Q, ee, he, me, de) => {
      _.slotScopeIds = me, A == null ? _.shapeFlag & 512 ? Q.ctx.activate(_, B, Z, he, de) : U(_, B, Z, Q, ee, he, de) : W(A, _, de);
    }, U = (A, _, B, Z, Q, ee, he) => {
      const me = A.component = N_(A, Z, Q);
      if (D$(A) && (me.ctx.renderer = ue), T_(me, false, he), me.asyncDep) {
        if (Q && Q.registerDep(me, V, he), !A.el) {
          const de = me.subTree = Tn(so);
          y(null, de, _, B);
        }
      } else V(me, A, _, B, Q, ee, he);
    }, W = (A, _, B) => {
      const Z = _.component = A.component;
      if (m_(A, _, B)) if (Z.asyncDep && !Z.asyncResolved) {
        H(Z, _, B);
        return;
      } else Z.next = _, Z.update();
      else _.el = A.el, Z.vnode = _;
    }, V = (A, _, B, Z, Q, ee, he) => {
      const me = () => {
        if (A.isMounted) {
          let { next: we, bu: Ie, u: Ae, parent: Pe, vnode: Ke } = A;
          {
            const as = X$(A);
            if (as) {
              we && (we.el = Ke.el, H(A, we, he)), as.asyncDep.then(() => {
                A.isUnmounted || me();
              });
              return;
            }
          }
          let Ge = we, zt;
          Ro(A, false), we ? (we.el = Ke.el, H(A, we, he)) : we = Ke, Ie && Gh(Ie), (zt = we.props && we.props.onVnodeBeforeUpdate) && Us(zt, Pe, we, Ke), Ro(A, true);
          const Kt = v1(A), Pn = A.subTree;
          A.subTree = Kt, m(Pn, Kt, h(Pn.el), K(Pn), A, Q, ee), we.el = Kt.el, Ge === null && g_(A, Kt.el), Ae && Cn(Ae, Q), (zt = we.props && we.props.onVnodeUpdated) && Cn(() => Us(zt, Pe, we, Ke), Q);
        } else {
          let we;
          const { el: Ie, props: Ae } = _, { bm: Pe, m: Ke, parent: Ge, root: zt, type: Kt } = A, Pn = Ui(_);
          Ro(A, false), Pe && Gh(Pe), !Pn && (we = Ae && Ae.onVnodeBeforeMount) && Us(we, Ge, _), Ro(A, true);
          {
            zt.ce && zt.ce._injectChildStyle(Kt);
            const as = A.subTree = v1(A);
            m(null, as, B, Z, A, Q, ee), _.el = as.el;
          }
          if (Ke && Cn(Ke, Q), !Pn && (we = Ae && Ae.onVnodeMounted)) {
            const as = _;
            Cn(() => Us(we, Ge, as), Q);
          }
          (_.shapeFlag & 256 || Ge && Ui(Ge.vnode) && Ge.vnode.shapeFlag & 256) && A.a && Cn(A.a, Q), A.isMounted = true, _ = B = Z = null;
        }
      };
      A.scope.on();
      const de = A.effect = new r$(me);
      A.scope.off();
      const ce = A.update = de.run.bind(de), Te = A.job = de.runIfDirty.bind(de);
      Te.i = A, Te.id = A.uid, de.scheduler = () => Uy(Te), Ro(A, true), ce();
    }, H = (A, _, B) => {
      _.component = A;
      const Z = A.vnode.props;
      A.vnode = _, A.next = null, QA(A, _.props, Z, B), s_(A, _.children, B), yo(), u1(A), bo();
    }, G = (A, _, B, Z, Q, ee, he, me, de = false) => {
      const ce = A && A.children, Te = A ? A.shapeFlag : 0, we = _.children, { patchFlag: Ie, shapeFlag: Ae } = _;
      if (Ie > 0) {
        if (Ie & 128) {
          te(ce, we, B, Z, Q, ee, he, me, de);
          return;
        } else if (Ie & 256) {
          Y(ce, we, B, Z, Q, ee, he, me, de);
          return;
        }
      }
      Ae & 8 ? (Te & 16 && ye(ce, Q, ee), we !== ce && u(B, we)) : Te & 16 ? Ae & 16 ? te(ce, we, B, Z, Q, ee, he, me, de) : ye(ce, Q, ee, true) : (Te & 8 && u(B, ""), Ae & 16 && R(we, B, Z, Q, ee, he, me, de));
    }, Y = (A, _, B, Z, Q, ee, he, me, de) => {
      A = A || Mi, _ = _ || Mi;
      const ce = A.length, Te = _.length, we = Math.min(ce, Te);
      let Ie;
      for (Ie = 0; Ie < we; Ie++) {
        const Ae = _[Ie] = de ? Gr(_[Ie]) : Hs(_[Ie]);
        m(A[Ie], Ae, B, null, Q, ee, he, me, de);
      }
      ce > Te ? ye(A, Q, ee, true, false, we) : R(_, B, Z, Q, ee, he, me, de, we);
    }, te = (A, _, B, Z, Q, ee, he, me, de) => {
      let ce = 0;
      const Te = _.length;
      let we = A.length - 1, Ie = Te - 1;
      for (; ce <= we && ce <= Ie; ) {
        const Ae = A[ce], Pe = _[ce] = de ? Gr(_[ce]) : Hs(_[ce]);
        if (Rl(Ae, Pe)) m(Ae, Pe, B, null, Q, ee, he, me, de);
        else break;
        ce++;
      }
      for (; ce <= we && ce <= Ie; ) {
        const Ae = A[we], Pe = _[Ie] = de ? Gr(_[Ie]) : Hs(_[Ie]);
        if (Rl(Ae, Pe)) m(Ae, Pe, B, null, Q, ee, he, me, de);
        else break;
        we--, Ie--;
      }
      if (ce > we) {
        if (ce <= Ie) {
          const Ae = Ie + 1, Pe = Ae < Te ? _[Ae].el : Z;
          for (; ce <= Ie; ) m(null, _[ce] = de ? Gr(_[ce]) : Hs(_[ce]), B, Pe, Q, ee, he, me, de), ce++;
        }
      } else if (ce > Ie) for (; ce <= we; ) re(A[ce], Q, ee, true), ce++;
      else {
        const Ae = ce, Pe = ce, Ke = /* @__PURE__ */ new Map();
        for (ce = Pe; ce <= Ie; ce++) {
          const Sn = _[ce] = de ? Gr(_[ce]) : Hs(_[ce]);
          Sn.key != null && Ke.set(Sn.key, ce);
        }
        let Ge, zt = 0;
        const Kt = Ie - Pe + 1;
        let Pn = false, as = 0;
        const Vs = new Array(Kt);
        for (ce = 0; ce < Kt; ce++) Vs[ce] = 0;
        for (ce = Ae; ce <= we; ce++) {
          const Sn = A[ce];
          if (zt >= Kt) {
            re(Sn, Q, ee, true);
            continue;
          }
          let Ws;
          if (Sn.key != null) Ws = Ke.get(Sn.key);
          else for (Ge = Pe; Ge <= Ie; Ge++) if (Vs[Ge - Pe] === 0 && Rl(Sn, _[Ge])) {
            Ws = Ge;
            break;
          }
          Ws === void 0 ? re(Sn, Q, ee, true) : (Vs[Ws - Pe] = ce + 1, Ws >= as ? as = Ws : Pn = true, m(Sn, _[Ws], B, null, Q, ee, he, me, de), zt++);
        }
        const Ch = Pn ? a_(Vs) : Mi;
        for (Ge = Ch.length - 1, ce = Kt - 1; ce >= 0; ce--) {
          const Sn = Pe + ce, Ws = _[Sn], o1 = Sn + 1 < Te ? _[Sn + 1].el : Z;
          Vs[ce] === 0 ? m(null, Ws, B, o1, Q, ee, he, me, de) : Pn && (Ge < 0 || ce !== Ch[Ge] ? se(Ws, B, o1, 2) : Ge--);
        }
      }
    }, se = (A, _, B, Z, Q = null) => {
      const { el: ee, type: he, transition: me, children: de, shapeFlag: ce } = A;
      if (ce & 6) {
        se(A.component.subTree, _, B, Z);
        return;
      }
      if (ce & 128) {
        A.suspense.move(_, B, Z);
        return;
      }
      if (ce & 64) {
        he.move(A, _, B, ue);
        return;
      }
      if (he === hs) {
        s(ee, _, B);
        for (let we = 0; we < de.length; we++) se(de[we], _, B, Z);
        s(A.anchor, _, B);
        return;
      }
      if (he === Km) {
        w(A, _, B);
        return;
      }
      if (Z !== 2 && ce & 1 && me) if (Z === 0) me.beforeEnter(ee), s(ee, _, B), Cn(() => me.enter(ee), Q);
      else {
        const { leave: we, delayLeave: Ie, afterLeave: Ae } = me, Pe = () => s(ee, _, B), Ke = () => {
          we(ee, () => {
            Pe(), Ae && Ae();
          });
        };
        Ie ? Ie(ee, Pe, Ke) : Ke();
      }
      else s(ee, _, B);
    }, re = (A, _, B, Z = false, Q = false) => {
      const { type: ee, props: he, ref: me, children: de, dynamicChildren: ce, shapeFlag: Te, patchFlag: we, dirs: Ie, cacheIndex: Ae } = A;
      if (we === -2 && (Q = false), me != null && gd(me, null, B, A, true), Ae != null && (_.renderCache[Ae] = void 0), Te & 256) {
        _.ctx.deactivate(A);
        return;
      }
      const Pe = Te & 1 && Ie, Ke = !Ui(A);
      let Ge;
      if (Ke && (Ge = he && he.onVnodeBeforeUnmount) && Us(Ge, _, A), Te & 6) pe(A.component, B, Z);
      else {
        if (Te & 128) {
          A.suspense.unmount(B, Z);
          return;
        }
        Pe && Eo(A, null, _, "beforeUnmount"), Te & 64 ? A.type.remove(A, _, B, ue, Z) : ce && !ce.hasOnce && (ee !== hs || we > 0 && we & 64) ? ye(ce, _, B, false, true) : (ee === hs && we & 384 || !Q && Te & 16) && ye(de, _, B), Z && ie(A);
      }
      (Ke && (Ge = he && he.onVnodeUnmounted) || Pe) && Cn(() => {
        Ge && Us(Ge, _, A), Pe && Eo(A, null, _, "unmounted");
      }, B);
    }, ie = (A) => {
      const { type: _, el: B, anchor: Z, transition: Q } = A;
      if (_ === hs) {
        fe(B, Z);
        return;
      }
      if (_ === Km) {
        x(A);
        return;
      }
      const ee = () => {
        r(B), Q && !Q.persisted && Q.afterLeave && Q.afterLeave();
      };
      if (A.shapeFlag & 1 && Q && !Q.persisted) {
        const { leave: he, delayLeave: me } = Q, de = () => he(B, ee);
        me ? me(A.el, ee, de) : de();
      } else ee();
    }, fe = (A, _) => {
      let B;
      for (; A !== _; ) B = d(A), r(A), A = B;
      r(_);
    }, pe = (A, _, B) => {
      const { bum: Z, scope: Q, job: ee, subTree: he, um: me, m: de, a: ce } = A;
      w1(de), w1(ce), Z && Gh(Z), Q.stop(), ee && (ee.flags |= 8, re(he, A, _, B)), me && Cn(me, _), Cn(() => {
        A.isUnmounted = true;
      }, _), _ && _.pendingBranch && !_.isUnmounted && A.asyncDep && !A.asyncResolved && A.suspenseId === _.pendingId && (_.deps--, _.deps === 0 && _.resolve());
    }, ye = (A, _, B, Z = false, Q = false, ee = 0) => {
      for (let he = ee; he < A.length; he++) re(A[he], _, B, Z, Q);
    }, K = (A) => {
      if (A.shapeFlag & 6) return K(A.component.subTree);
      if (A.shapeFlag & 128) return A.suspense.next();
      const _ = d(A.anchor || A.el), B = _ && _[T$];
      return B ? d(B) : _;
    };
    let oe = false;
    const ne = (A, _, B) => {
      A == null ? _._vnode && re(_._vnode, null, null, true) : m(_._vnode || null, A, _, null, null, null, B), _._vnode = A, oe || (oe = true, u1(), I$(), oe = false);
    }, ue = {
      p: m,
      um: re,
      m: se,
      r: ie,
      mt: U,
      mc: R,
      pc: G,
      pbc: k,
      n: K,
      o: t
    };
    return {
      render: ne,
      hydrate: void 0,
      createApp: YA(ne)
    };
  }
  function qm({ type: t, props: e }, n) {
    return n === "svg" && t === "foreignObject" || n === "mathml" && t === "annotation-xml" && e && e.encoding && e.encoding.includes("html") ? void 0 : n;
  }
  function Ro({ effect: t, job: e }, n) {
    n ? (t.flags |= 32, e.flags |= 4) : (t.flags &= -33, e.flags &= -5);
  }
  function i_(t, e) {
    return (!t || t && !t.pendingBranch) && e && !e.persisted;
  }
  function jy(t, e, n = false) {
    const s = t.children, r = e.children;
    if (De(s) && De(r)) for (let o = 0; o < s.length; o++) {
      const i = s[o];
      let a = r[o];
      a.shapeFlag & 1 && !a.dynamicChildren && ((a.patchFlag <= 0 || a.patchFlag === 32) && (a = r[o] = Gr(r[o]), a.el = i.el), !n && a.patchFlag !== -2 && jy(i, a)), a.type === dp && (a.el = i.el);
    }
  }
  function a_(t) {
    const e = t.slice(), n = [
      0
    ];
    let s, r, o, i, a;
    const l = t.length;
    for (s = 0; s < l; s++) {
      const c = t[s];
      if (c !== 0) {
        if (r = n[n.length - 1], t[r] < c) {
          e[s] = r, n.push(s);
          continue;
        }
        for (o = 0, i = n.length - 1; o < i; ) a = o + i >> 1, t[n[a]] < c ? o = a + 1 : i = a;
        c < t[n[o]] && (o > 0 && (e[s] = n[o - 1]), n[o] = s);
      }
    }
    for (o = n.length, i = n[o - 1]; o-- > 0; ) n[o] = i, i = e[i];
    return n;
  }
  function X$(t) {
    const e = t.subTree.component;
    if (e) return e.asyncDep && !e.asyncResolved ? e : X$(e);
  }
  function w1(t) {
    if (t) for (let e = 0; e < t.length; e++) t[e].flags |= 8;
  }
  const l_ = Symbol.for("v-scx"), c_ = () => Js(l_);
  lle = function(t, e) {
    return qy(t, null, e);
  };
  Jl = function(t, e, n) {
    return qy(t, e, n);
  };
  function qy(t, e, n = at) {
    const { immediate: s, deep: r, flush: o, once: i } = n, a = gn({}, n), l = e && s || !e && o !== "post";
    let c;
    if (cc) {
      if (o === "sync") {
        const p = c_();
        c = p.__watcherHandles || (p.__watcherHandles = []);
      } else if (!l) {
        const p = () => {
        };
        return p.stop = Zs, p.resume = Zs, p.pause = Zs, p;
      }
    }
    const u = Zt;
    a.call = (p, f, m) => rr(p, u, f, m);
    let h = false;
    o === "post" ? a.scheduler = (p) => {
      Cn(p, u && u.suspense);
    } : o !== "sync" && (h = true, a.scheduler = (p, f) => {
      f ? p() : Uy(p);
    }), a.augmentJob = (p) => {
      e && (p.flags |= 4), h && (p.flags |= 2, u && (p.id = u.uid, p.i = u));
    };
    const d = wA(t, e, a);
    return cc && (c ? c.push(d) : l && d()), d;
  }
  function u_(t, e, n) {
    const s = this.proxy, r = St(t) ? t.includes(".") ? Y$(s, t) : () => s[t] : t.bind(s, s);
    let o;
    Le(e) ? o = e : (o = e.handler, n = e);
    const i = Fc(this), a = qy(r, o.bind(s), n);
    return i(), a;
  }
  function Y$(t, e) {
    const n = e.split(".");
    return () => {
      let s = t;
      for (let r = 0; r < n.length && s; r++) s = s[n[r]];
      return s;
    };
  }
  const h_ = (t, e) => e === "modelValue" || e === "model-value" ? t.modelModifiers : t[`${e}Modifiers`] || t[`${gs(e)}Modifiers`] || t[`${go(e)}Modifiers`];
  function d_(t, e, ...n) {
    if (t.isUnmounted) return;
    const s = t.vnode.props || at;
    let r = n;
    const o = e.startsWith("update:"), i = o && h_(s, e.slice(7));
    i && (i.trim && (r = n.map((u) => St(u) ? u.trim() : u)), i.number && (r = n.map(hd)));
    let a, l = s[a = Vm(e)] || s[a = Vm(gs(e))];
    !l && o && (l = s[a = Vm(go(e))]), l && rr(l, t, 6, r);
    const c = s[a + "Once"];
    if (c) {
      if (!t.emitted) t.emitted = {};
      else if (t.emitted[a]) return;
      t.emitted[a] = true, rr(c, t, 6, r);
    }
  }
  function Z$(t, e, n = false) {
    const s = e.emitsCache, r = s.get(t);
    if (r !== void 0) return r;
    const o = t.emits;
    let i = {}, a = false;
    if (!Le(t)) {
      const l = (c) => {
        const u = Z$(c, e, true);
        u && (a = true, gn(i, u));
      };
      !n && e.mixins.length && e.mixins.forEach(l), t.extends && l(t.extends), t.mixins && t.mixins.forEach(l);
    }
    return !o && !a ? (ct(t) && s.set(t, null), null) : (De(o) ? o.forEach((l) => i[l] = null) : gn(i, o), ct(t) && s.set(t, i), i);
  }
  function hp(t, e) {
    return !t || !Jd(e) ? false : (e = e.slice(2).replace(/Once$/, ""), tt(t, e[0].toLowerCase() + e.slice(1)) || tt(t, go(e)) || tt(t, e));
  }
  function v1(t) {
    const { type: e, vnode: n, proxy: s, withProxy: r, propsOptions: [o], slots: i, attrs: a, emit: l, render: c, renderCache: u, props: h, data: d, setupState: p, ctx: f, inheritAttrs: m } = t, g = md(t);
    let y, b;
    try {
      if (n.shapeFlag & 4) {
        const x = r || s, S = x;
        y = Hs(c.call(S, x, u, h, p, d, f)), b = a;
      } else {
        const x = e;
        y = Hs(x.length > 1 ? x(h, {
          attrs: a,
          slots: i,
          emit: l
        }) : x(h, null)), b = e.props ? a : p_(a);
      }
    } catch (x) {
      Ql.length = 0, lp(x, t, 1), y = Tn(so);
    }
    let w = y;
    if (b && m !== false) {
      const x = Object.keys(b), { shapeFlag: S } = w;
      x.length && S & 7 && (o && x.some(_y) && (b = f_(b, o)), w = Ki(w, b, false, true));
    }
    return n.dirs && (w = Ki(w, null, false, true), w.dirs = w.dirs ? w.dirs.concat(n.dirs) : n.dirs), n.transition && Gy(w, n.transition), y = w, md(g), y;
  }
  const p_ = (t) => {
    let e;
    for (const n in t) (n === "class" || n === "style" || Jd(n)) && ((e || (e = {}))[n] = t[n]);
    return e;
  }, f_ = (t, e) => {
    const n = {};
    for (const s in t) (!_y(s) || !(s.slice(9) in e)) && (n[s] = t[s]);
    return n;
  };
  function m_(t, e, n) {
    const { props: s, children: r, component: o } = t, { props: i, children: a, patchFlag: l } = e, c = o.emitsOptions;
    if (e.dirs || e.transition) return true;
    if (n && l >= 0) {
      if (l & 1024) return true;
      if (l & 16) return s ? S1(s, i, c) : !!i;
      if (l & 8) {
        const u = e.dynamicProps;
        for (let h = 0; h < u.length; h++) {
          const d = u[h];
          if (i[d] !== s[d] && !hp(c, d)) return true;
        }
      }
    } else return (r || a) && (!a || !a.$stable) ? true : s === i ? false : s ? i ? S1(s, i, c) : true : !!i;
    return false;
  }
  function S1(t, e, n) {
    const s = Object.keys(e);
    if (s.length !== Object.keys(t).length) return true;
    for (let r = 0; r < s.length; r++) {
      const o = s[r];
      if (e[o] !== t[o] && !hp(n, o)) return true;
    }
    return false;
  }
  function g_({ vnode: t, parent: e }, n) {
    for (; e; ) {
      const s = e.subTree;
      if (s.suspense && s.suspense.activeBranch === t && (s.el = t.el), s === t) (t = e.vnode).el = n, e = e.parent;
      else break;
    }
  }
  const J$ = (t) => t.__isSuspense;
  function y_(t, e) {
    e && e.pendingBranch ? De(t) ? e.effects.push(...t) : e.effects.push(t) : $A(t);
  }
  let Km, Ql;
  hs = Symbol.for("v-fgt");
  dp = Symbol.for("v-txt");
  so = Symbol.for("v-cmt");
  Km = Symbol.for("v-stc");
  Ql = [];
  let Jn = null;
  bd = function(t = false) {
    Ql.push(Jn = t ? null : []);
  };
  function b_() {
    Ql.pop(), Jn = Ql[Ql.length - 1] || null;
  }
  let ac = 1;
  function $1(t, e = false) {
    ac += t, t < 0 && Jn && e && (Jn.hasOnce = true);
  }
  function Q$(t) {
    return t.dynamicChildren = ac > 0 ? Jn || Mi : null, b_(), ac > 0 && Jn && Jn.push(t), t;
  }
  x_ = function(t, e, n, s, r, o) {
    return Q$(tC(t, e, n, s, r, o, true));
  };
  kg = function(t, e, n, s, r) {
    return Q$(Tn(t, e, n, s, r, true));
  };
  function lc(t) {
    return t ? t.__v_isVNode === true : false;
  }
  function Rl(t, e) {
    return t.type === e.type && t.key === e.key;
  }
  const eC = ({ key: t }) => t ?? null, qh = ({ ref: t, ref_key: e, ref_for: n }) => (typeof t == "number" && (t = "" + t), t != null ? St(t) || wt(t) || Le(t) ? {
    i: Bt,
    r: t,
    k: e,
    f: !!n
  } : t : null);
  tC = function(t, e = null, n = null, s = 0, r = null, o = t === hs ? 0 : 1, i = false, a = false) {
    const l = {
      __v_isVNode: true,
      __v_skip: true,
      type: t,
      props: e,
      key: e && eC(e),
      ref: e && qh(e),
      scopeId: k$,
      slotScopeIds: null,
      children: n,
      component: null,
      suspense: null,
      ssContent: null,
      ssFallback: null,
      dirs: null,
      transition: null,
      el: null,
      anchor: null,
      target: null,
      targetStart: null,
      targetAnchor: null,
      staticCount: 0,
      shapeFlag: o,
      patchFlag: s,
      dynamicProps: r,
      dynamicChildren: null,
      appContext: null,
      ctx: Bt
    };
    return a ? (Ky(l, n), o & 128 && t.normalize(l)) : n && (l.shapeFlag |= St(n) ? 8 : 16), ac > 0 && !i && Jn && (l.patchFlag > 0 || o & 6) && l.patchFlag !== 32 && Jn.push(l), l;
  };
  Tn = w_;
  function w_(t, e = null, n = null, s = 0, r = null, o = false) {
    if ((!t || t === VA) && (t = so), lc(t)) {
      const a = Ki(t, e, true);
      return n && Ky(a, n), ac > 0 && !o && Jn && (a.shapeFlag & 6 ? Jn[Jn.indexOf(t)] = a : Jn.push(a)), a.patchFlag = -2, a;
    }
    if (D_(t) && (t = t.__vccOpts), e) {
      e = v_(e);
      let { class: a, style: l } = e;
      a && !St(a) && (e.class = rp(a)), ct(l) && (Vy(l) && !De(l) && (l = gn({}, l)), e.style = sp(l));
    }
    const i = St(t) ? 1 : J$(t) ? 128 : IA(t) ? 64 : ct(t) ? 4 : Le(t) ? 2 : 0;
    return tC(t, e, n, s, r, i, o, true);
  }
  v_ = function(t) {
    return t ? Vy(t) || W$(t) ? gn({}, t) : t : null;
  };
  Ki = function(t, e, n = false, s = false) {
    const { props: r, ref: o, patchFlag: i, children: a, transition: l } = t, c = e ? $_(r || {}, e) : r, u = {
      __v_isVNode: true,
      __v_skip: true,
      type: t.type,
      props: c,
      key: c && eC(c),
      ref: e && e.ref ? n && o ? De(o) ? o.concat(qh(e)) : [
        o,
        qh(e)
      ] : qh(e) : o,
      scopeId: t.scopeId,
      slotScopeIds: t.slotScopeIds,
      children: a,
      target: t.target,
      targetStart: t.targetStart,
      targetAnchor: t.targetAnchor,
      staticCount: t.staticCount,
      shapeFlag: t.shapeFlag,
      patchFlag: e && t.type !== hs ? i === -1 ? 16 : i | 16 : i,
      dynamicProps: t.dynamicProps,
      dynamicChildren: t.dynamicChildren,
      appContext: t.appContext,
      dirs: t.dirs,
      transition: l,
      component: t.component,
      suspense: t.suspense,
      ssContent: t.ssContent && Ki(t.ssContent),
      ssFallback: t.ssFallback && Ki(t.ssFallback),
      el: t.el,
      anchor: t.anchor,
      ctx: t.ctx,
      ce: t.ce
    };
    return l && s && Gy(u, l.clone(u)), u;
  };
  S_ = function(t = " ", e = 0) {
    return Tn(dp, null, t, e);
  };
  cle = function(t = "", e = false) {
    return e ? (bd(), kg(so, null, t)) : Tn(so, null, t);
  };
  function Hs(t) {
    return t == null || typeof t == "boolean" ? Tn(so) : De(t) ? Tn(hs, null, t.slice()) : lc(t) ? Gr(t) : Tn(dp, null, String(t));
  }
  function Gr(t) {
    return t.el === null && t.patchFlag !== -1 || t.memo ? t : Ki(t);
  }
  function Ky(t, e) {
    let n = 0;
    const { shapeFlag: s } = t;
    if (e == null) e = null;
    else if (De(e)) n = 16;
    else if (typeof e == "object") if (s & 65) {
      const r = e.default;
      r && (r._c && (r._d = false), Ky(t, r()), r._c && (r._d = true));
      return;
    } else {
      n = 32;
      const r = e._;
      !r && !W$(e) ? e._ctx = Bt : r === 3 && Bt && (Bt.slots._ === 1 ? e._ = 1 : (e._ = 2, t.patchFlag |= 1024));
    }
    else Le(e) ? (e = {
      default: e,
      _ctx: Bt
    }, n = 32) : (e = String(e), s & 64 ? (n = 16, e = [
      S_(e)
    ]) : n = 8);
    t.children = e, t.shapeFlag |= n;
  }
  $_ = function(...t) {
    const e = {};
    for (let n = 0; n < t.length; n++) {
      const s = t[n];
      for (const r in s) if (r === "class") e.class !== s.class && (e.class = rp([
        e.class,
        s.class
      ]));
      else if (r === "style") e.style = sp([
        e.style,
        s.style
      ]);
      else if (Jd(r)) {
        const o = e[r], i = s[r];
        i && o !== i && !(De(o) && o.includes(i)) && (e[r] = o ? [].concat(o, i) : i);
      } else r !== "" && (e[r] = s[r]);
    }
    return e;
  };
  function Us(t, e, n, s = null) {
    rr(t, e, 7, [
      n,
      s
    ]);
  }
  const C_ = M$();
  let I_ = 0;
  function N_(t, e, n) {
    const s = t.type, r = (e ? e.appContext : t.appContext) || C_, o = {
      uid: I_++,
      vnode: t,
      type: s,
      parent: e,
      appContext: r,
      root: null,
      next: null,
      subTree: null,
      effect: null,
      update: null,
      job: null,
      scope: new t$(true),
      render: null,
      proxy: null,
      exposed: null,
      exposeProxy: null,
      withProxy: null,
      provides: e ? e.provides : Object.create(r.provides),
      ids: e ? e.ids : [
        "",
        0,
        0
      ],
      accessCache: null,
      renderCache: [],
      components: null,
      directives: null,
      propsOptions: G$(s, r),
      emitsOptions: Z$(s, r),
      emit: null,
      emitted: null,
      propsDefaults: at,
      inheritAttrs: s.inheritAttrs,
      ctx: at,
      data: at,
      props: at,
      attrs: at,
      slots: at,
      refs: at,
      setupState: at,
      setupContext: null,
      suspense: n,
      suspenseId: n ? n.pendingId : 0,
      asyncDep: null,
      asyncResolved: false,
      isMounted: false,
      isUnmounted: false,
      isDeactivated: false,
      bc: null,
      c: null,
      bm: null,
      m: null,
      bu: null,
      u: null,
      um: null,
      bum: null,
      da: null,
      a: null,
      rtg: null,
      rtc: null,
      ec: null,
      sp: null
    };
    return o.ctx = {
      _: o
    }, o.root = e ? e.root : o, o.emit = d_.bind(null, o), t.ce && t.ce(o), o;
  }
  let Zt = null;
  k_ = () => Zt || Bt;
  let xd, Tg;
  {
    const t = np(), e = (n, s) => {
      let r;
      return (r = t[n]) || (r = t[n] = []), r.push(s), (o) => {
        r.length > 1 ? r.forEach((i) => i(o)) : r[0](o);
      };
    };
    xd = e("__VUE_INSTANCE_SETTERS__", (n) => Zt = n), Tg = e("__VUE_SSR_SETTERS__", (n) => cc = n);
  }
  const Fc = (t) => {
    const e = Zt;
    return xd(t), t.scope.on(), () => {
      t.scope.off(), xd(e);
    };
  }, C1 = () => {
    Zt && Zt.scope.off(), xd(null);
  };
  function nC(t) {
    return t.vnode.shapeFlag & 4;
  }
  let cc = false;
  function T_(t, e = false, n = false) {
    e && Tg(e);
    const { props: s, children: r } = t.vnode, o = nC(t);
    JA(t, s, o, e), n_(t, r, n);
    const i = o ? E_(t, e) : void 0;
    return e && Tg(false), i;
  }
  function E_(t, e) {
    const n = t.type;
    t.accessCache = /* @__PURE__ */ Object.create(null), t.proxy = new Proxy(t.ctx, UA);
    const { setup: s } = n;
    if (s) {
      yo();
      const r = t.setupContext = s.length > 1 ? A_(t) : null, o = Fc(t), i = Oc(s, t, 0, [
        t.props,
        r
      ]), a = KS(i);
      if (bo(), o(), (a || t.sp) && !Ui(t) && _$(t), a) {
        if (i.then(C1, C1), e) return i.then((l) => {
          I1(t, l);
        }).catch((l) => {
          lp(l, t, 0);
        });
        t.asyncDep = i;
      } else I1(t, i);
    } else sC(t);
  }
  function I1(t, e, n) {
    Le(e) ? t.type.__ssrInlineRender ? t.ssrRender = e : t.render = e : ct(e) && (t.setupState = v$(e)), sC(t);
  }
  function sC(t, e, n) {
    const s = t.type;
    t.render || (t.render = s.render || Zs);
    {
      const r = Fc(t);
      yo();
      try {
        GA(t);
      } finally {
        bo(), r();
      }
    }
  }
  const R_ = {
    get(t, e) {
      return hn(t, "get", ""), t[e];
    }
  };
  function A_(t) {
    const e = (n) => {
      t.exposed = n || {};
    };
    return {
      attrs: new Proxy(t.attrs, R_),
      slots: t.slots,
      emit: t.emit,
      expose: e
    };
  }
  function pp(t) {
    return t.exposed ? t.exposeProxy || (t.exposeProxy = new Proxy(v$(Wy(t.exposed)), {
      get(e, n) {
        if (n in e) return e[n];
        if (n in Zl) return Zl[n](t);
      },
      has(e, n) {
        return n in e || n in Zl;
      }
    })) : t.proxy;
  }
  function __(t, e = true) {
    return Le(t) ? t.displayName || t.name : t.name || e && t.__name;
  }
  function D_(t) {
    return Le(t) && "__vccOpts" in t;
  }
  ds = (t, e) => bA(t, e, cc);
  rC = function(t, e, n) {
    const s = arguments.length;
    return s === 2 ? ct(e) && !De(e) ? lc(e) ? Tn(t, null, [
      e
    ]) : Tn(t, e) : Tn(t, null, e) : (s > 3 ? n = Array.prototype.slice.call(arguments, 2) : s === 3 && lc(n) && (n = [
      n
    ]), Tn(t, e, n));
  };
  const O_ = "3.5.13";
  let Eg;
  const N1 = typeof window < "u" && window.trustedTypes;
  if (N1) try {
    Eg = N1.createPolicy("vue", {
      createHTML: (t) => t
    });
  } catch {
  }
  const oC = Eg ? (t) => Eg.createHTML(t) : (t) => t, F_ = "http://www.w3.org/2000/svg", L_ = "http://www.w3.org/1998/Math/MathML", fr = typeof document < "u" ? document : null, k1 = fr && fr.createElement("template"), P_ = {
    insert: (t, e, n) => {
      e.insertBefore(t, n || null);
    },
    remove: (t) => {
      const e = t.parentNode;
      e && e.removeChild(t);
    },
    createElement: (t, e, n, s) => {
      const r = e === "svg" ? fr.createElementNS(F_, t) : e === "mathml" ? fr.createElementNS(L_, t) : n ? fr.createElement(t, {
        is: n
      }) : fr.createElement(t);
      return t === "select" && s && s.multiple != null && r.setAttribute("multiple", s.multiple), r;
    },
    createText: (t) => fr.createTextNode(t),
    createComment: (t) => fr.createComment(t),
    setText: (t, e) => {
      t.nodeValue = e;
    },
    setElementText: (t, e) => {
      t.textContent = e;
    },
    parentNode: (t) => t.parentNode,
    nextSibling: (t) => t.nextSibling,
    querySelector: (t) => fr.querySelector(t),
    setScopeId(t, e) {
      t.setAttribute(e, "");
    },
    insertStaticContent(t, e, n, s, r, o) {
      const i = n ? n.previousSibling : e.lastChild;
      if (r && (r === o || r.nextSibling)) for (; e.insertBefore(r.cloneNode(true), n), !(r === o || !(r = r.nextSibling)); ) ;
      else {
        k1.innerHTML = oC(s === "svg" ? `<svg>${t}</svg>` : s === "mathml" ? `<math>${t}</math>` : t);
        const a = k1.content;
        if (s === "svg" || s === "mathml") {
          const l = a.firstChild;
          for (; l.firstChild; ) a.appendChild(l.firstChild);
          a.removeChild(l);
        }
        e.insertBefore(a, n);
      }
      return [
        i ? i.nextSibling : e.firstChild,
        n ? n.previousSibling : e.lastChild
      ];
    }
  }, z_ = Symbol("_vtc");
  function M_(t, e, n) {
    const s = t[z_];
    s && (e = (e ? [
      e,
      ...s
    ] : [
      ...s
    ]).join(" ")), e == null ? t.removeAttribute("class") : n ? t.setAttribute("class", e) : t.className = e;
  }
  const T1 = Symbol("_vod"), B_ = Symbol("_vsh"), V_ = Symbol(""), W_ = /(^|;)\s*display\s*:/;
  function U_(t, e, n) {
    const s = t.style, r = St(n);
    let o = false;
    if (n && !r) {
      if (e) if (St(e)) for (const i of e.split(";")) {
        const a = i.slice(0, i.indexOf(":")).trim();
        n[a] == null && Kh(s, a, "");
      }
      else for (const i in e) n[i] == null && Kh(s, i, "");
      for (const i in n) i === "display" && (o = true), Kh(s, i, n[i]);
    } else if (r) {
      if (e !== n) {
        const i = s[V_];
        i && (n += ";" + i), s.cssText = n, o = W_.test(n);
      }
    } else e && t.removeAttribute("style");
    T1 in t && (t[T1] = o ? s.display : "", t[B_] && (s.display = "none"));
  }
  const E1 = /\s*!important$/;
  function Kh(t, e, n) {
    if (De(n)) n.forEach((s) => Kh(t, e, s));
    else if (n == null && (n = ""), e.startsWith("--")) t.setProperty(e, n);
    else {
      const s = G_(t, e);
      E1.test(n) ? t.setProperty(go(s), n.replace(E1, ""), "important") : t[s] = n;
    }
  }
  const R1 = [
    "Webkit",
    "Moz",
    "ms"
  ], Xm = {};
  function G_(t, e) {
    const n = Xm[e];
    if (n) return n;
    let s = gs(e);
    if (s !== "filter" && s in t) return Xm[e] = s;
    s = tp(s);
    for (let r = 0; r < R1.length; r++) {
      const o = R1[r] + s;
      if (o in t) return Xm[e] = o;
    }
    return e;
  }
  const A1 = "http://www.w3.org/1999/xlink";
  function _1(t, e, n, s, r, o = VR(e)) {
    s && e.startsWith("xlink:") ? n == null ? t.removeAttributeNS(A1, e.slice(6, e.length)) : t.setAttributeNS(A1, e, n) : n == null || o && !JS(n) ? t.removeAttribute(e) : t.setAttribute(e, o ? "" : As(n) ? String(n) : n);
  }
  function D1(t, e, n, s, r) {
    if (e === "innerHTML" || e === "textContent") {
      n != null && (t[e] = e === "innerHTML" ? oC(n) : n);
      return;
    }
    const o = t.tagName;
    if (e === "value" && o !== "PROGRESS" && !o.includes("-")) {
      const a = o === "OPTION" ? t.getAttribute("value") || "" : t.value, l = n == null ? t.type === "checkbox" ? "on" : "" : String(n);
      (a !== l || !("_value" in t)) && (t.value = l), n == null && t.removeAttribute(e), t._value = n;
      return;
    }
    let i = false;
    if (n === "" || n == null) {
      const a = typeof t[e];
      a === "boolean" ? n = JS(n) : n == null && a === "string" ? (n = "", i = true) : a === "number" && (n = 0, i = true);
    }
    try {
      t[e] = n;
    } catch {
    }
    i && t.removeAttribute(r || e);
  }
  function Lo(t, e, n, s) {
    t.addEventListener(e, n, s);
  }
  function H_(t, e, n, s) {
    t.removeEventListener(e, n, s);
  }
  const O1 = Symbol("_vei");
  function j_(t, e, n, s, r = null) {
    const o = t[O1] || (t[O1] = {}), i = o[e];
    if (s && i) i.value = s;
    else {
      const [a, l] = q_(e);
      if (s) {
        const c = o[e] = Y_(s, r);
        Lo(t, a, c, l);
      } else i && (H_(t, a, i, l), o[e] = void 0);
    }
  }
  const F1 = /(?:Once|Passive|Capture)$/;
  function q_(t) {
    let e;
    if (F1.test(t)) {
      e = {};
      let s;
      for (; s = t.match(F1); ) t = t.slice(0, t.length - s[0].length), e[s[0].toLowerCase()] = true;
    }
    return [
      t[2] === ":" ? t.slice(3) : go(t.slice(2)),
      e
    ];
  }
  let Ym = 0;
  const K_ = Promise.resolve(), X_ = () => Ym || (K_.then(() => Ym = 0), Ym = Date.now());
  function Y_(t, e) {
    const n = (s) => {
      if (!s._vts) s._vts = Date.now();
      else if (s._vts <= n.attached) return;
      rr(Z_(s, n.value), e, 5, [
        s
      ]);
    };
    return n.value = t, n.attached = X_(), n;
  }
  function Z_(t, e) {
    if (De(e)) {
      const n = t.stopImmediatePropagation;
      return t.stopImmediatePropagation = () => {
        n.call(t), t._stopped = true;
      }, e.map((s) => (r) => !r._stopped && s && s(r));
    } else return e;
  }
  const L1 = (t) => t.charCodeAt(0) === 111 && t.charCodeAt(1) === 110 && t.charCodeAt(2) > 96 && t.charCodeAt(2) < 123, J_ = (t, e, n, s, r, o) => {
    const i = r === "svg";
    e === "class" ? M_(t, s, i) : e === "style" ? U_(t, n, s) : Jd(e) ? _y(e) || j_(t, e, n, s, o) : (e[0] === "." ? (e = e.slice(1), true) : e[0] === "^" ? (e = e.slice(1), false) : Q_(t, e, s, i)) ? (D1(t, e, s), !t.tagName.includes("-") && (e === "value" || e === "checked" || e === "selected") && _1(t, e, s, i, o, e !== "value")) : t._isVueCE && (/[A-Z]/.test(e) || !St(s)) ? D1(t, gs(e), s, o, e) : (e === "true-value" ? t._trueValue = s : e === "false-value" && (t._falseValue = s), _1(t, e, s, i));
  };
  function Q_(t, e, n, s) {
    if (s) return !!(e === "innerHTML" || e === "textContent" || e in t && L1(e) && Le(n));
    if (e === "spellcheck" || e === "draggable" || e === "translate" || e === "form" || e === "list" && t.tagName === "INPUT" || e === "type" && t.tagName === "TEXTAREA") return false;
    if (e === "width" || e === "height") {
      const r = t.tagName;
      if (r === "IMG" || r === "VIDEO" || r === "CANVAS" || r === "SOURCE") return false;
    }
    return L1(e) && St(n) ? false : e in t;
  }
  const wd = (t) => {
    const e = t.props["onUpdate:modelValue"] || false;
    return De(e) ? (n) => Gh(e, n) : e;
  };
  function eD(t) {
    t.target.composing = true;
  }
  function P1(t) {
    const e = t.target;
    e.composing && (e.composing = false, e.dispatchEvent(new Event("input")));
  }
  let Gi;
  Gi = Symbol("_assign");
  ule = {
    created(t, { modifiers: { lazy: e, trim: n, number: s } }, r) {
      t[Gi] = wd(r);
      const o = s || r.props && r.props.type === "number";
      Lo(t, e ? "change" : "input", (i) => {
        if (i.target.composing) return;
        let a = t.value;
        n && (a = a.trim()), o && (a = hd(a)), t[Gi](a);
      }), n && Lo(t, "change", () => {
        t.value = t.value.trim();
      }), e || (Lo(t, "compositionstart", eD), Lo(t, "compositionend", P1), Lo(t, "change", P1));
    },
    mounted(t, { value: e }) {
      t.value = e ?? "";
    },
    beforeUpdate(t, { value: e, oldValue: n, modifiers: { lazy: s, trim: r, number: o } }, i) {
      if (t[Gi] = wd(i), t.composing) return;
      const a = (o || t.type === "number") && !/^0\d/.test(t.value) ? hd(t.value) : t.value, l = e ?? "";
      a !== l && (document.activeElement === t && t.type !== "range" && (s && e === n || r && t.value.trim() === l) || (t.value = l));
    }
  };
  hle = {
    deep: true,
    created(t, { value: e, modifiers: { number: n } }, s) {
      const r = Qd(e);
      Lo(t, "change", () => {
        const o = Array.prototype.filter.call(t.options, (i) => i.selected).map((i) => n ? hd(vd(i)) : vd(i));
        t[Gi](t.multiple ? r ? new Set(o) : o : o[0]), t._assigning = true, cp(() => {
          t._assigning = false;
        });
      }), t[Gi] = wd(s);
    },
    mounted(t, { value: e }) {
      z1(t, e);
    },
    beforeUpdate(t, e, n) {
      t[Gi] = wd(n);
    },
    updated(t, { value: e }) {
      t._assigning || z1(t, e);
    }
  };
  function z1(t, e) {
    const n = t.multiple, s = De(e);
    if (!(n && !s && !Qd(e))) {
      for (let r = 0, o = t.options.length; r < o; r++) {
        const i = t.options[r], a = vd(i);
        if (n) if (s) {
          const l = typeof a;
          l === "string" || l === "number" ? i.selected = e.some((c) => String(c) === String(a)) : i.selected = UR(e, a) > -1;
        } else i.selected = e.has(a);
        else if (op(vd(i), e)) {
          t.selectedIndex !== r && (t.selectedIndex = r);
          return;
        }
      }
      !n && t.selectedIndex !== -1 && (t.selectedIndex = -1);
    }
  }
  function vd(t) {
    return "_value" in t ? t._value : t.value;
  }
  let tD, nD, sD, rD;
  tD = [
    "ctrl",
    "shift",
    "alt",
    "meta"
  ];
  nD = {
    stop: (t) => t.stopPropagation(),
    prevent: (t) => t.preventDefault(),
    self: (t) => t.target !== t.currentTarget,
    ctrl: (t) => !t.ctrlKey,
    shift: (t) => !t.shiftKey,
    alt: (t) => !t.altKey,
    meta: (t) => !t.metaKey,
    left: (t) => "button" in t && t.button !== 0,
    middle: (t) => "button" in t && t.button !== 1,
    right: (t) => "button" in t && t.button !== 2,
    exact: (t, e) => tD.some((n) => t[`${n}Key`] && !e.includes(n))
  };
  dle = (t, e) => {
    const n = t._withMods || (t._withMods = {}), s = e.join(".");
    return n[s] || (n[s] = (r, ...o) => {
      for (let i = 0; i < e.length; i++) {
        const a = nD[e[i]];
        if (a && a(r, e)) return;
      }
      return t(r, ...o);
    });
  };
  sD = {
    esc: "escape",
    space: " ",
    up: "arrow-up",
    left: "arrow-left",
    right: "arrow-right",
    down: "arrow-down",
    delete: "backspace"
  };
  ple = (t, e) => {
    const n = t._withKeys || (t._withKeys = {}), s = e.join(".");
    return n[s] || (n[s] = (r) => {
      if (!("key" in r)) return;
      const o = go(r.key);
      if (e.some((i) => i === o || sD[i] === o)) return t(r);
    });
  };
  rD = gn({
    patchProp: J_
  }, P_);
  let M1;
  function oD() {
    return M1 || (M1 = r_(rD));
  }
  const iD = (...t) => {
    const e = oD().createApp(...t), { mount: n } = e;
    return e.mount = (s) => {
      const r = lD(s);
      if (!r) return;
      const o = e._component;
      !Le(o) && !o.render && !o.template && (o.template = r.innerHTML), r.nodeType === 1 && (r.textContent = "");
      const i = n(r, false, aD(r));
      return r instanceof Element && (r.removeAttribute("v-cloak"), r.setAttribute("data-v-app", "")), i;
    }, e;
  };
  function aD(t) {
    if (t instanceof SVGElement) return "svg";
    if (typeof MathMLElement == "function" && t instanceof MathMLElement) return "mathml";
  }
  function lD(t) {
    return St(t) ? document.querySelector(t) : t;
  }
  let iC;
  const fp = (t) => iC = t, aC = Symbol();
  function Rg(t) {
    return t && typeof t == "object" && Object.prototype.toString.call(t) === "[object Object]" && typeof t.toJSON != "function";
  }
  var ec;
  (function(t) {
    t.direct = "direct", t.patchObject = "patch object", t.patchFunction = "patch function";
  })(ec || (ec = {}));
  cD = function() {
    const t = n$(true), e = t.run(() => ap({}));
    let n = [], s = [];
    const r = Wy({
      install(o) {
        fp(r), r._a = o, o.provide(aC, r), o.config.globalProperties.$pinia = r, s.forEach((i) => n.push(i)), s = [];
      },
      use(o) {
        return this._a ? n.push(o) : s.push(o), this;
      },
      _p: n,
      _a: null,
      _e: t,
      _s: /* @__PURE__ */ new Map(),
      state: e
    });
    return r;
  };
  const lC = () => {
  };
  function B1(t, e, n, s = lC) {
    t.push(e);
    const r = () => {
      const o = t.indexOf(e);
      o > -1 && (t.splice(o, 1), s());
    };
    return !n && s$() && HR(r), r;
  }
  function _i(t, ...e) {
    t.slice().forEach((n) => {
      n(...e);
    });
  }
  const uD = (t) => t(), V1 = Symbol(), Zm = Symbol();
  function Ag(t, e) {
    t instanceof Map && e instanceof Map ? e.forEach((n, s) => t.set(s, n)) : t instanceof Set && e instanceof Set && e.forEach(t.add, t);
    for (const n in e) {
      if (!e.hasOwnProperty(n)) continue;
      const s = e[n], r = t[n];
      Rg(r) && Rg(s) && t.hasOwnProperty(n) && !wt(s) && !Jr(s) ? t[n] = Ag(r, s) : t[n] = s;
    }
    return t;
  }
  const hD = Symbol();
  function dD(t) {
    return !Rg(t) || !t.hasOwnProperty(hD);
  }
  const { assign: Vr } = Object;
  function pD(t) {
    return !!(wt(t) && t.effect);
  }
  function fD(t, e, n, s) {
    const { state: r, actions: o, getters: i } = e, a = n.state.value[t];
    let l;
    function c() {
      a || (n.state.value[t] = r ? r() : {});
      const u = fA(n.state.value[t]);
      return Vr(u, o, Object.keys(i || {}).reduce((h, d) => (h[d] = Wy(ds(() => {
        fp(n);
        const p = n._s.get(t);
        return i[d].call(p, p);
      })), h), {}));
    }
    return l = cC(t, c, e, n, s, true), l;
  }
  function cC(t, e, n = {}, s, r, o) {
    let i;
    const a = Vr({
      actions: {}
    }, n), l = {
      deep: true
    };
    let c, u, h = [], d = [], p;
    const f = s.state.value[t];
    !o && !f && (s.state.value[t] = {}), ap({});
    let m;
    function g(R) {
      let N;
      c = u = false, typeof R == "function" ? (R(s.state.value[t]), N = {
        type: ec.patchFunction,
        storeId: t,
        events: p
      }) : (Ag(s.state.value[t], R), N = {
        type: ec.patchObject,
        payload: R,
        storeId: t,
        events: p
      });
      const k = m = Symbol();
      cp().then(() => {
        m === k && (c = true);
      }), u = true, _i(h, N, s.state.value[t]);
    }
    const y = o ? function() {
      const { state: N } = n, k = N ? N() : {};
      this.$patch(($) => {
        Vr($, k);
      });
    } : lC;
    function b() {
      i.stop(), h = [], d = [], s._s.delete(t);
    }
    const w = (R, N = "") => {
      if (V1 in R) return R[Zm] = N, R;
      const k = function() {
        fp(s);
        const $ = Array.from(arguments), F = [], M = [];
        function U(H) {
          F.push(H);
        }
        function W(H) {
          M.push(H);
        }
        _i(d, {
          args: $,
          name: k[Zm],
          store: S,
          after: U,
          onError: W
        });
        let V;
        try {
          V = R.apply(this && this.$id === t ? this : S, $);
        } catch (H) {
          throw _i(M, H), H;
        }
        return V instanceof Promise ? V.then((H) => (_i(F, H), H)).catch((H) => (_i(M, H), Promise.reject(H))) : (_i(F, V), V);
      };
      return k[V1] = true, k[Zm] = N, k;
    }, x = {
      _p: s,
      $id: t,
      $onAction: B1.bind(null, d),
      $patch: g,
      $reset: y,
      $subscribe(R, N = {}) {
        const k = B1(h, R, N.detached, () => $()), $ = i.run(() => Jl(() => s.state.value[t], (F) => {
          (N.flush === "sync" ? u : c) && R({
            storeId: t,
            type: ec.direct,
            events: p
          }, F);
        }, Vr({}, l, N)));
        return k;
      },
      $dispose: b
    }, S = Dc(x);
    s._s.set(t, S);
    const E = (s._a && s._a.runWithContext || uD)(() => s._e.run(() => (i = n$()).run(() => e({
      action: w
    }))));
    for (const R in E) {
      const N = E[R];
      if (wt(N) && !pD(N) || Jr(N)) o || (f && dD(N) && (wt(N) ? N.value = f[R] : Ag(N, f[R])), s.state.value[t][R] = N);
      else if (typeof N == "function") {
        const k = w(N, R);
        E[R] = k, a.actions[R] = N;
      }
    }
    return Vr(S, E), Vr(Je(S), E), Object.defineProperty(S, "$state", {
      get: () => s.state.value[t],
      set: (R) => {
        g((N) => {
          Vr(N, R);
        });
      }
    }), s._p.forEach((R) => {
      Vr(S, i.run(() => R({
        store: S,
        app: s._a,
        pinia: s,
        options: a
      })));
    }), f && o && n.hydrate && n.hydrate(S.$state, f), c = true, u = true, S;
  }
  fle = function(t, e, n) {
    let s;
    const r = typeof e == "function";
    s = r ? n : e;
    function o(i, a) {
      const l = ZA();
      return i = i || (l ? Js(aC, null) : null), i && fp(i), i = iC, i._s.has(t) || (r ? cC(t, e, s, i) : fD(t, s, i)), i._s.get(t);
    }
    return o.$id = t, o;
  };
  let gD, yD;
  mD = (t, e) => {
    const n = t.__vccOpts || t;
    for (const [s, r] of e) n[s] = r;
    return n;
  };
  gD = {};
  yD = {
    class: "min-h-screen"
  };
  function bD(t, e) {
    const n = BA("router-view");
    return bd(), x_("div", yD, [
      Tn(n)
    ]);
  }
  let xD, wD, vD, W1;
  xD = mD(gD, [
    [
      "render",
      bD
    ]
  ]);
  wD = "modulepreload";
  vD = function(t) {
    return "/tfjs_model_tester/" + t;
  };
  W1 = {};
  uC = function(e, n, s) {
    let r = Promise.resolve();
    if (n && n.length > 0) {
      document.getElementsByTagName("link");
      const i = document.querySelector("meta[property=csp-nonce]"), a = (i == null ? void 0 : i.nonce) || (i == null ? void 0 : i.getAttribute("nonce"));
      r = Promise.allSettled(n.map((l) => {
        if (l = vD(l), l in W1) return;
        W1[l] = true;
        const c = l.endsWith(".css"), u = c ? '[rel="stylesheet"]' : "";
        if (document.querySelector(`link[href="${l}"]${u}`)) return;
        const h = document.createElement("link");
        if (h.rel = c ? "stylesheet" : wD, c || (h.as = "script"), h.crossOrigin = "", h.href = l, a && h.setAttribute("nonce", a), document.head.appendChild(h), c) return new Promise((d, p) => {
          h.addEventListener("load", d), h.addEventListener("error", () => p(new Error(`Unable to preload CSS for ${l}`)));
        });
      }));
    }
    function o(i) {
      const a = new Event("vite:preloadError", {
        cancelable: true
      });
      if (a.payload = i, window.dispatchEvent(a), !a.defaultPrevented) throw i;
    }
    return r.then((i) => {
      for (const a of i || []) a.status === "rejected" && o(a.reason);
      return e().catch(o);
    });
  };
  const Li = typeof document < "u";
  function hC(t) {
    return typeof t == "object" || "displayName" in t || "props" in t || "__vccOpts" in t;
  }
  function SD(t) {
    return t.__esModule || t[Symbol.toStringTag] === "Module" || t.default && hC(t.default);
  }
  const Qe = Object.assign;
  function Jm(t, e) {
    const n = {};
    for (const s in e) {
      const r = e[s];
      n[s] = _s(r) ? r.map(t) : t(r);
    }
    return n;
  }
  const tc = () => {
  }, _s = Array.isArray, dC = /#/g, $D = /&/g, CD = /\//g, ID = /=/g, ND = /\?/g, pC = /\+/g, kD = /%5B/g, TD = /%5D/g, fC = /%5E/g, ED = /%60/g, mC = /%7B/g, RD = /%7C/g, gC = /%7D/g, AD = /%20/g;
  function Xy(t) {
    return encodeURI("" + t).replace(RD, "|").replace(kD, "[").replace(TD, "]");
  }
  function _D(t) {
    return Xy(t).replace(mC, "{").replace(gC, "}").replace(fC, "^");
  }
  function _g(t) {
    return Xy(t).replace(pC, "%2B").replace(AD, "+").replace(dC, "%23").replace($D, "%26").replace(ED, "`").replace(mC, "{").replace(gC, "}").replace(fC, "^");
  }
  function DD(t) {
    return _g(t).replace(ID, "%3D");
  }
  function OD(t) {
    return Xy(t).replace(dC, "%23").replace(ND, "%3F");
  }
  function FD(t) {
    return t == null ? "" : OD(t).replace(CD, "%2F");
  }
  function uc(t) {
    try {
      return decodeURIComponent("" + t);
    } catch {
    }
    return "" + t;
  }
  const LD = /\/$/, PD = (t) => t.replace(LD, "");
  function Qm(t, e, n = "/") {
    let s, r = {}, o = "", i = "";
    const a = e.indexOf("#");
    let l = e.indexOf("?");
    return a < l && a >= 0 && (l = -1), l > -1 && (s = e.slice(0, l), o = e.slice(l + 1, a > -1 ? a : e.length), r = t(o)), a > -1 && (s = s || e.slice(0, a), i = e.slice(a, e.length)), s = VD(s ?? e, n), {
      fullPath: s + (o && "?") + o + i,
      path: s,
      query: r,
      hash: uc(i)
    };
  }
  function zD(t, e) {
    const n = e.query ? t(e.query) : "";
    return e.path + (n && "?") + n + (e.hash || "");
  }
  function U1(t, e) {
    return !e || !t.toLowerCase().startsWith(e.toLowerCase()) ? t : t.slice(e.length) || "/";
  }
  function MD(t, e, n) {
    const s = e.matched.length - 1, r = n.matched.length - 1;
    return s > -1 && s === r && Xi(e.matched[s], n.matched[r]) && yC(e.params, n.params) && t(e.query) === t(n.query) && e.hash === n.hash;
  }
  function Xi(t, e) {
    return (t.aliasOf || t) === (e.aliasOf || e);
  }
  function yC(t, e) {
    if (Object.keys(t).length !== Object.keys(e).length) return false;
    for (const n in t) if (!BD(t[n], e[n])) return false;
    return true;
  }
  function BD(t, e) {
    return _s(t) ? G1(t, e) : _s(e) ? G1(e, t) : t === e;
  }
  function G1(t, e) {
    return _s(e) ? t.length === e.length && t.every((n, s) => n === e[s]) : t.length === 1 && t[0] === e;
  }
  function VD(t, e) {
    if (t.startsWith("/")) return t;
    if (!t) return e;
    const n = e.split("/"), s = t.split("/"), r = s[s.length - 1];
    (r === ".." || r === ".") && s.push("");
    let o = n.length - 1, i, a;
    for (i = 0; i < s.length; i++) if (a = s[i], a !== ".") if (a === "..") o > 1 && o--;
    else break;
    return n.slice(0, o).join("/") + "/" + s.slice(i).join("/");
  }
  const Br = {
    path: "/",
    name: void 0,
    params: {},
    query: {},
    hash: "",
    fullPath: "/",
    matched: [],
    meta: {},
    redirectedFrom: void 0
  };
  var hc;
  (function(t) {
    t.pop = "pop", t.push = "push";
  })(hc || (hc = {}));
  var nc;
  (function(t) {
    t.back = "back", t.forward = "forward", t.unknown = "";
  })(nc || (nc = {}));
  function WD(t) {
    if (!t) if (Li) {
      const e = document.querySelector("base");
      t = e && e.getAttribute("href") || "/", t = t.replace(/^\w+:\/\/[^\/]+/, "");
    } else t = "/";
    return t[0] !== "/" && t[0] !== "#" && (t = "/" + t), PD(t);
  }
  const UD = /^[^#]+#/;
  function GD(t, e) {
    return t.replace(UD, "#") + e;
  }
  function HD(t, e) {
    const n = document.documentElement.getBoundingClientRect(), s = t.getBoundingClientRect();
    return {
      behavior: e.behavior,
      left: s.left - n.left - (e.left || 0),
      top: s.top - n.top - (e.top || 0)
    };
  }
  const mp = () => ({
    left: window.scrollX,
    top: window.scrollY
  });
  function jD(t) {
    let e;
    if ("el" in t) {
      const n = t.el, s = typeof n == "string" && n.startsWith("#"), r = typeof n == "string" ? s ? document.getElementById(n.slice(1)) : document.querySelector(n) : n;
      if (!r) return;
      e = HD(r, t);
    } else e = t;
    "scrollBehavior" in document.documentElement.style ? window.scrollTo(e) : window.scrollTo(e.left != null ? e.left : window.scrollX, e.top != null ? e.top : window.scrollY);
  }
  function H1(t, e) {
    return (history.state ? history.state.position - e : -1) + t;
  }
  const Dg = /* @__PURE__ */ new Map();
  function qD(t, e) {
    Dg.set(t, e);
  }
  function KD(t) {
    const e = Dg.get(t);
    return Dg.delete(t), e;
  }
  let XD = () => location.protocol + "//" + location.host;
  function bC(t, e) {
    const { pathname: n, search: s, hash: r } = e, o = t.indexOf("#");
    if (o > -1) {
      let a = r.includes(t.slice(o)) ? t.slice(o).length : 1, l = r.slice(a);
      return l[0] !== "/" && (l = "/" + l), U1(l, "");
    }
    return U1(n, t) + s + r;
  }
  function YD(t, e, n, s) {
    let r = [], o = [], i = null;
    const a = ({ state: d }) => {
      const p = bC(t, location), f = n.value, m = e.value;
      let g = 0;
      if (d) {
        if (n.value = p, e.value = d, i && i === f) {
          i = null;
          return;
        }
        g = m ? d.position - m.position : 0;
      } else s(p);
      r.forEach((y) => {
        y(n.value, f, {
          delta: g,
          type: hc.pop,
          direction: g ? g > 0 ? nc.forward : nc.back : nc.unknown
        });
      });
    };
    function l() {
      i = n.value;
    }
    function c(d) {
      r.push(d);
      const p = () => {
        const f = r.indexOf(d);
        f > -1 && r.splice(f, 1);
      };
      return o.push(p), p;
    }
    function u() {
      const { history: d } = window;
      d.state && d.replaceState(Qe({}, d.state, {
        scroll: mp()
      }), "");
    }
    function h() {
      for (const d of o) d();
      o = [], window.removeEventListener("popstate", a), window.removeEventListener("beforeunload", u);
    }
    return window.addEventListener("popstate", a), window.addEventListener("beforeunload", u, {
      passive: true
    }), {
      pauseListeners: l,
      listen: c,
      destroy: h
    };
  }
  function j1(t, e, n, s = false, r = false) {
    return {
      back: t,
      current: e,
      forward: n,
      replaced: s,
      position: window.history.length,
      scroll: r ? mp() : null
    };
  }
  function ZD(t) {
    const { history: e, location: n } = window, s = {
      value: bC(t, n)
    }, r = {
      value: e.state
    };
    r.value || o(s.value, {
      back: null,
      current: s.value,
      forward: null,
      position: e.length - 1,
      replaced: true,
      scroll: null
    }, true);
    function o(l, c, u) {
      const h = t.indexOf("#"), d = h > -1 ? (n.host && document.querySelector("base") ? t : t.slice(h)) + l : XD() + t + l;
      try {
        e[u ? "replaceState" : "pushState"](c, "", d), r.value = c;
      } catch (p) {
        console.error(p), n[u ? "replace" : "assign"](d);
      }
    }
    function i(l, c) {
      const u = Qe({}, e.state, j1(r.value.back, l, r.value.forward, true), c, {
        position: r.value.position
      });
      o(l, u, true), s.value = l;
    }
    function a(l, c) {
      const u = Qe({}, r.value, e.state, {
        forward: l,
        scroll: mp()
      });
      o(u.current, u, true);
      const h = Qe({}, j1(s.value, l, null), {
        position: u.position + 1
      }, c);
      o(l, h, false), s.value = l;
    }
    return {
      location: s,
      state: r,
      push: a,
      replace: i
    };
  }
  function JD(t) {
    t = WD(t);
    const e = ZD(t), n = YD(t, e.state, e.location, e.replace);
    function s(o, i = true) {
      i || n.pauseListeners(), history.go(o);
    }
    const r = Qe({
      location: "",
      base: t,
      go: s,
      createHref: GD.bind(null, t)
    }, e, n);
    return Object.defineProperty(r, "location", {
      enumerable: true,
      get: () => e.location.value
    }), Object.defineProperty(r, "state", {
      enumerable: true,
      get: () => e.state.value
    }), r;
  }
  function QD(t) {
    return typeof t == "string" || t && typeof t == "object";
  }
  function xC(t) {
    return typeof t == "string" || typeof t == "symbol";
  }
  const wC = Symbol("");
  var q1;
  (function(t) {
    t[t.aborted = 4] = "aborted", t[t.cancelled = 8] = "cancelled", t[t.duplicated = 16] = "duplicated";
  })(q1 || (q1 = {}));
  function Yi(t, e) {
    return Qe(new Error(), {
      type: t,
      [wC]: true
    }, e);
  }
  function pr(t, e) {
    return t instanceof Error && wC in t && (e == null || !!(t.type & e));
  }
  const K1 = "[^/]+?", eO = {
    sensitive: false,
    strict: false,
    start: true,
    end: true
  }, tO = /[.+*?^${}()[\]/\\]/g;
  function nO(t, e) {
    const n = Qe({}, eO, e), s = [];
    let r = n.start ? "^" : "";
    const o = [];
    for (const c of t) {
      const u = c.length ? [] : [
        90
      ];
      n.strict && !c.length && (r += "/");
      for (let h = 0; h < c.length; h++) {
        const d = c[h];
        let p = 40 + (n.sensitive ? 0.25 : 0);
        if (d.type === 0) h || (r += "/"), r += d.value.replace(tO, "\\$&"), p += 40;
        else if (d.type === 1) {
          const { value: f, repeatable: m, optional: g, regexp: y } = d;
          o.push({
            name: f,
            repeatable: m,
            optional: g
          });
          const b = y || K1;
          if (b !== K1) {
            p += 10;
            try {
              new RegExp(`(${b})`);
            } catch (x) {
              throw new Error(`Invalid custom RegExp for param "${f}" (${b}): ` + x.message);
            }
          }
          let w = m ? `((?:${b})(?:/(?:${b}))*)` : `(${b})`;
          h || (w = g && c.length < 2 ? `(?:/${w})` : "/" + w), g && (w += "?"), r += w, p += 20, g && (p += -8), m && (p += -20), b === ".*" && (p += -50);
        }
        u.push(p);
      }
      s.push(u);
    }
    if (n.strict && n.end) {
      const c = s.length - 1;
      s[c][s[c].length - 1] += 0.7000000000000001;
    }
    n.strict || (r += "/?"), n.end ? r += "$" : n.strict && !r.endsWith("/") && (r += "(?:/|$)");
    const i = new RegExp(r, n.sensitive ? "" : "i");
    function a(c) {
      const u = c.match(i), h = {};
      if (!u) return null;
      for (let d = 1; d < u.length; d++) {
        const p = u[d] || "", f = o[d - 1];
        h[f.name] = p && f.repeatable ? p.split("/") : p;
      }
      return h;
    }
    function l(c) {
      let u = "", h = false;
      for (const d of t) {
        (!h || !u.endsWith("/")) && (u += "/"), h = false;
        for (const p of d) if (p.type === 0) u += p.value;
        else if (p.type === 1) {
          const { value: f, repeatable: m, optional: g } = p, y = f in c ? c[f] : "";
          if (_s(y) && !m) throw new Error(`Provided param "${f}" is an array but it is not repeatable (* or + modifiers)`);
          const b = _s(y) ? y.join("/") : y;
          if (!b) if (g) d.length < 2 && (u.endsWith("/") ? u = u.slice(0, -1) : h = true);
          else throw new Error(`Missing required param "${f}"`);
          u += b;
        }
      }
      return u || "/";
    }
    return {
      re: i,
      score: s,
      keys: o,
      parse: a,
      stringify: l
    };
  }
  function sO(t, e) {
    let n = 0;
    for (; n < t.length && n < e.length; ) {
      const s = e[n] - t[n];
      if (s) return s;
      n++;
    }
    return t.length < e.length ? t.length === 1 && t[0] === 80 ? -1 : 1 : t.length > e.length ? e.length === 1 && e[0] === 80 ? 1 : -1 : 0;
  }
  function vC(t, e) {
    let n = 0;
    const s = t.score, r = e.score;
    for (; n < s.length && n < r.length; ) {
      const o = sO(s[n], r[n]);
      if (o) return o;
      n++;
    }
    if (Math.abs(r.length - s.length) === 1) {
      if (X1(s)) return 1;
      if (X1(r)) return -1;
    }
    return r.length - s.length;
  }
  function X1(t) {
    const e = t[t.length - 1];
    return t.length > 0 && e[e.length - 1] < 0;
  }
  const rO = {
    type: 0,
    value: ""
  }, oO = /[a-zA-Z0-9_]/;
  function iO(t) {
    if (!t) return [
      []
    ];
    if (t === "/") return [
      [
        rO
      ]
    ];
    if (!t.startsWith("/")) throw new Error(`Invalid path "${t}"`);
    function e(p) {
      throw new Error(`ERR (${n})/"${c}": ${p}`);
    }
    let n = 0, s = n;
    const r = [];
    let o;
    function i() {
      o && r.push(o), o = [];
    }
    let a = 0, l, c = "", u = "";
    function h() {
      c && (n === 0 ? o.push({
        type: 0,
        value: c
      }) : n === 1 || n === 2 || n === 3 ? (o.length > 1 && (l === "*" || l === "+") && e(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`), o.push({
        type: 1,
        value: c,
        regexp: u,
        repeatable: l === "*" || l === "+",
        optional: l === "*" || l === "?"
      })) : e("Invalid state to consume buffer"), c = "");
    }
    function d() {
      c += l;
    }
    for (; a < t.length; ) {
      if (l = t[a++], l === "\\" && n !== 2) {
        s = n, n = 4;
        continue;
      }
      switch (n) {
        case 0:
          l === "/" ? (c && h(), i()) : l === ":" ? (h(), n = 1) : d();
          break;
        case 4:
          d(), n = s;
          break;
        case 1:
          l === "(" ? n = 2 : oO.test(l) ? d() : (h(), n = 0, l !== "*" && l !== "?" && l !== "+" && a--);
          break;
        case 2:
          l === ")" ? u[u.length - 1] == "\\" ? u = u.slice(0, -1) + l : n = 3 : u += l;
          break;
        case 3:
          h(), n = 0, l !== "*" && l !== "?" && l !== "+" && a--, u = "";
          break;
        default:
          e("Unknown state");
          break;
      }
    }
    return n === 2 && e(`Unfinished custom RegExp for param "${c}"`), h(), i(), r;
  }
  function aO(t, e, n) {
    const s = nO(iO(t.path), n), r = Qe(s, {
      record: t,
      parent: e,
      children: [],
      alias: []
    });
    return e && !r.record.aliasOf == !e.record.aliasOf && e.children.push(r), r;
  }
  function lO(t, e) {
    const n = [], s = /* @__PURE__ */ new Map();
    e = Q1({
      strict: false,
      end: true,
      sensitive: false
    }, e);
    function r(h) {
      return s.get(h);
    }
    function o(h, d, p) {
      const f = !p, m = Z1(h);
      m.aliasOf = p && p.record;
      const g = Q1(e, h), y = [
        m
      ];
      if ("alias" in h) {
        const x = typeof h.alias == "string" ? [
          h.alias
        ] : h.alias;
        for (const S of x) y.push(Z1(Qe({}, m, {
          components: p ? p.record.components : m.components,
          path: S,
          aliasOf: p ? p.record : m
        })));
      }
      let b, w;
      for (const x of y) {
        const { path: S } = x;
        if (d && S[0] !== "/") {
          const I = d.record.path, E = I[I.length - 1] === "/" ? "" : "/";
          x.path = d.record.path + (S && E + S);
        }
        if (b = aO(x, d, g), p ? p.alias.push(b) : (w = w || b, w !== b && w.alias.push(b), f && h.name && !J1(b) && i(h.name)), SC(b) && l(b), m.children) {
          const I = m.children;
          for (let E = 0; E < I.length; E++) o(I[E], b, p && p.children[E]);
        }
        p = p || b;
      }
      return w ? () => {
        i(w);
      } : tc;
    }
    function i(h) {
      if (xC(h)) {
        const d = s.get(h);
        d && (s.delete(h), n.splice(n.indexOf(d), 1), d.children.forEach(i), d.alias.forEach(i));
      } else {
        const d = n.indexOf(h);
        d > -1 && (n.splice(d, 1), h.record.name && s.delete(h.record.name), h.children.forEach(i), h.alias.forEach(i));
      }
    }
    function a() {
      return n;
    }
    function l(h) {
      const d = hO(h, n);
      n.splice(d, 0, h), h.record.name && !J1(h) && s.set(h.record.name, h);
    }
    function c(h, d) {
      let p, f = {}, m, g;
      if ("name" in h && h.name) {
        if (p = s.get(h.name), !p) throw Yi(1, {
          location: h
        });
        g = p.record.name, f = Qe(Y1(d.params, p.keys.filter((w) => !w.optional).concat(p.parent ? p.parent.keys.filter((w) => w.optional) : []).map((w) => w.name)), h.params && Y1(h.params, p.keys.map((w) => w.name))), m = p.stringify(f);
      } else if (h.path != null) m = h.path, p = n.find((w) => w.re.test(m)), p && (f = p.parse(m), g = p.record.name);
      else {
        if (p = d.name ? s.get(d.name) : n.find((w) => w.re.test(d.path)), !p) throw Yi(1, {
          location: h,
          currentLocation: d
        });
        g = p.record.name, f = Qe({}, d.params, h.params), m = p.stringify(f);
      }
      const y = [];
      let b = p;
      for (; b; ) y.unshift(b.record), b = b.parent;
      return {
        name: g,
        path: m,
        params: f,
        matched: y,
        meta: uO(y)
      };
    }
    t.forEach((h) => o(h));
    function u() {
      n.length = 0, s.clear();
    }
    return {
      addRoute: o,
      resolve: c,
      removeRoute: i,
      clearRoutes: u,
      getRoutes: a,
      getRecordMatcher: r
    };
  }
  function Y1(t, e) {
    const n = {};
    for (const s of e) s in t && (n[s] = t[s]);
    return n;
  }
  function Z1(t) {
    const e = {
      path: t.path,
      redirect: t.redirect,
      name: t.name,
      meta: t.meta || {},
      aliasOf: t.aliasOf,
      beforeEnter: t.beforeEnter,
      props: cO(t),
      children: t.children || [],
      instances: {},
      leaveGuards: /* @__PURE__ */ new Set(),
      updateGuards: /* @__PURE__ */ new Set(),
      enterCallbacks: {},
      components: "components" in t ? t.components || null : t.component && {
        default: t.component
      }
    };
    return Object.defineProperty(e, "mods", {
      value: {}
    }), e;
  }
  function cO(t) {
    const e = {}, n = t.props || false;
    if ("component" in t) e.default = n;
    else for (const s in t.components) e[s] = typeof n == "object" ? n[s] : n;
    return e;
  }
  function J1(t) {
    for (; t; ) {
      if (t.record.aliasOf) return true;
      t = t.parent;
    }
    return false;
  }
  function uO(t) {
    return t.reduce((e, n) => Qe(e, n.meta), {});
  }
  function Q1(t, e) {
    const n = {};
    for (const s in t) n[s] = s in e ? e[s] : t[s];
    return n;
  }
  function hO(t, e) {
    let n = 0, s = e.length;
    for (; n !== s; ) {
      const o = n + s >> 1;
      vC(t, e[o]) < 0 ? s = o : n = o + 1;
    }
    const r = dO(t);
    return r && (s = e.lastIndexOf(r, s - 1)), s;
  }
  function dO(t) {
    let e = t;
    for (; e = e.parent; ) if (SC(e) && vC(t, e) === 0) return e;
  }
  function SC({ record: t }) {
    return !!(t.name || t.components && Object.keys(t.components).length || t.redirect);
  }
  function pO(t) {
    const e = {};
    if (t === "" || t === "?") return e;
    const s = (t[0] === "?" ? t.slice(1) : t).split("&");
    for (let r = 0; r < s.length; ++r) {
      const o = s[r].replace(pC, " "), i = o.indexOf("="), a = uc(i < 0 ? o : o.slice(0, i)), l = i < 0 ? null : uc(o.slice(i + 1));
      if (a in e) {
        let c = e[a];
        _s(c) || (c = e[a] = [
          c
        ]), c.push(l);
      } else e[a] = l;
    }
    return e;
  }
  function ev(t) {
    let e = "";
    for (let n in t) {
      const s = t[n];
      if (n = DD(n), s == null) {
        s !== void 0 && (e += (e.length ? "&" : "") + n);
        continue;
      }
      (_s(s) ? s.map((o) => o && _g(o)) : [
        s && _g(s)
      ]).forEach((o) => {
        o !== void 0 && (e += (e.length ? "&" : "") + n, o != null && (e += "=" + o));
      });
    }
    return e;
  }
  function fO(t) {
    const e = {};
    for (const n in t) {
      const s = t[n];
      s !== void 0 && (e[n] = _s(s) ? s.map((r) => r == null ? null : "" + r) : s == null ? s : "" + s);
    }
    return e;
  }
  const mO = Symbol(""), tv = Symbol(""), Yy = Symbol(""), $C = Symbol(""), Og = Symbol("");
  function Al() {
    let t = [];
    function e(s) {
      return t.push(s), () => {
        const r = t.indexOf(s);
        r > -1 && t.splice(r, 1);
      };
    }
    function n() {
      t = [];
    }
    return {
      add: e,
      list: () => t.slice(),
      reset: n
    };
  }
  function Hr(t, e, n, s, r, o = (i) => i()) {
    const i = s && (s.enterCallbacks[r] = s.enterCallbacks[r] || []);
    return () => new Promise((a, l) => {
      const c = (d) => {
        d === false ? l(Yi(4, {
          from: n,
          to: e
        })) : d instanceof Error ? l(d) : QD(d) ? l(Yi(2, {
          from: e,
          to: d
        })) : (i && s.enterCallbacks[r] === i && typeof d == "function" && i.push(d), a());
      }, u = o(() => t.call(s && s.instances[r], e, n, c));
      let h = Promise.resolve(u);
      t.length < 3 && (h = h.then(c)), h.catch((d) => l(d));
    });
  }
  function eg(t, e, n, s, r = (o) => o()) {
    const o = [];
    for (const i of t) for (const a in i.components) {
      let l = i.components[a];
      if (!(e !== "beforeRouteEnter" && !i.instances[a])) if (hC(l)) {
        const u = (l.__vccOpts || l)[e];
        u && o.push(Hr(u, n, s, i, a, r));
      } else {
        let c = l();
        o.push(() => c.then((u) => {
          if (!u) throw new Error(`Couldn't resolve component "${a}" at "${i.path}"`);
          const h = SD(u) ? u.default : u;
          i.mods[a] = u, i.components[a] = h;
          const p = (h.__vccOpts || h)[e];
          return p && Hr(p, n, s, i, a, r)();
        }));
      }
    }
    return o;
  }
  function nv(t) {
    const e = Js(Yy), n = Js($C), s = ds(() => {
      const l = Vi(t.to);
      return e.resolve(l);
    }), r = ds(() => {
      const { matched: l } = s.value, { length: c } = l, u = l[c - 1], h = n.matched;
      if (!u || !h.length) return -1;
      const d = h.findIndex(Xi.bind(null, u));
      if (d > -1) return d;
      const p = sv(l[c - 2]);
      return c > 1 && sv(u) === p && h[h.length - 1].path !== p ? h.findIndex(Xi.bind(null, l[c - 2])) : d;
    }), o = ds(() => r.value > -1 && wO(n.params, s.value.params)), i = ds(() => r.value > -1 && r.value === n.matched.length - 1 && yC(n.params, s.value.params));
    function a(l = {}) {
      if (xO(l)) {
        const c = e[Vi(t.replace) ? "replace" : "push"](Vi(t.to)).catch(tc);
        return t.viewTransition && typeof document < "u" && "startViewTransition" in document && document.startViewTransition(() => c), c;
      }
      return Promise.resolve();
    }
    return {
      route: s,
      href: ds(() => s.value.href),
      isActive: o,
      isExactActive: i,
      navigate: a
    };
  }
  function gO(t) {
    return t.length === 1 ? t[0] : t;
  }
  const yO = A$({
    name: "RouterLink",
    compatConfig: {
      MODE: 3
    },
    props: {
      to: {
        type: [
          String,
          Object
        ],
        required: true
      },
      replace: Boolean,
      activeClass: String,
      exactActiveClass: String,
      custom: Boolean,
      ariaCurrentValue: {
        type: String,
        default: "page"
      }
    },
    useLink: nv,
    setup(t, { slots: e }) {
      const n = Dc(nv(t)), { options: s } = Js(Yy), r = ds(() => ({
        [rv(t.activeClass, s.linkActiveClass, "router-link-active")]: n.isActive,
        [rv(t.exactActiveClass, s.linkExactActiveClass, "router-link-exact-active")]: n.isExactActive
      }));
      return () => {
        const o = e.default && gO(e.default(n));
        return t.custom ? o : rC("a", {
          "aria-current": n.isExactActive ? t.ariaCurrentValue : null,
          href: n.href,
          onClick: n.navigate,
          class: r.value
        }, o);
      };
    }
  }), bO = yO;
  function xO(t) {
    if (!(t.metaKey || t.altKey || t.ctrlKey || t.shiftKey) && !t.defaultPrevented && !(t.button !== void 0 && t.button !== 0)) {
      if (t.currentTarget && t.currentTarget.getAttribute) {
        const e = t.currentTarget.getAttribute("target");
        if (/\b_blank\b/i.test(e)) return;
      }
      return t.preventDefault && t.preventDefault(), true;
    }
  }
  function wO(t, e) {
    for (const n in e) {
      const s = e[n], r = t[n];
      if (typeof s == "string") {
        if (s !== r) return false;
      } else if (!_s(r) || r.length !== s.length || s.some((o, i) => o !== r[i])) return false;
    }
    return true;
  }
  function sv(t) {
    return t ? t.aliasOf ? t.aliasOf.path : t.path : "";
  }
  const rv = (t, e, n) => t ?? e ?? n, vO = A$({
    name: "RouterView",
    inheritAttrs: false,
    props: {
      name: {
        type: String,
        default: "default"
      },
      route: Object
    },
    compatConfig: {
      MODE: 3
    },
    setup(t, { attrs: e, slots: n }) {
      const s = Js(Og), r = ds(() => t.route || s.value), o = Js(tv, 0), i = ds(() => {
        let c = Vi(o);
        const { matched: u } = r.value;
        let h;
        for (; (h = u[c]) && !h.components; ) c++;
        return c;
      }), a = ds(() => r.value.matched[i.value]);
      jh(tv, ds(() => i.value + 1)), jh(mO, a), jh(Og, r);
      const l = ap();
      return Jl(() => [
        l.value,
        a.value,
        t.name
      ], ([c, u, h], [d, p, f]) => {
        u && (u.instances[h] = c, p && p !== u && c && c === d && (u.leaveGuards.size || (u.leaveGuards = p.leaveGuards), u.updateGuards.size || (u.updateGuards = p.updateGuards))), c && u && (!p || !Xi(u, p) || !d) && (u.enterCallbacks[h] || []).forEach((m) => m(c));
      }, {
        flush: "post"
      }), () => {
        const c = r.value, u = t.name, h = a.value, d = h && h.components[u];
        if (!d) return ov(n.default, {
          Component: d,
          route: c
        });
        const p = h.props[u], f = p ? p === true ? c.params : typeof p == "function" ? p(c) : p : null, g = rC(d, Qe({}, f, e, {
          onVnodeUnmounted: (y) => {
            y.component.isUnmounted && (h.instances[u] = null);
          },
          ref: l
        }));
        return ov(n.default, {
          Component: g,
          route: c
        }) || g;
      };
    }
  });
  function ov(t, e) {
    if (!t) return null;
    const n = t(e);
    return n.length === 1 ? n[0] : n;
  }
  const SO = vO;
  function $O(t) {
    const e = lO(t.routes, t), n = t.parseQuery || pO, s = t.stringifyQuery || ev, r = t.history, o = Al(), i = Al(), a = Al(), l = hA(Br);
    let c = Br;
    Li && t.scrollBehavior && "scrollRestoration" in history && (history.scrollRestoration = "manual");
    const u = Jm.bind(null, (K) => "" + K), h = Jm.bind(null, FD), d = Jm.bind(null, uc);
    function p(K, oe) {
      let ne, ue;
      return xC(K) ? (ne = e.getRecordMatcher(K), ue = oe) : ue = K, e.addRoute(ue, ne);
    }
    function f(K) {
      const oe = e.getRecordMatcher(K);
      oe && e.removeRoute(oe);
    }
    function m() {
      return e.getRoutes().map((K) => K.record);
    }
    function g(K) {
      return !!e.getRecordMatcher(K);
    }
    function y(K, oe) {
      if (oe = Qe({}, oe || l.value), typeof K == "string") {
        const B = Qm(n, K, oe.path), Z = e.resolve({
          path: B.path
        }, oe), Q = r.createHref(B.fullPath);
        return Qe(B, Z, {
          params: d(Z.params),
          hash: uc(B.hash),
          redirectedFrom: void 0,
          href: Q
        });
      }
      let ne;
      if (K.path != null) ne = Qe({}, K, {
        path: Qm(n, K.path, oe.path).path
      });
      else {
        const B = Qe({}, K.params);
        for (const Z in B) B[Z] == null && delete B[Z];
        ne = Qe({}, K, {
          params: h(B)
        }), oe.params = h(oe.params);
      }
      const ue = e.resolve(ne, oe), Se = K.hash || "";
      ue.params = u(d(ue.params));
      const A = zD(s, Qe({}, K, {
        hash: _D(Se),
        path: ue.path
      })), _ = r.createHref(A);
      return Qe({
        fullPath: A,
        hash: Se,
        query: s === ev ? fO(K.query) : K.query || {}
      }, ue, {
        redirectedFrom: void 0,
        href: _
      });
    }
    function b(K) {
      return typeof K == "string" ? Qm(n, K, l.value.path) : Qe({}, K);
    }
    function w(K, oe) {
      if (c !== K) return Yi(8, {
        from: oe,
        to: K
      });
    }
    function x(K) {
      return E(K);
    }
    function S(K) {
      return x(Qe(b(K), {
        replace: true
      }));
    }
    function I(K) {
      const oe = K.matched[K.matched.length - 1];
      if (oe && oe.redirect) {
        const { redirect: ne } = oe;
        let ue = typeof ne == "function" ? ne(K) : ne;
        return typeof ue == "string" && (ue = ue.includes("?") || ue.includes("#") ? ue = b(ue) : {
          path: ue
        }, ue.params = {}), Qe({
          query: K.query,
          hash: K.hash,
          params: ue.path != null ? {} : K.params
        }, ue);
      }
    }
    function E(K, oe) {
      const ne = c = y(K), ue = l.value, Se = K.state, A = K.force, _ = K.replace === true, B = I(ne);
      if (B) return E(Qe(b(B), {
        state: typeof B == "object" ? Qe({}, Se, B.state) : Se,
        force: A,
        replace: _
      }), oe || ne);
      const Z = ne;
      Z.redirectedFrom = oe;
      let Q;
      return !A && MD(s, ue, ne) && (Q = Yi(16, {
        to: Z,
        from: ue
      }), se(ue, ue, true, false)), (Q ? Promise.resolve(Q) : k(Z, ue)).catch((ee) => pr(ee) ? pr(ee, 2) ? ee : te(ee) : G(ee, Z, ue)).then((ee) => {
        if (ee) {
          if (pr(ee, 2)) return E(Qe({
            replace: _
          }, b(ee.to), {
            state: typeof ee.to == "object" ? Qe({}, Se, ee.to.state) : Se,
            force: A
          }), oe || Z);
        } else ee = F(Z, ue, true, _, Se);
        return $(Z, ue, ee), ee;
      });
    }
    function R(K, oe) {
      const ne = w(K, oe);
      return ne ? Promise.reject(ne) : Promise.resolve();
    }
    function N(K) {
      const oe = fe.values().next().value;
      return oe && typeof oe.runWithContext == "function" ? oe.runWithContext(K) : K();
    }
    function k(K, oe) {
      let ne;
      const [ue, Se, A] = CO(K, oe);
      ne = eg(ue.reverse(), "beforeRouteLeave", K, oe);
      for (const B of ue) B.leaveGuards.forEach((Z) => {
        ne.push(Hr(Z, K, oe));
      });
      const _ = R.bind(null, K, oe);
      return ne.push(_), ye(ne).then(() => {
        ne = [];
        for (const B of o.list()) ne.push(Hr(B, K, oe));
        return ne.push(_), ye(ne);
      }).then(() => {
        ne = eg(Se, "beforeRouteUpdate", K, oe);
        for (const B of Se) B.updateGuards.forEach((Z) => {
          ne.push(Hr(Z, K, oe));
        });
        return ne.push(_), ye(ne);
      }).then(() => {
        ne = [];
        for (const B of A) if (B.beforeEnter) if (_s(B.beforeEnter)) for (const Z of B.beforeEnter) ne.push(Hr(Z, K, oe));
        else ne.push(Hr(B.beforeEnter, K, oe));
        return ne.push(_), ye(ne);
      }).then(() => (K.matched.forEach((B) => B.enterCallbacks = {}), ne = eg(A, "beforeRouteEnter", K, oe, N), ne.push(_), ye(ne))).then(() => {
        ne = [];
        for (const B of i.list()) ne.push(Hr(B, K, oe));
        return ne.push(_), ye(ne);
      }).catch((B) => pr(B, 8) ? B : Promise.reject(B));
    }
    function $(K, oe, ne) {
      a.list().forEach((ue) => N(() => ue(K, oe, ne)));
    }
    function F(K, oe, ne, ue, Se) {
      const A = w(K, oe);
      if (A) return A;
      const _ = oe === Br, B = Li ? history.state : {};
      ne && (ue || _ ? r.replace(K.fullPath, Qe({
        scroll: _ && B && B.scroll
      }, Se)) : r.push(K.fullPath, Se)), l.value = K, se(K, oe, ne, _), te();
    }
    let M;
    function U() {
      M || (M = r.listen((K, oe, ne) => {
        if (!pe.listening) return;
        const ue = y(K), Se = I(ue);
        if (Se) {
          E(Qe(Se, {
            replace: true,
            force: true
          }), ue).catch(tc);
          return;
        }
        c = ue;
        const A = l.value;
        Li && qD(H1(A.fullPath, ne.delta), mp()), k(ue, A).catch((_) => pr(_, 12) ? _ : pr(_, 2) ? (E(Qe(b(_.to), {
          force: true
        }), ue).then((B) => {
          pr(B, 20) && !ne.delta && ne.type === hc.pop && r.go(-1, false);
        }).catch(tc), Promise.reject()) : (ne.delta && r.go(-ne.delta, false), G(_, ue, A))).then((_) => {
          _ = _ || F(ue, A, false), _ && (ne.delta && !pr(_, 8) ? r.go(-ne.delta, false) : ne.type === hc.pop && pr(_, 20) && r.go(-1, false)), $(ue, A, _);
        }).catch(tc);
      }));
    }
    let W = Al(), V = Al(), H;
    function G(K, oe, ne) {
      te(K);
      const ue = V.list();
      return ue.length ? ue.forEach((Se) => Se(K, oe, ne)) : console.error(K), Promise.reject(K);
    }
    function Y() {
      return H && l.value !== Br ? Promise.resolve() : new Promise((K, oe) => {
        W.add([
          K,
          oe
        ]);
      });
    }
    function te(K) {
      return H || (H = !K, U(), W.list().forEach(([oe, ne]) => K ? ne(K) : oe()), W.reset()), K;
    }
    function se(K, oe, ne, ue) {
      const { scrollBehavior: Se } = t;
      if (!Li || !Se) return Promise.resolve();
      const A = !ne && KD(H1(K.fullPath, 0)) || (ue || !ne) && history.state && history.state.scroll || null;
      return cp().then(() => Se(K, oe, A)).then((_) => _ && jD(_)).catch((_) => G(_, K, oe));
    }
    const re = (K) => r.go(K);
    let ie;
    const fe = /* @__PURE__ */ new Set(), pe = {
      currentRoute: l,
      listening: true,
      addRoute: p,
      removeRoute: f,
      clearRoutes: e.clearRoutes,
      hasRoute: g,
      getRoutes: m,
      resolve: y,
      options: t,
      push: x,
      replace: S,
      go: re,
      back: () => re(-1),
      forward: () => re(1),
      beforeEach: o.add,
      beforeResolve: i.add,
      afterEach: a.add,
      onError: V.add,
      isReady: Y,
      install(K) {
        const oe = this;
        K.component("RouterLink", bO), K.component("RouterView", SO), K.config.globalProperties.$router = oe, Object.defineProperty(K.config.globalProperties, "$route", {
          enumerable: true,
          get: () => Vi(l)
        }), Li && !ie && l.value === Br && (ie = true, x(r.location).catch((Se) => {
        }));
        const ne = {};
        for (const Se in Br) Object.defineProperty(ne, Se, {
          get: () => l.value[Se],
          enumerable: true
        });
        K.provide(Yy, oe), K.provide($C, b$(ne)), K.provide(Og, l);
        const ue = K.unmount;
        fe.add(K), K.unmount = function() {
          fe.delete(K), fe.size < 1 && (c = Br, M && M(), M = null, l.value = Br, ie = false, H = false), ue();
        };
      }
    };
    function ye(K) {
      return K.reduce((oe, ne) => oe.then(() => N(ne)), Promise.resolve());
    }
    return pe;
  }
  function CO(t, e) {
    const n = [], s = [], r = [], o = Math.max(e.matched.length, t.matched.length);
    for (let i = 0; i < o; i++) {
      const a = e.matched[i];
      a && (t.matched.find((c) => Xi(c, a)) ? s.push(a) : n.push(a));
      const l = t.matched[i];
      l && (e.matched.find((c) => Xi(c, l)) || r.push(l));
    }
    return [
      n,
      s,
      r
    ];
  }
  const IO = $O({
    history: JD("/tfjs_model_tester"),
    routes: [
      {
        path: "/",
        name: "home",
        component: () => uC(() => import("./ModelPerformanceTest-zQ3DIqG6.js").then(async (m) => {
          await m.__tla;
          return m;
        }).then((t) => t.ap), __vite__mapDeps([0,1,2]))
      }
    ]
  });
  const NO = 1e-7, kO = 1e-4;
  Zy = class {
    constructor(e, n) {
      this.backend = e, this.dataMover = n, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
    }
    get(e) {
      return this.data.has(e) || this.dataMover.moveData(this.backend, e), this.data.get(e);
    }
    set(e, n) {
      this.dataIdsCount++, this.data.set(e, n);
    }
    has(e) {
      return this.data.has(e);
    }
    delete(e) {
      return this.dataIdsCount--, this.data.delete(e);
    }
    numDataIds() {
      return this.dataIdsCount;
    }
  };
  gp = class {
    refCount(e) {
      return zn("refCount");
    }
    incRef(e) {
      return zn("incRef");
    }
    timerAvailable() {
      return true;
    }
    time(e) {
      return zn("time");
    }
    read(e) {
      return zn("read");
    }
    readSync(e) {
      return zn("readSync");
    }
    readToGPU(e, n) {
      return zn("readToGPU");
    }
    numDataIds() {
      return zn("numDataIds");
    }
    disposeData(e, n) {
      return zn("disposeData");
    }
    write(e, n, s) {
      return zn("write");
    }
    move(e, n, s, r, o) {
      return zn("move");
    }
    createTensorFromGPUData(e, n, s) {
      return zn("createTensorFromGPUData");
    }
    memory() {
      return zn("memory");
    }
    floatPrecision() {
      return zn("floatPrecision");
    }
    epsilon() {
      return this.floatPrecision() === 32 ? NO : kO;
    }
    dispose() {
      return zn("dispose");
    }
  };
  function zn(t) {
    throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
  }
  function Jy(t) {
    let e = t.length, n = 0;
    for (; e > 0; ) n = Math.random() * e | 0, e--, wr(t, e, n);
  }
  function TO(t, e) {
    if (t.length !== e.length) throw new Error(`Array sizes must match to be shuffled together First array length was ${t.length}Second array length was ${e.length}`);
    let n = t.length, s = 0;
    for (; n > 0; ) s = Math.random() * n | 0, n--, wr(t, n, s), wr(e, n, s);
  }
  function ro(t, e, n) {
    return Math.max(t, Math.min(e, n));
  }
  function yp(t) {
    return t % 2 === 0 ? t : t + 1;
  }
  function wr(t, e, n) {
    const s = t[e];
    t[e] = t[n], t[n] = s;
  }
  CC = function(t) {
    let e = 0;
    for (let n = 0; n < t.length; n++) e += t[n];
    return e;
  };
  function EO(t, e) {
    const n = Math.random();
    return e * n + (1 - n) * t;
  }
  function RO(t, e) {
    let n = 0;
    for (let s = 0; s < t.length; s++) {
      const r = Number(t[s]) - Number(e[s]);
      n += r * r;
    }
    return n;
  }
  C = function(t, e) {
    if (!t) throw new Error(typeof e == "string" ? e : e());
  };
  nn = function(t, e, n = "") {
    C(Ue(t, e), () => n + ` Shapes ${t} and ${e} must match`);
  };
  function gi(t) {
    C(t != null, () => "The input to the tensor constructor must be a non-null value.");
  }
  X = function(t) {
    if (t.length === 0) return 1;
    let e = t[0];
    for (let n = 1; n < t.length; n++) e *= t[n];
    return e;
  };
  AO = function(t) {
    return t.length === 0;
  };
  function IC(t, e) {
    if (t === e) return true;
    if (t == null || e == null || t.length !== e.length) return false;
    for (let n = 0; n < t.length; n++) if (t[n] !== null && e[n] !== null && t[n] !== e[n]) return false;
    return true;
  }
  Ue = function(t, e) {
    if (t === e) return true;
    if (t == null || e == null || t.length !== e.length) return false;
    for (let n = 0; n < t.length; n++) if (t[n] !== e[n]) return false;
    return true;
  };
  function Jo(t) {
    return t % 1 === 0;
  }
  function _O(t) {
    if (Math.tanh != null) return Math.tanh(t);
    if (t === 1 / 0) return 1;
    if (t === -1 / 0) return -1;
    {
      const e = Math.exp(2 * t);
      return (e - 1) / (e + 1);
    }
  }
  function Sd(t) {
    const e = Math.ceil(Math.sqrt(t));
    return [
      e,
      Math.ceil(t / e)
    ];
  }
  function DO(t) {
    const e = new Uint32Array(t);
    for (let n = 0; n < t; ++n) e[n] = n;
    return Jy(e), e;
  }
  function jo(t, e) {
    return e <= t.length ? t : t + " ".repeat(e - t.length);
  }
  function Fg(t, e = (r) => 0, n, s) {
    return new Promise((r, o) => {
      let i = 0;
      const a = () => {
        if (t()) {
          r();
          return;
        }
        i++;
        const l = e(i);
        if (n != null && i >= n) {
          o();
          return;
        }
        s != null ? s(a, l) : setTimeout(a, l);
      };
      a();
    });
  }
  Qy = function(t, e) {
    let n = 1, s = -1;
    for (let o = 0; o < t.length; ++o) if (t[o] >= 0) n *= t[o];
    else if (t[o] === -1) {
      if (s !== -1) throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`);
      s = o;
    } else if (t[o] < 0) throw Error(`Shapes can not be < 0. Found ${t[o]} at dim ${o}`);
    if (s === -1) {
      if (e > 0 && e !== n) throw Error(`Size(${e}) must match the product of shape ${t}`);
      return t;
    }
    if (n === 0) throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);
    if (e % n !== 0) throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);
    const r = t.slice();
    return r[s] = e / n, r;
  };
  Ve = function(t, e) {
    const n = e.length;
    return t = t == null ? e.map((s, r) => r) : [].concat(t), C(t.every((s) => s >= -n && s < n), () => `All values in axis param must be in range [-${n}, ${n}) but got axis ${t}`), C(t.every((s) => Jo(s)), () => `All values in axis param must be integers but got axis ${t}`), t.map((s) => s < 0 ? n + s : s);
  };
  function Ar(t, e) {
    const n = [], s = [], r = e != null && Array.isArray(e) && e.length === 0, o = e == null || r ? null : Ve(e, t).sort();
    let i = 0;
    for (let a = 0; a < t.length; ++a) {
      if (o != null) {
        if (o[i] === a && t[a] !== 1) throw new Error(`Can't squeeze axis ${a} since its dim '${t[a]}' is not 1`);
        (o[i] == null || o[i] > a) && t[a] === 1 && (n.push(t[a]), s.push(a)), o[i] <= a && i++;
      }
      t[a] !== 1 && (n.push(t[a]), s.push(a));
    }
    return {
      newShape: n,
      keptDims: s
    };
  }
  Ut = function(t, e) {
    return xt(t, e);
  };
  xt = function(t, e) {
    let n = null;
    if (t == null || t === "float32") n = new Float32Array(e);
    else if (t === "int32") n = new Int32Array(e);
    else if (t === "bool") n = new Uint8Array(e);
    else if (t === "string") n = new Array(e);
    else throw new Error(`Unknown data type ${t}`);
    return n;
  };
  function NC(t, e) {
    for (let n = 0; n < t.length; n++) {
      const s = t[n];
      if (isNaN(s) || !isFinite(s)) throw Error(`A tensor of type ${e} being uploaded contains ${s}.`);
    }
  }
  function kC(t) {
    return t === "bool" || t === "complex64" || t === "float32" || t === "int32" || t === "string";
  }
  eb = function(t, e) {
    return !(e === "complex64" || e === "float32" && t !== "complex64" || e === "int32" && t !== "float32" && t !== "complex64" || e === "bool" && t === "bool");
  };
  dc = function(t) {
    if (t === "float32" || t === "int32") return 4;
    if (t === "complex64") return 8;
    if (t === "bool") return 1;
    throw new Error(`Unknown dtype ${t}`);
  };
  function TC(t) {
    if (t == null) return 0;
    let e = 0;
    return t.forEach((n) => e += n.length), e;
  }
  Xs = function(t) {
    return typeof t == "string" || t instanceof String;
  };
  function EC(t) {
    return typeof t == "boolean";
  }
  function $d(t) {
    return typeof t == "number";
  }
  yi = function(t) {
    return Array.isArray(t) ? yi(t[0]) : t instanceof Float32Array ? "float32" : t instanceof Int32Array || t instanceof Uint8Array || t instanceof Uint8ClampedArray ? "int32" : $d(t) ? "float32" : Xs(t) ? "string" : EC(t) ? "bool" : "float32";
  };
  function oo(t) {
    return !!(t && t.constructor && t.call && t.apply);
  }
  function Cd(t, e) {
    for (let n = e; n < t; ++n) if (t % n === 0) return n;
    return t;
  }
  Ee = function(t) {
    const e = t.length;
    if (e < 2) return [];
    const n = new Array(e - 1);
    n[e - 2] = t[e - 1];
    for (let s = e - 3; s >= 0; --s) n[s] = n[s + 1] * t[s + 1];
    return n;
  };
  function RC(t, e, n, s = false) {
    const r = new Array();
    if (e.length === 1) {
      const o = e[0] * (s ? 2 : 1);
      for (let i = 0; i < o; i++) r[i] = n[t + i];
    } else {
      const o = e[0], i = e.slice(1), a = i.reduce((l, c) => l * c) * (s ? 2 : 1);
      for (let l = 0; l < o; l++) r[l] = RC(t + l * a, i, n, s);
    }
    return r;
  }
  function ns(t, e, n = false) {
    if (t.length === 0) return e[0];
    const s = t.reduce((r, o) => r * o) * (n ? 2 : 1);
    if (s === 0) return [];
    if (s !== e.length) throw new Error(`[${t}] does not match the input size ${e.length}${n ? " for a complex tensor" : ""}.`);
    return RC(0, t, e, n);
  }
  AC = function(t, e) {
    if (Array.isArray(t)) return t;
    if (e === "float32") return t instanceof Float32Array ? t : new Float32Array(t);
    if (e === "int32") return t instanceof Int32Array ? t : new Int32Array(t);
    if (e === "bool" || e === "string") return Uint8Array.from(new Int32Array(t));
    throw new Error(`Unknown dtype ${e}`);
  };
  function bp(t, e) {
    const n = tn(t, e);
    for (let s = 0; s < n.length; s++) n[s] = 1;
    return n;
  }
  tn = function(t, e) {
    if (e == null || e === "float32" || e === "complex64") return new Float32Array(t);
    if (e === "int32") return new Int32Array(t);
    if (e === "bool") return new Uint8Array(t);
    throw new Error(`Unknown data type ${e}`);
  };
  function tb(t, e) {
    const n = t.reduce((s, r) => s * r, 1);
    if (e == null || e === "float32") return ns(t, new Float32Array(n));
    if (e === "int32") return ns(t, new Int32Array(n));
    if (e === "bool") return ns(t, new Uint8Array(n));
    throw new Error(`Unknown data type ${e}`);
  }
  function Kn(t) {
    t.forEach((e) => {
      C(Number.isInteger(e) && e >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${t}].`);
    });
  }
  function ks(t, e, n) {
    if (e === 0) return 0;
    if (e === 1) return t[0];
    let s = t[t.length - 1];
    for (let r = 0; r < t.length - 1; ++r) s += n[r] * t[r];
    return s;
  }
  function bi(t, e, n) {
    if (e === 0) return [];
    if (e === 1) return [
      t
    ];
    const s = new Array(e);
    for (let r = 0; r < s.length - 1; ++r) s[r] = Math.floor(t / n[r]), t -= s[r] * n[r];
    return s[s.length - 1] = t, s;
  }
  function $r(t) {
    return t && t.then && typeof t.then == "function";
  }
  const iv = "tfjsflags";
  class _C {
    constructor(e) {
      this.global = e, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = OO, this.populateURLFlags();
    }
    setPlatform(e, n) {
      this.platform != null && (j().getBool("IS_TEST") || j().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)), this.platformName = e, this.platform = n;
    }
    registerFlag(e, n, s) {
      if (this.flagRegistry[e] = {
        evaluationFn: n,
        setHook: s
      }, this.urlFlags[e] != null) {
        const r = this.urlFlags[e];
        j().getBool("IS_TEST") || j().getBool("PROD") || console.warn(`Setting feature override from URL ${e}: ${r}.`), this.set(e, r);
      }
    }
    async getAsync(e) {
      return e in this.flags ? this.flags[e] : (this.flags[e] = await this.evaluateFlag(e), this.flags[e]);
    }
    get(e) {
      if (e in this.flags) return this.flags[e];
      const n = this.evaluateFlag(e);
      if ($r(n)) throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);
      return this.flags[e] = n, this.flags[e];
    }
    getNumber(e) {
      return this.get(e);
    }
    getBool(e) {
      return this.get(e);
    }
    getString(e) {
      return this.get(e);
    }
    getFlags() {
      return this.flags;
    }
    get features() {
      return this.flags;
    }
    set(e, n) {
      if (this.flagRegistry[e] == null) throw new Error(`Cannot set flag ${e} as it has not been registered.`);
      this.flags[e] = n, this.flagRegistry[e].setHook != null && this.flagRegistry[e].setHook(n);
    }
    evaluateFlag(e) {
      if (this.flagRegistry[e] == null) throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);
      return this.flagRegistry[e].evaluationFn();
    }
    setFlags(e) {
      this.flags = Object.assign({}, e);
    }
    reset() {
      this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
    }
    populateURLFlags() {
      if (typeof this.global > "u" || typeof this.global.location > "u" || typeof this.global.location.search > "u") return;
      const e = this.getQueryParams(this.global.location.search);
      iv in e && e[iv].split(",").forEach((s) => {
        const [r, o] = s.split(":");
        this.urlFlags[r] = LO(r, o);
      });
    }
  }
  function OO(t) {
    const e = {};
    return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (n, ...s) => (FO(e, s[0], s[1]), s.join("="))), e;
  }
  function FO(t, e, n) {
    t[decodeURIComponent(e)] = decodeURIComponent(n || "");
  }
  function LO(t, e) {
    const n = e.toLowerCase();
    return n === "true" || n === "false" ? n === "true" : `${+n}` === n ? +n : e;
  }
  j = function() {
    return nb;
  };
  let nb = null;
  function PO(t) {
    nb = t;
  }
  let tg;
  function DC() {
    if (tg == null) {
      let t;
      if (typeof window < "u") t = window;
      else if (typeof global < "u") t = global;
      else if (typeof process < "u") t = process;
      else if (typeof self < "u") t = self;
      else throw new Error("Could not find a global object");
      tg = t;
    }
    return tg;
  }
  function zO() {
    const t = DC();
    return t._tfGlobals == null && (t._tfGlobals = /* @__PURE__ */ new Map()), t._tfGlobals;
  }
  function sb(t, e) {
    const n = zO();
    if (n.has(t)) return n.get(t);
    {
      const s = e();
      return n.set(t, s), n.get(t);
    }
  }
  let OC, FC, BO, VO, WO, ef, tf, nf, Fu, UO;
  Lc = "Abs";
  ha = "Acos";
  da = "Acosh";
  xi = "Add";
  Pc = "AddN";
  xp = "All";
  wp = "Any";
  zc = "ArgMax";
  Mc = "ArgMin";
  pa = "Asin";
  fa = "Asinh";
  ma = "Atan";
  ga = "Atanh";
  ya = "Atan2";
  Bc = "AvgPool";
  vp = "AvgPoolGrad";
  Vc = "AvgPool3D";
  Sp = "AvgPool3DGrad";
  Wc = "BatchMatMul";
  Uc = "BatchToSpaceND";
  $p = "Bincount";
  Gc = "BitwiseAnd";
  OC = "BroadcastTo";
  Cp = "BroadcastArgs";
  ba = "Cast";
  xa = "Ceil";
  wa = "ClipByValue";
  Ip = "Complex";
  Hc = "ComplexAbs";
  jc = "Concat";
  qc = "Conv2D";
  Np = "Conv2DBackpropFilter";
  Kc = "Conv2DBackpropInput";
  Xc = "Conv3D";
  kp = "Conv3DBackpropFilterV2";
  Tp = "Conv3DBackpropInputV2";
  va = "Cos";
  Sa = "Cosh";
  Ep = "Cumprod";
  Yc = "Cumsum";
  Rp = "CropAndResize";
  Ap = "DenseBincount";
  _p = "DepthToSpace";
  Zc = "DepthwiseConv2dNative";
  Dp = "DepthwiseConv2dNativeBackpropFilter";
  Op = "DepthwiseConv2dNativeBackpropInput";
  Fp = "Diag";
  Jc = "Dilation2D";
  Id = "Dilation2DBackpropInput";
  Nd = "Dilation2DBackpropFilter";
  Lp = "Draw";
  $a = "RealDiv";
  Pp = "Einsum";
  Ca = "Elu";
  zp = "EluGrad";
  Ia = "Erf";
  Qc = "Equal";
  Na = "Exp";
  eu = "ExpandDims";
  ka = "Expm1";
  Mp = "FFT";
  Bp = "Fill";
  Vp = "FlipLeftRight";
  Ta = "Floor";
  Ea = "FloorDiv";
  tu = "FusedBatchNorm";
  nu = "GatherV2";
  Wp = "GatherNd";
  su = "Greater";
  Ra = "GreaterEqual";
  Aa = "Identity";
  Up = "IFFT";
  Gp = "Imag";
  _a = "IsFinite";
  Da = "IsInf";
  Oa = "IsNan";
  ru = "LeakyRelu";
  ou = "Less";
  iu = "LessEqual";
  Hp = "LinSpace";
  Fa = "Log";
  La = "Log1p";
  au = "LogicalAnd";
  lu = "LogicalNot";
  cu = "LogicalOr";
  MO = "LogicalXor";
  FC = "LogSoftmax";
  BO = "LowerBound";
  uu = "LRN";
  jp = "LRNGrad";
  VO = "MatrixBandPart";
  hu = "Max";
  Pa = "Maximum";
  du = "MaxPool";
  qp = "MaxPoolGrad";
  pu = "MaxPool3D";
  Kp = "MaxPool3DGrad";
  Xp = "MaxPoolWithArgmax";
  fu = "Mean";
  mu = "Min";
  za = "Minimum";
  gu = "MirrorPad";
  Ma = "Mod";
  Yp = "Multinomial";
  Ba = "Multiply";
  yu = "Neg";
  bu = "NotEqual";
  Zp = "NonMaxSuppressionV3";
  Jp = "NonMaxSuppressionV4";
  Qp = "NonMaxSuppressionV5";
  xu = "OnesLike";
  wu = "OneHot";
  vu = "Pack";
  Su = "PadV2";
  WO = "Pool";
  Va = "Pow";
  $u = "Prelu";
  Cu = "Prod";
  ef = "RaggedGather";
  tf = "RaggedRange";
  nf = "RaggedTensorToTensor";
  sf = "Range";
  rf = "Real";
  Wa = "Reciprocal";
  Ua = "Relu";
  Iu = "Reshape";
  Nu = "ResizeNearestNeighbor";
  of = "ResizeNearestNeighborGrad";
  ku = "ResizeBilinear";
  af = "ResizeBilinearGrad";
  Ga = "Relu6";
  Tu = "Reverse";
  Ha = "Round";
  ja = "Rsqrt";
  lf = "ScatterNd";
  cf = "TensorScatterUpdate";
  uf = "SearchSorted";
  Eu = "Select";
  qa = "Selu";
  Ru = "Slice";
  Ka = "Sin";
  Xa = "Sinh";
  Ya = "Sign";
  Za = "Sigmoid";
  Ja = "Softplus";
  Qa = "Sqrt";
  Au = "Sum";
  _u = "SpaceToBatchND";
  Du = "SplitV";
  Ou = "Softmax";
  hf = "SparseFillEmptyRows";
  df = "SparseReshape";
  pf = "SparseSegmentMean";
  ff = "SparseSegmentSum";
  mf = "SparseToDense";
  el = "SquaredDifference";
  gf = "Square";
  Fu = "StaticRegexReplace";
  yf = "StridedSlice";
  bf = "StringNGrams";
  xf = "StringSplit";
  wf = "StringToHashBucketFast";
  tl = "Sub";
  nl = "Tan";
  sl = "Tanh";
  rl = "Tile";
  vf = "TopK";
  Sf = "Transform";
  qo = "Transpose";
  $f = "Unique";
  Lu = "Unpack";
  Pu = "UnsortedSegmentSum";
  UO = "UpperBound";
  zu = "ZerosLike";
  ol = "Step";
  kd = "FromPixels";
  Cf = "RotateWithOffset";
  pc = "_FusedMatMul";
  fc = "FusedConv2D";
  mc = "FusedDepthwiseConv2D";
  function Yn(...t) {
    j().getBool("IS_TEST") || j().getBool("PROD") || console.warn(...t);
  }
  function GO(...t) {
    j().getBool("IS_TEST") || j().getBool("PROD") || console.log(...t);
  }
  const Zi = sb("kernelRegistry", () => /* @__PURE__ */ new Map()), gc = sb("gradRegistry", () => /* @__PURE__ */ new Map());
  function yc(t, e) {
    const n = rb(t, e);
    return Zi.get(n);
  }
  function Lg(t) {
    return gc.get(t);
  }
  function Td(t) {
    const e = Zi.entries(), n = [];
    for (; ; ) {
      const { done: s, value: r } = e.next();
      if (s) break;
      const [o, i] = r, [a] = o.split("_");
      a === t && n.push(i);
    }
    return n;
  }
  If = function(t) {
    const { kernelName: e, backendName: n } = t, s = rb(e, n);
    Zi.has(s) && Yn(`The kernel '${e}' for backend '${n}' is already registered`), Zi.set(s, t);
  };
  function LC(t) {
    const { kernelName: e } = t;
    gc.has(e) && j().getBool("DEBUG") && Yn(`Overriding the gradient for '${e}'`), gc.set(e, t);
  }
  function HO(t, e) {
    const n = rb(t, e);
    if (!Zi.has(n)) throw new Error(`The kernel '${t}' for backend '${e}' is not registered`);
    Zi.delete(n);
  }
  function jO(t) {
    if (!gc.has(t)) throw new Error(`The gradient '${t}' for backend is not registered`);
    gc.delete(t);
  }
  function qO(t, e) {
    Td(t).forEach((s) => {
      const r = Object.assign({}, s, {
        backendName: e
      });
      If(r);
    });
  }
  function rb(t, e) {
    return `${e}_${t}`;
  }
  function PC(t) {
    return t instanceof Float32Array || t instanceof Int32Array || t instanceof Uint8Array || t instanceof Uint8ClampedArray;
  }
  mle = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
  KO = function(t) {
    return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
  };
  function XO(t) {
    if (Object.prototype.hasOwnProperty.call(t, "__esModule")) return t;
    var e = t.default;
    if (typeof e == "function") {
      var n = function s() {
        return this instanceof s ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
      };
      n.prototype = e.prototype;
    } else n = {};
    return Object.defineProperty(n, "__esModule", {
      value: true
    }), Object.keys(t).forEach(function(s) {
      var r = Object.getOwnPropertyDescriptor(t, s);
      Object.defineProperty(n, s, r.get ? r : {
        enumerable: true,
        get: function() {
          return t[s];
        }
      });
    }), n;
  }
  var ng, av;
  function YO() {
    if (av) return ng;
    av = 1, ng = e;
    var t = null;
    try {
      t = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
        0,
        97,
        115,
        109,
        1,
        0,
        0,
        0,
        1,
        13,
        2,
        96,
        0,
        1,
        127,
        96,
        4,
        127,
        127,
        127,
        127,
        1,
        127,
        3,
        7,
        6,
        0,
        1,
        1,
        1,
        1,
        1,
        6,
        6,
        1,
        127,
        1,
        65,
        0,
        11,
        7,
        50,
        6,
        3,
        109,
        117,
        108,
        0,
        1,
        5,
        100,
        105,
        118,
        95,
        115,
        0,
        2,
        5,
        100,
        105,
        118,
        95,
        117,
        0,
        3,
        5,
        114,
        101,
        109,
        95,
        115,
        0,
        4,
        5,
        114,
        101,
        109,
        95,
        117,
        0,
        5,
        8,
        103,
        101,
        116,
        95,
        104,
        105,
        103,
        104,
        0,
        0,
        10,
        191,
        1,
        6,
        4,
        0,
        35,
        0,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        126,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        127,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        128,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        129,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        130,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11
      ])), {}).exports;
    } catch {
    }
    function e(k, $, F) {
      this.low = k | 0, this.high = $ | 0, this.unsigned = !!F;
    }
    e.prototype.__isLong__, Object.defineProperty(e.prototype, "__isLong__", {
      value: true
    });
    function n(k) {
      return (k && k.__isLong__) === true;
    }
    e.isLong = n;
    var s = {}, r = {};
    function o(k, $) {
      var F, M, U;
      return $ ? (k >>>= 0, (U = 0 <= k && k < 256) && (M = r[k], M) ? M : (F = a(k, (k | 0) < 0 ? -1 : 0, true), U && (r[k] = F), F)) : (k |= 0, (U = -128 <= k && k < 128) && (M = s[k], M) ? M : (F = a(k, k < 0 ? -1 : 0, false), U && (s[k] = F), F));
    }
    e.fromInt = o;
    function i(k, $) {
      if (isNaN(k)) return $ ? b : y;
      if ($) {
        if (k < 0) return b;
        if (k >= f) return E;
      } else {
        if (k <= -9223372036854776e3) return R;
        if (k + 1 >= m) return I;
      }
      return k < 0 ? i(-k, $).neg() : a(k % p | 0, k / p | 0, $);
    }
    e.fromNumber = i;
    function a(k, $, F) {
      return new e(k, $, F);
    }
    e.fromBits = a;
    var l = Math.pow;
    function c(k, $, F) {
      if (k.length === 0) throw Error("empty string");
      if (k === "NaN" || k === "Infinity" || k === "+Infinity" || k === "-Infinity") return y;
      if (typeof $ == "number" ? (F = $, $ = false) : $ = !!$, F = F || 10, F < 2 || 36 < F) throw RangeError("radix");
      var M;
      if ((M = k.indexOf("-")) > 0) throw Error("interior hyphen");
      if (M === 0) return c(k.substring(1), $, F).neg();
      for (var U = i(l(F, 8)), W = y, V = 0; V < k.length; V += 8) {
        var H = Math.min(8, k.length - V), G = parseInt(k.substring(V, V + H), F);
        if (H < 8) {
          var Y = i(l(F, H));
          W = W.mul(Y).add(i(G));
        } else W = W.mul(U), W = W.add(i(G));
      }
      return W.unsigned = $, W;
    }
    e.fromString = c;
    function u(k, $) {
      return typeof k == "number" ? i(k, $) : typeof k == "string" ? c(k, $) : a(k.low, k.high, typeof $ == "boolean" ? $ : k.unsigned);
    }
    e.fromValue = u;
    var h = 65536, d = 1 << 24, p = h * h, f = p * p, m = f / 2, g = o(d), y = o(0);
    e.ZERO = y;
    var b = o(0, true);
    e.UZERO = b;
    var w = o(1);
    e.ONE = w;
    var x = o(1, true);
    e.UONE = x;
    var S = o(-1);
    e.NEG_ONE = S;
    var I = a(-1, 2147483647, false);
    e.MAX_VALUE = I;
    var E = a(-1, -1, true);
    e.MAX_UNSIGNED_VALUE = E;
    var R = a(0, -2147483648, false);
    e.MIN_VALUE = R;
    var N = e.prototype;
    return N.toInt = function() {
      return this.unsigned ? this.low >>> 0 : this.low;
    }, N.toNumber = function() {
      return this.unsigned ? (this.high >>> 0) * p + (this.low >>> 0) : this.high * p + (this.low >>> 0);
    }, N.toString = function($) {
      if ($ = $ || 10, $ < 2 || 36 < $) throw RangeError("radix");
      if (this.isZero()) return "0";
      if (this.isNegative()) if (this.eq(R)) {
        var F = i($), M = this.div(F), U = M.mul(F).sub(this);
        return M.toString($) + U.toInt().toString($);
      } else return "-" + this.neg().toString($);
      for (var W = i(l($, 6), this.unsigned), V = this, H = ""; ; ) {
        var G = V.div(W), Y = V.sub(G.mul(W)).toInt() >>> 0, te = Y.toString($);
        if (V = G, V.isZero()) return te + H;
        for (; te.length < 6; ) te = "0" + te;
        H = "" + te + H;
      }
    }, N.getHighBits = function() {
      return this.high;
    }, N.getHighBitsUnsigned = function() {
      return this.high >>> 0;
    }, N.getLowBits = function() {
      return this.low;
    }, N.getLowBitsUnsigned = function() {
      return this.low >>> 0;
    }, N.getNumBitsAbs = function() {
      if (this.isNegative()) return this.eq(R) ? 64 : this.neg().getNumBitsAbs();
      for (var $ = this.high != 0 ? this.high : this.low, F = 31; F > 0 && ($ & 1 << F) == 0; F--) ;
      return this.high != 0 ? F + 33 : F + 1;
    }, N.isZero = function() {
      return this.high === 0 && this.low === 0;
    }, N.eqz = N.isZero, N.isNegative = function() {
      return !this.unsigned && this.high < 0;
    }, N.isPositive = function() {
      return this.unsigned || this.high >= 0;
    }, N.isOdd = function() {
      return (this.low & 1) === 1;
    }, N.isEven = function() {
      return (this.low & 1) === 0;
    }, N.equals = function($) {
      return n($) || ($ = u($)), this.unsigned !== $.unsigned && this.high >>> 31 === 1 && $.high >>> 31 === 1 ? false : this.high === $.high && this.low === $.low;
    }, N.eq = N.equals, N.notEquals = function($) {
      return !this.eq($);
    }, N.neq = N.notEquals, N.ne = N.notEquals, N.lessThan = function($) {
      return this.comp($) < 0;
    }, N.lt = N.lessThan, N.lessThanOrEqual = function($) {
      return this.comp($) <= 0;
    }, N.lte = N.lessThanOrEqual, N.le = N.lessThanOrEqual, N.greaterThan = function($) {
      return this.comp($) > 0;
    }, N.gt = N.greaterThan, N.greaterThanOrEqual = function($) {
      return this.comp($) >= 0;
    }, N.gte = N.greaterThanOrEqual, N.ge = N.greaterThanOrEqual, N.compare = function($) {
      if (n($) || ($ = u($)), this.eq($)) return 0;
      var F = this.isNegative(), M = $.isNegative();
      return F && !M ? -1 : !F && M ? 1 : this.unsigned ? $.high >>> 0 > this.high >>> 0 || $.high === this.high && $.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub($).isNegative() ? -1 : 1;
    }, N.comp = N.compare, N.negate = function() {
      return !this.unsigned && this.eq(R) ? R : this.not().add(w);
    }, N.neg = N.negate, N.add = function($) {
      n($) || ($ = u($));
      var F = this.high >>> 16, M = this.high & 65535, U = this.low >>> 16, W = this.low & 65535, V = $.high >>> 16, H = $.high & 65535, G = $.low >>> 16, Y = $.low & 65535, te = 0, se = 0, re = 0, ie = 0;
      return ie += W + Y, re += ie >>> 16, ie &= 65535, re += U + G, se += re >>> 16, re &= 65535, se += M + H, te += se >>> 16, se &= 65535, te += F + V, te &= 65535, a(re << 16 | ie, te << 16 | se, this.unsigned);
    }, N.subtract = function($) {
      return n($) || ($ = u($)), this.add($.neg());
    }, N.sub = N.subtract, N.multiply = function($) {
      if (this.isZero()) return y;
      if (n($) || ($ = u($)), t) {
        var F = t.mul(this.low, this.high, $.low, $.high);
        return a(F, t.get_high(), this.unsigned);
      }
      if ($.isZero()) return y;
      if (this.eq(R)) return $.isOdd() ? R : y;
      if ($.eq(R)) return this.isOdd() ? R : y;
      if (this.isNegative()) return $.isNegative() ? this.neg().mul($.neg()) : this.neg().mul($).neg();
      if ($.isNegative()) return this.mul($.neg()).neg();
      if (this.lt(g) && $.lt(g)) return i(this.toNumber() * $.toNumber(), this.unsigned);
      var M = this.high >>> 16, U = this.high & 65535, W = this.low >>> 16, V = this.low & 65535, H = $.high >>> 16, G = $.high & 65535, Y = $.low >>> 16, te = $.low & 65535, se = 0, re = 0, ie = 0, fe = 0;
      return fe += V * te, ie += fe >>> 16, fe &= 65535, ie += W * te, re += ie >>> 16, ie &= 65535, ie += V * Y, re += ie >>> 16, ie &= 65535, re += U * te, se += re >>> 16, re &= 65535, re += W * Y, se += re >>> 16, re &= 65535, re += V * G, se += re >>> 16, re &= 65535, se += M * te + U * Y + W * G + V * H, se &= 65535, a(ie << 16 | fe, se << 16 | re, this.unsigned);
    }, N.mul = N.multiply, N.divide = function($) {
      if (n($) || ($ = u($)), $.isZero()) throw Error("division by zero");
      if (t) {
        if (!this.unsigned && this.high === -2147483648 && $.low === -1 && $.high === -1) return this;
        var F = (this.unsigned ? t.div_u : t.div_s)(this.low, this.high, $.low, $.high);
        return a(F, t.get_high(), this.unsigned);
      }
      if (this.isZero()) return this.unsigned ? b : y;
      var M, U, W;
      if (this.unsigned) {
        if ($.unsigned || ($ = $.toUnsigned()), $.gt(this)) return b;
        if ($.gt(this.shru(1))) return x;
        W = b;
      } else {
        if (this.eq(R)) {
          if ($.eq(w) || $.eq(S)) return R;
          if ($.eq(R)) return w;
          var V = this.shr(1);
          return M = V.div($).shl(1), M.eq(y) ? $.isNegative() ? w : S : (U = this.sub($.mul(M)), W = M.add(U.div($)), W);
        } else if ($.eq(R)) return this.unsigned ? b : y;
        if (this.isNegative()) return $.isNegative() ? this.neg().div($.neg()) : this.neg().div($).neg();
        if ($.isNegative()) return this.div($.neg()).neg();
        W = y;
      }
      for (U = this; U.gte($); ) {
        M = Math.max(1, Math.floor(U.toNumber() / $.toNumber()));
        for (var H = Math.ceil(Math.log(M) / Math.LN2), G = H <= 48 ? 1 : l(2, H - 48), Y = i(M), te = Y.mul($); te.isNegative() || te.gt(U); ) M -= G, Y = i(M, this.unsigned), te = Y.mul($);
        Y.isZero() && (Y = w), W = W.add(Y), U = U.sub(te);
      }
      return W;
    }, N.div = N.divide, N.modulo = function($) {
      if (n($) || ($ = u($)), t) {
        var F = (this.unsigned ? t.rem_u : t.rem_s)(this.low, this.high, $.low, $.high);
        return a(F, t.get_high(), this.unsigned);
      }
      return this.sub(this.div($).mul($));
    }, N.mod = N.modulo, N.rem = N.modulo, N.not = function() {
      return a(~this.low, ~this.high, this.unsigned);
    }, N.and = function($) {
      return n($) || ($ = u($)), a(this.low & $.low, this.high & $.high, this.unsigned);
    }, N.or = function($) {
      return n($) || ($ = u($)), a(this.low | $.low, this.high | $.high, this.unsigned);
    }, N.xor = function($) {
      return n($) || ($ = u($)), a(this.low ^ $.low, this.high ^ $.high, this.unsigned);
    }, N.shiftLeft = function($) {
      return n($) && ($ = $.toInt()), ($ &= 63) === 0 ? this : $ < 32 ? a(this.low << $, this.high << $ | this.low >>> 32 - $, this.unsigned) : a(0, this.low << $ - 32, this.unsigned);
    }, N.shl = N.shiftLeft, N.shiftRight = function($) {
      return n($) && ($ = $.toInt()), ($ &= 63) === 0 ? this : $ < 32 ? a(this.low >>> $ | this.high << 32 - $, this.high >> $, this.unsigned) : a(this.high >> $ - 32, this.high >= 0 ? 0 : -1, this.unsigned);
    }, N.shr = N.shiftRight, N.shiftRightUnsigned = function($) {
      if (n($) && ($ = $.toInt()), $ &= 63, $ === 0) return this;
      var F = this.high;
      if ($ < 32) {
        var M = this.low;
        return a(M >>> $ | F << 32 - $, F >>> $, this.unsigned);
      } else return $ === 32 ? a(F, 0, this.unsigned) : a(F >>> $ - 32, 0, this.unsigned);
    }, N.shru = N.shiftRightUnsigned, N.shr_u = N.shiftRightUnsigned, N.toSigned = function() {
      return this.unsigned ? a(this.low, this.high, false) : this;
    }, N.toUnsigned = function() {
      return this.unsigned ? this : a(this.low, this.high, true);
    }, N.toBytes = function($) {
      return $ ? this.toBytesLE() : this.toBytesBE();
    }, N.toBytesLE = function() {
      var $ = this.high, F = this.low;
      return [
        F & 255,
        F >>> 8 & 255,
        F >>> 16 & 255,
        F >>> 24,
        $ & 255,
        $ >>> 8 & 255,
        $ >>> 16 & 255,
        $ >>> 24
      ];
    }, N.toBytesBE = function() {
      var $ = this.high, F = this.low;
      return [
        $ >>> 24,
        $ >>> 16 & 255,
        $ >>> 8 & 255,
        $ & 255,
        F >>> 24,
        F >>> 16 & 255,
        F >>> 8 & 255,
        F & 255
      ];
    }, e.fromBytes = function($, F, M) {
      return M ? e.fromBytesLE($, F) : e.fromBytesBE($, F);
    }, e.fromBytesLE = function($, F) {
      return new e($[0] | $[1] << 8 | $[2] << 16 | $[3] << 24, $[4] | $[5] << 8 | $[6] << 16 | $[7] << 24, F);
    }, e.fromBytesBE = function($, F) {
      return new e($[4] << 24 | $[5] << 16 | $[6] << 8 | $[7], $[0] << 24 | $[1] << 16 | $[2] << 8 | $[3], F);
    }, ng;
  }
  var zC = YO();
  const MC = KO(zC), ZO = RR({
    __proto__: null,
    default: MC
  }, [
    zC
  ]);
  const Po = MC || ZO;
  function Mu(t) {
    return Po.fromString(t, true, 16);
  }
  const BC = Mu("c3a5c85c97cb3127"), Oo = Mu("b492b66fbe98f273"), pn = Mu("9ae16a3b2f90404f");
  function Pg(t) {
    return t.xor(t.shru(47));
  }
  function VC(t, e, n) {
    const s = t.slice(e, e + n);
    return Po.fromBytes(Array.from(s), true, true);
  }
  function it(t, e) {
    return VC(t, e, 8);
  }
  function lv(t, e) {
    return VC(t, e, 4);
  }
  function Mt(t, e) {
    return e === 0 ? t : t.shru(e).or(t.shl(64 - e));
  }
  function Qr(t, e, n = Mu("9ddfea08eb382d69")) {
    let s = t.xor(e).mul(n);
    s = s.xor(s.shru(47));
    let r = e.xor(s).mul(n);
    return r = r.xor(r.shru(47)), r = r.mul(n), r;
  }
  function JO(t, e, n, s, r, o) {
    r = r.add(t), o = Mt(o.add(r).add(s), 21);
    const i = r;
    return r = r.add(e), r = r.add(n), o = o.add(Mt(r, 44)), [
      r.add(s),
      o.add(i)
    ];
  }
  function Eh(t, e, n, s) {
    return JO(it(t, e), it(t, e + 8), it(t, e + 16), it(t, e + 24), n, s);
  }
  function QO(t, e = t.length) {
    if (e >= 8) {
      const n = pn.add(e * 2), s = it(t, 0).add(pn), r = it(t, e - 8), o = Mt(r, 37).mul(n).add(s), i = Mt(s, 25).add(r).mul(n);
      return Qr(o, i, n);
    }
    if (e >= 4) {
      const n = pn.add(e * 2), s = lv(t, 0);
      return Qr(s.shl(3).add(e), lv(t, e - 4), n);
    }
    if (e > 0) {
      const n = t[0], s = t[e >> 1], r = t[e - 1], o = n + (s << 8), i = e + (r << 2);
      return Pg(pn.mul(o).xor(BC.mul(i))).mul(pn);
    }
    return pn;
  }
  function eF(t, e = t.length) {
    const n = pn.add(e * 2), s = it(t, 0).mul(Oo), r = it(t, 8), o = it(t, e - 8).mul(n), i = it(t, e - 16).mul(pn);
    return Qr(Mt(s.add(r), 43).add(Mt(o, 30)).add(i), s.add(Mt(r.add(pn), 18)).add(o), n);
  }
  function tF(t, e = t.length) {
    const n = pn.add(e * 2), s = it(t, 0).mul(pn), r = it(t, 8), o = it(t, e - 8).mul(n), i = it(t, e - 16).mul(pn), a = Mt(s.add(r), 43).add(Mt(o, 30)).add(i), l = Qr(a, s.add(Mt(r.add(pn), 18)).add(o), n), c = it(t, 16).mul(n), u = it(t, 24), h = a.add(it(t, e - 32)).mul(n), d = l.add(it(t, e - 24)).mul(n);
    return Qr(Mt(c.add(u), 43).add(Mt(h, 30)).add(d), c.add(Mt(u.add(s), 18)).add(h), n);
  }
  function WC(t, e = t.length) {
    const n = Po.fromNumber(81, true);
    if (e <= 32) return e <= 16 ? QO(t, e) : eF(t, e);
    if (e <= 64) return tF(t, e);
    let s = n, r = n.mul(Oo).add(113), o = Pg(r.mul(pn).add(113)).mul(pn), i = [
      Po.UZERO,
      Po.UZERO
    ], a = [
      Po.UZERO,
      Po.UZERO
    ];
    s = s.mul(pn).add(it(t, 0));
    let l = 0;
    const c = (e - 1 >> 6) * 64, u = c + (e - 1 & 63) - 63;
    do
      s = Mt(s.add(r).add(i[0]).add(it(t, l + 8)), 37).mul(Oo), r = Mt(r.add(i[1]).add(it(t, l + 48)), 42).mul(Oo), s = s.xor(a[1]), r = r.add(i[0]).add(it(t, l + 40)), o = Mt(o.add(a[0]), 33).mul(Oo), i = Eh(t, l, i[1].mul(Oo), s.add(a[0])), a = Eh(t, l + 32, o.add(a[1]), r.add(it(t, l + 16))), [o, s] = [
        s,
        o
      ], l += 64;
    while (l !== c);
    const h = Oo.add(o.and(255).shl(1));
    return l = u, a[0] = a[0].add(e - 1 & 63), i[0] = i[0].add(a[0]), a[0] = a[0].add(i[0]), s = Mt(s.add(r).add(i[0]).add(it(t, l + 8)), 37).mul(h), r = Mt(r.add(i[1]).add(it(t, l + 48)), 42).mul(h), s = s.xor(a[1].mul(9)), r = r.add(i[0].mul(9).add(it(t, l + 40))), o = Mt(o.add(a[0]), 33).mul(h), i = Eh(t, l, i[1].mul(h), s.add(a[0])), a = Eh(t, l + 32, o.add(a[1]), r.add(it(t, l + 16))), [o, s] = [
      s,
      o
    ], Qr(Qr(i[0], a[0], h).add(Pg(r).mul(BC)).add(o), Qr(i[1], a[1], h).add(s), h);
  }
  function _r(t, e) {
    return e === "string" ? Qs(t) : xo([
      t
    ], e);
  }
  function nF(t, e) {
    return t instanceof Float32Array && e === "float32" || t instanceof Int32Array && e === "int32" || t instanceof Uint8Array && e === "bool";
  }
  function xo(t, e) {
    if (e === "string") throw new Error("Cannot convert a string[] to a TypedArray");
    if (Array.isArray(t) && (t = or(t)), j().getBool("DEBUG") && NC(t, e), nF(t, e)) return t;
    if (e == null || e === "float32" || e === "complex64") return new Float32Array(t);
    if (e === "int32") return new Int32Array(t);
    if (e === "bool") {
      const n = new Uint8Array(t.length);
      for (let s = 0; s < n.length; ++s) Math.round(t[s]) !== 0 && (n[s] = 1);
      return n;
    } else throw new Error(`Unknown data type ${e}`);
  }
  Xt = function() {
    return j().platform.now();
  };
  UC = function(t, e) {
    return j().platform.fetch(t, e);
  };
  Qs = function(t, e = "utf-8") {
    return e = e || "utf-8", j().platform.encode(t, e);
  };
  Cr = function(t, e = "utf-8") {
    return e = e || "utf-8", j().platform.decode(t, e);
  };
  function _t(t) {
    return j().platform.isTypedArray != null ? j().platform.isTypedArray(t) : PC(t);
  }
  or = function(t, e = [], n = false) {
    if (e == null && (e = []), typeof t == "boolean" || typeof t == "number" || typeof t == "string" || $r(t) || t == null || _t(t) && n) e.push(t);
    else if (Array.isArray(t) || _t(t)) for (let s = 0; s < t.length; ++s) or(t[s], e, n);
    else {
      let s = -1;
      for (const r of Object.keys(t)) /^([1-9]+[0-9]*|0)$/.test(r) && (s = Math.max(s, Number(r)));
      for (let r = 0; r <= s; r++) or(t[r], e, n);
    }
    return e;
  };
  const sF = Object.freeze(Object.defineProperty({
    __proto__: null,
    arraysEqual: Ue,
    arraysEqualWithNull: IC,
    assert: C,
    assertNonNegativeIntegerDimensions: Kn,
    assertNonNull: gi,
    assertShapesMatch: nn,
    bytesFromStringArray: TC,
    bytesPerElement: dc,
    checkConversionForErrors: NC,
    clamp: ro,
    computeStrides: Ee,
    convertBackendValuesAndArrayBuffer: AC,
    createScalarValue: _r,
    createShuffledIndices: DO,
    decodeString: Cr,
    distSquared: RO,
    encodeString: Qs,
    fetch: UC,
    fingerPrint64: WC,
    flatten: or,
    getArrayFromDType: xt,
    getTypedArrayFromDType: Ut,
    hasEncodingLoss: eb,
    hexToLong: Mu,
    indexToLoc: bi,
    inferDtype: yi,
    inferFromImplicitShape: Qy,
    isBoolean: EC,
    isFunction: oo,
    isInt: Jo,
    isNumber: $d,
    isPromise: $r,
    isScalarShape: AO,
    isString: Xs,
    isTypedArray: _t,
    isValidDtype: kC,
    locToIndex: ks,
    makeOnesTypedArray: bp,
    makeZerosNestedTypedArray: tb,
    makeZerosTypedArray: tn,
    nearestDivisor: Cd,
    nearestLargerEven: yp,
    now: Xt,
    parseAxisParam: Ve,
    randUniform: EO,
    repeatedTry: Fg,
    rightPad: jo,
    shuffle: Jy,
    shuffleCombo: TO,
    sizeFromShape: X,
    sizeToSquarishShape: Sd,
    squeezeShape: Ar,
    sum: CC,
    swap: wr,
    tanh: _O,
    toNestedArray: ns,
    toTypedArray: xo
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  class rF {
    constructor(e, n) {
      this.backendTimer = e, this.logger = n, n == null && (this.logger = new iF());
    }
    profileKernel(e, n, s) {
      let r;
      const o = () => {
        r = s();
      };
      let i;
      const a = Xt();
      if (this.backendTimer.timerAvailable()) i = this.backendTimer.time(o);
      else {
        o();
        for (const c of r) c.dataSync();
        i = Promise.resolve({
          kernelMs: Xt() - a
        });
      }
      if (j().getBool("CHECK_COMPUTATION_FOR_ERRORS")) for (let c = 0; c < r.length; c++) {
        const u = r[c];
        u.data().then((h) => {
          oF(h, u.dtype, e);
        });
      }
      return {
        kernelName: e,
        outputs: r,
        inputs: n,
        timeMs: i.then((c) => c.kernelMs),
        extraInfo: i.then((c) => c.getExtraProfileInfo != null ? c.getExtraProfileInfo() : "")
      };
    }
    logKernelProfile(e) {
      const { kernelName: n, outputs: s, timeMs: r, inputs: o, extraInfo: i } = e;
      s.forEach((a) => {
        Promise.all([
          a.data(),
          r,
          i
        ]).then((l) => {
          this.logger.logKernelProfile(n, a, l[0], l[1], o, l[2]);
        });
      });
    }
  }
  function oF(t, e, n) {
    if (e !== "float32") return false;
    for (let s = 0; s < t.length; s++) {
      const r = t[s];
      if (isNaN(r) || !isFinite(r)) return console.warn(`Found ${r} in the result of '${n}'`), true;
    }
    return false;
  }
  class iF {
    logKernelProfile(e, n, s, r, o, i) {
      const a = typeof r == "number" ? jo(`${r}ms`, 9) : r.error, l = jo(e, 25), c = n.rank, u = n.size, h = jo(n.shape.toString(), 14);
      let d = "";
      for (const p in o) {
        const f = o[p];
        if (f != null) {
          const m = f.shape || n.shape, g = m.length;
          d += `${p}: ${g}D ${g > 0 ? m : ""} `;
        }
      }
      console.log(`%c${l}	%c${a}	%c${c}D ${h}	%c${u}	%c${d}	%c${i}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
    }
  }
  function aF(t, e, n) {
    const s = {}, r = {};
    for (let l = 0; l < e.length; l++) s[e[l].id] = true;
    for (let l = 0; l < t.length; l++) {
      const c = t[l], u = c.inputs;
      for (const h in u) {
        const d = u[h];
        let p = false;
        for (let f = 0; f < e.length; f++) if (s[d.id]) {
          c.outputs.forEach((m) => s[m.id] = true), p = true, r[c.id] = true;
          break;
        }
        if (p) break;
      }
    }
    const o = {};
    o[n.id] = true;
    const i = {};
    for (let l = t.length - 1; l >= 0; l--) {
      const c = t[l], u = c.inputs;
      for (let h = 0; h < c.outputs.length; h++) if (o[c.outputs[h].id]) {
        for (const d in u) o[u[d].id] = true, i[c.id] = true;
        break;
      }
    }
    const a = [];
    for (let l = 0; l < t.length; l++) {
      const c = t[l];
      if (r[c.id] && i[c.id]) {
        const u = {};
        for (const d in c.inputs) {
          const p = c.inputs[d];
          s[p.id] && (u[d] = p);
        }
        const h = Object.assign({}, c);
        h.inputs = u, h.outputs = c.outputs, a.push(h);
      }
    }
    return a;
  }
  function lF(t, e, n, s) {
    for (let r = e.length - 1; r >= 0; r--) {
      const o = e[r], i = [];
      if (o.outputs.forEach((l) => {
        const c = t[l.id];
        c != null ? i.push(c) : i.push(null);
      }), o.gradient == null) throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);
      const a = o.gradient(i);
      for (const l in o.inputs) {
        if (!(l in a)) throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);
        const c = n(() => a[l]());
        if (c.dtype !== "float32") throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${c.dtype}'`);
        const u = o.inputs[l];
        if (!Ue(c.shape, u.shape)) throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${c.shape}', which does not match the shape of the input '${u.shape}'`);
        if (t[u.id] == null) t[u.id] = c;
        else {
          const h = t[u.id];
          t[u.id] = s(h, c), h.dispose();
        }
      }
    }
  }
  const cv = 20, _l = 3, sg = 7;
  function cF(t, e, n, s) {
    const r = Ee(e), o = uF(t, e, n, r), i = e.length, a = Xh(t, e, n, r, o), l = [
      "Tensor"
    ];
    return s && (l.push(`  dtype: ${n}`), l.push(`  rank: ${i}`), l.push(`  shape: [${e}]`), l.push("  values:")), l.push(a.map((c) => "    " + c).join(`
`)), l.join(`
`);
  }
  function uF(t, e, n, s) {
    const r = X(e), o = s[s.length - 1], i = new Array(o).fill(0), a = e.length, l = n === "complex64" ? Ml(t) : t;
    if (a > 1) for (let c = 0; c < r / o; c++) {
      const u = c * o;
      for (let h = 0; h < o; h++) i[h] = Math.max(i[h], zl(l[u + h], 0, n).length);
    }
    return i;
  }
  function zl(t, e, n) {
    let s;
    return Array.isArray(t) ? s = `${parseFloat(t[0].toFixed(sg))} + ${parseFloat(t[1].toFixed(sg))}j` : Xs(t) ? s = `'${t}'` : n === "bool" ? s = GC(t) : s = parseFloat(t.toFixed(sg)).toString(), jo(s, e);
  }
  function GC(t) {
    return t === 0 ? "false" : "true";
  }
  function Xh(t, e, n, s, r, o = true) {
    const i = n === "complex64" ? 2 : 1, a = e[0], l = e.length;
    if (l === 0) {
      if (n === "complex64") {
        const m = Ml(t);
        return [
          zl(m[0], 0, n)
        ];
      }
      return n === "bool" ? [
        GC(t[0])
      ] : [
        t[0].toString()
      ];
    }
    if (l === 1) {
      if (a > cv) {
        const g = _l * i;
        let y = Array.from(t.slice(0, g)), b = Array.from(t.slice((a - _l) * i, a * i));
        return n === "complex64" && (y = Ml(y), b = Ml(b)), [
          "[" + y.map((w, x) => zl(w, r[x], n)).join(", ") + ", ..., " + b.map((w, x) => zl(w, r[a - _l + x], n)).join(", ") + "]"
        ];
      }
      return [
        "[" + (n === "complex64" ? Ml(t) : Array.from(t)).map((g, y) => zl(g, r[y], n)).join(", ") + "]"
      ];
    }
    const c = e.slice(1), u = s.slice(1), h = s[0] * i, d = [];
    if (a > cv) {
      for (let m = 0; m < _l; m++) {
        const g = m * h, y = g + h;
        d.push(...Xh(t.slice(g, y), c, n, u, r, false));
      }
      d.push("...");
      for (let m = a - _l; m < a; m++) {
        const g = m * h, y = g + h;
        d.push(...Xh(t.slice(g, y), c, n, u, r, m === a - 1));
      }
    } else for (let m = 0; m < a; m++) {
      const g = m * h, y = g + h;
      d.push(...Xh(t.slice(g, y), c, n, u, r, m === a - 1));
    }
    const p = l === 2 ? "," : "";
    d[0] = "[" + (a > 0 ? d[0] + p : "");
    for (let m = 1; m < d.length - 1; m++) d[m] = " " + d[m] + p;
    let f = `,
`;
    for (let m = 2; m < l; m++) f += `
`;
    return d[d.length - 1] = " " + d[d.length - 1] + "]" + (o ? "" : f), d;
  }
  function Ml(t) {
    const e = [];
    for (let n = 0; n < t.length; n += 2) e.push([
      t[n],
      t[n + 1]
    ]);
    return e;
  }
  class Rt {
    constructor(e, n, s) {
      if (this.dtype = n, this.shape = e.slice(), this.size = X(e), s != null) {
        const r = s.length;
        C(r === this.size, () => `Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`);
      }
      if (n === "complex64") throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
      this.values = s || xt(n, this.size), this.strides = Ee(e);
    }
    set(e, ...n) {
      n.length === 0 && (n = [
        0
      ]), C(n.length === this.rank, () => `The number of provided coordinates (${n.length}) must match the rank (${this.rank})`);
      const s = this.locToIndex(n);
      this.values[s] = e;
    }
    get(...e) {
      e.length === 0 && (e = [
        0
      ]);
      let n = 0;
      for (const r of e) {
        if (r < 0 || r >= this.shape[n]) {
          const o = `Requested out of range element at ${e}.   Buffer shape=${this.shape}`;
          throw new Error(o);
        }
        n++;
      }
      let s = e[e.length - 1];
      for (let r = 0; r < e.length - 1; ++r) s += this.strides[r] * e[r];
      return this.values[s];
    }
    locToIndex(e) {
      if (this.rank === 0) return 0;
      if (this.rank === 1) return e[0];
      let n = e[e.length - 1];
      for (let s = 0; s < e.length - 1; ++s) n += this.strides[s] * e[s];
      return n;
    }
    indexToLoc(e) {
      if (this.rank === 0) return [];
      if (this.rank === 1) return [
        e
      ];
      const n = new Array(this.shape.length);
      for (let s = 0; s < n.length - 1; ++s) n[s] = Math.floor(e / this.strides[s]), e -= n[s] * this.strides[s];
      return n[n.length - 1] = e, n;
    }
    get rank() {
      return this.shape.length;
    }
    toTensor() {
      return Cs().makeTensor(this.values, this.shape, this.dtype);
    }
  }
  let Cs = null, Pi = null;
  function hF(t) {
    Cs = t;
  }
  function dF(t) {
    Pi = t;
  }
  class Xe {
    constructor(e, n, s, r) {
      this.kept = false, this.isDisposedInternal = false, this.shape = e.slice(), this.dtype = n || "float32", this.size = X(e), this.strides = Ee(e), this.dataId = s, this.id = r, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
    }
    get rank() {
      return this.shape.length;
    }
    async buffer() {
      const e = await this.data();
      return Pi.buffer(this.shape, this.dtype, e);
    }
    bufferSync() {
      return Pi.buffer(this.shape, this.dtype, this.dataSync());
    }
    async array() {
      const e = await this.data();
      return ns(this.shape, e, this.dtype === "complex64");
    }
    arraySync() {
      return ns(this.shape, this.dataSync(), this.dtype === "complex64");
    }
    async data() {
      this.throwIfDisposed();
      const e = Cs().read(this.dataId);
      if (this.dtype === "string") {
        const n = await e;
        try {
          return n.map((s) => Cr(s));
        } catch {
          throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
        }
      }
      return e;
    }
    dataToGPU(e) {
      return this.throwIfDisposed(), Cs().readToGPU(this.dataId, e);
    }
    dataSync() {
      this.throwIfDisposed();
      const e = Cs().readSync(this.dataId);
      if (this.dtype === "string") try {
        return e.map((n) => Cr(n));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
      return e;
    }
    async bytes() {
      this.throwIfDisposed();
      const e = await Cs().read(this.dataId);
      return this.dtype === "string" ? e : new Uint8Array(e.buffer);
    }
    dispose() {
      this.isDisposed || (this.kerasMask && this.kerasMask.dispose(), Cs().disposeTensor(this), this.isDisposedInternal = true);
    }
    get isDisposed() {
      return this.isDisposedInternal;
    }
    throwIfDisposed() {
      if (this.isDisposed) throw new Error("Tensor is disposed.");
    }
    print(e = false) {
      return Pi.print(this, e);
    }
    clone() {
      return this.throwIfDisposed(), Pi.clone(this);
    }
    toString(e = false) {
      const n = this.dataSync();
      return cF(n, this.shape, this.dtype, e);
    }
    cast(e) {
      return this.throwIfDisposed(), Pi.cast(this, e);
    }
    variable(e = true, n, s) {
      return this.throwIfDisposed(), Cs().makeVariable(this, e, n, s);
    }
  }
  Object.defineProperty(Xe, Symbol.hasInstance, {
    value: (t) => !!t && t.data != null && t.dataSync != null && t.throwIfDisposed != null
  });
  function J() {
    return sb("Tensor", () => Xe);
  }
  J();
  class bc extends Xe {
    constructor(e, n, s, r) {
      super(e.shape, e.dtype, e.dataId, r), this.trainable = n, this.name = s;
    }
    assign(e) {
      if (e.dtype !== this.dtype) throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);
      if (!Ue(e.shape, this.shape)) throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);
      Cs().disposeTensor(this), this.dataId = e.dataId, Cs().incRef(this, null);
    }
    dispose() {
      Cs().disposeVariable(this), this.isDisposedInternal = true;
    }
  }
  Object.defineProperty(bc, Symbol.hasInstance, {
    value: (t) => t instanceof Xe && t.assign != null && t.assign instanceof Function
  });
  var zg;
  (function(t) {
    t.R0 = "R0", t.R1 = "R1", t.R2 = "R2", t.R3 = "R3", t.R4 = "R4", t.R5 = "R5", t.R6 = "R6";
  })(zg || (zg = {}));
  var Mg;
  (function(t) {
    t.float32 = "float32", t.int32 = "int32", t.bool = "int32", t.complex64 = "complex64";
  })(Mg || (Mg = {}));
  var Bg;
  (function(t) {
    t.float32 = "float32", t.int32 = "int32", t.bool = "bool", t.complex64 = "complex64";
  })(Bg || (Bg = {}));
  var Vg;
  (function(t) {
    t.float32 = "float32", t.int32 = "float32", t.bool = "float32", t.complex64 = "complex64";
  })(Vg || (Vg = {}));
  var Wg;
  (function(t) {
    t.float32 = "complex64", t.int32 = "complex64", t.bool = "complex64", t.complex64 = "complex64";
  })(Wg || (Wg = {}));
  const pF = {
    float32: Vg,
    int32: Mg,
    bool: Bg,
    complex64: Wg
  };
  An = function(t, e) {
    if (t === "string" || e === "string") {
      if (t === "string" && e === "string") return "string";
      throw new Error(`Can not upcast ${t} with ${e}`);
    }
    return pF[t][e];
  };
  Nf = function(t) {
    return An(t, "int32");
  };
  function HC(t) {
    return t != null && typeof t == "object" && "texture" in t && t.texture instanceof WebGLTexture;
  }
  function jC(t) {
    return typeof GPUBuffer < "u" && t != null && typeof t == "object" && "buffer" in t && t.buffer instanceof GPUBuffer;
  }
  function yt(t, e) {
    if (t.dtype === e.dtype) return [
      t,
      e
    ];
    const n = An(t.dtype, e.dtype);
    return [
      t.cast(n),
      e.cast(n)
    ];
  }
  function qC(t, e) {
    C(t.dtype === e.dtype, () => `The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`);
  }
  function kf(t, e) {
    return e.some((n) => n.id === t.id);
  }
  function Ir(t) {
    const e = [];
    return KC(t, e, /* @__PURE__ */ new Set()), e;
  }
  function KC(t, e, n) {
    if (t == null) return;
    if (t instanceof Xe) {
      e.push(t);
      return;
    }
    if (!fF(t)) return;
    const s = t;
    for (const r in s) {
      const o = s[r];
      n.has(o) || (n.add(o), KC(o, e, n));
    }
  }
  function fF(t) {
    return Array.isArray(t) || typeof t == "object";
  }
  const mF = Object.freeze(Object.defineProperty({
    __proto__: null,
    assertTypesMatch: qC,
    getTensorsInContainer: Ir,
    isTensorInList: kf,
    makeTypesMatch: yt
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  function rg(t) {
    return t.kernelName != null;
  }
  class uv {
    constructor() {
      this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = false, this.activeProfile = {
        newBytes: 0,
        newTensors: 0,
        peakBytes: 0,
        kernels: [],
        result: null,
        get kernelNames() {
          return Array.from(new Set(this.kernels.map((e) => e.name)));
        }
      };
    }
    dispose() {
      for (const e in this.registeredVariables) this.registeredVariables[e].dispose();
    }
  }
  class Ji {
    constructor(e) {
      this.ENV = e, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new uv();
    }
    async ready() {
      if (this.pendingBackendInit != null) return this.pendingBackendInit.then(() => {
      });
      if (this.backendInstance != null) return;
      const e = this.getSortedBackends();
      for (let n = 0; n < e.length; n++) {
        const s = e[n];
        if (await this.initializeBackend(s).success) {
          await this.setBackend(s);
          return;
        }
      }
      throw new Error("Could not initialize any backends, all backend initializations failed.");
    }
    get backend() {
      if (this.pendingBackendInit != null) throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      if (this.backendInstance == null) {
        const { name: e, asyncInit: n } = this.initializeBackendsAndReturnBest();
        if (n) throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
        this.setBackend(e);
      }
      return this.backendInstance;
    }
    backendNames() {
      return Object.keys(this.registryFactory);
    }
    findBackend(e) {
      if (!(e in this.registry)) if (e in this.registryFactory) {
        const { asyncInit: n } = this.initializeBackend(e);
        if (n) return null;
      } else return null;
      return this.registry[e];
    }
    findBackendFactory(e) {
      return e in this.registryFactory ? this.registryFactory[e].factory : null;
    }
    registerBackend(e, n, s = 1) {
      return e in this.registryFactory ? (Yn(`${e} backend was already registered. Reusing existing backend factory.`), false) : (this.registryFactory[e] = {
        factory: n,
        priority: s
      }, true);
    }
    async setBackend(e) {
      if (this.registryFactory[e] == null) throw new Error(`Backend name '${e}' not found in registry`);
      if (this.backendName = e, this.registry[e] == null) {
        this.backendInstance = null;
        const { success: n, asyncInit: s } = this.initializeBackend(e);
        if (!(s ? await n : n)) return false;
      }
      return this.backendInstance = this.registry[e], this.setupRegisteredKernels(), this.profiler = new rF(this.backendInstance), true;
    }
    setupRegisteredKernels() {
      Td(this.backendName).forEach((n) => {
        n.setupFunc != null && n.setupFunc(this.backendInstance);
      });
    }
    disposeRegisteredKernels(e) {
      Td(e).forEach((s) => {
        s.disposeFunc != null && s.disposeFunc(this.registry[e]);
      });
    }
    initializeBackend(e) {
      const n = this.registryFactory[e];
      if (n == null) throw new Error(`Cannot initialize backend ${e}, no registration found.`);
      try {
        const s = n.factory();
        if (s && !(s instanceof gp) && typeof s.then == "function") {
          const r = ++this.pendingBackendInitId, o = s.then((i) => r < this.pendingBackendInitId ? false : (this.registry[e] = i, this.pendingBackendInit = null, true)).catch((i) => (r < this.pendingBackendInitId || (this.pendingBackendInit = null, Yn(`Initialization of backend ${e} failed`), Yn(i.stack || i.message)), false));
          return this.pendingBackendInit = o, {
            success: o,
            asyncInit: true
          };
        } else return this.registry[e] = s, {
          success: true,
          asyncInit: false
        };
      } catch (s) {
        return Yn(`Initialization of backend ${e} failed`), Yn(s.stack || s.message), {
          success: false,
          asyncInit: false
        };
      }
    }
    removeBackend(e) {
      if (!(e in this.registryFactory)) throw new Error(`${e} backend not found in registry`);
      this.backendName === e && this.pendingBackendInit != null && this.pendingBackendInitId++, e in this.registry && (this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e]), delete this.registryFactory[e], this.backendName === e && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
    }
    getSortedBackends() {
      if (Object.keys(this.registryFactory).length === 0) throw new Error("No backend found in registry.");
      return Object.keys(this.registryFactory).sort((e, n) => this.registryFactory[n].priority - this.registryFactory[e].priority);
    }
    initializeBackendsAndReturnBest() {
      const e = this.getSortedBackends();
      for (let n = 0; n < e.length; n++) {
        const s = e[n], { success: r, asyncInit: o } = this.initializeBackend(s);
        if (o || r) return {
          name: s,
          asyncInit: o
        };
      }
      throw new Error("Could not initialize any backends, all backend initializations failed.");
    }
    moveData(e, n) {
      const s = this.state.tensorInfo.get(n), r = s.backend, o = this.readSync(n), i = r.refCount(n);
      r.disposeData(n, true), s.backend = e, e.move(n, o, s.shape, s.dtype, i), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
    }
    tidy(e, n) {
      let s = null;
      if (n == null) {
        if (typeof e != "function") throw new Error("Please provide a function to tidy()");
        n = e;
      } else {
        if (typeof e != "string" && !(e instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
        if (typeof n != "function") throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
        s = e;
      }
      let r;
      return this.scopedRun(() => this.startScope(s), () => this.endScope(r), () => (r = n(), r instanceof Promise && console.error("Cannot return a Promise inside of tidy."), r));
    }
    scopedRun(e, n, s) {
      e();
      try {
        const r = s();
        return n(), r;
      } catch (r) {
        throw n(), r;
      }
    }
    nextTensorId() {
      return Ji.nextTensorId++;
    }
    nextVariableId() {
      return Ji.nextVariableId++;
    }
    clone(e) {
      const n = D.runKernel(Aa, {
        x: e
      }), s = {
        x: e
      }, r = (i) => ({
        x: () => {
          const a = "float32", l = {
            x: i
          }, c = {
            dtype: a
          };
          return D.runKernel(ba, l, c);
        }
      }), o = [];
      return this.addTapeNode(this.state.activeScope.name, s, [
        n
      ], r, o, {}), n;
    }
    runKernel(e, n, s) {
      if (this.backendName == null && this.backend, !(yc(e, this.backendName) != null)) throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);
      return this.runKernelFunc({
        kernelName: e,
        inputs: n,
        attrs: s
      });
    }
    shouldCheckForMemLeaks() {
      return this.ENV.getBool("IS_TEST");
    }
    checkKernelForMemLeak(e, n, s) {
      const r = this.backend.numDataIds();
      let o = 0;
      s.forEach((l) => {
        o += l.dtype === "complex64" ? 3 : 1;
      });
      const i = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], a = r - n - o - i;
      if (a > 0) throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${e}'`);
    }
    runKernelFunc(e) {
      let n, s = [];
      const r = this.isTapeOn(), o = this.state.numBytes, i = this.state.numTensors;
      this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
      let a;
      this.backendName == null && this.backend;
      let l;
      const c = rg(e) ? e.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
      if (rg(e)) {
        const { kernelName: f, inputs: m, attrs: g } = e;
        this.backendName == null && this.backend;
        const y = yc(f, this.backendName);
        C(y != null, () => `Cannot find registered kernel '${f}' for backend '${this.backendName}'`), a = () => {
          const b = this.backend.numDataIds();
          l = y.kernelFunc({
            inputs: m,
            attrs: g,
            backend: this.backend
          });
          const w = Array.isArray(l) ? l : [
            l
          ];
          this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(f, b, w);
          const x = w.map((S) => S.rank != null ? S : this.makeTensorFromTensorInfo(S));
          if (r) {
            const S = this.getTensorsForGradient(f, m, x);
            s = this.saveTensorsForBackwardMode(S);
          }
          return x;
        };
      } else {
        const { forwardFunc: f } = e, m = (g) => {
          r && (s = g.map((y) => this.keep(this.clone(y))));
        };
        a = () => {
          const g = this.backend.numDataIds();
          l = this.tidy(() => f(this.backend, m));
          const y = Array.isArray(l) ? l : [
            l
          ];
          return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(c, g, y), y;
        };
      }
      const { inputs: u, attrs: h } = e, d = rg(e) ? null : e.backwardsFunc;
      let p;
      return this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
        !this.ENV.getBool("DEBUG") && !this.state.profiling ? n = a() : (p = this.profiler.profileKernel(c, u, () => a()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(p), n = p.outputs);
      }), r && this.addTapeNode(c, u, n, d, s, h), this.state.profiling && this.state.activeProfile.kernels.push({
        name: c,
        bytesAdded: this.state.numBytes - o,
        totalBytesSnapshot: this.state.numBytes,
        tensorsAdded: this.state.numTensors - i,
        totalTensorsSnapshot: this.state.numTensors,
        inputShapes: Object.keys(u).map((f) => u[f] != null ? u[f].shape : null),
        outputShapes: n.map((f) => f.shape),
        kernelTimeMs: p.timeMs,
        extraInfo: p.extraInfo
      }), Array.isArray(l) ? n : n[0];
    }
    saveTensorsForBackwardMode(e) {
      return e.map((s) => this.keep(this.clone(s)));
    }
    getTensorsForGradient(e, n, s) {
      const r = Lg(e);
      if (r != null) {
        const o = r.inputsToSave || [], i = r.outputsToSave || [];
        let a;
        r.saveAllInputs ? (C(Array.isArray(n), () => "saveAllInputs is true, expected inputs to be an array."), a = Object.keys(n).map((c) => n[c])) : a = o.map((c) => n[c]);
        const l = s.filter((c, u) => i[u]);
        return a.concat(l);
      }
      return [];
    }
    makeTensor(e, n, s, r) {
      if (e == null) throw new Error("Values passed to engine.makeTensor() are null");
      s = s || "float32", r = r || this.backend;
      let o = e;
      s === "string" && Xs(e[0]) && (o = e.map((l) => Qs(l)));
      const i = r.write(o, n, s), a = new Xe(n, s, i, this.nextTensorId());
      if (this.trackTensor(a, r), s === "string") {
        const l = this.state.tensorInfo.get(i), c = TC(o);
        this.state.numBytes += c - l.bytes, l.bytes = c;
      }
      return a;
    }
    makeTensorFromDataId(e, n, s, r) {
      s = s || "float32";
      const o = {
        dataId: e,
        shape: n,
        dtype: s
      };
      return this.makeTensorFromTensorInfo(o, r);
    }
    makeTensorFromTensorInfo(e, n) {
      const { dataId: s, shape: r, dtype: o } = e, i = new Xe(r, o, s, this.nextTensorId());
      return this.trackTensor(i, n), i;
    }
    makeVariable(e, n = true, s, r) {
      s = s || this.nextVariableId().toString(), r != null && r !== e.dtype && (e = e.cast(r));
      const o = new bc(e, n, s, this.nextTensorId());
      if (this.state.registeredVariables[o.name] != null) throw new Error(`Variable with name ${o.name} was already registered`);
      return this.state.registeredVariables[o.name] = o, this.incRef(o, this.backend), o;
    }
    trackTensor(e, n) {
      this.state.numTensors++, e.dtype === "string" && this.state.numStringTensors++;
      let s = 0;
      e.dtype !== "complex64" && e.dtype !== "string" && (s = e.size * dc(e.dtype)), this.state.numBytes += s, this.state.tensorInfo.has(e.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(e.dataId, {
        backend: n || this.backend,
        dtype: e.dtype,
        shape: e.shape,
        bytes: s
      })), e instanceof bc || this.track(e);
    }
    incRef(e, n) {
      this.trackTensor(e, n), this.backend.incRef(e.dataId);
    }
    removeDataId(e, n) {
      this.state.tensorInfo.has(e) && this.state.tensorInfo.get(e).backend === n && (this.state.tensorInfo.delete(e), this.state.numDataBuffers--);
    }
    disposeTensor(e) {
      if (!this.state.tensorInfo.has(e.dataId)) return;
      const n = this.state.tensorInfo.get(e.dataId);
      if (this.state.numTensors--, e.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= n.bytes), e.dtype !== "complex64" && e.dtype !== "string") {
        const s = e.size * dc(e.dtype);
        this.state.numBytes -= s;
      }
      n.backend.disposeData(e.dataId) && this.removeDataId(e.dataId, n.backend);
    }
    disposeVariables() {
      for (const e in this.state.registeredVariables) {
        const n = this.state.registeredVariables[e];
        this.disposeVariable(n);
      }
    }
    disposeVariable(e) {
      this.disposeTensor(e), this.state.registeredVariables[e.name] != null && delete this.state.registeredVariables[e.name];
    }
    memory() {
      const e = this.backend.memory();
      return e.numTensors = this.state.numTensors, e.numDataBuffers = this.state.numDataBuffers, e.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (e.unreliable = true, e.reasons == null && (e.reasons = []), e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), e;
    }
    async profile(e) {
      this.state.profiling = true;
      const n = this.state.numBytes, s = this.state.numTensors;
      this.state.activeProfile.kernels = [], this.state.activeProfile.result = await e(), this.state.profiling = false, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((r) => r.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - n, this.state.activeProfile.newTensors = this.state.numTensors - s;
      for (const r of this.state.activeProfile.kernels) r.kernelTimeMs = await r.kernelTimeMs, r.extraInfo = await r.extraInfo;
      return this.state.activeProfile;
    }
    isTapeOn() {
      return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
    }
    addTapeNode(e, n, s, r, o, i) {
      const a = {
        id: this.state.nextTapeNodeId++,
        kernelName: e,
        inputs: n,
        outputs: s,
        saved: o
      }, l = Lg(e);
      l != null && (r = l.gradFunc), r != null && (a.gradient = (c) => (c = c.map((u, h) => {
        if (u == null) {
          const d = s[h], p = tn(d.size, d.dtype);
          return this.makeTensor(p, d.shape, d.dtype);
        }
        return u;
      }), r(c.length > 1 ? c : c[0], o, i))), this.state.activeTape.push(a);
    }
    keep(e) {
      return e.kept = true, e;
    }
    startTape() {
      this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
    }
    endTape() {
      this.state.gradientDepth--;
    }
    startScope(e) {
      const n = {
        track: [],
        name: "unnamed scope",
        id: this.state.nextScopeId++
      };
      e && (n.name = e), this.state.scopeStack.push(n), this.state.activeScope = n;
    }
    endScope(e) {
      const n = Ir(e), s = new Set(n.map((o) => o.id));
      for (let o = 0; o < this.state.activeScope.track.length; o++) {
        const i = this.state.activeScope.track[o];
        !i.kept && !s.has(i.id) && i.dispose();
      }
      const r = this.state.scopeStack.pop();
      this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], n.forEach((o) => {
        !o.kept && o.scopeId === r.id && this.track(o);
      });
    }
    gradients(e, n, s, r = false) {
      if (C(n.length > 0, () => "gradients() received an empty list of xs."), s != null && s.dtype !== "float32") throw new Error(`dy must have 'float32' dtype, but has '${s.dtype}'`);
      const o = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", e));
      C(o instanceof Xe, () => "The result y returned by f() must be a tensor.");
      const i = aF(this.state.activeTape, n, o);
      if (!r && i.length === 0 && n.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
      return this.tidy("backward", () => {
        const a = {};
        a[o.id] = s ?? gF(o.shape), lF(a, i, (c) => this.tidy(c), yF);
        const l = n.map((c) => a[c.id]);
        return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((c) => {
          for (const u of c.saved) u.dispose();
        }), this.state.activeTape = null), {
          value: o,
          grads: l
        };
      });
    }
    customGrad(e) {
      return C(oo(e), () => "The f passed in customGrad(f) must be a function."), (...n) => {
        C(n.every((a) => a instanceof Xe), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
        let s;
        const r = {};
        n.forEach((a, l) => {
          r[l] = a;
        });
        const o = (a, l) => (s = e(...n, l), C(s.value instanceof Xe, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), C(oo(s.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), s.value), i = (a, l) => {
          const c = s.gradFunc(a, l), u = Array.isArray(c) ? c : [
            c
          ];
          C(u.length === n.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), C(u.every((d) => d instanceof Xe), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
          const h = {};
          return u.forEach((d, p) => {
            h[p] = () => d;
          }), h;
        };
        return this.runKernelFunc({
          forwardFunc: o,
          backwardsFunc: i,
          inputs: r
        });
      };
    }
    readSync(e) {
      return this.state.tensorInfo.get(e).backend.readSync(e);
    }
    read(e) {
      return this.state.tensorInfo.get(e).backend.read(e);
    }
    readToGPU(e, n) {
      return this.state.tensorInfo.get(e).backend.readToGPU(e, n);
    }
    async time(e) {
      const n = Xt(), s = await this.backend.time(e);
      return s.wallMs = Xt() - n, s;
    }
    track(e) {
      return this.state.activeScope != null && (e.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(e)), e;
    }
    get registeredVariables() {
      return this.state.registeredVariables;
    }
    reset() {
      this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new uv();
      for (const e in this.registry) this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e];
      this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
    }
  }
  Ji.nextTensorId = 0;
  Ji.nextVariableId = 0;
  function gF(t) {
    const e = bp(X(t), "float32");
    return D.makeTensor(e, t, "float32");
  }
  function XC() {
    const t = DC();
    if (t._tfengine == null) {
      const e = new _C(t);
      t._tfengine = new Ji(e);
    }
    return PO(t._tfengine.ENV), hF(() => t._tfengine), t._tfengine;
  }
  const D = XC();
  function yF(t, e) {
    const n = {
      a: t,
      b: e
    };
    return D.runKernel(xi, n);
  }
  function bF() {
    return typeof navigator < "u" && navigator != null;
  }
  let Ug;
  function xF(t) {
    Ug = t;
  }
  function ob(t) {
    if (Ug !== void 0) return Ug;
    if (t || bF()) {
      if (t || (t = navigator), t.product === "ReactNative") return true;
      const e = t.userAgent || t.vendor || (typeof window < "u" ? window.opera : "");
      if (!e) {
        const n = t;
        return n.userAgentData && n.userAgentData.mobile;
      }
      return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4));
    }
    return false;
  }
  function ib() {
    return typeof window < "u" && window.document != null || typeof WorkerGlobalScope < "u";
  }
  const wF = Object.freeze(Object.defineProperty({
    __proto__: null,
    isBrowser: ib,
    isMobile: ob,
    mockIsMobile: xF
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const _n = j();
  _n.registerFlag("DEBUG", () => false, (t) => {
    t && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
  });
  _n.registerFlag("IS_BROWSER", () => ib());
  _n.registerFlag("IS_NODE", () => typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u");
  _n.registerFlag("IS_CHROME", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
  _n.registerFlag("IS_SAFARI", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Safari/.test(navigator.userAgent) && /Apple/.test(navigator.vendor));
  _n.registerFlag("PROD", () => false);
  _n.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => _n.getBool("DEBUG"));
  _n.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => true);
  _n.registerFlag("IS_TEST", () => false);
  _n.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => _n.getBool("DEBUG"));
  _n.registerFlag("WRAP_TO_IMAGEBITMAP", () => false);
  _n.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => false);
  _n.registerFlag("USE_SETTIMEOUTCUSTOM", () => false);
  function ir(t, e) {
    let n = t;
    if (_t(t)) return e === "string" ? [] : [
      t.length
    ];
    if (HC(t)) {
      const r = t.channels || "RGBA";
      return [
        t.height,
        t.width * r.length
      ];
    } else if (jC(t)) return [
      t.buffer.size / (e == null ? 4 : dc(e))
    ];
    if (!Array.isArray(t)) return [];
    const s = [];
    for (; Array.isArray(n) || _t(n) && e !== "string"; ) s.push(n.length), n = n[0];
    return Array.isArray(t) && j().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && YC(t, s, []), s;
  }
  function YC(t, e, n) {
    if (n = n || [], !Array.isArray(t) && !_t(t)) {
      C(e.length === 0, () => `Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);
      return;
    }
    C(e.length > 0, () => `Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`), C(t.length === e[0], () => `Element arr[${n.join("][")}] should have ${e[0]} elements, but has ${t.length} elements`);
    const s = e.slice(1);
    for (let r = 0; r < t.length; ++r) YC(t[r], s, n.concat(r));
  }
  function hv(t, e, n, s) {
    if (t !== "string_or_numeric") {
      if (t == null) throw new Error("Expected dtype cannot be null.");
      if (t !== "numeric" && t !== e || t === "numeric" && e === "string") throw new Error(`Argument '${n}' passed to '${s}' must be ${t} tensor, but got ${e} tensor`);
    }
  }
  function T(t, e, n, s = "numeric") {
    if (t instanceof J()) return hv(s, t.dtype, e, n), t;
    let r = yi(t);
    if (r !== "string" && [
      "bool",
      "int32",
      "float32"
    ].indexOf(s) >= 0 && (r = s), hv(s, r, e, n), t == null || !_t(t) && !Array.isArray(t) && typeof t != "number" && typeof t != "boolean" && typeof t != "string") {
      const l = t == null ? "null" : t.constructor.name;
      throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${l}'`);
    }
    const o = ir(t, r);
    !_t(t) && !Array.isArray(t) && (t = [
      t
    ]);
    const a = r !== "string" ? xo(t, r) : or(t, [], true);
    return D.makeTensor(a, o, r);
  }
  function xc(t, e, n, s = "numeric") {
    if (!Array.isArray(t)) throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);
    return t.map((o, i) => T(o, `${e}[${i}]`, n, s));
  }
  const ab = "__op";
  function O(t) {
    const e = Object.keys(t);
    if (e.length !== 1) throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);
    let n = e[0];
    const s = t[n];
    n.endsWith("_") && (n = n.substring(0, n.length - 1)), n = n + ab;
    const r = (...o) => {
      D.startScope(n);
      try {
        const i = s(...o);
        return $r(i) && console.error("Cannot return a Promise inside of tidy."), D.endScope(i), i;
      } catch (i) {
        throw D.endScope(null), i;
      }
    };
    return Object.defineProperty(r, "name", {
      value: n,
      configurable: true
    }), r;
  }
  function vF(t, e) {
    const n = T(t, "real", "complex"), s = T(e, "imag", "complex");
    nn(n.shape, s.shape, `real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);
    const r = {
      real: n,
      imag: s
    };
    return D.runKernel(Ip, r);
  }
  const Nr = O({
    complex_: vF
  });
  function wo(t, e, n, s) {
    if (s == null) s = yi(t);
    else if (s === "complex64") throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
    if (jC(t) || HC(t)) {
      if (s !== "float32" && s !== "int32") throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);
      return D.backend.createTensorFromGPUData(t, e || n, s);
    }
    if (!_t(t) && !Array.isArray(t) && typeof t != "number" && typeof t != "boolean" && typeof t != "string") throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
    if (e != null) {
      Kn(e);
      const r = X(e), o = X(n);
      C(r === o, () => `Based on the provided shape, [${e}], the tensor should have ${r} values but has ${o}`);
      for (let i = 0; i < n.length; ++i) {
        const a = n[i], l = i === n.length - 1 ? a !== X(e.slice(i)) : true;
        C(n[i] === e[i] || !l, () => `Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `);
      }
    }
    return !_t(t) && !Array.isArray(t) && (t = [
      t
    ]), e = e || n, t = s !== "string" ? xo(t, s) : or(t, [], true), D.makeTensor(t, e, s);
  }
  Un = function(t, e, n) {
    const s = ir(t, n);
    return wo(t, e, s, n);
  };
  const Qo = {
    float32: 4,
    float16: 2,
    int32: 4,
    uint16: 2,
    uint8: 1,
    bool: 1,
    complex64: 8
  };
  class Ps {
    static join(e) {
      return new Ps(e).slice();
    }
    constructor(e) {
      if (this.shards = [], this.previousShardIndex = 0, e == null || (e instanceof Array || (e = [
        e
      ]), e = e.map((s) => _t(s) ? s.buffer : s), e.length === 0)) return;
      this.bufferUniformSize = e[0].byteLength;
      let n = 0;
      for (let s = 0; s < e.length; s++) {
        const r = e[s];
        s !== e.length - 1 && r.byteLength !== this.bufferUniformSize && (this.bufferUniformSize = void 0);
        const o = n + r.byteLength;
        this.shards.push({
          buffer: r,
          start: n,
          end: o
        }), n = o;
      }
      this.shards.length === 0 && (this.byteLength = 0), this.byteLength = this.shards[this.shards.length - 1].end;
    }
    slice(e = 0, n = this.byteLength) {
      if (this.shards.length === 0) return new ArrayBuffer(0);
      if (e = isNaN(Number(e)) ? 0 : e, n = isNaN(Number(n)) ? 0 : n, e = Math.max(0, e), n = Math.min(this.byteLength, n), n <= e) return new ArrayBuffer(0);
      const s = this.findShardForByte(e);
      if (s === -1) throw new Error(`Could not find start shard for byte ${e}`);
      const r = n - e, o = new ArrayBuffer(r), i = new Uint8Array(o);
      let a = 0;
      for (let l = s; l < this.shards.length; l++) {
        const c = this.shards[l], h = e + a - c.start, d = a, f = Math.min(n, c.end) - c.start, m = new Uint8Array(c.buffer, h, f - h);
        if (i.set(m, d), a += m.length, n < c.end) break;
      }
      return o;
    }
    findShardForByte(e) {
      if (this.shards.length === 0 || e < 0 || e >= this.byteLength) return -1;
      if (this.bufferUniformSize != null) return this.previousShardIndex = Math.floor(e / this.bufferUniformSize), this.previousShardIndex;
      function n(r) {
        return e < r.start ? -1 : e >= r.end ? 1 : 0;
      }
      if (n(this.shards[this.previousShardIndex]) === 0) return this.previousShardIndex;
      const s = SF(this.shards, n);
      return s === -1 ? -1 : (this.previousShardIndex = s, this.previousShardIndex);
    }
  }
  function SF(t, e) {
    let n = 0, s = t.length;
    for (; n <= s; ) {
      const r = Math.floor((s - n) / 2) + n, o = e(t[r]);
      if (o === 0) return r;
      o < 0 ? s = r : n = r + 1;
    }
    return -1;
  }
  function $F() {
    j().set("PROD", true);
  }
  function CF() {
    j().set("DEBUG", true);
  }
  function IF() {
    j().set("DEPRECATION_WARNINGS_ENABLED", false), console.warn("TensorFlow.js deprecation warnings have been disabled.");
  }
  NF = function(t) {
    j().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(t + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
  };
  function kF() {
    D.disposeVariables();
  }
  $s = function() {
    return D;
  };
  function Gg() {
    return D.memory();
  }
  function TF(t) {
    return D.profile(t);
  }
  function q(t, e) {
    return D.tidy(t, e);
  }
  function Oe(t) {
    Ir(t).forEach((n) => n.dispose());
  }
  function Dt(t) {
    return D.keep(t);
  }
  function EF(t) {
    return D.time(t);
  }
  ZC = function(t) {
    return D.setBackend(t);
  };
  JC = function() {
    return D.ready();
  };
  QC = function() {
    return D.backendName;
  };
  function RF(t) {
    D.removeBackend(t);
  }
  function AF(t) {
    return D.findBackend(t);
  }
  function _F(t) {
    return D.findBackendFactory(t);
  }
  lb = function(t, e, n = 1) {
    return D.registerBackend(t, e, n);
  };
  function cb() {
    return D.backend;
  }
  function DF(t, e) {
    j().setPlatform(t, e);
  }
  const io = 4;
  async function Hg(t, e) {
    const n = [], s = [], r = Array.isArray(t) ? t.map((i) => i.name) : Object.keys(t);
    for (let i = 0; i < r.length; ++i) {
      const a = r[i], l = Array.isArray(t) ? t[i].tensor : t[a];
      if (l.dtype !== "float32" && l.dtype !== "int32" && l.dtype !== "bool" && l.dtype !== "string" && l.dtype !== "complex64") throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);
      const c = {
        name: a,
        shape: l.shape,
        dtype: l.dtype
      };
      if (l.dtype === "string") {
        const u = new Promise(async (h) => {
          const d = await l.bytes(), p = d.reduce((g, y) => g + y.length, 0) + io * d.length, f = new Uint8Array(p);
          let m = 0;
          for (let g = 0; g < d.length; g++) {
            const y = d[g], b = new Uint8Array(new Uint32Array([
              y.length
            ]).buffer);
            f.set(b, m), m += io, f.set(y, m), m += y.length;
          }
          h(f);
        });
        s.push(u);
      } else s.push(l.data());
      e != null && (c.group = e), n.push(c);
    }
    const o = await Promise.all(s);
    return {
      data: LF(o),
      specs: n
    };
  }
  function ub(t, e) {
    const n = new Ps(t), s = {};
    let r = 0;
    for (const o of e) {
      const i = OF(o, (a, l) => n.slice(r + a, r + l));
      s[o.name] = eI(o, n.slice(r, r + i)), r += i;
    }
    return s;
  }
  function OF(t, e) {
    const n = X(t.shape);
    let s;
    if ("quantization" in t) {
      const r = t.quantization;
      s = Qo[r.dtype];
    } else if (t.dtype === "string") {
      let r = 0;
      for (let o = 0; o < n; o++) r += io + new Uint32Array(e(r, r + io))[0];
      return r;
    } else s = Qo[t.dtype];
    return n * s;
  }
  async function FF(t, e) {
    const n = X(t.shape);
    let s;
    if ("quantization" in t) {
      const r = t.quantization;
      s = Qo[r.dtype];
    } else if (t.dtype === "string") {
      let r = 0;
      for (let o = 0; o < n; o++) r += io + new Uint32Array(await e(r, r + io))[0];
      return r;
    } else s = Qo[t.dtype];
    return n * s;
  }
  function eI(t, e) {
    const n = t.name, s = t.dtype, r = t.shape, o = X(r);
    let i, a = 0;
    if ("quantization" in t) {
      const l = t.quantization;
      if (l.dtype === "uint8" || l.dtype === "uint16") {
        if (!("min" in l && "scale" in l)) throw new Error(`Weight ${t.name} with quantization ${l.dtype} doesn't have corresponding metadata min and scale.`);
      } else if (l.dtype === "float16") {
        if (s !== "float32") throw new Error(`Weight ${t.name} is quantized with ${l.dtype} which only supports weights of type float32 not ${s}.`);
      } else throw new Error(`Weight ${t.name} has unknown quantization dtype ${l.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
      const c = Qo[l.dtype], u = l.dtype === "uint8" ? new Uint8Array(e) : new Uint16Array(e);
      if (s === "float32") if (l.dtype === "uint8" || l.dtype === "uint16") {
        i = new Float32Array(u.length);
        for (let h = 0; h < u.length; h++) {
          const d = u[h];
          i[h] = d * l.scale + l.min;
        }
      } else if (l.dtype === "float16") i = WF()(u);
      else throw new Error(`Unsupported quantization type ${l.dtype} for weight type float32.`);
      else if (s === "int32") {
        if (l.dtype !== "uint8" && l.dtype !== "uint16") throw new Error(`Unsupported quantization type ${l.dtype} for weight type int32.`);
        i = new Int32Array(u.length);
        for (let h = 0; h < u.length; h++) {
          const d = u[h];
          i[h] = Math.round(d * l.scale + l.min);
        }
      } else throw new Error(`Unsupported dtype in weight '${n}': ${s}`);
      a += o * c;
    } else if (s === "string") {
      const l = X(t.shape);
      i = [];
      for (let c = 0; c < l; c++) {
        const u = new Uint32Array(e.slice(a, a + io))[0];
        a += io;
        const h = new Uint8Array(e.slice(a, a + u));
        i.push(h), a += u;
      }
    } else {
      const l = Qo[s];
      if (s === "float32") i = new Float32Array(e);
      else if (s === "int32") i = new Int32Array(e);
      else if (s === "bool") i = new Uint8Array(e);
      else if (s === "complex64") {
        i = new Float32Array(e);
        const c = new Float32Array(i.length / 2), u = new Float32Array(i.length / 2);
        for (let f = 0; f < c.length; f++) c[f] = i[f * 2], u[f] = i[f * 2 + 1];
        const h = Un(c, r, "float32"), d = Un(u, r, "float32"), p = Nr(h, d);
        return h.dispose(), d.dispose(), p;
      } else throw new Error(`Unsupported dtype in weight '${n}': ${s}`);
      a += o * l;
    }
    return Un(i, r, s);
  }
  async function dv(t, e, n) {
    let s = new Uint8Array(e);
    for (; s.byteLength < n; ) {
      const { done: r, value: o } = await t.read();
      if (r && o == null) {
        const a = n - s.byteLength;
        throw new Error(`Reader is done but ${a} bytes are still expected`);
      }
      const i = new Uint8Array(s.length + o.byteLength);
      i.set(s, 0), i.set(new Uint8Array(o), s.length), s = i;
    }
    return s.buffer;
  }
  async function tI(t, e) {
    const n = {}, s = t.getReader();
    let r = new ArrayBuffer(0);
    for (const o of e) {
      const i = await FF(o, async (c, u) => (r = await dv(s, r, u), r.slice(c, u)));
      r = await dv(s, r, i);
      const a = r.slice(0, i);
      r = r.slice(i);
      const l = eI(o, a);
      if (n[o.name] = l, QC() === "webgpu") {
        const c = cb();
        "uploadToGPU" in c && X(l.shape) >= j().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD") && c.uploadToGPU(l.dataId);
      }
    }
    return n;
  }
  function LF(t) {
    if (t === null) throw new Error(`Invalid input value: ${JSON.stringify(t)}`);
    let e = 0;
    const n = [];
    t.forEach((o) => {
      if (e += o.byteLength, n.push(o.byteLength === o.buffer.byteLength ? o : new o.constructor(o)), !(o instanceof Float32Array || o instanceof Int32Array || o instanceof Uint8Array)) throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`);
    });
    const s = new Uint8Array(e);
    let r = 0;
    return n.forEach((o) => {
      s.set(new Uint8Array(o.buffer), r), r += o.byteLength;
    }), s.buffer;
  }
  const hb = typeof Buffer < "u" && (typeof Blob > "u" || typeof atob > "u" || typeof btoa > "u");
  function pv(t) {
    return hb ? Buffer.byteLength(t, "utf8") : new Blob([
      t
    ]).size;
  }
  function PF(t) {
    if (hb) return Buffer.from(t).toString("base64");
    const e = new Uint8Array(t);
    let n = "";
    for (let s = 0, r = e.length; s < r; s++) n += String.fromCharCode(e[s]);
    return btoa(n);
  }
  function zF(t) {
    if (hb) {
      const s = Buffer.from(t, "base64");
      return s.buffer.slice(s.byteOffset, s.byteOffset + s.byteLength);
    }
    const e = atob(t), n = new Uint8Array(e.length);
    for (let s = 0; s < e.length; ++s) n.set([
      e.charCodeAt(s)
    ], s);
    return n.buffer;
  }
  function nI(t) {
    return Ps.join(t);
  }
  function fv(t) {
    const e = "/";
    for (t = t.trim(); t.endsWith(e); ) t = t.slice(0, t.length - 1);
    const n = t.split(e);
    return n[n.length - 1];
  }
  function sI(t, e) {
    const n = {
      modelTopology: t.modelTopology,
      format: t.format,
      generatedBy: t.generatedBy,
      convertedBy: t.convertedBy,
      weightsManifest: e
    };
    return t.signature != null && (n.signature = t.signature), t.userDefinedMetadata != null && (n.userDefinedMetadata = t.userDefinedMetadata), t.modelInitializer != null && (n.modelInitializer = t.modelInitializer), t.initializerSignature != null && (n.initializerSignature = t.initializerSignature), t.trainingConfig != null && (n.trainingConfig = t.trainingConfig), n;
  }
  function db(t, e, n) {
    const s = {
      modelTopology: t.modelTopology,
      format: t.format,
      generatedBy: t.generatedBy,
      convertedBy: t.convertedBy
    };
    if (t.trainingConfig != null && (s.trainingConfig = t.trainingConfig), t.weightsManifest != null) {
      if (!e) throw new Error("modelJSON has weightsManifest but weightSpecs is null");
      if (!n) throw new Error("modelJSON has weightsManifest but weightData is null");
      s.weightSpecs = e, s.weightData = n;
    }
    return t.signature != null && (s.signature = t.signature), t.userDefinedMetadata != null && (s.userDefinedMetadata = t.userDefinedMetadata), t.modelInitializer != null && (s.modelInitializer = t.modelInitializer), t.initializerSignature != null && (s.initializerSignature = t.initializerSignature), s;
  }
  async function pb(t, e) {
    let n, s;
    return t.weightsManifest != null && ([n, s] = await e(t.weightsManifest)), db(t, n, s);
  }
  function Bu(t) {
    if (t.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");
    return {
      dateSaved: /* @__PURE__ */ new Date(),
      modelTopologyType: "JSON",
      modelTopologyBytes: t.modelTopology == null ? 0 : pv(JSON.stringify(t.modelTopology)),
      weightSpecsBytes: t.weightSpecs == null ? 0 : pv(JSON.stringify(t.weightSpecs)),
      weightDataBytes: t.weightData == null ? 0 : new Ps(t.weightData).byteLength
    };
  }
  function Ed(t) {
    const e = [];
    for (const n of t) e.push(...n.weights);
    return e;
  }
  function MF() {
    const t = (n) => {
      let s = n << 13, r = 0;
      for (; (s & 8388608) === 0; ) r -= 8388608, s <<= 1;
      return s &= -8388609, r += 947912704, s | r;
    }, e = new Uint32Array(2048);
    e[0] = 0;
    for (let n = 1; n < 1024; n++) e[n] = t(n);
    for (let n = 1024; n < 2048; n++) e[n] = 939524096 + (n - 1024 << 13);
    return e;
  }
  function BF() {
    const t = new Uint32Array(64);
    t[0] = 0, t[31] = 1199570944, t[32] = 2147483648, t[63] = 3347054592;
    for (let e = 1; e < 31; e++) t[e] = e << 23;
    for (let e = 33; e < 63; e++) t[e] = 2147483648 + (e - 32 << 23);
    return t;
  }
  function VF() {
    const t = new Uint32Array(64);
    for (let e = 0; e < 64; e++) t[e] = 1024;
    return t[0] = t[32] = 0, t;
  }
  function WF() {
    const t = MF(), e = BF(), n = VF();
    return (s) => {
      const r = new ArrayBuffer(4 * s.length), o = new Uint32Array(r);
      for (let i = 0; i < s.length; i++) {
        const a = s[i], l = t[n[a >> 10] + (a & 1023)] + e[a >> 10];
        o[i] = l;
      }
      return new Float32Array(r);
    };
  }
  class ft {
    constructor() {
      this.saveRouters = [], this.loadRouters = [];
    }
    static getInstance() {
      return ft.instance == null && (ft.instance = new ft()), ft.instance;
    }
    static registerSaveRouter(e) {
      ft.getInstance().saveRouters.push(e);
    }
    static registerLoadRouter(e) {
      ft.getInstance().loadRouters.push(e);
    }
    static getSaveHandlers(e) {
      return ft.getHandlers(e, "save");
    }
    static getLoadHandlers(e, n) {
      return ft.getHandlers(e, "load", n);
    }
    static getHandlers(e, n, s) {
      const r = [];
      return (n === "load" ? ft.getInstance().loadRouters : ft.getInstance().saveRouters).forEach((i) => {
        const a = i(e, s);
        a !== null && r.push(a);
      }), r;
    }
  }
  const UF = (t) => ft.registerSaveRouter(t), GF = (t) => ft.registerLoadRouter(t), rI = (t) => ft.getSaveHandlers(t), oI = (t, e) => ft.getLoadHandlers(t, e);
  const jg = "tensorflowjs", qg = 1, Wo = "models_store", qr = "model_info_store";
  function iI() {
    if (!j().getBool("IS_BROWSER")) throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
    const t = typeof window > "u" ? self : window, e = t.indexedDB || t.mozIndexedDB || t.webkitIndexedDB || t.msIndexedDB || t.shimIndexedDB;
    if (e == null) throw new Error("The current browser does not appear to support IndexedDB.");
    return e;
  }
  function Kg(t) {
    const e = t.result;
    e.createObjectStore(Wo, {
      keyPath: "modelPath"
    }), e.createObjectStore(qr, {
      keyPath: "modelPath"
    });
  }
  class ei {
    constructor(e) {
      if (this.indexedDB = iI(), e == null || !e) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
      this.modelPath = e;
    }
    async save(e) {
      if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
      return this.databaseAction(this.modelPath, e);
    }
    async load() {
      return this.databaseAction(this.modelPath);
    }
    databaseAction(e, n) {
      return new Promise((s, r) => {
        const o = this.indexedDB.open(jg, qg);
        o.onupgradeneeded = () => Kg(o), o.onsuccess = () => {
          const i = o.result;
          if (n == null) {
            const a = i.transaction(Wo, "readonly"), c = a.objectStore(Wo).get(this.modelPath);
            c.onsuccess = () => {
              if (c.result == null) return i.close(), r(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
              s(c.result.modelArtifacts);
            }, c.onerror = (u) => (i.close(), r(c.error)), a.oncomplete = () => i.close();
          } else {
            n.weightData = Ps.join(n.weightData);
            const a = Bu(n), l = i.transaction(qr, "readwrite");
            let c = l.objectStore(qr), u;
            try {
              u = c.put({
                modelPath: this.modelPath,
                modelArtifactsInfo: a
              });
            } catch (d) {
              return r(d);
            }
            let h;
            u.onsuccess = () => {
              h = i.transaction(Wo, "readwrite");
              const d = h.objectStore(Wo);
              let p;
              try {
                p = d.put({
                  modelPath: this.modelPath,
                  modelArtifacts: n,
                  modelArtifactsInfo: a
                });
              } catch (f) {
                return r(f);
              }
              p.onsuccess = () => s({
                modelArtifactsInfo: a
              }), p.onerror = (f) => {
                c = l.objectStore(qr);
                const m = c.delete(this.modelPath);
                m.onsuccess = () => (i.close(), r(p.error)), m.onerror = (g) => (i.close(), r(p.error));
              };
            }, u.onerror = (d) => (i.close(), r(u.error)), l.oncomplete = () => {
              h == null ? i.close() : h.oncomplete = () => i.close();
            };
          }
        }, o.onerror = (i) => r(o.error);
      });
    }
  }
  ei.URL_SCHEME = "indexeddb://";
  const aI = (t) => j().getBool("IS_BROWSER") && !Array.isArray(t) && t.startsWith(ei.URL_SCHEME) ? HF(t.slice(ei.URL_SCHEME.length)) : null;
  ft.registerSaveRouter(aI);
  ft.registerLoadRouter(aI);
  function HF(t) {
    return new ei(t);
  }
  function jF(t) {
    return t.startsWith(ei.URL_SCHEME) ? t.slice(ei.URL_SCHEME.length) : t;
  }
  class qF {
    constructor() {
      this.indexedDB = iI();
    }
    async listModels() {
      return new Promise((e, n) => {
        const s = this.indexedDB.open(jg, qg);
        s.onupgradeneeded = () => Kg(s), s.onsuccess = () => {
          const r = s.result, o = r.transaction(qr, "readonly"), a = o.objectStore(qr).getAll();
          a.onsuccess = () => {
            const l = {};
            for (const c of a.result) l[c.modelPath] = c.modelArtifactsInfo;
            e(l);
          }, a.onerror = (l) => (r.close(), n(a.error)), o.oncomplete = () => r.close();
        }, s.onerror = (r) => n(s.error);
      });
    }
    async removeModel(e) {
      return e = jF(e), new Promise((n, s) => {
        const r = this.indexedDB.open(jg, qg);
        r.onupgradeneeded = () => Kg(r), r.onsuccess = () => {
          const o = r.result, i = o.transaction(qr, "readwrite"), a = i.objectStore(qr), l = a.get(e);
          let c;
          l.onsuccess = () => {
            if (l.result == null) return o.close(), s(new Error(`Cannot find model with path '${e}' in IndexedDB.`));
            {
              const u = a.delete(e), h = () => {
                c = o.transaction(Wo, "readwrite");
                const p = c.objectStore(Wo).delete(e);
                p.onsuccess = () => n(l.result.modelArtifactsInfo), p.onerror = (f) => s(l.error);
              };
              u.onsuccess = h, u.onerror = (d) => (h(), o.close(), s(l.error));
            }
          }, l.onerror = (u) => (o.close(), s(l.error)), i.oncomplete = () => {
            c == null ? o.close() : c.oncomplete = () => o.close();
          };
        }, r.onerror = (o) => s(r.error);
      });
    }
  }
  const vr = "/", zi = "tensorflowjs_models", lI = "info", KF = "model_topology", XF = "weight_specs", YF = "weight_data", ZF = "model_metadata";
  function cI(t) {
    return {
      info: [
        zi,
        t,
        lI
      ].join(vr),
      topology: [
        zi,
        t,
        KF
      ].join(vr),
      weightSpecs: [
        zi,
        t,
        XF
      ].join(vr),
      weightData: [
        zi,
        t,
        YF
      ].join(vr),
      modelMetadata: [
        zi,
        t,
        ZF
      ].join(vr)
    };
  }
  function uI(t) {
    for (const e of Object.values(t)) window.localStorage.removeItem(e);
  }
  function JF(t) {
    const e = t.split(vr);
    if (e.length < 3) throw new Error(`Invalid key format: ${t}`);
    return e.slice(1, e.length - 1).join(vr);
  }
  function QF(t) {
    return t.startsWith(ti.URL_SCHEME) ? t.slice(ti.URL_SCHEME.length) : t;
  }
  class ti {
    constructor(e) {
      if (!j().getBool("IS_BROWSER") || typeof window > "u" || typeof window.localStorage > "u") throw new Error("The current environment does not support local storage.");
      if (this.LS = window.localStorage, e == null || !e) throw new Error("For local storage, modelPath must not be null, undefined or empty.");
      this.modelPath = e, this.keys = cI(this.modelPath);
    }
    async save(e) {
      if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
      {
        const n = JSON.stringify(e.modelTopology), s = JSON.stringify(e.weightSpecs), r = Bu(e), o = Ps.join(e.weightData);
        try {
          this.LS.setItem(this.keys.info, JSON.stringify(r)), this.LS.setItem(this.keys.topology, n), this.LS.setItem(this.keys.weightSpecs, s), this.LS.setItem(this.keys.weightData, PF(o));
          const i = {
            format: e.format,
            generatedBy: e.generatedBy,
            convertedBy: e.convertedBy,
            signature: e.signature != null ? e.signature : void 0,
            userDefinedMetadata: e.userDefinedMetadata != null ? e.userDefinedMetadata : void 0,
            modelInitializer: e.modelInitializer != null ? e.modelInitializer : void 0,
            initializerSignature: e.initializerSignature != null ? e.initializerSignature : void 0,
            trainingConfig: e.trainingConfig != null ? e.trainingConfig : void 0
          };
          return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(i)), {
            modelArtifactsInfo: r
          };
        } catch {
          throw uI(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`);
        }
      }
    }
    async load() {
      const e = JSON.parse(this.LS.getItem(this.keys.info));
      if (e == null) throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
      if (e.modelTopologyType !== "JSON") throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
      const n = {}, s = JSON.parse(this.LS.getItem(this.keys.topology));
      if (s == null) throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
      n.modelTopology = s;
      const r = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
      if (r == null) throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
      n.weightSpecs = r;
      const o = this.LS.getItem(this.keys.modelMetadata);
      if (o != null) {
        const a = JSON.parse(o);
        n.format = a.format, n.generatedBy = a.generatedBy, n.convertedBy = a.convertedBy, a.signature != null && (n.signature = a.signature), a.userDefinedMetadata != null && (n.userDefinedMetadata = a.userDefinedMetadata), a.modelInitializer != null && (n.modelInitializer = a.modelInitializer), a.initializerSignature != null && (n.initializerSignature = a.initializerSignature), a.trainingConfig != null && (n.trainingConfig = a.trainingConfig);
      }
      const i = this.LS.getItem(this.keys.weightData);
      if (i == null) throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
      return n.weightData = zF(i), n;
    }
  }
  ti.URL_SCHEME = "localstorage://";
  const hI = (t) => j().getBool("IS_BROWSER") && !Array.isArray(t) && t.startsWith(ti.URL_SCHEME) ? eL(t.slice(ti.URL_SCHEME.length)) : null;
  ft.registerSaveRouter(hI);
  ft.registerLoadRouter(hI);
  function eL(t) {
    return new ti(t);
  }
  class tL {
    constructor() {
      C(j().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), C(typeof window > "u" || typeof window.localStorage < "u", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
    }
    async listModels() {
      const e = {}, n = zi + vr, s = vr + lI;
      for (let r = 0; r < this.LS.length; ++r) {
        const o = this.LS.key(r);
        if (o.startsWith(n) && o.endsWith(s)) {
          const i = JF(o);
          e[i] = JSON.parse(this.LS.getItem(o));
        }
      }
      return e;
    }
    async removeModel(e) {
      e = QF(e);
      const n = cI(e);
      if (this.LS.getItem(n.info) == null) throw new Error(`Cannot find model at path '${e}'`);
      const s = JSON.parse(this.LS.getItem(n.info));
      return uI(n), s;
    }
  }
  const Hi = "://";
  class un {
    constructor() {
      this.managers = {};
    }
    static getInstance() {
      return un.instance == null && (un.instance = new un()), un.instance;
    }
    static registerManager(e, n) {
      C(e != null, () => "scheme must not be undefined or null."), e.endsWith(Hi) && (e = e.slice(0, e.indexOf(Hi))), C(e.length > 0, () => "scheme must not be an empty string.");
      const s = un.getInstance();
      C(s.managers[e] == null, () => `A model store manager is already registered for scheme '${e}'.`), s.managers[e] = n;
    }
    static getManager(e) {
      const n = un.getInstance().managers[e];
      if (n == null) throw new Error(`Cannot find model manager for scheme '${e}'`);
      return n;
    }
    static getSchemes() {
      return Object.keys(un.getInstance().managers);
    }
  }
  function Yh(t) {
    if (t.indexOf(Hi) === -1) throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${un.getSchemes().join(",")}`);
    return {
      scheme: t.split(Hi)[0],
      path: t.split(Hi)[1]
    };
  }
  async function dI(t, e, n = false) {
    C(t !== e, () => `Old path and new path are the same: '${t}'`);
    const s = ft.getLoadHandlers(t);
    C(s.length > 0, () => `Copying failed because no load handler is found for source URL ${t}.`), C(s.length < 2, () => `Copying failed because more than one (${s.length}) load handlers for source URL ${t}.`);
    const r = s[0], o = ft.getSaveHandlers(e);
    C(o.length > 0, () => `Copying failed because no save handler is found for destination URL ${e}.`), C(o.length < 2, () => `Copying failed because more than one (${s.length}) save handlers for destination URL ${e}.`);
    const i = o[0], a = Yh(t).scheme, l = Yh(t).path, c = a === Yh(t).scheme, u = await r.load();
    n && c && await un.getManager(a).removeModel(l);
    const h = await i.save(u);
    return n && !c && await un.getManager(a).removeModel(l), h.modelArtifactsInfo;
  }
  async function nL() {
    const t = un.getSchemes(), e = {};
    for (const n of t) {
      const s = await un.getManager(n).listModels();
      for (const r in s) {
        const o = n + Hi + r;
        e[o] = s[r];
      }
    }
    return e;
  }
  async function sL(t) {
    const e = Yh(t);
    return un.getManager(e.scheme).removeModel(e.path);
  }
  async function rL(t, e) {
    return dI(t, e, false);
  }
  async function oL(t, e) {
    return dI(t, e, true);
  }
  class iL {
    constructor() {
      this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = false;
    }
    fetch(e, n) {
      return fetch(e, n);
    }
    now() {
      return performance.now();
    }
    encode(e, n) {
      if (n !== "utf-8" && n !== "utf8") throw new Error(`Browser's encoder only supports utf-8, but got ${n}`);
      return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(e);
    }
    decode(e, n) {
      return new TextDecoder(n).decode(e);
    }
    setTimeoutCustom(e, n) {
      if (typeof window > "u" || !j().getBool("USE_SETTIMEOUTCUSTOM")) {
        setTimeout(e, n);
        return;
      }
      this.functionRefs.push(e), setTimeout(() => {
        window.postMessage({
          name: this.messageName,
          index: this.functionRefs.length - 1
        }, "*");
      }, n), this.hasEventListener || (this.hasEventListener = true, window.addEventListener("message", (s) => {
        if (s.source === window && s.data.name === this.messageName) {
          s.stopPropagation();
          const r = this.functionRefs[s.data.index];
          r(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0);
        }
      }, true));
    }
    isTypedArray(e) {
      return PC(e);
    }
  }
  if (j().get("IS_BROWSER")) {
    j().setPlatform("browser", new iL());
    try {
      un.registerManager(ti.URL_SCHEME, new tL());
    } catch {
    }
    try {
      un.registerManager(ei.URL_SCHEME, new qF());
    } catch {
    }
  }
  const aL = {
    importFetch: () => require("node-fetch")
  };
  let og;
  class lL {
    constructor() {
      this.util = require("util"), this.textEncoder = new this.util.TextEncoder();
    }
    fetch(e, n) {
      return j().global.fetch != null ? j().global.fetch(e, n) : (og == null && (og = aL.importFetch()), og(e, n));
    }
    now() {
      const e = process.hrtime();
      return e[0] * 1e3 + e[1] / 1e6;
    }
    encode(e, n) {
      if (n !== "utf-8" && n !== "utf8") throw new Error(`Node built-in encoder only supports utf-8, but got ${n}`);
      return this.textEncoder.encode(e);
    }
    decode(e, n) {
      return e.length === 0 ? "" : new this.util.TextDecoder(n).decode(e);
    }
    isTypedArray(e) {
      return this.util.types.isFloat32Array(e) || this.util.types.isInt32Array(e) || this.util.types.isUint8Array(e) || this.util.types.isUint8ClampedArray(e);
    }
  }
  j().get("IS_NODE") && !j().get("IS_BROWSER") && j().setPlatform("node", new lL());
  Me = function(t, e = "float32", n) {
    return e = e || "float32", Kn(t), new Rt(t, e, n);
  };
  function cL(t, e) {
    const n = T(t, "x", "cast");
    if (!kC(e)) throw new Error(`Failed to cast to unknown dtype ${e}`);
    if (e === "string" && n.dtype !== "string" || e !== "string" && n.dtype === "string") throw new Error("Only strings can be casted to strings");
    const s = {
      x: n
    }, r = {
      dtype: e
    };
    return D.runKernel(ba, s, r);
  }
  const ge = O({
    cast_: cL
  });
  function uL(t) {
    const n = {
      x: T(t, "x", "clone", "string_or_numeric")
    };
    return D.runKernel(Aa, n);
  }
  const er = O({
    clone_: uL
  });
  function fb(t, e = false) {
    console.log(t.toString(e));
  }
  XC();
  const hL = {
    buffer: Me,
    cast: ge,
    clone: er,
    print: fb
  };
  dF(hL);
  function dL(t, e) {
    let n = T(t, "a", "add"), s = T(e, "b", "add");
    [n, s] = yt(n, s);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(xi, r);
  }
  const ae = O({
    add_: dL
  });
  function pL(t, e) {
    let n = T(t, "a", "floorDiv"), s = T(e, "b", "floorDiv");
    [n, s] = yt(n, s);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(Ea, r);
  }
  const Tf = O({
    floorDiv_: pL
  });
  function fL(t, e) {
    let n = T(t, "a", "div"), s = T(e, "b", "div");
    if ([n, s] = yt(n, s), n.dtype === "int32" && s.dtype === "int32") return Tf(n, s);
    const r = {
      a: n,
      b: s
    }, o = {};
    return D.runKernel($a, r, o);
  }
  const Ne = O({
    div_: fL
  });
  function mL(t, e) {
    let n = T(t, "a", "mul"), s = T(e, "b", "mul");
    [n, s] = yt(n, s);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(Ba, r);
  }
  const L = O({
    mul_: mL
  });
  function gL(t) {
    const e = T(t, "x", "abs");
    if (e.dtype === "complex64") {
      const n = {
        x: e
      };
      return D.runKernel(Hc, n);
    } else {
      const n = {
        x: e
      };
      return D.runKernel(Lc, n);
    }
  }
  const kt = O({
    abs_: gL
  });
  function yL(t) {
    const n = {
      x: T(t, "x", "acos")
    };
    return D.runKernel(ha, n);
  }
  const mb = O({
    acos_: yL
  });
  function bL(t) {
    const n = {
      x: T(t, "x", "acosh")
    };
    return D.runKernel(da, n);
  }
  const gb = O({
    acosh_: bL
  });
  function xL(t) {
    C(Array.isArray(t), () => "The argument passed to tf.addN() must be a list of tensors"), C(t.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${t.length}`);
    const e = t.map((r, o) => T(r, `tensors${o}`, "addN")), n = e[0];
    e.forEach((r) => {
      if (r.dtype !== n.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype");
    }), e.forEach((r) => {
      if (!Ue(r.shape, n.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape");
    });
    const s = e;
    return D.runKernel(Pc, s);
  }
  const pI = O({
    addN_: xL
  });
  function wL(t, e = null, n = false) {
    const r = {
      x: T(t, "x", "all", "bool")
    }, o = {
      axis: e,
      keepDims: n
    };
    return D.runKernel(xp, r, o);
  }
  const Ef = O({
    all_: wL
  });
  function vL(t, e = null, n = false) {
    const r = {
      x: T(t, "x", "any", "bool")
    }, o = {
      axis: e,
      keepDims: n
    };
    return D.runKernel(wp, r, o);
  }
  const wc = O({
    any_: vL
  });
  function SL(t, e = 0) {
    const s = {
      x: T(t, "x", "argMax")
    }, r = {
      axis: e
    };
    return D.runKernel(zc, s, r);
  }
  const ni = O({
    argMax_: SL
  });
  function $L(t, e = 0) {
    const s = {
      x: T(t, "x", "argMin")
    }, r = {
      axis: e
    };
    return D.runKernel(Mc, s, r);
  }
  const yb = O({
    argMin_: $L
  });
  function CL(t) {
    const n = {
      x: T(t, "x", "asin")
    };
    return D.runKernel(pa, n);
  }
  const bb = O({
    asin_: CL
  });
  function IL(t) {
    const n = {
      x: T(t, "x", "asinh")
    };
    return D.runKernel(fa, n);
  }
  const xb = O({
    asinh_: IL
  });
  function NL(t) {
    const n = {
      x: T(t, "x", "atan")
    };
    return D.runKernel(ma, n);
  }
  const wb = O({
    atan_: NL
  });
  function kL(t, e) {
    let n = T(t, "a", "atan2"), s = T(e, "b", "atan2");
    [n, s] = yt(n, s);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(ya, r);
  }
  const vb = O({
    atan2_: kL
  });
  function TL(t) {
    const n = {
      x: T(t, "x", "atanh")
    };
    return D.runKernel(ga, n);
  }
  const Sb = O({
    atanh_: TL
  });
  Vu = function(t, e, n, s, r = "NHWC", o) {
    const i = t[3], a = [
      ...e,
      i
    ], l = Or(r);
    return jt(t, a, n, o, s, null, null, l);
  };
  bs = function(t, e, n, s, r, o, i = "channelsLast") {
    const [a, l] = vc(e);
    let c;
    if (i === "channelsLast") c = [
      a,
      l,
      t[3],
      t[3]
    ];
    else if (i === "channelsFirst") c = [
      a,
      l,
      t[1],
      t[1]
    ];
    else throw new Error(`Unknown dataFormat ${i}`);
    return jt(t, c, n, s, r, o, false, i);
  };
  Dr = function(t, e, n, s, r, o, i = "NDHWC") {
    const [a, l, c] = Xg(e);
    let u, h;
    if (i === "NDHWC") h = "channelsLast", u = [
      a,
      l,
      c,
      t[4],
      t[4]
    ];
    else if (i === "NCDHW") h = "channelsFirst", u = [
      a,
      l,
      c,
      t[1],
      t[1]
    ];
    else throw new Error(`Unknown dataFormat ${i}`);
    return vo(t, u, n, s, r, false, h, o);
  };
  jt = function(t, e, n, s, r, o, i = false, a = "channelsLast") {
    let [l, c, u, h] = [
      -1,
      -1,
      -1,
      -1
    ];
    if (a === "channelsLast") [l, c, u, h] = t;
    else if (a === "channelsFirst") [l, h, c, u] = t;
    else throw new Error(`Unknown dataFormat ${a}`);
    const [d, p, , f] = e, [m, g] = vc(n), [y, b] = vc(s), w = ji(d, y), x = ji(p, b), { padInfo: S, outHeight: I, outWidth: E } = AL(r, c, u, m, g, w, x, o, a), R = i ? f * h : f;
    let N;
    return a === "channelsFirst" ? N = [
      l,
      R,
      I,
      E
    ] : a === "channelsLast" && (N = [
      l,
      I,
      E,
      R
    ]), {
      batchSize: l,
      dataFormat: a,
      inHeight: c,
      inWidth: u,
      inChannels: h,
      outHeight: I,
      outWidth: E,
      outChannels: R,
      padInfo: S,
      strideHeight: m,
      strideWidth: g,
      filterHeight: d,
      filterWidth: p,
      effectiveFilterHeight: w,
      effectiveFilterWidth: x,
      dilationHeight: y,
      dilationWidth: b,
      inShape: t,
      outShape: N,
      filterShape: e
    };
  };
  vo = function(t, e, n, s, r, o = false, i = "channelsLast", a) {
    let [l, c, u, h, d] = [
      -1,
      -1,
      -1,
      -1,
      -1
    ];
    if (i === "channelsLast") [l, c, u, h, d] = t;
    else if (i === "channelsFirst") [l, d, c, u, h] = t;
    else throw new Error(`Unknown dataFormat ${i}`);
    const [p, f, m, , g] = e, [y, b, w] = Xg(n), [x, S, I] = Xg(s), E = ji(p, x), R = ji(f, S), N = ji(m, I), { padInfo: k, outDepth: $, outHeight: F, outWidth: M } = _L(r, c, u, h, y, b, w, E, R, N, a), U = o ? g * d : g;
    let W;
    return i === "channelsFirst" ? W = [
      l,
      U,
      $,
      F,
      M
    ] : i === "channelsLast" && (W = [
      l,
      $,
      F,
      M,
      U
    ]), {
      batchSize: l,
      dataFormat: i,
      inDepth: c,
      inHeight: u,
      inWidth: h,
      inChannels: d,
      outDepth: $,
      outHeight: F,
      outWidth: M,
      outChannels: U,
      padInfo: k,
      strideDepth: y,
      strideHeight: b,
      strideWidth: w,
      filterDepth: p,
      filterHeight: f,
      filterWidth: m,
      effectiveFilterDepth: E,
      effectiveFilterHeight: R,
      effectiveFilterWidth: N,
      dilationDepth: x,
      dilationHeight: S,
      dilationWidth: I,
      inShape: t,
      outShape: W,
      filterShape: e
    };
  };
  function EL(t, e, n, s, r) {
    s == null && (s = $b(t, e, n));
    const o = t[0], i = t[1], a = Sc((o - e + 2 * s) / n + 1, r), l = Sc((i - e + 2 * s) / n + 1, r);
    return [
      a,
      l
    ];
  }
  function RL(t, e, n, s, r, o) {
    r == null && (r = $b(t, e[0], s[0]));
    const i = [
      0,
      0,
      0,
      n
    ];
    for (let a = 0; a < 3; a++) t[a] + 2 * r >= e[a] && (i[a] = Sc((t[a] - e[a] + 2 * r) / s[a] + 1, o));
    return i;
  }
  function $b(t, e, n, s = 1) {
    const r = ji(e, s);
    return Math.floor((t[0] * (n - 1) - n + r) / 2);
  }
  function vc(t) {
    return typeof t == "number" ? [
      t,
      t,
      t
    ] : t.length === 2 ? [
      t[0],
      t[1],
      1
    ] : t;
  }
  function Xg(t) {
    return typeof t == "number" ? [
      t,
      t,
      t
    ] : t;
  }
  function ji(t, e) {
    return e <= 1 ? t : t + (t - 1) * (e - 1);
  }
  function AL(t, e, n, s, r, o, i, a, l) {
    let c, u, h;
    if (typeof t == "number") {
      c = {
        top: t,
        bottom: t,
        left: t,
        right: t,
        type: t === 0 ? "VALID" : "NUMBER"
      };
      const p = EL([
        e,
        n
      ], o, s, t, a);
      u = p[0], h = p[1];
    } else if (t === "same") {
      u = Math.ceil(e / s), h = Math.ceil(n / r);
      const d = Math.max(0, (u - 1) * s + o - e), p = Math.max(0, (h - 1) * r + i - n), f = Math.floor(d / 2), m = d - f, g = Math.floor(p / 2), y = p - g;
      c = {
        top: f,
        bottom: m,
        left: g,
        right: y,
        type: "SAME"
      };
    } else if (t === "valid") c = {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      type: "VALID"
    }, u = Math.ceil((e - o + 1) / s), h = Math.ceil((n - i + 1) / r);
    else if (typeof t == "object") {
      const d = l === "channelsLast" ? t[1][0] : t[2][0], p = l === "channelsLast" ? t[1][1] : t[2][1], f = l === "channelsLast" ? t[2][0] : t[3][0], m = l === "channelsLast" ? t[2][1] : t[3][1];
      c = {
        top: d,
        bottom: p,
        left: f,
        right: m,
        type: d === 0 && p === 0 && f === 0 && m === 0 ? "VALID" : "EXPLICIT"
      }, u = Sc((e - o + d + p) / s + 1, a), h = Sc((n - i + f + m) / r + 1, a);
    } else throw Error(`Unknown padding parameter: ${t}`);
    return {
      padInfo: c,
      outHeight: u,
      outWidth: h
    };
  }
  function _L(t, e, n, s, r, o, i, a, l, c, u) {
    let h, d, p, f;
    if (t === "valid" && (t = 0), typeof t == "number") {
      h = {
        top: t,
        bottom: t,
        left: t,
        right: t,
        front: t,
        back: t,
        type: t === 0 ? "VALID" : "NUMBER"
      };
      const g = RL([
        e,
        n,
        s,
        1
      ], [
        a,
        l,
        c
      ], 1, [
        r,
        o,
        i
      ], t, u);
      d = g[0], p = g[1], f = g[2];
    } else if (t === "same") {
      d = Math.ceil(e / r), p = Math.ceil(n / o), f = Math.ceil(s / i);
      const m = (d - 1) * r + a - e, g = (p - 1) * o + l - n, y = (f - 1) * i + c - s, b = Math.floor(m / 2), w = m - b, x = Math.floor(g / 2), S = g - x, I = Math.floor(y / 2), E = y - I;
      h = {
        top: x,
        bottom: S,
        left: I,
        right: E,
        front: b,
        back: w,
        type: "SAME"
      };
    } else throw Error(`Unknown padding parameter: ${t}`);
    return {
      padInfo: h,
      outDepth: d,
      outHeight: p,
      outWidth: f
    };
  }
  function Sc(t, e) {
    if (!e) return Math.trunc(t);
    switch (e) {
      case "round":
        return Math.round(t);
      case "ceil":
        return Math.ceil(t);
      case "floor":
        return Math.floor(t);
      default:
        throw new Error(`Unknown roundingMode ${e}`);
    }
  }
  function ao(t) {
    const [e, n, s] = vc(t);
    return e === 1 && n === 1 && s === 1;
  }
  sn = function(t, e) {
    return ao(t) || ao(e);
  };
  function si(t) {
    return vc(t).every((e) => e > 0);
  }
  Or = function(t) {
    if (t === "NHWC") return "channelsLast";
    if (t === "NCHW") return "channelsFirst";
    throw new Error(`Unknown dataFormat ${t}`);
  };
  function xn(t, e, n) {
    if (n != null) {
      if (typeof e == "string") throw Error(`Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${e}.`);
      if (typeof e == "number") C(Jo(e), () => `Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${e}.`);
      else if (typeof e == "object") e.forEach((s) => {
        s.forEach((r) => {
          C(Jo(r), () => `Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${r}.`);
        });
      });
      else throw Error(`Error in ${t}: Unknown padding parameter: ${e}`);
    }
  }
  function DL(t, e) {
    const s = {
      x: T(t, "x", "reshape", "string_or_numeric")
    }, r = {
      shape: e
    };
    return D.runKernel(Iu, s, r);
  }
  const P = O({
    reshape_: DL
  });
  function OL(t, e, n, s, r) {
    const o = T(t, "x", "avgPool", "float32"), i = 1;
    C(sn(n, i), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`);
    let a = o, l = false;
    o.rank === 3 && (l = true, a = P(o, [
      1,
      o.shape[0],
      o.shape[1],
      o.shape[2]
    ])), C(a.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${a.rank}.`), xn("avgPool", s, r);
    const c = {
      x: a
    }, u = {
      filterSize: e,
      strides: n,
      pad: s,
      dimRoundingMode: r
    };
    let h = D.runKernel(Bc, c, u);
    return h = ge(h, o.dtype), l ? P(h, [
      h.shape[1],
      h.shape[2],
      h.shape[3]
    ]) : h;
  }
  const Wu = O({
    avgPool_: OL
  });
  function FL(t, e, n, s, r, o = "NDHWC") {
    const i = T(t, "x", "avgPool3d", "float32");
    let a = i, l = false;
    i.rank === 4 && (l = true, a = P(i, [
      1,
      i.shape[0],
      i.shape[1],
      i.shape[2],
      i.shape[3]
    ])), C(a.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`), C(o === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`), C(typeof n == "number" && n > 0 || Array.isArray(n) && n[0] > 0 && n[1] > 0 && n[2] > 0, () => `Error in avgPool3d: Stride must be > 0, but got '${n}'`), xn("avgPool3d", s, r);
    const c = {
      x: a
    }, u = {
      filterSize: e,
      strides: n,
      pad: s,
      dimRoundingMode: r,
      dataFormat: o
    };
    let h = D.runKernel(Vc, c, u);
    return h = ge(h, a.dtype), l ? P(h, [
      h.shape[1],
      h.shape[2],
      h.shape[3],
      h.shape[4]
    ]) : h;
  }
  const Cb = O({
    avgPool3d_: FL
  });
  function LL(t, e = 0) {
    C(t.length >= 1, () => "Pass at least one tensor to concat");
    const n = xc(t, "tensors", "concat", "string_or_numeric");
    if (n[0].dtype === "complex64" && n.forEach((o) => {
      if (o.dtype !== "complex64") throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${o.dtype}. `);
    }), n.length === 1) return er(n[0]);
    const s = n, r = {
      axis: e
    };
    return D.runKernel(jc, s, r);
  }
  const vt = O({
    concat_: LL
  });
  function PL(t, e, n = false, s = false) {
    let r = T(t, "a", "matMul"), o = T(e, "b", "matMul");
    [r, o] = yt(r, o);
    const i = {
      a: r,
      b: o
    }, a = {
      transposeA: n,
      transposeB: s
    };
    return D.runKernel(Wc, i, a);
  }
  const Be = O({
    matMul_: PL
  });
  function zL(t) {
    const n = {
      x: T(t, "x", "sigmoid", "float32")
    };
    return D.runKernel(Za, n);
  }
  const Ts = O({
    sigmoid_: zL
  });
  function ML(t, e, n) {
    const s = T(t, "x", "slice", "string_or_numeric");
    if (s.rank === 0) throw new Error("Slicing scalar is not possible");
    const r = {
      x: s
    }, o = {
      begin: e,
      size: n
    };
    return D.runKernel(Ru, r, o);
  }
  const je = O({
    slice_: ML
  });
  function BL(t) {
    const n = {
      x: T(t, "x", "tanh", "float32")
    };
    return D.runKernel(sl, n);
  }
  const lo = O({
    tanh_: BL
  });
  function VL(t, e, n, s, r, o) {
    const i = T(t, "forgetBias", "basicLSTMCell"), a = T(e, "lstmKernel", "basicLSTMCell"), l = T(n, "lstmBias", "basicLSTMCell"), c = T(s, "data", "basicLSTMCell"), u = T(r, "c", "basicLSTMCell"), h = T(o, "h", "basicLSTMCell"), d = vt([
      c,
      h
    ], 1), p = Be(d, a), f = ae(p, l), m = f.shape[0], g = f.shape[1] / 4, y = [
      m,
      g
    ], b = je(f, [
      0,
      0
    ], y), w = je(f, [
      0,
      g
    ], y), x = je(f, [
      0,
      g * 2
    ], y), S = je(f, [
      0,
      g * 3
    ], y), I = ae(L(Ts(b), lo(w)), L(u, Ts(ae(i, x)))), E = L(lo(I), Ts(S));
    return [
      I,
      E
    ];
  }
  const fI = O({
    basicLSTMCell_: VL
  });
  function WL(t, e, n) {
    const s = T(t, "x", "batchToSpaceND"), r = e.reduce((a, l) => a * l);
    C(s.rank >= 1 + e.length, () => `input rank is ${s.rank} but should be > than blockShape.length ${e.length}`), C(n.length === e.length, () => `crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`), C(s.shape[0] % r === 0, () => `input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${r}`);
    const o = {
      x: s
    }, i = {
      blockShape: e,
      crops: n
    };
    return D.runKernel(Uc, o, i);
  }
  const Uu = O({
    batchToSpaceND_: WL
  });
  function UL(t) {
    let e;
    return t.rank === 0 || t.rank === 1 ? e = P(t, [
      1,
      1,
      1,
      t.size
    ]) : t.rank === 2 ? e = P(t, [
      1,
      1,
      t.shape[0],
      t.shape[1]
    ]) : t.rank === 3 ? e = P(t, [
      1,
      t.shape[0],
      t.shape[1],
      t.shape[2]
    ]) : e = t, e;
  }
  function GL(t, e, n, s, r, o) {
    o == null && (o = 1e-3);
    const i = T(t, "x", "batchNorm"), a = T(e, "mean", "batchNorm"), l = T(n, "variance", "batchNorm");
    let c;
    r != null && (c = T(r, "scale", "batchNorm"));
    let u;
    s != null && (u = T(s, "offset", "batchNorm")), C(a.rank === l.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), C(u == null || a.rank === u.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), C(c == null || a.rank === c.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
    const d = {
      x: UL(i),
      scale: c,
      offset: u,
      mean: a,
      variance: l
    }, p = {
      varianceEpsilon: o
    }, f = D.runKernel(tu, d, p);
    return P(f, i.shape);
  }
  const il = O({
    batchNorm_: GL
  });
  function HL(t, e, n, s, r, o) {
    const i = T(t, "x", "batchNorm"), a = T(e, "mean", "batchNorm"), l = T(n, "variance", "batchNorm");
    let c;
    r != null && (c = T(r, "scale", "batchNorm"));
    let u;
    return s != null && (u = T(s, "offset", "batchNorm")), C(i.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`), C(a.rank === 2 || a.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`), C(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`), c != null && C(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`), u != null && C(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${u.rank}.`), il(i, a, l, u, c, o);
  }
  const Ib = O({
    batchNorm2d_: HL
  });
  function jL(t, e, n, s, r, o) {
    const i = T(t, "x", "batchNorm"), a = T(e, "mean", "batchNorm"), l = T(n, "variance", "batchNorm");
    let c;
    r != null && (c = T(r, "scale", "batchNorm"));
    let u;
    return s != null && (u = T(s, "offset", "batchNorm")), C(i.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`), C(a.rank === 3 || a.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`), C(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`), c != null && C(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`), u != null && C(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${u.rank}.`), il(i, a, l, u, c, o);
  }
  const Nb = O({
    batchNorm3d_: jL
  });
  function qL(t, e, n, s, r, o) {
    const i = T(t, "x", "batchNorm"), a = T(e, "mean", "batchNorm"), l = T(n, "variance", "batchNorm");
    let c;
    r != null && (c = T(r, "scale", "batchNorm"));
    let u;
    return s != null && (u = T(s, "offset", "batchNorm")), C(i.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`), C(a.rank === 4 || a.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`), C(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`), c != null && C(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`), u != null && C(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${u.rank}.`), il(i, a, l, u, c, o);
  }
  const kb = O({
    batchNorm4d_: qL
  });
  function KL(t, e, n) {
    const s = T(t, "x", "bincount"), r = T(e, "weights", "bincount");
    C(s.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${s.dtype}`), C(n >= 0, () => `size must be non-negative, but got ${n}.`), C(r.size === s.size || r.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`);
    const o = {
      x: s,
      weights: r
    }, i = {
      size: n
    };
    return D.runKernel($p, o, i);
  }
  const Tb = O({
    bincount_: KL
  });
  function XL(t, e) {
    const n = T(t, "x", "bitwiseAnd"), s = T(e, "y", "bitwiseAnd");
    if (!Ue(n.shape, s.shape)) throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${s.shape}`);
    if (n.dtype !== "int32" || s.dtype !== "int32") throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${s.dtype}`);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(Gc, r);
  }
  const mI = O({
    bitwiseAnd_: XL
  });
  function YL(t, e) {
    const n = T(t, "s0", "broadcastArgs", "int32"), s = T(e, "s1", "broadcastArgs", "int32");
    if (n.rank !== 1) throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);
    if (s.rank !== 1) throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);
    const r = {
      s0: n,
      s1: s
    };
    return D.runKernel(Cp, r);
  }
  const gI = O({
    broadcastArgs_: YL
  });
  function ZL(t, e) {
    let n = T(t, "broadcastTo", "x");
    const s = n.shape;
    if (Kn(e), e.length < n.rank) throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);
    if (e.length > n.rank) {
      const c = n.shape.slice();
      for (; c.length < e.length; ) c.unshift(1);
      n = P(n, c);
    }
    const r = n.shape, o = Array.from(e);
    for (let c = e.length - 1; c >= 0; c--) if (r[c] === e[c]) o[c] = 1;
    else if (n.shape[c] !== 1) throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${e}].`);
    if (o.map((c, u) => c > 1 ? u : -1).filter((c) => c >= 0).length === 0) return er(n);
    const a = {
      x: n
    }, l = {
      reps: o
    };
    return D.runKernel(rl, a, l);
  }
  const Ko = O({
    broadcastTo_: ZL
  });
  function JL(t) {
    const n = {
      x: T(t, "x", "ceil", "float32")
    };
    return D.runKernel(xa, n);
  }
  const Eb = O({
    ceil_: JL
  });
  function wi(t, e, n) {
    Kn(t), n = n || yi(e);
    const s = {
      shape: t,
      value: e,
      dtype: n
    };
    return D.runKernel(Bp, {}, s);
  }
  function QL(t, e, n) {
    const s = T(t, "x", "clipByValue");
    if (C(e <= n, () => `Error in clip: min (${e}) must be less than or equal to max (${n}).`), e === n) return wi(s.shape, e, s.dtype);
    const r = {
      x: s
    }, o = {
      clipValueMin: e,
      clipValueMax: n
    };
    return D.runKernel(wa, r, o);
  }
  const Dn = O({
    clipByValue_: QL
  });
  function eP(t) {
    return vt(t, 0);
  }
  const Rb = O({
    concat1d_: eP
  });
  function tP(t, e) {
    return vt(t, e);
  }
  const Ab = O({
    concat2d_: tP
  });
  function nP(t, e) {
    return vt(t, e);
  }
  const _b = O({
    concat3d_: nP
  });
  function sP(t, e) {
    return vt(t, e);
  }
  const Db = O({
    concat4d_: sP
  });
  function rP(t, e, n, s, r = "NHWC", o = [
    1,
    1
  ], i) {
    const a = T(t, "x", "conv2d", "float32"), l = T(e, "filter", "conv2d", "float32");
    let c = a, u = false;
    a.rank === 3 && (u = true, c = P(a, [
      1,
      a.shape[0],
      a.shape[1],
      a.shape[2]
    ])), C(c.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${c.rank}.`), C(l.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`), xn("conv2d", s, i);
    const h = r === "NHWC" ? c.shape[3] : c.shape[1];
    C(h === l.shape[2], () => `Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`), C(sn(n, o), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`), C(si(o), () => "Error in conv2D: Dilated rates should be larger than 0."), C(si(n), () => "Error in conv2D: Strides should be larger than 0.");
    const d = {
      x: c,
      filter: l
    }, p = {
      strides: n,
      pad: s,
      dataFormat: r,
      dilations: o,
      dimRoundingMode: i
    }, f = D.runKernel(qc, d, p);
    return u ? P(f, [
      f.shape[1],
      f.shape[2],
      f.shape[3]
    ]) : f;
  }
  const kr = O({
    conv2d_: rP
  });
  function oP(t, e, n, s, r = "NWC", o = 1, i) {
    const a = T(t, "x", "conv1d"), l = T(e, "filter", "conv1d");
    let c = a, u = false;
    a.rank === 2 && (u = true, c = P(a, [
      1,
      a.shape[0],
      a.shape[1]
    ])), C(c.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${c.rank}.`), C(l.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`), xn("conv1d", s, i), C(c.shape[2] === l.shape[1], () => `Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`), C(sn(n, o), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${o}'`), C(si(o), () => "Error in conv1D: Dilated rates should be larger than 0."), C(si(n), () => "Error in conv1D: Stride should be larger than 0."), C(r === "NWC", () => `Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);
    const h = P(l, [
      1,
      l.shape[0],
      l.shape[1],
      l.shape[2]
    ]), d = P(c, [
      c.shape[0],
      1,
      c.shape[1],
      c.shape[2]
    ]), g = kr(d, h, [
      1,
      n
    ], s, "NHWC", [
      1,
      o
    ], i);
    return u ? P(g, [
      g.shape[2],
      g.shape[3]
    ]) : P(g, [
      g.shape[0],
      g.shape[2],
      g.shape[3]
    ]);
  }
  const Rf = O({
    conv1d_: oP
  });
  function iP(t, e, n, s, r, o = "NHWC", i) {
    C(t.length === e.rank, () => `Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);
    let a = t, l = e, c = false;
    e.rank === 3 && (c = true, l = P(e, [
      1,
      e.shape[0],
      e.shape[1],
      e.shape[2]
    ]), a = [
      1,
      t[0],
      t[1],
      t[2]
    ]), C(a.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`), C(l.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`), C(n.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`);
    const u = o === "NHWC" ? a[3] : a[1], h = o === "NHWC" ? l.shape[3] : l.shape[1];
    C(u === n.shape[2], () => `Error in conv2dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[2]}.`), C(h === n.shape[3], () => `Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`), xn("conv2dDerInput", r, i);
    const d = {
      dy: l,
      filter: n
    }, p = {
      strides: s,
      pad: r,
      dataFormat: o,
      dimRoundingMode: i,
      inputShape: a
    }, f = D.runKernel(Kc, d, p);
    return c ? P(f, [
      f.shape[1],
      f.shape[2],
      f.shape[3]
    ]) : f;
  }
  const Ob = O({
    conv2DBackpropInput_: iP
  });
  function aP(t, e, n, s, r, o) {
    const i = T(t, "x", "conv2dTranspose"), a = T(e, "filter", "conv2dTranspose");
    return Ob(n, i, a, s, r, "NHWC", o);
  }
  const Af = O({
    conv2dTranspose_: aP
  });
  function lP(t, e, n, s, r = "NDHWC", o = [
    1,
    1,
    1
  ]) {
    const i = T(t, "x", "conv3d"), a = T(e, "filter", "conv3d");
    let l = i, c = false;
    i.rank === 4 && (c = true, l = P(i, [
      1,
      i.shape[0],
      i.shape[1],
      i.shape[2],
      i.shape[3]
    ])), C(l.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`), C(a.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`), C(l.shape[4] === a.shape[3], () => `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`), C(sn(n, o), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`), C(r === "NDHWC", () => `Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`), C(si(o), () => "Error in conv3D: Dilated rates should be larger than 0."), C(si(n), () => "Error in conv3D: Strides should be larger than 0.");
    const u = {
      x: l,
      filter: a
    }, h = {
      strides: n,
      pad: s,
      dataFormat: r,
      dilations: o
    }, d = D.runKernel(Xc, u, h);
    return c ? P(d, [
      d.shape[1],
      d.shape[2],
      d.shape[3],
      d.shape[4]
    ]) : d;
  }
  const Fb = O({
    conv3d_: lP
  });
  function cP(t, e, n, s, r) {
    C(t.length === e.rank, () => `Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);
    let o = t, i = e, a = false;
    e.rank === 4 && (a = true, i = P(e, [
      1,
      e.shape[0],
      e.shape[1],
      e.shape[2],
      e.shape[3]
    ]), o = [
      1,
      t[0],
      t[1],
      t[2],
      t[3]
    ]);
    const l = o[4], c = i.shape[4];
    C(o.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`), C(i.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`), C(n.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`), C(l === n.shape[3], () => `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`), C(c === n.shape[4], () => `Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`);
    const u = {
      dy: i,
      filter: n
    }, h = {
      pad: r,
      strides: s,
      inputShape: o
    }, d = D.runKernel(Tp, u, h);
    return a ? P(d, [
      d.shape[1],
      d.shape[2],
      d.shape[3],
      d.shape[4]
    ]) : d;
  }
  const yI = O({
    conv3DBackpropInput_: cP
  });
  function uP(t, e, n, s, r) {
    const o = T(t, "x", "conv3dTranspose"), i = T(e, "filter", "conv3dTranspose");
    return yI(n, o, i, s, r);
  }
  const Lb = O({
    conv3dTranspose_: uP
  });
  function hP(t) {
    const n = {
      x: T(t, "x", "cos", "float32")
    };
    return D.runKernel(va, n);
  }
  const Gu = O({
    cos_: hP
  });
  function dP(t) {
    const n = {
      x: T(t, "x", "cosh", "float32")
    };
    return D.runKernel(Sa, n);
  }
  const _f = O({
    cosh_: dP
  });
  function pP(t, e = 0, n = false, s = false) {
    const o = {
      x: T(t, "x", "cumprod")
    }, i = {
      axis: e,
      exclusive: n,
      reverse: s
    };
    return D.runKernel(Ep, o, i);
  }
  const $c = O({
    cumprod_: pP
  });
  function fP(t, e = 0, n = false, s = false) {
    const o = {
      x: T(t, "x", "cumsum")
    }, i = {
      axis: e,
      exclusive: n,
      reverse: s
    };
    return D.runKernel(Yc, o, i);
  }
  const Df = O({
    cumsum_: fP
  });
  function mP(t, e, n, s = false) {
    const r = T(t, "x", "denseBincount"), o = T(e, "weights", "denseBincount");
    C(r.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${r.dtype}`), C(r.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`), C(n >= 0, () => `size must be non-negative, but got ${n}.`), C(o.size === r.size || o.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${o.shape}.`);
    const i = {
      x: r,
      weights: o
    }, a = {
      size: n,
      binaryOutput: s
    };
    return D.runKernel(Ap, i, a);
  }
  const Rd = O({
    denseBincount_: mP
  });
  function gP(t, e, n = "NHWC") {
    const s = T(t, "x", "depthToSpace", "float32"), r = n === "NHWC" ? s.shape[1] : s.shape[2], o = n === "NHWC" ? s.shape[2] : s.shape[3], i = n === "NHWC" ? s.shape[3] : s.shape[1];
    C(e > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${e}`), C(r * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${e}  for depthToSpace with input shape
    ${s.shape}`), C(o * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${o} and ${e} for depthToSpace with input shape
        ${s.shape}`), C(i % (e * e) === 0, () => `Dimension size must be evenly divisible by ${e * e} but is ${i} for depthToSpace with input shape ${s.shape}`);
    const a = {
      x: s
    }, l = {
      blockSize: e,
      dataFormat: n
    };
    return D.runKernel(_p, a, l);
  }
  const Pb = O({
    depthToSpace_: gP
  });
  function yP(t, e, n, s, r = "NHWC", o = [
    1,
    1
  ], i) {
    const a = T(t, "x", "depthwiseConv2d", "float32"), l = T(e, "filter", "depthwiseConv2d", "float32");
    let c = a, u = false;
    a.rank === 3 && (u = true, c = P(a, [
      1,
      a.shape[0],
      a.shape[1],
      a.shape[2]
    ])), C(c.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`), C(l.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);
    const h = r === "NHWC" ? c.shape[3] : c.shape[1];
    C(h === l.shape[2], () => `Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`), xn("depthwiseConv2d", s, i);
    const d = {
      x: c,
      filter: l
    }, p = {
      strides: n,
      pad: s,
      dataFormat: r,
      dilations: o,
      dimRoundingMode: i
    }, f = D.runKernel(Zc, d, p);
    return u ? P(f, [
      f.shape[1],
      f.shape[2],
      f.shape[3]
    ]) : f;
  }
  const al = O({
    depthwiseConv2d_: yP
  });
  function bP(t) {
    const n = {
      x: T(t, "x", "diag")
    };
    return D.runKernel(Fp, n);
  }
  const bI = O({
    diag_: bP
  });
  function xP(t, e, n, s, r = [
    1,
    1
  ], o = "NHWC") {
    const i = T(t, "x", "dilation2d"), a = T(e, "filter", "dilation2d");
    C(i.rank === 3 || i.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`), C(a.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`), C(o === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);
    let l = i, c = false;
    i.rank === 3 && (l = P(i, [
      1,
      i.shape[0],
      i.shape[1],
      i.shape[2]
    ]), c = true), C(l.shape[3] === a.shape[2], () => `Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${a.shape[2]}`);
    const u = {
      x: l,
      filter: a
    }, h = {
      strides: n,
      pad: s,
      dilations: r
    }, d = D.runKernel(Jc, u, h);
    return c ? P(d, [
      d.shape[1],
      d.shape[2],
      d.shape[3]
    ]) : d;
  }
  const zb = O({
    dilation2d_: xP
  });
  ri = function(t, e) {
    const n = t.length, s = [];
    for (let r = 0; r < n; r++) {
      const o = n - 1 - r, i = t[o] || 1;
      (e[e.length - 1 - r] || 1) > 1 && i === 1 && s.unshift(o);
    }
    return s;
  };
  function At(t, e) {
    const n = [];
    for (let s = 0; s < e.length; s++) {
      const r = t[t.length - s - 1], o = e.length - s - 1, i = e[o];
      (r == null || r === 1 && i > 1) && n.unshift(o);
    }
    return n;
  }
  Fe = function(t, e) {
    const n = Math.max(t.length, e.length), s = new Array(n);
    for (let r = 0; r < n; r++) {
      let o = t[t.length - r - 1];
      o == null && (o = 1);
      let i = e[e.length - r - 1];
      if (i == null && (i = 1), o === 1) s[n - r - 1] = i;
      else if (i === 1) s[n - r - 1] = o;
      else if (o !== i) {
        const a = `Operands could not be broadcast together with shapes ${t} and ${e}.`;
        throw Error(a);
      } else s[n - r - 1] = o;
    }
    return s;
  };
  const wP = Object.freeze(Object.defineProperty({
    __proto__: null,
    assertAndGetBroadcastShape: Fe,
    getBroadcastDims: ri,
    getReductionAxes: At
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  function vP(t, e) {
    let n = T(t, "a", "equal", "string_or_numeric"), s = T(e, "b", "equal", "string_or_numeric");
    [n, s] = yt(n, s), Fe(n.shape, s.shape);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(Qc, r);
  }
  const Gn = O({
    equal_: vP
  });
  function SP(t, e, n) {
    const s = T(e, "a", "where"), r = T(n, "b", "where"), o = T(t, "condition", "where", "bool"), i = Fe(Fe(o.shape, s.shape), r.shape), a = Ko(o, i), l = Ko(s, i), c = Ko(r, i), u = {
      condition: a,
      t: l,
      e: c
    };
    return D.runKernel(Eu, u);
  }
  const Wt = O({
    where_: SP
  });
  function $P(t) {
    const n = {
      x: T(t, "x", "zerosLike")
    };
    return D.runKernel(zu, n);
  }
  const qe = O({
    zerosLike_: $P
  });
  function CP(t, e) {
    let n = T(t, "a", "div"), s = T(e, "b", "div");
    [n, s] = yt(n, s);
    const r = Ne(n, s), o = qe(r), i = Gn(s, o);
    return Wt(i, o, r);
  }
  const Mb = O({
    divNoNan_: CP
  });
  function IP(t, e) {
    const n = T(t, "t1", "dot"), s = T(e, "t2", "dot");
    C((n.rank === 1 || n.rank === 2) && (s.rank === 1 || s.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`);
    const r = n.rank === 1 ? n.size : n.shape[1], o = s.rank === 1 ? s.size : s.shape[0];
    if (C(r === o, () => `Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`), n.rank === 1 && s.rank === 1) {
      const i = P(n, [
        1,
        -1
      ]), a = P(s, [
        -1,
        1
      ]), l = Be(i, a);
      return P(l, []);
    } else if (n.rank === 1 && s.rank === 2) {
      const i = P(n, [
        1,
        -1
      ]), a = P(s, [
        s.shape[0],
        s.shape[1]
      ]), l = Be(i, a);
      return P(l, [
        l.size
      ]);
    } else if (n.rank === 2 && s.rank === 1) {
      const i = P(s, [
        -1,
        1
      ]), a = Be(n, i);
      return P(a, [
        a.size
      ]);
    } else {
      const i = P(s, [
        s.shape[0],
        s.shape[1]
      ]);
      return Be(n, i);
    }
  }
  const Bb = O({
    dot_: IP
  });
  function NP(t, ...e) {
    const n = e.map((r, o) => T(r, `tensors${o}`, "einsum")), s = {
      equation: t
    };
    return D.runKernel(Pp, n, s);
  }
  const zo = O({
    einsum_: NP
  });
  function kP(t) {
    const n = {
      x: T(t, "x", "elu", "float32")
    };
    return D.runKernel(Ca, n);
  }
  const ll = O({
    elu_: kP
  });
  function TP(t, e) {
    const n = T(t, "x", "ensureShape", "string_or_numeric");
    if (!IC(n.shape, e)) throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${e}`);
    return t;
  }
  const xI = O({
    ensureShape_: TP
  });
  function EP(t) {
    let e = T(t, "x", "erf");
    C(e.dtype === "int32" || e.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), e.dtype === "int32" && (e = ge(e, "float32"));
    const n = {
      x: e
    };
    return D.runKernel(Ia, n);
  }
  const Of = O({
    erf_: EP
  });
  function Vb(t, e) {
    for (let n = 0; n < t.length; ++n) if (t[t.length - n - 1] !== e - 1 - n) return false;
    return true;
  }
  function wI(t, e, n) {
    const s = t.length + e.length, r = [];
    let o = 0, i = 0;
    for (let a = 0; a < s; a++) n.indexOf(a) === -1 ? r.push(t[o++]) : r.push(e[i++]);
    return r;
  }
  qt = function(t, e) {
    const n = [], s = t.length;
    for (let o = 0; o < s; o++) e.indexOf(o) === -1 && n.push(t[o]);
    const r = e.map((o) => t[o]);
    return [
      n,
      r
    ];
  };
  $t = function(t, e) {
    const n = e.map((s) => 1);
    return wI(t, n, e);
  };
  rn = function(t, e, n) {
    C(Vb(e, n), () => `${t} supports only inner-most axes for now. Got axes ${e} and rank-${n} input.`);
  };
  bt = function(t, e) {
    if (Vb(t, e)) return null;
    const n = [];
    for (let s = 0; s < e; ++s) t.indexOf(s) === -1 && n.push(s);
    return t.forEach((s) => n.push(s)), n;
  };
  So = function(t) {
    return t.map((e, n) => [
      n,
      e
    ]).sort((e, n) => e[1] - n[1]).map((e) => e[0]);
  };
  Ct = function(t, e) {
    const n = [];
    for (let s = e - t; s < e; ++s) n.push(s);
    return n;
  };
  function RP(t, e = null, n = false) {
    const r = {
      x: T(t, "x", "max")
    }, o = {
      reductionIndices: e,
      keepDims: n
    };
    return D.runKernel(hu, r, o);
  }
  const ss = O({
    max_: RP
  });
  function AP(t, e = null, n = false) {
    const r = {
      x: T(t, "x", "min")
    }, o = {
      axis: e,
      keepDims: n
    };
    return D.runKernel(mu, r, o);
  }
  const Qi = O({
    min_: AP
  });
  function _P(t, e) {
    let n = T(t, "base", "pow"), s = T(e, "exp", "pow");
    [n, s] = yt(n, s);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(Va, r);
  }
  const ar = O({
    pow_: _P
  });
  function Re(t, e) {
    if ((_t(t) && e !== "string" || Array.isArray(t)) && e !== "complex64") throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
    if (e === "string" && _t(t) && !(t instanceof Uint8Array)) throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
    return wo(t, [], [], e);
  }
  function DP(t) {
    const n = {
      x: T(t, "x", "sqrt", "float32")
    };
    return D.runKernel(Qa, n);
  }
  const Gt = O({
    sqrt_: DP
  });
  function OP(t) {
    const e = T(t, "x", "square"), n = {};
    return D.runKernel("Square", {
      x: e
    }, n);
  }
  const st = O({
    square_: OP
  });
  function FP(t, e = null, n = false) {
    let s = T(t, "x", "sum");
    s.dtype === "bool" && (s = ge(s, "int32"));
    const r = {
      x: s
    }, o = {
      axis: e,
      keepDims: n
    };
    return D.runKernel(Au, r, o);
  }
  const $e = O({
    sum_: FP
  });
  function LP(t, e = "euclidean", n = null, s = false) {
    t = T(t, "x", "norm");
    const r = vI(t, e, n);
    let o = r.shape;
    if (s) {
      const i = Ve(n, t.shape);
      o = $t(r.shape, i);
    }
    return P(r, o);
  }
  function vI(t, e, n = null) {
    if (t.rank === 0) return kt(t);
    if (t.rank !== 1 && n === null) return vI(P(t, [
      -1
    ]), e, n);
    if (t.rank === 1 || typeof n == "number" || Array.isArray(n) && n.length === 1) {
      if (e === 1) return $e(kt(t), n);
      if (e === 1 / 0) return ss(kt(t), n);
      if (e === -1 / 0) return Qi(kt(t), n);
      if (e === "euclidean" || e === 2) return Gt($e(ar(kt(t), Re(2, "int32")), n));
      throw new Error(`Error in norm: invalid ord value: ${e}`);
    }
    if (Array.isArray(n) && n.length === 2) {
      if (e === 1) return ss($e(kt(t), n[0]), n[1] - 1);
      if (e === 1 / 0) return ss($e(kt(t), n[1]), n[0]);
      if (e === -1 / 0) return Qi($e(kt(t), n[1]), n[0]);
      if (e === "fro" || e === "euclidean") return Gt($e(st(t), n));
      throw new Error(`Error in norm: invalid ord value: ${e}`);
    }
    throw new Error(`Error in norm: invalid axis: ${n}`);
  }
  const cl = O({
    norm_: LP
  });
  function PP(t, e = null, n = false) {
    return cl(t, "euclidean", e, n);
  }
  const Wb = O({
    euclideanNorm_: PP
  });
  function zP(t) {
    const n = {
      x: T(t, "x", "exp")
    };
    return D.runKernel(Na, n);
  }
  const On = O({
    exp_: zP
  });
  function MP(t, e = 0) {
    const n = T(t, "x", "expandDims", "string_or_numeric");
    C(e <= n.rank, () => "Axis must be <= rank of the tensor");
    const s = {
      input: n
    }, r = {
      dim: e
    };
    return D.runKernel(eu, s, r);
  }
  const Yt = O({
    expandDims_: MP
  });
  function BP(t) {
    const n = {
      x: T(t, "x", "expm1")
    };
    return D.runKernel(ka, n);
  }
  const Ub = O({
    expm1_: BP
  });
  function VP(t, e) {
    const n = T(t, "x", "tile", "string_or_numeric");
    C(n.rank === e.length, () => `Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`);
    const s = {
      x: n
    }, r = {
      reps: e
    };
    return D.runKernel(rl, s, r);
  }
  const Qn = O({
    tile_: VP
  });
  function WP(t, e, n, s = "float32") {
    e == null && (e = t);
    const r = Me([
      t,
      e
    ], s), o = t <= e ? t : e;
    for (let a = 0; a < o; ++a) r.set(1, a, a);
    const i = P(r.toTensor(), [
      t,
      e
    ]);
    if (n == null) return i;
    if (n.length === 1) return Qn(Yt(i, 0), [
      n[0],
      1,
      1
    ]);
    if (n.length === 2) return Qn(Yt(Yt(i, 0), 0), [
      n[0],
      n[1],
      1,
      1
    ]);
    if (n.length === 3) return Qn(Yt(Yt(Yt(i, 0), 0), 0), [
      n[0],
      n[1],
      n[2],
      1,
      1
    ]);
    throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`);
  }
  const Ff = O({
    eye_: WP
  });
  function UP(t) {
    const n = {
      x: T(t, "x", "floor", "float32")
    };
    return D.runKernel(Ta, n);
  }
  const ul = O({
    floor_: UP
  });
  function GP(t, e, n = 0, s = 0) {
    const r = T(t, "x", "gather"), o = T(e, "indices", "gather", "int32"), i = {
      x: r,
      indices: o
    }, a = {
      axis: n,
      batchDims: s
    };
    return D.runKernel(nu, i, a);
  }
  const hl = O({
    gather_: GP
  });
  function HP(t, e) {
    let n = T(t, "a", "greater", "string_or_numeric"), s = T(e, "b", "greater", "string_or_numeric");
    [n, s] = yt(n, s), Fe(n.shape, s.shape);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(su, r);
  }
  const wn = O({
    greater_: HP
  });
  function jP(t, e) {
    let n = T(t, "a", "greaterEqual", "string_or_numeric"), s = T(e, "b", "greaterEqual", "string_or_numeric");
    [n, s] = yt(n, s), Fe(n.shape, s.shape);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(Ra, r);
  }
  const Fr = O({
    greaterEqual_: jP
  });
  function qP(t) {
    const n = {
      input: T(t, "input", "imag")
    };
    return D.runKernel(Gp, n);
  }
  const Hu = O({
    imag_: qP
  });
  function KP(t) {
    const n = {
      x: T(t, "x", "isFinite")
    };
    return D.runKernel(_a, n);
  }
  const Gb = O({
    isFinite_: KP
  });
  function XP(t) {
    const n = {
      x: T(t, "x", "isInf")
    };
    return D.runKernel(Da, n);
  }
  const Hb = O({
    isInf_: XP
  });
  function YP(t) {
    const n = {
      x: T(t, "x", "isNaN")
    };
    return D.runKernel(Oa, n);
  }
  const jb = O({
    isNaN_: YP
  });
  function ZP(t, e = 0.2) {
    const s = {
      x: T(t, "x", "leakyRelu")
    }, r = {
      alpha: e
    };
    return D.runKernel(ru, s, r);
  }
  const ju = O({
    leakyRelu_: ZP
  });
  function JP(t, e) {
    let n = T(t, "a", "less", "string_or_numeric"), s = T(e, "b", "less", "string_or_numeric");
    [n, s] = yt(n, s), Fe(n.shape, s.shape);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(ou, r);
  }
  const ea = O({
    less_: JP
  });
  function QP(t, e) {
    let n = T(t, "a", "lessEqual", "string_or_numeric"), s = T(e, "b", "lessEqual", "string_or_numeric");
    [n, s] = yt(n, s), Fe(n.shape, s.shape);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(iu, r);
  }
  const $o = O({
    lessEqual_: QP
  });
  function SI(t, e, n) {
    if (n <= 0) throw new Error("The number of values should be positive.");
    const s = {
      start: t,
      stop: e,
      num: n
    };
    return D.runKernel(Hp, {}, s);
  }
  function e3(t, e = 5, n = 1, s = 1, r = 0.5) {
    const o = T(t, "x", "localResponseNormalization");
    C(o.rank === 4 || o.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${o.rank}.`), C(Jo(e), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);
    let i = o, a = false;
    o.rank === 3 && (a = true, i = P(o, [
      1,
      o.shape[0],
      o.shape[1],
      o.shape[2]
    ]));
    const l = {
      x: i
    }, c = {
      depthRadius: e,
      bias: n,
      alpha: s,
      beta: r
    }, u = D.runKernel(uu, l, c);
    return a ? P(u, [
      u.shape[1],
      u.shape[2],
      u.shape[3]
    ]) : u;
  }
  const qb = O({
    localResponseNormalization_: e3
  });
  function t3(t) {
    const n = {
      x: T(t, "x", "log", "float32")
    };
    return D.runKernel(Fa, n);
  }
  const Hn = O({
    log_: t3
  });
  function n3(t) {
    const n = {
      x: T(t, "x", "log1p")
    };
    return D.runKernel(La, n);
  }
  const qu = O({
    log1p_: n3
  });
  function s3(t) {
    return C(oo(t), () => "The f passed in grad(f) must be a function"), (e, n) => {
      const s = T(e, "x", "tf.grad", "string_or_numeric"), r = n != null ? T(n, "dy", "tf.grad") : null;
      return D.tidy(() => {
        const { value: o, grads: i } = D.gradients(() => t(s), [
          s
        ], r);
        return r != null && nn(o.shape, r.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), Lf(i), i[0];
      });
    };
  }
  function r3(t) {
    return C(oo(t), () => "The f passed in grads(f) must be a function"), (e, n) => {
      C(Array.isArray(e), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
      const s = xc(e, "args", "tf.grads", "string_or_numeric"), r = n != null ? T(n, "dy", "tf.grads") : null;
      return D.tidy(() => {
        const { value: o, grads: i } = D.gradients(() => t(...s), s, r);
        return r != null && nn(o.shape, r.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Lf(i), i;
      });
    };
  }
  function o3(t) {
    return C(oo(t), () => "The f passed in valueAndGrad(f) must be a function"), (e, n) => {
      C(e instanceof Xe, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), C(n == null || n instanceof Xe, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
      const { grads: s, value: r } = D.gradients(() => t(e), [
        e
      ], n);
      return Lf(s), {
        grad: s[0],
        value: r
      };
    };
  }
  function i3(t) {
    return C(oo(t), () => "The f passed in valueAndGrads(f) must be a function"), (e, n) => {
      C(Array.isArray(e) && e.every((r) => r instanceof Xe), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), C(n == null || n instanceof Xe, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
      const s = D.gradients(() => t(...e), e, n);
      return n != null && nn(s.value.shape, n.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Lf(s.grads), s;
    };
  }
  function $I(t, e) {
    C(oo(t), () => "The f passed in variableGrads(f) must be a function"), C(e == null || Array.isArray(e) && e.every((c) => c instanceof bc), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
    const n = e != null;
    if (!n) {
      e = [];
      for (const c in D.registeredVariables) e.push(D.registeredVariables[c]);
    }
    const s = n ? e.filter((c) => !c.trainable) : null, r = e.length;
    e = e.filter((c) => c.trainable), C(e.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);
    const o = true, { value: i, grads: a } = D.gradients(t, e, null, o);
    C(a.some((c) => c != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), C(i.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);
    const l = {};
    return e.forEach((c, u) => {
      a[u] != null && (l[c.name] = a[u]);
    }), s == null ? void 0 : s.forEach((c) => l[c.name] = null), {
      value: i,
      grads: l
    };
  }
  function lr(t) {
    return D.customGrad(t);
  }
  function Lf(t) {
    if (t.filter((n) => n == null).length > 0) throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
  }
  function a3(t) {
    const n = {
      x: T(t, "x", "neg")
    };
    return D.runKernel(yu, n);
  }
  const lt = O({
    neg_: a3
  });
  function l3(t) {
    const n = {
      x: T(t, "x", "softplus")
    };
    return D.runKernel(Ja, n);
  }
  const vi = O({
    softplus_: l3
  });
  function c3(t) {
    const e = T(t, "x", "logSigmoid");
    return lr((s) => ({
      value: lt(vi(lt(s))),
      gradFunc: (i) => L(i, Ts(lt(s)))
    }))(e);
  }
  const Kb = O({
    logSigmoid_: c3
  });
  function u3(t, e) {
    let n = T(t, "a", "sub"), s = T(e, "b", "sub");
    [n, s] = yt(n, s);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(tl, r);
  }
  const ve = O({
    sub_: u3
  });
  function h3(t, e = -1) {
    const n = T(t, "logits", "logSoftmax");
    if (e === -1 && (e = n.rank - 1), e !== n.rank - 1) throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);
    return lr((r, o) => {
      const a = ss(r, e, true), l = ve(r, a), c = ve(ge(l, "float32"), Hn($e(On(l), e, true)));
      return o([
        c
      ]), {
        value: c,
        gradFunc: (h, d) => {
          const [p] = d, f = true, m = On(p);
          return ve(h, L($e(h, e, f), m));
        }
      };
    })(n);
  }
  const Pf = O({
    logSoftmax_: h3
  });
  function d3(t, e = null, n = false) {
    const s = T(t, "x", "logSumExp"), r = Ve(e, s.shape), o = ss(s, r, true), i = ve(s, o), a = On(i), l = $e(a, r), c = Hn(l), u = ae(P(o, c.shape), c);
    if (n) {
      const h = $t(u.shape, r);
      return P(u, h);
    }
    return u;
  }
  const Ku = O({
    logSumExp_: d3
  });
  function p3(t, e) {
    const n = T(t, "a", "logicalAnd", "bool"), s = T(e, "b", "logicalAnd", "bool");
    Fe(n.shape, s.shape);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(au, r);
  }
  const ys = O({
    logicalAnd_: p3
  });
  function f3(t) {
    const n = {
      x: T(t, "x", "logicalNot", "bool")
    };
    return D.runKernel(lu, n);
  }
  const Xu = O({
    logicalNot_: f3
  });
  function m3(t, e) {
    const n = T(t, "a", "logicalOr", "bool"), s = T(e, "b", "logicalOr", "bool");
    Fe(n.shape, s.shape);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(cu, r);
  }
  const zf = O({
    logicalOr_: m3
  });
  function g3(t, e) {
    const n = T(t, "a", "logicalXor", "bool"), s = T(e, "b", "logicalXor", "bool");
    return Fe(n.shape, s.shape), ys(zf(t, e), Xu(ys(t, e)));
  }
  const Xb = O({
    logicalXor_: g3
  });
  const Rh = 2147483648;
  function y3(t, e, n = "left") {
    const s = T(t, "sortedSequence", "searchSorted"), r = T(e, "values", "searchSorted"), o = s.shape[s.shape.length - 1], i = r.shape[r.shape.length - 1], a = P(s, [
      -1,
      o
    ]), l = P(r, [
      -1,
      i
    ]);
    if (a.rank < 2) throw new Error("Sorted input argument must be at least 2-dimensional");
    if (a.shape[0] !== l.shape[0]) throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");
    if (X(l.shape) >= Rh) throw new Error(`values tensor size must less than ${Rh}`);
    if (a.shape[1] >= Rh) throw new Error(`trailing dim_size must less than ${Rh} for int32 output type, was ${a.shape[1]}`);
    const c = {
      sortedSequence: a,
      values: l
    }, u = {
      side: n
    };
    return D.runKernel(uf, c, u);
  }
  const Mf = O({
    searchSorted_: y3
  });
  function CI(t, e) {
    return Mf(t, e, "left");
  }
  function b3(t, e, n, s, r) {
    const o = T(t, "x", "maxPool"), i = 1;
    let a = o, l = false;
    o.rank === 3 && (l = true, a = P(o, [
      1,
      o.shape[0],
      o.shape[1],
      o.shape[2]
    ])), C(a.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${a.rank}.`), C(sn(n, i), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`), xn("maxPool", s, r);
    const c = {
      x: a
    }, u = {
      filterSize: e,
      strides: n,
      pad: s,
      dimRoundingMode: r
    }, h = D.runKernel(du, c, u);
    return l ? P(h, [
      h.shape[1],
      h.shape[2],
      h.shape[3]
    ]) : h;
  }
  const Yu = O({
    maxPool_: b3
  });
  function x3(t, e = [
    1,
    1,
    1
  ], n, s, r, o = "NDHWC") {
    const i = T(t, "x", "maxPool3d");
    let a = i, l = false;
    i.rank === 4 && (l = true, a = P(i, [
      1,
      i.shape[0],
      i.shape[1],
      i.shape[2],
      i.shape[3]
    ])), C(a.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`), C(o === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`), xn("maxPool3d", s, r);
    const c = {
      x: a
    }, u = {
      filterSize: e,
      strides: n,
      pad: s,
      dimRoundingMode: r,
      dataFormat: o
    }, h = D.runKernel(pu, c, u);
    return l ? P(h, [
      h.shape[1],
      h.shape[2],
      h.shape[3],
      h.shape[4]
    ]) : h;
  }
  const Yb = O({
    maxPool3d_: x3
  });
  function w3(t, e, n, s, r = false) {
    const i = {
      x: T(t, "x", "maxPoolWithArgmax")
    }, a = {
      filterSize: e,
      strides: n,
      pad: s,
      includeBatchInIndex: r
    }, l = D.runKernel(Xp, i, a);
    return {
      result: l[0],
      indexes: l[1]
    };
  }
  const II = O({
    maxPoolWithArgmax_: w3
  });
  function v3(t, e) {
    let n = T(t, "a", "maximum"), s = T(e, "b", "maximum");
    [n, s] = yt(n, s), n.dtype === "bool" && (n = ge(n, "int32"), s = ge(s, "int32")), Fe(n.shape, s.shape);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(Pa, r);
  }
  const ur = O({
    maximum_: v3
  });
  function S3(t, e = null, n = false) {
    const r = {
      x: T(t, "x", "mean")
    }, o = {
      axis: e,
      keepDims: n
    };
    return D.runKernel(fu, r, o);
  }
  const mt = O({
    mean_: S3
  });
  Tt = function(t, e = "float32") {
    if (Kn(t), e === "complex64") {
      const s = Tt(t, "float32"), r = Tt(t, "float32");
      return Nr(s, r);
    }
    const n = tn(X(t), e);
    return D.makeTensor(n, t, e);
  };
  function En(t, e = "float32") {
    if (Kn(t), e === "complex64") {
      const s = En(t, "float32"), r = Tt(t, "float32");
      return Nr(s, r);
    }
    const n = bp(X(t), e);
    return D.makeTensor(n, t, e);
  }
  function NI(t, e, { indexing: n = "xy" } = {}) {
    if (n !== "xy" && n !== "ij") throw new TypeError(`${n} is not a valid third argument to meshgrid`);
    if (t === void 0) return [];
    let s = T(t, "x", "meshgrid", t instanceof Xe ? t.dtype : "float32");
    if (e === void 0) return [
      s
    ];
    let r = T(e, "y", "meshgrid", e instanceof Xe ? e.dtype : "float32");
    const o = X(s.shape), i = X(r.shape);
    return n === "xy" ? (s = P(s, [
      1,
      -1
    ]), r = P(r, [
      -1,
      1
    ]), [
      Be(En([
        i,
        1
      ], s.dtype), s),
      Be(r, En([
        1,
        o
      ], r.dtype))
    ]) : (s = P(s, [
      -1,
      1
    ]), r = P(r, [
      1,
      -1
    ]), [
      Be(s, En([
        1,
        i
      ], s.dtype)),
      Be(En([
        o,
        1
      ], r.dtype), r)
    ]);
  }
  function $3(t, e) {
    let n = T(t, "a", "minimum"), s = T(e, "b", "minimum");
    [n, s] = yt(n, s), n.dtype === "bool" && (n = ge(n, "int32"), s = ge(s, "int32")), Fe(n.shape, s.shape);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(za, r);
  }
  const co = O({
    minimum_: $3
  });
  function C3(t, e, n) {
    C(n === "reflect" || n === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);
    const s = T(t, "x", "mirrorPad");
    if (s.rank === 0) throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
    C(e.length === s.rank, () => `Padding doesn't match input. Must be ${s.rank}. Got ${e.length}.`);
    const r = n === "reflect" ? 1 : 0;
    for (let a = 0; a < s.rank; a++) C(e[a].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), C(e[a][0] >= 0 && e[a][0] <= s.shape[a] - r && e[a][1] >= 0 && e[a][1] <= s.shape[a] - r, () => `Padding in dimension ${a} cannot be greater than or equal to ${s.shape[a] - r} or less than 0 for input of shape ${s.shape}`);
    const o = {
      paddings: e,
      mode: n
    }, i = {
      x: s
    };
    return D.runKernel(gu, i, o);
  }
  const Zb = O({
    mirrorPad_: C3
  });
  function I3(t, e) {
    let n = T(t, "a", "mod"), s = T(e, "b", "mod");
    [n, s] = yt(n, s);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(Ma, r);
  }
  const Jb = O({
    mod_: I3
  });
  function N3(t, e = null, n = false) {
    t = T(t, "x", "moments");
    const s = Ve(e, t.shape), r = mt(t, s, n);
    let o = r.shape;
    n || (o = $t(r.shape, s));
    const i = st(ve(ge(t, "float32"), P(r, o))), a = mt(i, s, n);
    return {
      mean: r,
      variance: a
    };
  }
  const Zu = O({
    moments_: N3
  });
  function k3(t, e, n, s) {
    const r = T(e, "data", "multiRNNCell"), o = xc(n, "c", "multiRNNCell"), i = xc(s, "h", "multiRNNCell");
    let a = r;
    const l = [];
    for (let h = 0; h < t.length; h++) {
      const d = t[h](a, o[h], i[h]);
      l.push(d[0]), l.push(d[1]), a = d[1];
    }
    const c = [], u = [];
    for (let h = 0; h < l.length; h += 2) c.push(l[h]), u.push(l[h + 1]);
    return [
      c,
      u
    ];
  }
  const kI = O({
    multiRNNCell_: k3
  });
  function T3(t, e, n, s = false) {
    const r = T(t, "logits", "multinomial"), o = r.size, i = r.rank;
    if (o < 2) throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${o}.`);
    if (i > 2) throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);
    n = n || Math.random();
    const l = {
      logits: i === 1 ? P(r, [
        1,
        -1
      ]) : r
    }, c = {
      numSamples: e,
      seed: n,
      normalized: s
    }, u = D.runKernel(Yp, l, c);
    return i === 1 ? P(u, [
      u.size
    ]) : u;
  }
  const TI = O({
    multinomial_: T3
  });
  function E3(t, e) {
    let n = T(t, "a", "notEqual", "string_or_numeric"), s = T(e, "b", "notEqual", "string_or_numeric");
    [n, s] = yt(n, s), Fe(n.shape, s.shape);
    const r = {
      a: n,
      b: s
    };
    return D.runKernel(bu, r);
  }
  const oi = O({
    notEqual_: E3
  });
  function R3(t, e, n = 1, s = 0, r = "int32") {
    if (e < 2) throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);
    const i = {
      indices: T(t, "indices", "oneHot", "int32")
    }, a = {
      dtype: r,
      depth: e,
      onValue: n,
      offValue: s
    };
    return D.runKernel(wu, i, a);
  }
  const ta = O({
    oneHot_: R3
  });
  function A3(t) {
    const n = {
      x: T(t, "x", "onesLike")
    };
    return D.runKernel(xu, n);
  }
  const jn = O({
    onesLike_: A3
  });
  function _3(t, e) {
    const n = T(t, "v1", "outerProduct"), s = T(e, "v2", "outerProduct");
    C(n.rank === 1 && s.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`);
    const r = P(n, [
      -1,
      1
    ]), o = P(s, [
      1,
      -1
    ]);
    return Be(r, o);
  }
  const EI = O({
    outerProduct_: _3
  });
  function D3(t, e, n = 0) {
    const s = T(t, "x", "pad");
    if (s.rank === 0) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
    const r = {
      paddings: e,
      constantValue: n
    }, o = {
      x: s
    };
    return D.runKernel(Su, o, r);
  }
  const Lr = O({
    pad_: D3
  });
  function O3(t, e, n = 0) {
    return C(e.length === 2, () => "Invalid number of paddings. Must be length of 2."), Lr(t, [
      e
    ], n);
  }
  const RI = O({
    pad1d_: O3
  });
  function F3(t, e, n = 0) {
    return C(e.length === 2 && e[0].length === 2 && e[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Lr(t, e, n);
  }
  const AI = O({
    pad2d_: F3
  });
  function L3(t, e, n = 0) {
    return C(e.length === 3 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Lr(t, e, n);
  }
  const _I = O({
    pad3d_: L3
  });
  function P3(t, e, n = 0) {
    return C(e.length === 4 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2 && e[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Lr(t, e, n);
  }
  const DI = O({
    pad4d_: P3
  });
  function z3(t, e, n) {
    const s = T(t, "x", "spaceToBatchND");
    C(s.rank >= 1 + e.length, () => `input rank ${s.rank} should be > than [blockShape] ${e.length}`), C(n.length === e.length, () => `paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`), C(s.shape.reduce((i, a, l) => l > 0 && l <= e.length ? i && (a + n[l - 1][0] + n[l - 1][1]) % e[l - 1] === 0 : i, true), () => `input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`);
    const r = {
      x: s
    }, o = {
      blockShape: e,
      paddings: n
    };
    return D.runKernel(_u, r, o);
  }
  const Ju = O({
    spaceToBatchND_: z3
  });
  function M3(t, e, n, s, r, o, i) {
    r == null && (r = [
      1,
      1
    ]), o == null && (o = 1), s === 0 && (s = "valid");
    const a = T(t, "x", "maxPool");
    let l = a, c = false;
    a.rank === 3 && (c = true, l = P(a, [
      1,
      a.shape[0],
      a.shape[1],
      a.shape[2]
    ])), C(sn(o, r), () => `Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`);
    const u = bs(l.shape, e, o, r, s), h = [
      u.dilationHeight,
      u.dilationWidth
    ];
    let d;
    s === "same" ? d = V3([
      u.filterHeight,
      u.filterWidth
    ], h) : d = [
      [
        0,
        0
      ],
      [
        0,
        0
      ]
    ];
    const p = h[0] === 1 && h[1] === 1, [f, m] = B3([
      u.inHeight,
      u.inWidth
    ], h, d), g = p ? s : "valid", y = p ? l : Ju(l, h, f), w = (n === "avg" ? () => Wu(y, e, o, g, i) : () => Yu(y, e, o, g, i))(), x = p ? w : Uu(w, h, m);
    return c ? P(x, [
      x.shape[1],
      x.shape[2],
      x.shape[3]
    ]) : x;
  }
  function B3(t, e, n) {
    const s = n.map((u) => u[0]), r = n.map((u) => u[1]), o = t.concat(s, r), i = e.map((u, h) => (u - o[h] % u) % u), a = r.map((u, h) => u + i[h]), l = e.map((u, h) => [
      s[h],
      a[h]
    ]), c = e.map((u, h) => [
      0,
      i[h]
    ]);
    return [
      l,
      c
    ];
  }
  function V3(t, e) {
    const s = t.map((i, a) => i + (i - 1) * (e[a] - 1)).map((i) => i - 1), r = s.map((i) => Math.floor(i / 2)), o = s.map((i, a) => i - r[a]);
    return s.map((i, a) => [
      r[a],
      o[a]
    ]);
  }
  const Qb = O({
    pool_: M3
  });
  function W3(t, e) {
    const n = T(t, "x", "prelu"), s = T(e, "alpha", "prelu"), r = {
      x: n,
      alpha: s
    };
    return D.runKernel($u, r);
  }
  const Qu = O({
    prelu_: W3
  });
  function U3(t, e = null, n = false) {
    let s = T(t, "x", "prod");
    s.dtype === "bool" && (s = ge(s, "int32"));
    const r = {
      x: s
    }, o = {
      axis: e,
      keepDims: n
    };
    return D.runKernel(Cu, r, o);
  }
  const ex = O({
    prod_: U3
  });
  function G3(t, e, n, s) {
    const r = t.map((u, h) => T(u, `tensors${h}`, "raggedGather", "int32")), o = T(e, "paramsDenseValues", "raggedGather"), i = T(n, "indices", "raggedGather", "int32"), a = {
      paramsNestedSplits: r,
      paramsDenseValues: o,
      indices: i
    }, l = {
      outputRaggedRank: s
    }, c = D.runKernel(ef, a, l);
    return {
      outputNestedSplits: c.slice(0, c.length - 1),
      outputDenseValues: c[c.length - 1]
    };
  }
  const OI = O({
    raggedGather_: G3
  });
  function H3(t, e, n) {
    const s = T(t, "starts", "raggedRange"), r = T(e, "limits", "raggedRange", s.dtype), o = T(n, "deltas", "raggedRange", s.dtype), i = {
      starts: s,
      limits: r,
      deltas: o
    }, a = D.runKernel(tf, i);
    return {
      rtNestedSplits: a[0],
      rtDenseValues: a[1]
    };
  }
  const FI = O({
    raggedRange_: H3
  });
  function j3(t, e, n, s, r) {
    const o = T(t, "shape", "raggedTensorToTensor", "int32"), i = T(e, "values", "raggedTensorToTensor"), a = T(n, "defaultValue", "raggedTensorToTensor", i.dtype), l = s.map((h, d) => T(h, `tensors${d}`, "raggedTensorToTensor", "int32")), c = {
      shape: o,
      values: i,
      defaultValue: a,
      rowPartitionTensors: l
    }, u = {
      rowPartitionTypes: r
    };
    return D.runKernel(nf, c, u);
  }
  const LI = O({
    raggedTensorToTensor_: j3
  });
  function q3(t, e, n) {
    Kn(t);
    const s = X(t);
    let r = null;
    if (n == null || n === "float32") r = new Float32Array(s);
    else if (n === "int32") r = new Int32Array(s);
    else if (n === "bool") r = new Uint8Array(s);
    else throw new Error(`Unknown data type ${n}`);
    for (let o = 0; o < s; o++) r[o] = e();
    return D.makeTensor(r, t, n);
  }
  const PI = O({
    rand_: q3
  });
  var Zh = {
    exports: {}
  }, K3 = Zh.exports, mv;
  function X3() {
    return mv || (mv = 1, function(t) {
      (function(e, n, s) {
        function r(l) {
          var c = this, u = a();
          c.next = function() {
            var h = 2091639 * c.s0 + c.c * 23283064365386963e-26;
            return c.s0 = c.s1, c.s1 = c.s2, c.s2 = h - (c.c = h | 0);
          }, c.c = 1, c.s0 = u(" "), c.s1 = u(" "), c.s2 = u(" "), c.s0 -= u(l), c.s0 < 0 && (c.s0 += 1), c.s1 -= u(l), c.s1 < 0 && (c.s1 += 1), c.s2 -= u(l), c.s2 < 0 && (c.s2 += 1), u = null;
        }
        function o(l, c) {
          return c.c = l.c, c.s0 = l.s0, c.s1 = l.s1, c.s2 = l.s2, c;
        }
        function i(l, c) {
          var u = new r(l), h = c && c.state, d = u.next;
          return d.int32 = function() {
            return u.next() * 4294967296 | 0;
          }, d.double = function() {
            return d() + (d() * 2097152 | 0) * 11102230246251565e-32;
          }, d.quick = d, h && (typeof h == "object" && o(h, u), d.state = function() {
            return o(u, {});
          }), d;
        }
        function a() {
          var l = 4022871197, c = function(u) {
            u = String(u);
            for (var h = 0; h < u.length; h++) {
              l += u.charCodeAt(h);
              var d = 0.02519603282416938 * l;
              l = d >>> 0, d -= l, d *= l, l = d >>> 0, d -= l, l += d * 4294967296;
            }
            return (l >>> 0) * 23283064365386963e-26;
          };
          return c;
        }
        n && n.exports ? n.exports = i : this.alea = i;
      })(K3, t);
    }(Zh)), Zh.exports;
  }
  var Jh = {
    exports: {}
  }, Y3 = Jh.exports, gv;
  function Z3() {
    return gv || (gv = 1, function(t) {
      (function(e, n, s) {
        function r(a) {
          var l = this, c = "";
          l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.next = function() {
            var h = l.x ^ l.x << 11;
            return l.x = l.y, l.y = l.z, l.z = l.w, l.w ^= l.w >>> 19 ^ h ^ h >>> 8;
          }, a === (a | 0) ? l.x = a : c += a;
          for (var u = 0; u < c.length + 64; u++) l.x ^= c.charCodeAt(u) | 0, l.next();
        }
        function o(a, l) {
          return l.x = a.x, l.y = a.y, l.z = a.z, l.w = a.w, l;
        }
        function i(a, l) {
          var c = new r(a), u = l && l.state, h = function() {
            return (c.next() >>> 0) / 4294967296;
          };
          return h.double = function() {
            do
              var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
            while (f === 0);
            return f;
          }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
            return o(c, {});
          }), h;
        }
        n && n.exports ? n.exports = i : this.xor128 = i;
      })(Y3, t);
    }(Jh)), Jh.exports;
  }
  var Qh = {
    exports: {}
  }, J3 = Qh.exports, yv;
  function Q3() {
    return yv || (yv = 1, function(t) {
      (function(e, n, s) {
        function r(a) {
          var l = this, c = "";
          l.next = function() {
            var h = l.x ^ l.x >>> 2;
            return l.x = l.y, l.y = l.z, l.z = l.w, l.w = l.v, (l.d = l.d + 362437 | 0) + (l.v = l.v ^ l.v << 4 ^ (h ^ h << 1)) | 0;
          }, l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.v = 0, a === (a | 0) ? l.x = a : c += a;
          for (var u = 0; u < c.length + 64; u++) l.x ^= c.charCodeAt(u) | 0, u == c.length && (l.d = l.x << 10 ^ l.x >>> 4), l.next();
        }
        function o(a, l) {
          return l.x = a.x, l.y = a.y, l.z = a.z, l.w = a.w, l.v = a.v, l.d = a.d, l;
        }
        function i(a, l) {
          var c = new r(a), u = l && l.state, h = function() {
            return (c.next() >>> 0) / 4294967296;
          };
          return h.double = function() {
            do
              var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
            while (f === 0);
            return f;
          }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
            return o(c, {});
          }), h;
        }
        n && n.exports ? n.exports = i : this.xorwow = i;
      })(J3, t);
    }(Qh)), Qh.exports;
  }
  var ed = {
    exports: {}
  }, ez = ed.exports, bv;
  function tz() {
    return bv || (bv = 1, function(t) {
      (function(e, n, s) {
        function r(a) {
          var l = this;
          l.next = function() {
            var u = l.x, h = l.i, d, p;
            return d = u[h], d ^= d >>> 7, p = d ^ d << 24, d = u[h + 1 & 7], p ^= d ^ d >>> 10, d = u[h + 3 & 7], p ^= d ^ d >>> 3, d = u[h + 4 & 7], p ^= d ^ d << 7, d = u[h + 7 & 7], d = d ^ d << 13, p ^= d ^ d << 9, u[h] = p, l.i = h + 1 & 7, p;
          };
          function c(u, h) {
            var d, p = [];
            if (h === (h | 0)) p[0] = h;
            else for (h = "" + h, d = 0; d < h.length; ++d) p[d & 7] = p[d & 7] << 15 ^ h.charCodeAt(d) + p[d + 1 & 7] << 13;
            for (; p.length < 8; ) p.push(0);
            for (d = 0; d < 8 && p[d] === 0; ++d) ;
            for (d == 8 ? p[7] = -1 : p[d], u.x = p, u.i = 0, d = 256; d > 0; --d) u.next();
          }
          c(l, a);
        }
        function o(a, l) {
          return l.x = a.x.slice(), l.i = a.i, l;
        }
        function i(a, l) {
          a == null && (a = +/* @__PURE__ */ new Date());
          var c = new r(a), u = l && l.state, h = function() {
            return (c.next() >>> 0) / 4294967296;
          };
          return h.double = function() {
            do
              var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
            while (f === 0);
            return f;
          }, h.int32 = c.next, h.quick = h, u && (u.x && o(u, c), h.state = function() {
            return o(c, {});
          }), h;
        }
        n && n.exports ? n.exports = i : this.xorshift7 = i;
      })(ez, t);
    }(ed)), ed.exports;
  }
  var td = {
    exports: {}
  }, nz = td.exports, xv;
  function sz() {
    return xv || (xv = 1, function(t) {
      (function(e, n, s) {
        function r(a) {
          var l = this;
          l.next = function() {
            var u = l.w, h = l.X, d = l.i, p, f;
            return l.w = u = u + 1640531527 | 0, f = h[d + 34 & 127], p = h[d = d + 1 & 127], f ^= f << 13, p ^= p << 17, f ^= f >>> 15, p ^= p >>> 12, f = h[d] = f ^ p, l.i = d, f + (u ^ u >>> 16) | 0;
          };
          function c(u, h) {
            var d, p, f, m, g, y = [], b = 128;
            for (h === (h | 0) ? (p = h, h = null) : (h = h + "\0", p = 0, b = Math.max(b, h.length)), f = 0, m = -32; m < b; ++m) h && (p ^= h.charCodeAt((m + 32) % h.length)), m === 0 && (g = p), p ^= p << 10, p ^= p >>> 15, p ^= p << 4, p ^= p >>> 13, m >= 0 && (g = g + 1640531527 | 0, d = y[m & 127] ^= p + g, f = d == 0 ? f + 1 : 0);
            for (f >= 128 && (y[(h && h.length || 0) & 127] = -1), f = 127, m = 4 * 128; m > 0; --m) p = y[f + 34 & 127], d = y[f = f + 1 & 127], p ^= p << 13, d ^= d << 17, p ^= p >>> 15, d ^= d >>> 12, y[f] = p ^ d;
            u.w = g, u.X = y, u.i = f;
          }
          c(l, a);
        }
        function o(a, l) {
          return l.i = a.i, l.w = a.w, l.X = a.X.slice(), l;
        }
        function i(a, l) {
          a == null && (a = +/* @__PURE__ */ new Date());
          var c = new r(a), u = l && l.state, h = function() {
            return (c.next() >>> 0) / 4294967296;
          };
          return h.double = function() {
            do
              var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
            while (f === 0);
            return f;
          }, h.int32 = c.next, h.quick = h, u && (u.X && o(u, c), h.state = function() {
            return o(c, {});
          }), h;
        }
        n && n.exports ? n.exports = i : this.xor4096 = i;
      })(nz, t);
    }(td)), td.exports;
  }
  var nd = {
    exports: {}
  }, rz = nd.exports, wv;
  function oz() {
    return wv || (wv = 1, function(t) {
      (function(e, n, s) {
        function r(a) {
          var l = this, c = "";
          l.next = function() {
            var h = l.b, d = l.c, p = l.d, f = l.a;
            return h = h << 25 ^ h >>> 7 ^ d, d = d - p | 0, p = p << 24 ^ p >>> 8 ^ f, f = f - h | 0, l.b = h = h << 20 ^ h >>> 12 ^ d, l.c = d = d - p | 0, l.d = p << 16 ^ d >>> 16 ^ f, l.a = f - h | 0;
          }, l.a = 0, l.b = 0, l.c = -1640531527, l.d = 1367130551, a === Math.floor(a) ? (l.a = a / 4294967296 | 0, l.b = a | 0) : c += a;
          for (var u = 0; u < c.length + 20; u++) l.b ^= c.charCodeAt(u) | 0, l.next();
        }
        function o(a, l) {
          return l.a = a.a, l.b = a.b, l.c = a.c, l.d = a.d, l;
        }
        function i(a, l) {
          var c = new r(a), u = l && l.state, h = function() {
            return (c.next() >>> 0) / 4294967296;
          };
          return h.double = function() {
            do
              var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
            while (f === 0);
            return f;
          }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
            return o(c, {});
          }), h;
        }
        n && n.exports ? n.exports = i : this.tychei = i;
      })(rz, t);
    }(nd)), nd.exports;
  }
  var sd = {
    exports: {}
  };
  let iz, az;
  iz = {};
  az = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: iz
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  lz = XO(az);
  var cz = sd.exports, vv;
  function uz() {
    return vv || (vv = 1, function(t) {
      (function(e, n, s) {
        var r = 256, o = 6, i = 52, a = "random", l = s.pow(r, o), c = s.pow(2, i), u = c * 2, h = r - 1, d;
        function p(x, S, I) {
          var E = [];
          S = S == true ? {
            entropy: true
          } : S || {};
          var R = y(g(S.entropy ? [
            x,
            w(n)
          ] : x ?? b(), 3), E), N = new f(E), k = function() {
            for (var $ = N.g(o), F = l, M = 0; $ < c; ) $ = ($ + M) * r, F *= r, M = N.g(1);
            for (; $ >= u; ) $ /= 2, F /= 2, M >>>= 1;
            return ($ + M) / F;
          };
          return k.int32 = function() {
            return N.g(4) | 0;
          }, k.quick = function() {
            return N.g(4) / 4294967296;
          }, k.double = k, y(w(N.S), n), (S.pass || I || function($, F, M, U) {
            return U && (U.S && m(U, N), $.state = function() {
              return m(N, {});
            }), M ? (s[a] = $, F) : $;
          })(k, R, "global" in S ? S.global : this == s, S.state);
        }
        function f(x) {
          var S, I = x.length, E = this, R = 0, N = E.i = E.j = 0, k = E.S = [];
          for (I || (x = [
            I++
          ]); R < r; ) k[R] = R++;
          for (R = 0; R < r; R++) k[R] = k[N = h & N + x[R % I] + (S = k[R])], k[N] = S;
          (E.g = function($) {
            for (var F, M = 0, U = E.i, W = E.j, V = E.S; $--; ) F = V[U = h & U + 1], M = M * r + V[h & (V[U] = V[W = h & W + F]) + (V[W] = F)];
            return E.i = U, E.j = W, M;
          })(r);
        }
        function m(x, S) {
          return S.i = x.i, S.j = x.j, S.S = x.S.slice(), S;
        }
        function g(x, S) {
          var I = [], E = typeof x, R;
          if (S && E == "object") for (R in x) try {
            I.push(g(x[R], S - 1));
          } catch {
          }
          return I.length ? I : E == "string" ? x : x + "\0";
        }
        function y(x, S) {
          for (var I = x + "", E, R = 0; R < I.length; ) S[h & R] = h & (E ^= S[h & R] * 19) + I.charCodeAt(R++);
          return w(S);
        }
        function b() {
          try {
            var x;
            return d && (x = d.randomBytes) ? x = x(r) : (x = new Uint8Array(r), (e.crypto || e.msCrypto).getRandomValues(x)), w(x);
          } catch {
            var S = e.navigator, I = S && S.plugins;
            return [
              +/* @__PURE__ */ new Date(),
              e,
              I,
              e.screen,
              w(n)
            ];
          }
        }
        function w(x) {
          return String.fromCharCode.apply(0, x);
        }
        if (y(s.random(), n), t.exports) {
          t.exports = p;
          try {
            d = lz;
          } catch {
          }
        } else s["seed" + a] = p;
      })(typeof self < "u" ? self : cz, [], Math);
    }(sd)), sd.exports;
  }
  var ig, Sv;
  function hz() {
    if (Sv) return ig;
    Sv = 1;
    var t = X3(), e = Z3(), n = Q3(), s = tz(), r = sz(), o = oz(), i = uz();
    return i.alea = t, i.xor128 = e, i.xorwow = n, i.xorshift7 = s, i.xor4096 = r, i.tychei = o, ig = i, ig;
  }
  var dl = hz();
  const dz = 1e-3, zI = 0.1;
  function pz(t, e, n) {
    return n == null && (n = tx()), Yg(t, e, (s, r) => nx(s, r, n));
  }
  function tx() {
    return D.backend.floatPrecision() === 32 ? dz : zI;
  }
  function Yg(t, e, n) {
    let s = true;
    if ((_t(t) || _t(e)) && (s = false), _t(t) && _t(e) && (s = true), s) {
      const i = t.constructor.name, a = e.constructor.name;
      if (i !== a) throw new Error(`Arrays are of different type. Actual: ${i}. Expected: ${a}`);
    }
    if (Array.isArray(t) && Array.isArray(e)) {
      const i = ir(t), a = ir(e);
      if (!Ue(i, a)) throw new Error(`Arrays have different shapes. Actual: [${i}]. Expected: [${a}]`);
    }
    const r = _t(t) ? t : or(t), o = _t(e) ? e : or(e);
    if (r.length !== o.length) throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${o.length}.
Actual:   ${r}.
Expected: ${o}.`);
    for (let i = 0; i < o.length; ++i) {
      const a = r[i], l = o[i];
      if (!n(a, l)) throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${l}.
Actual:   ${r}.
Expected: ${o}.`);
    }
    typeof expect < "u" && expect().nothing();
  }
  function fz(t, e) {
    t().then(() => e.fail(), () => e()), typeof expect < "u" && expect().nothing();
  }
  function mz(t, e) {
    const n = typeof e == "string" || typeof e == "number" || typeof e == "boolean" ? [
      e
    ] : e;
    return Xs(t) || Xs(t[0]) || Xs(e) || Xs(e[0]) ? Yg(t, n, (s, r) => s == r) : Yg(t, e, (s, r) => nx(s, r, 0));
  }
  function gz(t, e, n) {
    if (n == null && (n = tx()), !nx(t, e, n)) throw new Error(`Numbers differ: actual === ${t}, expected === ${e}`);
    typeof expect < "u" && expect().nothing();
  }
  function nx(t, e, n) {
    return !isFinite(t) && !isFinite(e) ? true : !(isNaN(t) || isNaN(e) || Math.abs(t - e) > n);
  }
  function yz(t, e, n) {
    for (let s = 0; s < t.length; s++) if (t[s] < e || t[s] > n) throw new Error(`Value out of range:${t[s]} low: ${e}, high: ${n}`);
  }
  function bz(t, e) {
    const n = new Float32Array(t), s = new Float32Array(e);
    if (n.length !== s.length) throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${n.length}`);
    for (let r = 0; r < s.length; r++) if (n[r] !== s[r]) throw new Error(`Expected ArrayBuffer value at ${r} to be ${s[r]} but got ${n[r]} instead`);
  }
  function MI(t) {
    for (let e = 0; e < t.length; e++) {
      const n = t[e];
      Array.isArray(n) ? MI(n) : t[e] = Qs(n);
    }
    return t;
  }
  function xz(t) {
    const e = document.createElement("video");
    return "playsInline" in e && (e.playsInline = true), e.muted = true, e.loop = true, e.style.position = "fixed", e.style.left = "0px", e.style.top = "0px", e.preload = "auto", e.appendChild(t), new Promise((n) => {
      e.addEventListener("loadeddata", (s) => n(e)), e.load();
    });
  }
  async function wz(t) {
    await t.play(), "requestVideoFrameCallback" in t && await new Promise((e) => {
      t.requestVideoFrameCallback(e);
    });
  }
  const vz = Object.freeze(Object.defineProperty({
    __proto__: null,
    TEST_EPSILON_FLOAT16: zI,
    createVideoElement: xz,
    encodeStrings: MI,
    expectArrayBuffersEqual: bz,
    expectArraysClose: pz,
    expectArraysEqual: mz,
    expectNumbersClose: gz,
    expectPromiseToFail: fz,
    expectValuesInRange: yz,
    play: wz,
    testEpsilon: tx
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  class sx {
    constructor(e, n, s, r, o) {
      this.mean = e, this.stdDev = n, this.dtype = s, this.nextVal = NaN, this.truncated = r, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
      const i = o || Math.random();
      this.random = dl.alea(i.toString());
    }
    nextValue() {
      if (!isNaN(this.nextVal)) {
        const r = this.nextVal;
        return this.nextVal = NaN, r;
      }
      let e, n, s = false;
      for (; !s; ) {
        let r, o, i;
        do
          r = 2 * this.random() - 1, o = 2 * this.random() - 1, i = r * r + o * o;
        while (i >= 1 || i === 0);
        const a = Math.sqrt(-2 * Math.log(i) / i);
        e = this.mean + this.stdDev * r * a, n = this.mean + this.stdDev * o * a, (!this.truncated || this.isValidTruncated(e)) && (s = true);
      }
      return (!this.truncated || this.isValidTruncated(n)) && (this.nextVal = this.convertValue(n)), this.convertValue(e);
    }
    convertValue(e) {
      return this.dtype == null || this.dtype === "float32" ? e : Math.round(e);
    }
    isValidTruncated(e) {
      return e <= this.upper && e >= this.lower;
    }
  }
  class Sz {
    constructor(e, n, s, r) {
      this.alpha = e, this.beta = 1 / n, this.dtype = s;
      const o = r || Math.random();
      this.randu = dl.alea(o.toString()), this.randn = new sx(0, 1, s, false, this.randu()), e < 1 ? this.d = e + 2 / 3 : this.d = e - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
    }
    nextValue() {
      let e, n, s, r, o, i;
      for (; ; ) {
        do
          r = this.randn.nextValue(), i = 1 + this.c * r;
        while (i <= 0);
        if (i *= i * i, e = r * r, n = 1 - 0.331 * e * e, s = 0.5 * e + this.d * (1 - i + Math.log(i)), o = this.randu(), o < n || Math.log(o) < s) break;
      }
      return i = 1 / this.beta * this.d * i, this.alpha < 1 && (i *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(i);
    }
    convertValue(e) {
      return this.dtype === "float32" ? e : Math.round(e);
    }
  }
  class $z {
    constructor(e = 0, n = 1, s, r) {
      if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = e, this.range = n - e, this.dtype = s, r == null && (r = Math.random()), typeof r == "number" && (r = r.toString()), !this.canReturnFloat() && this.range <= 1) throw new Error(`The difference between ${e} - ${n} <= 1 and dtype is not float`);
      this.random = dl.alea(r);
    }
    convertValue(e) {
      return this.canReturnFloat() ? e : Math.round(e);
    }
    nextValue() {
      return this.convertValue(this.min + this.range * this.random());
    }
  }
  function Cz(t, e, n = 1, s = "float32", r) {
    if (Kn(t), n == null && (n = 1), s == null && (s = "float32"), s !== "float32" && s !== "int32") throw new Error(`Unsupported data type ${s}`);
    const o = new Sz(e, n, s, r), i = Me(t, s);
    for (let a = 0; a < i.values.length; a++) i.values[a] = o.nextValue();
    return i.toTensor();
  }
  const BI = O({
    randomGamma_: Cz
  });
  function Iz(t, e = 0, n = 1, s, r) {
    if (Kn(t), s != null && s === "bool") throw new Error(`Unsupported data type ${s}`);
    const o = new sx(e, n, s, false, r), i = Me(t, s);
    for (let a = 0; a < i.values.length; a++) i.values[a] = o.nextValue();
    return i.toTensor();
  }
  const Bf = O({
    randomNormal_: Iz
  });
  function Nz(t, e, n) {
    if (e != null && e === "bool") throw new Error(`Unsupported data type ${e}`);
    return Bf(t, 0, 1, e, n);
  }
  const VI = O({
    randomStandardNormal_: Nz
  });
  function kz(t, e = 0, n = 1, s = "float32", r) {
    Kn(t);
    const o = Me(t, s), i = new $z(e, n, null, r);
    for (let a = 0; a < o.values.length; a++) o.values[a] = i.nextValue();
    return o.toTensor();
  }
  const Co = O({
    randomUniform_: kz
  });
  function Tz(t, e, n, s) {
    return Co(t, e, n, "int32", s);
  }
  const WI = O({
    randomUniformInt_: Tz
  });
  function ii(t, e, n = 1, s = "float32") {
    if (n === 0) throw new Error("Cannot have a step of zero");
    const r = {
      start: t,
      stop: e,
      step: n,
      dtype: s
    };
    return D.runKernel(sf, {}, r);
  }
  function Ez(t) {
    const n = {
      input: T(t, "input", "real")
    };
    return D.runKernel(rf, n);
  }
  const na = O({
    real_: Ez
  });
  function Rz(t) {
    const n = {
      x: T(t, "x", "reciprocal")
    };
    return D.runKernel(Wa, n);
  }
  const rx = O({
    reciprocal_: Rz
  });
  function Az(t) {
    const n = {
      x: T(t, "x", "relu")
    };
    return D.runKernel(Ua, n);
  }
  const zs = O({
    relu_: Az
  });
  function _z(t) {
    const n = {
      x: T(t, "x", "relu6")
    };
    return D.runKernel(Ga, n);
  }
  const Vf = O({
    relu6_: _z
  });
  function Dz(t, e) {
    const s = {
      x: T(t, "x", "reverse")
    }, r = {
      dims: e
    };
    return D.runKernel(Tu, s, r);
  }
  const rs = O({
    reverse_: Dz
  });
  function Oz(t) {
    const e = T(t, "x", "reverse");
    return C(e.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`), rs(e, 0);
  }
  const UI = O({
    reverse1d_: Oz
  });
  function Fz(t, e) {
    const n = T(t, "x", "reverse");
    return C(n.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`), rs(n, e);
  }
  const GI = O({
    reverse2d_: Fz
  });
  function Lz(t, e) {
    const n = T(t, "x", "reverse");
    return C(n.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`), rs(n, e);
  }
  const HI = O({
    reverse3d_: Lz
  });
  function Pz(t, e) {
    const n = T(t, "x", "reverse");
    return C(n.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`), rs(n, e);
  }
  const jI = O({
    reverse4d_: Pz
  });
  function zz(t) {
    const n = {
      x: T(t, "x", "round")
    };
    return D.runKernel(Ha, n);
  }
  const Wf = O({
    round_: zz
  });
  function Mz(t) {
    const n = {
      x: T(t, "x", "rsqrt", "float32")
    };
    return D.runKernel(ja, n);
  }
  const Uf = O({
    rsqrt_: Mz
  });
  function Bz(t) {
    const n = {
      x: T(t, "x", "selu")
    };
    return D.runKernel(qa, n);
  }
  const Gf = O({
    selu_: Bz
  });
  function Vz(t, e, n, s, r, o = [
    1,
    1
  ], i = "NHWC") {
    const a = T(t, "x", "separableConv2d"), l = T(e, "depthwiseFilter", "separableConv2d"), c = T(n, "pointwiseFilter", "separableConv2d");
    let u = a, h = false;
    if (a.rank === 3 && (h = true, u = P(a, [
      1,
      a.shape[0],
      a.shape[1],
      a.shape[2]
    ])), i === "NCHW") throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
    C(u.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${u.rank}.`), C(l.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`), C(c.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`), C(c.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`), C(c.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`);
    const d = l.shape[2], p = l.shape[3];
    C(c.shape[2] === d * p, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${d * p}, but got ${c.shape[2]}.`);
    const f = al(u, l, s, r, i, o), g = kr(f, c, 1, "valid", i);
    return h ? P(g, [
      g.shape[1],
      g.shape[2],
      g.shape[3]
    ]) : g;
  }
  const Hf = O({
    separableConv2d_: Vz
  });
  async function Wz(t, e) {
    const n = T(t, "x", "setdiff1d"), s = T(e, "y", "setdiff1d");
    C(n.dtype === s.dtype, () => `x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`), C(n.rank === 1, () => `x should be 1D tensor, but got x (${n.shape}).`), C(s.rank === 1, () => `y should be 1D tensor, but got y (${s.shape}).`);
    const r = await n.data(), o = await s.data(), i = new Set(o);
    let a = 0;
    for (let u = 0; u < r.length; u++) i.has(r[u]) || a++;
    const l = new Rt([
      a
    ], n.dtype), c = new Rt([
      a
    ], "int32");
    for (let u = 0, h = 0; u < r.length; u++) i.has(r[u]) || (l.values[h] = r[u], c.values[h] = u, h++);
    return [
      l.toTensor(),
      c.toTensor()
    ];
  }
  const qI = Wz;
  function Uz(t) {
    const n = {
      x: T(t, "x", "sign")
    };
    return D.runKernel(Ya, n);
  }
  const ox = O({
    sign_: Uz
  });
  function Gz(t) {
    const n = {
      x: T(t, "x", "sin", "float32")
    };
    return D.runKernel(Ka, n);
  }
  const jf = O({
    sin_: Gz
  });
  function Hz(t) {
    const n = {
      x: T(t, "x", "sinh")
    };
    return D.runKernel(Xa, n);
  }
  const qf = O({
    sinh_: Hz
  });
  function jz(t, e, n) {
    const s = T(t, "x", "slice1d");
    return C(s.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`), je(s, [
      e
    ], [
      n
    ]);
  }
  const eh = O({
    slice1d_: jz
  });
  function qz(t, e, n) {
    const s = T(t, "x", "slice2d");
    return C(s.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`), je(s, e, n);
  }
  const Kf = O({
    slice2d_: qz
  });
  function Kz(t, e, n) {
    const s = T(t, "x", "slice3d");
    return C(s.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`), je(s, e, n);
  }
  const th = O({
    slice3d_: Kz
  });
  function Xz(t, e, n) {
    const s = T(t, "x", "slice4d");
    return C(s.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`), je(s, e, n);
  }
  const sa = O({
    slice4d_: Xz
  });
  function Yz(t, e = -1) {
    const n = T(t, "logits", "softmax", "float32");
    if (e === -1 && (e = n.rank - 1), e !== n.rank - 1) throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);
    const s = {
      logits: n
    }, r = {
      dim: e
    };
    return D.runKernel(Ou, s, r);
  }
  const nh = O({
    softmax_: Yz
  });
  function Zz(t) {
    C(t.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`);
    const e = {
      input: t
    };
    return D.runKernel(Mp, e);
  }
  const sh = O({
    fft_: Zz
  });
  function Jz(t) {
    C(t.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`);
    const e = {
      input: t
    };
    return D.runKernel(Up, e);
  }
  const ra = O({
    ifft_: Jz
  });
  function Qz(t) {
    const e = t.shape[t.shape.length - 1], n = t.size / e;
    let s;
    if (e <= 2) {
      const r = P(t, [
        n,
        e
      ]);
      s = ra(r);
    } else {
      const r = [
        n,
        2 * (e - 1)
      ], o = P(na(t), [
        n,
        e
      ]), i = P(Hu(t), [
        n,
        e
      ]), a = rs(je(o, [
        0,
        1
      ], [
        n,
        e - 2
      ]), 1), l = L(rs(je(i, [
        0,
        1
      ], [
        n,
        e - 2
      ]), 1), Re(-1)), c = vt([
        o,
        a
      ], 1), u = vt([
        i,
        l
      ], 1), h = P(Nr(c, u), [
        r[0],
        r[1]
      ]);
      s = ra(h);
    }
    if (s = na(s), t.rank === 3 && t.shape[0] !== 0) {
      const r = s, o = t.shape[0];
      s = P(s, [
        o,
        s.shape[0] / o,
        s.shape[1]
      ]), r.dispose();
    }
    return s;
  }
  const Xf = O({
    irfft_: Qz
  });
  function eM(t, e, n = 0) {
    const r = {
      x: T(t, "x", "split")
    }, o = {
      numOrSizeSplits: e,
      axis: n
    };
    return D.runKernel(Du, r, o);
  }
  const Rn = O({
    split_: eM
  });
  function tM(t, e) {
    C(t.dtype === "float32", () => `The dtype for rfft() must be real value but got ${t.dtype}`);
    let n = t.shape[t.shape.length - 1];
    const s = t.size / n;
    let r;
    if (e != null && e < n) {
      const f = t.shape.map((g) => 0), m = t.shape.map((g) => g);
      m[t.shape.length - 1] = e, r = je(t, f, m), n = e;
    } else if (e != null && e > n) {
      const f = t.shape.map((m) => m);
      f[t.shape.length - 1] = e - n, r = vt([
        t,
        Tt(f)
      ], t.shape.length - 1), n = e;
    } else r = t;
    const o = qe(r), i = P(Nr(r, o), [
      s,
      n
    ]), a = sh(i), l = Math.floor(n / 2) + 1, c = na(a), u = Hu(a), h = Rn(c, [
      l,
      n - l
    ], c.shape.length - 1), d = Rn(u, [
      l,
      n - l
    ], u.shape.length - 1), p = r.shape.slice();
    return p[r.shape.length - 1] = l, P(Nr(h[0], d[0]), p);
  }
  const rh = O({
    rfft_: tM
  });
  function nM(t, e) {
    let n = T(t, "a", "squaredDifference"), s = T(e, "b", "squaredDifference");
    [n, s] = yt(n, s), Fe(n.shape, s.shape);
    const r = {
      a: n,
      b: s
    }, o = {};
    return D.runKernel(el, r, o);
  }
  const Yf = O({
    squaredDifference_: nM
  });
  function sM(t, e) {
    const n = T(t, "x", "squeeze", "string_or_numeric");
    return P(n, Ar(n.shape, e).newShape);
  }
  const Io = O({
    squeeze_: sM
  });
  function rM(t, e = 0) {
    const n = xc(t, "tensors", "stack", "string_or_numeric");
    C(n.length >= 1, () => "Pass at least one tensor to tf.stack"), n.length > 0 && C(e <= n[0].rank, () => "Axis must be <= rank of the tensor");
    const s = n, r = {
      axis: e
    };
    return D.runKernel(vu, s, r);
  }
  const yn = O({
    stack_: rM
  });
  function oM(t, e = 0) {
    const s = {
      x: T(t, "x", "step")
    }, r = {
      alpha: e
    };
    return D.runKernel(ol, s, r);
  }
  const Si = O({
    step_: oM
  });
  function iM(t, e, n, s, r = 0, o = 0, i = 0, a = 0, l = 0) {
    const u = {
      x: T(t, "x", "stridedSlice", "string_or_numeric")
    }, h = {
      begin: e,
      end: n,
      strides: s,
      beginMask: r,
      endMask: o,
      ellipsisMask: i,
      newAxisMask: a,
      shrinkAxisMask: l
    };
    return D.runKernel(yf, u, h);
  }
  const ix = O({
    stridedSlice_: iM
  });
  function aM(t) {
    const n = {
      x: T(t, "x", "tan", "float32")
    };
    return D.runKernel(nl, n);
  }
  const ax = O({
    tan_: aM
  });
  function en(t, e) {
    gi(t);
    const n = ir(t, e);
    if (n.length !== 1) throw new Error("tensor1d() requires values to be a flat/TypedArray");
    return wo(t, null, n, e);
  }
  function eo(t, e, n) {
    if (gi(t), e != null && e.length !== 2) throw new Error("tensor2d() requires shape to have two numbers");
    const s = ir(t, n);
    if (s.length !== 2 && s.length !== 1) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
    if (s.length === 1 && e == null) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
    return wo(t, e, s, n);
  }
  function lx(t, e, n) {
    if (gi(t), e != null && e.length !== 3) throw new Error("tensor3d() requires shape to have three numbers");
    const s = ir(t, n);
    if (s.length !== 3 && s.length !== 1) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
    if (s.length === 1 && e == null) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
    return wo(t, e, s, n);
  }
  function KI(t, e, n) {
    if (gi(t), e != null && e.length !== 4) throw new Error("tensor4d() requires shape to have four numbers");
    const s = ir(t, n);
    if (s.length !== 4 && s.length !== 1) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
    if (s.length === 1 && e == null) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
    return wo(t, e, s, n);
  }
  function XI(t, e, n) {
    if (gi(t), e != null && e.length !== 5) throw new Error("tensor5d() requires shape to have five numbers");
    const s = ir(t, n);
    if (s.length !== 5 && s.length !== 1) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
    if (s.length === 1 && e == null) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
    return wo(t, e, s, n);
  }
  function YI(t, e, n) {
    if (gi(t), e != null && e.length !== 6) throw new Error("tensor6d() requires shape to have six numbers");
    const s = ir(t, n);
    if (s.length !== 6 && s.length !== 1) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
    if (s.length === 1 && e == null) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
    return e = e || s, wo(t, e, s, n);
  }
  function cx(t, e, n) {
    const s = e.rank > 1 ? e.shape[e.rank - 1] : 1, r = e.rank > 1 ? e.rank - 1 : 1, o = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${e.shape}, shape: ${t}, sliceDim: ${s}, and batchDim: ${r}.`;
    if (n.rank < r) throw new Error(o + ` update.rank < ${r}. `);
    if (t.length < s + (n.rank - r)) throw new Error(o + ` Output shape length < ${s + (n.rank - r)}`);
    if (n.rank !== r + t.length - s) throw new Error(o + ` update.rank != ${r + t.length - s}`);
    for (let i = 0; i < r; ++i) if (n.shape[i] !== e.shape[i]) throw new Error(o + ` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${e.shape[i]}).`);
    for (let i = 0; i < n.rank - r; ++i) if (n.shape[i + r] !== t[i + s]) throw new Error(o + ` updates.shape[${i + r}] (${n.shape[i + r]}) != shape[${i + r}] (${t[i + r]})`);
  }
  function Zf(t, e, n) {
    if (e.rank < 1) throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);
    if (t.rank < 1) throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);
    if (e.dtype !== "int32") throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);
    if (n.length < 1) throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);
    if (n.length === 0) {
      if (e.size === 0) throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);
      if (t.size === 0) throw new Error(`Updates specified for empty output. updates shape: ${t.shape}`);
    }
    cx(n, e, t);
  }
  No = function(t, e, n) {
    const s = e.shape.length, r = s > 1 ? e.shape[s - 1] : 1, o = n.length;
    let i = 1;
    for (let h = r; h < o; ++h) i *= n[h];
    const a = r < 1 ? 1 : r, l = X(e.shape) / a, c = [
      ...Ee(n.slice(0, r)),
      1
    ], u = X(n);
    return {
      sliceRank: r,
      numUpdates: l,
      sliceSize: i,
      strides: c,
      outputSize: u
    };
  };
  const lM = Object.freeze(Object.defineProperty({
    __proto__: null,
    calculateShapes: No,
    validateInput: Zf,
    validateUpdateShape: cx
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  function cM(t, e, n) {
    const s = T(t, "tensor", "tensorScatterupdate"), r = T(e, "indices", "tensorScatterupdate", "int32"), o = T(n, "updates", "tensorScatterupdate");
    if (Zf(o, r, s.shape), s.dtype !== o.dtype) throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${o.dtype}.`);
    const i = {
      tensor: s,
      indices: r,
      updates: o
    }, a = {};
    return D.runKernel(cf, i, a);
  }
  const ZI = O({
    tensorScatterUpdate_: cM
  });
  function uM(t, e = 1, n = true) {
    const s = T(t, "x", "topk");
    if (s.rank === 0) throw new Error("topk() expects the input to be of rank 1 or higher");
    const r = s.shape[s.shape.length - 1];
    if (e < 0) throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);
    if (e > r) throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${e}`);
    const o = {
      x: s
    }, i = {
      k: e,
      sorted: n
    }, [a, l] = D.runKernel(vf, o, i);
    return {
      values: a,
      indices: l
    };
  }
  const ux = O({
    topk_: uM
  });
  function hM(t, e = 0, n = 1, s, r) {
    if (Kn(t), s != null && s === "bool") throw new Error("Unsupported data type $ { dtype }");
    const o = new sx(e, n, s, true, r), i = Me(t, s);
    for (let a = 0; a < i.values.length; a++) i.values[a] = o.nextValue();
    return i.toTensor();
  }
  const Jf = O({
    truncatedNormal_: hM
  });
  function dM(t, e = 0) {
    const n = T(t, "x", "unique", "string_or_numeric");
    C(n.rank > 0, () => "The input tensor must be at least 1D");
    const s = {
      x: n
    }, r = {
      axis: e
    }, [o, i] = D.runKernel($f, s, r);
    return {
      values: o,
      indices: i
    };
  }
  const hx = O({
    unique_: dM
  });
  function pM(t, e, n) {
    const s = T(t, "x", "unsortedSegmentSum"), r = T(e, "segmentIds", "unsortedSegmentSum", "int32");
    C(Jo(n), () => "numSegments must be of dtype int");
    const o = {
      x: s,
      segmentIds: r
    }, i = {
      numSegments: n
    };
    return D.runKernel(Pu, o, i);
  }
  const Qf = O({
    unsortedSegmentSum_: pM
  });
  function fM(t, e = 0) {
    const n = T(t, "x", "unstack", "string_or_numeric");
    C(e >= -n.shape.length && e < n.shape.length, () => `Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`);
    const s = {
      value: n
    }, r = {
      axis: e
    };
    return D.runKernel(Lu, s, r);
  }
  const os = O({
    unstack_: fM
  });
  function JI(t, e) {
    return Mf(t, e, "right");
  }
  function dx(t, e = true, n, s) {
    return D.makeVariable(t, e, n, s);
  }
  function em(t, e) {
    const n = [];
    for (let o = 0; o < e.length; o++) e[o] && n.push(o);
    const s = Me(t, "int32"), r = Me([
      n.length,
      t.length
    ], "int32");
    for (let o = 0; o < n.length; o++) {
      const i = s.indexToLoc(n[o]), a = o * t.length;
      r.values.set(i, a);
    }
    return r.toTensor();
  }
  async function mM(t) {
    const e = T(t, "condition", "whereAsync", "bool"), n = await e.data(), s = em(e.shape, n);
    return t !== e && e.dispose(), s;
  }
  const px = mM;
  async function gM(t, e, n) {
    const s = T(t, "tensor", "boolMask"), r = T(e, "mask", "boolMask", "bool"), o = n ?? 0, i = r.rank, a = s.shape;
    C(i > 0, () => "mask cannot be scalar"), nn(a.slice(o, o + i), r.shape, "mask's shape must match the first K dimensions of tensor's shape,");
    let l = 1;
    for (let m = o; m < o + i; m++) l *= a[m];
    const c = a.slice(0, o).concat([
      l
    ], a.slice(o + i)), u = P(s, c), h = P(r, [
      -1
    ]), d = await px(h), p = Io(d, [
      1
    ]), f = hl(u, p, o);
    return t !== s && s.dispose(), e !== r && r.dispose(), p.dispose(), u.dispose(), h.dispose(), d.dispose(), f;
  }
  const QI = gM;
  function yM(t, e, n) {
    const s = T(t, "x", "transpose");
    if (e == null && (e = s.shape.map((i, a) => a).reverse()), C(s.rank === e.length, () => `Error in transpose: rank of input ${s.rank} must match length of perm ${e}.`), e.forEach((i) => {
      C(i >= 0 && i < s.rank, () => `All entries in 'perm' must be between 0 and ${s.rank - 1} but got ${e}`);
    }), s.rank <= 1) return s.clone();
    const r = {
      x: s
    }, o = {
      perm: e
    };
    return s.dtype === "complex64" ? q(() => {
      let i = na(s), a = Hu(s);
      return i = D.runKernel(qo, {
        x: i
      }, o), a = D.runKernel(qo, {
        x: a
      }, o), n && (a = lt(a)), Nr(i, a);
    }) : D.runKernel(qo, r, o);
  }
  const He = O({
    transpose_: yM
  });
  function bM(t, e, n, s, r = true) {
    const o = T(t, "v", "movingAverage"), i = T(e, "x", "movingAverage"), a = T(n, "decay", "movingAverage");
    qC(o, i), C(Ue(o.shape, i.shape), () => "Shape mismatch in v and x");
    const l = Re(1), c = ve(l, a);
    let u = L(ve(i, o), c);
    if (r) {
      C(s != null, () => "When using zeroDebias: true, step is required.");
      const h = T(s, "step", "movingAverage");
      u = Ne(u, ve(l, ar(a, h)));
    }
    return ae(o, u);
  }
  const eN = O({
    movingAverage_: bM
  });
  function xM(t, e, n) {
    Kn(n);
    const s = T(t, "indices", "scatterND", "int32"), r = T(e, "updates", "scatterND");
    Zf(r, s, n);
    const o = {
      indices: s,
      updates: r
    }, i = {
      shape: n
    };
    return D.runKernel(lf, o, i);
  }
  const tN = O({
    scatterND_: xM
  });
  function wM(t, e, n, s) {
    if (t.dtype !== "int32") throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);
    if (t.rank > 2) throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);
    const r = t.rank > 0 ? t.shape[0] : 1, o = t.rank > 1 ? t.shape[1] : 1;
    if (n.length !== o) throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${o}.`);
    const i = e.size;
    if (!(e.rank === 0 || e.rank === 1 && i === r)) throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${r}]`);
    if (e.dtype !== s.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype");
  }
  function vM(t, e, n, s = 0) {
    Kn(n);
    const r = T(t, "sparseIndices", "sparseToDense", "int32"), o = T(e, "sparseValues", "sparseToDense", "string_or_numeric"), i = T(s, "defaultValue", "sparseToDense", o.dtype);
    wM(r, o, n, i);
    const a = {
      sparseIndices: r,
      sparseValues: o,
      defaultValue: i
    }, l = {
      outputShape: n
    };
    return D.runKernel(mf, a, l);
  }
  const nN = O({
    sparseToDense_: vM
  });
  function SM(t, e) {
    const n = T(e, "indices", "gatherND", "int32"), r = {
      params: T(t, "x", "gatherND", "string_or_numeric"),
      indices: n
    };
    return D.runKernel(Wp, r);
  }
  const sN = O({
    gatherND_: SM
  });
  function $M(t, e) {
    if (e == null) return t.shape.slice();
    if (Ue(t.shape, e)) return e;
    if (t.shape.length === e.length) {
      const n = [];
      for (let s = 0; s < t.shape.length; s++) e[s] == null && t.shape[s] != null ? n.push(t.shape[s]) : n.push(e[s]);
      return n;
    }
    return e;
  }
  function CM(t, e, n, s) {
    const r = T(t, "x", "dropout");
    if (C(r.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`), C(e >= 0 && e < 1, () => `rate must be a float in the range [0, 1), but got ${e}.`), e === 0) return t instanceof Xe ? r.clone() : r;
    const o = $M(r, n), i = 1 - e, a = Ne(ul(ae(Co(o, 0, 1, "float32", s), i)), i);
    return L(r, a);
  }
  const fx = O({
    dropout_: CM
  });
  function mx(t) {
    return Math.floor(Math.pow(2, Math.ceil(Math.log(t) / Math.log(2))));
  }
  function tm(t, e, n) {
    const s = 1 - t % 2, r = new Float32Array(t);
    for (let o = 0; o < t; ++o) {
      const i = 2 * Math.PI * o / (t + s - 1);
      r[o] = e - n * Math.cos(i);
    }
    return en(r, "float32");
  }
  async function IM(t, e, n = 1) {
    const s = T(t, "predictions", "inTopK"), r = T(e, "targets", "inTopK");
    C(s.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`), C(s.rank - 1 === r.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`), nn(s.shape.slice(0, s.shape.length - 1), r.shape, "predictions's shape should be align with the targets' shape, except the last dimension.");
    const o = s.shape[s.shape.length - 1];
    C(n > 0 && n <= o, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${o}), but got ${n}`);
    const i = await s.data(), a = await r.data(), [l, c] = [
      i.length / o,
      o
    ], u = Ut("bool", l);
    for (let h = 0; h < l; h++) {
      const d = h * c, p = i.subarray(d, d + c), f = [];
      for (let m = 0; m < p.length; m++) f.push({
        value: p[m],
        index: m
      });
      f.sort((m, g) => g.value - m.value), u[h] = 0;
      for (let m = 0; m < n; m++) if (f[m].index === a[h]) {
        u[h] = 1;
        break;
      }
    }
    return t !== s && s.dispose(), e !== r && r.dispose(), Un(u, r.shape, "bool");
  }
  const rN = IM;
  function NM(t, e, n, s, r, o = "NHWC", i) {
    let a = t;
    t.rank === 3 && (a = P(t, [
      1,
      t.shape[0],
      t.shape[1],
      t.shape[2]
    ]));
    let l = e;
    l.rank === 3 && (l = P(e, [
      1,
      e.shape[0],
      e.shape[1],
      e.shape[2]
    ])), C(a.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`), C(l.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`), C(n.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`);
    const c = o === "NHWC" ? a.shape[3] : a.shape[1], u = o === "NHWC" ? l.shape[3] : l.shape[1];
    C(c === n[2], () => `Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`), C(u === n[3], () => `Error in conv2dDerFilter: depth of dy (${u}) must match output depth for filter (${n[3]}).`), xn("conv2dDerFilter", r, i);
    const h = {
      x: a,
      dy: l
    }, d = {
      strides: s,
      pad: r,
      dataFormat: o,
      dimRoundingMode: i,
      filterShape: n
    };
    return D.runKernel(Np, h, d);
  }
  const gx = O({
    conv2DBackpropFilter_: NM
  });
  function nm(t, e, n) {
    if (n == null || n === "linear") return t;
    if (n === "relu") return L(t, Si(e));
    throw new Error(`Cannot compute gradient for fused activation ${n}.`);
  }
  function sm(t, e) {
    let n = e;
    const s = At(t.shape, e.shape);
    return s.length > 0 && (n = $e(n, s)), P(n, t.shape);
  }
  function rm(t, e, n, s) {
    if (e === "linear") return t;
    if (e === "relu") return zs(t);
    if (e === "elu") return ll(t);
    if (e === "relu6") return Vf(t);
    if (e === "prelu") return Qu(t, n);
    if (e === "leakyrelu") return ju(t, s);
    if (e === "sigmoid") return Ts(t);
    throw new Error(`Unknown fused activation ${e}.`);
  }
  const om = (t, e) => !(t > 0) || e === "linear";
  function kM({ x: t, filter: e, strides: n, pad: s, dataFormat: r = "NHWC", dilations: o = [
    1,
    1
  ], dimRoundingMode: i, bias: a, activation: l = "linear", preluActivationWeights: c, leakyreluAlpha: u }) {
    if (l = l || "linear", om(D.state.gradientDepth, l) === false) {
      C(r === "NHWC", () => `Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
      let I = kr(t, e, n, s, r, o, i);
      return a != null && (I = ae(I, a)), rm(I, l, c, u);
    }
    const h = T(t, "x", "conv2d", "float32"), d = T(e, "filter", "conv2d", "float32");
    let p = h, f = false;
    h.rank === 3 && (f = true, p = P(h, [
      1,
      h.shape[0],
      h.shape[1],
      h.shape[2]
    ])), C(p.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`), C(d.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`), xn("fused conv2d", s, i);
    const m = r === "NHWC" ? p.shape[3] : p.shape[1];
    C(d.shape[2] === m, () => `Error in conv2d: depth of input (${m}) must match input depth for filter ${d.shape[2]}.`), C(sn(n, o), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`);
    const g = jt(p.shape, d.shape, n, o, s, i);
    let y;
    a != null && (y = T(a, "bias", "fused conv2d"), [y] = yt(y, h), r === "NHWC" ? Fe(g.outShape, y.shape) : (C(y.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`), C(y.shape.length === 0 || y.shape[0] === g.outChannels || y.shape[0] === 1, () => `Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)));
    let b;
    if (c != null) {
      const I = c.shape;
      if (C(I.length <= 1 || I.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${I.length}.`), I.length === 1) C(I[0] === 1 || I[0] === g.outChannels, () => `Error in fused conv2d: PReLU activation weights (${I}) is not compatible with the number of output channels (${g.outChannels}).`);
      else if (I.length === 3) try {
        Fe(I, g.outShape);
      } catch {
        const R = `Error in fused conv2d: PReLU activation weights (${I}) is not compatible with the output shape of the conv2d (${g.outShape}).`;
        throw Error(R);
      }
      b = T(c, "prelu weights", "fused conv2d");
    }
    const w = (I, E) => {
      C(r === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);
      const [R, N, k, $] = E, F = nm(I, k, l);
      C(ao(o), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);
      const M = Ob(N.shape, F, R, n, s), U = gx(N, F, R.shape, n, s), W = [
        M,
        U
      ];
      if ($ != null) {
        const V = sm($, F);
        W.push(V);
      }
      return W;
    }, x = {
      x: p,
      filter: d,
      bias: y,
      preluActivationWeights: b
    }, S = {
      strides: n,
      pad: s,
      dataFormat: r,
      dilations: o,
      dimRoundingMode: i,
      activation: l,
      leakyreluAlpha: u
    };
    return a == null ? lr((E, R, N) => {
      let k = D.runKernel(fc, x, S);
      return N([
        R,
        E,
        k
      ]), f && (k = P(k, [
        k.shape[1],
        k.shape[2],
        k.shape[3]
      ])), {
        value: k,
        gradFunc: w
      };
    })(p, d) : lr((E, R, N, k) => {
      let $ = D.runKernel(fc, x, S);
      return k([
        R,
        E,
        $,
        N
      ]), f && ($ = P($, [
        $.shape[1],
        $.shape[2],
        $.shape[3]
      ])), {
        value: $,
        gradFunc: w
      };
    })(p, d, y);
  }
  const oN = O({
    fusedConv2d_: kM
  });
  function TM(t, e, n, s, r, o = [
    1,
    1
  ], i) {
    let a = t;
    t.rank === 3 && (a = P(t, [
      1,
      t.shape[0],
      t.shape[1],
      t.shape[2]
    ]));
    let l = e;
    l.rank === 3 && (l = P(e, [
      1,
      e.shape[0],
      e.shape[1],
      e.shape[2]
    ]));
    const c = {
      x: a,
      dy: l
    }, u = {
      strides: s,
      pad: r,
      dimRoundingMode: i,
      dilations: o,
      filterShape: n
    };
    return D.runKernel(Dp, c, u);
  }
  const iN = O({
    depthwiseConv2dNativeBackpropFilter_: TM
  });
  function EM(t, e, n, s, r, o = [
    1,
    1
  ], i) {
    let a = e, l = false;
    e.rank === 3 && (l = true, a = P(e, [
      1,
      e.shape[0],
      e.shape[1],
      e.shape[2]
    ]));
    const c = {
      dy: a,
      filter: n
    }, u = {
      strides: s,
      pad: r,
      dimRoundingMode: i,
      dilations: o,
      inputShape: t
    }, h = D.runKernel(Op, c, u);
    return l ? P(h, [
      h.shape[1],
      h.shape[2],
      h.shape[3]
    ]) : h;
  }
  const aN = O({
    depthwiseConv2dNativeBackpropInput_: EM
  });
  function RM({ x: t, filter: e, strides: n, pad: s, dataFormat: r = "NHWC", dilations: o = [
    1,
    1
  ], dimRoundingMode: i, bias: a, activation: l = "linear", preluActivationWeights: c, leakyreluAlpha: u }) {
    if (om(D.state.gradientDepth, l) === false) {
      let S = al(t, e, n, s, r, o, i);
      return a != null && (S = ae(S, a)), rm(S, l, c, u);
    }
    const h = T(t, "x", "depthwiseConv2d", "float32"), d = T(e, "filter", "depthwiseConv2d", "float32");
    let p = h, f = false;
    h.rank === 3 && (f = true, p = P(h, [
      1,
      h.shape[0],
      h.shape[1],
      h.shape[2]
    ])), C(p.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`), C(d.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`), C(p.shape[3] === d.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`), o == null && (o = [
      1,
      1
    ]), C(sn(n, o), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`), xn("fused depthwiseConv2d", s, i);
    const m = jt(p.shape, d.shape, n, o, s, i, true);
    let g;
    a != null && (g = T(a, "bias", "fused conv2d"), [g] = yt(g, h), Fe(m.outShape, g.shape));
    let y;
    c != null && (y = T(c, "prelu weights", "fused depthwiseConv2d"));
    const b = (S, I) => {
      C(ao(o), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);
      const [E, R, N, k] = I, $ = nm(S, N, l), F = aN(R.shape, $, E, n, s, o, i), M = iN(R, $, E.shape, n, s, o, i);
      if (k != null) {
        const U = sm(g, $);
        return [
          F,
          M,
          U
        ];
      }
      return [
        F,
        M
      ];
    }, w = {
      x: p,
      filter: d,
      bias: g,
      preluActivationWeights: y
    }, x = {
      strides: n,
      pad: s,
      dataFormat: r,
      dilations: o,
      dimRoundingMode: i,
      activation: l,
      leakyreluAlpha: u
    };
    return a == null ? lr((I, E, R) => {
      let N = D.runKernel(mc, w, x);
      return R([
        E,
        I,
        N
      ]), f && (N = P(N, [
        N.shape[1],
        N.shape[2],
        N.shape[3]
      ])), {
        value: N,
        gradFunc: b
      };
    })(p, d) : lr((I, E, R, N) => {
      let k = D.runKernel(mc, w, x);
      return N([
        E,
        I,
        k,
        R
      ]), f && (k = P(k, [
        k.shape[1],
        k.shape[2],
        k.shape[3]
      ])), {
        value: k,
        gradFunc: b
      };
    })(p, d, g);
  }
  const AM = O({
    fusedDepthwiseConv2d_: RM
  });
  function _M({ a: t, b: e, transposeA: n = false, transposeB: s = false, bias: r, activation: o = "linear", preluActivationWeights: i, leakyreluAlpha: a = 0.2 }) {
    if (om(D.state.gradientDepth, o) === false) {
      let $ = Be(t, e, n, s);
      return r != null && ($ = ae($, r)), rm($, o, i, a);
    }
    let l = T(t, "a", "fused matMul"), c = T(e, "b", "fused matMul");
    [l, c] = yt(l, c);
    const u = n ? l.shape[l.rank - 2] : l.shape[l.rank - 1], h = s ? c.shape[c.rank - 1] : c.shape[c.rank - 2], d = n ? l.shape[l.rank - 1] : l.shape[l.rank - 2], p = s ? c.shape[c.rank - 2] : c.shape[c.rank - 1], f = l.shape.slice(0, -2), m = c.shape.slice(0, -2), g = X(f), y = X(m);
    C(u === h, () => `Error in fused matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${n} and transposeB=${s} must match.`);
    const w = Fe(l.shape.slice(0, -2), c.shape.slice(0, -2)).concat([
      d,
      p
    ]), x = n ? P(l, [
      g,
      u,
      d
    ]) : P(l, [
      g,
      d,
      u
    ]), S = s ? P(c, [
      y,
      p,
      h
    ]) : P(c, [
      y,
      h,
      p
    ]);
    let I;
    r != null && (I = T(r, "bias", "fused matMul"), [I] = yt(I, l), Fe(w, I.shape));
    let E;
    i != null && (E = T(i, "prelu weights", "fused matMul"));
    const R = ($, F) => {
      const [M, U, W, V] = F, H = nm(P($, W.shape), W, o);
      let G, Y;
      if (!n && !s ? (G = Be(H, U, false, true), Y = Be(M, H, true, false)) : !n && s ? (G = Be(H, U, false, false), Y = Be(H, M, true, false)) : n && !s ? (G = Be(U, H, false, true), Y = Be(M, H, false, false)) : (G = Be(U, H, true, true), Y = Be(H, M, true, true)), r != null) {
        const te = sm(V, H);
        return [
          G,
          Y,
          te
        ];
      } else return [
        G,
        Y
      ];
    }, N = {
      a: x,
      b: S,
      bias: I,
      preluActivationWeights: E
    }, k = {
      transposeA: n,
      transposeB: s,
      activation: o,
      leakyreluAlpha: a
    };
    return r == null ? lr((F, M, U) => {
      const W = D.runKernel(pc, N, k);
      return U([
        F,
        M,
        W
      ]), {
        value: P(W, w),
        gradFunc: R
      };
    })(x, S) : lr((F, M, U, W) => {
      const V = D.runKernel(pc, N, k);
      return W([
        F,
        M,
        V,
        U
      ]), {
        value: P(V, w),
        gradFunc: R
      };
    })(x, S, I);
  }
  const Zg = O({
    fusedMatMul_: _M
  });
  const lN = Object.freeze(Object.defineProperty({
    __proto__: null,
    conv2d: oN,
    depthwiseConv2d: AM,
    matMul: Zg
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  function DM(t) {
    return tm(t, 0.54, 0.46);
  }
  const OM = O({
    hammingWindow_: DM
  });
  function FM(t) {
    return tm(t, 0.5, 0.5);
  }
  const cN = O({
    hannWindow_: FM
  });
  function LM(t, e, n, s = false, r = 0) {
    let o = 0;
    const i = [];
    for (; o + e <= t.size; ) i.push(je(t, o, e)), o += n;
    if (s) for (; o < t.size; ) {
      const a = o + e - t.size, l = vt([
        je(t, o, e - a),
        wi([
          a
        ], r)
      ]);
      i.push(l), o += n;
    }
    return i.length === 0 ? eo([], [
      0,
      e
    ]) : P(vt(i), [
      i.length,
      e
    ]);
  }
  const uN = O({
    frame_: LM
  });
  function PM(t, e, n, s, r = cN) {
    s == null && (s = mx(e));
    const o = uN(t, e, n), i = L(o, r(e));
    return rh(i, s);
  }
  const zM = O({
    stft_: PM
  });
  function MM(t, e, n, s, r = "bilinear", o = 0) {
    const i = T(t, "image", "cropAndResize"), a = T(e, "boxes", "cropAndResize", "float32"), l = T(n, "boxInd", "cropAndResize", "int32"), c = a.shape[0];
    C(i.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`), C(a.rank === 2 && a.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${c},4] but had shape ${a.shape}.`), C(l.rank === 1 && l.shape[0] === c, () => `Error in cropAndResize: boxInd must be have size [${c}] but had shape ${a.shape}.`), C(s.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`), C(s[0] >= 1 && s[1] >= 1, () => `cropSize must be atleast [1,1], but was ${s}`), C(r === "bilinear" || r === "nearest", () => `method must be bilinear or nearest, but was ${r}`);
    const u = {
      image: i,
      boxes: a,
      boxInd: l
    }, h = {
      method: r,
      extrapolationValue: o,
      cropSize: s
    };
    return D.runKernel(Rp, u, h);
  }
  const BM = O({
    cropAndResize_: MM
  });
  function VM(t) {
    const e = T(t, "image", "flipLeftRight", "float32");
    C(e.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);
    const n = {
      image: e
    };
    return D.runKernel(Vp, n, {});
  }
  const WM = O({
    flipLeftRight_: VM
  });
  function UM(t) {
    const e = T(t, "image", "grayscaleToRGB"), n = e.rank - 1, s = e.shape[n];
    C(e.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`), C(s === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);
    const r = new Array(e.rank);
    return r.fill(1, 0, n), r[n] = 3, Qn(e, r);
  }
  const GM = O({
    grayscaleToRGB_: UM
  });
  function HM(t) {
    const e = T(t, "image", "RGBToGrayscale"), n = e.rank - 1, s = e.shape[n];
    C(e.rank >= 2, () => `Error in RGBToGrayscale: images must be at least rank 2, but got rank ${e.rank}.`), C(s === 3, () => `Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`);
    const r = e.dtype, o = ge(e, "float32"), i = en([
      0.2989,
      0.587,
      0.114
    ]);
    let a;
    switch (e.rank) {
      case 2:
        a = zo("ij,j->i", o, i);
        break;
      case 3:
        a = zo("ijk,k->ij", o, i);
        break;
      case 4:
        a = zo("ijkl,l->ijk", o, i);
        break;
      case 5:
        a = zo("ijklm,m->ijkl", o, i);
        break;
      case 6:
        a = zo("ijklmn,n->ijklm", o, i);
        break;
      default:
        throw new Error("Not a valid tensor rank.");
    }
    return a = Yt(a, -1), ge(a, r);
  }
  const jM = O({
    rgbToGrayscale_: HM
  });
  function qM(t, e, n = 0, s = 0.5) {
    const r = T(t, "image", "rotateWithOffset", "float32");
    C(r.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);
    const o = {
      image: r
    }, i = {
      radians: e,
      fillValue: n,
      center: s
    };
    return D.runKernel(Cf, o, i);
  }
  const KM = O({
    rotateWithOffset_: qM
  });
  function pl(t, e, n, s, r, o) {
    s == null && (s = 0.5), r == null && (r = Number.NEGATIVE_INFINITY), o == null && (o = 0);
    const i = t.shape[0];
    return n = Math.min(n, i), C(0 <= s && s <= 1, () => `iouThreshold must be in [0, 1], but was '${s}'`), C(t.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${t.rank}'`), C(t.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${t.shape[1]}`), C(e.rank === 1, () => "scores must be a 1D tensor"), C(e.shape[0] === i, () => `scores has incompatible shape with boxes. Expected ${i}, but was ${e.shape[0]}`), C(0 <= o && o <= 1, () => `softNmsSigma must be in [0, 1], but was '${o}'`), {
      maxOutputSize: n,
      iouThreshold: s,
      scoreThreshold: r,
      softNmsSigma: o
    };
  }
  function XM(t, e, n, s = 0.5, r = Number.NEGATIVE_INFINITY) {
    const o = T(t, "boxes", "nonMaxSuppression", "float32"), i = T(e, "scores", "nonMaxSuppression", "float32"), a = pl(o, i, n, s, r);
    n = a.maxOutputSize, s = a.iouThreshold, r = a.scoreThreshold;
    const l = {
      maxOutputSize: n,
      iouThreshold: s,
      scoreThreshold: r
    };
    return D.runKernel(Zp, {
      boxes: o,
      scores: i
    }, l);
  }
  const YM = O({
    nonMaxSuppression_: XM
  });
  function ZM(t, e, n) {
    const s = JM(t, e, n), r = s < 0 ? -(s + 1) : s;
    t.splice(r, 0, e);
  }
  function JM(t, e, n) {
    return eB(t, e, n || QM);
  }
  function QM(t, e) {
    return t > e ? 1 : t < e ? -1 : 0;
  }
  function eB(t, e, n) {
    let s = 0, r = t.length, o = 0, i = false;
    for (; s < r; ) {
      o = s + (r - s >>> 1);
      const a = n(e, t[o]);
      a > 0 ? s = o + 1 : (r = o, i = !a);
    }
    return i ? s : -s - 1;
  }
  im = function(t, e, n, s, r) {
    return yx(t, e, n, s, r, 0);
  };
  function am(t, e, n, s, r, o) {
    return yx(t, e, n, s, r, 0, false, o, true);
  }
  lm = function(t, e, n, s, r, o) {
    return yx(t, e, n, s, r, o, true);
  };
  function yx(t, e, n, s, r, o, i = false, a = false, l = false) {
    const c = [];
    for (let g = 0; g < e.length; g++) e[g] > r && c.push({
      score: e[g],
      boxIndex: g,
      suppressBeginIndex: 0
    });
    c.sort($v);
    const u = o > 0 ? -0.5 / o : 0, h = [], d = [];
    for (; h.length < n && c.length > 0; ) {
      const g = c.pop(), { score: y, boxIndex: b, suppressBeginIndex: w } = g;
      if (y < r) break;
      let x = false;
      for (let S = h.length - 1; S >= w; --S) {
        const I = tB(t, b, h[S]);
        if (I >= s) {
          x = true;
          break;
        }
        if (g.score = g.score * nB(s, u, I), g.score <= r) break;
      }
      g.suppressBeginIndex = h.length, x || (g.score === y ? (h.push(b), d.push(g.score)) : g.score > r && ZM(c, g, $v));
    }
    const p = h.length, f = n - p;
    a && f > 0 && (h.push(...new Array(f).fill(0)), d.push(...new Array(f).fill(0)));
    const m = {
      selectedIndices: h
    };
    return i && (m.selectedScores = d), l && (m.validOutputs = p), m;
  }
  function tB(t, e, n) {
    const s = t.subarray(e * 4, e * 4 + 4), r = t.subarray(n * 4, n * 4 + 4), o = Math.min(s[0], s[2]), i = Math.min(s[1], s[3]), a = Math.max(s[0], s[2]), l = Math.max(s[1], s[3]), c = Math.min(r[0], r[2]), u = Math.min(r[1], r[3]), h = Math.max(r[0], r[2]), d = Math.max(r[1], r[3]), p = (a - o) * (l - i), f = (h - c) * (d - u);
    if (p <= 0 || f <= 0) return 0;
    const m = Math.max(o, c), g = Math.max(i, u), y = Math.min(a, h), b = Math.min(l, d), w = Math.max(y - m, 0) * Math.max(b - g, 0);
    return w / (p + f - w);
  }
  function nB(t, e, n) {
    const s = Math.exp(e * n * n);
    return n <= t ? s : 0;
  }
  function $v(t, e) {
    return t.score - e.score || t.score === e.score && e.boxIndex - t.boxIndex;
  }
  async function sB(t, e, n, s = 0.5, r = Number.NEGATIVE_INFINITY) {
    const o = T(t, "boxes", "nonMaxSuppressionAsync"), i = T(e, "scores", "nonMaxSuppressionAsync"), a = pl(o, i, n, s, r);
    n = a.maxOutputSize, s = a.iouThreshold, r = a.scoreThreshold;
    const l = await Promise.all([
      o.data(),
      i.data()
    ]), c = l[0], u = l[1], { selectedIndices: h } = im(c, u, n, s, r);
    return o !== t && o.dispose(), i !== e && i.dispose(), en(h, "int32");
  }
  const rB = sB;
  function oB(t, e, n, s = 0.5, r = Number.NEGATIVE_INFINITY, o = 0) {
    const i = T(t, "boxes", "nonMaxSuppression"), a = T(e, "scores", "nonMaxSuppression"), l = pl(i, a, n, s, r, o);
    n = l.maxOutputSize, s = l.iouThreshold, r = l.scoreThreshold, o = l.softNmsSigma;
    const c = {
      boxes: i,
      scores: a
    }, u = {
      maxOutputSize: n,
      iouThreshold: s,
      scoreThreshold: r,
      softNmsSigma: o
    }, h = D.runKernel(Qp, c, u);
    return {
      selectedIndices: h[0],
      selectedScores: h[1]
    };
  }
  const iB = O({
    nonMaxSuppressionWithScore_: oB
  });
  async function aB(t, e, n, s = 0.5, r = Number.NEGATIVE_INFINITY, o = 0) {
    const i = T(t, "boxes", "nonMaxSuppressionAsync"), a = T(e, "scores", "nonMaxSuppressionAsync"), l = pl(i, a, n, s, r, o);
    n = l.maxOutputSize, s = l.iouThreshold, r = l.scoreThreshold, o = l.softNmsSigma;
    const c = await Promise.all([
      i.data(),
      a.data()
    ]), u = c[0], h = c[1], { selectedIndices: d, selectedScores: p } = lm(u, h, n, s, r, o);
    return i !== t && i.dispose(), a !== e && a.dispose(), {
      selectedIndices: en(d, "int32"),
      selectedScores: en(p)
    };
  }
  const lB = aB;
  function cB(t, e, n, s = 0.5, r = Number.NEGATIVE_INFINITY, o = false) {
    const i = T(t, "boxes", "nonMaxSuppression"), a = T(e, "scores", "nonMaxSuppression"), l = pl(i, a, n, s, r, null), c = l.maxOutputSize, u = l.iouThreshold, h = l.scoreThreshold, d = {
      boxes: i,
      scores: a
    }, p = {
      maxOutputSize: c,
      iouThreshold: u,
      scoreThreshold: h,
      padToMaxOutputSize: o
    }, f = D.runKernel(Jp, d, p);
    return {
      selectedIndices: f[0],
      validOutputs: f[1]
    };
  }
  const uB = O({
    nonMaxSuppressionPadded_: cB
  });
  async function hB(t, e, n, s = 0.5, r = Number.NEGATIVE_INFINITY, o = false) {
    const i = T(t, "boxes", "nonMaxSuppressionAsync"), a = T(e, "scores", "nonMaxSuppressionAsync"), l = pl(i, a, n, s, r, null), c = l.maxOutputSize, u = l.iouThreshold, h = l.scoreThreshold, [d, p] = await Promise.all([
      i.data(),
      a.data()
    ]), { selectedIndices: f, validOutputs: m } = am(d, p, c, u, h, o);
    return i !== t && i.dispose(), a !== e && a.dispose(), {
      selectedIndices: en(f, "int32"),
      validOutputs: Re(m, "int32")
    };
  }
  const dB = hB;
  function pB(t, e, n = false, s = false) {
    const r = T(t, "images", "resizeBilinear");
    C(r.rank === 3 || r.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`), C(e.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${e}.`), C(s === false || n === false, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
    let o = r, i = false;
    r.rank === 3 && (i = true, o = P(r, [
      1,
      r.shape[0],
      r.shape[1],
      r.shape[2]
    ]));
    const a = {
      images: o
    }, l = {
      alignCorners: n,
      halfPixelCenters: s,
      size: e
    }, c = D.runKernel(ku, a, l);
    return i ? P(c, [
      c.shape[1],
      c.shape[2],
      c.shape[3]
    ]) : c;
  }
  const hN = O({
    resizeBilinear_: pB
  });
  function fB(t, e, n = false, s = false) {
    const r = T(t, "images", "resizeNearestNeighbor");
    C(r.rank === 3 || r.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`), C(e.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`), C(r.dtype === "float32" || r.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), C(s === false || n === false, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
    let o = r, i = false;
    r.rank === 3 && (i = true, o = P(r, [
      1,
      r.shape[0],
      r.shape[1],
      r.shape[2]
    ]));
    const a = {
      images: o
    }, l = {
      alignCorners: n,
      halfPixelCenters: s,
      size: e
    }, c = D.runKernel(Nu, a, l);
    return i ? P(c, [
      c.shape[1],
      c.shape[2],
      c.shape[3]
    ]) : c;
  }
  const dN = O({
    resizeNearestNeighbor_: fB
  });
  function mB(t, e = "binary", n = false, s = 0.5) {
    const r = T(t, "image", "threshold"), o = 0.2989, i = 0.587, a = 0.114, l = r.shape[0] * r.shape[1];
    let c = L(en([
      s
    ]), 255), u, h, d, p;
    if (C(r.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${r.rank}.`), C(r.shape[2] === 3 || r.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`), C(r.dtype === "int32" || r.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`), C(e === "otsu" || e === "binary", () => `Method must be binary or otsu, but was ${e}`), r.shape[2] === 3) {
      [u, h, d] = Rn(r, [
        1,
        1,
        1
      ], -1);
      const g = L(u, o), y = L(h, i), b = L(d, a);
      p = ae(ae(g, y), b);
    } else p = t;
    if (e === "otsu") {
      const g = Tb(ge(Wf(p), "int32"), Un([]), 256);
      c = gB(g, l);
    }
    const f = n ? $o(p, c) : wn(p, c);
    return ge(L(f, 255), "int32");
  }
  function gB(t, e) {
    let n = en([
      -1
    ]), s = en([
      0
    ]), r = en([
      0
    ]), o, i, a, l, c, u;
    for (let h = 0; h < t.size - 1; h++) {
      o = je(t, 0, h + 1), i = je(t, h + 1), c = Ne($e(o), e), u = Ne($e(i), e);
      const d = $e(L(o, ii(0, o.size)));
      a = Ne(d, $e(o));
      const p = wi(i.shape, o.size), f = ae(ii(0, i.size), p), m = L(i, f);
      l = Ne($e(m), $e(i));
      const g = ve(a, l), y = ve(a, l), b = L(c, u);
      r = L(L(b, g), y);
      const w = wn(r, s);
      s = Wt(w, r, s), n = Wt(w, en([
        h
      ]), n);
    }
    return n;
  }
  const yB = O({
    threshold_: mB
  });
  function bB(t, e, n = "nearest", s = "constant", r = 0, o) {
    const i = T(t, "image", "transform", "float32"), a = T(e, "transforms", "transform", "float32");
    C(i.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${i.rank}.`), C(a.rank === 2 && (a.shape[0] === i.shape[0] || a.shape[0] === 1) && a.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), C(o == null || o.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${o}.`);
    const l = {
      image: i,
      transforms: a
    }, c = {
      interpolation: n,
      fillMode: s,
      fillValue: r,
      outputShape: o
    };
    return D.runKernel(Sf, l, c);
  }
  const xB = O({
    transform_: bB
  });
  function wB(t, e, n) {
    const s = T(t, "a", "bandPart");
    C(s.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${s.rank}.`);
    const r = s.shape, [o, i] = s.shape.slice(-2);
    let a, l;
    typeof e == "number" ? (C(e % 1 === 0, () => `bandPart(): numLower must be an integer, got ${e}.`), C(e <= o, () => `bandPart(): numLower (${e}) must not be greater than the number of rows (${o}).`), a = T(e < 0 ? o : e, "numLower", "bandPart")) : (C(e.dtype === "int32", () => "bandPart(): numLower's dtype must be an int32."), a = Wt(ea(e, 0), o, co(e, o))), typeof n == "number" ? (C(n % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${n}.`), C(n <= i, () => `bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`), l = T(n < 0 ? i : n, "numUpper", "bandPart")) : (C(n.dtype === "int32", () => "bandPart(): numUpper's dtype must be an int32."), l = Wt(ea(n, 0), i, co(n, i)));
    const c = P(ii(0, o, 1, "int32"), [
      -1,
      1
    ]), u = ii(0, i, 1, "int32"), h = ve(c, u), d = ys($o(h, a), Fr(h, lt(l))), p = Tt([
      o,
      i
    ], s.dtype);
    return P(yn(os(P(s, [
      -1,
      o,
      i
    ])).map((f) => Wt(d, f, p))), r);
  }
  const vB = O({
    bandPart_: wB
  });
  function SB(t) {
    let e;
    if (Array.isArray(t)) {
      e = false, C(t != null && t.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
      const r = t[0].shape[0];
      for (let o = 1; o < t.length; ++o) C(t[o].shape[0] === r, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[o].shape[0]} vs. ${r})`);
    } else e = true, t = Rn(t, t.shape[0], 0).map((r) => Io(r, [
      0
    ]));
    C(t.length <= t[0].shape[0], () => `Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`);
    const n = [], s = t;
    for (let r = 0; r < t.length; ++r) n.push(D.tidy(() => {
      let o = s[r];
      if (r > 0) for (let i = 0; i < r; ++i) {
        const a = L($e(L(n[i], o)), n[i]);
        o = ve(o, a);
      }
      return Ne(o, cl(o, "euclidean"));
    }));
    return e ? yn(n, 0) : n;
  }
  const $B = O({
    gramSchmidt_: SB
  });
  function CB(t, e = false) {
    if (C(t.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${t.rank}`), t.rank === 2) return Cv(t, e);
    {
      const n = t.shape.slice(0, t.shape.length - 2).reduce((l, c) => l * c), s = os(P(t, [
        n,
        t.shape[t.shape.length - 2],
        t.shape[t.shape.length - 1]
      ]), 0), r = [], o = [];
      s.forEach((l) => {
        const [c, u] = Cv(l, e);
        r.push(c), o.push(u);
      });
      const i = P(yn(r, 0), t.shape), a = P(yn(o, 0), t.shape);
      return [
        i,
        a
      ];
    }
  }
  function Cv(t, e = false) {
    return D.tidy(() => {
      C(t.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`);
      const n = t.shape[0], s = t.shape[1];
      let r = Ff(n), o = er(t);
      const i = eo([
        [
          1
        ]
      ], [
        1,
        1
      ]);
      let a = er(i);
      const l = n >= s ? s : n;
      for (let c = 0; c < l; ++c) {
        const u = o, h = a, d = r;
        [a, o, r] = D.tidy(() => {
          const p = je(o, [
            c,
            c
          ], [
            n - c,
            1
          ]), f = cl(p), m = je(o, [
            c,
            c
          ], [
            1,
            1
          ]), g = Wt(wn(m, 0), eo([
            [
              -1
            ]
          ]), eo([
            [
              1
            ]
          ])), y = ve(m, L(g, f)), b = Ne(p, y);
          b.shape[0] === 1 ? a = er(i) : a = vt([
            i,
            je(b, [
              1,
              0
            ], [
              b.shape[0] - 1,
              b.shape[1]
            ])
          ], 0);
          const w = lt(Ne(Be(g, y), f)), x = je(o, [
            c,
            0
          ], [
            n - c,
            s
          ]), S = L(w, a), I = He(a);
          if (c === 0) o = ve(x, Be(S, Be(I, x)));
          else {
            const N = ve(x, Be(S, Be(I, x)));
            o = vt([
              je(o, [
                0,
                0
              ], [
                c,
                s
              ]),
              N
            ], 0);
          }
          const E = He(S), R = je(r, [
            0,
            c
          ], [
            n,
            r.shape[1] - c
          ]);
          if (c === 0) r = ve(R, Be(Be(R, a), E));
          else {
            const N = ve(R, Be(Be(R, a), E));
            r = vt([
              je(r, [
                0,
                0
              ], [
                n,
                c
              ]),
              N
            ], 1);
          }
          return [
            a,
            o,
            r
          ];
        }), Oe([
          u,
          h,
          d
        ]);
      }
      return !e && n > s && (r = je(r, [
        0,
        0
      ], [
        n,
        s
      ]), o = je(o, [
        0,
        0
      ], [
        s,
        s
      ])), [
        r,
        o
      ];
    });
  }
  const IB = O({
    qr_: CB
  });
  var fn;
  (function(t) {
    t[t.NONE = 0] = "NONE", t[t.MEAN = 1] = "MEAN", t[t.SUM = 2] = "SUM", t[t.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
  })(fn || (fn = {}));
  function NB(t, e, n = fn.SUM_BY_NONZERO_WEIGHTS) {
    const s = T(t, "losses", "computeWeightedLoss");
    let r = null;
    e != null && (r = T(e, "weights", "computeWeightedLoss"));
    const o = r == null ? s : L(s, r);
    if (n === fn.NONE) return o;
    if (n === fn.SUM) return $e(o);
    if (n === fn.MEAN) {
      if (r == null) return mt(o);
      {
        const i = s.size / r.size, a = Ne($e(o), $e(r));
        return i > 1 ? Ne(a, Re(i)) : a;
      }
    }
    if (n === fn.SUM_BY_NONZERO_WEIGHTS) {
      if (r == null) return Ne($e(o), Re(s.size));
      {
        const i = L(r, En(s.shape)), a = ge($e(oi(i, Re(0))), "float32");
        return Ne($e(o), a);
      }
    }
    throw Error(`Unknown reduction: ${n}`);
  }
  const Pr = O({
    computeWeightedLoss_: NB
  });
  function kB(t, e, n, s = fn.SUM_BY_NONZERO_WEIGHTS) {
    const r = T(t, "labels", "absoluteDifference"), o = T(e, "predictions", "absoluteDifference");
    let i = null;
    n != null && (i = T(n, "weights", "absoluteDifference")), nn(r.shape, o.shape, "Error in absoluteDifference: ");
    const a = kt(ve(r, o));
    return Pr(a, i, s);
  }
  const TB = O({
    absoluteDifference_: kB
  });
  function EB(t, e, n, s, r = fn.SUM_BY_NONZERO_WEIGHTS) {
    const o = T(t, "labels", "cosineDistance"), i = T(e, "predictions", "cosineDistance");
    let a = null;
    s != null && (a = T(s, "weights", "cosineDistance")), nn(o.shape, i.shape, "Error in cosineDistance: ");
    const l = Re(1), c = ve(l, $e(L(o, i), n, true));
    return Pr(c, a, r);
  }
  const RB = O({
    cosineDistance_: EB
  });
  function AB(t, e, n, s = fn.SUM_BY_NONZERO_WEIGHTS) {
    let r = T(t, "labels", "hingeLoss");
    const o = T(e, "predictions", "hingeLoss");
    let i = null;
    n != null && (i = T(n, "weights", "hingeLoss")), nn(r.shape, o.shape, "Error in hingeLoss: ");
    const a = Re(1);
    r = ve(L(Re(2), r), a);
    const l = zs(ve(a, L(r, o)));
    return Pr(l, i, s);
  }
  const _B = O({
    hingeLoss_: AB
  });
  function DB(t, e, n, s = 1, r = fn.SUM_BY_NONZERO_WEIGHTS) {
    const o = T(t, "labels", "huberLoss"), i = T(e, "predictions", "huberLoss");
    let a = null;
    n != null && (a = T(n, "weights", "huberLoss")), nn(o.shape, i.shape, "Error in huberLoss: ");
    const l = Re(s), c = kt(ve(i, o)), u = co(c, l), h = ve(c, u), d = ae(L(Re(0.5), st(u)), L(l, h));
    return Pr(d, a, r);
  }
  const OB = O({
    huberLoss_: DB
  });
  function FB(t, e, n, s = 1e-7, r = fn.SUM_BY_NONZERO_WEIGHTS) {
    const o = T(t, "labels", "logLoss"), i = T(e, "predictions", "logLoss");
    let a = null;
    n != null && (a = T(n, "weights", "logLoss")), nn(o.shape, i.shape, "Error in logLoss: ");
    const l = Re(1), c = Re(s), u = lt(L(o, Hn(ae(i, c)))), h = L(ve(l, o), Hn(ae(ve(l, i), c))), d = ve(u, h);
    return Pr(d, a, r);
  }
  const LB = O({
    logLoss_: FB
  });
  function PB(t, e, n, s = fn.SUM_BY_NONZERO_WEIGHTS) {
    const r = T(t, "labels", "meanSquaredError"), o = T(e, "predictions", "meanSquaredError");
    let i = null;
    n != null && (i = T(n, "weights", "meanSquaredError")), nn(r.shape, o.shape, "Error in meanSquaredError: ");
    const a = Yf(r, o);
    return Pr(a, i, s);
  }
  const zB = O({
    meanSquaredError_: PB
  });
  function MB(t, e) {
    const n = T(t, "labels", "sigmoidCrossEntropyWithLogits"), s = T(e, "logits", "sigmoidCrossEntropyWithLogits");
    nn(n.shape, s.shape, "Error in sigmoidCrossEntropyWithLogits: ");
    const r = zs(s), o = L(s, n), i = qu(On(lt(kt(s))));
    return ae(ve(r, o), i);
  }
  function BB(t, e, n, s = 0, r = fn.SUM_BY_NONZERO_WEIGHTS) {
    let o = T(t, "multiClassLabels", "sigmoidCrossEntropy");
    const i = T(e, "logits", "sigmoidCrossEntropy");
    let a = null;
    if (n != null && (a = T(n, "weights", "sigmoidCrossEntropy")), nn(o.shape, i.shape, "Error in sigmoidCrossEntropy: "), s > 0) {
      const c = Re(s), u = Re(1), h = Re(0.5);
      o = ae(L(o, ve(u, c)), L(h, c));
    }
    const l = MB(o, i);
    return Pr(l, a, r);
  }
  const VB = O({
    sigmoidCrossEntropy_: BB
  });
  function WB(t, e, n = -1) {
    if (n === -1 && (n = e.rank - 1), n !== e.rank - 1) throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${n}`);
    return lr((r, o, i) => {
      const l = Ku(o, [
        n
      ], true), c = ve(ge(o, "float32"), l);
      i([
        r,
        c
      ]);
      const u = lt(L(c, r));
      return {
        value: $e(u, [
          n
        ]),
        gradFunc: (p, f) => {
          const [m, g] = f, y = $t(p.shape, [
            n
          ]);
          return [
            L(P(p, y), ve(ge(m, "float32"), On(g))),
            L(P(p, y), ve(On(g), ge(m, "float32")))
          ];
        }
      };
    })(t, e);
  }
  function UB(t, e, n, s = 0, r = fn.SUM_BY_NONZERO_WEIGHTS) {
    let o = T(t, "onehotLabels", "softmaxCrossEntropy");
    const i = T(e, "logits", "softmaxCrossEntropy");
    let a = null;
    if (n != null && (a = T(n, "weights", "softmaxCrossEntropy")), nn(o.shape, i.shape, "Error in softmaxCrossEntropy: "), s > 0) {
      const c = Re(s), u = Re(1), h = Re(o.shape[1]);
      o = ae(L(o, ve(u, c)), Ne(c, h));
    }
    const l = WB(o, i);
    return Pr(l, a, r);
  }
  const GB = O({
    softmaxCrossEntropy_: UB
  });
  function HB(t, e, n, s) {
    const r = T(t, "indices", "sparseFillEmptyRows", "int32"), o = T(e, "values", "sparseFillEmptyRows"), i = T(n, "denseShape", "sparseFillEmptyRows", "int32"), a = T(s, "defaultValue", "sparseFillEmptyRows", o.dtype);
    if (r.rank !== 2) throw new Error(`Indices should be Tensor2D but received shape
        ${r.shape}`);
    if (o.rank !== 1) throw new Error(`Values should be Tensor1D but received shape ${o.shape}`);
    if (i.rank !== 1) throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);
    if (a.rank !== 0) throw new Error(`Default value should be a scalar but received shape ${a.shape}`);
    const l = {
      indices: r,
      values: o,
      denseShape: i,
      defaultValue: a
    }, c = D.runKernel(hf, l);
    return {
      outputIndices: c[0],
      outputValues: c[1],
      emptyRowIndicator: c[2],
      reverseIndexMap: c[3]
    };
  }
  const jB = O({
    sparseFillEmptyRows_: HB
  });
  function qB(t, e, n) {
    const s = T(t, "inputIndices", "sparseReshape", "int32"), r = T(e, "inputShape", "sparseReshape", "int32"), o = T(n, "newShape", "sparseReshape", "int32");
    if (s.rank !== 2) throw new Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);
    if (r.rank !== 1) throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);
    if (o.rank !== 1) throw new Error(`New shape should be Tensor1D but received shape ${o.shape}`);
    const i = {
      inputIndices: s,
      inputShape: r,
      newShape: o
    }, a = D.runKernel(df, i);
    return {
      outputIndices: a[0],
      outputShape: a[1]
    };
  }
  const KB = O({
    sparseReshape_: qB
  });
  function XB(t, e, n) {
    const s = T(t, "data", "sparseSegmentMean"), r = T(e, "indices", "sparseSegmentMean", "int32"), o = T(n, "segmentIds", "sparseSegmentMean", "int32");
    if (s.rank < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
    if (r.rank !== 1) throw new Error(`Indices should be Tensor1D but received shape
          ${r.shape}`);
    if (o.rank !== 1) throw new Error(`Segment ids should be Tensor1D but received shape
          ${o.shape}`);
    const i = {
      data: s,
      indices: r,
      segmentIds: o
    };
    return D.runKernel(pf, i);
  }
  const YB = O({
    sparseSegmentMean_: XB
  });
  function ZB(t, e, n) {
    const s = T(t, "data", "sparseSegmentSum"), r = T(e, "indices", "sparseSegmentSum", "int32"), o = T(n, "segmentIds", "sparseSegmentSum", "int32");
    if (s.rank < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
    if (r.rank !== 1) throw new Error(`Indices should be Tensor1D but received shape
         ${r.shape}`);
    if (o.rank !== 1) throw new Error(`Segment ids should be Tensor1D but received shape
         ${o.shape}`);
    const i = {
      data: s,
      indices: r,
      segmentIds: o
    };
    return D.runKernel(ff, i);
  }
  const JB = O({
    sparseSegmentSum_: ZB
  });
  function QB(t, e, n, s, r, o, i, a) {
    const l = T(t, "data", "stringNGrams", "string");
    if (l.dtype !== "string") throw new Error("Data must be of datatype string");
    if (l.shape.length !== 1) throw new Error(`Data must be a vector, saw: ${l.shape}`);
    const c = T(e, "dataSplits", "stringNGrams");
    if (c.dtype !== "int32") throw new Error("Data splits must be of datatype int32");
    const u = {
      separator: n,
      nGramWidths: s,
      leftPad: r,
      rightPad: o,
      padWidth: i,
      preserveShortSequences: a
    }, h = {
      data: l,
      dataSplits: c
    }, d = D.runKernel(bf, h, u);
    return {
      nGrams: d[0],
      nGramsSplits: d[1]
    };
  }
  const eV = O({
    stringNGrams_: QB
  });
  function tV(t, e, n = true) {
    const s = T(t, "input", "stringSplit", "string"), r = T(e, "delimiter", "stringSplit", "string");
    if (s.rank !== 1) throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);
    if (r.rank !== 0) throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);
    const o = {
      skipEmpty: n
    }, i = {
      input: s,
      delimiter: r
    }, a = D.runKernel(xf, i, o);
    return {
      indices: a[0],
      values: a[1],
      shape: a[2]
    };
  }
  const nV = O({
    stringSplit_: tV
  });
  function sV(t, e) {
    const n = T(t, "input", "stringToHashBucketFast", "string"), s = {
      numBuckets: e
    };
    if (e <= 0) throw new Error("Number of buckets must be at least 1");
    const r = {
      input: n
    };
    return D.runKernel(wf, r, s);
  }
  const rV = O({
    stringToHashBucketFast_: sV
  });
  function oV(t, e, n, s = true) {
    const r = T(t, "input", "staticRegexReplace", "string"), o = {
      pattern: e,
      rewrite: n,
      replaceGlobal: s
    };
    return D.runKernel(Fu, {
      x: r
    }, o);
  }
  const iV = O({
    staticRegexReplace_: oV
  });
  const pN = {
    fft: sh,
    ifft: ra,
    rfft: rh,
    irfft: Xf
  }, fN = {
    hammingWindow: OM,
    hannWindow: cN,
    frame: uN,
    stft: zM
  }, ps = {
    flipLeftRight: WM,
    grayscaleToRGB: GM,
    resizeNearestNeighbor: dN,
    resizeBilinear: hN,
    rgbToGrayscale: jM,
    rotateWithOffset: KM,
    cropAndResize: BM,
    nonMaxSuppression: YM,
    nonMaxSuppressionAsync: rB,
    nonMaxSuppressionWithScore: iB,
    nonMaxSuppressionWithScoreAsync: lB,
    nonMaxSuppressionPadded: uB,
    nonMaxSuppressionPaddedAsync: dB,
    threshold: yB,
    transform: xB
  }, bx = {
    bandPart: vB,
    gramSchmidt: $B,
    qr: IB
  }, mN = {
    absoluteDifference: TB,
    computeWeightedLoss: Pr,
    cosineDistance: RB,
    hingeLoss: _B,
    huberLoss: OB,
    logLoss: LB,
    meanSquaredError: zB,
    sigmoidCrossEntropy: VB,
    softmaxCrossEntropy: GB
  }, gN = {
    sparseFillEmptyRows: jB,
    sparseReshape: KB,
    sparseSegmentMean: YB,
    sparseSegmentSum: JB
  }, yN = {
    stringNGrams: eV,
    stringSplit: nV,
    stringToHashBucketFast: rV,
    staticRegexReplace: iV
  };
  const aV = /* @__PURE__ */ new Map(), Jg = /* @__PURE__ */ new Map();
  class $i {
    getClassName() {
      return this.constructor.className;
    }
    static fromConfig(e, n) {
      return new e(n);
    }
  }
  class Zn {
    constructor() {
      this.classNameMap = {};
    }
    static getMap() {
      return Zn.instance == null && (Zn.instance = new Zn()), Zn.instance;
    }
    static register(e) {
      Zn.getMap().classNameMap[e.className] = [
        e,
        e.fromConfig
      ];
    }
  }
  function le(t, e, n) {
    C(t.className != null, () => "Class being registered does not have the static className property defined."), C(typeof t.className == "string", () => "className is required to be a string, but got type " + typeof t.className), C(t.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), typeof e > "u" && (e = "Custom"), typeof n > "u" && (n = t.className);
    const s = n, r = e + ">" + s;
    return Zn.register(t), aV.set(r, t), Jg.set(t, r), t;
  }
  function lV(t) {
    return Jg.has(t) ? Jg.get(t) : t.className;
  }
  const cV = Object.freeze(Object.defineProperty({
    __proto__: null,
    Serializable: $i,
    SerializationMap: Zn,
    getRegisteredName: lV,
    registerClass: le
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  class zr extends $i {
    minimize(e, n = false, s) {
      const { value: r, grads: o } = this.computeGradients(e, s);
      if (s != null) {
        const i = s.map((a) => ({
          name: a.name,
          tensor: o[a.name]
        }));
        this.applyGradients(i);
      } else this.applyGradients(o);
      return Oe(o), n ? r : (r.dispose(), null);
    }
    get iterations() {
      return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
    }
    incrementIterations() {
      this.iterations_ = this.iterations + 1;
    }
    computeGradients(e, n) {
      return $I(e, n);
    }
    dispose() {
      this.iterations_ != null && Oe(this.iterations_);
    }
    async saveIterations() {
      return this.iterations_ == null && (this.iterations_ = 0), {
        name: "iter",
        tensor: Re(this.iterations_, "int32")
      };
    }
    async getWeights() {
      throw new Error("getWeights() is not implemented for this optimizer yet.");
    }
    async setWeights(e) {
      throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
    }
    async extractIterations(e) {
      return this.iterations_ = (await e[0].tensor.data())[0], e.slice(1);
    }
  }
  Object.defineProperty(zr, Symbol.hasInstance, {
    value: (t) => t.minimize != null && t.computeGradients != null && t.applyGradients != null
  });
  class xx extends zr {
    static get className() {
      return "Adadelta";
    }
    constructor(e, n, s = null) {
      super(), this.learningRate = e, this.rho = n, this.epsilon = s, this.accumulatedGrads = [], this.accumulatedUpdates = [], s == null && (this.epsilon = D.backend.epsilon());
    }
    applyGradients(e) {
      (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
        const o = D.registeredVariables[s], i = false;
        this.accumulatedGrads[r] == null && (this.accumulatedGrads[r] = {
          originalName: `${s}/accum_grad`,
          variable: q(() => qe(o).variable(i))
        }), this.accumulatedUpdates[r] == null && (this.accumulatedUpdates[r] = {
          originalName: `${s}/accum_var`,
          variable: q(() => qe(o).variable(i))
        });
        const a = Array.isArray(e) ? e[r].tensor : e[s];
        if (a == null) return;
        const l = this.accumulatedGrads[r].variable, c = this.accumulatedUpdates[r].variable;
        q(() => {
          const u = ae(L(l, this.rho), L(st(a), 1 - this.rho)), h = L(Ne(Gt(ae(c, this.epsilon)), Gt(ae(l, this.epsilon))), a), d = ae(L(c, this.rho), L(st(h), 1 - this.rho));
          l.assign(u), c.assign(d);
          const p = ae(L(h, -this.learningRate), o);
          o.assign(p);
        });
      }), this.incrementIterations();
    }
    dispose() {
      this.accumulatedUpdates != null && (Oe(this.accumulatedGrads.map((e) => e.variable)), Oe(this.accumulatedUpdates.map((e) => e.variable)));
    }
    async getWeights() {
      const e = [
        ...this.accumulatedGrads,
        ...this.accumulatedUpdates
      ];
      return [
        await this.saveIterations()
      ].concat(e.map((n) => ({
        name: n.originalName,
        tensor: n.variable
      })));
    }
    async setWeights(e) {
      e = await this.extractIterations(e);
      const n = e.length / 2, s = false;
      this.accumulatedGrads = e.slice(0, n).map((r) => ({
        originalName: r.name,
        variable: r.tensor.variable(s)
      })), this.accumulatedUpdates = e.slice(n, n * 2).map((r) => ({
        originalName: r.name,
        variable: r.tensor.variable(s)
      }));
    }
    getConfig() {
      return {
        learningRate: this.learningRate,
        rho: this.rho,
        epsilon: this.epsilon
      };
    }
    static fromConfig(e, n) {
      return new e(n.learningRate, n.rho, n.epsilon);
    }
  }
  class wx extends zr {
    static get className() {
      return "Adagrad";
    }
    constructor(e, n = 0.1) {
      super(), this.learningRate = e, this.initialAccumulatorValue = n, this.accumulatedGrads = [];
    }
    applyGradients(e) {
      (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
        const o = D.registeredVariables[s];
        this.accumulatedGrads[r] == null && (this.accumulatedGrads[r] = {
          originalName: `${s}/accumulator`,
          variable: q(() => wi(o.shape, this.initialAccumulatorValue).variable(false))
        });
        const i = Array.isArray(e) ? e[r].tensor : e[s];
        if (i == null) return;
        const a = this.accumulatedGrads[r].variable;
        q(() => {
          const l = ae(a, st(i));
          a.assign(l);
          const c = ae(L(Ne(i, Gt(ae(l, D.backend.epsilon()))), -this.learningRate), o);
          o.assign(c);
        });
      }), this.incrementIterations();
    }
    dispose() {
      this.accumulatedGrads != null && Oe(this.accumulatedGrads.map((e) => e.variable));
    }
    async getWeights() {
      return [
        await this.saveIterations()
      ].concat(this.accumulatedGrads.map((e) => ({
        name: e.originalName,
        tensor: e.variable
      })));
    }
    async setWeights(e) {
      e = await this.extractIterations(e);
      const n = false;
      this.accumulatedGrads = e.map((s) => ({
        originalName: s.name,
        variable: s.tensor.variable(n)
      }));
    }
    getConfig() {
      return {
        learningRate: this.learningRate,
        initialAccumulatorValue: this.initialAccumulatorValue
      };
    }
    static fromConfig(e, n) {
      return new e(n.learningRate, n.initialAccumulatorValue);
    }
  }
  class vx extends zr {
    static get className() {
      return "Adam";
    }
    constructor(e, n, s, r = null) {
      super(), this.learningRate = e, this.beta1 = n, this.beta2 = s, this.epsilon = r, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], q(() => {
        this.accBeta1 = Re(n).variable(), this.accBeta2 = Re(s).variable();
      }), r == null && (this.epsilon = D.backend.epsilon());
    }
    applyGradients(e) {
      const n = Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e);
      q(() => {
        const s = ve(1, this.accBeta1), r = ve(1, this.accBeta2);
        n.forEach((o, i) => {
          const a = D.registeredVariables[o], l = false;
          this.accumulatedFirstMoment[i] == null && (this.accumulatedFirstMoment[i] = {
            originalName: `${o}/m`,
            variable: q(() => qe(a).variable(l))
          }), this.accumulatedSecondMoment[i] == null && (this.accumulatedSecondMoment[i] = {
            originalName: `${o}/v`,
            variable: q(() => qe(a).variable(l))
          });
          const c = Array.isArray(e) ? e[i].tensor : e[o];
          if (c == null) return;
          const u = this.accumulatedFirstMoment[i].variable, h = this.accumulatedSecondMoment[i].variable, d = ae(L(u, this.beta1), L(c, 1 - this.beta1)), p = ae(L(h, this.beta2), L(st(c), 1 - this.beta2)), f = Ne(d, s), m = Ne(p, r);
          u.assign(d), h.assign(p);
          const g = ae(L(Ne(f, ae(Gt(m), this.epsilon)), -this.learningRate), a);
          a.assign(g);
        }), this.accBeta1.assign(L(this.accBeta1, this.beta1)), this.accBeta2.assign(L(this.accBeta2, this.beta2));
      }), this.incrementIterations();
    }
    dispose() {
      this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Oe(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedSecondMoment != null && Oe(this.accumulatedSecondMoment.map((e) => e.variable));
    }
    async getWeights() {
      const e = [
        ...this.accumulatedFirstMoment,
        ...this.accumulatedSecondMoment
      ];
      return [
        await this.saveIterations()
      ].concat(e.map((n) => ({
        name: n.originalName,
        tensor: n.variable
      })));
    }
    async setWeights(e) {
      e = await this.extractIterations(e), q(() => {
        this.accBeta1.assign(ar(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(ar(this.beta2, this.iterations_ + 1));
      });
      const n = e.length / 2, s = false;
      this.accumulatedFirstMoment = e.slice(0, n).map((r) => ({
        originalName: r.name,
        variable: r.tensor.variable(s)
      })), this.accumulatedSecondMoment = e.slice(n, n * 2).map((r) => ({
        originalName: r.name,
        variable: r.tensor.variable(s)
      }));
    }
    getConfig() {
      return {
        learningRate: this.learningRate,
        beta1: this.beta1,
        beta2: this.beta2,
        epsilon: this.epsilon
      };
    }
    static fromConfig(e, n) {
      return new e(n.learningRate, n.beta1, n.beta2, n.epsilon);
    }
  }
  class Sx extends zr {
    static get className() {
      return "Adamax";
    }
    constructor(e, n, s, r = null, o = 0) {
      super(), this.learningRate = e, this.beta1 = n, this.beta2 = s, this.epsilon = r, this.decay = o, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], q(() => {
        this.iteration = Re(0).variable(), this.accBeta1 = Re(n).variable();
      }), r == null && (this.epsilon = D.backend.epsilon());
    }
    applyGradients(e) {
      const n = Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e);
      q(() => {
        const s = ve(1, this.accBeta1), r = Ne(-this.learningRate, ae(L(this.iteration, this.decay), 1));
        n.forEach((o, i) => {
          const a = D.registeredVariables[o], l = false;
          this.accumulatedFirstMoment[i] == null && (this.accumulatedFirstMoment[i] = {
            originalName: `${o}/m`,
            variable: qe(a).variable(l)
          }), this.accumulatedWeightedInfNorm[i] == null && (this.accumulatedWeightedInfNorm[i] = {
            originalName: `${o}/v`,
            variable: qe(a).variable(l)
          });
          const c = Array.isArray(e) ? e[i].tensor : e[o];
          if (c == null) return;
          const u = this.accumulatedFirstMoment[i].variable, h = this.accumulatedWeightedInfNorm[i].variable, d = ae(L(u, this.beta1), L(c, 1 - this.beta1)), p = L(h, this.beta2), f = kt(c), m = ur(p, f);
          u.assign(d), h.assign(m);
          const g = ae(L(Ne(r, s), Ne(d, ae(m, this.epsilon))), a);
          a.assign(g);
        }), this.iteration.assign(ae(this.iteration, 1)), this.accBeta1.assign(L(this.accBeta1, this.beta1));
      }), this.incrementIterations();
    }
    dispose() {
      this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Oe(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedWeightedInfNorm != null && Oe(this.accumulatedWeightedInfNorm.map((e) => e.variable));
    }
    async getWeights() {
      throw new Error("getWeights() is not implemented for Adamax yet.");
    }
    async setWeights(e) {
      throw new Error("setWeights() is not implemented for Adamax yet.");
    }
    getConfig() {
      return {
        learningRate: this.learningRate,
        beta1: this.beta1,
        beta2: this.beta2,
        epsilon: this.epsilon,
        decay: this.decay
      };
    }
    static fromConfig(e, n) {
      return new e(n.learningRate, n.beta1, n.beta2, n.epsilon, n.decay);
    }
  }
  class cm extends zr {
    static get className() {
      return "SGD";
    }
    constructor(e) {
      super(), this.learningRate = e, this.setLearningRate(e);
    }
    applyGradients(e) {
      (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
        const o = Array.isArray(e) ? e[r].tensor : e[s];
        if (o == null) return;
        const i = D.registeredVariables[s];
        q(() => {
          const a = ae(L(this.c, o), i);
          i.assign(a);
        });
      }), this.incrementIterations();
    }
    setLearningRate(e) {
      this.learningRate = e, this.c != null && this.c.dispose(), this.c = Dt(Re(-e));
    }
    dispose() {
      this.c.dispose();
    }
    async getWeights() {
      return [
        await this.saveIterations()
      ];
    }
    async setWeights(e) {
      if (e = await this.extractIterations(e), e.length !== 0) throw new Error("SGD optimizer does not have settable weights.");
    }
    getConfig() {
      return {
        learningRate: this.learningRate
      };
    }
    static fromConfig(e, n) {
      return new e(n.learningRate);
    }
  }
  class $x extends cm {
    static get className() {
      return "Momentum";
    }
    constructor(e, n, s = false) {
      super(e), this.learningRate = e, this.momentum = n, this.useNesterov = s, this.accumulations = [], this.m = Re(this.momentum);
    }
    applyGradients(e) {
      (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
        const o = D.registeredVariables[s];
        this.accumulations[r] == null && (this.accumulations[r] = {
          originalName: `${s}/momentum`,
          variable: q(() => qe(o).variable(false))
        });
        const i = this.accumulations[r].variable, a = Array.isArray(e) ? e[r].tensor : e[s];
        a != null && q(() => {
          let l;
          const c = ae(L(this.m, i), a);
          this.useNesterov ? l = ae(L(this.c, ae(a, L(c, this.m))), o) : l = ae(L(this.c, c), o), i.assign(c), o.assign(l);
        });
      }), this.incrementIterations();
    }
    dispose() {
      this.m.dispose(), this.accumulations != null && Oe(this.accumulations.map((e) => e.variable));
    }
    setMomentum(e) {
      this.momentum = e;
    }
    async getWeights() {
      return [
        await this.saveIterations()
      ].concat(this.accumulations.map((e) => ({
        name: e.originalName,
        tensor: e.variable
      })));
    }
    async setWeights(e) {
      e = await this.extractIterations(e);
      const n = false;
      this.accumulations = e.map((s) => ({
        originalName: s.name,
        variable: s.tensor.variable(n)
      }));
    }
    getConfig() {
      return {
        learningRate: this.learningRate,
        momentum: this.momentum,
        useNesterov: this.useNesterov
      };
    }
    static fromConfig(e, n) {
      return new e(n.learningRate, n.momentum, n.useNesterov);
    }
  }
  class Cx extends zr {
    static get className() {
      return "RMSProp";
    }
    constructor(e, n = 0.9, s = 0, r = null, o = false) {
      if (super(), this.learningRate = e, this.decay = n, this.momentum = s, this.epsilon = r, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = o, r == null && (this.epsilon = D.backend.epsilon()), e == null) throw new Error("learningRate for RMSPropOptimizer must be defined.");
    }
    applyGradients(e) {
      (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
        const o = D.registeredVariables[s], i = false;
        this.accumulatedMeanSquares[r] == null && (this.accumulatedMeanSquares[r] = {
          originalName: `${s}/rms`,
          variable: q(() => qe(o).variable(i))
        }), this.accumulatedMoments[r] == null && (this.accumulatedMoments[r] = {
          originalName: `${s}/momentum`,
          variable: q(() => qe(o).variable(i))
        }), this.accumulatedMeanGrads[r] == null && this.centered && (this.accumulatedMeanGrads[r] = {
          originalName: `${s}/mg`,
          variable: q(() => qe(o).variable(i))
        });
        const a = Array.isArray(e) ? e[r].tensor : e[s];
        if (a == null) return;
        const l = this.accumulatedMeanSquares[r].variable, c = this.accumulatedMoments[r].variable;
        q(() => {
          const u = ae(L(l, this.decay), L(st(a), 1 - this.decay));
          if (this.centered) {
            const h = this.accumulatedMeanGrads[r].variable, d = ae(L(h, this.decay), L(a, 1 - this.decay)), p = Ne(L(a, this.learningRate), Gt(ve(u, ae(st(d), this.epsilon)))), f = ae(L(c, this.momentum), p);
            l.assign(u), h.assign(d), c.assign(f);
            const m = ve(o, f);
            o.assign(m);
          } else {
            const h = ae(L(l, this.decay), L(st(a), 1 - this.decay)), d = ae(L(c, this.momentum), Ne(L(a, this.learningRate), Gt(ae(h, this.epsilon))));
            l.assign(h), c.assign(d);
            const p = ve(o, d);
            o.assign(p);
          }
        });
      }), this.incrementIterations();
    }
    dispose() {
      this.accumulatedMeanSquares != null && Oe(this.accumulatedMeanSquares.map((e) => e.variable)), this.accumulatedMeanGrads != null && this.centered && Oe(this.accumulatedMeanGrads.map((e) => e.variable)), this.accumulatedMoments != null && Oe(this.accumulatedMoments.map((e) => e.variable));
    }
    async getWeights() {
      const e = [
        ...this.accumulatedMeanSquares,
        ...this.accumulatedMoments
      ];
      return this.centered && e.push(...this.accumulatedMeanGrads), [
        await this.saveIterations()
      ].concat(e.map((n) => ({
        name: n.originalName,
        tensor: n.variable
      })));
    }
    async setWeights(e) {
      e = await this.extractIterations(e);
      const n = this.centered ? e.length / 3 : e.length / 2, s = false;
      this.accumulatedMeanSquares = e.slice(0, n).map((r) => ({
        originalName: r.name,
        variable: r.tensor.variable(s)
      })), this.accumulatedMoments = e.slice(n, n * 2).map((r) => ({
        originalName: r.name,
        variable: r.tensor.variable(s)
      })), this.centered && (this.accumulatedMeanGrads = e.slice(n * 2, n * 3).map((r) => ({
        originalName: r.name,
        variable: r.tensor.variable(s)
      })));
    }
    getConfig() {
      return {
        learningRate: this.learningRate,
        decay: this.decay,
        momentum: this.momentum,
        epsilon: this.epsilon,
        centered: this.centered
      };
    }
    static fromConfig(e, n) {
      return new e(n.learningRate, n.decay, n.momentum, n.epsilon, n.centered);
    }
  }
  const uV = [
    xx,
    wx,
    vx,
    Sx,
    $x,
    Cx,
    cm
  ];
  function hV() {
    for (const t of uV) le(t);
  }
  const dV = "model", pV = ".json", fV = ".weights.bin";
  function Iv(t) {
    return new Promise((e) => setTimeout(e)).then(t);
  }
  class ai {
    constructor(e) {
      if (!j().getBool("IS_BROWSER")) throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
      e.startsWith(ai.URL_SCHEME) && (e = e.slice(ai.URL_SCHEME.length)), (e == null || e.length === 0) && (e = dV), this.modelJsonFileName = e + pV, this.weightDataFileName = e + fV;
    }
    async save(e) {
      if (typeof document > "u") throw new Error("Browser downloads are not supported in this environment since `document` is not present");
      const n = Ps.join(e.weightData), s = window.URL.createObjectURL(new Blob([
        n
      ], {
        type: "application/octet-stream"
      }));
      if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
      {
        const r = [
          {
            paths: [
              "./" + this.weightDataFileName
            ],
            weights: e.weightSpecs
          }
        ], o = sI(e, r), i = window.URL.createObjectURL(new Blob([
          JSON.stringify(o)
        ], {
          type: "application/json"
        })), a = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
        if (a.download = this.modelJsonFileName, a.href = i, await Iv(() => a.dispatchEvent(new MouseEvent("click"))), e.weightData != null) {
          const l = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
          l.download = this.weightDataFileName, l.href = s, await Iv(() => l.dispatchEvent(new MouseEvent("click")));
        }
        return {
          modelArtifactsInfo: Bu(e)
        };
      }
    }
  }
  ai.URL_SCHEME = "downloads://";
  class mV {
    constructor(e) {
      if (e == null || e.length < 1) throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);
      this.jsonFile = e[0], this.weightsFiles = e.slice(1);
    }
    async load() {
      return new Promise((e, n) => {
        const s = new FileReader();
        s.onload = (r) => {
          const o = JSON.parse(r.target.result), i = o.modelTopology;
          if (i == null) {
            n(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
            return;
          }
          if (o.weightsManifest == null) {
            n(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
            return;
          }
          if (this.weightsFiles.length === 0) {
            e({
              modelTopology: i
            });
            return;
          }
          const l = pb(o, (c) => this.loadWeights(c));
          e(l);
        }, s.onerror = (r) => n(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), s.readAsText(this.jsonFile);
      });
    }
    loadWeights(e) {
      const n = [], s = [];
      for (const i of e) n.push(...i.weights), s.push(...i.paths);
      const r = this.checkManifestAndWeightFiles(e), o = s.map((i) => this.loadWeightsFile(i, r[i]));
      return Promise.all(o).then((i) => [
        n,
        i
      ]);
    }
    loadWeightsFile(e, n) {
      return new Promise((s, r) => {
        const o = new FileReader();
        o.onload = (i) => {
          const a = i.target.result;
          s(a);
        }, o.onerror = (i) => r(`Failed to weights data from file of path '${e}'.`), o.readAsArrayBuffer(n);
      });
    }
    checkManifestAndWeightFiles(e) {
      const n = [], s = this.weightsFiles.map((o) => fv(o.name)), r = {};
      for (const o of e) o.paths.forEach((i) => {
        const a = fv(i);
        if (n.indexOf(a) !== -1) throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);
        if (n.push(a), s.indexOf(a) === -1) throw new Error(`Weight file with basename '${a}' is not provided.`);
        r[i] = this.weightsFiles[s.indexOf(a)];
      });
      if (n.length !== this.weightsFiles.length) throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${this.weightsFiles.length}).`);
      return r;
    }
  }
  const gV = (t) => j().getBool("IS_BROWSER") && !Array.isArray(t) && t.startsWith(ai.URL_SCHEME) ? yV(t.slice(ai.URL_SCHEME.length)) : null;
  ft.registerSaveRouter(gV);
  function yV(t = "model") {
    return new ai(t);
  }
  function bV(t) {
    return new mV(t);
  }
  function Nv(t, e, n, s) {
    i(t), n = n ?? 0, s = s ?? 1, a(n, s);
    let r = 0;
    const o = (l) => (l.then((c) => {
      const u = n + ++r / t.length * (s - n);
      return e(u), c;
    }), l);
    function i(l) {
      C(l != null && Array.isArray(l) && l.length > 0, () => "promises must be a none empty array");
    }
    function a(l, c) {
      C(l >= 0 && l <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${l}`), C(c >= 0 && c <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${c}`), C(c >= l, () => `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${c}`);
    }
    return Promise.all(t.map(o));
  }
  async function bN(t, e) {
    e == null && (e = {});
    const n = e.fetchFunc == null ? j().platform.fetch : e.fetchFunc, s = t.map((h) => n(h, e.requestInit, {
      isBinary: true
    })), a = (e.onProgress == null ? await Promise.all(s) : await Nv(s, e.onProgress, 0, 0.5)).map((h) => h.arrayBuffer());
    return e.onProgress == null ? await Promise.all(a) : await Nv(a, e.onProgress, 0.5, 1);
  }
  function xV(t, e) {
    var n;
    const s = e.fetchFunc == null ? j().platform.fetch : e.fetchFunc;
    let r = 0, o;
    return (n = e.onProgress) === null || n === void 0 || n.call(e, 0), new ReadableStream({
      pull: async (i) => {
        for (var a; r < t.length; ) {
          o || (o = (await s(t[r], e.requestInit, {
            isBinary: true
          })).body.getReader());
          const { done: l, value: c } = await o.read();
          if (l) {
            r++, o = void 0, (a = e.onProgress) === null || a === void 0 || a.call(e, r / t.length);
            continue;
          }
          i.enqueue(c);
          return;
        }
        i.close();
      }
    });
  }
  async function xN(t, e = "", n, s) {
    return wN((i) => bN(i, {
      requestInit: s
    }))(t, e, n);
  }
  function wN(t) {
    return async (e, n = "", s) => {
      const r = e.map(() => false), o = {}, i = s != null ? s.map(() => false) : [], a = [];
      if (e.forEach((p, f) => {
        let m = 0;
        p.weights.forEach((g) => {
          const y = "quantization" in g ? g.quantization.dtype : g.dtype, b = Qo[y] * X(g.shape), w = () => {
            r[f] = true, o[f] == null && (o[f] = []), o[f].push({
              manifestEntry: g,
              groupOffset: m,
              sizeBytes: b
            });
          };
          s != null ? s.forEach((x, S) => {
            x === g.name && (w(), i[S] = true);
          }) : w(), a.push(g.name), m += b;
        });
      }), !i.every((p) => p)) {
        const p = s.filter((f, m) => !i[m]);
        throw new Error(`Could not find weights in manifest with names: ${p.join(", ")}. 
Manifest JSON has weights with names: ${a.join(", ")}.`);
      }
      const l = r.reduce((p, f, m) => (f && p.push(m), p), []), c = [];
      l.forEach((p) => {
        e[p].paths.forEach((f) => {
          const m = n + (n.endsWith("/") ? "" : "/") + f;
          c.push(m);
        });
      });
      const u = await t(c), h = {};
      let d = 0;
      return l.forEach((p) => {
        const f = e[p].paths.length, m = new Ps(u.slice(d, d + f));
        o[p].forEach((y) => {
          const b = m.slice(y.groupOffset, y.groupOffset + y.sizeBytes), w = ub(b, [
            y.manifestEntry
          ]);
          for (const x in w) h[x] = w[x];
        }), d += f;
      }), h;
    };
  }
  const wV = "application/octet-stream", vV = "application/json";
  class Ix {
    constructor(e, n) {
      if (this.DEFAULT_METHOD = "POST", n == null && (n = {}), this.weightPathPrefix = n.weightPathPrefix, this.weightUrlConverter = n.weightUrlConverter, n.fetchFunc != null ? (C(typeof n.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = n.fetchFunc) : this.fetch = j().platform.fetch, C(e != null && e.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(e) && C(e.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${e.length}).`), this.path = e, n.requestInit != null && n.requestInit.body != null) throw new Error("requestInit is expected to have no pre-existing body, but has one.");
      this.requestInit = n.requestInit || {}, this.loadOptions = n;
    }
    async save(e) {
      if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
      const n = Object.assign({
        method: this.DEFAULT_METHOD
      }, this.requestInit);
      n.body = new FormData();
      const s = [
        {
          paths: [
            "./model.weights.bin"
          ],
          weights: e.weightSpecs
        }
      ], r = sI(e, s);
      if (n.body.append("model.json", new Blob([
        JSON.stringify(r)
      ], {
        type: vV
      }), "model.json"), e.weightData != null) {
        const i = Ps.join(e.weightData);
        n.body.append("model.weights.bin", new Blob([
          i
        ], {
          type: wV
        }), "model.weights.bin");
      }
      const o = await this.fetch(this.path, n);
      if (o.ok) return {
        modelArtifactsInfo: Bu(e),
        responses: [
          o
        ]
      };
      throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${o.status}.`);
    }
    async loadModelJSON() {
      const e = await this.fetch(this.path, this.requestInit);
      if (!e.ok) throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);
      let n;
      try {
        n = await e.json();
      } catch {
        let i = `Failed to parse model JSON of response from ${this.path}.`;
        throw this.path.endsWith(".pb") ? i += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : i += " Please make sure the server is serving valid JSON for this request.", new Error(i);
      }
      const s = n.modelTopology, r = n.weightsManifest;
      if (s == null && r == null) throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
      return n;
    }
    async load() {
      if (this.loadOptions.streamWeights) return this.loadStream();
      const e = await this.loadModelJSON();
      return pb(e, (n) => this.loadWeights(n));
    }
    async loadStream() {
      const e = await this.loadModelJSON(), n = await this.getWeightUrls(e.weightsManifest), s = Ed(e.weightsManifest), r = () => xV(n, this.loadOptions);
      return Object.assign(Object.assign({}, e), {
        weightSpecs: s,
        getWeightStream: r
      });
    }
    async getWeightUrls(e) {
      const n = Array.isArray(this.path) ? this.path[1] : this.path, [s, r] = SV(n), o = this.weightPathPrefix || s, i = [], a = [];
      for (const l of e) for (const c of l.paths) this.weightUrlConverter != null ? a.push(this.weightUrlConverter(c)) : i.push(o + c + r);
      return this.weightUrlConverter && i.push(...await Promise.all(a)), i;
    }
    async loadWeights(e) {
      const n = await this.getWeightUrls(e), s = Ed(e), r = await bN(n, this.loadOptions);
      return [
        s,
        r
      ];
    }
  }
  Ix.URL_SCHEME_REGEX = /^https?:\/\//;
  function SV(t) {
    const e = t.lastIndexOf("/"), n = t.lastIndexOf("?"), s = t.substring(0, e), r = n > e ? t.substring(n) : "";
    return [
      s + "/",
      r
    ];
  }
  function Qg(t) {
    return t.match(Ix.URL_SCHEME_REGEX) != null;
  }
  const vN = (t, e) => {
    if (typeof fetch > "u" && (e == null || e.fetchFunc == null)) return null;
    {
      let n = true;
      if (Array.isArray(t) ? n = t.every((s) => Qg(s)) : n = Qg(t), n) return Nx(t, e);
    }
    return null;
  };
  ft.registerSaveRouter(vN);
  ft.registerLoadRouter(vN);
  function Nx(t, e) {
    return new Ix(t, e);
  }
  function SN(t, e) {
    return Nx(t, e);
  }
  class ag {
    constructor(e) {
      this.modelArtifacts = e;
    }
    load() {
      return this.modelArtifacts;
    }
  }
  class $N {
    constructor(e) {
      this.saveHandler = e;
    }
    save(e) {
      return this.saveHandler(e);
    }
  }
  class $V {
    constructor(e) {
      e.load && (this.load = () => Promise.resolve(e.load())), e.save && (this.save = (n) => Promise.resolve(e.save(n)));
    }
  }
  function CV(t, e, n, s) {
    const r = arguments;
    return new $V(Ad(...r));
  }
  function Ad(t, e, n, s) {
    return arguments.length === 1 ? t.modelTopology != null || t.weightSpecs != null ? new ag(t) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new ag({
      modelTopology: t
    })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new ag({
      modelTopology: t,
      weightSpecs: e,
      weightData: n,
      trainingConfig: s
    }));
  }
  function IV(t) {
    return new $N(t);
  }
  function NV(t) {
    return new $N(t);
  }
  const kx = Object.freeze(Object.defineProperty({
    __proto__: null,
    CompositeArrayBuffer: Ps,
    browserFiles: bV,
    browserHTTPRequest: SN,
    concatenateArrayBuffers: nI,
    copyModel: rL,
    decodeWeights: ub,
    decodeWeightsStream: tI,
    encodeWeights: Hg,
    fromMemory: CV,
    fromMemorySync: Ad,
    getLoadHandlers: oI,
    getModelArtifactsForJSON: pb,
    getModelArtifactsForJSONSync: db,
    getModelArtifactsInfoForJSON: Bu,
    getSaveHandlers: rI,
    getWeightSpecs: Ed,
    http: Nx,
    isHTTPScheme: Qg,
    listModels: nL,
    loadWeights: xN,
    moveModel: oL,
    registerLoadRouter: GF,
    registerSaveRouter: UF,
    removeModel: sL,
    weightsLoaderFactory: wN,
    withSaveHandler: IV,
    withSaveHandlerSync: NV
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  function kV(t, e, n) {
    const s = T(t, "labels", "confusionMatrix"), r = T(e, "predictions", "confusionMatrix");
    C(n == null || n > 0 && Number.isInteger(n), () => `If provided, numClasses must be a positive integer, but got ${n}`), C(s.rank === 1, () => `Expected the rank of labels to be 1, but got ${s.rank}`), C(r.rank === 1, () => `Expected the rank of predictions to be 1, but got ${r.rank}`), C(s.shape[0] === r.shape[0], () => `Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`), C(n > 0 && Number.isInteger(n), () => `numClasses is required to be a positive integer, but got ${n}`);
    const o = ta(ge(s, "int32"), n), i = ta(ge(r, "int32"), n), a = He(o), l = Be(a, i);
    return ge(l, "int32");
  }
  const TV = O({
    confusionMatrix_: kV
  });
  const EV = Object.freeze(Object.defineProperty({
    __proto__: null,
    confusionMatrix: TV
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  let Ao, kv = false;
  function CN(t, e = 3) {
    if (e > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
    if (t == null) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
    let n = false, s = false, r = false, o = false, i = false, a = false;
    if (t.data instanceof Uint8Array) n = true;
    else if (typeof ImageData < "u" && t instanceof ImageData) s = true;
    else if (typeof HTMLVideoElement < "u" && t instanceof HTMLVideoElement) r = true;
    else if (typeof HTMLImageElement < "u" && t instanceof HTMLImageElement) o = true;
    else if (t.getContext != null) i = true;
    else if (typeof ImageBitmap < "u" && t instanceof ImageBitmap) a = true;
    else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${t.constructor.name}`);
    if (yc(kd, D.backendName) != null) {
      const f = {
        pixels: t
      }, m = {
        numChannels: e
      };
      return D.runKernel(kd, f, m);
    }
    const [c, u] = r ? [
      t.videoWidth,
      t.videoHeight
    ] : [
      t.width,
      t.height
    ];
    let h;
    if (i) h = t.getContext("2d").getImageData(0, 0, c, u).data;
    else if (s || n) h = t.data;
    else if (o || r || a) {
      if (Ao == null) if (typeof document > "u") if (typeof OffscreenCanvas < "u" && typeof OffscreenCanvasRenderingContext2D < "u") Ao = new OffscreenCanvas(1, 1).getContext("2d");
      else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
      else Ao = document.createElement("canvas").getContext("2d", {
        willReadFrequently: true
      });
      Ao.canvas.width = c, Ao.canvas.height = u, Ao.drawImage(t, 0, 0, c, u), h = Ao.getImageData(0, 0, c, u).data;
    }
    let d;
    if (e === 4) d = new Int32Array(h);
    else {
      const f = c * u;
      d = new Int32Array(f * e);
      for (let m = 0; m < f; m++) for (let g = 0; g < e; ++g) d[m * e + g] = h[m * 4 + g];
    }
    return lx(d, [
      u,
      c,
      e
    ], "int32");
  }
  function RV(t) {
    return t != null && t.data instanceof Uint8Array;
  }
  function AV() {
    return typeof window < "u" && typeof ImageBitmap < "u" && window.hasOwnProperty("createImageBitmap");
  }
  function _V(t) {
    return t != null && t.width !== 0 && t.height !== 0;
  }
  function DV(t) {
    return AV() && !(t instanceof ImageBitmap) && _V(t) && !RV(t);
  }
  async function OV(t, e = 3) {
    let n = null;
    if (j().getBool("WRAP_TO_IMAGEBITMAP") && DV(t)) {
      let s;
      try {
        s = await createImageBitmap(t, {
          premultiplyAlpha: "none"
        });
      } catch {
        s = null;
      }
      s != null && s.width === t.width && s.height === t.height ? n = s : n = t;
    } else n = t;
    return CN(n, e);
  }
  function IN(t) {
    if (t.rank !== 2 && t.rank !== 3) throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${t.rank}.`);
    const e = t.rank === 2 ? 1 : t.shape[2];
    if (e > 4 || e === 2) throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${e}`);
    if (t.dtype !== "float32" && t.dtype !== "int32") throw new Error(`Unsupported type for toPixels: ${t.dtype}. Please use float32 or int32 tensors.`);
  }
  function FV(t) {
    const e = (t == null ? void 0 : t.alpha) || 1;
    if (e > 1 || e < 0) throw new Error(`Alpha value ${e} is suppoed to be in range [0 - 1].`);
  }
  async function LV(t, e) {
    let n = T(t, "img", "toPixels");
    if (!(t instanceof Xe)) {
      const c = n;
      n = ge(c, "int32"), c.dispose();
    }
    IN(n);
    const [s, r] = n.shape.slice(0, 2), o = n.rank === 2 ? 1 : n.shape[2], i = await n.data(), a = n.dtype === "float32" ? 255 : 1, l = new Uint8ClampedArray(r * s * 4);
    for (let c = 0; c < s * r; ++c) {
      const u = [
        0,
        0,
        0,
        255
      ];
      for (let d = 0; d < o; d++) {
        const p = i[c * o + d];
        if (n.dtype === "float32") {
          if (p < 0 || p > 1) throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${p}.`);
        } else if (n.dtype === "int32" && (p < 0 || p > 255)) throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${p}.`);
        o === 1 ? (u[0] = p * a, u[1] = p * a, u[2] = p * a) : u[d] = p * a;
      }
      const h = c * 4;
      l[h + 0] = Math.round(u[0]), l[h + 1] = Math.round(u[1]), l[h + 2] = Math.round(u[2]), l[h + 3] = Math.round(u[3]);
    }
    if (e != null) {
      kv || yc(Lp, D.backendName) != null && (console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."), kv = true), e.width = r, e.height = s;
      const c = e.getContext("2d"), u = new ImageData(l, r, s);
      c.putImageData(u, 0, 0);
    }
    return n !== t && n.dispose(), l;
  }
  function PV(t, e, n) {
    let s = T(t, "img", "draw");
    if (!(t instanceof Xe)) {
      const i = s;
      s = ge(i, "int32"), i.dispose();
    }
    IN(s), FV(n == null ? void 0 : n.imageOptions);
    const r = {
      image: s
    }, o = {
      canvas: e,
      options: n
    };
    D.runKernel(Lp, r, o);
  }
  const NN = O({
    fromPixels_: CN
  }), zV = Object.freeze(Object.defineProperty({
    __proto__: null,
    draw: PV,
    fromPixels: NN,
    fromPixelsAsync: OV,
    toPixels: LV
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  um = function(t, e) {
    const n = t.shape.length, s = e.shape.length;
    if (n < 1) throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);
    if (s < 1) throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);
    if (e.dtype !== "int32") throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);
    if (e.shape[s - 1] > n) throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[s - 1]} vs. ${n}`);
    if (X(t.shape) === 0) throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);
    const r = e.shape, o = r[r.length - 1];
    let i = 1;
    for (let h = 0; h < r.length - 1; ++h) i *= r[h];
    const a = t.shape, l = r.slice();
    l.pop();
    let c = 1;
    for (let h = o; h < n; ++h) c *= a[h], l.push(a[h]);
    const u = [
      ...Ee(t.shape).map((h) => h / c),
      1
    ].slice(0, o);
    return [
      l,
      i,
      c,
      u
    ];
  };
  const MV = Object.freeze(Object.defineProperty({
    __proto__: null,
    prepareAndValidate: um
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const ey = -2, BV = -1;
  Tx = function(t, e, n) {
    const s = t.shape.length;
    C(s === e.length, () => `Error in slice${s}D: Length of begin ${e} must match the rank of the array (${s}).`), C(s === n.length, () => `Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`);
    for (let r = 0; r < s; ++r) C(e[r] + n[r] <= t.shape[r], () => `Error in slice${s}D: begin[${r}] + size[${r}] (${e[r] + n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`);
  };
  function VV(t) {
    const e = [];
    let n = 0;
    for (; t > 0; ) t & 1 && e.push(n), t /= 2, n++;
    return e;
  }
  Ex = function(t, e, n) {
    const s = [];
    for (let r = 0; r < t.length; r++) s[r] = Math.ceil((e[r] - t[r]) / n[r]);
    return s;
  };
  function kN(t, e, n, s) {
    const r = [
      ...t
    ];
    for (let o = r.length; o < s.length; o++) r.push(1);
    for (let o = 0; o < n; o++) o === 0 ? r[e] = 1 : (r.splice(e, 0, 1), r.pop());
    return r;
  }
  function TN(t, e, n) {
    return n <= t ? n : n - (e - 1);
  }
  function EN(t, e) {
    const n = [];
    for (let s = 0; s < t; s++) n.push(e + s);
    return n;
  }
  function WV(t, e, n, s, r, o, i, a, l) {
    const c = t.length;
    let u = new Array(c), h = new Array(c), d = new Array(c);
    if (e.length && n > 0) {
      const p = e[0], f = n + 1;
      u = RN(i, p, f, s, t), h = AN(a, p, f, r, t), d = kN(o, p, f, t);
    } else for (let p = 0; p < c; p++) u[p] = DN(i, s, o, t, p, l), h[p] = ON(a, r, o, t, p, l), d[p] = _N(o, p, l);
    return {
      begin: u,
      end: h,
      strides: d
    };
  }
  function RN(t, e, n, s, r) {
    const o = [
      ...r
    ], i = EN(n, e);
    for (let a = 0; a < o.length; a++) if (i.indexOf(a) > -1) o[a] = 0;
    else {
      const l = TN(e, n, a);
      let c = s[l];
      t & 1 << l && (c = 0), o[a] = c;
    }
    return o;
  }
  function AN(t, e, n, s, r) {
    const o = [
      ...r
    ], i = EN(n, e);
    for (let a = 0; a < o.length; a++) if (i.indexOf(a) > -1) o[a] = Number.MAX_SAFE_INTEGER;
    else {
      const l = TN(e, n, a);
      let c = s[l];
      t & 1 << l && (c = Number.MAX_SAFE_INTEGER), o[a] = c;
    }
    for (let a = 0; a < o.length; a++) {
      const l = r[a];
      o[a] < 0 && (o[a] += l), o[a] = ro(0, o[a], r[a]);
    }
    return o;
  }
  function _N(t, e, n) {
    let s = t[e];
    return (n & 1 << e || s == null) && (s = 1), s;
  }
  function DN(t, e, n, s, r, o) {
    let i = e[r];
    const a = n[r] || 1;
    (t & 1 << r || o & 1 << r || i == null) && (a > 0 ? i = Number.MIN_SAFE_INTEGER : i = Number.MAX_SAFE_INTEGER);
    const l = s[r];
    return i < 0 && (i += l), i = ro(0, i, l - 1), i;
  }
  function ON(t, e, n, s, r, o) {
    let i = e[r];
    const a = n[r] || 1;
    (t & 1 << r || o & 1 << r || i == null) && (a > 0 ? i = Number.MAX_SAFE_INTEGER : i = Number.MIN_SAFE_INTEGER);
    const l = s[r];
    return i < 0 && (i += l), a > 0 ? i = ro(0, i, l) : i = ro(-1, i, l - 1), i;
  }
  Rx = function(t, e, n) {
    let s = n.length;
    for (let r = 0; r < n.length; r++) if (n[r] > 1) {
      s = r;
      break;
    }
    for (let r = s + 1; r < n.length; r++) if (e[r] > 0 || n[r] !== t[r]) return false;
    return true;
  };
  Ax = function(t, e) {
    let n = t.length > 0 ? t[t.length - 1] : 1;
    for (let s = 0; s < t.length - 1; s++) n += t[s] * e[s];
    return n;
  };
  hm = function(t, e, n) {
    let s;
    const r = t.shape.length;
    typeof e == "number" ? s = [
      e,
      ...new Array(r - 1).fill(0)
    ] : e.length < r ? s = e.concat(new Array(r - e.length).fill(0)) : s = e.slice(), s.forEach((i) => {
      C(i !== -1, () => "slice() does not support negative begin indexing.");
    });
    let o;
    return n == null ? o = new Array(r).fill(-1) : typeof n == "number" ? o = [
      n,
      ...new Array(r - 1).fill(-1)
    ] : n.length < r ? o = n.concat(new Array(r - n.length).fill(-1)) : o = n, o = o.map((i, a) => i >= 0 ? i : (C(i === -1, () => `Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`), t.shape[a] - s[a])), [
      s,
      o
    ];
  };
  _x = function(t, e, n, s, r, o, i, a, l) {
    let c;
    if (s == null ? (c = new Array(e.length), c.fill(1)) : c = s, i != null && (i & i - 1) !== 0) throw new Error("Multiple ellipses in slice is not allowed.");
    let u = false;
    const h = {
      dims: c.length,
      numAddAxisAfterEllipsis: 0,
      begin: e.slice(),
      end: n.slice(),
      strides: c.slice(),
      beginMask: r,
      endMask: o,
      ellipsisMask: i,
      newAxisMask: a,
      shrinkAxisMask: l
    };
    for (let w = 0; w < h.dims; w++) u && (1 << w & a) !== 0 && h.numAddAxisAfterEllipsis++, 1 << w & i && (u = true);
    u || (h.ellipsisMask |= 1 << h.dims, h.dims++);
    const d = {
      dims: t.length,
      beginMask: 0,
      endMask: 0,
      beginValid: false,
      endValid: false
    };
    UV(h, d);
    let p = true, f = true, m = true;
    const g = [], y = [];
    for (let w = 0; w < t.length; ++w) {
      if (d.strides[w] === 0) throw Error(`strides[${w}] must be non-zero`);
      const x = !!(d.shrinkAxisMask & 1 << w), S = t[w];
      if (S === -1) {
        g.push(x ? 1 : -1);
        continue;
      }
      const I = [
        d.beginMask & 1 << w,
        d.endMask & 1 << w
      ], E = [
        d.strides[w] > 0 ? 0 : -1,
        d.strides[w] > 0 ? S : S - 1
      ];
      if (x && d.strides[w] <= 0) throw Error("only stride 1 allowed on non-range indexing.");
      m = m && d.strides[w] === 1;
      const R = !!(d.beginMask & 1 << w && d.endMask & 1 << w);
      if (d.beginValid && d.endValid) {
        if (x) {
          const F = d.begin[w] < 0 ? S + d.begin[w] : d.begin[w];
          if (d.begin[w] = F, d.end[w] = d.begin[w] + 1, F < 0 || F >= S) throw Error(`slice index ${d.begin[w]} of dimension ${w} out of bounds.`);
        } else d.begin[w] = Tv(d.begin[w], 0, d.strides[w], S, I, E), d.end[w] = Tv(d.end[w], 1, d.strides[w], S, I, E);
        const $ = d.strides[w] === 1 && d.begin[w] === 0 && d.end[w] === S;
        p = p && $, f = f && (w === 0 && d.strides[w] === 1 || $);
      } else p = p && d.strides[w] === 1 && R, f = f && (w === 0 && d.strides[w] === 1 || R);
      let N, k = false;
      if (d.beginValid && d.endValid ? (N = d.end[w] - d.begin[w], k = true) : x ? (N = 1, k = true) : R && S >= 0 && (d.strides[w] < 0 ? N = -S : N = S, k = true), k) {
        let $;
        N === 0 || N < 0 != d.strides[w] < 0 ? $ = 0 : $ = Math.trunc(N / d.strides[w]) + (N % d.strides[w] !== 0 ? 1 : 0), g.push($);
      } else g.push(-1);
    }
    for (let w = 0; w < d.finalShapeGatherIndices.length; ++w) {
      const x = d.finalShapeGatherIndices[w];
      x >= 0 ? y.push(g[x]) : x === ey && y.push(1);
    }
    return {
      finalShapeSparse: y.filter((w, x) => d.finalShapeGatherIndices[x] !== ey),
      finalShape: y,
      isIdentity: p,
      sliceDim0: f,
      isSimpleSlice: m,
      begin: d.begin,
      end: d.end,
      strides: d.strides
    };
  };
  function UV(t, e) {
    e.beginMask = 0, e.endMask = 0, e.shrinkAxisMask = 0;
    let n = 0;
    e.beginValid = t.begin != null, e.endValid = t.end != null, e.begin = new Array(e.dims), e.end = new Array(e.dims), e.strides = new Array(e.dims), e.finalShapeGatherIndices = [], e.finalShapeGatherIndicesSparse = [], e.inputShapeGatherIndicesSparse = new Array(e.dims);
    for (let s = 0; s < t.dims; s++) if (1 << s & t.ellipsisMask) {
      const r = Math.min(e.dims - (t.dims - s) + 1 + t.numAddAxisAfterEllipsis, e.dims);
      for (; n < r; n++) e.begin[n] = 0, e.end[n] = 0, e.strides[n] = 1, e.beginMask |= 1 << n, e.endMask |= 1 << n, e.finalShapeGatherIndices.push(n), e.finalShapeGatherIndicesSparse.push(-1), e.inputShapeGatherIndicesSparse[n] = s;
    } else if (1 << s & t.newAxisMask) e.finalShapeGatherIndices.push(ey), e.finalShapeGatherIndicesSparse.push(-1);
    else {
      if (n === e.begin.length) throw Error(`Index out of range using input dim ${n}; input has only ${e.dims} dims, ${e.begin.length}.`);
      t.begin != null && (e.begin[n] = t.begin[s]), t.end != null && (e.end[n] = t.end[s]), e.strides[n] = t.strides[s], t.beginMask & 1 << s && (e.beginMask |= 1 << n), t.endMask & 1 << s && (e.endMask |= 1 << n), t.shrinkAxisMask & 1 << s ? (e.finalShapeGatherIndices.push(BV), e.finalShapeGatherIndicesSparse.push(-1), e.shrinkAxisMask |= 1 << n) : (e.finalShapeGatherIndices.push(n), e.finalShapeGatherIndicesSparse.push(s)), e.inputShapeGatherIndicesSparse[n] = s, n++;
    }
  }
  function Tv(t, e, n, s, r, o) {
    if (r[e]) return n > 0 ? o[e] : o[e + 1 & 1];
    {
      const i = t < 0 ? s + t : t;
      return i < o[0] ? o[0] : i > o[1] ? o[1] : i;
    }
  }
  const FN = Object.freeze(Object.defineProperty({
    __proto__: null,
    assertParamsValid: Tx,
    computeFlatOffset: Ax,
    computeOutShape: Ex,
    getNormalizedAxes: WV,
    isSliceContinous: Rx,
    maskToAxes: VV,
    parseSliceParams: hm,
    sliceInfo: _x,
    startForAxis: DN,
    startIndicesWithElidedDims: RN,
    stopForAxis: ON,
    stopIndicesWithElidedDims: AN,
    stridesForAxis: _N,
    stridesWithElidedDims: kN
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const LN = "4.19.0";
  class PN {
    static sgd(e) {
      return new cm(e);
    }
    static momentum(e, n, s = false) {
      return new $x(e, n, s);
    }
    static rmsprop(e, n = 0.9, s = 0, r = null, o = false) {
      return new Cx(e, n, s, r, o);
    }
    static adam(e = 1e-3, n = 0.9, s = 0.999, r = null) {
      return new vx(e, n, s, r);
    }
    static adadelta(e = 1e-3, n = 0.95, s = null) {
      return new xx(e, n, s);
    }
    static adamax(e = 2e-3, n = 0.9, s = 0.999, r = null, o = 0) {
      return new Sx(e, n, s, r, o);
    }
    static adagrad(e, n = 0.1) {
      return new wx(e, n);
    }
  }
  const Fo = PN;
  const GV = typeof requestAnimationFrame < "u" ? requestAnimationFrame : typeof setImmediate < "u" ? setImmediate : (t) => t();
  function Dx() {
    return new Promise((t) => GV(() => t()));
  }
  Ox = function(t, e) {
    const n = t[0].length;
    t.forEach((r, o) => {
      C(r.length === n, () => `Error in concat${n}D: rank of tensors[${o}] must be the same as the rank of the rest (${n})`);
    }), C(e >= 0 && e < n, () => `Error in concat${n}D: axis must be between 0 and ${n - 1}.`);
    const s = t[0];
    t.forEach((r, o) => {
      for (let i = 0; i < n; i++) C(i === e || r[i] === s[i], () => `Error in concat${n}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`);
    });
  };
  tr = function(t, e) {
    const n = t[0].slice();
    for (let s = 1; s < t.length; s++) n[e] += t[s][e];
    return n;
  };
  var Is;
  (function(t) {
    t[t.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", t[t.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", t[t.ROW_LENGTHS = 2] = "ROW_LENGTHS", t[t.ROW_SPLITS = 3] = "ROW_SPLITS", t[t.ROW_LIMITS = 4] = "ROW_LIMITS", t[t.ROW_STARTS = 5] = "ROW_STARTS";
  })(Is || (Is = {}));
  function zN(t, e, n) {
    let s = new Array();
    if (n == null && e == null) return s;
    if (e == null) for (; s.length < t + n.length; ) s.push(-1);
    else s = e.slice();
    if (n == null) return s;
    if (t + n.length !== s.length) throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.rank = ${t + n.length}, but shape.rank = ${s.length}`);
    for (let r = 1; r < n.length; ++r) {
      const o = n[r], i = s[s.length - n.length + r], a = s[i];
      if (o >= 0) if (a >= 0) {
        if (a !== o) throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.shape[${r + t}] = ${o} but shape[${r + t}] = ${a}`);
      } else s[i] = o;
    }
    return s;
  }
  function MN(t) {
    const e = {
      FIRST_DIM_SIZE: Is.FIRST_DIM_SIZE,
      VALUE_ROWIDS: Is.VALUE_ROWIDS,
      ROW_LENGTHS: Is.ROW_LENGTHS,
      ROW_SPLITS: Is.ROW_SPLITS,
      ROW_LIMITS: Is.ROW_LIMITS,
      ROW_STARTS: Is.ROW_STARTS
    }, n = [];
    for (const s of t) if (s in e) n.push(e[s]);
    else break;
    return n;
  }
  function BN(t) {
    return t.length === 0 ? 0 : t[0] === Is.FIRST_DIM_SIZE ? t.length - 1 : t.length;
  }
  function VN(t, e) {
    if (t == null || e == null) return;
    const n = t.length, s = e.length;
    if (n >= s) throw new Error(`defaultValue.shape=${t} and ragged tensor flatValues.shape=${e}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);
    for (let r = 0; r < Math.min(n, s - 1); ++r) {
      const o = t[r], i = e[r + 1];
      if (o >= 0 && i >= 0 && o !== 1 && o !== i) throw new Error(`defaultValue.shape=${t}, and ragged tensor input flatValues.shape=${e} are incompatible: defaultValue.shape[${r - t.length}] = ${o} but ragged tensor input.flatValues.shape[${r - t.length}] = ${i}`);
    }
  }
  const Fx = 30;
  function dm(t) {
    return t <= Fx ? t : Cd(t, Math.floor(Math.sqrt(t)));
  }
  Lx = function(t, e, n) {
    const s = n * (typeof t == "number" ? t : t[0]), r = e * (typeof t == "number" ? t : t[1]);
    return [
      s,
      r
    ];
  };
  oh = function(t, e, n, s = true) {
    let r = [];
    if (s) r = r.concat(e.slice(0)), r.push(t[0] / n), r = r.concat(t.slice(1));
    else {
      r = r.concat(t[0]);
      const o = e.length;
      for (let i = 0; i < o; ++i) r = r.concat([
        t[i + 1] / e[i],
        e[i]
      ]);
      r = r.concat(t.slice(o + 1));
    }
    return r;
  };
  ih = function(t, e, n = true) {
    const s = [];
    if (n) {
      s.push(e);
      for (let r = e + 1; r < t; ++r) r <= 2 * e ? (s.push(r), s.push(r - (e + 1))) : s.push(r);
    } else {
      const r = [], o = [];
      for (let i = 1; i < t; ++i) i >= e * 2 + 1 || i % 2 === 1 ? o.push(i) : r.push(i);
      s.push(...r), s.push(0), s.push(...o);
    }
    return s;
  };
  ah = function(t, e, n, s = true) {
    const r = [];
    s ? r.push(t[0] / n) : r.push(t[0] * n);
    for (let o = 1; o < t.length; ++o) o <= e.length ? s ? r.push(e[o - 1] * t[o]) : r.push(t[o] / e[o - 1]) : r.push(t[o]);
    return r;
  };
  Px = function(t, e) {
    const n = [
      0
    ];
    for (let s = 0; s < e; ++s) n.push(t[s][0]);
    return n;
  };
  zx = function(t, e, n) {
    const s = t.slice(0, 1);
    for (let r = 0; r < n; ++r) s.push(t[r + 1] - e[r][0] - e[r][1]);
    return s;
  };
  pm = 1.7580993408473768;
  fm = 1.0507009873554805;
  Mx = 0.3275911;
  Bx = 0.254829592;
  Vx = -0.284496736;
  Wx = 1.421413741;
  Ux = -1.453152027;
  Gx = 1.061405429;
  Tr = function(t, e) {
    if (t.length !== e.length) throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);
    const n = new Float32Array(t.length * 2);
    for (let s = 0; s < n.length; s += 2) n[s] = t[s / 2], n[s + 1] = e[s / 2];
    return n;
  };
  function WN(t) {
    const e = new Float32Array(t.length / 2), n = new Float32Array(t.length / 2);
    for (let s = 0; s < t.length; s += 2) e[s / 2] = t[s], n[s / 2] = t[s + 1];
    return {
      real: e,
      imag: n
    };
  }
  function UN(t) {
    const e = Math.ceil(t.length / 4), n = new Float32Array(e), s = new Float32Array(e);
    for (let r = 0; r < t.length; r += 4) n[Math.floor(r / 4)] = t[r], s[Math.floor(r / 4)] = t[r + 1];
    return {
      real: n,
      imag: s
    };
  }
  function GN(t) {
    const e = Math.floor(t.length / 4), n = new Float32Array(e), s = new Float32Array(e);
    for (let r = 2; r < t.length; r += 4) n[Math.floor(r / 4)] = t[r], s[Math.floor(r / 4)] = t[r + 1];
    return {
      real: n,
      imag: s
    };
  }
  function Hx(t, e) {
    const n = t[e * 2], s = t[e * 2 + 1];
    return {
      real: n,
      imag: s
    };
  }
  function HN(t, e, n, s) {
    t[s * 2] = e, t[s * 2 + 1] = n;
  }
  function jN(t, e) {
    const n = new Float32Array(t / 2), s = new Float32Array(t / 2);
    for (let r = 0; r < Math.ceil(t / 2); r++) {
      const o = (e ? 2 : -2) * Math.PI * (r / t);
      n[r] = Math.cos(o), s[r] = Math.sin(o);
    }
    return {
      real: n,
      imag: s
    };
  }
  function qN(t, e, n) {
    const s = (n ? 2 : -2) * Math.PI * (t / e), r = Math.cos(s), o = Math.sin(s);
    return {
      real: r,
      imag: o
    };
  }
  const lg = "->", HV = /->/g, Ev = ",", Rv = "...";
  jx = function(t, e) {
    t = t.replace(/\s/g, "");
    const n = (t.length - t.replace(HV, "").length) / lg.length;
    if (n < 1) throw new Error("Equations without an arrow are not supported.");
    if (n > 1) throw new Error(`Equation must contain exactly one arrow ("${lg}").`);
    const [s, r] = t.split(lg);
    C(s.indexOf(Rv) === -1, () => `The ellipsis notation ("${Rv}") is not supported yet.`);
    const o = s.split(Ev), i = o.length;
    if (e !== i) throw new Error(`Expected ${i} input tensors, received ${e}`);
    if (i > 2) throw new Error("Support for more than 2 input tensors is not implemented yet.");
    const a = [];
    for (let d = 0; d < r.length; ++d) {
      const p = r[d];
      if (!o.some((f) => f.indexOf(p) !== -1)) throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);
      a.indexOf(p) === -1 && a.push(p);
    }
    for (let d = 0; d < s.length; ++d) {
      const p = s[d];
      a.indexOf(p) === -1 && p !== Ev && a.push(p);
    }
    const l = new Array(o.length);
    for (let d = 0; d < i; ++d) {
      if (new Set(o[d].split("")).size !== o[d].length) throw new Error(`Found duplicate axes in input component ${o[d]}. Support for duplicate axes in input is not implemented yet.`);
      l[d] = [];
      for (let p = 0; p < o[d].length; ++p) l[d].push(a.indexOf(o[d][p]));
    }
    const c = a.length, u = r.length, h = [];
    for (let d = u; d < c; ++d) h.push(d);
    return {
      allDims: a,
      summedDims: h,
      idDims: l
    };
  };
  qx = function(t, e) {
    let n = new Array(t);
    n.fill(-1);
    for (let r = 0; r < e.length; ++r) n[e[r]] = r;
    const s = [];
    for (let r = 0; r < t; ++r) n[r] === -1 && s.push(r);
    return n = n.filter((r) => r !== -1), {
      permutationIndices: n,
      expandDims: s
    };
  };
  Kx = function(t, e, n) {
    const s = new Array(t);
    for (let r = 0; r < n.length; ++r) {
      const o = n[r].shape;
      for (let i = 0; i < e[r].length; ++i) s[e[r][i]] === void 0 ? s[e[r][i]] = o[i] : C(s[e[r][i]] === o[i], () => `Expected dimension ${s[e[r][i]]} at axis ${i} of input shaped ${JSON.stringify(o)}, but got dimension ${o[i]}`);
    }
  };
  Xx = function(t, e) {
    const n = t, s = [];
    let r = 0;
    t.length === 0 && n.push(-1), r = t.length + 1;
    for (let i = 0; i < r; ++i) s.push([]);
    const o = [];
    for (let i = 0; i < n.length; ++i) {
      const a = n[i], l = jV(e, a);
      for (const c of l) o.indexOf(c) === -1 && (s[i].push(c), o.push(c));
    }
    return {
      path: n,
      steps: s
    };
  };
  Yx = function(t) {
    return t.every((e, n) => e === n);
  };
  function jV(t, e) {
    const n = [];
    for (let s = 0; s < t.length; ++s) (t[s].length === 0 || t[s].indexOf(e) !== -1 || e === -1) && n.push(s);
    return n;
  }
  Zx = function(t, e, n = 0) {
    let s = [];
    if (typeof e == "number") C(t.shape[n] % e === 0, () => "Number of splits must evenly divide the axis."), s = new Array(e).fill(t.shape[n] / e);
    else {
      const r = e.reduce((i, a) => (a === -1 && (i += 1), i), 0);
      C(r <= 1, () => "There should be only one negative value in split array.");
      const o = e.indexOf(-1);
      if (o !== -1) {
        const i = e.reduce((a, l) => l > 0 ? a + l : a);
        e[o] = t.shape[n] - i;
      }
      C(t.shape[n] === e.reduce((i, a) => i + a), () => "The sum of sizes must match the size of the axis dimension."), s = e;
    }
    return s;
  };
  KN = function(t) {
    return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${t}`;
  };
  XN = function(t, e) {
    return `indices(${t}, 0) is invalid: ${e} < 0`;
  };
  YN = function(t, e, n) {
    return `indices(${t}, 0) is invalid: ${e} >= ${n}`;
  };
  ZN = function(t, e) {
    return `only one output dimension may be -1, not both ${t} and ${e}`;
  };
  JN = function(t, e) {
    return `size ${t} must be non-negative, not ${e}`;
  };
  QN = function() {
    return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
  };
  ek = function(t, e) {
    const n = X(t), s = X(e);
    return `Input to reshape is a SparseTensor with ${n}
  dense values, but the requested shape requires a multiple of ${s}. inputShape=${t} outputShape= ${e}`;
  };
  tk = function(t, e) {
    const n = X(t), s = X(e);
    return `Input to reshape is a tensor with ${n} dense values, but the requested shape has ${s}. inputShape=${t} outputShape=${e}`;
  };
  ty = function() {
    return "segment ids must be >= 0";
  };
  nk = function() {
    return "segment ids are not increasing";
  };
  sk = function(t, e) {
    return `Segment id ${t} out of range [0, ${e}), possibly because segmentIds input is not sorted.`;
  };
  rk = function(t, e, n) {
    return `Bad: indices[${t}] == ${e} out of range [0, ${n})`;
  };
  function ok(t, e) {
    let n = false, s;
    for (t <= Fx ? (s = t, n = true) : s = Cd(t, Math.floor(Math.sqrt(t))); !n; ) s > e || s === t ? n = true : s = Cd(t, s + 1);
    return s;
  }
  ik = function(t, e, n) {
    const s = [], r = t.length;
    for (let o = 0; o < r; o++) o !== e ? s.push(t[o]) : s.push(n);
    return s;
  };
  Jx = function(t, e, n, s) {
    const r = e.shape.length, o = t.shape.length;
    if (s !== 0 && (s < -r || s > r)) throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);
    if (s < 0 && (s += r), s > o) throw new Error(`batchDims (${s}) must be less than rank(x) (
    ${o}).`);
    if (n < s) throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);
    for (let h = 0; h < s; ++h) if (t.shape[h] !== e.shape[h]) throw new Error(`x.shape[${h}]: ${t.shape[h]} should be equal to indices.shape[${h}]: ${e.shape[h]}.`);
    const i = t.shape[n], a = [];
    let l = 1, c = 1, u = 1;
    for (let h = 0; h < s; ++h) a.push(t.shape[h]), l *= t.shape[h];
    for (let h = s; h < n; h++) a.push(t.shape[h]), c *= t.shape[h];
    for (let h = s; h < r; h++) a.push(e.shape[h]);
    for (let h = n + 1; h < o; h++) a.push(t.shape[h]), u *= t.shape[h];
    return {
      batchSize: l,
      sliceSize: u,
      outerSize: c,
      dimSize: i,
      outputShape: a
    };
  };
  const qV = Object.freeze(Object.defineProperty({
    __proto__: null,
    collectGatherOpShapeInfo: Jx,
    computeOutShape: ik,
    segOpComputeOptimalWindowSize: ok
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  Er = function(t) {
    try {
      return t.map((e) => Cr(e));
    } catch (e) {
      throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`);
    }
  };
  ak = function(t) {
    return t.map((e) => Qs(e));
  };
  const lk = Object.freeze(Object.defineProperty({
    __proto__: null,
    ERF_A1: Bx,
    ERF_A2: Vx,
    ERF_A3: Wx,
    ERF_A4: Ux,
    ERF_A5: Gx,
    ERF_P: Mx,
    PARALLELIZE_THRESHOLD: Fx,
    get RowPartitionType() {
      return Is;
    },
    SELU_SCALE: fm,
    SELU_SCALEALPHA: pm,
    applyActivation: rm,
    assertAndGetBroadcastShape: Fe,
    assertAxesAreInnerMostDims: rn,
    assertParamsConsistent: Ox,
    assignToTypedArray: HN,
    axesAreInnerMostDims: Vb,
    calculateShapes: No,
    checkEinsumDimSizes: Kx,
    checkPadOnDimRoundingMode: xn,
    combineLocations: wI,
    combineRaggedTensorToTensorShapes: zN,
    complexWithEvenIndex: UN,
    complexWithOddIndex: GN,
    computeConv2DInfo: jt,
    computeConv3DInfo: vo,
    computeDefaultPad: $b,
    computeDilation2DInfo: Vu,
    computeOptimalWindowSize: dm,
    computeOutAndReduceShapes: qt,
    computeOutShape: tr,
    computePool2DInfo: bs,
    computePool3DInfo: Dr,
    convertConv2DDataFormat: Or,
    decodeEinsumEquation: jx,
    eitherStridesOrDilationsAreOne: sn,
    expandShapeToKeepDim: $t,
    exponent: qN,
    exponents: jN,
    fromStringArrayToUint8: ak,
    fromUint8ToStringArray: Er,
    getAxesPermutation: bt,
    getBroadcastDims: ri,
    getComplexWithIndex: Hx,
    getEinsumComputePath: Xx,
    getEinsumPermutation: qx,
    getFusedBiasGradient: sm,
    getFusedDyActivation: nm,
    getImageCenter: Lx,
    getInnerMostAxes: Ct,
    getPermuted: ih,
    getRaggedRank: BN,
    getReductionAxes: At,
    getReshaped: oh,
    getReshapedPermuted: ah,
    getRowPartitionTypesHelper: MN,
    getSliceBeginCoords: Px,
    getSliceSize: zx,
    getSparseFillEmptyRowsIndicesDenseShapeMismatch: KN,
    getSparseFillEmptyRowsNegativeIndexErrorMessage: XN,
    getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: YN,
    getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: QN,
    getSparseReshapeInputOutputMismatchErrorMessage: tk,
    getSparseReshapeInputOutputMultipleErrorMessage: ek,
    getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: ZN,
    getSparseReshapeNegativeOutputDimErrorMessage: JN,
    getSparseSegmentReductionIndicesOutOfRangeErrorMessage: rk,
    getSparseSegmentReductionNegativeSegmentIdsErrorMessage: ty,
    getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: nk,
    getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: sk,
    getUndoAxesPermutation: So,
    isIdentityPermutation: Yx,
    log: GO,
    mergeRealAndImagArrays: Tr,
    prepareAndValidate: um,
    prepareSplitSize: Zx,
    segment_util: qV,
    shouldFuse: om,
    slice_util: FN,
    splitRealAndImagArrays: WN,
    stridesOrDilationsArePositive: si,
    tupleValuesAreOne: ao,
    upcastType: An,
    validateDefaultValueShape: VN,
    validateInput: Zf,
    validateUpdateShape: cx,
    warn: Yn
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const KV = Object.freeze(Object.defineProperty({
    __proto__: null,
    nonMaxSuppressionV3Impl: im,
    nonMaxSuppressionV4Impl: am,
    nonMaxSuppressionV5Impl: lm,
    whereImpl: em
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  hV();
  const ck = {
    kernelName: Lc,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(t, Si(ge(n, "float32"), -1))
      };
    }
  };
  const XV = {
    kernelName: ha,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => {
          const s = st(ge(n, "float32")), r = Gt(ve(Re(1), s));
          return lt(Ne(t, r));
        }
      };
    }
  };
  const YV = {
    kernelName: da,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => {
          const s = Gt(ve(st(ge(n, "float32")), 1));
          return Ne(t, s);
        }
      };
    }
  };
  const ZV = {
    kernelName: xi,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e, r = Fe(n.shape, s.shape);
      return {
        a: () => {
          let a = t;
          const l = At(n.shape, r);
          return l.length > 0 && (a = $e(a, l)), P(a, n.shape);
        },
        b: () => {
          let a = t;
          const l = At(s.shape, r);
          return l.length > 0 && (a = $e(a, l)), P(a, s.shape);
        }
      };
    }
  };
  const JV = {
    kernelName: Pc,
    saveAllInputs: true,
    gradFunc: (t, e) => {
      const n = {};
      return e.forEach((s, r) => {
        n[r] = () => t.clone();
      }), n;
    }
  };
  const QV = {
    kernelName: zc,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => qe(n)
      };
    }
  };
  const eW = {
    kernelName: Mc,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => qe(n)
      };
    }
  };
  const tW = {
    kernelName: pa,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => Ne(t, Gt(ve(Re(1), st(ge(n, "float32")))))
      };
    }
  };
  const nW = {
    kernelName: fa,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => {
          const s = Gt(ae(Re(1), st(ge(n, "float32"))));
          return Ne(t, s);
        }
      };
    }
  };
  const sW = {
    kernelName: ya,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e, r = Fe(n.shape, s.shape);
      return {
        a: () => {
          const a = ae(st(n), st(s));
          let l = L(t, Ne(s, a));
          const c = At(n.shape, r);
          return c.length > 0 && (l = $e(l, c)), P(l, n.shape);
        },
        b: () => {
          const a = ae(st(n), st(s));
          let l = lt(L(t, Ne(n, a)));
          const c = At(s.shape, r);
          return c.length > 0 && (l = $e(l, c)), P(l, s.shape);
        }
      };
    }
  };
  const rW = {
    kernelName: ma,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => Ne(t, ae(st(ge(n, "float32")), 1))
      };
    }
  };
  const oW = {
    kernelName: ga,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => Ne(t, ve(Re(1), st(ge(n, "float32"))))
      };
    }
  };
  function iW(t, e, n, s, r, o) {
    const i = T(t, "dy", "avgPool3dGrad"), a = T(e, "input", "avgPool3dGrad");
    let l = i, c = a, u = false;
    a.rank === 4 && (u = true, l = P(i, [
      1,
      i.shape[0],
      i.shape[1],
      i.shape[2],
      i.shape[3]
    ]), c = P(a, [
      1,
      a.shape[0],
      a.shape[1],
      a.shape[2],
      a.shape[3]
    ])), C(l.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`), C(c.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`), xn("avgPool3dGrad", r, o);
    const h = {
      dy: l,
      input: c
    }, d = {
      filterSize: n,
      strides: s,
      pad: r,
      dimRoundingMode: o
    }, p = D.runKernel(Sp, h, d);
    return u ? P(p, [
      p.shape[1],
      p.shape[2],
      p.shape[3],
      p.shape[4]
    ]) : p;
  }
  const aW = O({
    avgPool3dGrad_: iW
  });
  const lW = {
    kernelName: Vc,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, { filterSize: r, strides: o, pad: i, dimRoundingMode: a } = n;
      return {
        x: () => aW(t, s, r, o, i, a)
      };
    }
  };
  function cW(t, e, n, s, r) {
    const o = T(t, "dy", "avgPoolGrad"), i = T(e, "input", "avgPoolGrad");
    C(i.rank === o.rank, () => `Rank of input (${i.rank}) does not match rank of dy (${o.rank})`);
    let a = i, l = o, c = false;
    i.rank === 3 && (c = true, a = P(i, [
      1,
      i.shape[0],
      i.shape[1],
      i.shape[2]
    ]), l = P(o, [
      1,
      o.shape[0],
      o.shape[1],
      o.shape[2]
    ])), C(l.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`), C(a.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);
    const u = {
      dy: l,
      input: a
    }, h = {
      filterSize: n,
      strides: s,
      pad: r
    }, d = D.runKernel(vp, u, h);
    return c ? P(d, [
      d.shape[1],
      d.shape[2],
      d.shape[3]
    ]) : d;
  }
  const uW = O({
    avgPoolGrad_: cW
  });
  const hW = {
    kernelName: Bc,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, { filterSize: r, strides: o, pad: i } = n;
      return {
        x: () => uW(t, s, r, o, i)
      };
    }
  };
  const dW = {
    kernelName: Wc,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e, n) => {
      const [s, r] = e, { transposeA: o, transposeB: i } = n;
      return !o && !i ? {
        a: () => Be(t, r, false, true),
        b: () => Be(s, t, true, false)
      } : !o && i ? {
        a: () => Be(t, r, false, false),
        b: () => Be(t, s, true, false)
      } : o && !i ? {
        a: () => Be(r, t, false, true),
        b: () => Be(s, t, false, false)
      } : {
        a: () => Be(r, t, true, true),
        b: () => Be(t, s, true, true)
      };
    }
  };
  const pW = {
    kernelName: Uc,
    gradFunc: (t, e, n) => {
      const { blockShape: s, crops: r } = n;
      return {
        x: () => Ju(t, s, r)
      };
    }
  };
  const fW = {
    kernelName: OC,
    gradFunc: (t, e, n) => {
      const s = n, r = s.inputShape, o = s.shape, i = Array.from(o);
      for (let l = r.length - 1; l >= 0; l--) if (r[l] === o[l]) i[l] = 1;
      else if (r[l] !== 1) throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);
      const a = [];
      for (let l = 0; l < i.length; l++) i[l] > 1 && a.push(l);
      return {
        x: () => $e(t, a, true)
      };
    }
  };
  const mW = {
    kernelName: ba,
    gradFunc: (t) => ({
      x: () => t.clone()
    })
  };
  const gW = {
    kernelName: xa,
    gradFunc: (t) => ({
      x: () => qe(t)
    })
  };
  const yW = {
    kernelName: wa,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, { clipValueMin: r, clipValueMax: o } = n;
      return {
        x: () => Wt(ys(Fr(s, r), $o(s, o)), t, qe(t))
      };
    }
  };
  const bW = {
    kernelName: Hc,
    inputsToSave: [
      "x"
    ],
    gradFunc: ck.gradFunc
  };
  const xW = {
    kernelName: jc,
    saveAllInputs: true,
    gradFunc: (t, e, n) => {
      const s = e.map((l) => l.shape), { axis: r } = n, o = Ve(r, e[0].shape)[0], i = s.map((l) => l[o]);
      return Rn(t, i, o).map((l) => () => l);
    }
  };
  const wW = {
    kernelName: qc,
    inputsToSave: [
      "x",
      "filter"
    ],
    gradFunc: (t, e, n) => {
      const [s, r] = e, { dilations: o, strides: i, pad: a, dataFormat: l } = n;
      return C(ao(o), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`), {
        x: () => Ob(s.shape, t, r, i, a, l),
        filter: () => gx(s, t, r.shape, i, a, l)
      };
    }
  };
  const vW = {
    kernelName: Kc,
    inputsToSave: [
      "dy",
      "filter"
    ],
    gradFunc: (t, e, n) => {
      const [s, r] = e, { strides: o, pad: i, dataFormat: a, dimRoundingMode: l } = n;
      return {
        dy: () => kr(t, r, o, i, a, 1, l),
        filter: () => gx(t, s, r.shape, o, i, a, l)
      };
    }
  };
  function SW(t, e, n, s, r) {
    let o = t;
    t.rank === 4 && (o = P(t, [
      1,
      t.shape[0],
      t.shape[1],
      t.shape[2],
      t.shape[3]
    ]));
    let i = e;
    i.rank === 4 && (i = P(e, [
      1,
      e.shape[0],
      e.shape[1],
      e.shape[2],
      e.shape[3]
    ])), C(o.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`), C(i.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`), C(n.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`), C(o.shape[4] === n[3], () => `Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${n[3]}.`), C(i.shape[4] === n[4], () => `Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);
    const a = {
      x: o,
      dy: i
    }, l = {
      strides: s,
      pad: r,
      filterShape: n
    };
    return D.runKernel(kp, a, l);
  }
  const $W = O({
    conv3DBackpropFilter_: SW
  });
  const CW = {
    kernelName: Xc,
    inputsToSave: [
      "x",
      "filter"
    ],
    gradFunc: (t, e, n) => {
      const { dilations: s, strides: r, pad: o } = n;
      C(ao(s), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
      const [i, a] = e;
      return {
        x: () => yI(i.shape, t, a, r, o),
        filter: () => $W(i, t, a.shape, r, o)
      };
    }
  };
  const IW = {
    kernelName: va,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(lt(jf(ge(n, "float32"))), t)
      };
    }
  };
  const NW = {
    kernelName: Sa,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(qf(ge(n, "float32")), t)
      };
    }
  };
  const kW = {
    kernelName: Yc,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, { axis: r, exclusive: o, reverse: i } = n;
      return {
        x: () => {
          const a = bt([
            r
          ], s.rank);
          let l = Df(t, r, o, !i);
          return a != null && (l = He(l, a)), l;
        }
      };
    }
  };
  const TW = {
    kernelName: Zc,
    inputsToSave: [
      "x",
      "filter"
    ],
    gradFunc: (t, e, n) => {
      const { dilations: s, strides: r, pad: o, dimRoundingMode: i } = n, a = s ?? [
        1,
        1
      ];
      C(ao(a), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);
      const [l, c] = e;
      return C(l.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`), C(c.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`), C(l.shape[3] === c.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`), C(sn(r, a), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${a}'.`), xn("depthwiseConv2d", o, i), {
        x: () => aN(l.shape, t, c, r, o, a, i),
        filter: () => iN(l, t, c.shape, r, o, a, i)
      };
    }
  };
  const EW = {
    kernelName: Jc,
    inputsToSave: [
      "x",
      "filter"
    ],
    gradFunc: (t, e, n) => {
      const [s, r] = e, o = {
        x: s,
        filter: r,
        dy: t
      }, i = {
        x: s,
        filter: r,
        dy: t
      };
      return {
        x: () => D.runKernel(Id, o, n),
        filter: () => D.runKernel(Nd, i, n)
      };
    }
  };
  const RW = {
    kernelName: Ca,
    outputsToSave: [
      true
    ],
    gradFunc: (t, e) => {
      const [n] = e, s = {
        dy: t,
        y: n
      };
      return {
        x: () => D.runKernel(zp, s)
      };
    }
  };
  const AW = {
    kernelName: Ia,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e, s = L(On(lt(st(n))), 2 / Math.sqrt(Math.PI));
      return {
        x: () => L(t, s)
      };
    }
  };
  const _W = {
    kernelName: Na,
    outputsToSave: [
      true
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(t, n)
      };
    }
  };
  const DW = {
    kernelName: eu,
    inputsToSave: [
      "input"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        input: () => P(t, n.shape)
      };
    }
  };
  const OW = {
    kernelName: ka,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(t, On(n))
      };
    }
  };
  const FW = {
    kernelName: Ta,
    gradFunc: (t) => ({
      x: () => qe(t)
    })
  };
  const LW = {
    kernelName: Ea,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e, r = Fe(n.shape, s.shape);
      return {
        a: () => {
          const a = Ne(t, ge(s, "float32")), l = At(n.shape, r);
          return l.length > 0 ? P($e(a, l), n.shape) : a;
        },
        b: () => {
          let a = L(t, ge(n, "float32"));
          const l = At(s.shape, r);
          l.length > 0 && (a = P($e(a, l), s.shape));
          const c = st(s);
          return lt(Ne(a, ge(c, "float32")));
        }
      };
    }
  };
  const PW = {
    kernelName: tu,
    inputsToSave: [
      "x",
      "mean",
      "variance",
      "scale"
    ],
    gradFunc: (t, e, n) => {
      const { varianceEpsilon: s } = n, [r, o, i, a] = e, l = a ?? Re(1), c = At(o.shape, r.shape), u = [];
      if (o.rank === 1) {
        for (let x = 0; x < r.shape.length - 1; ++x) u.push(r.shape[x]);
        u.push(1);
      }
      const h = ve(r, o), d = L(t, l), p = Uf(ae(i, Re(s))), f = L(L(L(p, p), p), Re(-0.5));
      return {
        x: () => o.rank === 1 ? P(L(L(t, Qn(P(p, [
          1,
          1,
          1,
          o.shape[0]
        ]), u)), l), r.shape) : P(L(L(t, p), l), r.shape),
        mean: () => {
          let x = L(L(p, Re(-1)), d);
          return o.rank === 1 && (x = $e(x, c)), P(x, o.shape);
        },
        variance: () => {
          let x = L(L(f, h), d);
          return o.rank === 1 && (x = $e(x, c)), P(x, o.shape);
        },
        scale: () => {
          const x = L(h, p);
          let S = L(t, x);
          return o.rank === 1 && (S = $e(S, c)), P(S, o.shape);
        },
        offset: () => {
          let x = t;
          return o.rank === 1 && (x = $e(x, c)), P(x, o.shape);
        }
      };
    }
  };
  const zW = {
    kernelName: nu,
    inputsToSave: [
      "x",
      "indices"
    ],
    gradFunc: (t, e, n) => {
      const [s, r] = e, { axis: o, batchDims: i } = n, a = Ve(o, s.shape)[0], l = (c, u, h) => () => {
        const d = c.shape, p = u.size, f = d.slice(0, a), m = f.length, g = d.slice(o, d.length).slice(1), y = g.length, b = Av(0, m), w = Av(m + 1, m + 1 + y), x = _v([
          f,
          [
            p
          ],
          g
        ]), S = P(h, x), I = P(u, [
          p
        ]), E = _v([
          [
            m
          ],
          b,
          w
        ]), R = He(S, E);
        let N = Qf(R, I, c.shape[a]);
        const k = So(E);
        return N = He(N, k), N;
      };
      if (i === 1) {
        const c = s.shape[0], u = s.split(c, 0);
        return {
          x: () => yn(u.map((p, f) => l(p, r.slice(f, 1), t.slice(f, 1))())).reshape(s.shape),
          indices: () => r
        };
      } else return {
        x: l(s, r, t),
        indices: () => r
      };
    }
  };
  function Av(t, e) {
    const n = [];
    for (let s = t; s < e; ++s) n.push(s);
    return n;
  }
  function _v(t) {
    const e = [];
    for (let n = 0; n < t.length; ++n) for (let s = 0; s < t[n].length; ++s) e.push(t[n][s]);
    return e;
  }
  const MW = {
    kernelName: Ra,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e;
      return {
        a: () => qe(n),
        b: () => qe(s)
      };
    }
  };
  const BW = {
    kernelName: Aa,
    gradFunc: (t) => ({
      x: () => ge(t, "float32")
    })
  };
  const VW = {
    kernelName: _a,
    gradFunc: (t) => ({
      x: () => qe(t)
    })
  };
  const WW = {
    kernelName: Da,
    gradFunc: (t) => ({
      x: () => qe(t)
    })
  };
  const UW = {
    kernelName: Oa,
    gradFunc: (t) => ({
      x: () => qe(t)
    })
  };
  const GW = {
    kernelName: ru,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, { alpha: r } = n, o = wn(s, 0);
      return {
        x: () => Wt(o, t, L(t, r))
      };
    }
  };
  const HW = {
    kernelName: La,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => Ne(t, ae(n, 1))
      };
    }
  };
  const jW = {
    kernelName: Fa,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => Ne(t, ge(n, "float32"))
      };
    }
  };
  const qW = {
    kernelName: FC,
    inputsToSave: [],
    outputsToSave: [
      true
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, { axis: r } = n;
      return {
        logits: () => {
          const i = On(s);
          return ve(t, L($e(t, r, true), i));
        }
      };
    }
  };
  function KW(t, e, n, s = 5, r = 1, o = 1, i = 0.5) {
    const a = {
      x: t,
      y: e,
      dy: n
    }, l = {
      depthRadius: s,
      bias: r,
      alpha: o,
      beta: i
    };
    return D.runKernel(jp, a, l);
  }
  const XW = O({
    localResponseNormalizationBackprop_: KW
  });
  const YW = {
    kernelName: uu,
    inputsToSave: [
      "x"
    ],
    outputsToSave: [
      true
    ],
    gradFunc: (t, e, n) => {
      const [s, r] = e, { depthRadius: o, bias: i, alpha: a, beta: l } = n;
      return {
        x: () => XW(s, r, t, o, i, a, l)
      };
    }
  };
  function uk(t, e, n, s) {
    return e.rank < n.rank && (e = P(e, $t(e.shape, s))), t.rank < n.rank && (t = P(t, $t(t.shape, s))), {
      x: () => L(t, ge(Gn(n, e), t.dtype))
    };
  }
  const Dv = {
    kernelName: hu,
    inputsToSave: [
      "x"
    ],
    outputsToSave: [
      true
    ],
    gradFunc: (t, e, n) => {
      const s = n, { reductionIndices: r } = s, o = e[0], i = e[1], a = Ve(r, o.shape), l = uk(t, i, o, a);
      return {
        x: () => l.x()
      };
    }
  };
  const ZW = {
    kernelName: Pa,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e;
      return {
        a: () => L(t, ge(Fr(n, s), "float32")),
        b: () => L(t, ge(ea(n, s), "float32"))
      };
    }
  };
  function JW(t, e, n, s, r, o, i) {
    const a = T(t, "dy", "maxPool3dGrad"), l = T(e, "input", "maxPool3dGrad"), c = T(n, "output", "maxPool3dGrad");
    let u = a, h = l, d = c, p = false;
    l.rank === 4 && (p = true, u = P(a, [
      1,
      a.shape[0],
      a.shape[1],
      a.shape[2],
      a.shape[3]
    ]), h = P(l, [
      1,
      l.shape[0],
      l.shape[1],
      l.shape[2],
      l.shape[3]
    ]), d = P(c, [
      1,
      c.shape[0],
      c.shape[1],
      c.shape[2],
      c.shape[3]
    ])), C(u.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`), C(h.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`), C(d.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`), xn("maxPool3dGrad", o, i);
    const f = {
      dy: u,
      input: h,
      output: d
    }, m = {
      filterSize: s,
      strides: r,
      pad: o,
      dimRoundingMode: i
    }, g = D.runKernel(Kp, f, m);
    return p ? P(g, [
      g.shape[1],
      g.shape[2],
      g.shape[3],
      g.shape[4]
    ]) : g;
  }
  const QW = O({
    maxPool3dGrad_: JW
  });
  const e4 = {
    kernelName: pu,
    inputsToSave: [
      "x"
    ],
    outputsToSave: [
      true
    ],
    gradFunc: (t, e, n) => {
      const [s, r] = e, { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = n;
      return {
        x: () => QW(t, s, r, o, i, a, l)
      };
    }
  };
  function t4(t, e, n, s, r, o, i) {
    const a = T(t, "dy", "maxPoolGrad"), l = T(e, "input", "maxPoolGrad"), c = T(n, "output", "maxPoolGrad");
    C(l.rank === a.rank, () => `Rank of input (${l.rank}) does not match rank of dy (${a.rank})`), C(a.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`), C(l.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`), xn("maxPoolGrad", o, i);
    const u = {
      dy: a,
      input: l,
      output: c
    }, h = {
      filterSize: s,
      strides: r,
      pad: o,
      dimRoundingMode: i
    };
    return D.runKernel(qp, u, h);
  }
  const n4 = O({
    maxPoolGrad_: t4
  });
  const s4 = {
    kernelName: du,
    inputsToSave: [
      "x"
    ],
    outputsToSave: [
      true
    ],
    gradFunc: (t, e, n) => {
      const [s, r] = e, { filterSize: o, strides: i, pad: a } = n;
      return {
        x: () => n4(t, s, r, o, i, a)
      };
    }
  };
  const r4 = {
    kernelName: fu,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, { axis: r } = n, o = Ve(r, s.shape), a = qt(s.shape, o)[1], l = X(a);
      return {
        x: () => {
          const u = s.shape.slice();
          o.forEach((p) => {
            u[p] = 1;
          });
          const h = P(t, u);
          return Ne(L(h, En(s.shape, "float32")), l);
        }
      };
    }
  };
  const o4 = {
    kernelName: mu,
    inputsToSave: [
      "x"
    ],
    outputsToSave: [
      true
    ],
    gradFunc: (t, e, n) => {
      const s = n, { axis: r } = s, [o, i] = e, a = Ve(r, o.shape), l = uk(t, i, o, a);
      return {
        x: () => l.x()
      };
    }
  };
  const i4 = {
    kernelName: za,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e;
      return {
        a: () => L(t, ge($o(n, s), "float32")),
        b: () => L(t, ge(wn(n, s), "float32"))
      };
    }
  };
  const a4 = {
    kernelName: gu,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const s = e[0], { paddings: r } = n, o = r.map((i) => i[0]);
      return {
        x: () => je(t, o, s.shape)
      };
    }
  };
  const l4 = {
    kernelName: Ma,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e, r = Fe(n.shape, s.shape);
      return {
        a: () => {
          const a = At(n.shape, r);
          return a.length > 0 ? P($e(t, a), n.shape) : t;
        },
        b: () => {
          const a = L(t, lt(ul(Ne(n, s)))), l = At(s.shape, r);
          return l.length > 0 ? P($e(a, l), s.shape) : a;
        }
      };
    }
  };
  const c4 = {
    kernelName: Ba,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e, r = Fe(n.shape, s.shape);
      return {
        a: () => {
          const a = L(t, ge(s, "float32")), l = At(n.shape, r);
          return l.length > 0 ? P($e(a, l), n.shape) : a;
        },
        b: () => {
          const a = L(t, ge(n, "float32")), l = At(s.shape, r);
          return l.length > 0 ? P($e(a, l), s.shape) : a;
        }
      };
    }
  };
  const u4 = {
    kernelName: yu,
    gradFunc: (t) => ({
      x: () => lt(t)
    })
  };
  const h4 = {
    kernelName: wu,
    inputsToSave: [
      "indices"
    ],
    gradFunc: (t, e) => {
      const n = e[0];
      return {
        indices: () => Tt(n.shape, "float32")
      };
    }
  };
  const d4 = {
    kernelName: xu,
    gradFunc: (t) => ({
      x: () => qe(t)
    })
  };
  const p4 = {
    kernelName: vu,
    saveAllInputs: true,
    gradFunc: (t, e, n) => {
      const { axis: s } = n;
      return os(t, s).map((o) => () => o);
    }
  };
  const Ov = {
    kernelName: Su,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const s = e[0], { paddings: r } = n, o = r.map((i) => i[0]);
      return {
        x: () => je(t, o, s.shape)
      };
    }
  };
  const f4 = {
    kernelName: Va,
    inputsToSave: [
      "a",
      "b"
    ],
    outputsToSave: [
      true
    ],
    gradFunc: (t, e) => {
      const [n, s, r] = e, o = n, i = s, a = Fe(o.shape, i.shape);
      return {
        a: () => {
          const u = ge(i, "float32");
          let h = L(t, L(u, ar(o, ve(u, Re(1)))));
          const d = At(o.shape, a);
          return d.length > 0 && (h = $e(h, d)), P(h, o.shape);
        },
        b: () => {
          const u = wn(o, 0), h = Wt(u, Hn(o), qe(o));
          let d = L(t, L(r, h));
          const p = At(i.shape, a);
          return p.length > 0 && (d = $e(d, p)), P(d, i.shape);
        }
      };
    }
  };
  const m4 = {
    kernelName: $u,
    inputsToSave: [
      "x",
      "alpha"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e, r = wn(n, 0);
      return {
        x: () => Wt(r, t, L(t, s)),
        alpha: () => {
          let o = Wt(r, qe(t), L(t, n));
          const i = At(s.shape, t.shape);
          return i.length > 0 && (o = $e(o, i)), P(o, s.shape);
        }
      };
    }
  };
  function g4(t, e, n) {
    const s = t.shape.slice();
    s[n] = 1;
    const r = P(e, s), o = $c(t, n, true, false), i = $c(t, n, true, true), a = L(o, i);
    return L(r, a);
  }
  function y4(t, e, n) {
    const s = t.shape.length, r = s - n.length, o = bt(n, s);
    let i = t;
    o != null && (i = He(t, o));
    const a = i.shape.slice(), c = a.splice(s - n.length, n.length).reduce((d, p) => d * p, 1);
    a.push(c);
    const u = i.reshape(a);
    let h = g4(u, e, r);
    if (h = h.reshape(i.shape), o != null) {
      const d = So(o);
      h = He(h, d);
    }
    return h;
  }
  const b4 = {
    kernelName: Cu,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, { axis: r } = n;
      let o = [];
      return r == null ? o = s.shape.map((i, a) => a) : typeof r == "number" ? o = [
        r
      ] : o = r, {
        x: () => y4(s, t, o)
      };
    }
  };
  const x4 = {
    kernelName: $a,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e, r = Fe(n.shape, s.shape);
      return {
        a: () => {
          const a = Ne(t, ge(s, "float32")), l = At(n.shape, r);
          return l.length > 0 ? P($e(a, l), n.shape) : a;
        },
        b: () => {
          let a = L(t, ge(n, "float32"));
          const l = At(s.shape, r);
          l.length > 0 && (a = P($e(a, l), s.shape));
          const c = st(s);
          return lt(Ne(a, ge(c, "float32")));
        }
      };
    }
  };
  const w4 = {
    kernelName: Wa,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => Ne(t, lt(st(n)))
      };
    }
  };
  const v4 = {
    kernelName: Ga,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e, s = L($o(n, 6), Si(n));
      return {
        x: () => L(t, ge(s, "float32"))
      };
    }
  };
  const S4 = {
    kernelName: Ua,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(t, ge(Si(n), "float32"))
      };
    }
  };
  const $4 = {
    kernelName: Iu,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => P(t, n.shape)
      };
    }
  };
  const C4 = {
    kernelName: ku,
    inputsToSave: [
      "images"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, r = {
        dy: t,
        images: s
      };
      return {
        images: () => D.runKernel(af, r, n)
      };
    }
  };
  const I4 = {
    kernelName: Nu,
    inputsToSave: [
      "images"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, r = {
        dy: t,
        images: s
      };
      return {
        images: () => D.runKernel(of, r, n)
      };
    }
  };
  const N4 = {
    kernelName: Tu,
    gradFunc: (t, e, n) => {
      const { dims: s } = n, r = Ve(s, t.shape);
      return {
        x: () => rs(t, r)
      };
    }
  };
  const k4 = {
    kernelName: Ha,
    gradFunc: (t) => ({
      x: () => qe(t)
    })
  };
  const T4 = {
    kernelName: ja,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => lt(Ne(t, L(ar(n, 1.5), 2)))
      };
    }
  };
  const E4 = {
    kernelName: Eu,
    inputsToSave: [
      "condition"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        condition: () => ge(qe(n), "float32"),
        t: () => L(t, ge(n, t.dtype)),
        e: () => L(t, ge(Xu(n), t.dtype))
      };
    }
  };
  const R4 = {
    kernelName: qa,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => {
          const s = wn(n, Re(0)), r = Re(pm), o = Re(fm), i = L(t, o), a = L(L(t, r), On(ge(n, "float32")));
          return Wt(s, i, a);
        }
      };
    }
  };
  const A4 = {
    kernelName: Za,
    outputsToSave: [
      true
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(t, L(n, ve(Re(1), n)))
      };
    }
  };
  const _4 = {
    kernelName: Ya,
    gradFunc: (t) => ({
      x: () => qe(t)
    })
  };
  const D4 = {
    kernelName: Ka,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(Gu(ge(n, "float32")), t)
      };
    }
  };
  const O4 = {
    kernelName: Xa,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(_f(ge(n, "float32")), t)
      };
    }
  };
  const F4 = {
    kernelName: Ru,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, { begin: r, size: o } = n, i = s.shape, [a, l] = hm(s, r, o), c = [];
      for (let u = 0; u < t.rank; u++) c.push([
        a[u],
        i[u] - a[u] - l[u]
      ]);
      return {
        x: () => Lr(t, c)
      };
    }
  };
  const L4 = {
    kernelName: Ou,
    outputsToSave: [
      true
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, { dim: r } = n, o = true, i = L(t, s);
      return {
        logits: () => ve(i, L($e(i, [
          r
        ], o), s))
      };
    }
  };
  const P4 = {
    kernelName: Ja,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(t, Ts(n))
      };
    }
  };
  const Fv = {
    kernelName: _u,
    gradFunc: (t, e, n) => {
      const { blockShape: s, paddings: r } = n;
      return {
        x: () => Uu(t, s, r)
      };
    }
  };
  const Lv = {
    kernelName: Du,
    gradFunc: (t, e, n) => {
      const { axis: s } = n;
      return {
        x: () => vt(t, s)
      };
    }
  };
  const z4 = {
    kernelName: Qa,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => Ne(t, L(Gt(ge(n, "float32")), 2))
      };
    }
  };
  const M4 = {
    kernelName: gf,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(t, L(ge(n, "float32"), 2))
      };
    }
  };
  const B4 = {
    kernelName: el,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e, r = Re(2);
      return {
        a: () => L(t, L(r, ve(n, s))),
        b: () => L(t, L(r, ve(s, n)))
      };
    }
  };
  const V4 = {
    kernelName: ol,
    gradFunc: (t) => ({
      x: () => qe(t)
    })
  };
  const W4 = {
    kernelName: tl,
    inputsToSave: [
      "a",
      "b"
    ],
    gradFunc: (t, e) => {
      const [n, s] = e, r = Fe(n.shape, s.shape);
      return {
        a: () => {
          let a = t;
          const l = At(n.shape, r);
          return l.length > 0 && (a = $e(a, l)), P(a, n.shape);
        },
        b: () => {
          let a = t;
          const l = At(s.shape, r);
          return l.length > 0 && (a = $e(a, l)), P(lt(a), s.shape);
        }
      };
    }
  };
  const U4 = {
    kernelName: Au,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, r = s.shape.slice(), { axis: o } = n;
      Ve(o, s.shape).forEach((c) => {
        r[c] = 1;
      });
      const a = P(t, r), l = L(a, En(s.shape, "float32"));
      return {
        x: () => l
      };
    }
  };
  const G4 = {
    kernelName: nl,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => Ne(t, st(Gu(n)))
      };
    }
  };
  const H4 = {
    kernelName: sl,
    outputsToSave: [
      true
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => L(ve(Re(1), st(n)), t)
      };
    }
  };
  const j4 = {
    kernelName: rl,
    inputsToSave: [
      "x"
    ],
    gradFunc: (t, e, n) => {
      const [s] = e, { reps: r } = n;
      return {
        x: () => {
          let i = qe(s);
          if (s.rank === 1) for (let a = 0; a < r[0]; ++a) i = ae(i, je(t, [
            a * s.shape[0]
          ], [
            s.shape[0]
          ]));
          else if (s.rank === 2) for (let a = 0; a < r[0]; ++a) for (let l = 0; l < r[1]; ++l) i = ae(i, je(t, [
            a * s.shape[0],
            l * s.shape[1]
          ], [
            s.shape[0],
            s.shape[1]
          ]));
          else if (s.rank === 3) for (let a = 0; a < r[0]; ++a) for (let l = 0; l < r[1]; ++l) for (let c = 0; c < r[2]; ++c) i = ae(i, je(t, [
            a * s.shape[0],
            l * s.shape[1],
            c * s.shape[2]
          ], [
            s.shape[0],
            s.shape[1],
            s.shape[2]
          ]));
          else if (s.rank === 4) for (let a = 0; a < r[0]; ++a) for (let l = 0; l < r[1]; ++l) for (let c = 0; c < r[2]; ++c) for (let u = 0; u < r[3]; ++u) i = ae(i, je(t, [
            a * s.shape[0],
            l * s.shape[1],
            c * s.shape[2],
            u * s.shape[3]
          ], [
            s.shape[0],
            s.shape[1],
            s.shape[2],
            s.shape[3]
          ]));
          else throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);
          return i;
        }
      };
    }
  };
  const q4 = {
    kernelName: qo,
    gradFunc: (t, e, n) => {
      const s = n, { perm: r } = s, o = So(r);
      return {
        x: () => He(t, o)
      };
    }
  };
  const K4 = {
    kernelName: Lu,
    gradFunc: (t, e, n) => {
      const s = n, { axis: r } = s;
      return {
        value: () => yn(t, r)
      };
    }
  };
  const X4 = {
    kernelName: Pu,
    inputsToSave: [
      "segmentIds"
    ],
    gradFunc: (t, e) => {
      const [n] = e;
      return {
        x: () => Y4(t, n)
      };
    }
  };
  function Y4(t, e) {
    const n = ur(e, qe(e)), s = hl(t, n);
    let r = Fr(e, Re(0, "int32"));
    const o = s.rank - r.rank;
    for (let a = 0; a < o; ++a) r = Yt(r, a + 1);
    r = ys(r, En(s.shape, "bool"));
    const i = qe(s);
    return Wt(r, s, i);
  }
  const Z4 = {
    kernelName: zu,
    gradFunc: (t) => ({
      x: () => qe(t)
    })
  };
  const J4 = [
    ck,
    XV,
    YV,
    ZV,
    JV,
    QV,
    eW,
    tW,
    nW,
    sW,
    rW,
    oW,
    lW,
    hW,
    dW,
    pW,
    fW,
    mW,
    gW,
    yW,
    bW,
    xW,
    vW,
    wW,
    CW,
    IW,
    NW,
    kW,
    TW,
    EW,
    x4,
    RW,
    AW,
    _W,
    DW,
    OW,
    LW,
    FW,
    PW,
    zW,
    MW,
    BW,
    VW,
    WW,
    UW,
    GW,
    HW,
    jW,
    qW,
    YW,
    Dv,
    Dv,
    ZW,
    e4,
    s4,
    r4,
    o4,
    i4,
    a4,
    l4,
    c4,
    u4,
    h4,
    d4,
    p4,
    Ov,
    Ov,
    f4,
    m4,
    b4,
    w4,
    v4,
    S4,
    $4,
    C4,
    I4,
    N4,
    k4,
    T4,
    E4,
    R4,
    A4,
    _4,
    D4,
    O4,
    F4,
    L4,
    P4,
    Fv,
    Fv,
    Lv,
    Lv,
    z4,
    B4,
    M4,
    V4,
    W4,
    U4,
    G4,
    H4,
    j4,
    q4,
    K4,
    X4,
    Z4
  ];
  for (const t of J4) LC(t);
  J().prototype.abs = function() {
    return this.throwIfDisposed(), kt(this);
  };
  J().prototype.acos = function() {
    return this.throwIfDisposed(), mb(this);
  };
  J().prototype.acosh = function() {
    return this.throwIfDisposed(), gb(this);
  };
  J().prototype.add = function(t) {
    return this.throwIfDisposed(), ae(this, t);
  };
  J().prototype.all = function(t, e) {
    return this.throwIfDisposed(), Ef(this, t, e);
  };
  J().prototype.any = function(t, e) {
    return this.throwIfDisposed(), wc(this, t, e);
  };
  J().prototype.argMax = function(t) {
    return this.throwIfDisposed(), ni(this, t);
  };
  J().prototype.argMin = function(t) {
    return this.throwIfDisposed(), yb(this, t);
  };
  J().prototype.asScalar = function() {
    return this.throwIfDisposed(), C(this.size === 1, () => "The array must have only 1 element."), P(this, []);
  };
  J().prototype.asType = function(t) {
    return this.throwIfDisposed(), ge(this, t);
  };
  J().prototype.as1D = function() {
    return this.throwIfDisposed(), P(this, [
      this.size
    ]);
  };
  J().prototype.as2D = function(t, e) {
    return this.throwIfDisposed(), P(this, [
      t,
      e
    ]);
  };
  J().prototype.as3D = function(t, e, n) {
    return this.throwIfDisposed(), P(this, [
      t,
      e,
      n
    ]);
  };
  J().prototype.as4D = function(t, e, n, s) {
    return this.throwIfDisposed(), P(this, [
      t,
      e,
      n,
      s
    ]);
  };
  J().prototype.as5D = function(t, e, n, s, r) {
    return this.throwIfDisposed(), P(this, [
      t,
      e,
      n,
      s,
      r
    ]);
  };
  J().prototype.asin = function() {
    return this.throwIfDisposed(), bb(this);
  };
  J().prototype.asinh = function() {
    return this.throwIfDisposed(), xb(this);
  };
  J().prototype.atan = function() {
    return this.throwIfDisposed(), wb(this);
  };
  J().prototype.atan2 = function(t) {
    return this.throwIfDisposed(), vb(this, t);
  };
  J().prototype.atanh = function() {
    return this.throwIfDisposed(), Sb(this);
  };
  J().prototype.avgPool = function(t, e, n, s) {
    return this.throwIfDisposed(), Wu(this, t, e, n, s);
  };
  J().prototype.batchToSpaceND = function(t, e) {
    return this.throwIfDisposed(), Uu(this, t, e);
  };
  J().prototype.batchNorm = function(t, e, n, s, r) {
    return this.throwIfDisposed(), il(this, t, e, n, s, r);
  };
  J().prototype.broadcastTo = function(t) {
    return this.throwIfDisposed(), Ko(this, t);
  };
  J().prototype.cast = function(t) {
    return this.throwIfDisposed(), ge(this, t);
  };
  J().prototype.ceil = function() {
    return this.throwIfDisposed(), Eb(this);
  };
  J().prototype.clipByValue = function(t, e) {
    return this.throwIfDisposed(), Dn(this, t, e);
  };
  J().prototype.concat = function(t, e) {
    return this.throwIfDisposed(), t instanceof Xe && (t = [
      t
    ]), vt([
      this,
      ...t
    ], e);
  };
  J().prototype.conv1d = function(t, e, n, s, r, o) {
    return this.throwIfDisposed(), Rf(this, t, e, n, s, r, o);
  };
  J().prototype.conv2dTranspose = function(t, e, n, s, r) {
    return this.throwIfDisposed(), Af(this, t, e, n, s, r);
  };
  J().prototype.conv2d = function(t, e, n, s, r, o) {
    return this.throwIfDisposed(), kr(this, t, e, n, s, r, o);
  };
  J().prototype.cos = function() {
    return this.throwIfDisposed(), Gu(this);
  };
  J().prototype.cosh = function() {
    return this.throwIfDisposed(), _f(this);
  };
  J().prototype.cumprod = function(t, e, n) {
    return this.throwIfDisposed(), $c(this, t, e, n);
  };
  J().prototype.cumsum = function(t, e, n) {
    return this.throwIfDisposed(), Df(this, t, e, n);
  };
  J().prototype.depthToSpace = function(t, e) {
    return this.throwIfDisposed(), Pb(this, t, e);
  };
  J().prototype.depthwiseConv2d = function(t, e, n, s, r, o) {
    return this.throwIfDisposed(), al(this, t, e, n, s, r, o);
  };
  J().prototype.dilation2d = function(t, e, n, s, r) {
    return this.throwIfDisposed(), zb(this, t, e, n, s, r);
  };
  J().prototype.divNoNan = function(t) {
    return this.throwIfDisposed(), Mb(this, t);
  };
  J().prototype.div = function(t) {
    return this.throwIfDisposed(), Ne(this, t);
  };
  J().prototype.dot = function(t) {
    return this.throwIfDisposed(), Bb(this, t);
  };
  J().prototype.elu = function() {
    return this.throwIfDisposed(), ll(this);
  };
  J().prototype.equal = function(t) {
    return this.throwIfDisposed(), Gn(this, t);
  };
  J().prototype.erf = function() {
    return this.throwIfDisposed(), Of(this);
  };
  J().prototype.euclideanNorm = function(t, e) {
    return this.throwIfDisposed(), Wb(this, t, e);
  };
  J().prototype.exp = function() {
    return this.throwIfDisposed(), On(this);
  };
  J().prototype.expandDims = function(t) {
    return this.throwIfDisposed(), Yt(this, t);
  };
  J().prototype.expm1 = function() {
    return this.throwIfDisposed(), Ub(this);
  };
  J().prototype.fft = function() {
    return this.throwIfDisposed(), sh(this);
  };
  J().prototype.flatten = function() {
    return this.throwIfDisposed(), P(this, [
      this.size
    ]);
  };
  J().prototype.floor = function() {
    return this.throwIfDisposed(), ul(this);
  };
  J().prototype.floorDiv = function(t) {
    return this.throwIfDisposed(), Tf(this, t);
  };
  J().prototype.gather = function(t, e, n) {
    return this.throwIfDisposed(), hl(this, t, e, n);
  };
  J().prototype.greaterEqual = function(t) {
    return this.throwIfDisposed(), Fr(this, t);
  };
  J().prototype.greater = function(t) {
    return this.throwIfDisposed(), wn(this, t);
  };
  J().prototype.ifft = function() {
    return this.throwIfDisposed(), ra(this);
  };
  J().prototype.irfft = function() {
    return this.throwIfDisposed(), Xf(this);
  };
  J().prototype.isFinite = function() {
    return this.throwIfDisposed(), Gb(this);
  };
  J().prototype.isInf = function() {
    return this.throwIfDisposed(), Hb(this);
  };
  J().prototype.isNaN = function() {
    return this.throwIfDisposed(), jb(this);
  };
  J().prototype.leakyRelu = function(t) {
    return this.throwIfDisposed(), ju(this, t);
  };
  J().prototype.lessEqual = function(t) {
    return this.throwIfDisposed(), $o(this, t);
  };
  J().prototype.less = function(t) {
    return this.throwIfDisposed(), ea(this, t);
  };
  J().prototype.localResponseNormalization = function(t, e, n, s) {
    return this.throwIfDisposed(), qb(this, t, e, n, s);
  };
  J().prototype.logSigmoid = function() {
    return this.throwIfDisposed(), Kb(this);
  };
  J().prototype.logSoftmax = function(t) {
    return this.throwIfDisposed(), Pf(this, t);
  };
  J().prototype.logSumExp = function(t, e) {
    return this.throwIfDisposed(), Ku(this, t, e);
  };
  J().prototype.log = function() {
    return this.throwIfDisposed(), Hn(this);
  };
  J().prototype.log1p = function() {
    return this.throwIfDisposed(), qu(this);
  };
  J().prototype.logicalAnd = function(t) {
    return this.throwIfDisposed(), ys(this, t);
  };
  J().prototype.logicalNot = function() {
    return this.throwIfDisposed(), Xu(this);
  };
  J().prototype.logicalOr = function(t) {
    return this.throwIfDisposed(), zf(this, t);
  };
  J().prototype.logicalXor = function(t) {
    return this.throwIfDisposed(), Xb(this, t);
  };
  J().prototype.matMul = function(t, e, n) {
    return this.throwIfDisposed(), Be(this, t, e, n);
  };
  J().prototype.maxPool = function(t, e, n, s) {
    return this.throwIfDisposed(), Yu(this, t, e, n, s);
  };
  J().prototype.max = function(t, e) {
    return this.throwIfDisposed(), ss(this, t, e);
  };
  J().prototype.maximum = function(t) {
    return this.throwIfDisposed(), ur(this, t);
  };
  J().prototype.mean = function(t, e) {
    return this.throwIfDisposed(), mt(this, t, e);
  };
  J().prototype.min = function(t, e) {
    return this.throwIfDisposed(), Qi(this, t, e);
  };
  J().prototype.minimum = function(t) {
    return this.throwIfDisposed(), co(this, t);
  };
  J().prototype.mirrorPad = function(t, e) {
    return this.throwIfDisposed(), Zb(this, t, e);
  };
  J().prototype.mod = function(t) {
    return this.throwIfDisposed(), Jb(this, t);
  };
  J().prototype.mul = function(t) {
    return this.throwIfDisposed(), L(this, t);
  };
  J().prototype.neg = function() {
    return this.throwIfDisposed(), lt(this);
  };
  J().prototype.norm = function(t, e, n) {
    return this.throwIfDisposed(), cl(this, t, e, n);
  };
  J().prototype.notEqual = function(t) {
    return this.throwIfDisposed(), oi(this, t);
  };
  J().prototype.oneHot = function(t, e = 1, n = 0) {
    return this.throwIfDisposed(), ta(this, t, e, n);
  };
  J().prototype.onesLike = function() {
    return this.throwIfDisposed(), jn(this);
  };
  J().prototype.pad = function(t, e) {
    return this.throwIfDisposed(), Lr(this, t, e);
  };
  J().prototype.pool = function(t, e, n, s, r, o) {
    return this.throwIfDisposed(), Qb(this, t, e, n, s, r, o);
  };
  J().prototype.pow = function(t) {
    return this.throwIfDisposed(), ar(this, t);
  };
  J().prototype.prelu = function(t) {
    return this.throwIfDisposed(), Qu(this, t);
  };
  J().prototype.prod = function(t, e) {
    return this.throwIfDisposed(), ex(this, t, e);
  };
  J().prototype.reciprocal = function() {
    return this.throwIfDisposed(), rx(this);
  };
  J().prototype.relu = function() {
    return this.throwIfDisposed(), zs(this);
  };
  J().prototype.relu6 = function() {
    return this.throwIfDisposed(), Vf(this);
  };
  J().prototype.reshapeAs = function(t) {
    return this.throwIfDisposed(), P(this, t.shape);
  };
  J().prototype.reshape = function(t) {
    return this.throwIfDisposed(), P(this, t);
  };
  J().prototype.resizeBilinear = function(t, e, n) {
    return this.throwIfDisposed(), hN(this, t, e, n);
  };
  J().prototype.resizeNearestNeighbor = function(t, e, n) {
    return this.throwIfDisposed(), dN(this, t, e, n);
  };
  J().prototype.reverse = function(t) {
    return this.throwIfDisposed(), rs(this, t);
  };
  J().prototype.rfft = function() {
    return this.throwIfDisposed(), rh(this);
  };
  J().prototype.round = function() {
    return this.throwIfDisposed(), Wf(this);
  };
  J().prototype.rsqrt = function() {
    return this.throwIfDisposed(), Uf(this);
  };
  J().prototype.selu = function() {
    return this.throwIfDisposed(), Gf(this);
  };
  J().prototype.separableConv2d = function(t, e, n, s, r, o) {
    return this.throwIfDisposed(), Hf(this, t, e, n, s, r, o);
  };
  J().prototype.sigmoid = function() {
    return this.throwIfDisposed(), Ts(this);
  };
  J().prototype.sign = function() {
    return this.throwIfDisposed(), ox(this);
  };
  J().prototype.sin = function() {
    return this.throwIfDisposed(), jf(this);
  };
  J().prototype.sinh = function() {
    return this.throwIfDisposed(), qf(this);
  };
  J().prototype.slice = function(t, e) {
    return this.throwIfDisposed(), je(this, t, e);
  };
  J().prototype.softmax = function(t) {
    return this.throwIfDisposed(), nh(this, t);
  };
  J().prototype.softplus = function() {
    return this.throwIfDisposed(), vi(this);
  };
  J().prototype.spaceToBatchND = function(t, e) {
    return this.throwIfDisposed(), Ju(this, t, e);
  };
  J().prototype.split = function(t, e) {
    return this.throwIfDisposed(), Rn(this, t, e);
  };
  J().prototype.sqrt = function() {
    return this.throwIfDisposed(), Gt(this);
  };
  J().prototype.square = function() {
    return this.throwIfDisposed(), st(this);
  };
  J().prototype.squaredDifference = function(t) {
    return this.throwIfDisposed(), Yf(this, t);
  };
  J().prototype.squeeze = function(t) {
    return this.throwIfDisposed(), Io(this, t);
  };
  J().prototype.stack = function(t, e) {
    this.throwIfDisposed();
    const n = t instanceof Xe ? [
      this,
      t
    ] : [
      this,
      ...t
    ];
    return yn(n, e);
  };
  J().prototype.step = function(t) {
    return this.throwIfDisposed(), Si(this, t);
  };
  J().prototype.stridedSlice = function(t, e, n, s, r, o, i, a) {
    return this.throwIfDisposed(), ix(this, t, e, n, s, r, o, i, a);
  };
  J().prototype.sub = function(t) {
    return this.throwIfDisposed(), ve(this, t);
  };
  J().prototype.sum = function(t, e) {
    return this.throwIfDisposed(), $e(this, t, e);
  };
  J().prototype.tan = function() {
    return this.throwIfDisposed(), ax(this);
  };
  J().prototype.tanh = function() {
    return this.throwIfDisposed(), lo(this);
  };
  J().prototype.tile = function(t) {
    return this.throwIfDisposed(), Qn(this, t);
  };
  J().prototype.toBool = function() {
    return this.throwIfDisposed(), ge(this, "bool");
  };
  J().prototype.toFloat = function() {
    return this.throwIfDisposed(), ge(this, "float32");
  };
  J().prototype.toInt = function() {
    return this.throwIfDisposed(), ge(this, "int32");
  };
  J().prototype.topk = function(t, e) {
    return this.throwIfDisposed(), ux(this, t, e);
  };
  J().prototype.transpose = function(t) {
    return this.throwIfDisposed(), He(this, t);
  };
  J().prototype.unique = function(t) {
    return this.throwIfDisposed(), hx(this, t);
  };
  J().prototype.unsortedSegmentSum = function(t, e) {
    return this.throwIfDisposed(), Qf(this, t, e);
  };
  J().prototype.unstack = function(t) {
    return this.throwIfDisposed(), os(this, t);
  };
  J().prototype.where = function(t, e) {
    return this.throwIfDisposed(), Wt(t, this, e);
  };
  J().prototype.zerosLike = function() {
    return this.throwIfDisposed(), qe(this);
  };
  class js extends Error {
    constructor(e) {
      super(e), Object.setPrototypeOf(this, js.prototype);
    }
  }
  class fs extends Error {
    constructor(e) {
      super(e), Object.setPrototypeOf(this, fs.prototype);
    }
  }
  class z extends Error {
    constructor(e) {
      super(e), Object.setPrototypeOf(this, z.prototype);
    }
  }
  class ze extends Error {
    constructor(e) {
      super(e), Object.setPrototypeOf(this, ze.prototype);
    }
  }
  class Qx extends Error {
    constructor(e) {
      super(e), Object.setPrototypeOf(this, Qx.prototype);
    }
  }
  class hk {
    constructor(e) {
      this.maxEntries = e || 100, this.cache = /* @__PURE__ */ new Map();
    }
    get(e) {
      let n;
      return this.cache.has(e) && (n = this.cache.get(e), this.cache.delete(e), this.cache.set(e, n)), n;
    }
    put(e, n) {
      if (this.cache.has(e)) this.cache.delete(e);
      else if (this.cache.size >= this.maxEntries) {
        const s = this.cache.keys().next().value;
        this.cache.delete(s);
      }
      this.cache.set(e, n);
    }
    getMaxEntries() {
      return this.maxEntries;
    }
    setMaxEntries(e) {
      if (e < 0) throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);
      if (this.maxEntries > e) for (let n = 0; n < this.maxEntries - e; n++) {
        const s = this.cache.keys().next().value;
        this.cache.delete(s);
      }
      this.maxEntries = e;
    }
  }
  function li(t, e) {
    if (Array.isArray(t)) {
      let n = [];
      for (let s = 0; s < e; s++) n = n.concat(t);
      return n;
    } else {
      const n = new Array(e);
      return n.fill(t), n;
    }
  }
  function qs(t, e) {
    if (!t) throw new Qx(e);
  }
  function Pv(t, e) {
    let n = 0;
    for (const s of t) s === e && n++;
    return n;
  }
  function kn(t) {
    return t.length === 1 ? t[0] : t;
  }
  function et(t) {
    return Array.isArray(t) ? t : [
      t
    ];
  }
  function mr(t) {
    const n = t.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
    return n[0] !== "_" ? n : "private" + n;
  }
  function Mo(t) {
    return t.length <= 1 || t.indexOf("_") === -1 ? t : t.replace(/[_]+(\w|$)/g, (e, n) => n.toUpperCase());
  }
  let ls = {};
  function ew(t) {
    if (t == null) return null;
    const e = {};
    return e.className = t.getClassName(), e.config = t.getConfig(), e;
  }
  function ny(t) {
    if (!(t == null || typeof t != "object")) if (Array.isArray(t)) t.forEach((e) => ny(e));
    else {
      const e = Object.keys(t);
      for (const n of e) {
        const s = t[n];
        s != null && typeof s == "object" && (!Array.isArray(s) && s.type === "ndarray" && typeof s.value == "number" ? t[n] = s.value : ny(s));
      }
    }
  }
  function lh(t, e = {}, n = {}, s = "object", r = false) {
    if (typeof t == "string") {
      const o = t;
      let i;
      if (o in n) i = n[o];
      else if (o in ls) i = ls[o];
      else if (i = e[o], i == null) throw new z(`Unknown ${s}: ${t}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
      return i;
    } else {
      const o = t;
      if (o.className == null || o.config == null) throw new z(`${s}: Improper config format: ${JSON.stringify(o)}.
'className' and 'config' must set.`);
      const i = o.className;
      let a, l;
      if (i in n ? [a, l] = n[i] : i in ls ? [a, l] = ls.className : i in e && ([a, l] = e[i]), a == null) throw new z(`Unknown ${s}: ${i}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
      if (l != null) {
        const c = {};
        for (const p of Object.keys(ls)) c[p] = ls[p];
        for (const p of Object.keys(n)) c[p] = n[p];
        const u = o.config;
        u.customObjects = c;
        const h = Object.assign({}, ls);
        for (const p of Object.keys(n)) ls[p] = n[p];
        ny(o.config);
        const d = l(a, o.config, n, r);
        return ls = Object.assign({}, h), d;
      } else {
        const c = Object.assign({}, ls);
        for (const h of Object.keys(n)) ls[h] = n[h];
        const u = new a(o.config);
        return ls = Object.assign({}, c), u;
      }
    }
  }
  function Q4(t, e) {
    return t < e ? -1 : t > e ? 1 : 0;
  }
  function Ah(t, e) {
    return -1 * Q4(t, e);
  }
  function to(t) {
    if (t == null) return t;
    const e = [];
    for (const n of t) e.indexOf(n) === -1 && e.push(n);
    return e;
  }
  function eU(t) {
    if (t == null) throw new z(`Invalid value in obj: ${JSON.stringify(t)}`);
    for (const e in t) if (t.hasOwnProperty(e)) return false;
    return true;
  }
  function Ci(t, e, n) {
    if (n != null && t.indexOf(n) < 0) throw new z(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`);
  }
  function tw(t, e, n = 0, s = 1 / 0) {
    return qs(n >= 0), qs(s >= n), Array.isArray(t) && t.length >= n && t.length <= s && t.every((r) => typeof r === e);
  }
  function Vt(t, e) {
    Array.isArray(t) ? (C(t.length > 0, () => `${e} is unexpectedly an empty array.`), t.forEach((n, s) => Vt(n, `element ${s + 1} of ${e}`))) : C(Number.isInteger(t) && t > 0, () => `Expected ${e} to be a positive integer, but got ${dk(t)}.`);
  }
  function dk(t) {
    return t === null ? "null" : Array.isArray(t) ? "[" + t.map((e) => dk(e)).join(",") + "]" : typeof t == "string" ? `"${t}"` : `${t}`;
  }
  function tU(t, e, n) {
    let s = n != null ? n() : Xt(), r;
    return (...i) => {
      const a = n != null ? n() : Xt();
      return a - s < e || (s = a, r = t(...i)), r;
    };
  }
  function pk(t) {
    return t === "relu" ? "relu" : t === "linear" ? "linear" : t === "elu" ? "elu" : null;
  }
  let nU = 0;
  function fk() {
    return nU++;
  }
  const _h = {};
  function mm(t = "") {
    return t in _h || (_h[t] = 0), _h[t] += 1, t + _h[t].toString();
  }
  const sU = [
    "channelsFirst",
    "channelsLast"
  ], rU = [
    "nearest",
    "bilinear"
  ], oU = [
    "valid",
    "same",
    "causal"
  ], iU = [
    "max",
    "avg"
  ], aU = [
    "sum",
    "mul",
    "concat",
    "ave"
  ];
  const Di = /* @__PURE__ */ new Map();
  function It(t) {
    Ci(sU, "DataFormat", t);
  }
  function lU(t) {
    Ci(rU, "InterpolationFormat", t);
  }
  function is(t) {
    Ci(oU, "PaddingMode", t);
  }
  function mk(t) {
    Ci(iU, "PoolMode", t);
  }
  const sc = [], zv = "/";
  function Xo(t, e) {
    sc.push(t);
    try {
      const n = e();
      return sc.pop(), n;
    } catch (n) {
      throw sc.pop(), n;
    }
  }
  function cU() {
    return sc.length === 0 ? "" : sc.join(zv) + zv;
  }
  function gk(t) {
    if (!bk(t)) throw new Error("Not a valid tensor name: '" + t + "'");
    return cU() + t;
  }
  function yk(t) {
    if (!bk(t)) throw new Error("Not a valid tensor name: '" + t + "'");
    Di.has(t) || Di.set(t, 0);
    const e = Di.get(t);
    if (Di.set(t, Di.get(t) + 1), e > 0) {
      const n = `${t}_${e}`;
      return Di.set(n, 1), n;
    } else return t;
  }
  const uU = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
  function bk(t) {
    return !!t.match(uU);
  }
  function hU(t) {
    return t === parseInt(t.toString(), 10);
  }
  function no(t, e, n) {
    e == null && (e = 0), n == null && (n = t.length);
    let s = 1;
    for (let r = e; r < n; ++r) s *= t[r];
    return s;
  }
  function oa(t) {
    if (t.length === 0) return Number.NaN;
    let e = Number.POSITIVE_INFINITY;
    for (let n = 0; n < t.length; n++) {
      const s = t[n];
      s < e && (e = s);
    }
    return e;
  }
  function uo(t) {
    if (t.length === 0) return Number.NaN;
    let e = Number.NEGATIVE_INFINITY;
    for (let n = 0; n < t.length; n++) {
      const s = t[n];
      s > e && (e = s);
    }
    return e;
  }
  function Ds(t, e) {
    if (e < t) throw new z(`end (${e}) < begin (${t}) is forbidden.`);
    const n = [];
    for (let s = t; s < e; ++s) n.push(s);
    return n;
  }
  let cg;
  function Ot() {
    return cg == null && (cg = cb().epsilon()), cg;
  }
  function Os() {
    return "channelsLast";
  }
  function nr(t, e) {
    return ge(t, e);
  }
  function ch(t, e = -1) {
    const n = t.shape.slice();
    return e < 0 && (e = n.length + e + 1), n.splice(e, 0, 1), P(t, n);
  }
  function dU(t, e) {
    return q(() => {
      if (t.shape.length !== 2) throw new z(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);
      const n = ch(t, 1);
      return sy(n, [
        1,
        e,
        1
      ]);
    });
  }
  function pU(t) {
    const e = [
      no(t.shape)
    ];
    return P(t, e);
  }
  function fU(t) {
    if (t.rank <= 1) throw new z(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);
    const e = [
      t.shape[0],
      no(t.shape, 1)
    ];
    return P(t, e);
  }
  function Yo(t, e, n) {
    return q(() => {
      switch (t.rank) {
        case 1:
          return eh(t, e, n);
        case 2:
          return Kf(t, [
            e,
            0
          ], [
            n,
            t.shape[1]
          ]);
        case 3:
          return th(t, [
            e,
            0,
            0
          ], [
            n,
            t.shape[1],
            t.shape[2]
          ]);
        case 4:
          return sa(t, [
            e,
            0,
            0,
            0
          ], [
            n,
            t.shape[1],
            t.shape[2],
            t.shape[3]
          ]);
        case 5:
          return je(t, [
            e,
            0,
            0,
            0,
            0
          ], [
            n,
            t.shape[1],
            t.shape[2],
            t.shape[3],
            t.shape[4]
          ]);
        case 6:
          return je(t, [
            e,
            0,
            0,
            0,
            0,
            0
          ], [
            n,
            t.shape[1],
            t.shape[2],
            t.shape[3],
            t.shape[4],
            t.shape[5]
          ]);
        default:
          throw new z(`sliceAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`);
      }
    });
  }
  function ug(t, e, n) {
    return q(() => {
      switch (t.rank) {
        case 1:
          return eh(t, e, n);
        case 2:
          return Kf(t, [
            0,
            e
          ], [
            t.shape[0],
            n
          ]);
        case 3:
          return th(t, [
            0,
            0,
            e
          ], [
            t.shape[0],
            t.shape[1],
            n
          ]);
        case 4:
          return sa(t, [
            0,
            0,
            0,
            e
          ], [
            t.shape[0],
            t.shape[1],
            t.shape[2],
            n
          ]);
        default:
          throw new z(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`);
      }
    });
  }
  function Dh(t, e, n, s) {
    return q(() => {
      switch (t.rank) {
        case 1:
          return eh(t, e, n);
        case 2:
          switch (s) {
            case 1:
              return Yo(t, e, n);
            case 2:
              return ug(t, e, n);
            default:
              throw new z(`The axis is not within the rank of the tensor ${s}`);
          }
        case 3:
          switch (s) {
            case 1:
              return Yo(t, e, n);
            case 2:
              return th(t, [
                0,
                e,
                0
              ], [
                t.shape[0],
                n,
                t.shape[2]
              ]);
            case 3:
              return ug(t, e, n);
            default:
              throw new z(`The axis is not within the rank of the tensor ${s}`);
          }
        case 4:
          switch (s) {
            case 1:
              return Yo(t, e, n);
            case 2:
              return sa(t, [
                0,
                e,
                0,
                0
              ], [
                t.shape[0],
                n,
                t.shape[2],
                t.shape[3]
              ]);
            case 3:
              return sa(t, [
                0,
                0,
                e,
                0
              ], [
                t.shape[0],
                t.shape[1],
                n,
                t.shape[3]
              ]);
            case 4:
              return ug(t, e, n);
            default:
              throw new z(`The axis is not within the rank of the tensor ${s}`);
          }
        default:
          throw new z(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`);
      }
    });
  }
  function nw(t, e = -1) {
    let n;
    return e < 0 && (n = t[0].rank, n !== 0 ? e = n : e = 0), e === t[0].rank && (e = -1), vt(t, e);
  }
  function Mv(t, e) {
    switch (t.rank) {
      case 1:
        return Rb([
          t,
          e
        ]);
      case 2:
        return Ab([
          t,
          e
        ], 0);
      case 3:
        return _b([
          t,
          e
        ], 0);
      case 4:
        return Db([
          t,
          e
        ], 0);
      default:
        throw new z(`concatAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`);
    }
  }
  function sy(t, e) {
    if (Array.isArray(e) || (e = [
      e
    ]), t.rank !== e.length) throw new z(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);
    return Qn(t, e);
  }
  function gm(t, e = 0, n = 1, s, r) {
    return Bf(t, e, n, s, r);
  }
  function sr(t, e, n, s) {
    if (t.rank < 2 || e.rank < 2) throw new ze(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);
    if (e.rank >= 3) {
      const r = t.shape.slice(-1)[0], o = e.shape.slice(-2)[0];
      if (r !== o) throw new ze(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = ${e.shape}`);
    }
    if (t.rank === 2 && e.rank === 2) return Zg({
      a: t,
      b: e,
      transposeA: false,
      transposeB: false,
      bias: s ? ry(t.rank, s, Os()) : null,
      activation: n
    });
    {
      const r = t.shape.slice(), o = r.pop();
      t = P(t, [
        -1,
        o
      ]);
      const i = e.shape.slice(), a = i.pop(), l = i.pop(), c = [
        ...i,
        a
      ], u = Array.from({
        length: e.rank
      }, (f, m) => m === 0 ? e.rank - 2 : m <= e.rank - 2 ? m - 1 : m);
      e = P(He(e, u), [
        l,
        -1
      ]);
      const h = [
        ...r,
        ...c
      ];
      return P(Zg({
        a: t,
        b: e,
        transposeA: false,
        transposeB: false,
        bias: s ? ry(t.rank, s, Os()) : null,
        activation: n
      }), h);
    }
  }
  function xk(t, e, n) {
    return q(() => (Array.isArray(e) ? e = en(e, "int32") : e = ge(e, "int32"), hl(t, e, n)));
  }
  function uh(t) {
    return L(t, t);
  }
  function ry(t, e, n) {
    const s = e.shape;
    if (e.rank !== 1 && e.rank !== t) throw new z(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${t}`);
    if (t === 5) {
      if (n === "channelsFirst") return s.length === 1 ? P(e, [
        1,
        s[0],
        1,
        1,
        1
      ]) : P(e, [
        1,
        s[3],
        s[0],
        s[1],
        s[2]
      ]);
      if (n === "channelsLast") return s.length === 1 ? P(e, [
        1,
        1,
        1,
        1,
        s[0]
      ]) : P(e, [
        1
      ].concat(s));
    } else if (t === 4) {
      if (n === "channelsFirst") return s.length === 1 ? P(e, [
        1,
        s[0],
        1,
        1
      ]) : P(e, [
        1,
        s[2],
        s[0],
        s[1]
      ]);
      if (n === "channelsLast") return s.length === 1 ? P(e, [
        1,
        1,
        1,
        s[0]
      ]) : P(e, [
        1
      ].concat(s));
    } else if (t === 3) {
      if (n === "channelsFirst") return s.length === 1 ? P(e, [
        1,
        s[0],
        1
      ]) : P(e, [
        1,
        s[1],
        s[0]
      ]);
      if (n === "channelsLast") return s.length === 1 ? P(e, [
        1,
        1,
        s[0]
      ]) : P(e, [
        1
      ].concat(s));
    } else if (t < 3) return e;
    throw new z(`Unsupported input rank by biasAdd: ${e.rank}`);
  }
  function Ms(t, e, n) {
    return q(() => (n == null && (n = Os()), It(n), ae(t, ry(t.rank, e, n))));
  }
  function mU(t, e = 1) {
    if (e !== 1) throw new ze(`Support for alpha values other than 1 (${e}) is not implemented yet.`);
    return ll(t);
  }
  function gU(t) {
    return q(() => Ne(t, ae(kt(t), 1)));
  }
  function wk(t, e, n, s) {
    return q(() => fx(t, e, n, s));
  }
  function yU(t) {
    return q(() => {
      const e = ae(0.5, L(0.2, t));
      return Dn(e, 0, 1);
    });
  }
  function hh(t, e, n = false) {
    return n ? t() : e();
  }
  const bU = [
    "fanIn",
    "fanOut",
    "fanAvg"
  ], xU = [
    "normal",
    "uniform",
    "truncatedNormal"
  ];
  function wU(t) {
    Ci(bU, "FanMode", t);
  }
  function vU(t) {
    Ci(xU, "Distribution", t);
  }
  class xs extends $i {
    fromConfigUsesCustomObjects() {
      return false;
    }
    getConfig() {
      return {};
    }
  }
  class sw extends xs {
    apply(e, n) {
      return Tt(e, n);
    }
  }
  sw.className = "Zeros";
  le(sw);
  class ym extends xs {
    apply(e, n) {
      return En(e, n);
    }
  }
  ym.className = "Ones";
  le(ym);
  class rw extends xs {
    constructor(e) {
      if (super(), typeof e != "object") throw new z(`Expected argument of type ConstantConfig but got ${e}`);
      if (e.value === void 0) throw new z(`config must have value set but got ${e}`);
      this.value = e.value;
    }
    apply(e, n) {
      return q(() => L(Re(this.value), En(e, n)));
    }
    getConfig() {
      return {
        value: this.value
      };
    }
  }
  rw.className = "Constant";
  le(rw);
  class ow extends xs {
    constructor(e) {
      super(), this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = e.minval || this.DEFAULT_MINVAL, this.maxval = e.maxval || this.DEFAULT_MAXVAL, this.seed = e.seed;
    }
    apply(e, n) {
      return Co(e, this.minval, this.maxval, n, this.seed);
    }
    getConfig() {
      return {
        minval: this.minval,
        maxval: this.maxval,
        seed: this.seed
      };
    }
  }
  ow.className = "RandomUniform";
  le(ow);
  class iw extends xs {
    constructor(e) {
      super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
    }
    apply(e, n) {
      if (n = n || "float32", n !== "float32" && n !== "int32") throw new ze(`randomNormal does not support dType ${n}.`);
      return gm(e, this.mean, this.stddev, n, this.seed);
    }
    getConfig() {
      return {
        mean: this.mean,
        stddev: this.stddev,
        seed: this.seed
      };
    }
  }
  iw.className = "RandomNormal";
  le(iw);
  class aw extends xs {
    constructor(e) {
      super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
    }
    apply(e, n) {
      if (n = n || "float32", n !== "float32" && n !== "int32") throw new ze(`truncatedNormal does not support dType ${n}.`);
      return Jf(e, this.mean, this.stddev, n, this.seed);
    }
    getConfig() {
      return {
        mean: this.mean,
        stddev: this.stddev,
        seed: this.seed
      };
    }
  }
  aw.className = "TruncatedNormal";
  le(aw);
  class lw extends xs {
    constructor(e) {
      super(), this.gain = e.gain != null ? e.gain : 1;
    }
    apply(e, n) {
      return q(() => {
        if (e.length !== 2 || e[0] !== e[1]) throw new z("Identity matrix initializer can only be used for 2D square matrices.");
        return L(this.gain, Ff(e[0]));
      });
    }
    getConfig() {
      return {
        gain: this.gain
      };
    }
  }
  lw.className = "Identity";
  le(lw);
  function SU(t, e = "channelsLast") {
    let n, s;
    if (It(e), t.length === 2) n = t[0], s = t[1];
    else if ([
      3,
      4,
      5
    ].indexOf(t.length) !== -1) {
      if (e === "channelsFirst") {
        const r = no(t, 2);
        n = t[1] * r, s = t[0] * r;
      } else if (e === "channelsLast") {
        const r = no(t, 0, t.length - 2);
        n = t[t.length - 2] * r, s = t[t.length - 1] * r;
      }
    } else {
      const r = no(t);
      n = Math.sqrt(r), s = Math.sqrt(r);
    }
    return [
      n,
      s
    ];
  }
  class Fn extends xs {
    constructor(e) {
      if (super(), e.scale < 0) throw new z(`scale must be a positive float. Got: ${e.scale}`);
      this.scale = e.scale == null ? 1 : e.scale, this.mode = e.mode == null ? "fanIn" : e.mode, wU(this.mode), this.distribution = e.distribution == null ? "normal" : e.distribution, vU(this.distribution), this.seed = e.seed;
    }
    apply(e, n) {
      const s = SU(e), r = s[0], o = s[1];
      let i = this.scale;
      if (this.mode === "fanIn" ? i /= Math.max(1, r) : this.mode === "fanOut" ? i /= Math.max(1, o) : i /= Math.max(1, (r + o) / 2), this.distribution === "normal") {
        const a = Math.sqrt(i);
        if (n = n || "float32", n !== "float32" && n !== "int32") throw new ze(`${this.getClassName()} does not support dType ${n}.`);
        return Jf(e, 0, a, n, this.seed);
      } else {
        const a = Math.sqrt(3 * i);
        return Co(e, -a, a, n, this.seed);
      }
    }
    getConfig() {
      return {
        scale: this.scale,
        mode: this.mode,
        distribution: this.distribution,
        seed: this.seed
      };
    }
  }
  Fn.className = "VarianceScaling";
  le(Fn);
  class bm extends Fn {
    constructor(e) {
      super({
        scale: 1,
        mode: "fanAvg",
        distribution: "uniform",
        seed: e == null ? null : e.seed
      });
    }
    getClassName() {
      return Fn.className;
    }
  }
  bm.className = "GlorotUniform";
  le(bm);
  class xm extends Fn {
    constructor(e) {
      super({
        scale: 1,
        mode: "fanAvg",
        distribution: "normal",
        seed: e == null ? null : e.seed
      });
    }
    getClassName() {
      return Fn.className;
    }
  }
  xm.className = "GlorotNormal";
  le(xm);
  class wm extends Fn {
    constructor(e) {
      super({
        scale: 2,
        mode: "fanIn",
        distribution: "normal",
        seed: e == null ? null : e.seed
      });
    }
    getClassName() {
      return Fn.className;
    }
  }
  wm.className = "HeNormal";
  le(wm);
  class vm extends Fn {
    constructor(e) {
      super({
        scale: 2,
        mode: "fanIn",
        distribution: "uniform",
        seed: e == null ? null : e.seed
      });
    }
    getClassName() {
      return Fn.className;
    }
  }
  vm.className = "HeUniform";
  le(vm);
  class Sm extends Fn {
    constructor(e) {
      super({
        scale: 1,
        mode: "fanIn",
        distribution: "normal",
        seed: e == null ? null : e.seed
      });
    }
    getClassName() {
      return Fn.className;
    }
  }
  Sm.className = "LeCunNormal";
  le(Sm);
  class $m extends Fn {
    constructor(e) {
      super({
        scale: 1,
        mode: "fanIn",
        distribution: "uniform",
        seed: e == null ? null : e.seed
      });
    }
    getClassName() {
      return Fn.className;
    }
  }
  $m.className = "LeCunUniform";
  le($m);
  class cw extends xs {
    constructor(e) {
      super(), this.DEFAULT_GAIN = 1, this.ELEMENTS_WARN_SLOW = 2e3, this.gain = e.gain == null ? this.DEFAULT_GAIN : e.gain, this.seed = e.seed;
    }
    apply(e, n) {
      return q(() => {
        if (e.length < 2) throw new ze("Shape must be at least 2D.");
        if (n !== "int32" && n !== "float32" && n !== void 0) throw new TypeError(`Unsupported data type ${n}.`);
        n = n;
        const s = X(e.slice(0, -1)), r = e[e.length - 1], o = s * r;
        o > this.ELEMENTS_WARN_SLOW && console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${o}) elements: Slowness may result.`);
        const i = [
          Math.max(r, s),
          Math.min(r, s)
        ], a = gm(i, 0, 1, n, this.seed), l = bx.qr(a, false);
        let c = l[0];
        const h = l[1].flatten().stridedSlice([
          0
        ], [
          Math.min(r, s) * Math.min(r, s)
        ], [
          Math.min(r, s) + 1
        ]);
        return c = L(c, h.sign()), s < r && (c = c.transpose()), L(Re(this.gain), c.reshape(e));
      });
    }
    getConfig() {
      return {
        gain: this.gain,
        seed: this.seed
      };
    }
  }
  cw.className = "Orthogonal";
  le(cw);
  const Bv = {
    constant: "Constant",
    glorotNormal: "GlorotNormal",
    glorotUniform: "GlorotUniform",
    heNormal: "HeNormal",
    heUniform: "HeUniform",
    identity: "Identity",
    leCunNormal: "LeCunNormal",
    leCunUniform: "LeCunUniform",
    ones: "Ones",
    orthogonal: "Orthogonal",
    randomNormal: "RandomNormal",
    randomUniform: "RandomUniform",
    truncatedNormal: "TruncatedNormal",
    varianceScaling: "VarianceScaling",
    zeros: "Zeros"
  };
  function Vv(t, e = {}) {
    return lh(t, Zn.getMap().classNameMap, e, "initializer");
  }
  function gt(t) {
    return ew(t);
  }
  function dt(t) {
    if (typeof t == "string") {
      const e = t in Bv ? Bv[t] : t;
      if (e === "GlorotNormal") return new xm();
      if (e === "GlorotUniform") return new bm();
      if (e === "HeNormal") return new wm();
      if (e === "HeUniform") return new vm();
      if (e === "LeCunNormal") return new Sm();
      if (e === "LeCunUniform") return new $m();
      {
        const n = {};
        return n.className = e, n.config = {}, Vv(n);
      }
    } else return t instanceof xs ? t : Vv(t);
  }
  function oy(t) {
    return Array.isArray(t) && Array.isArray(t[0]);
  }
  function _d(t) {
    return t.length === 0 ? [] : Array.isArray(t[0]) ? t : [
      t
    ];
  }
  function _e(t) {
    let e;
    if (Array.isArray(t)) {
      if (t.length !== 1) throw new z(`Expected Tensor length to be 1; got ${t.length}`);
      e = t[0];
    } else e = t;
    return e;
  }
  function Ze(t) {
    if (Array.isArray(t) && Array.isArray(t[0])) {
      if (t.length === 1) return t = t, t[0];
      throw new z(`Expected exactly 1 Shape; got ${t.length}`);
    } else return t;
  }
  function Dd(t) {
    let e = 0;
    for (const n of t) n.shape.length === 0 ? e += 1 : e += n.shape.reduce((s, r) => s * r);
    return e;
  }
  const Wv = "Variable";
  class vk {
    constructor(e, n = "float32", s = Wv, r = true, o = null) {
      this.dtype = n ?? "float32", this.shape = e.shape, this.id = fk(), s = s ?? Wv, this.originalName = gk(s), this.name = yk(this.originalName), this.trainable_ = r, this.constraint = o, this.val = dx(e, this.trainable_, this.name, this.dtype);
    }
    read() {
      return this.assertNotDisposed(), this.val;
    }
    write(e) {
      return this.assertNotDisposed(), $U(this.val, e), this.val.id !== e.id && (this.val.assign(e), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
    }
    dispose() {
      this.assertNotDisposed(), this.val.dispose();
    }
    assertNotDisposed() {
      if (this.val.isDisposed) throw new Error(`LayersVariable ${this.name} is already disposed.`);
    }
    get trainable() {
      return this.trainable_;
    }
    set trainable(e) {
      this.trainable_ = e, this.val.trainable = e;
    }
  }
  function $U(t, e) {
    if (t.shape.toString() !== e.shape.toString()) throw new Error("Shape mismatch: " + JSON.stringify(t.shape) + " vs. " + JSON.stringify(e.shape));
  }
  function iy(t) {
    return t.map((e) => e.read());
  }
  function uw(t) {
    t.forEach((e) => {
      e[0].write(e[1]);
    });
  }
  class Et {
    constructor(e) {
      this.dtype = e.dtype, this.shape = e.shape, e.shape != null ? this.ndim = e.shape.length : this.ndim = e.ndim, this.maxNDim = e.maxNDim, this.minNDim = e.minNDim, this.axes = e.axes || {};
    }
  }
  class Fs {
    constructor(e, n, s, r, o, i, a) {
      this.dtype = e, this.shape = n, this.sourceLayer = s, this.inputs = r, this.callArgs = o, this.outputTensorIndex = a, this.id = fk(), i != null && (this.originalName = gk(i), this.name = yk(this.originalName)), this.rank = n.length;
    }
  }
  let CU = 0;
  class Cm {
    constructor(e, n) {
      this.callArgs = n, this.id = CU++, this.outboundLayer = e.outboundLayer, this.inboundLayers = e.inboundLayers, this.nodeIndices = e.nodeIndices, this.tensorIndices = e.tensorIndices, this.inputTensors = e.inputTensors, this.outputTensors = e.outputTensors, this.inputMasks = e.inputMasks, this.outputMasks = e.outputMasks, this.inputShapes = e.inputShapes, this.outputShapes = e.outputShapes;
      for (const s of e.inboundLayers) s == null ? void 0 : s.outboundNodes.push(this);
      e.outboundLayer.inboundNodes.push(this);
    }
    getConfig() {
      const e = [];
      for (const n of this.inboundLayers) n != null ? e.push(n.name) : e.push(null);
      return {
        outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
        inboundLayers: e,
        nodeIndices: this.nodeIndices,
        tensorIndices: this.tensorIndices
      };
    }
  }
  let IU = 0;
  class We extends $i {
    constructor(e = {}) {
      super(), this._callHook = null, this._addedWeightNames = [], this._stateful = false, this.id = IU++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = false, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = false, this.inboundNodes = [], this.outboundNodes = [];
      let n = e.name;
      if (!n) {
        const s = this.getClassName();
        n = mr(s) + "_" + mm(s);
      }
      if (this.name = n, this.trainable_ = e.trainable == null ? true : e.trainable, e.inputShape != null || e.batchInputShape != null) {
        let s;
        if (e.batchInputShape != null) s = e.batchInputShape;
        else if (e.inputShape != null) {
          let o = null;
          e.batchSize != null && (o = e.batchSize), s = [
            o
          ].concat(e.inputShape);
        }
        this.batchInputShape = s;
        let r = e.dtype;
        r == null && (r = e.inputDType), r == null && (r = "float32"), this.dtype = r;
      }
      e.weights != null ? this.initialWeights = e.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = false;
    }
    static nodeKey(e, n) {
      return e.name + "_ib-" + n.toString();
    }
    getNodeAtIndex(e, n) {
      if (this.inboundNodes.length === 0) throw new fs(`The layer has never been called and thus has no defined ${n}.`);
      if (this.inboundNodes.length <= e) throw new z(`Asked to get ${n} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
      return this.inboundNodes[e];
    }
    getInputAt(e) {
      return kn(this.getNodeAtIndex(e, "input").inputTensors);
    }
    getOutputAt(e) {
      return kn(this.getNodeAtIndex(e, "output").outputTensors);
    }
    get input() {
      if (this.inboundNodes.length > 1) throw new js(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
      if (this.inboundNodes.length === 0) throw new js(`Layer ${this.name} is not connected, no input to return.`);
      return kn(this.getNodeAtIndex(0, "input").inputTensors);
    }
    get output() {
      if (this.inboundNodes.length === 0) throw new js(`Layer ${this.name} has no inbound nodes.`);
      if (this.inboundNodes.length > 1) throw new js(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
      return kn(this.getNodeAtIndex(0, "output").outputTensors);
    }
    get losses() {
      return this._losses;
    }
    calculateLosses() {
      return this.losses.map((e) => e());
    }
    get updates() {
      return this._updates;
    }
    get built() {
      return this._built;
    }
    set built(e) {
      this._built = e;
    }
    get trainable() {
      return this.trainable_;
    }
    set trainable(e) {
      this._trainableWeights.forEach((n) => n.trainable = e), this.trainable_ = e;
    }
    get trainableWeights() {
      return this.trainable_ ? this._trainableWeights.filter((e) => e.trainable) : [];
    }
    set trainableWeights(e) {
      this._trainableWeights = e;
    }
    get nonTrainableWeights() {
      return this.trainable ? this._trainableWeights.filter((e) => !e.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
    }
    set nonTrainableWeights(e) {
      this._nonTrainableWeights = e;
    }
    get weights() {
      return this.trainableWeights.concat(this.nonTrainableWeights);
    }
    get stateful() {
      return this._stateful;
    }
    resetStates() {
      if (!this.stateful) throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
    }
    assertInputCompatibility(e) {
      const n = et(e);
      if (this.inputSpec == null || this.inputSpec.length === 0) return;
      const s = et(this.inputSpec);
      if (n.length !== s.length) throw new z(`Layer ${this.name} expects ${s.length} inputs, but it received ${n.length} input tensors. Input received: ${e}`);
      for (let r = 0; r < n.length; r++) {
        const o = n[r], i = s[r];
        if (i == null) continue;
        const a = o.rank;
        if (i.ndim != null && a !== i.ndim) throw new z(`Input ${r} is incompatible with layer ${this.name}: expected ndim=${i.ndim}, found ndim=${a}`);
        if (i.maxNDim != null && a > i.maxNDim) throw new z(`Input ${r} is incompatible with layer ${this.name}: expected max_ndim=${i.maxNDim}, found ndim=${a}`);
        if (i.minNDim != null && a < i.minNDim) throw new z(`Input ${r} is incompatible with layer ${this.name}: expected min_ndim=${i.minNDim}, found ndim=${a}.`);
        if (i.dtype != null && o.dtype !== i.dtype) throw new z(`Input ${r} is incompatible with layer ${this.name} : expected dtype=${i.dtype}, found dtype=${o.dtype}.`);
        if (i.axes) {
          const l = o.shape;
          for (const c in i.axes) {
            const u = Number(c), h = i.axes[c], d = u >= 0 ? l[u] : l[l.length + u];
            if (h != null && [
              h,
              null
            ].indexOf(d) === -1) throw new z(`Input ${r} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${h} but got shape ${l}.`);
          }
        }
        if (i.shape != null) for (let l = 0; l < i.shape.length; ++l) {
          const c = i.shape[l], u = o.shape[l];
          if (c != null && u != null && c !== u) throw new z(`Input ${r} is incompatible with layer ${this.name}: expected shape=${i.shape}, found shape=${o.shape}.`);
        }
      }
    }
    call(e, n) {
      return e;
    }
    invokeCallHook(e, n) {
      this._callHook != null && this._callHook(e, n);
    }
    setCallHook(e) {
      this._callHook = e;
    }
    clearCallHook() {
      this._callHook = null;
    }
    apply(e, n) {
      n = n || {}, this.assertNotDisposed();
      const s = et(e), r = TU(e), o = EU(e);
      if (r === o) throw new z("Arguments to apply() must be all SymbolicTensors or all Tensors");
      return Xo(this.name, () => {
        if (!this.built) {
          this.assertInputCompatibility(e);
          const i = [];
          for (const a of et(e)) i.push(a.shape);
          this.build(kn(i)), this.built = true, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && o && (this._refCount = 1);
        }
        if (this.assertInputCompatibility(e), o) {
          let i = this.call(e, n);
          this.supportsMasking && this.setMaskMetadata(e, i);
          const a = et(i), l = [];
          for (let c of a) s.indexOf(c) !== -1 && (c = c.clone()), l.push(c);
          if (i = kn(l), this.activityRegularizer != null) throw new ze("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
          return i;
        } else {
          const i = NU(e), a = this.computeOutputShape(i);
          let l;
          const c = kU(e);
          if (this.warnOnIncompatibleInputShape(Array.isArray(e) ? i[0] : i), a != null && a.length > 0 && Array.isArray(a[0]) ? l = a.map((u, h) => new Fs(c, u, this, et(e), n, this.name, h)) : l = new Fs(c, a, this, et(e), n, this.name), this.addInboundNode(e, l, null, null, i, a, n), this._refCount++, this.activityRegularizer != null) throw new ze("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
          return l;
        }
      });
    }
    warnOnIncompatibleInputShape(e) {
      if (this.batchInputShape != null) if (e.length !== this.batchInputShape.length) console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
      else {
        let n = false;
        this.batchInputShape.forEach((s, r) => {
          s != null && e[r] != null && e[r] !== s && (n = true);
        }), n && console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
      }
    }
    get outputShape() {
      if (this.inboundNodes == null || this.inboundNodes.length === 0) throw new js(`The layer ${this.name} has never been called and thus has no defined output shape.`);
      const e = [];
      for (const n of this.inboundNodes) {
        const s = JSON.stringify(n.outputShapes);
        e.indexOf(s) === -1 && e.push(s);
      }
      if (e.length === 1) {
        const n = this.inboundNodes[0].outputShapes;
        return Array.isArray(n) && Array.isArray(n[0]) && n.length === 1 ? n[0] : n;
      } else throw new js(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
    }
    countParams() {
      if (!this.built) throw new fs(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
      return Dd(this.weights);
    }
    build(e) {
      this.built = true;
    }
    getWeights(e = false) {
      return iy(e ? this.trainableWeights : this.weights);
    }
    setWeights(e) {
      q(() => {
        const n = this.weights;
        if (n.length !== e.length) throw new z(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${n.length} weights. Provided weights: ${e}...`);
        if (n.length === 0) return;
        const s = [], r = iy(n);
        for (let o = 0; o < r.length; ++o) {
          const i = r[o], a = n[o], l = e[o];
          if (!Ue(i.shape, l.shape)) throw new z(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);
          s.push([
            a,
            l
          ]);
        }
        uw(s);
      });
    }
    addWeight(e, n, s, r, o, i, a, l) {
      if (this._addedWeightNames.indexOf(e) !== -1) throw new z(`Duplicate weight name ${e} for layer ${this.name}`);
      this._addedWeightNames.push(e), s == null && (s = "float32"), this.fastWeightInitDuringBuild && (r = l != null ? l() : dt("zeros"));
      const c = r.apply(n, s), u = new vk(c, s, e, i, a);
      return c.dispose(), o != null && this.addLoss(() => o.apply(u.read())), i == null && (i = true), i ? this._trainableWeights.push(u) : this._nonTrainableWeights.push(u), u;
    }
    setFastWeightInitDuringBuild(e) {
      this.fastWeightInitDuringBuild = e;
    }
    addLoss(e) {
      e == null || Array.isArray(e) && e.length === 0 || (e = et(e), this._losses !== void 0 && this._losses !== null && this.losses.push(...e));
    }
    computeOutputShape(e) {
      return e;
    }
    computeMask(e, n) {
      if (!this.supportsMasking) {
        if (n != null) if (Array.isArray(n)) n.forEach((s) => {
          if (s != null) throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
        });
        else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
        return null;
      }
      return n;
    }
    setMaskMetadata(e, n, s) {
      if (!this.supportsMasking) return;
      const r = this.computeMask(e, s), o = et(n), i = et(r);
      if (o.length !== i.length) throw new Error(`${this.name} outputs ${o.length} tensors but ${o.length} masks for those tensors`);
      for (let a = 0; a < o.length; a++) o[a].kerasMask = i[a];
    }
    addInboundNode(e, n, s, r, o, i, a = null) {
      const l = et(e);
      n = et(n), s = et(s), r = et(r), o = _d(o), i = _d(i);
      const c = [], u = [], h = [];
      for (const d of l) c.push(d.sourceLayer), u.push(d.nodeIndex), h.push(d.tensorIndex);
      new Cm({
        outboundLayer: this,
        inboundLayers: c,
        nodeIndices: u,
        tensorIndices: h,
        inputTensors: l,
        outputTensors: n,
        inputMasks: s,
        outputMasks: r,
        inputShapes: o,
        outputShapes: i
      }, a);
      for (let d = 0; d < n.length; d++) n[d].sourceLayer = this, n[d].nodeIndex = this.inboundNodes.length - 1, n[d].tensorIndex = d;
    }
    getConfig() {
      const e = {
        name: this.name,
        trainable: this.trainable
      };
      return this.batchInputShape != null && (e.batchInputShape = this.batchInputShape), this.dtype != null && (e.dtype = this.dtype), e;
    }
    disposeWeights() {
      return this.weights.forEach((e) => e.dispose()), this.weights.length;
    }
    assertNotDisposed() {
      if (this._refCount === 0) throw new Error(`Layer '${this.name}' is already disposed.`);
    }
    dispose() {
      if (!this.built) throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
      if (this._refCount === null) throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
      this.assertNotDisposed();
      let e = 0;
      return --this._refCount === 0 && (e = this.disposeWeights()), {
        refCountAfterDispose: this._refCount,
        numDisposedVariables: e
      };
    }
  }
  function NU(t) {
    t = et(t);
    const e = [];
    for (const n of t) e.push(n.shape);
    return kn(e);
  }
  function kU(t) {
    return "float32";
  }
  function Sk(t, e, n) {
    if ((e == null || n != null && n > 0) && (e = t.sourceLayer, n = t.nodeIndex), e.inboundNodes.length === 0) return [
      t
    ];
    {
      const s = e.inboundNodes[n];
      if (s.inboundLayers.length === 0) return s.inputTensors;
      {
        const r = [];
        for (let o = 0; o < s.inboundLayers.length; o++) {
          const i = s.inputTensors[o], a = s.inboundLayers[o], l = s.nodeIndices[o], c = Sk(i, a, l);
          for (const u of c) r.indexOf(u) === -1 && r.push(u);
        }
        return r;
      }
    }
  }
  function TU(t) {
    let e = true;
    for (const n of et(t)) if (!(n instanceof Fs)) {
      e = false;
      break;
    }
    return e;
  }
  function EU(t) {
    let e = true;
    for (const n of et(t)) if (n instanceof Fs) {
      e = false;
      break;
    }
    return e;
  }
  class fl extends We {
    constructor(e) {
      if (super({
        dtype: e.dtype,
        name: e.name != null ? e.name : mm("input").toString()
      }), e.batchSize == null && (e.batchSize = null), e.sparse == null && (e.sparse = false), this.trainable = false, this.built = true, this.sparse = e.sparse, e.inputShape != null && e.batchInputShape != null) throw new z("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
      let n = e.batchInputShape;
      if (n == null) {
        if (e.inputShape == null) throw new z("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
        n = [
          e.batchSize
        ].concat(e.inputShape);
      } else if (e.batchSize != null) throw new z("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
      const s = e.dtype || "float32";
      this.batchInputShape = n, this.dtype = s, this.inputSpec = [
        {
          shape: n
        }
      ];
      const r = new Fs(this.dtype, this.batchInputShape, this, [], {}, this.name);
      r.nodeIndex = 0, r.tensorIndex = 0, new Cm({
        outboundLayer: this,
        inboundLayers: [],
        nodeIndices: [],
        tensorIndices: [],
        inputTensors: [
          r
        ],
        outputTensors: [
          r
        ],
        inputMasks: [
          null
        ],
        outputMasks: [
          null
        ],
        inputShapes: [
          n
        ],
        outputShapes: [
          n
        ]
      });
    }
    apply(e, n) {
      throw new z(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
    }
    dispose() {
      return {
        refCountAfterDispose: this._refCount,
        numDisposedVariables: 0
      };
    }
    getConfig() {
      return {
        batchInputShape: this.batchInputShape,
        dtype: this.dtype,
        sparse: this.sparse,
        name: this.name
      };
    }
  }
  fl.className = "InputLayer";
  le(fl);
  function $k(t) {
    if (t.batchShape == null && t.shape == null) throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
    if (t.batchShape != null && t.shape != null) throw new z("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
    let e = t.batchShape;
    t.shape != null && e == null && (e = [
      null
    ].concat(t.shape));
    let n = t.dtype;
    return n == null && (n = "float32"), new fl({
      batchInputShape: e,
      name: t.name,
      dtype: n,
      sparse: t.sparse
    }).inboundNodes[0].outputTensors[0];
  }
  function RU(t, e) {
    if (t.dtype == null || t.dtype === e.dtype) return e;
    try {
      return ge(e, t.dtype);
    } catch {
      throw new z(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`);
    }
  }
  class Kr {
    constructor(e) {
      if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, e instanceof Kr) for (const n in e.id2Value) this.id2Value[n] = e.id2Value[n], n in e.id2Mask && (this.id2Mask[n] = e.id2Mask[n]);
      else {
        if (e == null) return;
        for (const n of e) this.add(n.key, n.value);
      }
    }
    add(e, n, s) {
      if (this.id2Value[e.id] == null) this.id2Value[e.id] = RU(e, n), this.name2Id[e.name] = e.id, s != null && (this.id2Mask[e.id] = s);
      else throw new z(`Duplicate key: name=${e.name}, id=${e.id}`);
      return this;
    }
    addFeed(e) {
      this.add(e.key, e.value);
    }
    hasKey(e) {
      return this.id2Value[e.id] != null;
    }
    names() {
      return Object.keys(this.name2Id);
    }
    getValue(e) {
      if (e instanceof Fs) {
        if (this.id2Value[e.id] == null) throw new z(`Nonexistent key: ${e.name}`);
        return this.id2Value[e.id];
      } else {
        const n = this.name2Id[e];
        if (n == null) throw new z(`Feed dict has no SymbolicTensor name: ${e}`);
        return this.id2Value[n];
      }
    }
    getMask(e) {
      if (e instanceof Fs) {
        if (this.id2Value[e.id] == null) throw new z(`Nonexistent key: ${e.name}`);
        return this.id2Mask[e.id];
      } else {
        const n = this.name2Id[e];
        if (n == null) throw new z(`Feed dict has no SymbolicTensor name: ${e}`);
        return this.id2Mask[n];
      }
    }
    disposeMasks() {
      this.id2Mask != null && Oe(this.id2Mask);
    }
  }
  const Od = new hk(), Fd = new hk();
  function AU(t) {
    Od == null ? void 0 : Od.setMaxEntries(t), Fd == null ? void 0 : Fd.setMaxEntries(t);
  }
  function Bl(t, e, n, s) {
    const r = n == null ? false : n.training, o = Array.isArray(t), i = o ? t : [
      t
    ], a = i.map((f) => f.name), l = [], c = e.names();
    for (const f of a) c.indexOf(f) !== -1 ? l.push(e.getValue(f)) : l.push(null);
    const u = a.join(",") + "|" + e.names().sort().join(",");
    let h = Od.get(u), d;
    if (h == null) {
      const f = _U(i, e);
      h = f.sorted, d = f.recipientCounts, Od.put(u, h), Fd.put(u, d);
    }
    d = {}, r || Object.assign(d, Fd.get(u));
    const p = new Kr(e);
    for (let f = 0; f < h.length; ++f) {
      const m = h[f], g = m.sourceLayer;
      if (g instanceof fl) continue;
      const y = [], b = [], w = [];
      let x = false;
      for (const N of m.inputs) {
        const k = p.getValue(N), $ = p.getMask(N);
        y.push(k), b.push($), $ != null && (x = true), r || (d[N.name]--, d[N.name] === 0 && !e.hasKey(N) && a.indexOf(N.name) === -1 && !k.isDisposed && N.sourceLayer.stateful !== true && w.push(k));
      }
      x && (n = n || {}, n.mask = b[0]);
      const S = et(g.apply(y, n));
      let I = null;
      g.supportsMasking && (I = g.computeMask(y, b));
      const E = OU(m), R = Array.isArray(E) ? E : [
        E
      ];
      for (let N = 0; N < R.length; ++N) {
        p.hasKey(R[N]) || p.add(R[N], S[N], Array.isArray(I) ? I[0] : I);
        const k = a.indexOf(R[N].name);
        k !== -1 && (l[k] = S[N]);
      }
      r || Oe(w);
    }
    return p.disposeMasks(), o ? l : l[0];
  }
  function _U(t, e) {
    C(t != null && t.length > 0, () => "Expected at least one fetch, got none");
    let n = [], s = {};
    if (t.length === 1) {
      const r = Uv(t[0], e);
      n = r.sorted, s = r.recipientMap;
    } else {
      const r = /* @__PURE__ */ new Set();
      for (const o of t) {
        const { sorted: i, recipientMap: a } = Uv(o, e);
        for (const l of i) r.has(l.name) || (n.push(l), r.add(l.name));
        for (const l in a) s[l] == null && (s[l] = /* @__PURE__ */ new Set()), a[l].forEach((c) => s[l].add(c));
      }
    }
    return {
      sorted: n,
      recipientCounts: DU(s)
    };
  }
  function DU(t) {
    const e = {};
    for (const n in t) e[n] = t[n].size;
    return e;
  }
  function Uv(t, e) {
    const n = /* @__PURE__ */ new Set(), s = [], r = {};
    for (const a of e.names()) n.add(a);
    const o = [], i = [];
    for (o.push(t); o.length > 0; ) {
      const a = o[o.length - 1];
      if (n.has(a.name)) {
        o.pop();
        continue;
      }
      const l = i[i.length - 1] === o.length - 1;
      if (a.inputs.length === 0 || l) o.pop(), s.push(a), n.add(a.name), l && i.pop();
      else {
        i.push(o.length - 1);
        for (const c of a.inputs) r[c.name] == null && (r[c.name] = /* @__PURE__ */ new Set()), r[c.name].add(a.name), !n.has(c.name) && o.push(c);
      }
    }
    return {
      sorted: s,
      recipientMap: r
    };
  }
  function OU(t) {
    let e;
    if (t.sourceLayer.inboundNodes.length === 1) e = t.sourceLayer.output;
    else {
      let n = null;
      for (let s = 0; s < t.sourceLayer.inboundNodes.length; ++s) for (const r of t.sourceLayer.inboundNodes[s].outputTensors) if (r.id === t.id) {
        n = s;
        break;
      }
      e = t.sourceLayer.getOutputAt(n);
    }
    return e;
  }
  const FU = j();
  FU.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, AU);
  function hw(t, e) {
    return q(() => Gt($e(L(t, t), e, true)));
  }
  class dh extends $i {
    getConfig() {
      return {};
    }
  }
  class dw extends dh {
    constructor(e) {
      super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.axis = e.axis != null ? e.axis : this.defaultAxis;
    }
    apply(e) {
      return q(() => {
        const n = hw(e, this.axis), s = Dn(n, 0, this.maxValue);
        return L(e, Ne(s, ae(Ot(), n)));
      });
    }
    getConfig() {
      return {
        maxValue: this.maxValue,
        axis: this.axis
      };
    }
  }
  dw.className = "MaxNorm";
  le(dw);
  class pw extends dh {
    constructor(e) {
      super(), this.defaultAxis = 0, this.axis = e.axis != null ? e.axis : this.defaultAxis;
    }
    apply(e) {
      return q(() => Ne(e, ae(Ot(), hw(e, this.axis))));
    }
    getConfig() {
      return {
        axis: this.axis
      };
    }
  }
  pw.className = "UnitNorm";
  le(pw);
  class fw extends dh {
    apply(e) {
      return zs(e);
    }
  }
  fw.className = "NonNeg";
  le(fw);
  class mw extends dh {
    constructor(e) {
      super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = e.minValue != null ? e.minValue : this.defaultMinValue, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.rate = e.rate != null ? e.rate : this.defaultRate, this.axis = e.axis != null ? e.axis : this.defaultAxis;
    }
    apply(e) {
      return q(() => {
        const n = hw(e, this.axis), s = ae(L(this.rate, Dn(n, this.minValue, this.maxValue)), L(1 - this.rate, n));
        return L(e, Ne(s, ae(Ot(), n)));
      });
    }
    getConfig() {
      return {
        minValue: this.minValue,
        maxValue: this.maxValue,
        rate: this.rate,
        axis: this.axis
      };
    }
  }
  mw.className = "MinMaxNorm";
  le(mw);
  const Gv = {
    maxNorm: "MaxNorm",
    minMaxNorm: "MinMaxNorm",
    nonNeg: "NonNeg",
    unitNorm: "UnitNorm"
  };
  function Ft(t) {
    return ew(t);
  }
  function Hv(t, e = {}) {
    return lh(t, Zn.getMap().classNameMap, e, "constraint");
  }
  function Lt(t) {
    if (t == null) return null;
    if (typeof t == "string") {
      const n = {
        className: t in Gv ? Gv[t] : t,
        config: {}
      };
      return Hv(n);
    } else return t instanceof dh ? t : Hv(t);
  }
  function LU(t) {
    return new dw(t);
  }
  function PU(t) {
    return new pw(t);
  }
  function zU() {
    return new fw();
  }
  function MU(t) {
    return new mw(t);
  }
  const BU = Object.freeze(Object.defineProperty({
    __proto__: null,
    maxNorm: LU,
    minMaxNorm: MU,
    nonNeg: zU,
    unitNorm: PU
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  function VU() {
    return new sw();
  }
  function WU() {
    return new ym();
  }
  function UU(t) {
    return new rw(t);
  }
  function GU(t) {
    return new ow(t);
  }
  function HU(t) {
    return new iw(t);
  }
  function jU(t) {
    return new aw(t);
  }
  function qU(t) {
    return new lw(t);
  }
  function KU(t) {
    return new Fn(t);
  }
  function XU(t) {
    return new bm(t);
  }
  function YU(t) {
    return new xm(t);
  }
  function ZU(t) {
    return new wm(t);
  }
  function JU(t) {
    return new vm(t);
  }
  function QU(t) {
    return new Sm(t);
  }
  function eG(t) {
    return new $m(t);
  }
  function tG(t) {
    return new cw(t);
  }
  const nG = Object.freeze(Object.defineProperty({
    __proto__: null,
    constant: UU,
    glorotNormal: YU,
    glorotUniform: XU,
    heNormal: ZU,
    heUniform: JU,
    identity: qU,
    leCunNormal: QU,
    leCunUniform: eG,
    ones: WU,
    orthogonal: tG,
    randomNormal: HU,
    randomUniform: GU,
    truncatedNormal: jU,
    varianceScaling: KU,
    zeros: VU
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  async function Wr(t) {
    if (t == null) return;
    const e = [], n = [], s = [];
    for (const r in t) {
      const o = t[r];
      if (typeof o != "number") {
        const i = o;
        e.push(i.data()), n.push(r), s.push(i);
      }
    }
    if (e.length > 0) {
      const r = await Promise.all(e);
      for (let o = 0; o < r.length; ++o) t[n[o]] = r[o][0];
      Oe(s);
    }
  }
  function Ck(t) {
    if (t != null) for (const e in t) {
      const n = t[e];
      typeof n != "number" && n.dispose();
    }
  }
  var jv;
  (function(t) {
    t[t.SILENT = 0] = "SILENT", t[t.VERBOSE = 1] = "VERBOSE";
  })(jv || (jv = {}));
  const sG = 125;
  class ia {
    constructor() {
      this.validationData = null;
    }
    setParams(e) {
      this.params = e;
    }
    async onEpochBegin(e, n) {
    }
    async onEpochEnd(e, n) {
    }
    async onBatchBegin(e, n) {
    }
    async onBatchEnd(e, n) {
    }
    async onTrainBegin(e) {
    }
    async onTrainEnd(e) {
    }
    setModel(e) {
    }
  }
  class Ik {
    constructor(e, n = 10) {
      e == null && (e = []), this.callbacks = e, this.queueLength = n;
    }
    append(e) {
      this.callbacks.push(e);
    }
    setParams(e) {
      for (const n of this.callbacks) n.setParams(e);
    }
    setModel(e) {
      for (const n of this.callbacks) n.setModel(e);
    }
    async onEpochBegin(e, n) {
      n == null && (n = {});
      for (const s of this.callbacks) await s.onEpochBegin(e, n);
    }
    async onEpochEnd(e, n) {
      n == null && (n = {});
      for (const s of this.callbacks) await s.onEpochEnd(e, n);
    }
    async onBatchBegin(e, n) {
      n == null && (n = {});
      for (const s of this.callbacks) await s.onBatchBegin(e, n);
    }
    async onBatchEnd(e, n) {
      n == null && (n = {});
      for (const s of this.callbacks) await s.onBatchEnd(e, n);
    }
    async onTrainBegin(e) {
      e == null && (e = {});
      for (const n of this.callbacks) await n.onTrainBegin(e);
    }
    async onTrainEnd(e) {
      e == null && (e = {});
      for (const n of this.callbacks) await n.onTrainEnd(e);
    }
  }
  class rG extends ia {
    constructor() {
      super();
    }
    async onEpochBegin(e) {
      this.seen = 0, this.totals = {};
    }
    async onBatchEnd(e, n) {
      n == null && (n = {});
      const s = n.size == null ? 0 : n.size;
      this.seen += s;
      for (const r in n) {
        const o = n[r];
        if (typeof o == "number") this.totals.hasOwnProperty(r) || (this.totals[r] = 0), this.totals[r] = this.totals[r] + o * s;
        else {
          let i;
          r in this.totals ? i = this.totals[r] : this.totals[r] = 0;
          const a = q(() => ae(this.totals[r], L(o, s)));
          this.totals[r] = a, i == null ? void 0 : i.dispose();
        }
      }
    }
    async onEpochEnd(e, n) {
      if (n != null) for (const s of this.params.metrics) this.totals[s] != null && (typeof this.totals[s] == "number" ? n[s] = this.totals[s] / this.seen : q(() => {
        const r = L(Ne(1, this.seen), this.totals[s]);
        n[s] = r, this.totals[s].dispose(), Dt(n[s]);
      }));
    }
  }
  class Nk extends ia {
    async onTrainBegin(e) {
      this.epoch = [], this.history = {};
    }
    async onEpochEnd(e, n) {
      n == null && (n = {}), this.epoch.push(e);
      for (const s in n) this.history[s] == null && (this.history[s] = []), this.history[s].push(n[s]);
    }
    async syncData() {
      const e = [], n = [], s = [];
      for (const o in this.history) {
        const i = this.history[o];
        for (let a = 0; a < i.length; ++a) if (typeof i[a] != "number") {
          const l = i[a];
          e.push(l.data()), n.push(o), s.push(a);
        }
      }
      const r = await Promise.all(e);
      for (let o = 0; o < r.length; ++o) this.history[n[o]][s[o]].dispose(), this.history[n[o]][s[o]] = r[o][0];
    }
  }
  class kk extends ia {
    constructor(e, n) {
      if (super(), this.currentEpoch = 0, this.nowFunc = e.nowFunc, this.nextFrameFunc = e.nextFrameFunc || Dx, this.yieldEvery = n || "auto", this.yieldEvery === "auto" && (this.yieldEvery = sG), this.yieldEvery === "never" && e.onYield != null) throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
      $d(this.yieldEvery) && (this.maybeWait = tU(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = e.onTrainBegin, this.trainEnd = e.onTrainEnd, this.epochBegin = e.onEpochBegin, this.epochEnd = e.onEpochEnd, this.batchBegin = e.onBatchBegin, this.batchEnd = e.onBatchEnd, this.yield = e.onYield;
    }
    async maybeWait(e, n, s) {
      const r = [];
      this.yield != null && (await Wr(s), r.push(this.yield(e, n, s))), r.push(this.nextFrameFunc()), await Promise.all(r);
    }
    async onEpochBegin(e, n) {
      this.currentEpoch = e, this.epochBegin != null && (await Wr(n), await this.epochBegin(e, n));
    }
    async onEpochEnd(e, n) {
      const s = [];
      this.epochEnd != null && (await Wr(n), s.push(this.epochEnd(e, n))), this.yieldEvery === "epoch" && s.push(this.nextFrameFunc()), await Promise.all(s);
    }
    async onBatchBegin(e, n) {
      this.batchBegin != null && (await Wr(n), await this.batchBegin(e, n));
    }
    async onBatchEnd(e, n) {
      const s = [];
      this.batchEnd != null && (await Wr(n), s.push(this.batchEnd(e, n))), this.yieldEvery === "batch" ? s.push(this.nextFrameFunc()) : $d(this.yieldEvery) && s.push(this.maybeWait(this.currentEpoch, e, n)), await Promise.all(s);
    }
    async onTrainBegin(e) {
      this.trainBegin != null && (await Wr(e), await this.trainBegin(e));
    }
    async onTrainEnd(e) {
      this.trainEnd != null && (await Wr(e), await this.trainEnd(e));
    }
  }
  function Tk(t, e) {
    return t == null && (t = {}), t instanceof ia ? [
      t
    ] : Array.isArray(t) && t[0] instanceof ia ? t : et(t).map((s) => new kk(s, e));
  }
  class Xn {
    constructor() {
    }
    static registerCallbackConstructor(e, n) {
      C(e >= 0 && Number.isInteger(e), () => `Verbosity level is expected to be an integer >= 0, but got ${e}`), Xn.checkForDuplicate(n), Xn.constructors[e] == null && (Xn.constructors[e] = []), Xn.constructors[e].push(n);
    }
    static checkForDuplicate(e) {
      for (const n in Xn.constructors) Xn.constructors[+n].forEach((r) => {
        if (r === e) throw new z("Duplicate callback constructor.");
      });
    }
    static clear() {
      Xn.constructors = {};
    }
    static createCallbacks(e) {
      const n = [];
      for (const s in Xn.constructors) {
        const r = +s;
        e >= r && n.push(...Xn.constructors[r]);
      }
      return n.map((s) => new s());
    }
  }
  Xn.constructors = {};
  function Ek(t, e, n, s, r, o, i, a, l) {
    const c = new Nk(), u = [
      new rG(),
      ...Xn.createCallbacks(e)
    ];
    t != null && u.push(...t), u.push(c);
    const h = new Ik(u);
    return h.setParams({
      epochs: n,
      initialEpoch: s,
      samples: r,
      steps: o,
      batchSize: i,
      verbose: e,
      doValidation: a,
      metrics: l
    }), {
      callbackList: h,
      history: c
    };
  }
  function Es(t, e = {}, n = false) {
    return lh(t, Zn.getMap().classNameMap, e, "layer", n);
  }
  function Ld(t, e) {
    return q(() => {
      t.dtype !== "float32" && (t = ge(t, "float32"));
      const n = $e(uh(t), e, true), s = wi(n.shape, Ot()), r = Gt(ur(n, s));
      return Ne(t, r);
    });
  }
  function Ii(t, e) {
    return q(() => mt(uh(ve(e, t)), -1));
  }
  function Im(t, e) {
    return q(() => mt(kt(ve(e, t)), -1));
  }
  function ml(t, e) {
    return q(() => {
      const n = ve(t, e), s = Dn(kt(t), Ot(), Number.MAX_VALUE), r = kt(Ne(n, s));
      return L(100, mt(r, -1));
    });
  }
  function oG(t, e) {
    return q(() => {
      const n = Dn(e, Ot(), Number.MAX_VALUE), s = Hn(ae(1, n)), r = Dn(t, Ot(), Number.MAX_VALUE), o = Hn(ae(1, r));
      return mt(uh(ve(s, o)), -1);
    });
  }
  function iG(t, e) {
    return q(() => {
      const n = ur(0, ve(1, L(t, e)));
      return mt(uh(n), -1);
    });
  }
  function aG(t, e) {
    return q(() => {
      const n = ur(0, ve(1, L(t, e)));
      return mt(n, -1);
    });
  }
  function lG(t, e) {
    return q(() => {
      const n = $e(L(t, e), -1), s = ss(L(ve(1, t), e), -1);
      return ur(0, ae(1, ve(s, n)));
    });
  }
  function cG(t, e) {
    return q(() => {
      const n = Math.log(2), s = ve(e, t), r = ve(ae(s, vi(L(-2, s))), n);
      return mt(r, -1);
    });
  }
  function Cc(t, e, n = false) {
    return q(() => {
      if (n) e = nh(e);
      else {
        const s = $e(e, e.shape.length - 1, true);
        e = Ne(e, s);
      }
      return e = Dn(e, Ot(), 1 - Ot()), lt($e(L(ge(t, "float32"), Hn(e)), e.shape.length - 1));
    });
  }
  function Pd(t, e, n = false) {
    return q(() => {
      const s = ge(ul(pU(t)), "int32");
      e = Dn(e, Ot(), 1 - Ot());
      const r = e.shape, o = P(ta(s, r[r.length - 1]), r);
      return Cc(o, e, n);
    });
  }
  function uG(t, e) {
    if (!Ue(t.shape, e.shape)) throw new z(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);
    return q(() => {
      const n = zs(e), s = lt(kt(e));
      return ae(ve(n, L(e, t)), qu(On(s)));
    });
  }
  function Nm(t, e) {
    return q(() => {
      let n;
      return n = Dn(e, Ot(), 1 - Ot()), n = Hn(Ne(n, ve(1, n))), mt(uG(t, n), -1);
    });
  }
  function hG(t, e) {
    return q(() => {
      const n = Dn(t, Ot(), 1), s = Dn(e, Ot(), 1);
      return $e(L(t, Hn(Ne(n, s))), -1);
    });
  }
  function dG(t, e) {
    return q(() => {
      const n = Hn(ae(Ot(), e));
      return mt(ve(e, L(t, n)), -1);
    });
  }
  function gw(t, e) {
    return q(() => {
      const n = Ld(t, -1), s = Ld(e, -1), r = L(n, s);
      return lt($e(r, -1));
    });
  }
  const zd = {
    meanSquaredError: Ii,
    meanAbsoluteError: Im,
    meanAbsolutePercentageError: ml,
    meanSquaredLogarithmicError: oG,
    squaredHinge: iG,
    hinge: aG,
    categoricalHinge: lG,
    logcosh: cG,
    categoricalCrossentropy: Cc,
    sparseCategoricalCrossentropy: Pd,
    binaryCrossentropy: Nm,
    kullbackLeiblerDivergence: hG,
    poisson: dG,
    cosineProximity: gw
  };
  function hg(t) {
    if (typeof t == "string") {
      if (t in zd) return zd[t];
      let e = `Unknown loss ${t}`;
      throw t.toLowerCase().includes("softmaxcrossentropy") && (e = `Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new z(e);
    } else return t;
  }
  function yw(t, e) {
    return q(() => {
      const n = L(0.5, jn(e)), s = nr(wn(e, n), t.dtype);
      return mt(Gn(t, s), -1);
    });
  }
  function bw(t, e) {
    return q(() => nr(Gn(ni(t, -1), ni(e, -1)), "float32"));
  }
  function Rk(t, e) {
    return q(() => ge($e(ys(Gn(t, 1), Gn(e, 1))), "float32"));
  }
  function pG(t, e) {
    return q(() => ge($e(ys(Gn(t, 1), Gn(e, 0))), "float32"));
  }
  function fG(t, e) {
    return q(() => ge($e(ys(Gn(t, 0), Gn(e, 1))), "float32"));
  }
  function Ak(t, e) {
    return q(() => {
      const n = Rk(t, e), s = fG(t, e), r = ae(n, s);
      return ge(Wt(wn(r, 0), Ne(n, r), 0), "float32");
    });
  }
  function mG(t, e) {
    return q(() => {
      const n = Rk(t, e), s = pG(t, e), r = ae(n, s);
      return ge(Wt(wn(r, 0), Ne(n, r), 0), "float32");
    });
  }
  function _k(t, e) {
    return Nm(t, e);
  }
  function Dk(t, e) {
    return t.rank === e.rank && (t = Io(t, [
      t.rank - 1
    ])), e = ni(e, -1), e.dtype !== t.dtype && (e = ge(e, t.dtype)), ge(Gn(t, e), "float32");
  }
  const gG = Ii, yG = Ii, bG = Im, xG = Im, wG = ml, vG = ml, xw = Cc, SG = gw, Ok = Pd, Md = {
    binaryAccuracy: yw,
    categoricalAccuracy: bw,
    precision: Ak,
    categoricalCrossentropy: xw,
    sparseCategoricalCrossentropy: Ok,
    mse: gG,
    MSE: yG,
    mae: bG,
    MAE: xG,
    mape: wG,
    MAPE: vG,
    cosine: SG
  };
  function $G(t) {
    if (typeof t == "string" && t in Md) return Md[t];
    if (typeof t != "string" && t != null) return t;
    throw new z(`Unknown metric ${t}`);
  }
  function Oh(t) {
    if (qs(t !== null, `Unknown LossOrMetricFn ${t}`), typeof t == "string") return t;
    {
      let e;
      for (const n of Object.keys(zd)) if (zd[n] === t) {
        e = n;
        break;
      }
      if (e !== void 0) return e;
      for (const n of Object.keys(Md)) if (Md[n] === t) {
        e = n;
        break;
      }
      return e !== void 0 ? e : t.name;
    }
  }
  function CG(t) {
    const e = {
      Adagrad: () => Fo.adagrad(0.01),
      Adadelta: () => Fo.adadelta(1, 0.95, Ot()),
      Adam: () => Fo.adam(1e-3, 0.9, 0.999, Ot()),
      Adamax: () => Fo.adamax(2e-3, 0.9, 0.999, Ot(), 0),
      RMSProp: () => Fo.rmsprop(1e-3, 0.9, 0, Ot()),
      SGD: () => Fo.sgd(0.01)
    };
    if (e.adagrad = e.Adagrad, e.adadelta = e.Adadelta, e.adam = e.Adam, e.adamax = e.Adamax, e.rmsprop = e.RMSProp, e.sgd = e.SGD, t in e) return e[t]();
    throw new z(`Unknown Optimizer ${t}`);
  }
  const qv = 1 * 1024 * 1024;
  function Kv(t, e, n = false) {
    if (t == null || typeof t != "object" || Object.getPrototypeOf(t) !== Object.prototype || !ay(t)) throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
    if (n) {
      const s = JSON.stringify(t);
      s.length > qv && console.warn(`User-defined metadata of model "${e}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${qv}.`);
    }
  }
  function ay(t) {
    if (t === null) return true;
    if (typeof t == "object") if (Object.getPrototypeOf(t) === Object.prototype) {
      const e = Object.keys(t);
      for (const n of e) if (typeof n != "string" || !ay(t[n])) return false;
      return true;
    } else if (Array.isArray(t)) {
      for (const e of t) if (!ay(e)) return false;
      return true;
    } else return false;
    else {
      const e = typeof t;
      return e === "string" || e === "number" || e === "boolean";
    }
  }
  function IG(t, e, n, s = console.log) {
    const r = kG(t), o = [
      "Layer (type)",
      "Input Shape",
      "Output shape",
      "Param #"
    ];
    r ? (e = e || 90, n = n || [
      0.32,
      0.61,
      0.89,
      1
    ]) : (e = e || 115, n = n || [
      0.24,
      0.48,
      0.7,
      0.8,
      1
    ]), n[n.length - 1] <= 1 && (n = n.map((u) => Math.floor(e * u)));
    let i;
    if (!r) {
      o.push("Receives inputs"), i = [];
      for (const u in t.nodesByDepth) i.push(...t.nodesByDepth[u]);
    }
    s("_".repeat(e)), Bd(o, n, s), s("=".repeat(e));
    const a = t.layers;
    for (let u = 0; u < a.length; ++u) r ? TG(a[u], n, s) : EG(a[u], n, i, s), s((u === a.length - 1 ? "=" : "_").repeat(e));
    t.checkTrainableWeightsConsistency();
    const l = NG(t), c = Dd(t.nonTrainableWeights);
    s(`Total params: ${l + c}`), s(`Trainable params: ${l}`), s(`Non-trainable params: ${c}`), s("_".repeat(e));
  }
  function NG(t) {
    let e;
    return t.collectedTrainableWeights != null ? e = Dd(t.collectedTrainableWeights) : e = Dd(t.trainableWeights), e;
  }
  function kG(t) {
    let e = true;
    const n = [], s = [];
    for (const r in t.nodesByDepth) n.push(t.nodesByDepth[r]);
    for (const r of n) {
      if (r.length > 1 || r.length === 1 && r[0].inboundLayers.length > 1) {
        e = false;
        break;
      }
      s.push(...r);
    }
    if (e) for (const r of t.layers) {
      let o = false;
      for (const i of r.inboundNodes) if (s.indexOf(i) !== -1) if (o) {
        e = false;
        break;
      } else o = true;
      if (!e) break;
    }
    return e;
  }
  function Bd(t, e, n = console.log) {
    let s = "";
    for (let r = 0; r < t.length; ++r) r > 0 && (s = s.slice(0, s.length - 1) + " "), s += t[r], s = s.slice(0, e[r]), s += " ".repeat(e[r] - s.length);
    n(s);
  }
  function TG(t, e, n) {
    let s, r;
    try {
      r = t.inboundNodes.map((l) => JSON.stringify(l.inputShapes)).join(",");
    } catch {
      r = "multiple";
    }
    try {
      s = JSON.stringify(t.outputShape);
    } catch {
      s = "multiple";
    }
    const o = t.name, i = t.getClassName(), a = [
      `${o} (${i})`,
      r,
      s,
      t.countParams().toString()
    ];
    Bd(a, e, n);
  }
  function EG(t, e, n, s) {
    let r, o;
    try {
      o = t.inboundNodes.map((h) => JSON.stringify(h.inputShapes)).join(",");
    } catch {
      o = "multiple";
    }
    try {
      r = JSON.stringify(t.outputShape);
    } catch {
      r = "multiple";
    }
    const i = [];
    for (const h of t.inboundNodes) if (!(n != null && n.length > 0 && n.indexOf(h) === -1)) for (let d = 0; d < h.inboundLayers.length; ++d) {
      const p = h.inboundLayers[d].name, f = h.nodeIndices[d], m = h.tensorIndices[d];
      i.push(`${p}[${f}][${m}]`);
    }
    const a = t.name, l = t.getClassName(), c = i.length === 0 ? "" : i[0], u = [
      `${a} (${l})`,
      o,
      r,
      t.countParams().toString(),
      c
    ];
    Bd(u, e, s);
    for (let h = 1; h < i.length; ++h) Bd([
      "",
      "",
      "",
      "",
      i[h]
    ], e, s);
  }
  function Fk(t, e, n) {
    return (t === "inboundNodes" || t === "outputLayers" || t === "inputLayers") && e === 0 && typeof n == "string";
  }
  function Ic(t, e) {
    if (t === null) return null;
    if (typeof t == "string") return Mo(t);
    if (typeof t == "number" || typeof t == "boolean") return t;
    if (t instanceof Array) {
      const n = [], s = t.length;
      for (let r = 0; r < s; ++r) {
        const o = t[r];
        Fk(e, r, o) ? n.push(o) : n.push(Ic(o, e));
      }
      return n;
    } else {
      const n = {};
      for (const s of Object.keys(t)) {
        const r = t[s];
        if (s === "name" && typeof r == "string") n[s] = r;
        else {
          const o = Mo(s);
          n[o] = Ic(r, o);
        }
      }
      return n;
    }
  }
  function ly(t, e) {
    if (t == null) return null;
    if (typeof t == "string") return mr(t);
    if (typeof t == "number" || typeof t == "boolean") return t;
    if (t instanceof Array) {
      const n = [], s = t.length;
      for (let r = 0; r < s; ++r) {
        const o = t[r];
        Fk(e, r, o) ? n.push(o) : n.push(ly(o, e));
      }
      return n;
    } else {
      const n = {};
      for (const s of Object.keys(t)) {
        const r = t[s], o = mr(s);
        (s === "name" || s === "className") && typeof r == "string" ? n[o] = r : n[o] = ly(r, s);
      }
      return n;
    }
  }
  const km = "4.19.0";
  const RG = (t) => {
    const e = Object.keys(t);
    if (e.length === 0) return false;
    const n = e[0].split("/");
    return !isNaN(parseInt(n[n.length - 1], 10));
  };
  class Ss extends We {
    constructor(e) {
      if (super({}), this.containerNodes = /* @__PURE__ */ new Set(), this.name = e.name, this.name == null) {
        const b = this.getClassName().toLowerCase();
        this.name = mm(b);
      }
      if (this.supportsMasking = false, this.trainable_ = true, Array.isArray(e.inputs) ? this.inputs = e.inputs.slice() : this.inputs = [
        e.inputs
      ], Array.isArray(e.outputs) ? this.outputs = e.outputs.slice() : this.outputs = [
        e.outputs
      ], to(this.inputs).length !== this.inputs.length) throw new z(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((b) => b.name)}`);
      to(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((b) => b.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
      for (const b of this.outputs) {
        const w = b.sourceLayer, x = b.nodeIndex, S = b.tensorIndex;
        this.outputLayers.push(w), this.outputLayersNodeIndices.push(x), this.outputLayersTensorIndices.push(S);
      }
      for (const b of this.inputs) {
        const w = b.sourceLayer, x = b.nodeIndex, S = b.tensorIndex;
        qs(x === 0, "input layer has >1 nodes"), qs(S === 0, "input layer has >1 tensors"), this.inputLayers.push(w), this.inputLayersNodeIndices.push(x), this.inputLayersTensorIndices.push(S);
      }
      this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
      for (let b = 0; b < this.inputLayers.length; b++) {
        const w = this.inputLayers[b];
        if (!(w instanceof fl)) throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${b} (0-based) originates from layer type ${w.getClassName()}.`);
        this.inputNames.push(w.name), this.feedInputShapes.push(w.batchInputShape), this.feedInputNames.push(w.name);
      }
      for (const b of this.outputLayers) this.outputNames.push(b.name);
      this.internalInputShapes = this.inputs.map((b) => b.shape), this.internalOutputShapes = this.outputs.map((b) => b.shape);
      const n = {}, s = {}, r = {}, o = {}, i = {}, a = [], l = (b, w, x, S, I, E) => {
        (S == null || I == null || E == null) && (S = b.sourceLayer, I = b.nodeIndex, E = b.tensorIndex);
        const R = S.inboundNodes[I];
        if (x.indexOf(R) !== -1) throw new fs(`The tensor ${b.name} at layer "${S.name}" is part of a cycle.`);
        if (w.indexOf(R) !== -1) return;
        this.containerNodes.add(Ss.nodeKey(S, I)), S.id in i || (i[S.id] = Object.keys(i).length), x.indexOf(R) === -1 && x.push(R);
        const N = R.inboundLayers.length;
        for (let k = 0; k < N; k++) {
          const $ = R.inputTensors[k], F = R.inboundLayers[k], M = R.nodeIndices[k], U = R.tensorIndices[k];
          l($, w, x, F, M, U);
        }
        for (w.push(R); x.indexOf(R) >= 0; ) x.splice(x.indexOf(R), 1);
        a.push(R);
      }, c = [], u = [];
      for (const b of this.outputs) l(b, c, u);
      const h = a.slice().reverse();
      for (const b of h) {
        s[b.id] = b, b.id in n || (n[b.id] = 0);
        let w = n[b.id];
        const x = r[b.outboundLayer.id] == null ? 0 : r[b.outboundLayer.id];
        w = Math.max(w, x), r[b.outboundLayer.id] = w, o[b.outboundLayer.id] = b.outboundLayer, n[b.id] = w;
        for (let S = 0; S < b.inboundLayers.length; S++) {
          const I = b.inboundLayers[S], E = b.nodeIndices[S], R = I.inboundNodes[E], N = n[R.id] == null ? 0 : n[R.id];
          n[R.id] = Math.max(w + 1, N), s[R.id] = R;
        }
      }
      const d = {};
      for (const b in n) {
        const w = n[b];
        w in d || (d[w] = []), d[w].push(s[b]);
      }
      const p = {};
      for (const b in r) {
        const w = r[b];
        w in p || (p[w] = []), p[w].push(o[b]);
      }
      let f = Object.keys(p).map((b) => parseInt(b, 10)).sort(Ah);
      this.layers = [];
      for (const b of f) {
        const w = p[b];
        w.sort((x, S) => {
          const I = i[x.id], E = i[S.id];
          return I < E ? -1 : I > E ? 1 : 0;
        });
        for (const x of w) x instanceof Ss && this.internalContainerRefs.push(x), this.layers.push(x);
      }
      this.layersByDepth = p, f = Object.keys(d).map((b) => parseInt(b, 10)).sort(Ah);
      const m = this.inputs.slice(), g = [];
      for (const b of f) for (const w of d[b]) {
        const x = w.outboundLayer;
        if (x != null) {
          for (const S of w.inputTensors) if (m.indexOf(S) === -1) throw new fs(`Graph disconnected: cannot obtain value for tensor ${S} at layer "${x.name}". The following previous layers were accessed without issue: ${g}`);
          for (const S of w.outputTensors) m.push(S);
          g.push(x.name);
        }
      }
      this.nodesByDepth = d;
      const y = this.layers.map((b) => b.name);
      for (const b of y) {
        const w = y.filter((x) => x === b).length;
        if (w !== 1) throw new fs(`The name "${b}" is used ${w} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(y));
      }
      this.outboundNodes = [], this.inboundNodes = [], new Cm({
        outboundLayer: this,
        inboundLayers: [],
        nodeIndices: [],
        tensorIndices: [],
        inputTensors: this.inputs,
        outputTensors: this.outputs,
        inputMasks: this.inputs.map((b) => null),
        outputMasks: this.outputs.map((b) => null),
        inputShapes: this.inputs.map((b) => b.shape),
        outputShapes: this.outputs.map((b) => b.shape)
      }), this.built = true, this._refCount = 1;
    }
    assertNotDisposed() {
      if (this._refCount === 0) throw new Error(`Container '${this.name}' is already disposed.`);
    }
    dispose() {
      this.assertNotDisposed();
      const e = {
        refCountAfterDispose: null,
        numDisposedVariables: 0
      };
      if (--this._refCount === 0) {
        for (const n of this.layers) e.numDisposedVariables += n.dispose().numDisposedVariables;
        for (const n of this.internalContainerRefs) e.numDisposedVariables += n.dispose().numDisposedVariables;
      }
      return e.refCountAfterDispose = this._refCount, e;
    }
    get trainable() {
      return this.trainable_;
    }
    set trainable(e) {
      this.layers.forEach((n) => {
        n._trainableWeights.forEach((s) => s.trainable = e);
      }), this.trainable_ = e;
    }
    get trainableWeights() {
      if (this._trainableWeights.length > 0) throw new z("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
      if (!this.trainable) return [];
      let e = [];
      for (const n of this.layers) e = e.concat(n.trainableWeights);
      return e;
    }
    get nonTrainableWeights() {
      const e = [];
      for (const n of this.layers) e.push(...n.nonTrainableWeights);
      if (!this.trainable) {
        const n = [];
        for (const s of this.layers) n.push(...s.trainableWeights);
        return n.concat(e);
      }
      return e;
    }
    get weights() {
      return this.trainableWeights.concat(this.nonTrainableWeights);
    }
    loadWeights(e, n = true) {
      const s = {};
      let r = 0;
      const o = RG(e);
      o && this.parseWeights(e);
      for (const a of this.layers) for (const [l, c] of a.weights.entries()) {
        const u = o ? `${c.name.split("/").slice(0, -1).join("/") + "/"}${l}` : c.originalName;
        if (s[u] != null) throw new z(`Duplicate weight name: ${u}`);
        s[u] = c, r++;
      }
      const i = [];
      for (const a in e) {
        let l = a;
        if (s[a] == null) {
          const c = a.split("/");
          l = c.slice(0, -2).concat([
            c[c.length - 1]
          ]).join("/");
        }
        if (s[l] != null) i.push([
          s[l],
          e[a]
        ]);
        else if (n) throw new z(`Provided weight data has no target variable: ${a}`);
        delete s[l];
      }
      if (n) {
        const a = [];
        for (const l in s) a.push(l);
        if (a.length > 0) throw new z(`${a.length} of ${r} weights are not set: ${a}`);
      }
      uw(i);
    }
    parseWeights(e) {
      for (const n in Object.keys(e)) {
        const s = n.split("/"), r = [
          "vars",
          "layer_checkpoint_dependencies"
        ], o = s.map((i) => i.startsWith("_") ? i.slice(1) : i).filter((i) => !r.includes(i)).join("/");
        o !== n && (e[o] = e[n], delete e[n]);
      }
    }
    updatedConfig() {
      const e = this.getConfig(), n = {};
      return n.className = this.getClassName(), n.config = e, n.kerasVersion = `tfjs-layers ${km}`, n.backend = "TensorFlow.js", n;
    }
    toJSON(e, n = true) {
      const s = ly(this.updatedConfig());
      return n ? JSON.stringify(s) : s;
    }
    call(e, n) {
      return q(() => {
        e = et(e);
        const s = new Kr();
        for (let r = 0; r < this.inputs.length; ++r) s.add(this.inputs[r], e[r]);
        return Bl(this.outputs, s, n);
      });
    }
    computeMask(e, n) {
      return q(() => {
        e = et(e);
        let s;
        return n == null ? s = li(null, e.length) : s = et(n), this.runInternalGraph(e, s)[1];
      });
    }
    computeOutputShape(e) {
      const n = _d(e);
      if (n.length !== this.inputLayers.length) throw new z(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);
      const s = {};
      for (let a = 0; a < n.length; a++) {
        const l = this.inputLayers[a], c = n[a], u = l.name + "_0_0";
        s[u] = c;
      }
      const r = Object.keys(this.nodesByDepth).map((a) => parseInt(a, 10)).sort(Ah);
      if (r.length > 1) for (const a of r) {
        const l = this.nodesByDepth[a];
        for (const c of l) {
          const u = c.outboundLayer;
          if (this.inputLayers.map((m) => m.id).indexOf(u.id) !== -1) continue;
          const h = [];
          for (let m = 0; m < c.inboundLayers.length; m++) {
            const g = c.inboundLayers[m], y = c.nodeIndices[m], b = c.tensorIndices[m], w = `${g.name}_${y}_${b}`, x = s[w];
            h.push(x);
          }
          const d = u.computeOutputShape(kn(h)), p = _d(d), f = u.inboundNodes.indexOf(c);
          for (let m = 0; m < p.length; m++) {
            const g = `${u.name}_${f}_${m}`;
            s[g] = p[m];
          }
        }
      }
      const o = [], i = [];
      for (let a = 0; a < this.outputLayers.length; a++) {
        const l = this.outputLayers[a], c = this.outputLayersNodeIndices[a], u = this.outputLayersTensorIndices[a], h = `${l.name}_${c}_${u}`;
        i.push(h);
      }
      for (let a = 0; a < i.length; a++) {
        const l = i[a];
        qs(l in s), o.push(s[l]);
      }
      return kn(o);
    }
    runInternalGraph(e, n) {
      n == null && (n = li(null, e.length));
      const s = {};
      for (let l = 0; l < this.inputs.length; ++l) {
        const c = this.inputs[l], u = e[l], h = n[l];
        s[c.id] = [
          u,
          h
        ];
      }
      const r = Object.keys(this.nodesByDepth).map((l) => parseInt(l, 10)).sort(Ah);
      for (const l of r) {
        const c = this.nodesByDepth[l];
        for (const u of c) {
          const h = u.outboundLayer, d = u.inputTensors, p = u.outputTensors, f = new Array();
          for (const m of d) m.id in s && f.push(s[m.id]);
          if (f.length === d.length) {
            let m = {}, g, y, b, w;
            if (u.callArgs != null && (m = u.callArgs), f.length === 1) {
              const [x, S] = f[0];
              m.mask == null && (m.mask = S), b = et(h.call(x, m)), w = et(h.computeMask(x, S)), g = [
                x
              ], y = [
                S
              ];
            } else g = f.map((x) => x[0]), y = f.map((x) => x[1]), m.mask == null && (m.mask = y), b = et(h.call(g, m)), w = et(h.computeMask(g, y));
            if (h.activityRegularizer) throw new ze("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
            for (let x = 0; x < p.length; ++x) {
              const S = p[x], I = b[x], E = w[x];
              s[S.id] = [
                I,
                E
              ];
            }
          }
        }
      }
      const o = [], i = [], a = [];
      for (const l of this.outputs) {
        qs(l.id in s, `Could not compute output ${l.name} : ${l.id}`);
        const [c, u] = s[l.id];
        a.push(c.shape), o.push(c), i.push(u);
      }
      return [
        o,
        i,
        a
      ];
    }
    buildNodeConversionMap(e) {
      const n = {};
      let s;
      for (const r of this.layers) {
        s = r instanceof Ss ? 1 : 0;
        for (let o = 0; o < r.inboundNodes.length; o++) {
          const i = Ss.nodeKey(r, o);
          this.containerNodes.has(i) && (n[i] = s, s += 1);
        }
      }
      return n;
    }
    getLayer(e, n) {
      if (n != null) return this.findLayer(n);
      if (e == null) throw new z("Provide either a layer name or layer index");
      if (typeof e == "number") return this.findLayer(e);
      for (const s of this.layers) if (s.name === e) return s;
      throw new z(`No such layer: ${e}`);
    }
    findLayer(e) {
      if (this.layers.length <= e) throw new z(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);
      return this.layers[e];
    }
    calculateLosses() {
      return q(() => {
        const e = [];
        for (const n of this.layers) for (let s = 0; s < n.inboundNodes.length; ++s) {
          const r = Ss.nodeKey(n, s);
          this.containerNodes.has(r) && e.push(...n.calculateLosses());
        }
        return e;
      });
    }
    getConfig() {
      const e = {
        name: this.name
      }, n = this.buildNodeConversionMap(this.layers), s = [];
      for (const i of this.layers) {
        const a = i.getClassName(), l = i.getConfig(), c = [];
        for (let h = 0; h < i.inboundNodes.length; h++) {
          const d = i.inboundNodes[h], p = Ss.nodeKey(i, h);
          let f = {};
          if (this.containerNodes.has(p)) {
            if (d.callArgs) try {
              JSON.stringify(d.callArgs), f = d.callArgs;
            } catch {
              console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), f = {};
            }
            if (d.inboundLayers.length > 0) {
              const m = [];
              for (let g = 0; g < d.inboundLayers.length; g++) {
                const y = d.inboundLayers[g], b = d.nodeIndices[g], w = d.tensorIndices[g], x = Ss.nodeKey(y, b);
                let S = n[x];
                S == null && (S = 0), m.push([
                  y.name,
                  S,
                  w,
                  f
                ]);
              }
              c.push(m);
            }
          }
        }
        const u = {};
        u.name = i.name, u.className = a, u.config = l, u.inboundNodes = c, s.push(u);
      }
      e.layers = s;
      const r = [];
      for (let i = 0; i < this.inputLayers.length; i++) {
        const a = this.inputLayers[i], l = this.inputLayersNodeIndices[i], c = Ss.nodeKey(a, l);
        if (!this.containerNodes.has(c)) continue;
        let u = n[c];
        u == null && (u = 0);
        const h = this.inputLayersTensorIndices[i];
        r.push([
          a.name,
          u,
          h
        ]);
      }
      e.inputLayers = r;
      const o = [];
      for (let i = 0; i < this.outputLayers.length; i++) {
        const a = this.outputLayers[i], l = this.outputLayersNodeIndices[i], c = Ss.nodeKey(a, l);
        if (!this.containerNodes.has(c)) continue;
        let u = n[c];
        u == null && (u = 0);
        const h = this.outputLayersTensorIndices[i];
        o.push([
          a.name,
          u,
          h
        ]);
      }
      return e.outputLayers = o, e;
    }
    static fromConfig(e, n, s = {}, r = false) {
      const o = {}, i = {};
      function a(g, y) {
        g.name in i ? i[g.name].push(y) : i[g.name] = [
          y
        ];
      }
      function l(g, y) {
        const b = [];
        let w;
        for (const x of y) {
          const S = x[0], I = x[1], E = x[2];
          if (w = x[3] == null ? {} : x[3], !(S in o)) {
            a(g, y);
            return;
          }
          const R = o[S];
          if (R.inboundNodes.length <= I) {
            a(g, y);
            return;
          }
          const N = R.inboundNodes[I];
          b.push(N.outputTensors[E]);
        }
        b.length > 0 && g.apply(kn(b), w);
      }
      function c(g) {
        const y = g.name, b = Es(g, n.customObjects != null ? n.customObjects : {});
        b.setFastWeightInitDuringBuild(r), o[y] = b, g.inboundNodes.forEach((x) => {
          if (!(x instanceof Array)) throw new z(`Corrupted configuration, expected array for nodeData: ${x}`);
          a(b, x);
        });
      }
      const u = n.name, h = n.layers;
      for (const g of h) c(g);
      for (; !eU(i); ) for (const g of h) {
        const y = o[g.name];
        if (y.name in i) {
          const b = i[y.name];
          delete i[y.name];
          for (const w of b) l(y, w);
        }
      }
      const d = [], p = [], f = n.inputLayers;
      for (const g of f) {
        const y = g[0], b = g[1], w = g[2];
        qs(y in o);
        const S = o[y].inboundNodes[b].outputTensors;
        d.push(S[w]);
      }
      const m = n.outputLayers;
      for (const g of m) {
        const y = g[0], b = g[1], w = g[2];
        qs(y in o);
        const S = o[y].inboundNodes[b].outputTensors;
        p.push(S[w]);
      }
      return new e({
        inputs: d,
        outputs: p,
        name: u
      });
    }
    get stateful() {
      if (this._stateful) throw new z("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
      for (const e of this.layers) if (e.stateful) return true;
      return false;
    }
    resetStates() {
      q(() => {
        this.layers.forEach((e) => {
          e.stateful && e.resetStates();
        });
      });
    }
  }
  function AG(t, e, n) {
    const s = e.length;
    if (t == null || Array.isArray(t) && t.length === 0) return e.map((r) => null);
    if (s === 1) return Array.isArray(t) && t.length === 1 ? t : typeof t == "object" && e[0] in t ? [
      t[e[0]]
    ] : [
      t
    ];
    if (Array.isArray(t)) {
      if (t.length !== s) throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);
      return t;
    } else if (typeof t == "object" && Object.keys(t).length > 0 && typeof t[Object.keys(t)[0]] == "object") {
      const r = [];
      return e.forEach((o) => {
        o in t ? r.push(t[o]) : r.push(null);
      }), r;
    } else throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`);
  }
  function Lk(t, e) {
    return AG(t, e, "classWeight");
  }
  async function Pk(t, e, n, s) {
    if (n != null) {
      const r = q(() => {
        if (t.shape.length === 1) return er(t);
        if (t.shape.length === 2) {
          if (t.shape[1] > 1) return ni(t, 1);
          if (t.shape[1] === 1) return P(t, [
            t.shape[0]
          ]);
          throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
        } else throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
      }), o = Array.from(await r.data());
      Oe(r);
      const i = [];
      return o.forEach((a) => {
        if (n[a] == null) throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);
        i.push(n[a]);
      }), en(i, "float32");
    } else return null;
  }
  function _G(t, e) {
    return L(t, e);
  }
  const DG = 32;
  function zk(t, e) {
    let n, s;
    const r = e;
    n = r.xs, s = r.ys, C(n != null && s != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`);
    const o = Xv("input", t.inputNames, n), i = Xv("output", t.outputNames, s), a = o[0].shape[0];
    C(o.length === t.inputs.length, () => `LayersModel has ${t.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(t.inputNames)})`), C(i.length === t.outputs.length, () => `LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(t.outputNames)})`);
    for (let l = 0; l < o.length; l++) C(o[l].shape[0] === a, () => `Batch size mismatch: input ${t.inputNames[l]} has ${o[l].shape[0]}; expected  ${a} based on input ${t.inputNames[0]}.`);
    for (let l = 0; l < i.length; l++) C(i[l].shape[0] === a, () => `Batch size mismatch: output ${t.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${t.inputNames[0]}.`);
    return {
      xs: o,
      ys: i
    };
  }
  function Xv(t, e, n) {
    if (n instanceof Xe) return [
      n
    ];
    if (Array.isArray(n)) return C(n.length === e.length, () => `Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`), n;
    {
      const s = [];
      for (const r of e) {
        if (n[r] == null) throw new z(`The feature data generated by the dataset lacks the required ${t} key '${r}'.`);
        s.push(n[r]);
      }
      return s;
    }
  }
  function OG(t) {
    if (t.length === 3) throw new ze("Validation with sample weights is not implemented yet.");
    return {
      xs: t[0],
      ys: t[1]
    };
  }
  async function FG(t, e, n) {
    const s = n.batchesPerEpoch != null;
    if (C(t.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), C(n != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), C(n.epochs != null && n.epochs > 0 && Number.isInteger(n.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`), C(!s || n.batchesPerEpoch > 0 && Number.isInteger(n.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`), C(n.validationSplit == null, () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."), t.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
    t.isTraining = true;
    try {
      const r = n.validationData != null;
      let o, i;
      if (r) if (Yv(n.validationData)) C(n.validationBatches == null || n.validationBatches > 0 && Number.isInteger(n.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`);
      else {
        const g = OG(n.validationData);
        o = g.xs, i = g.ys;
      }
      const a = t.makeTrainFunction(), l = t.getDedupedMetricsNames();
      let c;
      r ? c = l.slice().concat(l.map((g) => "val_" + g)) : c = l.slice();
      const u = Tk(n.callbacks, n.yieldEvery), h = n.verbose == null ? 1 : n.verbose, { callbackList: d, history: p } = Ek(u, h, n.epochs, null, null, LG(e, n), null, r, c);
      d.setModel(t), t.history = p, await d.onTrainBegin(), t.stopTraining_ = false;
      let f = n.initialEpoch == null ? 0 : n.initialEpoch, m = await e.iterator();
      for (; f < n.epochs; ) {
        const g = {};
        await d.onEpochBegin(f);
        let y = 0, b = 0;
        for (s || (m = await e.iterator()); !s || y < n.batchesPerEpoch; ) {
          const w = await m.next();
          if (s && w.done) {
            console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${n.batchesPerEpoch * n.epochs} batches). You may need to use the repeat() function when building your dataset.`);
            break;
          }
          if (w.value != null) {
            const { xs: x, ys: S } = zk(t, w.value), I = {};
            I.batch = b, I.size = x[0].shape[0], await d.onBatchBegin(b, I);
            const E = [];
            if (n.classWeight != null) {
              const k = Lk(n.classWeight, t.outputNames);
              for (let $ = 0; $ < k.length; ++$) E.push(await Pk(S[$], null, k[$]));
            }
            const R = x.concat(S).concat(E), N = a(R);
            Oe(R);
            for (let k = 0; k < l.length; ++k) {
              const $ = l[k], F = N[k];
              I[$] = F, Dt(F);
            }
            await d.onBatchEnd(b, I), Ck(I), b++, y++;
          }
          if (s ? y >= n.batchesPerEpoch : w.done) {
            if (r) {
              let x;
              Yv(n.validationData) ? x = et(await t.evaluateDataset(n.validationData, {
                batches: n.validationBatches
              })) : x = et(t.evaluate(o, i, {
                batchSize: n.validationBatchSize == null ? DG : n.validationBatchSize,
                verbose: 0
              }));
              for (let S = 0; S < t.metricsNames.length; ++S) g[`val_${t.metricsNames[S]}`] = x[S];
            }
            break;
          }
          if (t.stopTraining_) break;
        }
        if (await d.onEpochEnd(f, g), f++, t.stopTraining_) break;
      }
      return await d.onTrainEnd(), await t.history.syncData(), t.history;
    } finally {
      t.isTraining = false;
    }
  }
  function LG(t, e) {
    let n = null;
    return e.batchesPerEpoch != null ? n = e.batchesPerEpoch : Number.isFinite(t.size) && (n = t.size), n;
  }
  function Yv(t) {
    return typeof t.iterator == "function";
  }
  function PG(t) {
    return typeof t.next == "function";
  }
  async function zG(t, e, n) {
    n = n || {};
    const s = n.batches != null, r = t.testFunction;
    let o = [];
    if (n.verbose > 0) throw new ze("Verbose mode is not implemented yet.");
    C(!s || n.batches > 0 && Number.isInteger(n.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`);
    const i = PG(e) ? e : await e.iterator();
    let a = 0, l = 0;
    for (; !s || l < n.batches; ) {
      const c = await i.next();
      if (o = q(() => {
        if (c.value) {
          const { xs: u, ys: h } = zk(t, c.value), d = u.concat(h), p = q(() => r(d));
          if (Oe(d), l === 0) for (let m = 0; m < p.length; ++m) o.push(Re(0));
          const f = d[0].shape[0];
          for (let m = 0; m < p.length; ++m) {
            const g = p[m], y = o[m];
            o[m] = q(() => ae(o[m], L(f, g))), l > 0 && Oe(y);
          }
          Oe(p), a += f, ++l;
        }
        return o;
      }), c.done) {
        s && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);
        break;
      }
    }
    for (let c = 0; c < o.length; ++c) {
      const u = o[c];
      o[c] = Ne(o[c], a), Oe(u);
    }
    return kn(o);
  }
  function dg(t) {
    C(t > 0 && Number.isInteger(t), () => `batchSize is required to be a positive integer, but got ${t}`);
  }
  function Dl(t, e, n) {
    return t == null ? [
      null
    ] : Array.isArray(t) ? t.map((s) => Yo(s, e, n - e)) : Yo(t, e, n - e);
  }
  function cy(t, e) {
    return q(() => t == null ? null : Array.isArray(t) ? t.map((n) => cy(n, e)) : xk(t, e.dtype === "int32" ? e : ge(e, "int32")));
  }
  function pg(t, e) {
    const n = [];
    let s = 0, r = null;
    for (; s < t; ) r = s + e, r >= t && (r = t), n.push([
      s,
      r
    ]), s = r;
    return n;
  }
  function Mk(t) {
    const e = [];
    t instanceof Xe && (t = [
      t
    ]);
    for (let n = 0; n < t.length; ++n) {
      const s = t[n];
      if (s.rank === 1) e.push(ch(s, 1));
      else {
        if (s.rank === 0) throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
        e.push(s);
      }
    }
    return e;
  }
  function vs(t, e) {
    if (t == null) return;
    const n = [];
    if (e instanceof Xe) n.push(e.id);
    else if (Array.isArray(e)) e.forEach((r) => n.push(r.id));
    else if (e != null) for (const r in e) {
      const o = e[r];
      n.push(o.id);
    }
    const s = [];
    if (t instanceof Xe) n.indexOf(t.id) === -1 && s.push(t);
    else if (Array.isArray(t)) t.forEach((r) => {
      n.indexOf(r.id) === -1 && s.push(r);
    });
    else if (t != null) for (const r in t) {
      const o = t[r];
      n.indexOf(o.id) === -1 && s.push(o);
    }
    s.forEach((r) => {
      r.isDisposed || r.dispose();
    });
  }
  function MG(t) {
    return t instanceof Xe;
  }
  function uy(t) {
    return Array.isArray(t);
  }
  function Zv(t) {
    return !MG(t) && !uy(t);
  }
  function Jv(t, e, n, s = true, r = "") {
    if (e == null || e.length === 0) {
      if (t != null) {
        let i = false;
        if (uy(t) && t.length > 0) i = true;
        else if (Zv(t)) {
          for (const a in t) if (t.hasOwnProperty(a)) {
            i = true;
            break;
          }
        } else i = true;
        if (i) throw new z(`Error when checking model ${r} expected no data, but got ${t}`);
      }
      return [];
    }
    if (t == null) return e.map((i) => null);
    let o;
    if (Zv(t)) {
      t = t, o = [];
      for (const i of e) {
        if (t[i] == null) throw new z(`No data provided for "${i}". Need data for each key in: ${e}`);
        o.push(t[i]);
      }
    } else if (uy(t)) {
      if (t = t, t.length !== e.length) throw new z(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${t}`);
      o = t;
    } else {
      if (t = t, e.length > 1) throw new z(`The model ${r} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${t.shape}`);
      o = [
        t
      ];
    }
    if (o = Mk(o), n != null) for (let i = 0; i < e.length; ++i) {
      if (n[i] == null) continue;
      const a = o[i];
      if (a.shape.length !== n[i].length) throw new z(`Error when checking ${r}: expected ${e[i]} to have ${n[i].length} dimension(s). but got array with shape ${a.shape}`);
      for (let l = 0; l < n[i].length; ++l) {
        if (l === 0 && !s) continue;
        const c = a.shape[l], u = n[i][l];
        if (u != null && u >= 0 && c !== u) throw new z(`${r} expected a batch of elements where each example has shape [${n[i].slice(1, n[i].length)}] (i.e.,tensor shape [*,${n[i].slice(1, n[i].length)}]) but the ${r} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1, a.shape.length)}] (tensor shape [${a.shape}])`);
      }
    }
    return o;
  }
  function BG(t, e, n) {
    const s = to(t.map((o) => o.shape[0]));
    s.sort();
    const r = to(e.map((o) => o.shape[0]));
    if (r.sort(), s.length > 1) throw new z(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((o) => o.shape))}`);
    if (r.length > 1) throw new z(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((o) => o.shape))}`);
    if (s.length > 0 && r.length > 0 && !Ue(s, r)) throw new z(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`);
  }
  function VG(t, e, n) {
    const s = [
      Ii,
      Nm,
      Cc
    ];
    for (let r = 0; r < t.length; ++r) {
      const o = t[r], i = e[r], a = n[r];
      if (i != null) {
        if (i === Cc && o.shape[o.shape.length - 1] === 1) throw new z(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
        if (s.indexOf(i) !== -1) {
          const l = o.shape.slice(1), c = a.slice(1);
          for (let u = 0; u < l.length; ++u) {
            const h = l[u], d = c[u];
            if (d != null && h !== d) throw new z(`A target Tensor with shape ${o.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`);
          }
        }
      }
    }
  }
  function Qv(t, e, n, s = true, r = "") {
    let o;
    if (Array.isArray(t)) {
      if (t.length !== e.length) throw new z(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);
      o = t;
    } else {
      if (e.length > 1) throw new z(`The model expects ${e.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(t.shape)}.`);
      o = [
        t
      ];
    }
    if (n != null) for (let i = 0; i < e.length; ++i) {
      if (n[i] == null) continue;
      const a = o[i];
      if (a.shape.length !== n[i].length) throw new z(`Error when checking ${r}: expected ${e[i]} to have ${n[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);
      for (let l = 0; l < n[i].length; ++l) {
        if (l === 0 && !s) continue;
        const c = a.shape[l], u = n[i][l];
        if (u != null && u !== c) throw new z(`Error when checking ${r}: expected ${e[i]} to have shape ${JSON.stringify(n[i])} but got array with shape ${JSON.stringify(a.shape)}.`);
      }
    }
  }
  function WG(t, e) {
    if (t == null || Array.isArray(t) && t.length === 0) return e.map((s) => []);
    let n;
    if (typeof t == "string" || typeof t == "function") n = [
      t
    ];
    else if (Array.isArray(t) || typeof t == "object") n = t;
    else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${t}`);
    if (Array.isArray(n)) return e.map((s) => n);
    {
      const s = [];
      for (const r of e) {
        let o = n.hasOwnProperty(r) ? n[r] : [];
        Array.isArray(o) || (o = [
          o
        ]), s.push(o);
      }
      return s;
    }
  }
  const UG = "layers-model";
  class Sr extends Ss {
    constructor(e) {
      super(e), this.isTraining = false;
    }
    summary(e, n, s = console.log) {
      if (!this.built) throw new z("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
      IG(this, e, n, s);
    }
    compile(e) {
      if (e.loss == null && (e.loss = []), this.loss = e.loss, typeof e.optimizer == "string") this.optimizer_ = CG(e.optimizer), this.isOptimizerOwned = true;
      else {
        if (!(e.optimizer instanceof zr)) throw new z("User-defined optimizer must be an instance of tf.Optimizer.");
        this.optimizer_ = e.optimizer, this.isOptimizerOwned = false;
      }
      let n = [];
      if (!Array.isArray(e.loss) && typeof e.loss != "string" && typeof e.loss != "function") {
        e.loss = e.loss;
        for (const i in e.loss) if (this.outputNames.indexOf(i) === -1) throw new z(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);
        for (const i of this.outputNames) e.loss[i] == null && console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`), n.push(hg(e.loss[i]));
      } else if (Array.isArray(e.loss)) {
        if (e.loss.length !== this.outputs.length) throw new z(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);
        n = e.loss.map((a) => hg(a));
      } else {
        const i = hg(e.loss);
        this.outputs.forEach((a) => {
          n.push(i);
        });
      }
      this.lossFunctions = n, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
      for (let i = 0; i < this.outputs.length; ++i) {
        const a = this.internalOutputShapes[i], l = this.outputNames[i];
        this.feedOutputNames.push(l), this.feedOutputShapes.push(a), this.feedLossFns.push(this.lossFunctions[i]);
      }
      const s = [];
      this.metrics = e.metrics, this.metricsNames = [
        "loss"
      ], this.metricsTensors = [], Xo("loss", () => {
        for (let i = 0; i < this.outputs.length; ++i) {
          if (s.indexOf(i) !== -1) continue;
          const a = this.lossFunctions[i];
          this.outputs.length > 1 && (this.metricsTensors.push([
            a,
            i
          ]), this.metricsNames.push(this.outputNames[i] + "_loss"));
        }
      });
      const r = WG(e.metrics, this.outputNames), o = (i, a, l) => {
        this.outputNames.length > 1 && (a = this.outputNames[i] + "_" + a), this.metricsNames.push(a), this.metricsTensors.push([
          l,
          i
        ]);
      };
      Xo("metric", () => {
        for (let i = 0; i < this.outputs.length; ++i) {
          if (s.indexOf(i) !== -1) continue;
          const a = r[i];
          ((c) => {
            const u = "";
            let h, d, p;
            for (const f of c) {
              if (typeof f == "string" && [
                "accuracy",
                "acc",
                "crossentropy",
                "ce"
              ].indexOf(f) !== -1) {
                const g = this.internalOutputShapes[i];
                g[g.length - 1] === 1 || this.lossFunctions[i] === Nm ? [
                  "accuracy",
                  "acc"
                ].indexOf(f) !== -1 ? d = yw : [
                  "crossentropy",
                  "ce"
                ].indexOf(f) !== -1 && (d = _k) : this.lossFunctions[i] === Pd ? [
                  "accuracy",
                  "acc"
                ].indexOf(f) !== -1 ? d = Dk : [
                  "crossentropy",
                  "ce"
                ].indexOf(f) !== -1 && (d = Ok) : [
                  "accuracy",
                  "acc"
                ].indexOf(f) !== -1 ? d = bw : [
                  "crossentropy",
                  "ce"
                ].indexOf(f) !== -1 && (d = xw);
                let y;
                [
                  "accuracy",
                  "acc"
                ].indexOf(f) !== -1 ? y = "acc" : [
                  "crossentropy",
                  "ce"
                ].indexOf(f) !== -1 && (y = "ce"), p = d, h = u + y;
              } else p = $G(f), h = u + Oh(f);
              let m;
              Xo(h, () => {
                m = p;
              }), o(i, h, m);
            }
          })(a);
        }
      }), this.collectedTrainableWeights = this.trainableWeights;
    }
    checkTrainableWeightsConsistency() {
      this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
    }
    evaluate(e, n, s = {}) {
      const r = s.batchSize == null ? 32 : s.batchSize;
      dg(r);
      const i = this.standardizeUserDataXY(e, n, true, r);
      try {
        const a = i[0].concat(i[1]);
        this.makeTestFunction();
        const l = this.testFunction, c = this.testLoop(l, a, r, s.verbose, s.steps);
        return kn(c);
      } finally {
        vs(i[0], e), vs(i[1], n);
      }
    }
    async evaluateDataset(e, n) {
      return this.makeTestFunction(), zG(this, e, n);
    }
    checkNumSamples(e, n, s, r = "steps") {
      let o;
      if (s != null) {
        if (o = null, n != null) throw new z(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${n}`);
      } else if (e != null) Array.isArray(e) ? o = e[0].shape[0] : o = e.shape[0];
      else throw new z(`Either the input data should have a defined shape, or ${r} shoud be specified.`);
      return o;
    }
    execute(e, n) {
      if (Array.isArray(n) && n.length === 0) throw new z("`outputs` is an empty Array, which is not allowed.");
      const s = Array.isArray(n), r = s ? n : [
        n
      ], o = this.retrieveSymbolicTensors(r), i = new Kr();
      if (e instanceof Xe && (e = [
        e
      ]), Array.isArray(e)) {
        if (e.length !== this.inputs.length) throw new z(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
        for (let l = 0; l < this.inputs.length; ++l) i.add(this.inputs[l], e[l]);
      } else for (const l of this.inputs) {
        const c = e[l.name];
        if (c == null) throw new z(`No value is provided for the model's input ${l.name}`);
        i.add(l, c);
      }
      const a = Bl(o, i);
      return s ? a : a[0];
    }
    retrieveSymbolicTensors(e) {
      const n = li(null, e.length);
      let s = e.length;
      for (const r of this.layers) {
        const o = Array.isArray(r.output) ? r.output : [
          r.output
        ], i = o.map((a) => a.name);
        for (let a = 0; a < e.length; ++a) {
          const l = i.indexOf(e[a]);
          if (l !== -1 && (n[a] = o[l], s--), s === 0) break;
        }
        if (s === 0) break;
      }
      if (s > 0) {
        const r = [];
        throw n.forEach((o, i) => {
          o == null && r.push(e[i]);
        }), new z(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(r)}`);
      }
      return n;
    }
    predictLoop(e, n = 32, s = false) {
      return q(() => {
        const r = this.checkNumSamples(e);
        if (s) throw new ze("Verbose predictLoop() is not implemented yet.");
        const o = pg(r, n), i = this.outputs.map((a) => []);
        for (let a = 0; a < o.length; ++a) q(() => {
          const c = o[a][0], u = o[a][1], h = Dl(e, c, u), d = [];
          if (Array.isArray(h)) for (let f = 0; f < h.length; ++f) d.push({
            key: this.inputs[f],
            value: h[f]
          });
          else d.push({
            key: this.inputs[0],
            value: h
          });
          const p = new Kr(d);
          return Bl(this.outputs, p);
        }).forEach((c, u) => i[u].push(c));
        return kn(i.map((a) => vt(a, 0)));
      });
    }
    predict(e, n = {}) {
      const s = Mk(e);
      Qv(s, this.inputNames, this.feedInputShapes, false);
      try {
        const r = n.batchSize == null ? 32 : n.batchSize;
        return dg(r), this.predictLoop(s, r);
      } finally {
        vs(s, e);
      }
    }
    predictOnBatch(e) {
      Qv(e, this.inputNames, this.feedInputShapes, true);
      const n = (Array.isArray(e) ? e[0] : e).shape[0];
      return this.predictLoop(e, n);
    }
    standardizeUserDataXY(e, n, s = true, r) {
      if (this.optimizer_ == null) throw new fs("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
      const o = [];
      for (let i = 0; i < this.feedOutputShapes.length; ++i) {
        const a = this.feedOutputShapes[i];
        this.feedLossFns[i] === Pd ? o.push(a.slice(0, a.length - 1).concat([
          1
        ])) : o.push(a);
      }
      if (e = Jv(e, this.feedInputNames, this.feedInputShapes, false, "input"), n = Jv(n, this.feedOutputNames, o, false, "target"), BG(e, n), VG(n, this.feedLossFns, this.feedOutputShapes), this.stateful && r != null && r > 0 && e[0].shape[0] % r !== 0) throw new z(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);
      return [
        e,
        n
      ];
    }
    async standardizeUserData(e, n, s, r, o = true, i) {
      const [a, l] = this.standardizeUserDataXY(e, n, o, i);
      if (s != null) throw new Error("sample weight is not supported yet.");
      let c = null;
      if (r != null) {
        const u = Lk(r, this.outputNames);
        c = [];
        for (let h = 0; h < u.length; ++h) c.push(await Pk(l[h], null, u[h]));
      }
      return [
        a,
        l,
        c
      ];
    }
    testLoop(e, n, s, r = 0, o) {
      return q(() => {
        const i = this.checkNumSamples(n, s, o, "steps"), a = [];
        if (r > 0) throw new ze("Verbose mode is not implemented yet.");
        if (o != null) throw new ze("steps mode in testLoop() is not implemented yet");
        {
          const l = pg(i, s), c = en(Ds(0, i));
          for (let u = 0; u < l.length; ++u) {
            const h = l[u][0], d = l[u][1], p = Yo(c, h, d - h), f = cy(n, p), m = e(f);
            if (u === 0) for (let g = 0; g < m.length; ++g) a.push(Re(0));
            for (let g = 0; g < m.length; ++g) {
              const y = m[g];
              a[g] = ae(a[g], L(d - h, y));
            }
          }
          for (let u = 0; u < a.length; ++u) a[u] = Ne(a[u], i);
        }
        return a;
      });
    }
    getDedupedMetricsNames() {
      const e = this.metricsNames, n = [];
      for (let s = 0; s < e.length; ++s) {
        const r = e[s];
        let o = r;
        if (Pv(e, r) > 1) {
          const i = Pv(e.slice(0, s), r);
          o += `_${i}`;
        }
        n.push(o);
      }
      return n;
    }
    makeTrainFunction() {
      return (e) => {
        const n = [], s = e.slice(0, this.inputs.length), r = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), o = e.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), i = [], a = () => {
          const h = [];
          for (let m = 0; m < this.inputs.length; ++m) h.push({
            key: this.inputs[m],
            value: s[m]
          });
          const d = new Kr(h), p = Bl(this.outputs, d, {
            training: true
          });
          let f;
          for (let m = 0; m < this.lossFunctions.length; ++m) {
            const g = this.lossFunctions[m];
            let y = g(r[m], p[m]);
            o[m] != null && (y = _G(y, o[m]));
            const b = mt(y);
            n.push(b), m === 0 ? f = y : f = ae(f, y);
          }
          for (let m = 0; m < this.metricsTensors.length; ++m) {
            let g;
            if (this.outputs.length > 1 && m < this.outputs.length) g = n[m];
            else {
              const y = this.metricsTensors[m][0], b = this.metricsTensors[m][1];
              g = mt(y(r[b], p[b]));
            }
            Dt(g), i.push(g);
          }
          return f = mt(f), this.calculateLosses().forEach((m) => {
            f = ae(f, m);
          }), f;
        }, l = this.collectedTrainableWeights.map((h) => h.read());
        return [
          this.optimizer_.minimize(a, true, l)
        ].concat(i);
      };
    }
    makeTestFunction() {
      this.testFunction = (e) => q(() => {
        const n = [];
        let s;
        const r = e.slice(0, this.inputs.length), o = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), i = [];
        for (let c = 0; c < this.inputs.length; ++c) i.push({
          key: this.inputs[c],
          value: r[c]
        });
        const a = new Kr(i), l = Bl(this.outputs, a);
        for (let c = 0; c < this.lossFunctions.length; ++c) {
          const u = this.lossFunctions[c], h = mt(u(o[c], l[c]));
          c === 0 ? s = h : s = ae(s, h), n.push(s);
        }
        for (let c = 0; c < this.metricsTensors.length; ++c) {
          const u = this.metricsTensors[c][0], h = this.metricsTensors[c][1], d = mt(u(o[h], l[h]));
          n.push(d);
        }
        return n;
      });
    }
    async fit(e, n, s = {}) {
      if (this.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
      this.isTraining = true;
      let r, o, i, a, l, c, u, h, d;
      try {
        const p = s.batchSize == null ? 32 : s.batchSize;
        dg(p);
        const m = await this.standardizeUserData(e, n, s.sampleWeight, s.classWeight, false, p);
        r = m[0], o = m[1], d = m[2];
        let g = false, y;
        if (s.validationData != null && s.validationData.length > 0) {
          if (g = true, s.validationData.length === 2) l = s.validationData[0], c = s.validationData[1];
          else throw s.validationData.length === 3 ? new ze("validationData including sample weights is not supported yet.") : new z(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);
          const k = await this.standardizeUserData(l, c, null, null, true, p);
          u = k[0], h = k[1], y = u.concat(h);
        } else if (s.validationSplit != null && s.validationSplit > 0 && s.validationSplit < 1) {
          g = true;
          const N = Math.floor(r[0].shape[0] * (1 - s.validationSplit)), k = r[0].shape[0];
          u = Dl(r, N, k), i = r, r = Dl(r, 0, N), h = Dl(o, N, k), a = o, o = Dl(o, 0, N), y = u.concat(h);
        } else s.validationSteps != null && (g = true);
        const b = r.concat(o).concat(d);
        this.checkTrainableWeightsConsistency();
        const w = this.makeTrainFunction(), x = this.getDedupedMetricsNames();
        let S, I;
        g ? (this.makeTestFunction(), S = this.testFunction, I = x.slice().concat(x.map((N) => "val_" + N))) : (S = null, y = [], I = x.slice());
        const E = Tk(s.callbacks, s.yieldEvery);
        return await this.fitLoop(w, b, x, p, s.epochs, s.verbose, E, S, y, s.shuffle, I, s.initialEpoch, null, null);
      } finally {
        this.isTraining = false, vs(r, e), vs(o, n), vs(i, e), vs(a, n), vs(u, l), vs(h, c), d != null && Oe(d);
      }
    }
    async fitLoop(e, n, s, r, o, i, a, l, c, u, h, d, p, f) {
      r == null && (r = 32), o == null && (o = 1), u == null && (u = true), d == null && (d = 0);
      let m = false;
      if (l != null && c != null && (m = true), f != null && (m = true, p == null)) throw new z("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
      const g = this.checkNumSamples(n, r, p, "steps_per_epoch");
      let y;
      g != null && (y = Ds(0, g)), i == null && (i = 1);
      const { callbackList: b, history: w } = Ek(a, i, o, d, g, p, r, m, h);
      b.setModel(this), this.history = w, await b.onTrainBegin(), this.stopTraining_ = false;
      for (let x = d; x < o; ++x) {
        await b.onEpochBegin(x);
        const S = {};
        if (p != null) throw new ze("stepsPerEpoch mode is not implemented yet.");
        {
          if (u === "batch") throw new ze("batch shuffling is not implemneted yet");
          u && Jy(y);
          const I = en(y), E = pg(g, r);
          for (let R = 0; R < E.length; ++R) {
            const N = {};
            if (await b.onBatchBegin(R, N), q(() => {
              const k = E[R][0], $ = E[R][1], F = Yo(I, k, $ - k);
              N.batch = R, N.size = $ - k;
              const M = cy(n, F), U = e(M);
              for (let W = 0; W < s.length; ++W) {
                const V = s[W], H = U[W];
                N[V] = H, Dt(H);
              }
              if (R === E.length - 1 && m) {
                const W = this.testLoop(l, c, r);
                for (let V = 0; V < s.length; ++V) {
                  const H = s[V], G = W[V];
                  Dt(G), S["val_" + H] = G;
                }
              }
            }), await b.onBatchEnd(R, N), Ck(N), this.stopTraining_) break;
          }
          I.dispose();
        }
        if (await b.onEpochEnd(x, S), this.stopTraining_) break;
      }
      return await b.onTrainEnd(), await this.history.syncData(), this.history;
    }
    async fitDataset(e, n) {
      return FG(this, e, n);
    }
    async trainOnBatch(e, n) {
      const s = await this.standardizeUserData(e, n), r = s[0], o = s[1], a = this.makeTrainFunction()(r.concat(o)), l = [];
      for (const c of a) {
        const u = await c.data();
        l.push(u[0]);
      }
      return Oe(a), vs(s[0], e), vs(s[1], n), kn(l);
    }
    getNamedWeights(e) {
      const n = [], s = e != null && e.trainableOnly, r = s ? this.trainableWeights : this.weights, o = this.getWeights(s);
      for (let i = 0; i < r.length; ++i) s && !r[i].trainable || n.push({
        name: r[i].originalName,
        tensor: o[i]
      });
      return n;
    }
    set stopTraining(e) {
      this.stopTraining_ = e;
    }
    get stopTraining() {
      return this.stopTraining_;
    }
    get optimizer() {
      return this.optimizer_;
    }
    set optimizer(e) {
      this.optimizer_ !== e && (this.optimizer_ = e, this.isOptimizerOwned = false);
    }
    dispose() {
      const e = super.dispose();
      if (e.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
        const n = Gg().numTensors;
        this.optimizer_.dispose(), e.numDisposedVariables += n - Gg().numTensors;
      }
      return e;
    }
    getLossIdentifiers() {
      let e;
      if (typeof this.loss == "string") e = mr(this.loss);
      else if (Array.isArray(this.loss)) {
        for (const n of this.loss) if (typeof n != "string") throw new Error("Serialization of non-string loss is not supported.");
        e = this.loss.map((n) => mr(n));
      } else {
        const n = Object.keys(this.loss);
        e = {};
        const s = this.loss;
        for (const r of n) if (typeof s[r] == "string") e[r] = mr(s[r]);
        else throw new Error("Serialization of non-string loss is not supported.");
      }
      return e;
    }
    getMetricIdentifiers() {
      if (typeof this.metrics == "string" || typeof this.metrics == "function") return [
        mr(Oh(this.metrics))
      ];
      if (Array.isArray(this.metrics)) return this.metrics.map((e) => mr(Oh(e)));
      {
        const e = {};
        for (const n in this.metrics) e[n] = mr(Oh(this.metrics[n]));
        return e;
      }
    }
    getTrainingConfig() {
      return {
        loss: this.getLossIdentifiers(),
        metrics: this.getMetricIdentifiers(),
        optimizer_config: {
          class_name: this.optimizer.getClassName(),
          config: this.optimizer.getConfig()
        }
      };
    }
    loadTrainingConfig(e) {
      if (e.weighted_metrics != null) throw new Error("Loading weight_metrics is not supported yet.");
      if (e.loss_weights != null) throw new Error("Loading loss_weights is not supported yet.");
      if (e.sample_weight_mode != null) throw new Error("Loading sample_weight_mode is not supported yet.");
      const n = Ic(e.optimizer_config), s = Es(n);
      let r;
      if (typeof e.loss == "string") r = Mo(e.loss);
      else if (Array.isArray(e.loss)) r = e.loss.map((i) => Mo(i));
      else if (e.loss != null) {
        r = {};
        for (const i in e.loss) r[i] = Mo(e.loss[i]);
      }
      let o;
      if (Array.isArray(e.metrics)) o = e.metrics.map((i) => Mo(i));
      else if (e.metrics != null) {
        o = {};
        for (const i in e.metrics) o[i] = Mo(e.metrics[i]);
      }
      this.compile({
        loss: r,
        metrics: o,
        optimizer: s
      });
    }
    async save(e, n) {
      if (typeof e == "string") {
        const c = rI(e);
        if (c.length === 0) throw new z(`Cannot find any save handlers for URL '${e}'`);
        if (c.length > 1) throw new z(`Found more than one (${c.length}) save handlers for URL '${e}'`);
        e = c[0];
      }
      if (e.save == null) throw new z("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
      const s = await Hg(this.getNamedWeights(n)), a = {
        modelTopology: this.toJSON(null, false),
        format: UG,
        generatedBy: `TensorFlow.js tfjs-layers v${km}`,
        convertedBy: null
      };
      if ((n == null ? false : n.includeOptimizer) && this.optimizer != null) {
        a.trainingConfig = this.getTrainingConfig();
        const c = "optimizer", { data: u, specs: h } = await Hg(await this.optimizer.getWeights(), c);
        s.specs.push(...h), s.data = nI([
          s.data,
          u
        ]);
      }
      return this.userDefinedMetadata != null && (Kv(this.userDefinedMetadata, this.name, true), a.userDefinedMetadata = this.userDefinedMetadata), a.weightData = s.data, a.weightSpecs = s.specs, e.save(a);
    }
    setUserDefinedMetadata(e) {
      Kv(e, this.name), this.userDefinedMetadata = e;
    }
    getUserDefinedMetadata() {
      return this.userDefinedMetadata;
    }
  }
  Sr.className = "Model";
  le(Sr);
  class Bk extends Sr {
  }
  Bk.className = "Functional";
  le(Bk);
  async function GG(t, e) {
    "modelTopology" in t || (t = {
      modelTopology: t
    }), t = t;
    let n = t.modelTopology;
    n.model_config != null && (n = n.model_config);
    const s = Ic(n), r = Es(s, e);
    if (t.weightsManifest != null) {
      const o = await xN(t.weightsManifest, t.pathPrefix, r.weights.map((a) => a.originalName)), i = {};
      for (const a of r.weights) i[a.originalName] = o[a.originalName];
      r.loadWeights(i), Oe(o);
    }
    return r;
  }
  async function HG(t, e) {
    if (e == null && (e = {}), typeof t == "string") {
      const n = oI(t, e);
      if (n.length === 0) n.push(SN(t, e));
      else if (n.length > 1) throw new z(`Found more than one (${n.length}) load handlers for URL '${t}'`);
      t = n[0];
    }
    return jG(t, void 0, e);
  }
  async function jG(t, e, n) {
    if (n == null && (n = {}), t.load == null) throw new z("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    const s = await t.load();
    let r = s.modelTopology;
    r.model_config != null && (r = r.model_config);
    const o = n.strict == null ? true : n.strict, i = s.weightData != null && s.weightSpecs != null && o, a = Es(Ic(r), e, i), l = s.trainingConfig;
    if (l != null && a.loadTrainingConfig(l), s.userDefinedMetadata != null && a.setUserDefinedMetadata(s.userDefinedMetadata), s.weightData != null) {
      if (s.weightSpecs == null) throw new z("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
      const { modelWeights: c, optimizerWeights: u } = qG(s.weightData, s.weightSpecs);
      a.loadWeights(c, o), a.optimizer != null && u.length > 0 && await a.optimizer.setWeights(u), Oe(c), Oe(u.map((h) => h.tensor));
    }
    return a;
  }
  function qG(t, e) {
    const n = ub(t, e), s = {}, r = [];
    return e.forEach((o) => {
      o.group === "optimizer" ? r.push({
        name: o.name,
        tensor: n[o.name]
      }) : s[o.name] = n[o.name];
    }), {
      modelWeights: s,
      optimizerWeights: r
    };
  }
  class ci extends Sr {
    constructor(e) {
      if (super({
        inputs: [],
        outputs: []
      }), e = e || {}, this.trainable = true, this.built = false, this.name = e.name != null ? e.name : mm("sequential_"), e.layers != null) for (const n of e.layers) this.add(n);
    }
    checkShape(e) {
      if (e.inboundNodes[0].outputTensors[0].shape.some((s) => s < 0)) throw new z(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`);
    }
    add(e) {
      const n = e instanceof ci || e instanceof Sr;
      let s;
      if (n) {
        if (s = e, s.outputs.length !== 1) throw new z("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        if (s.inputs.length !== 1) throw new z("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
      }
      if (this.outputs.length === 0) {
        if (e.inboundNodes.length === 0) {
          if (e.batchInputShape == null) throw new z("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
          const r = $k({
            batchShape: e.batchInputShape,
            dtype: e.dtype,
            name: e.name + "_input"
          });
          e.apply(r);
        }
        if (n) this.outputs = s.outputs, this.inputs = s.inputs;
        else {
          if (e.inboundNodes.length !== 1) throw new z(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);
          if (e.inboundNodes[0].outputTensors.length !== 1) throw new z("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
          this.checkShape(e), this.outputs = [
            e.inboundNodes[0].outputTensors[0]
          ], this.inputs = Sk(this.outputs[0]);
        }
        this.inboundNodes = [], new Cm({
          outboundLayer: this,
          inboundLayers: [],
          nodeIndices: [],
          tensorIndices: [],
          inputTensors: this.inputs,
          outputTensors: this.outputs,
          inputMasks: li(null, this.inputs.length),
          outputMasks: [
            null
          ],
          inputShapes: this.inputs.map((r) => r.shape),
          outputShapes: this.outputs[0].shape
        });
      } else {
        const r = e.apply(this.outputs[0]);
        if (Array.isArray(r)) throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(e), this.outputs = [
          r
        ], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [
          this.outputs[0].shape
        ];
      }
      this.layers.push(e), this.built = false;
    }
    pop() {
      if (this.layers.length === 0) throw new TypeError("There are no layers in the model.");
      if (this.layers.pop(), this.layers.length === 0) this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
      else {
        const e = this.layers.length - 1;
        this.layers[e].outboundNodes = [], this.outputs = [
          this.layers[e].output
        ], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [
          this.outputs[0].shape
        ];
      }
    }
    call(e, n) {
      return this.model == null && this.build(), this.model.call(e, n);
    }
    build(e) {
      if (Ze(e), this.inputs.length === 0 || this.outputs.length === 0) throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
      this.model = new Sr({
        inputs: this.inputs,
        outputs: this.outputs[0],
        name: this.name + "_model"
      }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = true;
    }
    countParams() {
      return this.built || this.build(), super.countParams();
    }
    summary(e, n, s = console.log) {
      this.built || this.build(), super.summary(e, n, s);
    }
    setWeights(e) {
      this.model == null && this.build(), this.model.setWeights(e);
    }
    evaluate(e, n, s = {}) {
      if (!this.built) throw new fs("The model needs to be compiled before being used.");
      return this.model.evaluate(e, n, s);
    }
    async evaluateDataset(e, n) {
      if (!this.built) throw new fs("The model needs to be compiled before being used.");
      return this.model.evaluateDataset(e, n);
    }
    predict(e, n = {}) {
      return this.model == null && this.build(), this.model.predict(e, n);
    }
    predictOnBatch(e) {
      return this.model == null && this.build(), this.model.predictOnBatch(e);
    }
    compile(e) {
      this.build(), this.model.compile(e), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
    }
    get optimizer() {
      return this.model == null ? void 0 : this.model.optimizer;
    }
    set optimizer(e) {
      this.model.optimizer = e;
    }
    async fit(e, n, s = {}) {
      if (!this.built) throw new fs("The model needs to be compiled before being used.");
      return this.model.fit(e, n, s);
    }
    async fitDataset(e, n) {
      if (!this.built) throw new fs("The model needs to be compiled before being used.");
      return this.model.fitDataset(e, n);
    }
    async trainOnBatch(e, n) {
      return this.model.trainOnBatch(e, n);
    }
    static fromConfig(e, n, s = {}, r = false) {
      let o, i = {};
      if (n instanceof Array) {
        if (n[0].className == null || n[0].className === "Merge") throw new z("Legacy serialization format not supported yet.");
        o = n;
      } else C(n.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), o = n.layers, delete n.layers, i = n;
      const a = new e(i);
      if (!(a instanceof ci)) throw new ze(`Sequential.fromConfig called on non-Sequential input: ${a}`);
      for (const l of o) {
        const u = Es(l, void 0, r);
        r && u.setFastWeightInitDuringBuild(true), a.add(u);
      }
      return a;
    }
    set stopTraining(e) {
      if (this.model == null) throw new z("Cannot set the stopTraining property of a sequential model before it is compiled.");
      this.model.stopTraining = e;
    }
    get stopTraining() {
      if (this.model == null) throw new z("Cannot get the stopTraining property of a sequential model before it is compiled.");
      return this.model.stopTraining;
    }
    getConfig() {
      const e = [];
      for (const n of this.layers) {
        const s = {};
        s.className = n.getClassName(), s.config = n.getConfig(), e.push(s);
      }
      return {
        name: this.name,
        layers: e
      };
    }
  }
  ci.className = "Sequential";
  le(ci);
  function KG(t) {
    return new Sr(t);
  }
  function XG(t) {
    return new ci(t);
  }
  function Vk(t) {
    return $k(t);
  }
  function YG(t, e) {
    Xn.registerCallbackConstructor(t, e);
  }
  let ln = class extends $i {
    getConfig() {
      return {};
    }
  };
  class Wk extends ln {
    apply(e, n = 1) {
      return mU(e, n);
    }
  }
  Wk.className = "elu";
  le(Wk);
  class Uk extends ln {
    apply(e) {
      return Gf(e);
    }
  }
  Uk.className = "selu";
  le(Uk);
  class Gk extends ln {
    apply(e) {
      return zs(e);
    }
  }
  Gk.className = "relu";
  le(Gk);
  class Hk extends ln {
    apply(e) {
      return q(() => co(6, zs(e)));
    }
  }
  Hk.className = "relu6";
  le(Hk);
  class jk extends ln {
    apply(e) {
      return e;
    }
  }
  jk.className = "linear";
  le(jk);
  class qk extends ln {
    apply(e) {
      return Ts(e);
    }
  }
  qk.className = "sigmoid";
  le(qk);
  class Kk extends ln {
    apply(e) {
      return yU(e);
    }
  }
  Kk.className = "hardSigmoid";
  le(Kk);
  class Xk extends ln {
    apply(e) {
      return vi(e);
    }
  }
  Xk.className = "softplus";
  le(Xk);
  class Yk extends ln {
    apply(e) {
      return gU(e);
    }
  }
  Yk.className = "softsign";
  le(Yk);
  class Zk extends ln {
    apply(e) {
      return lo(e);
    }
  }
  Zk.className = "tanh";
  le(Zk);
  let ww = class extends ln {
    apply(e, n = -1) {
      return nh(e, n);
    }
  };
  ww.className = "softmax";
  le(ww);
  class Jk extends ln {
    apply(e, n = -1) {
      return Pf(e, n);
    }
  }
  Jk.className = "logSoftmax";
  le(Jk);
  class Qk extends ln {
    apply(e) {
      return q(() => q(() => {
        const n = Math.sqrt(2), s = L(0.5, ae(1, Of(Ne(e, n))));
        return L(e, s);
      }));
    }
  }
  Qk.className = "gelu";
  le(Qk);
  class eT extends ln {
    apply(e) {
      return q(() => L(0.5, L(e, ae(1, lo(L(Gt(Ne(2, Math.PI)), ae(e, L(0.044715, ar(e, 3)))))))));
    }
  }
  eT.className = "gelu_new";
  le(eT);
  class tT extends ln {
    apply(e) {
      return q(() => L(e, lo(vi(e))));
    }
  }
  tT.className = "mish";
  le(tT);
  class nT extends ln {
    apply(e, n = 1) {
      return q(() => L(Ts(L(e, n)), e));
    }
  }
  nT.className = "swish";
  le(nT);
  function ho(t) {
    return t.getClassName();
  }
  function fg(t, e = {}) {
    return lh(t, Zn.getMap().classNameMap, e, "activation");
  }
  function po(t) {
    if (t == null) {
      const e = {};
      return e.className = "linear", e.config = {}, fg(e);
    }
    if (typeof t == "string") {
      const e = {};
      return e.className = t, e.config = {}, fg(e);
    } else return t instanceof ln ? t : fg(t);
  }
  function vw(t) {
    if (t != null && typeof t != "object") throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${t}`);
  }
  class sT extends $i {
  }
  class ph extends sT {
    constructor(e) {
      super(), vw(e), this.l1 = e == null || e.l1 == null ? 0.01 : e.l1, this.l2 = e == null || e.l2 == null ? 0.01 : e.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
    }
    apply(e) {
      return q(() => {
        let n = Tt([
          1
        ]);
        return this.hasL1 && (n = ae(n, $e(L(this.l1, kt(e))))), this.hasL2 && (n = ae(n, $e(L(this.l2, uh(e))))), P(n, []);
      });
    }
    getConfig() {
      return {
        l1: this.l1,
        l2: this.l2
      };
    }
    static fromConfig(e, n) {
      return new e({
        l1: n.l1,
        l2: n.l2
      });
    }
  }
  ph.className = "L1L2";
  le(ph);
  function ZG(t) {
    return vw(t), new ph({
      l1: t != null ? t.l1 : null,
      l2: 0
    });
  }
  function JG(t) {
    return vw(t), new ph({
      l2: t != null ? t.l2 : null,
      l1: 0
    });
  }
  const eS = {
    l1l2: "L1L2"
  };
  function ot(t) {
    return ew(t);
  }
  function tS(t, e = {}) {
    return lh(t, Zn.getMap().classNameMap, e, "regularizer");
  }
  function pt(t) {
    if (t == null) return null;
    if (typeof t == "string") {
      const n = {
        className: t in eS ? eS[t] : t,
        config: {}
      };
      return tS(n);
    } else return t instanceof sT ? t : tS(t);
  }
  class Sw extends We {
    constructor(e) {
      super(e ?? {}), this.supportsMasking = true, e != null && (this.maxValue = e.maxValue);
    }
    call(e, n) {
      e = _e(e);
      let s = zs(e);
      return this.maxValue != null && (s = Dn(s, 0, this.maxValue)), s;
    }
    computeOutputShape(e) {
      return e;
    }
    getConfig() {
      const e = {
        maxValue: this.maxValue
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  Sw.className = "ReLU";
  le(Sw);
  class $w extends We {
    constructor(e) {
      super(e ?? {}), this.DEFAULT_ALPHA = 0.3, e == null && (e = {}), this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
    }
    call(e, n) {
      const s = _e(e);
      return ju(s, this.alpha);
    }
    computeOutputShape(e) {
      return e;
    }
    getConfig() {
      const e = {
        alpha: this.alpha
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  $w.className = "LeakyReLU";
  le($w);
  class Cw extends We {
    constructor(e) {
      if (super(e ?? {}), this.DEFAULT_ALPHA_INITIALIZER = "zeros", e == null && (e = {}), this.supportsMasking = true, this.alphaInitializer = dt(e.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = pt(e.alphaRegularizer), this.alphaConstraint = Lt(e.alphaConstraint), e.sharedAxes == null) this.sharedAxes = null;
      else if (Array.isArray(e.sharedAxes)) this.sharedAxes = e.sharedAxes;
      else if (typeof e.sharedAxes == "number") this.sharedAxes = [
        e.sharedAxes
      ];
      else throw new z(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);
    }
    build(e) {
      e = Ze(e);
      const n = e.slice(1);
      if (this.sharedAxes != null) for (const r of this.sharedAxes) n[r - 1] = 1;
      this.alpha = this.addWeight("alpha", n, "float32", this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);
      const s = {};
      if (this.sharedAxes != null) for (let r = 1; r < e.length; ++r) s[r] = e[r];
      this.inputSpec = [
        new Et({
          ndim: e.length,
          axes: s
        })
      ], this.built = true;
    }
    call(e, n) {
      return e = _e(e), Qu(e, this.alpha.read());
    }
    getConfig() {
      const e = {
        alphaInitializer: gt(this.alphaInitializer),
        alphaRegularizer: ot(this.alphaRegularizer),
        alphaConstraint: Ft(this.alphaConstraint),
        sharedAxes: this.sharedAxes
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  Cw.className = "PReLU";
  le(Cw);
  let Iw = class extends We {
    constructor(e) {
      if (super(e ?? {}), this.DEFAULT_ALPHA = 1, e == null && (e = {}), e.alpha != null && e.alpha !== this.DEFAULT_ALPHA) throw new ze(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);
      this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
    }
    call(e, n) {
      const s = _e(e);
      return ll(s);
    }
    computeOutputShape(e) {
      return e;
    }
    getConfig() {
      const e = {
        alpha: this.alpha
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  };
  Iw.className = "ELU";
  le(Iw);
  class Nw extends We {
    constructor(e) {
      super(e ?? {}), this.DEFAULT_THETA = 1, e == null && (e = {}), this.theta = e.theta == null ? this.DEFAULT_THETA : e.theta;
    }
    call(e, n) {
      const s = _e(e);
      return L(s, ge(wn(s, this.theta), "float32"));
    }
    computeOutputShape(e) {
      return e;
    }
    getConfig() {
      const e = {
        theta: this.theta
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  Nw.className = "ThresholdedReLU";
  le(Nw);
  class kw extends We {
    constructor(e) {
      super(e ?? {}), this.DEFAULT_AXIS = 1, e == null && (e = {}), this.softmax = new ww().apply, this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis;
    }
    call(e, n) {
      return q(() => {
        let s = _e(e);
        const r = n.mask;
        if (r != null) {
          const o = L(ve(En(s.shape), ge(r, s.dtype)), Re(-1e9));
          s = ae(s, o);
        }
        return this.axis instanceof Array ? this.axis.length > 1 ? On(ve(s, Ku(s, this.axis, true))) : this.softmax(s, this.axis[0]) : this.softmax(s, this.axis);
      });
    }
    computeOutputShape(e) {
      return e;
    }
    getConfig() {
      const e = {
        axis: this.axis
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  kw.className = "Softmax";
  le(kw);
  function qi(t, e, n) {
    if (typeof t == "number") return li(t, e);
    if (t.length !== e) throw new z(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);
    for (let s = 0; s < e; ++s) {
      const r = t[s];
      if (!hU(r)) throw new z(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number ${r}`);
    }
    return t;
  }
  function Rs(t, e, n, s, r = 1) {
    if (t == null) return t;
    const o = e + (e - 1) * (r - 1);
    let i;
    return n === "same" ? i = t : i = t - o + 1, Math.floor((i + s - 1) / s);
  }
  function Ks(t, e, n, s) {
    if (t == null) return null;
    if (s === "valid") t = t * e + uo([
      n - e,
      0
    ]);
    else if (s === "same") t = t * e;
    else throw new z(`Unsupport padding mode: ${s}.`);
    return t;
  }
  function Tw(t, e) {
    return q(() => (It(e), e === "channelsFirst" ? He(t, [
      0,
      2,
      3,
      1
    ]) : t));
  }
  function rT(t, e) {
    return q(() => (It(e), e === "channelsFirst" ? He(t, [
      0,
      2,
      3,
      4,
      1
    ]) : t));
  }
  function QG(t, e, n, s = 1, r = "valid", o, i = 1) {
    return q(() => {
      if (o == null && (o = Os()), It(o), t.shape.length !== 3) throw new z(`The input of a conv1dWithBias operation should be 3, but is ${t.shape.length} instead.`);
      if (e.shape.length !== 3) throw new z(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);
      if (n != null && n.shape.length !== 1) throw new z(`The bias for a conv1dWithBias operation should be 1, but is ${n.shape.length} instead`);
      if (o === "channelsFirst" && (t = He(t, [
        0,
        2,
        1
      ])), r === "causal") throw new ze("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
      let a = Rf(t, e, s, r === "same" ? "same" : "valid", "NWC", i);
      return n != null && (a = Ms(a, n)), a;
    });
  }
  function nS(t, e, n, s = [
    1,
    1
  ], r = "valid", o, i, a = null) {
    return q(() => {
      if (o == null && (o = Os()), It(o), t.rank !== 3 && t.rank !== 4) throw new z(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);
      if (e.rank !== 3 && e.rank !== 4) throw new z(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);
      let l = Tw(t, o);
      if (r === "causal") throw new ze("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
      return l = oN({
        x: l,
        filter: e,
        strides: s,
        pad: r === "same" ? "same" : "valid",
        dilations: i,
        dataFormat: "NHWC",
        bias: n,
        activation: a
      }), o === "channelsFirst" && (l = He(l, [
        0,
        3,
        1,
        2
      ])), l;
    });
  }
  function eH(t, e, n, s = [
    1,
    1,
    1
  ], r = "valid", o, i) {
    return q(() => {
      if (o == null && (o = Os()), It(o), t.rank !== 4 && t.rank !== 5) throw new z(`conv3dWithBias expects input to be of rank 4 or 5, but received ${t.rank}.`);
      if (e.rank !== 4 && e.rank !== 5) throw new z(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${t.rank}.`);
      let a = rT(t, o);
      if (r === "causal") throw new ze("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
      return a = Fb(a, e, s, r === "same" ? "same" : "valid", "NDHWC", i), n != null && (a = Ms(a, n)), o === "channelsFirst" && (a = He(a, [
        0,
        4,
        1,
        2,
        3
      ])), a;
    });
  }
  class Tm extends We {
    constructor(e, n) {
      if (super(n), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", Tm.verifyArgs(n), this.rank = e, Vt(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3) throw new ze(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
      if (this.kernelSize = qi(n.kernelSize, e, "kernelSize"), this.strides = qi(n.strides == null ? 1 : n.strides, e, "strides"), this.padding = n.padding == null ? "valid" : n.padding, is(this.padding), this.dataFormat = n.dataFormat == null ? "channelsLast" : n.dataFormat, It(this.dataFormat), this.activation = po(n.activation), this.useBias = n.useBias == null ? true : n.useBias, this.biasInitializer = dt(n.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = Lt(n.biasConstraint), this.biasRegularizer = pt(n.biasRegularizer), this.activityRegularizer = pt(n.activityRegularizer), this.dilationRate = qi(n.dilationRate == null ? 1 : n.dilationRate, e, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1) throw new z(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
      if (this.rank === 2) {
        if (typeof this.dilationRate == "number") this.dilationRate = [
          this.dilationRate,
          this.dilationRate
        ];
        else if (this.dilationRate.length !== 2) throw new z(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
      } else if (this.rank === 3) {
        if (typeof this.dilationRate == "number") this.dilationRate = [
          this.dilationRate,
          this.dilationRate,
          this.dilationRate
        ];
        else if (this.dilationRate.length !== 3) throw new z(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
      }
    }
    static verifyArgs(e) {
      if (qs("kernelSize" in e, "required key 'kernelSize' not in config"), typeof e.kernelSize != "number" && !tw(e.kernelSize, "number", 1, 3)) throw new z(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`);
    }
    getConfig() {
      const e = {
        kernelSize: this.kernelSize,
        strides: this.strides,
        padding: this.padding,
        dataFormat: this.dataFormat,
        dilationRate: this.dilationRate,
        activation: ho(this.activation),
        useBias: this.useBias,
        biasInitializer: gt(this.biasInitializer),
        biasRegularizer: ot(this.biasRegularizer),
        activityRegularizer: ot(this.activityRegularizer),
        biasConstraint: Ft(this.biasConstraint)
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  class gl extends Tm {
    constructor(e, n) {
      super(e, n), this.kernel = null, gl.verifyArgs(n), this.filters = n.filters, Vt(this.filters, "filters"), this.kernelInitializer = dt(n.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = Lt(n.kernelConstraint), this.kernelRegularizer = pt(n.kernelRegularizer);
    }
    build(e) {
      e = Ze(e);
      const n = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
      if (e[n] == null) throw new z(`The channel dimension of the input should be defined. Found ${e[n]}`);
      const s = e[n], r = this.kernelSize.concat([
        s,
        this.filters
      ]);
      this.kernel = this.addWeight("kernel", r, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [
        this.filters
      ], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [
        {
          ndim: this.rank + 2,
          axes: {
            [n]: s
          }
        }
      ], this.built = true;
    }
    call(e, n) {
      return q(() => {
        e = _e(e);
        let s;
        const r = this.bias == null ? null : this.bias.read(), o = pk(this.activation.getClassName());
        if (o != null && this.rank === 2) s = nS(e, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate, o);
        else {
          if (this.rank === 1) s = QG(e, this.kernel.read(), r, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
          else if (this.rank === 2) s = nS(e, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
          else if (this.rank === 3) s = eH(e, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
          else throw new ze("convolutions greater than 3D are not implemented yet.");
          this.activation != null && (s = this.activation.apply(s));
        }
        return s;
      });
    }
    computeOutputShape(e) {
      e = Ze(e);
      const n = [], s = this.dataFormat === "channelsLast" ? e.slice(1, e.length - 1) : e.slice(2);
      for (let o = 0; o < s.length; ++o) {
        const i = Rs(s[o], this.kernelSize[o], this.padding, this.strides[o], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[o]);
        n.push(i);
      }
      let r = [
        e[0]
      ];
      return this.dataFormat === "channelsLast" ? (r = r.concat(n), r.push(this.filters)) : (r.push(this.filters), r = r.concat(n)), r;
    }
    getConfig() {
      const e = {
        filters: this.filters,
        kernelInitializer: gt(this.kernelInitializer),
        kernelRegularizer: ot(this.kernelRegularizer),
        kernelConstraint: Ft(this.kernelConstraint)
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
    static verifyArgs(e) {
      if (!("filters" in e) || typeof e.filters != "number" || e.filters < 1) throw new z(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`);
    }
  }
  class yl extends gl {
    constructor(e) {
      super(2, e), yl.verifyArgs(e);
    }
    getConfig() {
      const e = super.getConfig();
      return delete e.rank, e;
    }
    static verifyArgs(e) {
      if (typeof e.kernelSize != "number" && !tw(e.kernelSize, "number", 1, 2)) throw new z(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`);
    }
  }
  yl.className = "Conv2D";
  le(yl);
  class bl extends gl {
    constructor(e) {
      super(3, e), bl.verifyArgs(e);
    }
    getConfig() {
      const e = super.getConfig();
      return delete e.rank, e;
    }
    static verifyArgs(e) {
      if (typeof e.kernelSize != "number" && !(Array.isArray(e.kernelSize) && (e.kernelSize.length === 1 || e.kernelSize.length === 3))) throw new z(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`);
    }
  }
  bl.className = "Conv3D";
  le(bl);
  class Ew extends yl {
    constructor(e) {
      if (super(e), this.inputSpec = [
        new Et({
          ndim: 4
        })
      ], this.padding !== "same" && this.padding !== "valid") throw new z(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
    }
    build(e) {
      if (e = Ze(e), e.length !== 4) throw new z("Input should have rank 4; Received input shape: " + JSON.stringify(e));
      const n = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
      if (e[n] == null) throw new z("The channel dimension of the inputs should be defined. Found `None`.");
      const s = e[n], r = this.kernelSize.concat([
        this.filters,
        s
      ]);
      this.kernel = this.addWeight("kernel", r, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [
        this.filters
      ], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [
        new Et({
          ndim: 4,
          axes: {
            [n]: s
          }
        })
      ], this.built = true;
    }
    call(e, n) {
      return q(() => {
        let s = _e(e);
        if (s.shape.length !== 4) throw new z(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
        const r = s.shape, o = r[0];
        let i, a;
        this.dataFormat === "channelsFirst" ? (i = 2, a = 3) : (i = 1, a = 2);
        const l = r[i], c = r[a], u = this.kernelSize[0], h = this.kernelSize[1], d = this.strides[0], p = this.strides[1], f = Ks(l, d, u, this.padding), m = Ks(c, p, h, this.padding), g = [
          o,
          f,
          m,
          this.filters
        ];
        this.dataFormat !== "channelsLast" && (s = He(s, [
          0,
          2,
          3,
          1
        ]));
        let y = Af(s, this.kernel.read(), g, this.strides, this.padding);
        return this.dataFormat !== "channelsLast" && (y = He(y, [
          0,
          3,
          1,
          2
        ])), this.bias != null && (y = Ms(y, this.bias.read(), this.dataFormat)), this.activation != null && (y = this.activation.apply(y)), y;
      });
    }
    computeOutputShape(e) {
      e = Ze(e);
      const n = e.slice();
      let s, r, o;
      this.dataFormat === "channelsFirst" ? (s = 1, r = 2, o = 3) : (s = 3, r = 1, o = 2);
      const i = this.kernelSize[0], a = this.kernelSize[1], l = this.strides[0], c = this.strides[1];
      return n[s] = this.filters, n[r] = Ks(n[r], l, i, this.padding), n[o] = Ks(n[o], c, a, this.padding), n;
    }
    getConfig() {
      const e = super.getConfig();
      return delete e.dilationRate, e;
    }
  }
  Ew.className = "Conv2DTranspose";
  le(Ew);
  class Rw extends bl {
    constructor(e) {
      if (super(e), this.inputSpec = [
        new Et({
          ndim: 5
        })
      ], this.padding !== "same" && this.padding !== "valid") throw new z(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
    }
    build(e) {
      if (e = Ze(e), e.length !== 5) throw new z("Input should have rank 5; Received input shape: " + JSON.stringify(e));
      const n = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
      if (e[n] == null) throw new z("The channel dimension of the inputs should be defined. Found `None`.");
      const s = e[n], r = this.kernelSize.concat([
        this.filters,
        s
      ]);
      this.kernel = this.addWeight("kernel", r, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [
        this.filters
      ], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [
        new Et({
          ndim: 5,
          axes: {
            [n]: s
          }
        })
      ], this.built = true;
    }
    call(e, n) {
      return q(() => {
        let s = _e(e);
        if (s.shape.length !== 5) throw new z(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
        const r = s.shape, o = r[0];
        let i, a, l;
        this.dataFormat === "channelsFirst" ? (l = 2, i = 3, a = 4) : (l = 1, i = 2, a = 3);
        const c = r[l], u = r[i], h = r[a], d = this.kernelSize[0], p = this.kernelSize[1], f = this.kernelSize[2], m = this.strides[0], g = this.strides[1], y = this.strides[2], b = Ks(c, m, d, this.padding), w = Ks(u, g, p, this.padding), x = Ks(h, y, f, this.padding), S = [
          o,
          b,
          w,
          x,
          this.filters
        ];
        this.dataFormat !== "channelsLast" && (s = He(s, [
          0,
          2,
          3,
          4,
          1
        ]));
        let I = Lb(s, this.kernel.read(), S, this.strides, this.padding);
        return this.dataFormat !== "channelsLast" && (I = He(I, [
          0,
          4,
          1,
          2,
          3
        ])), this.bias !== null && (I = Ms(I, this.bias.read(), this.dataFormat)), this.activation !== null && (I = this.activation.apply(I)), I;
      });
    }
    computeOutputShape(e) {
      e = Ze(e);
      const n = e.slice();
      let s, r, o, i;
      this.dataFormat === "channelsFirst" ? (s = 1, r = 2, o = 3, i = 4) : (s = 4, r = 1, o = 2, i = 3);
      const a = this.kernelSize[0], l = this.kernelSize[1], c = this.kernelSize[2], u = this.strides[0], h = this.strides[1], d = this.strides[2];
      return n[s] = this.filters, n[r] = Ks(n[r], u, a, this.padding), n[o] = Ks(n[o], h, l, this.padding), n[i] = Ks(n[i], d, c, this.padding), n;
    }
    getConfig() {
      const e = super.getConfig();
      return delete e.dilationRate, e;
    }
  }
  Rw.className = "Conv3DTranspose";
  le(Rw);
  class oT extends gl {
    constructor(e, n) {
      if (super(e, n), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, n.filters == null) throw new z("The `filters` configuration field is required by SeparableConv, but is unspecified.");
      if (n.kernelInitializer != null || n.kernelRegularizer != null || n.kernelConstraint != null) throw new z("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
      if (n.padding != null && n.padding !== "same" && n.padding !== "valid") throw new z(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(n.padding)}`);
      this.depthMultiplier = n.depthMultiplier == null ? 1 : n.depthMultiplier, this.depthwiseInitializer = dt(n.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = pt(n.depthwiseRegularizer), this.depthwiseConstraint = Lt(n.depthwiseConstraint), this.pointwiseInitializer = dt(n.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = pt(n.pointwiseRegularizer), this.pointwiseConstraint = Lt(n.pointwiseConstraint);
    }
    build(e) {
      if (e = Ze(e), e.length < this.rank + 2) throw new z(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(e)}`);
      const n = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
      if (e[n] == null || e[n] < 0) throw new z(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[n])}`);
      const s = e[n], r = this.kernelSize.concat([
        s,
        this.depthMultiplier
      ]), o = [];
      for (let a = 0; a < this.rank; ++a) o.push(1);
      o.push(s * this.depthMultiplier, this.filters);
      const i = true;
      this.depthwiseKernel = this.addWeight("depthwise_kernel", r, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, i, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", o, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, i, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [
        this.filters
      ], "float32", this.biasInitializer, this.biasRegularizer, i, this.biasConstraint) : this.bias = null, this.inputSpec = [
        new Et({
          ndim: this.rank + 2,
          axes: {
            [n]: s
          }
        })
      ], this.built = true;
    }
    call(e, n) {
      return q(() => {
        e = _e(e);
        let s;
        if (this.rank === 1) throw new ze("1D separable convolution is not implemented yet.");
        return this.rank === 2 && (this.dataFormat === "channelsFirst" && (e = He(e, [
          0,
          2,
          3,
          1
        ])), s = Hf(e, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (s = Ms(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), this.dataFormat === "channelsFirst" && (s = He(s, [
          0,
          3,
          1,
          2
        ])), s;
      });
    }
    getConfig() {
      const e = super.getConfig();
      return delete e.rank, delete e.kernelInitializer, delete e.kernelRegularizer, delete e.kernelConstraint, e.depthwiseInitializer = gt(this.depthwiseInitializer), e.pointwiseInitializer = gt(this.pointwiseInitializer), e.depthwiseRegularizer = ot(this.depthwiseRegularizer), e.pointwiseRegularizer = ot(this.pointwiseRegularizer), e.depthwiseConstraint = Ft(this.depthwiseConstraint), e.pointwiseConstraint = Ft(this.pointwiseConstraint), e;
    }
  }
  oT.className = "SeparableConv";
  class Aw extends oT {
    constructor(e) {
      super(2, e);
    }
  }
  Aw.className = "SeparableConv2D";
  le(Aw);
  class fh extends gl {
    constructor(e) {
      super(1, e), fh.verifyArgs(e), this.inputSpec = [
        {
          ndim: 3
        }
      ];
    }
    getConfig() {
      const e = super.getConfig();
      return delete e.rank, delete e.dataFormat, e;
    }
    static verifyArgs(e) {
      if (typeof e.kernelSize != "number" && !tw(e.kernelSize, "number", 1, 1)) throw new z(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`);
    }
  }
  fh.className = "Conv1D";
  le(fh);
  class _w extends We {
    constructor(e) {
      super(e), typeof e.cropping == "number" ? this.cropping = [
        [
          e.cropping,
          e.cropping
        ],
        [
          e.cropping,
          e.cropping
        ]
      ] : typeof e.cropping[0] == "number" ? this.cropping = [
        [
          e.cropping[0],
          e.cropping[0]
        ],
        [
          e.cropping[1],
          e.cropping[1]
        ]
      ] : this.cropping = e.cropping, this.dataFormat = e.dataFormat === void 0 ? "channelsLast" : e.dataFormat, this.inputSpec = [
        {
          ndim: 4
        }
      ];
    }
    computeOutputShape(e) {
      return this.dataFormat === "channelsFirst" ? [
        e[0],
        e[1],
        e[2] - this.cropping[0][0] - this.cropping[0][1],
        e[3] - this.cropping[1][0] - this.cropping[1][1]
      ] : [
        e[0],
        e[1] - this.cropping[0][0] - this.cropping[0][1],
        e[2] - this.cropping[1][0] - this.cropping[1][1],
        e[3]
      ];
    }
    call(e, n) {
      return q(() => {
        if (e = _e(e), this.dataFormat === "channelsLast") {
          const s = Dh(e, this.cropping[0][0], e.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
          return Dh(s, this.cropping[1][0], e.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
        } else {
          const s = Dh(e, this.cropping[0][0], e.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
          return Dh(s, this.cropping[1][0], e.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
        }
      });
    }
    getConfig() {
      const e = {
        cropping: this.cropping,
        dataFormat: this.dataFormat
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  _w.className = "Cropping2D";
  le(_w);
  class Dw extends We {
    constructor(e) {
      super(e), this.DEFAULT_SIZE = [
        2,
        2
      ], this.inputSpec = [
        {
          ndim: 4
        }
      ], this.size = e.size == null ? this.DEFAULT_SIZE : e.size, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, It(this.dataFormat), this.interpolation = e.interpolation == null ? "nearest" : e.interpolation, lU(this.interpolation);
    }
    computeOutputShape(e) {
      if (this.dataFormat === "channelsFirst") {
        const n = e[2] == null ? null : this.size[0] * e[2], s = e[3] == null ? null : this.size[1] * e[3];
        return [
          e[0],
          e[1],
          n,
          s
        ];
      } else {
        const n = e[1] == null ? null : this.size[0] * e[1], s = e[2] == null ? null : this.size[1] * e[2];
        return [
          e[0],
          n,
          s,
          e[3]
        ];
      }
    }
    call(e, n) {
      return q(() => {
        let s = _e(e);
        const r = s.shape;
        if (this.dataFormat === "channelsFirst") {
          s = He(s, [
            0,
            2,
            3,
            1
          ]);
          const o = this.size[0] * r[2], i = this.size[1] * r[3], a = this.interpolation === "nearest" ? ps.resizeNearestNeighbor(s, [
            o,
            i
          ]) : ps.resizeBilinear(s, [
            o,
            i
          ]);
          return He(a, [
            0,
            3,
            1,
            2
          ]);
        } else {
          const o = this.size[0] * r[1], i = this.size[1] * r[2];
          return this.interpolation === "nearest" ? ps.resizeNearestNeighbor(s, [
            o,
            i
          ]) : ps.resizeBilinear(s, [
            o,
            i
          ]);
        }
      });
    }
    getConfig() {
      const e = {
        size: this.size,
        dataFormat: this.dataFormat,
        interpolation: this.interpolation
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  Dw.className = "UpSampling2D";
  le(Dw);
  function tH(t, e, n = [
    1,
    1
  ], s = "valid", r, o) {
    return q(() => {
      r == null && (r = Os()), It(r);
      let i = Tw(t, r);
      if (t.rank !== 4) throw new z(`Input for depthwiseConv2d is required to be 4-D, but is instead ${t.rank}-D`);
      if (e.rank !== 4) throw new z(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);
      return i = al(i, e, n, s === "same" ? "same" : "valid", "NHWC", o), r === "channelsFirst" && (i = He(i, [
        0,
        3,
        1,
        2
      ])), i;
    });
  }
  class Ow extends Tm {
    constructor(e) {
      super(2, e), this.depthwiseKernel = null, this.depthMultiplier = e.depthMultiplier == null ? 1 : e.depthMultiplier, this.depthwiseInitializer = dt(e.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = Lt(e.depthwiseConstraint), this.depthwiseRegularizer = pt(e.depthwiseRegularizer);
    }
    build(e) {
      if (e = Ze(e), e.length < 4) throw new z(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);
      const n = this.dataFormat === "channelsFirst" ? 1 : 3;
      if (e[n] == null || e[n] < 0) throw new z(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[n]}).`);
      const s = e[n], r = [
        this.kernelSize[0],
        this.kernelSize[1],
        s,
        this.depthMultiplier
      ];
      this.depthwiseKernel = this.addWeight("depthwise_kernel", r, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [
        s * this.depthMultiplier
      ], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
    }
    call(e, n) {
      return q(() => {
        e = _e(e);
        let s = tH(e, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
        return this.useBias && (s = Ms(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), s;
      });
    }
    computeOutputShape(e) {
      e = Ze(e);
      const n = this.dataFormat === "channelsFirst" ? e[2] : e[1], s = this.dataFormat === "channelsFirst" ? e[3] : e[2], r = this.dataFormat === "channelsFirst" ? e[1] * this.depthMultiplier : e[3] * this.depthMultiplier, o = Rs(n, this.kernelSize[0], this.padding, this.strides[0]), i = Rs(s, this.kernelSize[1], this.padding, this.strides[1]);
      return this.dataFormat === "channelsFirst" ? [
        e[0],
        r,
        o,
        i
      ] : [
        e[0],
        o,
        i,
        r
      ];
    }
    getConfig() {
      const e = super.getConfig();
      return e.depthMultiplier = this.depthMultiplier, e.depthwiseInitializer = gt(this.depthwiseInitializer), e.depthwiseRegularizer = ot(this.depthwiseRegularizer), e.depthwiseConstraint = Ft(this.depthwiseRegularizer), e;
    }
  }
  Ow.className = "DepthwiseConv2D";
  le(Ow);
  function iT(t, e, n, s) {
    if (Array.isArray(t)) {
      if (e != null || n != null) throw new z("When inputs is an array, neither initialState or constants should be provided");
      s != null && (n = t.slice(t.length - s, t.length), t = t.slice(0, t.length - s)), t.length > 1 && (e = t.slice(1, t.length)), t = t[0];
    }
    function r(o) {
      return o == null || Array.isArray(o) ? o : [
        o
      ];
    }
    return e = r(e), n = r(n), {
      inputs: t,
      initialState: e,
      constants: n
    };
  }
  function aT(t, e, n, s = false, r, o, i = false, a = false) {
    return q(() => {
      const l = e.shape.length;
      if (l < 3) throw new z(`Input should be at least 3D, but is ${l}D.`);
      const c = [
        1,
        0
      ].concat(Ds(2, l));
      e = He(e, c), i && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), r != null && (r = ge(ge(r, "bool"), "float32"), r.rank === l - 1 && (r = Yt(r, -1)), r = He(r, c)), s && (e = rs(e, 0), r != null && (r = rs(r, 0)));
      const u = [];
      let h, d = n;
      const p = e.shape[0], f = os(e);
      let m;
      r != null && (m = os(r));
      for (let y = 0; y < p; ++y) {
        const b = f[y], w = q(() => t(b, d));
        if (r == null) h = w[0], d = w[1];
        else {
          const x = q(() => {
            const S = m[y], I = ve(jn(S), S), E = ae(L(w[0], S), L(d[0], I)), R = d.map((N, k) => ae(L(w[1][k], S), L(N, I)));
            return {
              output: E,
              newStates: R
            };
          });
          h = x.output, d = x.newStates;
        }
        a && u.push(h);
      }
      let g;
      return a && (g = yn(u, 1)), [
        h,
        g,
        d
      ];
    });
  }
  class Bs extends We {
    constructor(e) {
      super(e);
      let n;
      if (e.cell == null) throw new z("cell property is missing for the constructor of RNN.");
      if (Array.isArray(e.cell) ? n = new Am({
        cells: e.cell
      }) : n = e.cell, n.stateSize == null) throw new z("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
      this.cell = n, this.returnSequences = e.returnSequences == null ? false : e.returnSequences, this.returnState = e.returnState == null ? false : e.returnState, this.goBackwards = e.goBackwards == null ? false : e.goBackwards, this._stateful = e.stateful == null ? false : e.stateful, this.unroll = e.unroll == null ? false : e.unroll, this.supportsMasking = true, this.inputSpec = [
        new Et({
          ndim: 3
        })
      ], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
    }
    getStates() {
      if (this.states_ == null) {
        const e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
        return Ds(0, e).map((n) => null);
      } else return this.states_;
    }
    setStates(e) {
      this.states_ = e;
    }
    computeOutputShape(e) {
      oy(e) && (e = e[0]), e = e;
      let n = this.cell.stateSize;
      Array.isArray(n) || (n = [
        n
      ]);
      const s = n[0];
      let r;
      if (this.returnSequences ? r = [
        e[0],
        e[1],
        s
      ] : r = [
        e[0],
        s
      ], this.returnState) {
        const o = [];
        for (const i of n) o.push([
          e[0],
          i
        ]);
        return [
          r
        ].concat(o);
      } else return r;
    }
    computeMask(e, n) {
      return q(() => {
        Array.isArray(n) && (n = n[0]);
        const s = this.returnSequences ? n : null;
        if (this.returnState) {
          const r = this.states.map((o) => null);
          return [
            s
          ].concat(r);
        } else return s;
      });
    }
    get states() {
      if (this.states_ == null) {
        const e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, n = [];
        for (let s = 0; s < e; ++s) n.push(null);
        return n;
      } else return this.states_;
    }
    set states(e) {
      this.states_ = e;
    }
    build(e) {
      if (this.numConstants != null) throw new ze("Constants support is not implemented in RNN yet.");
      oy(e) && (e = e[0]), e = e;
      const n = this.stateful ? e[0] : null, s = e.slice(2);
      this.inputSpec[0] = new Et({
        shape: [
          n,
          null,
          ...s
        ]
      });
      const r = [
        e[0]
      ].concat(e.slice(2));
      this.cell.build(r);
      let o;
      if (Array.isArray(this.cell.stateSize) ? o = this.cell.stateSize : o = [
        this.cell.stateSize
      ], this.stateSpec != null) {
        if (!Ue(this.stateSpec.map((i) => i.shape[i.shape.length - 1]), o)) throw new z(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
      } else this.stateSpec = o.map((i) => new Et({
        shape: [
          null,
          i
        ]
      }));
      this.stateful && this.resetStates();
    }
    resetStates(e, n = false) {
      q(() => {
        if (!this.stateful) throw new js("Cannot call resetStates() on an RNN Layer that is not stateful.");
        const s = this.inputSpec[0].shape[0];
        if (s == null) throw new z("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
        if (this.states_ == null) Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => Tt([
          s,
          r
        ])) : this.states_ = [
          Tt([
            s,
            this.cell.stateSize
          ])
        ];
        else if (e == null) Oe(this.states_), this.keptStates != null && (Oe(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => Tt([
          s,
          r
        ])) : this.states_[0] = Tt([
          s,
          this.cell.stateSize
        ]);
        else {
          if (Array.isArray(e) || (e = [
            e
          ]), e.length !== this.states_.length) throw new z(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
          n === true ? this.keptStates.push(this.states_.slice()) : Oe(this.states_);
          for (let r = 0; r < this.states_.length; ++r) {
            const o = e[r], i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[r] : this.cell.stateSize, a = [
              s,
              i
            ];
            if (!Ue(o.shape, a)) throw new z(`State ${r} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${o.shape}`);
            this.states_[r] = o;
          }
        }
        this.states_ = this.states_.map((r) => Dt(r.clone()));
      });
    }
    apply(e, n) {
      let s = n == null ? null : n.initialState, r = n == null ? null : n.constants;
      n == null && (n = {});
      const o = iT(e, s, r, this.numConstants);
      e = o.inputs, s = o.initialState, r = o.constants;
      let i = [], a = [];
      if (s != null) {
        n.initialState = s, i = i.concat(s), this.stateSpec = [];
        for (const c of s) this.stateSpec.push(new Et({
          shape: c.shape
        }));
        a = a.concat(this.stateSpec);
      }
      if (r != null && (n.constants = r, i = i.concat(r), this.numConstants = r.length), i[0] instanceof Fs) {
        const c = [
          e
        ].concat(i), u = this.inputSpec.concat(a), h = this.inputSpec;
        this.inputSpec = u;
        const d = super.apply(c, n);
        return this.inputSpec = h, d;
      } else return super.apply(e, n);
    }
    call(e, n) {
      return q(() => {
        const s = n == null ? null : n.mask, r = n == null ? null : n.training;
        let o = n == null ? null : n.initialState;
        e = _e(e), o == null && (this.stateful ? o = this.states_ : o = this.getInitialState(e));
        const i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
        if (o.length !== i) throw new z(`RNN Layer has ${i} state(s) but was passed ${o.length} initial state(s).`);
        this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
        const a = {
          training: r
        }, c = aT((f, m) => {
          const g = this.cell.call([
            f
          ].concat(m), a);
          return [
            g[0],
            g.slice(1)
          ];
        }, e, o, this.goBackwards, s, null, this.unroll, this.returnSequences), u = c[0], h = c[1], d = c[2];
        this.stateful && this.resetStates(d, r);
        const p = this.returnSequences ? h : u;
        return this.returnState ? [
          p
        ].concat(d) : p;
      });
    }
    getInitialState(e) {
      return q(() => {
        let n = Tt(e.shape);
        return n = $e(n, [
          1,
          2
        ]), n = ch(n), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((s) => s > 1 ? sy(n, [
          1,
          s
        ]) : n) : this.cell.stateSize > 1 ? [
          sy(n, [
            1,
            this.cell.stateSize
          ])
        ] : [
          n
        ];
      });
    }
    get trainableWeights() {
      return this.trainable ? this.cell.trainableWeights : [];
    }
    get nonTrainableWeights() {
      return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
    }
    setFastWeightInitDuringBuild(e) {
      super.setFastWeightInitDuringBuild(e), this.cell != null && this.cell.setFastWeightInitDuringBuild(e);
    }
    getConfig() {
      const e = super.getConfig(), n = {
        returnSequences: this.returnSequences,
        returnState: this.returnState,
        goBackwards: this.goBackwards,
        stateful: this.stateful,
        unroll: this.unroll
      };
      this.numConstants != null && (n.numConstants = this.numConstants);
      const s = this.cell.getConfig();
      return this.getClassName() === Bs.className && (n.cell = {
        className: this.cell.getClassName(),
        config: s
      }), Object.assign(Object.assign(Object.assign({}, s), e), n);
    }
    static fromConfig(e, n, s = {}) {
      const r = n.cell, o = Es(r, s);
      return new e(Object.assign(n, {
        cell: o
      }));
    }
  }
  Bs.className = "RNN";
  le(Bs);
  class mh extends We {
  }
  class Em extends mh {
    constructor(e) {
      super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, Vt(this.units, "units"), this.activation = po(e.activation == null ? this.DEFAULT_ACTIVATION : e.activation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = dt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = dt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = dt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = pt(e.kernelRegularizer), this.recurrentRegularizer = pt(e.recurrentRegularizer), this.biasRegularizer = pt(e.biasRegularizer), this.kernelConstraint = Lt(e.kernelConstraint), this.recurrentConstraint = Lt(e.recurrentConstraint), this.biasConstraint = Lt(e.biasConstraint), this.dropout = oa([
        1,
        uo([
          0,
          e.dropout == null ? 0 : e.dropout
        ])
      ]), this.recurrentDropout = oa([
        1,
        uo([
          0,
          e.recurrentDropout == null ? 0 : e.recurrentDropout
        ])
      ]), this.dropoutFunc = e.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
    }
    build(e) {
      e = Ze(e), this.kernel = this.addWeight("kernel", [
        e[e.length - 1],
        this.units
      ], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [
        this.units,
        this.units
      ], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [
        this.units
      ], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
    }
    call(e, n) {
      return q(() => {
        if (e = e, e.length !== 2) throw new z(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);
        let s = e[1];
        e = e[0];
        const r = n.training == null ? false : n.training;
        0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = fo({
          ones: () => jn(e),
          rate: this.dropout,
          training: r,
          dropoutFunc: this.dropoutFunc
        })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = fo({
          ones: () => jn(s),
          rate: this.recurrentDropout,
          training: r,
          dropoutFunc: this.dropoutFunc
        }));
        let o;
        const i = this.dropoutMask, a = this.recurrentDropoutMask;
        i != null ? o = sr(L(e, i), this.kernel.read()) : o = sr(e, this.kernel.read()), this.bias != null && (o = Ms(o, this.bias.read())), a != null && (s = L(s, a));
        let l = ae(o, sr(s, this.recurrentKernel.read()));
        return this.activation != null && (l = this.activation.apply(l)), [
          l,
          l
        ];
      });
    }
    getConfig() {
      const e = super.getConfig(), n = {
        units: this.units,
        activation: ho(this.activation),
        useBias: this.useBias,
        kernelInitializer: gt(this.kernelInitializer),
        recurrentInitializer: gt(this.recurrentInitializer),
        biasInitializer: gt(this.biasInitializer),
        kernelRegularizer: ot(this.kernelRegularizer),
        recurrentRegularizer: ot(this.recurrentRegularizer),
        biasRegularizer: ot(this.biasRegularizer),
        activityRegularizer: ot(this.activityRegularizer),
        kernelConstraint: Ft(this.kernelConstraint),
        recurrentConstraint: Ft(this.recurrentConstraint),
        biasConstraint: Ft(this.biasConstraint),
        dropout: this.dropout,
        recurrentDropout: this.recurrentDropout
      };
      return Object.assign(Object.assign({}, e), n);
    }
  }
  Em.className = "SimpleRNNCell";
  le(Em);
  class Fw extends Bs {
    constructor(e) {
      e.cell = new Em(e), super(e);
    }
    call(e, n) {
      return q(() => {
        this.cell.dropoutMask != null && (Oe(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Oe(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
        const s = n == null ? null : n.mask, r = n == null ? null : n.training, o = n == null ? null : n.initialState;
        return super.call(e, {
          mask: s,
          training: r,
          initialState: o
        });
      });
    }
    static fromConfig(e, n) {
      return new e(n);
    }
  }
  Fw.className = "SimpleRNN";
  le(Fw);
  class Rm extends mh {
    constructor(e) {
      if (super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.resetAfter) throw new z("GRUCell does not support reset_after parameter set to true.");
      this.units = e.units, Vt(this.units, "units"), this.activation = po(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = po(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = dt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = dt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = dt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = pt(e.kernelRegularizer), this.recurrentRegularizer = pt(e.recurrentRegularizer), this.biasRegularizer = pt(e.biasRegularizer), this.kernelConstraint = Lt(e.kernelConstraint), this.recurrentConstraint = Lt(e.recurrentConstraint), this.biasConstraint = Lt(e.biasConstraint), this.dropout = oa([
        1,
        uo([
          0,
          e.dropout == null ? 0 : e.dropout
        ])
      ]), this.recurrentDropout = oa([
        1,
        uo([
          0,
          e.recurrentDropout == null ? 0 : e.recurrentDropout
        ])
      ]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
    }
    build(e) {
      e = Ze(e);
      const n = e[e.length - 1];
      this.kernel = this.addWeight("kernel", [
        n,
        this.units * 3
      ], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [
        this.units,
        this.units * 3
      ], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [
        this.units * 3
      ], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
    }
    call(e, n) {
      return q(() => {
        if (e = e, e.length !== 2) throw new z(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);
        const s = n.training == null ? false : n.training;
        let r = e[1];
        e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = fo({
          ones: () => jn(e),
          rate: this.dropout,
          training: s,
          count: 3,
          dropoutFunc: this.dropoutFunc
        })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = fo({
          ones: () => jn(r),
          rate: this.recurrentDropout,
          training: s,
          count: 3,
          dropoutFunc: this.dropoutFunc
        }));
        const o = this.dropoutMask, i = this.recurrentDropoutMask;
        let a, l, c;
        0 < this.dropout && this.dropout < 1 && (e = L(e, o[0]));
        let u = sr(e, this.kernel.read());
        this.useBias && (u = Ms(u, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (r = L(r, i[0]));
        const h = this.recurrentKernel.read(), [d, p] = Rn(h, [
          2 * this.units,
          this.units
        ], h.rank - 1), f = sr(r, d), [m, g, y] = Rn(u, 3, u.rank - 1), [b, w] = Rn(f, 2, f.rank - 1);
        a = this.recurrentActivation.apply(ae(m, b)), l = this.recurrentActivation.apply(ae(g, w));
        const x = sr(L(l, r), p);
        c = this.activation.apply(ae(y, x));
        const S = ae(L(a, r), L(ae(1, lt(a)), c));
        return [
          S,
          S
        ];
      });
    }
    getConfig() {
      const e = super.getConfig(), n = {
        units: this.units,
        activation: ho(this.activation),
        recurrentActivation: ho(this.recurrentActivation),
        useBias: this.useBias,
        kernelInitializer: gt(this.kernelInitializer),
        recurrentInitializer: gt(this.recurrentInitializer),
        biasInitializer: gt(this.biasInitializer),
        kernelRegularizer: ot(this.kernelRegularizer),
        recurrentRegularizer: ot(this.recurrentRegularizer),
        biasRegularizer: ot(this.biasRegularizer),
        activityRegularizer: ot(this.activityRegularizer),
        kernelConstraint: Ft(this.kernelConstraint),
        recurrentConstraint: Ft(this.recurrentConstraint),
        biasConstraint: Ft(this.biasConstraint),
        dropout: this.dropout,
        recurrentDropout: this.recurrentDropout,
        implementation: this.implementation,
        resetAfter: false
      };
      return Object.assign(Object.assign({}, e), n);
    }
  }
  Rm.className = "GRUCell";
  le(Rm);
  class Lw extends Bs {
    constructor(e) {
      e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new Rm(e), super(e);
    }
    call(e, n) {
      return q(() => {
        this.cell.dropoutMask != null && (Oe(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Oe(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
        const s = n == null ? null : n.mask, r = n == null ? null : n.training, o = n == null ? null : n.initialState;
        return super.call(e, {
          mask: s,
          training: r,
          initialState: o
        });
      });
    }
    static fromConfig(e, n) {
      return n.implmentation === 0 && (n.implementation = 1), new e(n);
    }
  }
  Lw.className = "GRU";
  le(Lw);
  class gh extends mh {
    constructor(e) {
      super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, Vt(this.units, "units"), this.activation = po(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = po(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = dt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = dt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = dt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = e.unitForgetBias, this.kernelRegularizer = pt(e.kernelRegularizer), this.recurrentRegularizer = pt(e.recurrentRegularizer), this.biasRegularizer = pt(e.biasRegularizer), this.kernelConstraint = Lt(e.kernelConstraint), this.recurrentConstraint = Lt(e.recurrentConstraint), this.biasConstraint = Lt(e.biasConstraint), this.dropout = oa([
        1,
        uo([
          0,
          e.dropout == null ? 0 : e.dropout
        ])
      ]), this.recurrentDropout = oa([
        1,
        uo([
          0,
          e.recurrentDropout == null ? 0 : e.recurrentDropout
        ])
      ]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = [
        this.units,
        this.units
      ], this.dropoutMask = null, this.recurrentDropoutMask = null;
    }
    build(e) {
      var n;
      e = Ze(e);
      const s = e[e.length - 1];
      this.kernel = this.addWeight("kernel", [
        s,
        this.units * 4
      ], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [
        this.units,
        this.units * 4
      ], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
      let r;
      if (this.useBias) {
        if (this.unitForgetBias) {
          const o = this.biasInitializer, i = this.units;
          r = new (n = class extends xs {
            apply(l, c) {
              const u = o.apply([
                i
              ]), h = new ym().apply([
                i
              ]), d = o.apply([
                i * 2
              ]);
              return Mv(Mv(u, h), d);
            }
          }, n.className = "CustomInit", n)();
        } else r = this.biasInitializer;
        this.bias = this.addWeight("bias", [
          this.units * 4
        ], null, r, this.biasRegularizer, true, this.biasConstraint);
      } else this.bias = null;
      this.built = true;
    }
    call(e, n) {
      return q(() => {
        const s = n.training == null ? false : n.training;
        if (e = e, e.length !== 3) throw new z(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
        let r = e[1];
        const o = e[2];
        e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = fo({
          ones: () => jn(e),
          rate: this.dropout,
          training: s,
          count: 4,
          dropoutFunc: this.dropoutFunc
        })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = fo({
          ones: () => jn(r),
          rate: this.recurrentDropout,
          training: s,
          count: 4,
          dropoutFunc: this.dropoutFunc
        }));
        const i = this.dropoutMask, a = this.recurrentDropoutMask;
        let l, c, u, h;
        0 < this.dropout && this.dropout < 1 && (e = L(e, i[0]));
        let d = sr(e, this.kernel.read());
        0 < this.recurrentDropout && this.recurrentDropout < 1 && (r = L(r, a[0])), d = ae(d, sr(r, this.recurrentKernel.read())), this.useBias && (d = Ms(d, this.bias.read()));
        const [p, f, m, g] = Rn(d, 4, d.rank - 1);
        l = this.recurrentActivation.apply(p), c = this.recurrentActivation.apply(f), u = ae(L(c, o), L(l, this.activation.apply(m))), h = this.recurrentActivation.apply(g);
        const y = L(h, this.activation.apply(u));
        return [
          y,
          y,
          u
        ];
      });
    }
    getConfig() {
      const e = super.getConfig(), n = {
        units: this.units,
        activation: ho(this.activation),
        recurrentActivation: ho(this.recurrentActivation),
        useBias: this.useBias,
        kernelInitializer: gt(this.kernelInitializer),
        recurrentInitializer: gt(this.recurrentInitializer),
        biasInitializer: gt(this.biasInitializer),
        unitForgetBias: this.unitForgetBias,
        kernelRegularizer: ot(this.kernelRegularizer),
        recurrentRegularizer: ot(this.recurrentRegularizer),
        biasRegularizer: ot(this.biasRegularizer),
        activityRegularizer: ot(this.activityRegularizer),
        kernelConstraint: Ft(this.kernelConstraint),
        recurrentConstraint: Ft(this.recurrentConstraint),
        biasConstraint: Ft(this.biasConstraint),
        dropout: this.dropout,
        recurrentDropout: this.recurrentDropout,
        implementation: this.implementation
      };
      return Object.assign(Object.assign({}, e), n);
    }
  }
  gh.className = "LSTMCell";
  le(gh);
  class Pw extends Bs {
    constructor(e) {
      e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new gh(e), super(e);
    }
    call(e, n) {
      return q(() => {
        this.cell.dropoutMask != null && (Oe(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Oe(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
        const s = n == null ? null : n.mask, r = n == null ? null : n.training, o = n == null ? null : n.initialState;
        return super.call(e, {
          mask: s,
          training: r,
          initialState: o
        });
      });
    }
    static fromConfig(e, n) {
      return n.implmentation === 0 && (n.implementation = 1), new e(n);
    }
  }
  Pw.className = "LSTM";
  le(Pw);
  class Am extends mh {
    constructor(e) {
      super(e), this.cells = e.cells;
    }
    get stateSize() {
      const e = [];
      for (const n of this.cells.slice().reverse()) Array.isArray(n.stateSize) ? e.push(...n.stateSize) : e.push(n.stateSize);
      return e;
    }
    call(e, n) {
      return q(() => {
        e = e;
        let s = e.slice(1);
        const r = [];
        for (const a of this.cells.slice().reverse()) Array.isArray(a.stateSize) ? r.push(s.splice(0, a.stateSize.length)) : r.push(s.splice(0, 1));
        r.reverse();
        const o = [];
        let i;
        for (let a = 0; a < this.cells.length; ++a) {
          const l = this.cells[a];
          s = r[a], a === 0 ? i = [
            e[0]
          ].concat(s) : i = [
            i[0]
          ].concat(s), i = l.call(i, n), o.push(i.slice(1));
        }
        s = [];
        for (const a of o.slice().reverse()) s.push(...a);
        return [
          i[0]
        ].concat(s);
      });
    }
    build(e) {
      oy(e) && (e = e[0]), e = e;
      let n;
      this.cells.forEach((s, r) => {
        Xo(`RNNCell_${r}`, () => {
          s.build(e), Array.isArray(s.stateSize) ? n = s.stateSize[0] : n = s.stateSize, e = [
            e[0],
            n
          ];
        });
      }), this.built = true;
    }
    getConfig() {
      const e = super.getConfig(), n = (o) => ({
        className: o.getClassName(),
        config: o.getConfig()
      }), r = {
        cells: this.cells.map(n)
      };
      return Object.assign(Object.assign({}, e), r);
    }
    static fromConfig(e, n, s = {}) {
      const r = [];
      for (const o of n.cells) r.push(Es(o, s));
      return new e({
        cells: r
      });
    }
    get trainableWeights() {
      if (!this.trainable) return [];
      const e = [];
      for (const n of this.cells) e.push(...n.trainableWeights);
      return e;
    }
    get nonTrainableWeights() {
      const e = [];
      for (const n of this.cells) e.push(...n.nonTrainableWeights);
      if (!this.trainable) {
        const n = [];
        for (const s of this.cells) n.push(...s.trainableWeights);
        return n.concat(e);
      }
      return e;
    }
    getWeights() {
      const e = [];
      for (const n of this.cells) e.push(...n.weights);
      return iy(e);
    }
    setWeights(e) {
      const n = [];
      for (const s of this.cells) {
        const r = s.weights.length, o = e.splice(r);
        for (let i = 0; i < s.weights.length; ++i) n.push([
          s.weights[i],
          o[i]
        ]);
      }
      uw(n);
    }
  }
  Am.className = "StackedRNNCells";
  le(Am);
  function fo(t) {
    const { ones: e, rate: n, training: s = false, count: r = 1, dropoutFunc: o } = t, i = () => o != null ? o(e(), n) : wk(e(), n), a = () => hh(i, e, s);
    return !r || r <= 1 ? Dt(a().clone()) : Array(r).fill(void 0).map(a).map((c) => Dt(c.clone()));
  }
  var nH = function(t, e) {
    var n = {};
    for (var s in t) Object.prototype.hasOwnProperty.call(t, s) && e.indexOf(s) < 0 && (n[s] = t[s]);
    if (t != null && typeof Object.getOwnPropertySymbols == "function") for (var r = 0, s = Object.getOwnPropertySymbols(t); r < s.length; r++) e.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(t, s[r]) && (n[s[r]] = t[s[r]]);
    return n;
  };
  class lT extends Bs {
    constructor(e) {
      if (e.unroll) throw new ze("Unrolling is not possible with convolutional RNNs.");
      if (Array.isArray(e.cell)) throw new ze("It is not possible at the moment to stack convolutional cells.");
      super(e), this.inputSpec = [
        new Et({
          ndim: 5
        })
      ];
    }
    call(e, n) {
      return q(() => {
        if (this.cell.dropoutMask != null && (Oe(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Oe(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), n && n.constants) throw new z("ConvRNN2D cell does not support constants");
        const s = n == null ? null : n.mask, r = n == null ? null : n.training, o = n == null ? null : n.initialState;
        return super.call(e, {
          mask: s,
          training: r,
          initialState: o
        });
      });
    }
    computeOutputShape(e) {
      let n = this.computeSingleOutputShape(e);
      return this.returnSequences || (n = [
        n[0],
        ...n.slice(2)
      ]), this.returnState && (n = [
        n,
        ...Array(2).fill([
          e[0],
          ...n.slice(-3)
        ])
      ]), n;
    }
    getInitialState(e) {
      return q(() => {
        const { stateSize: n } = this.cell, s = e.shape, r = this.computeSingleOutputShape(s), o = [
          r[0],
          ...r.slice(2)
        ], i = Tt(o);
        return Array.isArray(n) ? Array(n.length).fill(i) : [
          i
        ];
      });
    }
    resetStates(e, n = false) {
      q(() => {
        if (!this.stateful) throw new js("Cannot call resetStates() on an RNN Layer that is not stateful.");
        const s = this.inputSpec[0].shape, r = this.computeSingleOutputShape(s), o = [
          r[0],
          ...r.slice(2)
        ];
        if (s[0] == null) throw new z("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
        if (this.getStates() == null) Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => Tt(o)) : this.states_ = [
          Tt(o)
        ];
        else if (e == null) Oe(this.states_), this.keptStates != null && (Oe(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => Tt(o)) : this.states_[0] = Tt(o);
        else {
          if (Array.isArray(e) || (e = [
            e
          ]), e.length !== this.states_.length) throw new z(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
          n ? this.keptStates.push(this.states_.slice()) : Oe(this.states_);
          for (let a = 0; a < this.states_.length; ++a) {
            const l = e[a], c = o;
            if (!Ue(l.shape, c)) throw new z(`State ${a} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${l.shape}`);
            this.states_[a] = l;
          }
        }
        this.states_ = this.states_.map((a) => Dt(a.clone()));
      });
    }
    computeSingleOutputShape(e) {
      const { dataFormat: n, filters: s, kernelSize: r, padding: o, strides: i, dilationRate: a } = this.cell, l = n === "channelsFirst", c = e[l ? 3 : 2], u = e[l ? 4 : 3], h = Rs(c, r[0], o, i[0], a[0]), d = Rs(u, r[1], o, i[1], a[1]);
      return [
        ...e.slice(0, 2),
        ...l ? [
          s,
          h,
          d
        ] : [
          h,
          d,
          s
        ]
      ];
    }
  }
  lT.className = "ConvRNN2D";
  class _m extends gh {
    constructor(e) {
      const { filters: n, kernelSize: s, strides: r, padding: o, dataFormat: i, dilationRate: a } = e;
      super(Object.assign(Object.assign({}, e), {
        units: n
      })), this.filters = n, Vt(this.filters, "filters"), this.kernelSize = qi(s, 2, "kernelSize"), this.kernelSize.forEach((l) => Vt(l, "kernelSize")), this.strides = qi(r || 1, 2, "strides"), this.strides.forEach((l) => Vt(l, "strides")), this.padding = o || "valid", is(this.padding), this.dataFormat = i || "channelsLast", It(this.dataFormat), this.dilationRate = qi(a || 1, 2, "dilationRate"), this.dilationRate.forEach((l) => Vt(l, "dilationRate"));
    }
    build(e) {
      var n;
      e = Ze(e);
      const s = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
      if (e[s] == null) throw new z(`The channel dimension of the input should be defined. Found ${e[s]}`);
      const r = e[s], o = 4, i = this.kernelSize.concat([
        r,
        this.filters * o
      ]);
      this.kernel = this.addWeight("kernel", i, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
      const a = this.kernelSize.concat([
        this.filters,
        this.filters * o
      ]);
      if (this.recurrentKernel = this.addWeight("recurrent_kernel", a, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias) {
        let l;
        if (this.unitForgetBias) {
          const c = this.biasInitializer, u = this.filters;
          l = new (n = class extends xs {
            apply(d, p) {
              const f = c.apply([
                u
              ]), m = En([
                u
              ]), g = c.apply([
                u * 2
              ]);
              return nw([
                f,
                m,
                g
              ]);
            }
          }, n.className = "CustomInit", n)();
        } else l = this.biasInitializer;
        this.bias = this.addWeight("bias", [
          this.filters * o
        ], null, l, this.biasRegularizer, true, this.biasConstraint);
      }
      this.built = true;
    }
    call(e, n) {
      return q(() => {
        if (e.length !== 3) throw new z(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
        const s = n.training || false, r = e[0], o = e[1], i = e[2], a = 4;
        0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = fo({
          ones: () => jn(r),
          rate: this.dropout,
          training: s,
          count: a,
          dropoutFunc: this.dropoutFunc
        }));
        const l = this.dropoutMask, c = (te, se, re) => !se || !se[re] ? te : L(se[re], te);
        let u = c(r, l, 0), h = c(r, l, 1), d = c(r, l, 2), p = c(r, l, 3);
        0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = fo({
          ones: () => jn(o),
          rate: this.recurrentDropout,
          training: s,
          count: a,
          dropoutFunc: this.dropoutFunc
        }));
        const f = this.recurrentDropoutMask;
        let m = c(o, f, 0), g = c(o, f, 1), y = c(o, f, 2), b = c(o, f, 3);
        const w = 3, [x, S, I, E] = Rn(this.kernel.read(), a, w), [R, N, k, $] = this.useBias ? Rn(this.bias.read(), a) : [
          null,
          null,
          null,
          null
        ];
        u = this.inputConv(u, x, R, this.padding), h = this.inputConv(h, S, N, this.padding), d = this.inputConv(d, I, k, this.padding), p = this.inputConv(p, E, $, this.padding);
        const [F, M, U, W] = Rn(this.recurrentKernel.read(), a, w);
        m = this.recurrentConv(m, F), g = this.recurrentConv(g, M), y = this.recurrentConv(y, U), b = this.recurrentConv(b, W);
        const V = this.recurrentActivation.apply(ae(u, m)), H = this.recurrentActivation.apply(ae(h, g)), G = ae(L(H, i), L(V, this.activation.apply(ae(d, y)))), Y = L(this.recurrentActivation.apply(ae(p, b)), this.activation.apply(G));
        return [
          Y,
          Y,
          G
        ];
      });
    }
    getConfig() {
      const e = super.getConfig(), { units: n } = e, s = nH(e, [
        "units"
      ]), r = {
        filters: this.filters,
        kernelSize: this.kernelSize,
        padding: this.padding,
        dataFormat: this.dataFormat,
        dilationRate: this.dilationRate,
        strides: this.strides
      };
      return Object.assign(Object.assign({}, s), r);
    }
    inputConv(e, n, s, r) {
      const o = kr(e, n, this.strides, r || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
      return s ? Ms(o, s, this.dataFormat) : o;
    }
    recurrentConv(e, n) {
      return kr(e, n, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
    }
  }
  _m.className = "ConvLSTM2DCell";
  le(_m);
  class zw extends lT {
    constructor(e) {
      const n = new _m(e);
      super(Object.assign(Object.assign({}, e), {
        cell: n
      }));
    }
    static fromConfig(e, n) {
      return new e(n);
    }
  }
  zw.className = "ConvLSTM2D";
  le(zw);
  class Dm extends We {
    constructor(e) {
      super(e), this.rate = Math.max(Math.min(e.rate, 1), 0), this.noiseShape = e.noiseShape, this.seed = e.seed, this.supportsMasking = true;
    }
    getNoiseShape(e) {
      if (this.noiseShape == null) return this.noiseShape;
      const n = e.shape, s = [];
      for (let r = 0; r < this.noiseShape.length; ++r) s.push(this.noiseShape[r] == null ? n[r] : this.noiseShape[r]);
      return s;
    }
    call(e, n) {
      return q(() => {
        this.invokeCallHook(e, n);
        const s = _e(e);
        if (0 < this.rate && this.rate < 1) {
          const r = n.training == null ? false : n.training, o = this.getNoiseShape(s);
          return hh(() => wk(s, this.rate, o, this.seed), () => s, r);
        }
        return e;
      });
    }
    getConfig() {
      const e = {
        rate: this.rate,
        noiseShape: this.noiseShape,
        seed: this.seed
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
    dispose() {
      return super.dispose();
    }
  }
  Dm.className = "Dropout";
  le(Dm);
  class Mw extends Dm {
    constructor(e) {
      super(e), this.inputSpec = [
        {
          ndim: 3
        }
      ];
    }
    getNoiseShape(e) {
      const n = e.shape;
      return [
        n[0],
        1,
        n[2]
      ];
    }
  }
  Mw.className = "SpatialDropout1D";
  le(Mw);
  class Bw extends We {
    constructor(e) {
      if (super(e), this.activation = null, this.useBias = true, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.batchInputShape == null && e.inputShape == null && e.inputDim != null) {
        let n = null;
        e.batchSize != null && (n = e.batchSize), this.batchInputShape = [
          n,
          e.inputDim
        ];
      }
      this.units = e.units, Vt(this.units, "units"), this.activation = po(e.activation), e.useBias != null && (this.useBias = e.useBias), this.kernelInitializer = dt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = dt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = Lt(e.kernelConstraint), this.biasConstraint = Lt(e.biasConstraint), this.kernelRegularizer = pt(e.kernelRegularizer), this.biasRegularizer = pt(e.biasRegularizer), this.activityRegularizer = pt(e.activityRegularizer), this.supportsMasking = true, this.inputSpec = [
        {
          minNDim: 2
        }
      ];
    }
    build(e) {
      e = Ze(e);
      const n = e[e.length - 1];
      this.kernel == null && (this.kernel = this.addWeight("kernel", [
        n,
        this.units
      ], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [
        this.units
      ], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint))), this.inputSpec = [
        {
          minNDim: 2,
          axes: {
            [-1]: n
          }
        }
      ], this.built = true;
    }
    computeOutputShape(e) {
      e = Ze(e);
      const n = e.slice();
      return n[n.length - 1] = this.units, n;
    }
    call(e, n) {
      return q(() => {
        this.invokeCallHook(e, n);
        const s = _e(e), r = pk(this.activation.getClassName());
        let o;
        return r != null ? o = sr(s, this.kernel.read(), r, this.bias ? this.bias.read() : null) : (o = sr(s, this.kernel.read()), this.bias != null && (o = Ms(o, this.bias.read())), this.activation != null && (o = this.activation.apply(o))), o;
      });
    }
    getConfig() {
      const e = {
        units: this.units,
        activation: ho(this.activation),
        useBias: this.useBias,
        kernelInitializer: gt(this.kernelInitializer),
        biasInitializer: gt(this.biasInitializer),
        kernelRegularizer: ot(this.kernelRegularizer),
        biasRegularizer: ot(this.biasRegularizer),
        activityRegularizer: ot(this.activityRegularizer),
        kernelConstraint: Ft(this.kernelConstraint),
        biasConstraint: Ft(this.biasConstraint)
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  Bw.className = "Dense";
  le(Bw);
  class Vw extends We {
    constructor(e) {
      e = e || {}, super(e), this.inputSpec = [
        {
          minNDim: 3
        }
      ], this.dataFormat = e.dataFormat;
    }
    computeOutputShape(e) {
      e = Ze(e);
      for (const n of e.slice(1)) if (n == null) throw new z(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
      return [
        e[0],
        no(e, 1)
      ];
    }
    call(e, n) {
      return q(() => {
        this.invokeCallHook(e, n);
        let s = _e(e);
        if (this.dataFormat === "channelsFirst" && s.rank > 1) {
          const r = [
            0
          ];
          for (let o = 2; o < s.rank; ++o) r.push(o);
          r.push(1), s = He(s, r);
        }
        return fU(s);
      });
    }
    getConfig() {
      const e = {};
      this.dataFormat != null && (e.dataFormat = this.dataFormat);
      const n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  Vw.className = "Flatten";
  le(Vw);
  class Ww extends We {
    constructor(e) {
      super(e), this.supportsMasking = true, this.activation = po(e.activation);
    }
    call(e, n) {
      return q(() => {
        this.invokeCallHook(e, n);
        const s = _e(e);
        return this.activation.apply(s);
      });
    }
    getConfig() {
      const e = {
        activation: ho(this.activation)
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  Ww.className = "Activation";
  le(Ww);
  class Uw extends We {
    constructor(e) {
      super(e), this.n = e.n, this.inputSpec = [
        {
          ndim: 2
        }
      ];
    }
    computeOutputShape(e) {
      return [
        e[0],
        this.n,
        e[1]
      ];
    }
    call(e, n) {
      return q(() => (e = _e(e), dU(e, this.n)));
    }
    getConfig() {
      const e = {
        n: this.n
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  Uw.className = "RepeatVector";
  le(Uw);
  class Gw extends We {
    constructor(e) {
      super(e), this.targetShape = e.targetShape;
      for (let n = 0; n < this.targetShape.length; ++n) this.isUnknown(this.targetShape[n]) && (this.targetShape[n] = null);
    }
    isUnknown(e) {
      return e < 0 || e == null;
    }
    fixUnknownDimension(e, n) {
      const s = "Total size of new array must be unchanged.", r = n.slice();
      let o = 1, i = null;
      for (let l = 0; l < r.length; ++l) {
        const c = r[l];
        if (this.isUnknown(c)) if (i === null) i = l;
        else throw new z("Can only specifiy one unknown dimension.");
        else o *= c;
      }
      const a = no(e);
      if (i !== null) {
        if (o === 0 || a % o !== 0) throw new z(s);
        r[i] = a / o;
      } else if (a !== o) throw new z(s);
      return r;
    }
    computeOutputShape(e) {
      let n = false;
      for (let s = 0; s < e.length; ++s) if (this.isUnknown(e[s])) {
        n = true;
        break;
      }
      return n ? e.slice(0, 1).concat(this.targetShape) : e.slice(0, 1).concat(this.fixUnknownDimension(e.slice(1), this.targetShape));
    }
    call(e, n) {
      return q(() => {
        this.invokeCallHook(e, n);
        const s = _e(e), r = s.shape, o = r.slice(0, 1).concat(this.fixUnknownDimension(r.slice(1), this.targetShape));
        return P(s, o);
      });
    }
    getConfig() {
      const e = {
        targetShape: this.targetShape
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  Gw.className = "Reshape";
  le(Gw);
  class Hw extends We {
    constructor(e) {
      if (super(e), e.dims == null) throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
      if (!Array.isArray(e.dims)) throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);
      const n = Ds(1, e.dims.length + 1);
      if (!Ue(e.dims.slice().sort(), n)) throw new Error("Invalid permutation `dims`: " + JSON.stringify(e.dims) + " `dims` must contain consecutive integers starting from 1.");
      this.dims = e.dims, this.dimsIncludingBatch = [
        0
      ].concat(this.dims), this.inputSpec = [
        new Et({
          ndim: this.dims.length + 1
        })
      ];
    }
    computeOutputShape(e) {
      e = Ze(e);
      const n = e.slice();
      return this.dims.forEach((s, r) => {
        n[r + 1] = e[s];
      }), n;
    }
    call(e, n) {
      return He(_e(e), this.dimsIncludingBatch);
    }
    getConfig() {
      const e = {
        dims: this.dims
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  Hw.className = "Permute";
  le(Hw);
  class jw extends We {
    constructor(e) {
      super(e ?? {}), this.supportsMasking = true, e != null ? this.maskValue = e.maskValue == null ? 0 : e.maskValue : this.maskValue = 0;
    }
    computeOutputShape(e) {
      return e;
    }
    getConfig() {
      const e = super.getConfig(), n = {
        maskValue: this.maskValue
      };
      return Object.assign(n, e), n;
    }
    computeMask(e, n) {
      const s = _e(e);
      return wc(oi(s, this.maskValue), -1);
    }
    call(e, n) {
      return q(() => {
        this.invokeCallHook(e, n);
        const s = _e(e), i = wc(oi(s, this.maskValue), -1, true);
        return L(s, ge(i, s.dtype));
      });
    }
  }
  jw.className = "Masking";
  le(jw);
  class qw extends We {
    constructor(e) {
      if (super(e), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", e.batchInputShape == null && e.inputShape == null) {
        let n = null;
        e.batchSize != null && (n = e.batchSize), e.inputLength == null ? this.batchInputShape = [
          n,
          null
        ] : this.batchInputShape = [
          n
        ].concat(et(e.inputLength));
      }
      this.inputDim = e.inputDim, Vt(this.inputDim, "inputDim"), this.outputDim = e.outputDim, Vt(this.outputDim, "outputDim"), this.embeddingsInitializer = dt(e.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = pt(e.embeddingsRegularizer), this.activityRegularizer = pt(e.activityRegularizer), this.embeddingsConstraint = Lt(e.embeddingsConstraint), this.maskZero = e.maskZero, this.supportsMasking = e.maskZero, this.inputLength = e.inputLength;
    }
    build(e) {
      this.embeddings = this.addWeight("embeddings", [
        this.inputDim,
        this.outputDim
      ], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint), this.built = true;
    }
    warnOnIncompatibleInputShape(e) {
    }
    computeMask(e, n) {
      return q(() => this.maskZero ? (e = _e(e), oi(e, qe(e))) : null);
    }
    computeOutputShape(e) {
      if (e = Ze(e), this.inputLength == null) return [
        ...e,
        this.outputDim
      ];
      const n = et(this.inputLength);
      if (n.length !== e.length - 1) throw new z(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
      {
        let s = 0;
        for (let r = 0; r < n.length; ++r) {
          const o = n[r], i = e[r + 1];
          if (o != null && i != null && o !== i) throw new z(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
          o == null && (n[s] = i), s++;
        }
      }
      return [
        e[0],
        ...n,
        this.outputDim
      ];
    }
    call(e, n) {
      return q(() => {
        this.invokeCallHook(e, n);
        let s = _e(e);
        s.dtype !== "int32" && (s = nr(s, "int32"));
        const r = xk(this.embeddings.read(), P(s, [
          s.size
        ]));
        return P(r, Ze(this.computeOutputShape(s.shape)));
      });
    }
    getConfig() {
      const e = {
        inputDim: this.inputDim,
        outputDim: this.outputDim,
        embeddingsInitializer: gt(this.embeddingsInitializer),
        embeddingsRegularizer: ot(this.embeddingsRegularizer),
        activityRegularizer: ot(this.activityRegularizer),
        embeddingsConstraint: Ft(this.embeddingsConstraint),
        maskZero: this.maskZero,
        inputLength: this.inputLength
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  qw.className = "Embedding";
  le(qw);
  class Ni extends We {
    constructor(e) {
      super(e || {}), this.supportsMasking = true;
    }
    mergeFunction(e) {
      throw new ze();
    }
    computeElementwiseOpOutputShape(e, n) {
      if (e == null || n == null) return null;
      if (e.length < n.length) return this.computeElementwiseOpOutputShape(n, e);
      if (n.length === 0) return e;
      const s = e.slice(0, e.length - n.length);
      for (let r = 0; r < n.length; ++r) {
        const o = e[e.length - n.length + r], i = n[r];
        if (o == null || i == null || o < 0 || i < 0) s.push(null);
        else if (o === 1) s.push(i);
        else if (i === 1) s.push(o);
        else {
          if (o !== i) throw new z("Operands could not be broadcast together with shapes " + JSON.stringify(e) + " " + JSON.stringify(n));
          s.push(o);
        }
      }
      return s;
    }
    build(e) {
      if (Array.isArray(e) && !Array.isArray(e[0]) && (e = [
        Ze(e)
      ]), e = e, e.length < 2) throw new z(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);
      let n = [];
      for (const o of e) o != null && o[0] !== null && n.push(o[0]);
      if (n = to(n), n.length > 1) throw new z(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);
      let s = e[0] == null ? null : e[0].slice(1);
      for (let o = 1; o < e.length; ++o) {
        const i = e[o] == null ? null : e[o].slice(1);
        s = this.computeElementwiseOpOutputShape(s, i);
      }
      const r = e.map((o) => o.length);
      e.indexOf(null) === -1 && to(r).length === 1 ? this.reshapeRequired = false : this.reshapeRequired = true;
    }
    call(e, n) {
      return q(() => {
        if (e = e, this.reshapeRequired) {
          const s = [], r = e.map((o) => o.rank);
          if (r.indexOf(null) === -1) {
            const o = uo(r);
            for (let i of e) {
              const a = i.rank;
              for (let l = 0; l < o - a; ++l) i = ch(i, 1);
              s.push(i);
            }
            return this.mergeFunction(s);
          } else {
            let o = false;
            for (const l of e) {
              const c = l.rank;
              if (c == null) {
                const u = l.shape, h = u[0], d = u.slice(1).concat([
                  h
                ]);
                let p = P(l, [
                  h
                ].concat(no(u.slice(1))));
                p = He(p, [
                  1,
                  0
                ]), p = P(p, d), s.push(p), o = true;
              } else if (c > 1) {
                const u = Ds(1, c).concat([
                  0
                ]);
                s.push(He(l, u)), o = true;
              } else s.push(l);
            }
            let i = this.mergeFunction(s);
            const a = i.rank;
            if (o) {
              if (a == null) {
                const l = i.shape, c = l.length, u = l[c - 1], h = [
                  u
                ].concat(l.slice(0, l.length - 1));
                i = P(He(P(i, [
                  -1,
                  u
                ]), [
                  1,
                  0
                ]), h);
              } else if (a > 1) {
                const l = [
                  a - 1
                ].concat(Ds(0, a - 1));
                i = He(i, l);
              }
            }
            return i;
          }
        } else return this.mergeFunction(e);
      });
    }
    computeOutputShape(e) {
      e = e;
      let n;
      e[0] == null ? n = null : n = e[0].slice(1);
      for (let r = 1; r < e.length; ++r) {
        const o = e[r] == null ? null : e[r].slice(1);
        n = this.computeElementwiseOpOutputShape(n, o);
      }
      let s = [];
      for (const r of e) r != null && r[0] !== null && s.push(r[0]);
      return s = to(s), s.length === 1 ? n = s.concat(n) : n = [
        null
      ].concat(n), n;
    }
    computeMask(e, n) {
      return q(() => {
        if (n == null) return null;
        if (!Array.isArray(n)) throw new z("`mask` should be an Array");
        if (!Array.isArray(e)) throw new z("`inputs` should be an Array");
        if (n.length !== e.length) throw new z(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${n.length})`);
        if (n.every((r) => r == null)) return null;
        n = n.map((r) => r == null ? r : Yt(r, 0));
        let s = n[0];
        for (let r = 1; r < n.length - 1; ++r) s = ys(s, n[r]);
        return s;
      });
    }
  }
  class Kw extends Ni {
    constructor(e) {
      super(e);
    }
    mergeFunction(e) {
      return q(() => {
        let n = e[0].clone();
        for (let s = 1; s < e.length; ++s) n = ae(n, e[s]);
        return n;
      });
    }
  }
  Kw.className = "Add";
  le(Kw);
  class Xw extends Ni {
    constructor(e) {
      super(e);
    }
    mergeFunction(e) {
      return q(() => {
        let n = e[0].clone();
        for (let s = 1; s < e.length; ++s) n = L(n, e[s]);
        return n;
      });
    }
  }
  Xw.className = "Multiply";
  le(Xw);
  class Yw extends Ni {
    constructor(e) {
      super(e);
    }
    mergeFunction(e) {
      return q(() => {
        let n = e[0].clone();
        for (let s = 1; s < e.length; ++s) n = ae(n, e[s]);
        return L(1 / e.length, n);
      });
    }
  }
  Yw.className = "Average";
  le(Yw);
  class Zw extends Ni {
    constructor(e) {
      super(e);
    }
    mergeFunction(e) {
      return q(() => {
        let n = e[0];
        for (let s = 1; s < e.length; ++s) n = ur(n, e[s]);
        return n;
      });
    }
  }
  Zw.className = "Maximum";
  le(Zw);
  class Jw extends Ni {
    constructor(e) {
      super(e);
    }
    mergeFunction(e) {
      return q(() => {
        let n = e[0];
        for (let s = 1; s < e.length; ++s) n = co(n, e[s]);
        return n;
      });
    }
  }
  Jw.className = "Minimum";
  le(Jw);
  class Qw extends Ni {
    constructor(e) {
      super(e), this.DEFAULT_AXIS = -1, e == null && (e = {}), this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis, this.supportsMasking = true, this.reshapeRequired = false;
    }
    build(e) {
      if (!(Array.isArray(e) && Array.isArray(e[0])) || e.length === 1) throw new z("A `Concatenate` layer should be called on a list of at least 2 inputs");
      e = e;
      let n = true;
      for (const r of e) if (r != null) {
        n = false;
        break;
      }
      if (n) return;
      const s = [];
      for (let r = 0; r < e.length; ++r) {
        const o = e[r].slice();
        o.splice(this.axis, 1);
        let i = false;
        for (const a of s) if (Ue(a, o)) {
          i = true;
          break;
        }
        i || s.push(o);
      }
      if (s.length > 1) throw new z("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e));
    }
    mergeFunction(e) {
      return q(() => nw(e, this.axis));
    }
    computeOutputShape(e) {
      if (!(Array.isArray(e) && Array.isArray(e[0]))) throw new z("A `Concatenate` layer should be called on a list of inputs.");
      const n = e, s = n[0].slice(), r = this.axis < 0 ? s.length + this.axis : this.axis;
      for (const o of n.slice(1)) {
        if (s[r] == null || o[r] == null) {
          s[r] = null;
          break;
        }
        s[r] += o[r];
      }
      return s;
    }
    computeMask(e, n) {
      if (n == null) return null;
      if (!Array.isArray(n)) throw new z("`mask` should be an array for Concatenate");
      if (!Array.isArray(e)) throw new z("`inputs` should be an array for Concatenate");
      if (n.length !== e.length) throw new z(`Mismatch in the length of mask (${n.length}) and the legnth of inputs (${e.length})`);
      return q(() => {
        let s = true;
        if (n.forEach((i) => {
          if (i != null) {
            s = false;
            return;
          }
        }), s) return null;
        const r = [];
        for (let i = 0; i < e.length; ++i) n[i] == null ? r.push(ge(jn(e[i]), "bool")) : n[i].rank < e[i].rank ? r.push(Yt(n[i], -1)) : r.push(n[i]);
        const o = vt(r, this.axis);
        return Ef(o, -1, false);
      });
    }
    getConfig() {
      const e = {
        axis: this.axis
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  Qw.className = "Concatenate";
  le(Qw);
  function Ol(t, e) {
    for (; t < 0; ) t += e;
    return t;
  }
  function sH(t, e, n) {
    if (t.shape.length > 3 || e.shape.length > 3) throw new ze("batchDot is not implemented for tensors of 4D or higher rank yet");
    if (C(t.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${t.shape.length}`), C(t.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`), typeof n == "number" && (n = [
      n,
      n
    ]), t.dtype === "complex64" || e.dtype === "complex64") throw new ze("batchDot is not implemented for complex64-type Tensors yet.");
    const s = t.shape.length, r = e.shape.length;
    n == null && (n = [
      s - 1,
      r - 2
    ]);
    const o = n;
    return q(() => {
      let i;
      if (s > r) {
        i = s - r;
        const l = [];
        for (let c = 0; c < i; ++c) l.push(1);
        e = P(e, e.shape.concat(l));
      } else if (r > s) {
        i = r - s;
        const l = [];
        for (let c = 0; c < i; ++c) l.push(1);
        t = P(t, t.shape.concat(l));
      } else i = 0;
      let a;
      if (t.shape.length === 2 && e.shape.length === 2) o[0] === o[1] ? a = $e(L(t, e), o[0]) : a = $e(L(He(t, [
        1,
        0
      ]), e), o[1]);
      else {
        const l = o[0] !== t.shape.length - 1, c = o[1] === e.shape.length - 1;
        a = Be(t, e, l, c);
      }
      if (i > 0) {
        let l;
        s > r ? l = s + r - 3 : l = s - 1;
        const c = [];
        for (let u = l; u < l + i; ++u) c.push(u);
        a = Io(a, c);
      }
      return a.shape.length === 1 && (a = Yt(a, 1)), a;
    });
  }
  class e0 extends Ni {
    constructor(e) {
      super(e), this.axes = e.axes, this.normalize = e.normalize == null ? false : e.normalize, this.supportsMasking = true, this.reshapeRequired = false;
    }
    build(e) {
      C(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
      const n = e[0], s = e[1];
      if (n.length > 3 || s.length > 3) throw new ze("Dot layer does not support tensors of 4D or higher rank yet.");
      const r = this.interpretAxes(n, s);
      if (n[r[0]] !== s[r[1]]) throw new z(`Dimension incompatibility: ${n[r[0]]} !== ${s[r[1]]}`);
    }
    mergeFunction(e) {
      if (e.length !== 2) throw new z(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);
      let n = e[0], s = e[1], r;
      return Array.isArray(this.axes) ? r = this.axes.map((o, i) => Ol(o, e[i].shape.length)) : r = [
        Ol(this.axes, n.shape.length),
        Ol(this.axes, s.shape.length)
      ], this.normalize && (n = Ld(n, r[0]), s = Ld(s, r[1])), sH(n, s, r);
    }
    interpretAxes(e, n) {
      let s;
      return Array.isArray(this.axes) ? s = this.axes : s = [
        Ol(this.axes, e.length),
        Ol(this.axes, n.length)
      ], s;
    }
    computeOutputShape(e) {
      C(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
      const n = e[0].slice(), s = e[1].slice();
      if (n.length > 3 || s.length > 3) throw new ze("Dot layer does not support tensors of 4D or higher rank yet.");
      const r = this.interpretAxes(n, s);
      n.splice(r[0], 1), s.splice(r[1], 1), s.splice(0, 1);
      const o = n.concat(s);
      return o.length === 1 && o.push(1), o;
    }
    computeMask(e, n) {
      return null;
    }
    getConfig() {
      const e = {
        axes: this.axes,
        normalize: this.normalize
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  e0.className = "Dot";
  le(e0);
  class t0 extends We {
    constructor(e) {
      super(e), this.supportsMasking = true, this.stddev = e.stddev;
    }
    computeOutputShape(e) {
      return e;
    }
    getConfig() {
      const e = super.getConfig(), n = {
        stddev: this.stddev
      };
      return Object.assign(n, e), n;
    }
    call(e, n) {
      return q(() => {
        this.invokeCallHook(e, n);
        const s = _e(e);
        return hh(() => ae(gm(s.shape, 0, this.stddev), s), () => s, n.training || false);
      });
    }
  }
  t0.className = "GaussianNoise";
  le(t0);
  class n0 extends We {
    constructor(e) {
      super(e), this.supportsMasking = true, this.rate = e.rate;
    }
    computeOutputShape(e) {
      return e;
    }
    getConfig() {
      const e = super.getConfig(), n = {
        rate: this.rate
      };
      return Object.assign(n, e), n;
    }
    call(e, n) {
      return q(() => {
        this.invokeCallHook(e, n);
        const s = _e(e);
        return this.rate > 0 && this.rate < 1 ? hh(() => {
          const o = Math.sqrt(this.rate / (1 - this.rate));
          return L(s, gm(s.shape, 1, o));
        }, () => s, n.training || false) : s;
      });
    }
  }
  n0.className = "GaussianDropout";
  le(n0);
  class s0 extends We {
    constructor(e) {
      super(e), this.supportsMasking = true, this.rate = e.rate, this.noiseShape = e.noiseShape;
    }
    _getNoiseShape(e) {
      return this.noiseShape || _e(e).shape;
    }
    computeOutputShape(e) {
      return e;
    }
    getConfig() {
      const e = super.getConfig(), n = {
        rate: this.rate
      };
      return Object.assign(n, e), n;
    }
    call(e, n) {
      return q(() => {
        if (this.rate < 1 && this.rate > 0) {
          const s = this._getNoiseShape(e);
          return hh(() => {
            const o = _e(e), a = -1.6732632423543772 * 1.0507009873554805;
            let l = Fr(Co(s), this.rate);
            l = nr(l, "float32");
            const c = ((1 - this.rate) * (1 + this.rate * a ** 2)) ** -0.5, u = -c * a * this.rate, h = ae(L(o, l), L(ae(l, -1), a));
            return ae(L(h, c), u);
          }, () => _e(e), n.training || false);
        }
        return e;
      });
    }
  }
  s0.className = "AlphaDropout";
  le(s0);
  function Nc(t, e, n, s, r, o = 1e-3) {
    let i;
    if (t.rank === 2) i = Ib(t, e, n, s, r, o);
    else if (t.rank === 3) i = Nb(t, e, n, s, r, o);
    else if (t.rank === 4) i = kb(t, e, n, s, r, o);
    else throw new ze(`batchNormalization is not implemented for array of rank ${t.rank} yet`);
    return i;
  }
  function rH(t, e, n, s, r = 1e-3) {
    return q(() => {
      const o = Zu(t, s), i = o.mean, a = o.variance;
      return [
        Nc(t, i, a, n, e, r),
        i,
        a
      ];
    });
  }
  function oH(t, e, n, s, r = 1e-3) {
    return q(() => {
      const o = Zu(t, s), i = o.mean, a = o.variance, l = [];
      for (const f of Ds(0, t.rank)) s.indexOf(f) !== -1 ? l.push(1) : l.push(t.shape[f]);
      const c = P(i, l), u = P(a, l), h = e == null ? null : P(e, l), d = n == null ? null : P(n, l);
      return [
        Nc(t, c, u, d, h, r),
        i,
        a
      ];
    });
  }
  function iH(t, e, n, s, r = 1e-3) {
    return Ue(s.slice().sort(), Ds(0, t.rank - 1)) ? rH(t, e, n, s, r) : oH(t, e, n, s, r);
  }
  class r0 extends We {
    constructor(e) {
      e == null && (e = {}), super(e), this.supportsMasking = true, this.axis = e.axis == null ? -1 : e.axis, this.momentum = e.momentum == null ? 0.99 : e.momentum, this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? true : e.center, this.scale = e.scale == null ? true : e.scale, this.betaInitializer = dt(e.betaInitializer || "zeros"), this.gammaInitializer = dt(e.gammaInitializer || "ones"), this.movingMeanInitializer = dt(e.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = dt(e.movingVarianceInitializer || "ones"), this.betaConstraint = Lt(e.betaConstraint), this.gammaConstraint = Lt(e.gammaConstraint), this.betaRegularizer = pt(e.betaRegularizer), this.gammaRegularizer = pt(e.gammaRegularizer);
    }
    build(e) {
      e = Ze(e);
      const n = this.axis >= 0 ? this.axis : this.axis + e.length, s = e[n];
      if (s == null) throw new z(`Axis ${n} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);
      this.inputSpec = [
        new Et({
          ndim: e.length,
          axes: {
            [n]: s
          }
        })
      ];
      const r = [
        s
      ];
      this.scale && (this.gamma = this.addWeight("gamma", r, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", r, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", r, null, this.movingMeanInitializer, null, false), this.movingVariance = this.addWeight("moving_variance", r, null, this.movingVarianceInitializer, null, false), this.built = true;
    }
    call(e, n) {
      return q(() => {
        const s = n.training == null ? false : n.training, r = _e(e), o = r.shape, i = o.length, a = Ds(0, i), l = this.axis >= 0 ? this.axis : this.axis + i;
        a.splice(l, 1);
        const c = li(1, i);
        c[l] = o[l];
        const u = a.slice();
        u.sort();
        const h = !Ue(u, Ds(0, i).slice(0, i - 1)), d = () => {
          if (h) {
            const b = P(this.movingMean.read(), c), w = P(this.movingVariance.read(), c), x = this.center ? P(this.beta.read(), c) : null, S = this.scale ? P(this.gamma.read(), c) : null;
            return Nc(r, b, w, x, S, this.epsilon);
          } else return Nc(r, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
        };
        if (!s) return d();
        const [p, f, m] = iH(r, this.gamma.read(), this.beta.read(), a, this.epsilon), g = (b, w, x) => {
          q(() => {
            const S = 1 - x, I = b.read(), E = L(ve(I, w), S);
            b.write(ve(I, E));
          });
        };
        return (() => {
          g(this.movingMean, f, this.momentum), g(this.movingVariance, m, this.momentum);
        })(), p;
      });
    }
    getConfig() {
      const e = {
        axis: this.axis,
        momentum: this.momentum,
        epsilon: this.epsilon,
        center: this.center,
        scale: this.scale,
        betaInitializer: gt(this.betaInitializer),
        gammaInitializer: gt(this.gammaInitializer),
        movingMeanInitializer: gt(this.movingMeanInitializer),
        movingVarianceInitializer: gt(this.movingVarianceInitializer),
        betaRegularizer: ot(this.betaRegularizer),
        gammaRegularizer: ot(this.gammaRegularizer),
        betaConstraint: Ft(this.betaConstraint),
        gammaConstraint: Ft(this.gammaConstraint)
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  r0.className = "BatchNormalization";
  le(r0);
  class o0 extends We {
    constructor(e) {
      if (e == null && (e = {}), super(e), this.axis = e.axis == null ? -1 : e.axis, typeof this.axis == "number") {
        if (!Number.isInteger(this.axis)) throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
      } else if (Array.isArray(this.axis)) {
        for (const n of this.axis) if (!Number.isInteger(n)) throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
      } else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
      this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? true : e.center, this.scale = e.scale == null ? true : e.scale, this.betaInitializer = dt(e.betaInitializer || "zeros"), this.gammaInitializer = dt(e.gammaInitializer || "ones"), this.betaRegularizer = pt(e.betaRegularizer), this.gammaRegularizer = pt(e.gammaRegularizer), this.supportsMasking = true;
    }
    build(e) {
      e = Ze(e);
      const n = e.length;
      typeof this.axis == "number" && (this.axis = [
        this.axis
      ]);
      for (let o = 0; o < this.axis.length; ++o) this.axis[o] < 0 && (this.axis[o] += n);
      for (const o of this.axis) if (o < 0 || o >= n) throw new Error(`Invalid axis: ${o}`);
      if (this.axis.length !== to(this.axis).length) throw new Error(`Found duplicate axes in: ${this.axis}`);
      const s = this.axis.map((o) => e[o]), r = true;
      this.scale ? this.gamma = this.addWeight("gamma", s, "float32", this.gammaInitializer, this.gammaRegularizer, r) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", s, "float32", this.betaInitializer, this.betaRegularizer, r) : this.beta = null, this.built = true;
    }
    call(e, n) {
      const s = _e(e), r = s.shape, o = r.length;
      return q(() => {
        let { mean: a, variance: l } = Zu(s, this.axis, true);
        const c = li(1, o);
        for (const m of this.axis) c[m] = r[m];
        const u = (m) => m != null && m.shape.length !== o ? P(m, c) : m;
        let h = this.scale ? u(this.gamma.read()) : null, d = this.center ? u(this.beta.read()) : null;
        const p = [], f = [];
        for (let m = 0; m < o; ++m) this.axis.indexOf(m) !== -1 ? (p.push(r[m]), f.push(1)) : (p.push(1), f.push(r[m]));
        return a = Qn(a, p), l = Qn(l, p), h != null && (h = Qn(h, f)), d != null && (d = Qn(d, f)), Nc(s, a, l, d, h, this.epsilon);
      });
    }
    getConfig() {
      const e = {
        axis: this.axis,
        epsilon: this.epsilon,
        center: this.center,
        scale: this.scale,
        betaInitializer: gt(this.betaInitializer),
        gammaInitializer: gt(this.gammaInitializer),
        betaRegularizer: ot(this.betaRegularizer),
        gammaRegularizer: ot(this.gammaRegularizer)
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  o0.className = "LayerNormalization";
  le(o0);
  function aH(t, e, n) {
    return q(() => {
      if (t.rank !== 4) throw new z(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);
      if (e == null && (e = [
        [
          1,
          1
        ],
        [
          1,
          1
        ]
      ]), e.length !== 2 || e[0].length !== 2 || e[1].length !== 2) throw new z("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
      if (n == null && (n = Os()), n !== "channelsLast" && n !== "channelsFirst") throw new z(`Unknown data format: ${n}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
      let s;
      return n === "channelsFirst" ? s = [
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        e[0],
        e[1]
      ] : s = [
        [
          0,
          0
        ],
        e[0],
        e[1],
        [
          0,
          0
        ]
      ], Lr(t, s);
    });
  }
  class i0 extends We {
    constructor(e) {
      if (e == null && (e = {}), super(e), this.dataFormat = e.dataFormat == null ? Os() : e.dataFormat, e.padding == null) this.padding = [
        [
          1,
          1
        ],
        [
          1,
          1
        ]
      ];
      else if (typeof e.padding == "number") this.padding = [
        [
          e.padding,
          e.padding
        ],
        [
          e.padding,
          e.padding
        ]
      ];
      else {
        if (e.padding = e.padding, e.padding.length !== 2) throw new z(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);
        let n, s;
        if (typeof e.padding[0] == "number") n = [
          e.padding[0],
          e.padding[0]
        ], s = [
          e.padding[1],
          e.padding[1]
        ];
        else {
          if (e.padding = e.padding, e.padding[0].length !== 2) throw new z(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);
          if (n = e.padding[0], e.padding[1].length !== 2) throw new z(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);
          s = e.padding[1];
        }
        this.padding = [
          n,
          s
        ];
      }
      this.inputSpec = [
        new Et({
          ndim: 4
        })
      ];
    }
    computeOutputShape(e) {
      e = Ze(e);
      let n, s;
      return this.dataFormat === "channelsFirst" ? (e[2] != null && e[2] >= 0 ? n = e[2] + this.padding[0][0] + this.padding[0][1] : n = null, e[3] != null && e[3] >= 0 ? s = e[3] + this.padding[1][0] + this.padding[1][1] : s = null, [
        e[0],
        e[1],
        n,
        s
      ]) : (e[1] != null && e[1] >= 0 ? n = e[1] + this.padding[0][0] + this.padding[0][1] : n = null, e[2] != null && e[2] >= 0 ? s = e[2] + this.padding[1][0] + this.padding[1][1] : s = null, [
        e[0],
        n,
        s,
        e[3]
      ]);
    }
    call(e, n) {
      return q(() => aH(_e(e), this.padding, this.dataFormat));
    }
    getConfig() {
      const e = {
        padding: this.padding,
        dataFormat: this.dataFormat
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  i0.className = "ZeroPadding2D";
  le(i0);
  function Om(t, e, n, s, r, o) {
    return q(() => {
      It(r), mk(o), is(s), n == null && (n = [
        1,
        1
      ]), s == null && (s = "valid"), r == null && (r = Os()), o == null && (o = "max"), t = Tw(t, r);
      let i;
      const a = s === "same" ? "same" : "valid";
      return o === "max" ? i = Yu(t, e, n, a) : i = Wu(t, e, n, a), r === "channelsFirst" && (i = He(i, [
        0,
        3,
        1,
        2
      ])), i;
    });
  }
  function cT(t, e, n, s, r, o) {
    return q(() => {
      It(r), mk(o), is(s), n == null && (n = [
        1,
        1,
        1
      ]), s == null && (s = "valid"), r == null && (r = Os()), o == null && (o = "max"), t = rT(t, r);
      let i;
      const a = s === "same" ? "same" : "valid";
      return o === "max" ? i = Yb(t, e, n, a) : i = Cb(t, e, n, a), r === "channelsFirst" && (i = He(i, [
        0,
        4,
        1,
        2,
        3
      ])), i;
    });
  }
  class uT extends We {
    constructor(e) {
      if (e.poolSize == null && (e.poolSize = 2), super(e), typeof e.poolSize == "number") this.poolSize = [
        e.poolSize
      ];
      else if (Array.isArray(e.poolSize) && e.poolSize.length === 1 && typeof e.poolSize[0] == "number") this.poolSize = e.poolSize;
      else throw new z(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);
      if (Vt(this.poolSize, "poolSize"), e.strides == null) this.strides = this.poolSize;
      else if (typeof e.strides == "number") this.strides = [
        e.strides
      ];
      else if (Array.isArray(e.strides) && e.strides.length === 1 && typeof e.strides[0] == "number") this.strides = e.strides;
      else throw new z(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);
      Vt(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, is(this.padding), this.inputSpec = [
        new Et({
          ndim: 3
        })
      ];
    }
    computeOutputShape(e) {
      e = Ze(e);
      const n = Rs(e[1], this.poolSize[0], this.padding, this.strides[0]);
      return [
        e[0],
        n,
        e[2]
      ];
    }
    call(e, n) {
      return q(() => {
        this.invokeCallHook(e, n), e = ch(_e(e), 2);
        const s = this.poolingFunction(_e(e), [
          this.poolSize[0],
          1
        ], [
          this.strides[0],
          1
        ], this.padding, "channelsLast");
        return Io(s, [
          2
        ]);
      });
    }
    getConfig() {
      const e = {
        poolSize: this.poolSize,
        padding: this.padding,
        strides: this.strides
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  class a0 extends uT {
    constructor(e) {
      super(e);
    }
    poolingFunction(e, n, s, r, o) {
      return It(o), is(r), Om(e, n, s, r, o, "max");
    }
  }
  a0.className = "MaxPooling1D";
  le(a0);
  class l0 extends uT {
    constructor(e) {
      super(e);
    }
    poolingFunction(e, n, s, r, o) {
      return It(o), is(r), Om(e, n, s, r, o, "avg");
    }
  }
  l0.className = "AveragePooling1D";
  le(l0);
  class hT extends We {
    constructor(e) {
      if (e.poolSize == null && (e.poolSize = [
        2,
        2
      ]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [
        e.poolSize,
        e.poolSize
      ], e.strides == null) this.strides = this.poolSize;
      else if (Array.isArray(e.strides)) {
        if (e.strides.length !== 2) throw new z(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);
        this.strides = e.strides;
      } else this.strides = [
        e.strides,
        e.strides
      ];
      Vt(this.poolSize, "poolSize"), Vt(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, It(this.dataFormat), is(this.padding), this.inputSpec = [
        new Et({
          ndim: 4
        })
      ];
    }
    computeOutputShape(e) {
      e = Ze(e);
      let n = this.dataFormat === "channelsFirst" ? e[2] : e[1], s = this.dataFormat === "channelsFirst" ? e[3] : e[2];
      return n = Rs(n, this.poolSize[0], this.padding, this.strides[0]), s = Rs(s, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [
        e[0],
        e[1],
        n,
        s
      ] : [
        e[0],
        n,
        s,
        e[3]
      ];
    }
    call(e, n) {
      return q(() => (this.invokeCallHook(e, n), this.poolingFunction(_e(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
    }
    getConfig() {
      const e = {
        poolSize: this.poolSize,
        padding: this.padding,
        strides: this.strides,
        dataFormat: this.dataFormat
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  class c0 extends hT {
    constructor(e) {
      super(e);
    }
    poolingFunction(e, n, s, r, o) {
      return It(o), is(r), Om(e, n, s, r, o, "max");
    }
  }
  c0.className = "MaxPooling2D";
  le(c0);
  class u0 extends hT {
    constructor(e) {
      super(e);
    }
    poolingFunction(e, n, s, r, o) {
      return It(o), is(r), Om(e, n, s, r, o, "avg");
    }
  }
  u0.className = "AveragePooling2D";
  le(u0);
  class dT extends We {
    constructor(e) {
      if (e.poolSize == null && (e.poolSize = [
        2,
        2,
        2
      ]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [
        e.poolSize,
        e.poolSize,
        e.poolSize
      ], e.strides == null) this.strides = this.poolSize;
      else if (Array.isArray(e.strides)) {
        if (e.strides.length !== 3) throw new z(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);
        this.strides = e.strides;
      } else this.strides = [
        e.strides,
        e.strides,
        e.strides
      ];
      Vt(this.poolSize, "poolSize"), Vt(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, It(this.dataFormat), is(this.padding), this.inputSpec = [
        new Et({
          ndim: 5
        })
      ];
    }
    computeOutputShape(e) {
      e = Ze(e);
      let n = this.dataFormat === "channelsFirst" ? e[2] : e[1], s = this.dataFormat === "channelsFirst" ? e[3] : e[2], r = this.dataFormat === "channelsFirst" ? e[4] : e[3];
      return n = Rs(n, this.poolSize[0], this.padding, this.strides[0]), s = Rs(s, this.poolSize[1], this.padding, this.strides[1]), r = Rs(r, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [
        e[0],
        e[1],
        n,
        s,
        r
      ] : [
        e[0],
        n,
        s,
        r,
        e[4]
      ];
    }
    call(e, n) {
      return q(() => (this.invokeCallHook(e, n), this.poolingFunction(_e(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
    }
    getConfig() {
      const e = {
        poolSize: this.poolSize,
        padding: this.padding,
        strides: this.strides,
        dataFormat: this.dataFormat
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  class h0 extends dT {
    constructor(e) {
      super(e);
    }
    poolingFunction(e, n, s, r, o) {
      return It(o), is(r), cT(e, n, s, r, o, "max");
    }
  }
  h0.className = "MaxPooling3D";
  le(h0);
  class d0 extends dT {
    constructor(e) {
      super(e);
    }
    poolingFunction(e, n, s, r, o) {
      return It(o), is(r), cT(e, n, s, r, o, "avg");
    }
  }
  d0.className = "AveragePooling3D";
  le(d0);
  class pT extends We {
    constructor(e) {
      super(e), this.inputSpec = [
        new Et({
          ndim: 3
        })
      ];
    }
    computeOutputShape(e) {
      return [
        e[0],
        e[2]
      ];
    }
    call(e, n) {
      throw new ze();
    }
  }
  class p0 extends pT {
    constructor(e) {
      super(e || {});
    }
    call(e, n) {
      return q(() => {
        const s = _e(e);
        return mt(s, 1);
      });
    }
  }
  p0.className = "GlobalAveragePooling1D";
  le(p0);
  class f0 extends pT {
    constructor(e) {
      super(e || {});
    }
    call(e, n) {
      return q(() => {
        const s = _e(e);
        return ss(s, 1);
      });
    }
  }
  f0.className = "GlobalMaxPooling1D";
  le(f0);
  class fT extends We {
    constructor(e) {
      super(e), this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, It(this.dataFormat), this.inputSpec = [
        new Et({
          ndim: 4
        })
      ];
    }
    computeOutputShape(e) {
      return e = e, this.dataFormat === "channelsLast" ? [
        e[0],
        e[3]
      ] : [
        e[0],
        e[1]
      ];
    }
    call(e, n) {
      throw new ze();
    }
    getConfig() {
      const e = {
        dataFormat: this.dataFormat
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  class m0 extends fT {
    call(e, n) {
      return q(() => {
        const s = _e(e);
        return this.dataFormat === "channelsLast" ? mt(s, [
          1,
          2
        ]) : mt(s, [
          2,
          3
        ]);
      });
    }
  }
  m0.className = "GlobalAveragePooling2D";
  le(m0);
  class g0 extends fT {
    call(e, n) {
      return q(() => {
        const s = _e(e);
        return this.dataFormat === "channelsLast" ? ss(s, [
          1,
          2
        ]) : ss(s, [
          2,
          3
        ]);
      });
    }
  }
  g0.className = "GlobalMaxPooling2D";
  le(g0);
  class mT extends We {
    constructor(e) {
      super(e), this.layer = e.layer;
    }
    build(e) {
      this.built = true;
    }
    get trainable() {
      return this.layer != null ? this.layer.trainable : false;
    }
    set trainable(e) {
      this.layer != null && (this.layer.trainable = e);
    }
    get trainableWeights() {
      return this.layer.trainableWeights;
    }
    get nonTrainableWeights() {
      return this.layer.nonTrainableWeights;
    }
    get updates() {
      return this.layer._updates;
    }
    get losses() {
      return this.layer.losses;
    }
    getWeights() {
      return this.layer.getWeights();
    }
    setWeights(e) {
      this.layer.setWeights(e);
    }
    getConfig() {
      const e = {
        layer: {
          className: this.layer.getClassName(),
          config: this.layer.getConfig()
        }
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
    setFastWeightInitDuringBuild(e) {
      super.setFastWeightInitDuringBuild(e), this.layer != null && this.layer.setFastWeightInitDuringBuild(e);
    }
    static fromConfig(e, n, s = {}) {
      const r = n.layer, o = Es(r, s);
      delete n.layer;
      const i = {
        layer: o
      };
      return Object.assign(i, n), new e(i);
    }
  }
  class y0 extends mT {
    constructor(e) {
      super(e), this.supportsMasking = true;
    }
    build(e) {
      if (e = Ze(e), e.length < 3) throw new z(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);
      this.inputSpec = [
        {
          shape: e
        }
      ];
      const n = [
        e[0]
      ].concat(e.slice(2));
      this.layer.built || (this.layer.build(n), this.layer.built = true), super.build(e);
    }
    computeOutputShape(e) {
      e = Ze(e);
      const n = [
        e[0]
      ].concat(e.slice(2)), s = this.layer.computeOutputShape(n), r = e[1];
      return [
        s[0],
        r
      ].concat(s.slice(1));
    }
    call(e, n) {
      return q(() => (e = _e(e), aT((i, a) => [
        _e(this.layer.call(i, n)),
        []
      ], e, [], false, null, null, false, true)[1]));
    }
  }
  y0.className = "TimeDistributed";
  le(y0);
  function lH(t) {
    Ci(aU, "BidirectionalMergeMode", t);
  }
  const cH = "concat";
  class b0 extends mT {
    constructor(e) {
      super(e);
      const n = e.layer.getConfig(), s = {};
      s.className = e.layer.getClassName(), s.config = n, this.forwardLayer = Es(s), n.goBackwards = n.goBackwards !== true;
      const r = {};
      if (r.className = e.layer.getClassName(), r.config = n, this.backwardLayer = Es(r), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = e.mergeMode === void 0 ? cH : e.mergeMode, lH(this.mergeMode), e.weights) throw new ze("weights support is not implemented for Bidirectional layer yet.");
      this._stateful = e.layer.stateful, this.returnSequences = e.layer.returnSequences, this.returnState = e.layer.returnState, this.supportsMasking = true, this._trainable = true, this.inputSpec = e.layer.inputSpec, this.numConstants = null;
    }
    get trainable() {
      return this._trainable;
    }
    set trainable(e) {
      this._trainable = e, this.forwardLayer != null && (this.forwardLayer.trainable = e), this.backwardLayer != null && (this.backwardLayer.trainable = e);
    }
    getWeights() {
      return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
    }
    setWeights(e) {
      const n = e.length, s = Math.floor(n / 2);
      this.forwardLayer.setWeights(e.slice(0, s)), this.backwardLayer.setWeights(e.slice(s));
    }
    computeOutputShape(e) {
      let n = this.forwardLayer.computeOutputShape(e);
      Array.isArray(n) && Array.isArray(n[0]) || (n = [
        n
      ]), n = n;
      let s, r, o;
      return this.returnState && (o = n.slice(1)), s = n[0], s = s, this.mergeMode === "concat" ? (s[s.length - 1] *= 2, r = [
        s
      ]) : this.mergeMode == null ? r = [
        s,
        s.slice()
      ] : r = [
        s
      ], this.returnState ? this.mergeMode == null ? r.concat(o).concat(o.slice()) : [
        s
      ].concat(o).concat(o.slice()) : kn(r);
    }
    apply(e, n) {
      let s = n == null ? null : n.initialState, r = n == null ? null : n.constants;
      n == null && (n = {});
      const o = iT(e, s, r, this.numConstants);
      if (e = o.inputs, s = o.initialState, r = o.constants, Array.isArray(e) && (s = e.slice(1), e = e[0]), (s == null || s.length === 0) && r == null) return super.apply(e, n);
      const i = [], a = [];
      if (s != null) {
        const c = s.length;
        if (c % 2 > 0) throw new z("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
        n.initialState = s, i.push(...s);
        const u = s.map((h) => new Et({
          shape: h.shape
        }));
        this.forwardLayer.stateSpec = u.slice(0, c / 2), this.backwardLayer.stateSpec = u.slice(c / 2), a.push(...u);
      }
      if (r != null) throw new ze("Support for constants in Bidirectional layers is not implemented yet.");
      const l = i[0] instanceof Fs;
      for (const c of i) if (c instanceof Fs !== l) throw new z("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
      if (l) {
        const c = [
          e
        ].concat(i), u = this.inputSpec.concat(a), h = this.inputSpec;
        this.inputSpec = u;
        const d = super.apply(c, n);
        return this.inputSpec = h, d;
      } else return super.apply(e, n);
    }
    call(e, n) {
      return q(() => {
        const s = n.initialState;
        let r, o;
        if (s == null) r = this.forwardLayer.call(e, n), o = this.backwardLayer.call(e, n);
        else {
          const l = s.slice(0, s.length / 2), c = s.slice(s.length / 2);
          r = this.forwardLayer.call(e, Object.assign(n, {
            initialState: l
          })), o = this.backwardLayer.call(e, Object.assign(n, {
            initialState: c
          }));
        }
        let i;
        this.returnState && (Array.isArray(r) && (i = r.slice(1).concat(o.slice(1))), r = r[0], o = o[0]), this.returnSequences && (o = rs(o, 1));
        let a;
        return this.mergeMode === "concat" ? a = nw([
          r,
          o
        ]) : this.mergeMode === "sum" ? a = ae(r, o) : this.mergeMode === "ave" ? a = L(0.5, ae(r, o)) : this.mergeMode === "mul" ? a = L(r, o) : this.mergeMode == null && (a = [
          r,
          o
        ]), this.returnState ? this.mergeMode == null ? a.concat(i) : [
          a
        ].concat(i) : a;
      });
    }
    resetStates(e) {
      this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
    }
    build(e) {
      Xo(this.forwardLayer.name, () => {
        this.forwardLayer.build(e);
      }), Xo(this.backwardLayer.name, () => {
        this.backwardLayer.build(e);
      }), this.built = true;
    }
    computeMask(e, n) {
      Array.isArray(n) && (n = n[0]);
      let s;
      if (this.returnSequences ? this.mergeMode == null ? s = [
        n,
        n
      ] : s = n : this.mergeMode == null ? s = [
        null,
        null
      ] : s = null, this.returnState) {
        const o = this.forwardLayer.states.map((i) => null);
        return Array.isArray(s) ? s.concat(o).concat(o) : [
          s
        ].concat(o).concat(o);
      } else return s;
    }
    get trainableWeights() {
      return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
    }
    get nonTrainableWeights() {
      return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
    }
    setFastWeightInitDuringBuild(e) {
      super.setFastWeightInitDuringBuild(e), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(e), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(e);
    }
    getConfig() {
      const e = {
        mergeMode: this.mergeMode
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
    static fromConfig(e, n) {
      const s = Es(n.layer);
      if (delete n.layer, n.numConstants != null) throw new ze("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
      const r = n;
      return r.layer = s, new e(r);
    }
  }
  b0.className = "Bidirectional";
  le(b0);
  class x0 extends We {
    constructor(e) {
      super(e), this.scale = e.scale, e.offset ? this.offset = e.offset : this.offset = 0;
    }
    getConfig() {
      const e = {
        scale: this.scale,
        offset: this.offset
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
    call(e, n) {
      return q(() => (e = _e(e), e.dtype !== "float32" && (e = nr(e, "float32")), ae(L(e, this.scale), this.offset)));
    }
  }
  x0.className = "Rescaling";
  le(x0);
  const { resizeBilinear: uH, cropAndResize: hH } = ps;
  class w0 extends We {
    constructor(e) {
      super(e), this.height = e.height, this.width = e.width;
    }
    centerCrop(e, n, s, r, o, i, a, l) {
      return q(() => {
        let c, u = false;
        const h = n / i, d = s / a, p = (r + n) / i, f = (o + s) / a, m = [
          h,
          d,
          p,
          f
        ], g = [];
        e.rank === 3 ? (u = true, c = yn([
          e
        ])) : c = e;
        for (let S = 0; S < c.shape[0]; S++) g.push(m);
        const y = Un(g, [
          g.length,
          4
        ]), b = ii(0, g.length, 1, "int32"), x = hH(c, y, b, [
          r,
          o
        ], "nearest");
        return nr(u ? _e(os(x)) : x, l);
      });
    }
    upsize(e, n, s, r) {
      return q(() => {
        const o = uH(e, [
          n,
          s
        ]);
        return nr(o, r);
      });
    }
    call(e, n) {
      return q(() => {
        const s = _e(e), r = s.dtype, o = s.shape, i = o[o.length - 3], a = o[o.length - 2];
        let l = 0;
        i !== this.height && (l = Math.floor((i - this.height) / 2));
        let c = 0;
        return a !== this.width && (c = Math.floor((a - this.width) / 2), c === 0 && (c = 1)), l >= 0 && c >= 0 ? this.centerCrop(s, l, c, this.height, this.width, i, a, r) : this.upsize(e, this.height, this.width, r);
      });
    }
    getConfig() {
      const e = {
        height: this.height,
        width: this.width
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
    computeOutputShape(e) {
      e = Ze(e);
      const n = e.length - 3, s = e.length - 2;
      return e[n] = this.height, e[s] = this.width, e;
    }
  }
  w0.className = "CenterCrop";
  le(w0);
  function dH(t, e, n, s) {
    let r = _e(t);
    if (r.dtype !== "int32" && (r = nr(r, "int32")), e === "int") return r;
    const o = r.shape;
    if (r.rank === 0 && (r = Yt(r, -1)), e === "oneHot" && r.shape[r.shape.length - 1] !== 1 && (r = Yt(r, -1)), r.rank > 2) throw new z(`When outputMode is not int, maximum output rank is 2 Received outputMode ${e} and input shape ${o} which would result in output rank ${r.rank}.`);
    const i = [
      "multiHot",
      "oneHot"
    ].includes(e), a = r;
    let l;
    if (typeof s < "u" && e === "count" ? l = Rd(a, s, n, i) : l = Rd(a, [], n, i), e !== "tfIdf") return l;
    if (s) return L(l, s);
    throw new z("When outputMode is 'tfIdf', weights must be provided.");
  }
  class v0 extends We {
    constructor(e) {
      super(e), this.numTokens = e.numTokens, e.outputMode ? this.outputMode = e.outputMode : this.outputMode = "multiHot";
    }
    getConfig() {
      const e = {
        numTokens: this.numTokens,
        outputMode: this.outputMode
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
    computeOutputShape(e) {
      return e = Ze(e), e == null ? [
        this.numTokens
      ] : this.outputMode === "oneHot" && e[e.length - 1] !== 1 ? (e.push(this.numTokens), e) : (e[e.length - 1] = this.numTokens, e);
    }
    call(e, n) {
      return q(() => {
        e = _e(e), e.dtype !== "int32" && (e = nr(e, "int32"));
        let s;
        if (typeof n.countWeights < "u") {
          if (this.outputMode !== "count") throw new z(`countWeights is not used when outputMode !== count.
              Received countWeights=${n.countWeights}`);
          s = _e(n.countWeights);
        }
        const r = ss(e), o = Qi(e), i = wn(this.numTokens, r).bufferSync().get(0), a = Fr(o, 0).bufferSync().get(0);
        if (!(i && a)) throw new z(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);
        return dH(e, this.outputMode, this.numTokens, s);
      });
    }
  }
  v0.className = "CategoryEncoding";
  le(v0);
  const pH = [
    "bilinear",
    "nearest"
  ], sS = new Set(pH);
  class S0 extends We {
    constructor(e) {
      if (super(e), this.height = e.height, this.width = e.width, e.interpolation) if (sS.has(e.interpolation)) this.interpolation = e.interpolation;
      else throw new z(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);
      else this.interpolation = "bilinear";
      this.cropToAspectRatio = !!e.cropToAspectRatio;
    }
    computeOutputShape(e) {
      e = Ze(e);
      const n = e[2];
      return [
        this.height,
        this.width,
        n
      ];
    }
    getConfig() {
      const e = {
        height: this.height,
        width: this.width,
        interpolation: this.interpolation,
        cropToAspectRatio: this.cropToAspectRatio
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
    call(e, n) {
      return q(() => {
        const s = [
          this.height,
          this.width
        ];
        if (this.interpolation === "bilinear") return ps.resizeBilinear(e, s, !this.cropToAspectRatio);
        if (this.interpolation === "nearest") return ps.resizeNearestNeighbor(e, s, !this.cropToAspectRatio);
        throw new Error(`Interpolation is ${this.interpolation} but only ${[
          ...sS
        ]} are supported`);
      });
    }
  }
  S0.className = "Resizing";
  le(S0);
  class gT {
    constructor(e) {
      this.seed = e;
    }
    next() {
      if (this.seed !== void 0) return this.seed++;
    }
  }
  gT.className = "RandomSeed";
  class yT extends We {
    constructor(e) {
      super(e), this.randomGenerator = new gT(e.seed);
    }
    getConfig() {
      const e = {
        seed: this.randomGenerator.seed
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
  }
  yT.className = "BaseRandomLayer";
  const fH = [
    "bilinear",
    "nearest"
  ], rS = new Set(fH);
  class $0 extends yT {
    constructor(e) {
      super(e);
      const { factor: n, interpolation: s = "bilinear" } = e;
      if (this.factor = n, Array.isArray(this.factor) && this.factor.length === 2) this.widthLower = this.factor[0], this.widthUpper = this.factor[1];
      else if (!Array.isArray(this.factor) && this.factor > 0) this.widthLower = -this.factor, this.widthUpper = this.factor;
      else throw new z(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);
      if (this.widthLower < -1 || this.widthUpper < -1) throw new z(`factor must have values larger than -1. Got: ${this.factor}`);
      if (this.widthUpper < this.widthLower) throw new z(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);
      if (s) if (rS.has(s)) this.interpolation = s;
      else throw new z(`Invalid interpolation parameter: ${s} is not implemented`);
    }
    getConfig() {
      const e = {
        factor: this.factor,
        interpolation: this.interpolation
      }, n = super.getConfig();
      return Object.assign(e, n), e;
    }
    computeOutputShape(e) {
      e = Ze(e);
      const n = e[2];
      return [
        this.imgHeight,
        -1,
        n
      ];
    }
    call(e, n) {
      return q(() => {
        const s = _e(e);
        this.imgHeight = s.shape[s.shape.length - 3];
        const r = s.shape[s.shape.length - 2];
        this.widthFactor = Co([
          1
        ], 1 + this.widthLower, 1 + this.widthUpper, "float32", this.randomGenerator.next());
        let o = this.widthFactor.dataSync()[0] * r;
        o = Math.round(o);
        const i = [
          this.imgHeight,
          o
        ];
        switch (this.interpolation) {
          case "bilinear":
            return ps.resizeBilinear(e, i);
          case "nearest":
            return ps.resizeNearestNeighbor(e, i);
          default:
            throw new Error(`Interpolation is ${this.interpolation}
          but only ${[
              ...rS
            ]} are supported`);
        }
      });
    }
  }
  $0.className = "RandomWidth";
  le($0);
  function mH(t) {
    return new fl(t);
  }
  function gH(t) {
    return new Iw(t);
  }
  function yH(t) {
    return new Sw(t);
  }
  function bH(t) {
    return new $w(t);
  }
  function xH(t) {
    return new Cw(t);
  }
  function wH(t) {
    return new kw(t);
  }
  function vH(t) {
    return new Nw(t);
  }
  function SH(t) {
    return new fh(t);
  }
  function $H(t) {
    return new yl(t);
  }
  function CH(t) {
    return new Ew(t);
  }
  function IH(t) {
    return new bl(t);
  }
  function NH(t) {
    return new Rw(t);
  }
  function kH(t) {
    return new Aw(t);
  }
  function TH(t) {
    return new _w(t);
  }
  function EH(t) {
    return new Dw(t);
  }
  function RH(t) {
    return new Ow(t);
  }
  function AH(t) {
    return new Ww(t);
  }
  function _H(t) {
    return new Bw(t);
  }
  function DH(t) {
    return new Dm(t);
  }
  function OH(t) {
    return new Mw(t);
  }
  function FH(t) {
    return new Vw(t);
  }
  function LH(t) {
    return new Uw(t);
  }
  function PH(t) {
    return new Gw(t);
  }
  function zH(t) {
    return new Hw(t);
  }
  function MH(t) {
    return new qw(t);
  }
  function BH(t) {
    return new Kw(t);
  }
  function VH(t) {
    return new Yw(t);
  }
  function WH(t) {
    return new Qw(t);
  }
  function UH(t) {
    return new Zw(t);
  }
  function GH(t) {
    return new Jw(t);
  }
  function HH(t) {
    return new Xw(t);
  }
  function jH(t) {
    return new e0(t);
  }
  function qH(t) {
    return new r0(t);
  }
  function KH(t) {
    return new o0(t);
  }
  function XH(t) {
    return new i0(t);
  }
  function C0(t) {
    return new l0(t);
  }
  function YH(t) {
    return C0(t);
  }
  function ZH(t) {
    return C0(t);
  }
  function I0(t) {
    return new u0(t);
  }
  function JH(t) {
    return I0(t);
  }
  function QH(t) {
    return I0(t);
  }
  function N0(t) {
    return new d0(t);
  }
  function ej(t) {
    return N0(t);
  }
  function tj(t) {
    return N0(t);
  }
  function nj(t) {
    return new p0(t);
  }
  function sj(t) {
    return new m0(t);
  }
  function bT(t) {
    return new f0(t);
  }
  function xT(t) {
    return new g0(t);
  }
  function wT(t) {
    return new a0(t);
  }
  function vT(t) {
    return new c0(t);
  }
  function rj(t) {
    return new h0(t);
  }
  function oj(t) {
    return new Lw(t);
  }
  function ij(t) {
    return new Rm(t);
  }
  function aj(t) {
    return new Pw(t);
  }
  function lj(t) {
    return new gh(t);
  }
  function cj(t) {
    return new Fw(t);
  }
  function uj(t) {
    return new Em(t);
  }
  function hj(t) {
    return new zw(t);
  }
  function dj(t) {
    return new _m(t);
  }
  function pj(t) {
    return new Bs(t);
  }
  function fj(t) {
    return new Am(t);
  }
  function mj(t) {
    return new b0(t);
  }
  function gj(t) {
    return new y0(t);
  }
  const yj = bT, bj = xT, xj = wT, wj = vT;
  function vj(t) {
    return new t0(t);
  }
  function Sj(t) {
    return new n0(t);
  }
  function $j(t) {
    return new s0(t);
  }
  function Cj(t) {
    return new jw(t);
  }
  function Ij(t) {
    return new x0(t);
  }
  function Nj(t) {
    return new w0(t);
  }
  function kj(t) {
    return new S0(t);
  }
  function Tj(t) {
    return new v0(t);
  }
  function Ej(t) {
    return new $0(t);
  }
  const Rj = Object.freeze(Object.defineProperty({
    __proto__: null,
    Layer: We,
    RNN: Bs,
    RNNCell: mh,
    activation: AH,
    add: BH,
    alphaDropout: $j,
    average: VH,
    averagePooling1d: C0,
    averagePooling2d: I0,
    averagePooling3d: N0,
    avgPool1d: YH,
    avgPool2d: JH,
    avgPool3d: ej,
    avgPooling1d: ZH,
    avgPooling2d: QH,
    avgPooling3d: tj,
    batchNormalization: qH,
    bidirectional: mj,
    categoryEncoding: Tj,
    centerCrop: Nj,
    concatenate: WH,
    conv1d: SH,
    conv2d: $H,
    conv2dTranspose: CH,
    conv3d: IH,
    conv3dTranspose: NH,
    convLstm2d: hj,
    convLstm2dCell: dj,
    cropping2D: TH,
    dense: _H,
    depthwiseConv2d: RH,
    dot: jH,
    dropout: DH,
    elu: gH,
    embedding: MH,
    flatten: FH,
    gaussianDropout: Sj,
    gaussianNoise: vj,
    globalAveragePooling1d: nj,
    globalAveragePooling2d: sj,
    globalMaxPool1d: yj,
    globalMaxPool2d: bj,
    globalMaxPooling1d: bT,
    globalMaxPooling2d: xT,
    gru: oj,
    gruCell: ij,
    input: Vk,
    inputLayer: mH,
    layerNormalization: KH,
    leakyReLU: bH,
    lstm: aj,
    lstmCell: lj,
    masking: Cj,
    maxPool1d: xj,
    maxPool2d: wj,
    maxPooling1d: wT,
    maxPooling2d: vT,
    maxPooling3d: rj,
    maximum: UH,
    minimum: GH,
    multiply: HH,
    permute: zH,
    prelu: xH,
    randomWidth: Ej,
    reLU: yH,
    repeatVector: LH,
    rescaling: Ij,
    reshape: PH,
    resizing: kj,
    rnn: pj,
    separableConv2d: kH,
    simpleRNN: cj,
    simpleRNNCell: uj,
    softmax: wH,
    spatialDropout1d: OH,
    stackedRNNCells: fj,
    thresholdedReLU: vH,
    timeDistributed: gj,
    upSampling2d: EH,
    zeroPadding2d: XH
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  function Aj(t, e) {
    return yw(t, e);
  }
  function _j(t, e) {
    return _k(t, e);
  }
  function Dj(t, e) {
    return Dk(t, e);
  }
  function Oj(t, e) {
    return bw(t, e);
  }
  function Fj(t, e) {
    return xw(t, e);
  }
  function Lj(t, e) {
    return Ak(t, e);
  }
  function Pj(t, e) {
    return mG(t, e);
  }
  function zj(t, e) {
    return gw(t, e);
  }
  function Mj(t, e) {
    return Im(t, e);
  }
  function Bj(t, e) {
    return ml(t, e);
  }
  function Vj(t, e) {
    return ml(t, e);
  }
  function Wj(t, e) {
    return ml(t, e);
  }
  function Uj(t, e) {
    return Ii(t, e);
  }
  function Gj(t, e) {
    return Ii(t, e);
  }
  function Hj(t, e) {
    return Ii(t, e);
  }
  const jj = Object.freeze(Object.defineProperty({
    __proto__: null,
    MAPE: Vj,
    MSE: Gj,
    binaryAccuracy: Aj,
    binaryCrossentropy: _j,
    categoricalAccuracy: Oj,
    categoricalCrossentropy: Fj,
    cosineProximity: zj,
    mape: Wj,
    meanAbsoluteError: Mj,
    meanAbsolutePercentageError: Bj,
    meanSquaredError: Uj,
    mse: Hj,
    precision: Lj,
    recall: Pj,
    sparseCategoricalAccuracy: Dj
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const qj = Object.freeze(Object.defineProperty({
    __proto__: null,
    modelFromJSON: GG
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  function Kj(t) {
    return new ph(t);
  }
  function Xj(t) {
    return ZG(t);
  }
  function Yj(t) {
    return JG(t);
  }
  const Zj = Object.freeze(Object.defineProperty({
    __proto__: null,
    l1: Xj,
    l1l2: Kj,
    l2: Yj
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  class ST extends ia {
    constructor() {
      super(...arguments), this.model = null;
    }
    setModel(e) {
      if (!(e instanceof Sr)) throw new Error("model must be a LayersModel, not some other Container");
      this.model = e;
    }
  }
  function Fh(t, e) {
    return t < e;
  }
  function oS(t, e) {
    return t > e;
  }
  class $T extends ST {
    constructor(e) {
      if (super(), e == null && (e = {}), e.restoreBestWeights) throw new ze("restoreBestWeights = True is not implemented in EarlyStopping yet.");
      this.monitor = e.monitor || "val_loss", this.minDelta = Math.abs(e.minDelta || 0), this.patience = e.patience || 0, this.verbose = e.verbose || 0, this.mode = e.mode || "auto", this.baseline = e.baseline, [
        "auto",
        "min",
        "max"
      ].indexOf(this.mode) === -1 && (console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`), this.mode = "auto"), this.mode === "min" ? this.monitorFunc = Fh : this.mode === "max" ? this.monitorFunc = oS : this.monitor.indexOf("acc") !== -1 ? this.monitorFunc = oS : this.monitorFunc = Fh, this.monitorFunc === Fh && (this.minDelta *= -1);
    }
    async onTrainBegin(e) {
      this.wait = 0, this.stoppedEpoch = 0, this.baseline != null ? this.best = this.baseline : this.best = this.monitorFunc === Fh ? 1 / 0 : -1 / 0;
    }
    async onEpochEnd(e, n) {
      await Wr(n);
      const s = this.getMonitorValue(n);
      s != null && (this.monitorFunc(s - this.minDelta, this.best) ? (this.best = s, this.wait = 0) : (this.wait++, this.wait >= this.patience && (this.stoppedEpoch = e, this.model.stopTraining = true)));
    }
    async onTrainEnd(e) {
      this.stoppedEpoch > 0 && this.verbose && console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);
    }
    getMonitorValue(e) {
      e == null && (e = {});
      const n = e[this.monitor];
      return n == null && console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`), n;
    }
  }
  function Jj(t) {
    return new $T(t);
  }
  const Qj = {
    earlyStopping: Jj
  };
  const eq = j();
  eq.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => false, (t) => {
    t && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
  });
  var Mn;
  (function(t) {
    t[t.DT_INVALID = 0] = "DT_INVALID", t[t.DT_FLOAT = 1] = "DT_FLOAT", t[t.DT_DOUBLE = 2] = "DT_DOUBLE", t[t.DT_INT32 = 3] = "DT_INT32", t[t.DT_UINT8 = 4] = "DT_UINT8", t[t.DT_INT16 = 5] = "DT_INT16", t[t.DT_INT8 = 6] = "DT_INT8", t[t.DT_STRING = 7] = "DT_STRING", t[t.DT_COMPLEX64 = 8] = "DT_COMPLEX64", t[t.DT_INT64 = 9] = "DT_INT64", t[t.DT_BOOL = 10] = "DT_BOOL", t[t.DT_QINT8 = 11] = "DT_QINT8", t[t.DT_QUINT8 = 12] = "DT_QUINT8", t[t.DT_QINT32 = 13] = "DT_QINT32", t[t.DT_BFLOAT16 = 14] = "DT_BFLOAT16", t[t.DT_QINT16 = 15] = "DT_QINT16", t[t.DT_QUINT16 = 16] = "DT_QUINT16", t[t.DT_UINT16 = 17] = "DT_UINT16", t[t.DT_COMPLEX128 = 18] = "DT_COMPLEX128", t[t.DT_HALF = 19] = "DT_HALF", t[t.DT_RESOURCE = 20] = "DT_RESOURCE", t[t.DT_VARIANT = 21] = "DT_VARIANT", t[t.DT_UINT32 = 22] = "DT_UINT32", t[t.DT_UINT64 = 23] = "DT_UINT64", t[t.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", t[t.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", t[t.DT_INT32_REF = 103] = "DT_INT32_REF", t[t.DT_UINT8_REF = 104] = "DT_UINT8_REF", t[t.DT_INT16_REF = 105] = "DT_INT16_REF", t[t.DT_INT8_REF = 106] = "DT_INT8_REF", t[t.DT_STRING_REF = 107] = "DT_STRING_REF", t[t.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", t[t.DT_INT64_REF = 109] = "DT_INT64_REF", t[t.DT_BOOL_REF = 110] = "DT_BOOL_REF", t[t.DT_QINT8_REF = 111] = "DT_QINT8_REF", t[t.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", t[t.DT_QINT32_REF = 113] = "DT_QINT32_REF", t[t.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", t[t.DT_QINT16_REF = 115] = "DT_QINT16_REF", t[t.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", t[t.DT_UINT16_REF = 117] = "DT_UINT16_REF", t[t.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", t[t.DT_HALF_REF = 119] = "DT_HALF_REF", t[t.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", t[t.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", t[t.DT_UINT32_REF = 122] = "DT_UINT32_REF", t[t.DT_UINT64_REF = 123] = "DT_UINT64_REF";
  })(Mn || (Mn = {}));
  var iS;
  (function(t) {
    (function(e) {
      e[e.LEGACY = 0] = "LEGACY", e[e.V1 = 1] = "V1", e[e.V2 = 2] = "V2";
    })(t.CheckpointFormatVersion || (t.CheckpointFormatVersion = {}));
  })(iS || (iS = {}));
  const k0 = {};
  function tq(t, e) {
    const n = {
      tfOpName: t,
      category: "custom",
      inputs: [],
      attrs: [],
      customExecutor: e
    };
    k0[t] = n;
  }
  function CT(t) {
    return k0[t];
  }
  function nq(t) {
    delete k0[t];
  }
  function v(t, e, n, s, r) {
    const o = e.inputParams[t];
    if (o && o.inputIndexStart !== void 0) {
      const a = o.inputIndexStart, l = o.inputIndexEnd === 0 ? void 0 : o.inputIndexEnd === void 0 ? a + 1 : o.inputIndexEnd, c = a < 0 ? e.inputNames.length + a : a;
      if (o.type === "tensor") return Jt(e.inputNames[c], n, s, r);
      if (o.type === "tensors") {
        const d = e.inputs.slice(a, l);
        return e.inputNames.slice(a, l).filter((f, m) => {
          var g;
          return ((g = d[m]) === null || g === void 0 ? void 0 : g.op) !== "NoOp";
        }).map((f) => Jt(f, n, s, r));
      }
      const u = Jt(e.inputNames[c], n, s, r), h = u.dataSync();
      return o.type === "number" ? h[0] : ns(u.shape, h);
    }
    const i = e.attrParams[t];
    return i && i.value;
  }
  function Jt(t, e, n, s) {
    const [r, o] = Vn(t, n);
    if (s != null) {
      const a = s.getHashTableHandleByName(r);
      if (a != null) return a;
    }
    const i = n.currentContextIds.find((a) => !!e[Vd(r, a)]);
    return i !== void 0 ? e[Vd(r, i)][o] : void 0;
  }
  function aS(t, e, n) {
    return e[Vd(t, n.currentContextId)];
  }
  function gr(t, e) {
    const [n, s, r] = Vn(t, e);
    return [
      Vd(n, e && e.currentContextId),
      s,
      r
    ];
  }
  function Vd(t, e) {
    return e ? `${t}-${e}` : t;
  }
  function Vn(t, e) {
    if (t === "") return [
      "",
      0,
      void 0
    ];
    const n = e != null && e.parseNodeNameCache != null;
    if (n) {
      const o = e.parseNodeNameCache.get(t);
      if (o != null) return o;
    }
    const s = t.split(":");
    let r;
    if (s.length === 1) r = [
      t,
      0,
      void 0
    ];
    else {
      const o = s[0], i = s.length === 3 ? s[1] : void 0, a = Number(s[s.length - 1]);
      r = [
        o,
        a,
        i
      ];
    }
    return n && e.parseNodeNameCache.set(t, r), r;
  }
  function rd(t, e, n) {
    let s = v("pad", t, e, n);
    if (s === "explicit") {
      s = v("explicitPaddings", t, e, n);
      const r = [
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ]
      ];
      for (let o = 0; o < 4; o++) r[o][0] = s[o * 2], r[o][1] = s[o * 2 + 1];
      return r;
    }
    return s;
  }
  function yr(t) {
    return t.kept ? t : er(t);
  }
  const sq = [
    {
      tfOpName: "Add",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "AddV2",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "AddN",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          end: 0,
          name: "tensors",
          type: "tensors"
        }
      ]
    },
    {
      tfOpName: "BiasAdd",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Sub",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "RealDiv",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Div",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "DivNoNan",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "FloorDiv",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Mul",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Maximum",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Minimum",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Pow",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "SquaredDifference",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Mod",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "FloorMod",
      category: "arithmetic",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    }
  ], rq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: sq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const oq = [
    {
      tfOpName: "Abs",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Acos",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Asin",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Atan",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Atan2",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "y",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Ceil",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "ClipByValue",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "clipValueMin",
          type: "number"
        },
        {
          start: 2,
          name: "clipValueMax",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Complex",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "real",
          type: "tensor"
        },
        {
          start: 1,
          name: "imag",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "ComplexAbs",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Cos",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Cosh",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Elu",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Exp",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Floor",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Log",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Imag",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "Tout",
          name: "outputType",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Neg",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Real",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "Tout",
          name: "outputType",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Prelu",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "alpha",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Relu",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Relu6",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Selu",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Sigmoid",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Sin",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Sinh",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Sqrt",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Rsqrt",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Square",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Tan",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Tanh",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Sign",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Round",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Expm1",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Log1p",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Reciprocal",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Softplus",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Asinh",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Acosh",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Atanh",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Erf",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "LeakyRelu",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "alpha",
          name: "alpha",
          type: "number",
          defaultValue: 0.2
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "IsNan",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "IsFinite",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "IsInf",
      category: "basic_math",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    }
  ], iq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: oq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const aq = [
    {
      tfOpName: "EmptyTensorList",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "elementShape",
          type: "shape"
        },
        {
          start: 1,
          name: "maxNumElements",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "LoopCond",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "pred",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "Switch",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "data",
          type: "tensor"
        },
        {
          start: 1,
          name: "pred",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "Merge",
      category: "control",
      inputs: [
        {
          start: 0,
          end: 0,
          name: "tensors",
          type: "tensors"
        }
      ]
    },
    {
      tfOpName: "Enter",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensor",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "frame_name",
          name: "frameName",
          type: "string"
        },
        {
          tfName: "is_constant",
          name: "isConstant",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "Exit",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensor",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "NextIteration",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensor",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "TensorArrayV3",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "size",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "dtype",
          name: "dtype",
          type: "dtype"
        },
        {
          tfName: "element_shape",
          name: "elementShape",
          type: "shape"
        },
        {
          tfName: "dynamic_size",
          name: "dynamicSize",
          type: "bool"
        },
        {
          tfName: "clear_after_read",
          name: "clearAfterRead",
          type: "bool"
        },
        {
          tfName: "identical_element_shapes",
          name: "identicalElementShapes",
          type: "bool"
        },
        {
          tfName: "tensor_array_name",
          name: "name",
          type: "string"
        }
      ]
    },
    {
      tfOpName: "TensorArrayWriteV3",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorArrayId",
          type: "tensor"
        },
        {
          start: 1,
          name: "index",
          type: "number"
        },
        {
          start: 2,
          name: "tensor",
          type: "tensor"
        },
        {
          start: 3,
          name: "flowIn",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "TensorArrayReadV3",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorArrayId",
          type: "tensor"
        },
        {
          start: 1,
          name: "index",
          type: "number"
        },
        {
          start: 2,
          name: "flowIn",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "dtype",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "TensorArrayGatherV3",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorArrayId",
          type: "tensor"
        },
        {
          start: 1,
          name: "indices",
          type: "number[]"
        },
        {
          start: 2,
          name: "flowIn",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "dtype",
          name: "dtype",
          type: "dtype"
        },
        {
          tfName: "element_shape",
          name: "elementShape",
          type: "shape"
        }
      ]
    },
    {
      tfOpName: "TensorArrayScatterV3",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorArrayId",
          type: "tensor"
        },
        {
          start: 1,
          name: "indices",
          type: "number[]"
        },
        {
          start: 2,
          name: "tensor",
          type: "tensor"
        },
        {
          start: 3,
          name: "flowIn",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorArrayConcatV3",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorArrayId",
          type: "tensor"
        },
        {
          start: 1,
          name: "flowIn",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "dtype",
          name: "dtype",
          type: "dtype"
        },
        {
          tfName: "element_shape_except0",
          name: "elementShapeExcept0",
          type: "shape",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "TensorArraySplitV3",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorArrayId",
          type: "tensor"
        },
        {
          start: 1,
          name: "tensor",
          type: "tensor"
        },
        {
          start: 2,
          name: "lengths",
          type: "number[]"
        },
        {
          start: 3,
          name: "flowIn",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorArraySizeV3",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorArrayId",
          type: "tensor"
        },
        {
          start: 1,
          name: "flowIn",
          type: "number"
        }
      ]
    },
    {
      tfOpName: "TensorArrayCloseV3",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorArrayId",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "StatelessIf",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "cond",
          type: "tensor"
        },
        {
          start: 1,
          end: 0,
          name: "args",
          type: "tensors"
        }
      ],
      attrs: [
        {
          tfName: "then_branch",
          name: "thenBranch",
          type: "func"
        },
        {
          tfName: "else_branch",
          name: "elseBranch",
          type: "func"
        }
      ]
    },
    {
      tfOpName: "If",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "cond",
          type: "tensor"
        },
        {
          start: 1,
          end: 0,
          name: "args",
          type: "tensors"
        }
      ],
      attrs: [
        {
          tfName: "then_branch",
          name: "thenBranch",
          type: "func"
        },
        {
          tfName: "else_branch",
          name: "elseBranch",
          type: "func"
        }
      ]
    },
    {
      tfOpName: "StatelessWhile",
      category: "control",
      inputs: [
        {
          start: 0,
          end: 0,
          name: "args",
          type: "tensors"
        }
      ],
      attrs: [
        {
          tfName: "cond",
          name: "cond",
          type: "func"
        },
        {
          tfName: "body",
          name: "body",
          type: "func"
        }
      ]
    },
    {
      tfOpName: "While",
      category: "control",
      inputs: [
        {
          start: 0,
          end: 0,
          name: "args",
          type: "tensors"
        }
      ],
      attrs: [
        {
          tfName: "cond",
          name: "cond",
          type: "func"
        },
        {
          tfName: "body",
          name: "body",
          type: "func"
        }
      ]
    },
    {
      tfOpName: "TensorListScatter",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensor",
          type: "tensor"
        },
        {
          start: 1,
          name: "indices",
          type: "number[]"
        },
        {
          start: 2,
          name: "elementShape",
          type: "shape"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListScatterV2",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensor",
          type: "tensor"
        },
        {
          start: 1,
          name: "indices",
          type: "number[]"
        },
        {
          start: 2,
          name: "elementShape",
          type: "shape"
        },
        {
          start: 3,
          name: "numElements",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListGather",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorListId",
          type: "tensor"
        },
        {
          start: 1,
          name: "indices",
          type: "number[]"
        },
        {
          start: 2,
          name: "elementShape",
          type: "shape"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListGetItem",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorListId",
          type: "tensor"
        },
        {
          start: 1,
          name: "index",
          type: "number"
        },
        {
          start: 2,
          name: "elementShape",
          type: "shape"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListSetItem",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorListId",
          type: "tensor"
        },
        {
          start: 1,
          name: "index",
          type: "number"
        },
        {
          start: 2,
          name: "tensor",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListReserve",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "elementShape",
          type: "shape"
        },
        {
          start: 1,
          name: "numElements",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListFromTensor",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensor",
          type: "tensor"
        },
        {
          start: 1,
          name: "elementShape",
          type: "shape"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListStack",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorListId",
          type: "tensor"
        },
        {
          start: 1,
          name: "elementShape",
          type: "shape"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        },
        {
          tfName: "num_elements",
          name: "numElements",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListSplit",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensor",
          type: "tensor"
        },
        {
          start: 1,
          name: "elementShape",
          type: "shape"
        },
        {
          start: 2,
          name: "lengths",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListConcat",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorListId",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "element_shape",
          name: "elementShape",
          type: "shape"
        },
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListConcatV2",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorListId",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "element_shape",
          name: "elementShape",
          type: "shape"
        },
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListPopBack",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorListId",
          type: "tensor"
        },
        {
          start: 1,
          name: "elementShape",
          type: "shape"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListPushBack",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorListId",
          type: "tensor"
        },
        {
          start: 1,
          name: "tensor",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "element_dtype",
          name: "elementDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TensorListLength",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorListId",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "TensorListResize",
      category: "control",
      inputs: [
        {
          start: 0,
          name: "tensorListId",
          type: "tensor"
        },
        {
          start: 1,
          name: "size",
          type: "number"
        }
      ]
    }
  ], lq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: aq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const cq = [
    {
      tfOpName: "AvgPool",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          notSupported: true
        },
        {
          tfName: "ksize",
          name: "kernelSize",
          type: "number[]"
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "MaxPool",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          notSupported: true
        },
        {
          tfName: "ksize",
          name: "kernelSize",
          type: "number[]"
        },
        {
          tfName: "explicit_paddings",
          name: "explicitPaddings",
          type: "number[]",
          defaultValue: [],
          notSupported: true
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "MaxPoolWithArgmax",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "ksize",
          name: "kernelSize",
          type: "number[]"
        },
        {
          tfName: "include_batch_in_index",
          name: "includeBatchInIndex",
          type: "bool"
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "AvgPool3D",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          notSupported: true
        },
        {
          tfName: "ksize",
          name: "kernelSize",
          type: "number[]"
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "MaxPool3D",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          notSupported: true
        },
        {
          tfName: "ksize",
          name: "kernelSize",
          type: "number[]"
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Conv1D",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "filter",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "stride",
          name: "stride",
          type: "number"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          defaultValue: "NWC"
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "dilation",
          name: "dilation",
          type: "number",
          defaultValue: 1
        }
      ]
    },
    {
      tfOpName: "Conv2D",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "filter",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "useCudnnOnGpu",
          name: "useCudnnOnGpu",
          type: "bool"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          defaultValue: "NHWC"
        },
        {
          tfName: "explicit_paddings",
          name: "explicitPaddings",
          type: "number[]",
          defaultValue: []
        },
        {
          tfName: "dilations",
          name: "dilations",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "_FusedConv2D",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "filter",
          type: "tensor"
        },
        {
          start: 2,
          end: 0,
          name: "args",
          type: "tensors"
        }
      ],
      attrs: [
        {
          tfName: "num_args",
          name: "numArgs",
          type: "number"
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "explicit_paddings",
          name: "explicitPaddings",
          type: "number[]",
          defaultValue: []
        },
        {
          tfName: "use_cudnn_on_gpu",
          name: "useCudnnOnGpu",
          type: "bool",
          defaultValue: true
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          defaultValue: "NHWC"
        },
        {
          tfName: "dilations",
          name: "dilations",
          type: "number[]",
          defaultValue: [
            1,
            1,
            1,
            1
          ]
        },
        {
          tfName: "fused_ops",
          name: "fusedOps",
          type: "string[]",
          defaultValue: []
        },
        {
          tfName: "epsilon",
          name: "epsilon",
          type: "number",
          defaultValue: 1e-4
        },
        {
          tfName: "leakyrelu_alpha",
          name: "leakyreluAlpha",
          type: "number",
          defaultValue: 0.2
        }
      ]
    },
    {
      tfOpName: "Conv2DBackpropInput",
      category: "convolution",
      inputs: [
        {
          start: 2,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "filter",
          type: "tensor"
        },
        {
          start: 0,
          name: "outputShape",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          notSupported: true
        },
        {
          tfName: "explicit_paddings",
          name: "explicitPaddings",
          type: "number[]",
          defaultValue: []
        },
        {
          tfName: "dilations",
          name: "dilations",
          type: "number[]",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "DepthwiseConv2d",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "input",
          type: "tensor"
        },
        {
          start: 1,
          name: "filter",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          defaultValue: "NHWC"
        },
        {
          tfName: "explicit_paddings",
          name: "explicitPaddings",
          type: "number[]",
          defaultValue: []
        },
        {
          tfName: "dilations",
          name: "dilations",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "DepthwiseConv2dNative",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "input",
          type: "tensor"
        },
        {
          start: 1,
          name: "filter",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          defaultValue: "NHWC"
        },
        {
          tfName: "explicit_paddings",
          name: "explicitPaddings",
          type: "number[]",
          defaultValue: []
        },
        {
          tfName: "dilations",
          name: "dilations",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "FusedDepthwiseConv2dNative",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "filter",
          type: "tensor"
        },
        {
          start: 2,
          end: 0,
          name: "args",
          type: "tensors"
        }
      ],
      attrs: [
        {
          tfName: "num_args",
          name: "numArgs",
          type: "number"
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          defaultValue: "NHWC"
        },
        {
          tfName: "dilations",
          name: "dilations",
          type: "number[]",
          defaultValue: [
            1,
            1,
            1,
            1
          ]
        },
        {
          tfName: "fused_ops",
          name: "fusedOps",
          type: "string[]",
          defaultValue: []
        },
        {
          tfName: "explicit_paddings",
          name: "explicitPaddings",
          type: "number[]",
          defaultValue: []
        }
      ]
    },
    {
      tfOpName: "Conv3D",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "filter",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          defaultValue: "NHWC"
        },
        {
          tfName: "dilations",
          name: "dilations",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "Dilation2D",
      category: "convolution",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "filter",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "strides",
          name: "strides",
          type: "number[]"
        },
        {
          tfName: "rates",
          name: "dilations",
          type: "number[]"
        },
        {
          tfName: "padding",
          name: "pad",
          type: "string"
        }
      ]
    }
  ], uq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: cq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const hq = [
    {
      tfOpName: "Fill",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "shape",
          type: "number[]"
        },
        {
          start: 1,
          name: "value",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "LinSpace",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "start",
          type: "number"
        },
        {
          start: 1,
          name: "stop",
          type: "number"
        },
        {
          start: 2,
          name: "num",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "OneHot",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "indices",
          type: "tensor"
        },
        {
          start: 1,
          name: "depth",
          type: "number"
        },
        {
          start: 2,
          name: "onValue",
          type: "number",
          defaultValue: 1
        },
        {
          start: 3,
          name: "offValue",
          type: "number",
          defaultValue: 0
        }
      ],
      attrs: [
        {
          tfName: "axis",
          name: "axis",
          type: "number",
          notSupported: true
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "Ones",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "shape",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "OnesLike",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "dtype",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "RandomStandardNormal",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "shape",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "seed",
          name: "seed",
          type: "number",
          defaultValue: 0
        },
        {
          tfName: "seed2",
          name: "seed2",
          type: "number",
          defaultValue: 0,
          notSupported: true
        },
        {
          tfName: "dtype",
          name: "dtype",
          type: "dtype"
        },
        {
          tfName: "T",
          name: "T",
          type: "number",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "RandomUniform",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "shape",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "minval",
          name: "minval",
          type: "number",
          defaultValue: 0
        },
        {
          tfName: "maxval",
          name: "maxval",
          type: "number",
          defaultValue: 1
        },
        {
          tfName: "dtype",
          name: "dtype",
          type: "dtype"
        },
        {
          tfName: "seed",
          name: "seed",
          type: "number",
          defaultValue: 0
        },
        {
          tfName: "seed2",
          name: "seed2",
          type: "number",
          defaultValue: 0,
          notSupported: true
        },
        {
          tfName: "T",
          name: "T",
          type: "number",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "RandomUniformInt",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "shape",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "minval",
          name: "minval",
          type: "number"
        },
        {
          tfName: "maxval",
          name: "maxval",
          type: "number"
        },
        {
          tfName: "seed",
          name: "seed",
          type: "number",
          defaultValue: 0
        },
        {
          tfName: "seed2",
          name: "seed2",
          type: "number",
          defaultValue: 0,
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Range",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "start",
          type: "number"
        },
        {
          start: 1,
          name: "stop",
          type: "number"
        },
        {
          start: 2,
          name: "step",
          type: "number",
          defaultValue: 0
        }
      ],
      attrs: [
        {
          tfName: "Tidx",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "TruncatedNormal",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "shape",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "means",
          name: "mean",
          type: "number",
          defaultValue: 0
        },
        {
          tfName: "stddev",
          name: "stdDev",
          type: "number",
          defaultValue: 1
        },
        {
          tfName: "seed",
          name: "seed",
          type: "number"
        },
        {
          tfName: "seed2",
          name: "seed2",
          type: "number",
          defaultValue: 0,
          notSupported: true
        },
        {
          tfName: "dtype",
          name: "dtype",
          type: "dtype"
        },
        {
          tfName: "T",
          name: "T",
          type: "number",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Zeros",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "shape",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "ZerosLike",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "Multinomial",
      category: "creation",
      inputs: [
        {
          start: 0,
          name: "logits",
          type: "tensor"
        },
        {
          start: 1,
          name: "numSamples",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "seed",
          name: "seed",
          type: "number"
        },
        {
          tfName: "seed2",
          name: "seed2",
          type: "number"
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype"
        },
        {
          tfName: "output_dtype",
          name: "output_dtype",
          type: "dtype"
        }
      ]
    }
  ], dq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: hq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const pq = [
    {
      tfOpName: "NonMaxSuppressionV2",
      category: "dynamic",
      inputs: [
        {
          start: 0,
          name: "boxes",
          type: "tensor"
        },
        {
          start: 1,
          name: "scores",
          type: "tensor"
        },
        {
          start: 2,
          name: "maxOutputSize",
          type: "number"
        },
        {
          start: 3,
          name: "iouThreshold",
          type: "number"
        }
      ]
    },
    {
      tfOpName: "NonMaxSuppressionV3",
      category: "dynamic",
      inputs: [
        {
          start: 0,
          name: "boxes",
          type: "tensor"
        },
        {
          start: 1,
          name: "scores",
          type: "tensor"
        },
        {
          start: 2,
          name: "maxOutputSize",
          type: "number"
        },
        {
          start: 3,
          name: "iouThreshold",
          type: "number"
        },
        {
          start: 4,
          name: "scoreThreshold",
          type: "number"
        }
      ]
    },
    {
      tfOpName: "NonMaxSuppressionV4",
      category: "dynamic",
      inputs: [
        {
          start: 0,
          name: "boxes",
          type: "tensor"
        },
        {
          start: 1,
          name: "scores",
          type: "tensor"
        },
        {
          start: 2,
          name: "maxOutputSize",
          type: "number"
        },
        {
          start: 3,
          name: "iouThreshold",
          type: "number"
        },
        {
          start: 4,
          name: "scoreThreshold",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "T_threshold",
          name: "threshold",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "pad_to_max_output_size",
          name: "padToMaxOutputSize",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "NonMaxSuppressionV5",
      category: "dynamic",
      inputs: [
        {
          start: 0,
          name: "boxes",
          type: "tensor"
        },
        {
          start: 1,
          name: "scores",
          type: "tensor"
        },
        {
          start: 2,
          name: "maxOutputSize",
          type: "number"
        },
        {
          start: 3,
          name: "iouThreshold",
          type: "number"
        },
        {
          start: 4,
          name: "scoreThreshold",
          type: "number"
        },
        {
          start: 5,
          name: "softNmsSigma",
          type: "number"
        }
      ]
    },
    {
      tfOpName: "Where",
      category: "dynamic",
      inputs: [
        {
          start: 0,
          name: "condition",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "ListDiff",
      category: "dynamic",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "y",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    }
  ], fq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: pq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const mq = [
    {
      tfOpName: "LowerBound",
      category: "evaluation",
      inputs: [
        {
          start: 0,
          name: "sortedSequence",
          type: "tensor"
        },
        {
          start: 1,
          name: "values",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "TopKV2",
      category: "evaluation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "k",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "sorted",
          name: "sorted",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "UpperBound",
      category: "evaluation",
      inputs: [
        {
          start: 0,
          name: "sortedSequence",
          type: "tensor"
        },
        {
          start: 1,
          name: "values",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "Unique",
      category: "evaluation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "UniqueV2",
      category: "evaluation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number"
        }
      ]
    }
  ], gq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: mq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const yq = [
    {
      tfOpName: "PlaceholderWithDefault",
      category: "graph",
      inputs: [
        {
          start: 0,
          name: "default",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "shape",
          name: "shape",
          type: "shape"
        },
        {
          tfName: "dtype",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "Placeholder",
      category: "graph",
      attrs: [
        {
          tfName: "shape",
          name: "shape",
          type: "shape"
        },
        {
          tfName: "dtype",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "Const",
      category: "graph"
    },
    {
      tfOpName: "Identity",
      category: "graph",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "IdentityN",
      category: "graph",
      inputs: [
        {
          start: 0,
          end: 0,
          name: "x",
          type: "tensors"
        }
      ]
    },
    {
      tfOpName: "Snapshot",
      category: "graph",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "Rank",
      category: "graph",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "Size",
      category: "graph",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "Shape",
      category: "graph",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "ShapeN",
      category: "graph",
      inputs: [
        {
          start: 0,
          end: 0,
          name: "x",
          type: "tensors"
        }
      ]
    },
    {
      tfOpName: "Print",
      category: "graph",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "data",
          type: "tensors"
        }
      ],
      attrs: [
        {
          tfName: "message",
          name: "message",
          type: "string"
        },
        {
          tfName: "first_n",
          name: "firstN",
          type: "number",
          notSupported: true
        },
        {
          tfName: "summarize",
          name: "summarize",
          type: "number",
          defaultValue: 3
        }
      ]
    },
    {
      tfOpName: "NoOp",
      category: "graph",
      inputs: []
    },
    {
      tfOpName: "StopGradient",
      category: "graph",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "FakeQuantWithMinMaxVars",
      category: "graph",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "min",
          name: "min",
          type: "number"
        },
        {
          tfName: "max",
          name: "max",
          type: "number"
        }
      ]
    }
  ], bq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: yq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const xq = [
    {
      tfOpName: "HashTable",
      category: "hash_table",
      inputs: [],
      attrs: [
        {
          tfName: "shared_name",
          name: "sharedName",
          type: "string"
        },
        {
          tfName: "use_node_name_sharing",
          name: "useNodeNameSharing",
          type: "bool"
        },
        {
          tfName: "key_dtype",
          name: "keyDType",
          type: "dtype"
        },
        {
          tfName: "value_dtype",
          name: "valueDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "HashTableV2",
      category: "hash_table",
      inputs: [],
      attrs: [
        {
          tfName: "shared_name",
          name: "sharedName",
          type: "string"
        },
        {
          tfName: "use_node_name_sharing",
          name: "useNodeNameSharing",
          type: "bool"
        },
        {
          tfName: "key_dtype",
          name: "keyDType",
          type: "dtype"
        },
        {
          tfName: "value_dtype",
          name: "valueDType",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "LookupTableImport",
      category: "hash_table",
      inputs: [
        {
          start: 0,
          name: "tableHandle",
          type: "tensor"
        },
        {
          start: 1,
          name: "keys",
          type: "tensor"
        },
        {
          start: 2,
          name: "values",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "Tin",
          name: "tIn",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "Tout",
          name: "tOut",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "LookupTableImportV2",
      category: "hash_table",
      inputs: [
        {
          start: 0,
          name: "tableHandle",
          type: "tensor"
        },
        {
          start: 1,
          name: "keys",
          type: "tensor"
        },
        {
          start: 2,
          name: "values",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "Tin",
          name: "tIn",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "Tout",
          name: "tOut",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "LookupTableFind",
      category: "hash_table",
      inputs: [
        {
          start: 0,
          name: "tableHandle",
          type: "tensor"
        },
        {
          start: 1,
          name: "keys",
          type: "tensor"
        },
        {
          start: 2,
          name: "defaultValue",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "Tin",
          name: "tIn",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "Tout",
          name: "tOut",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "LookupTableFindV2",
      category: "hash_table",
      inputs: [
        {
          start: 0,
          name: "tableHandle",
          type: "tensor"
        },
        {
          start: 1,
          name: "keys",
          type: "tensor"
        },
        {
          start: 2,
          name: "defaultValue",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "Tin",
          name: "tIn",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "Tout",
          name: "tOut",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "LookupTableSize",
      category: "hash_table",
      inputs: [
        {
          start: 0,
          name: "tableHandle",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "LookupTableSizeV2",
      category: "hash_table",
      inputs: [
        {
          start: 0,
          name: "tableHandle",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "InitializeTable",
      category: "hash_table",
      inputs: [
        {
          start: 0,
          name: "tableHandle",
          type: "tensor"
        },
        {
          start: 1,
          name: "keys",
          type: "tensor"
        },
        {
          start: 2,
          name: "values",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "InitializeTableV2",
      category: "hash_table",
      inputs: [
        {
          start: 0,
          name: "tableHandle",
          type: "tensor"
        },
        {
          start: 1,
          name: "keys",
          type: "tensor"
        },
        {
          start: 2,
          name: "values",
          type: "tensor"
        }
      ]
    }
  ], wq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: xq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const vq = [
    {
      tfOpName: "ResizeBilinear",
      category: "image",
      inputs: [
        {
          start: 0,
          name: "images",
          type: "tensor"
        },
        {
          start: 1,
          name: "size",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "align_corners",
          name: "alignCorners",
          type: "bool"
        },
        {
          tfName: "half_pixel_centers",
          name: "halfPixelCenters",
          type: "bool"
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "ResizeNearestNeighbor",
      category: "image",
      inputs: [
        {
          start: 0,
          name: "images",
          type: "tensor"
        },
        {
          start: 1,
          name: "size",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "align_corners",
          name: "alignCorners",
          type: "bool"
        },
        {
          tfName: "half_pixel_centers",
          name: "halfPixelCenters",
          type: "bool"
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "CropAndResize",
      category: "image",
      inputs: [
        {
          start: 0,
          name: "image",
          type: "tensor"
        },
        {
          start: 1,
          name: "boxes",
          type: "tensor"
        },
        {
          start: 2,
          name: "boxInd",
          type: "tensor"
        },
        {
          start: 3,
          name: "cropSize",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "method",
          name: "method",
          type: "string"
        },
        {
          tfName: "extrapolation_value",
          name: "extrapolationValue",
          type: "number"
        }
      ]
    },
    {
      tfOpName: "ImageProjectiveTransformV3",
      category: "image",
      inputs: [
        {
          start: 0,
          name: "images",
          type: "tensor"
        },
        {
          start: 1,
          name: "transforms",
          type: "tensor"
        },
        {
          start: 2,
          name: "outputShape",
          type: "number[]"
        },
        {
          start: 3,
          name: "fillValue",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "interpolation",
          name: "interpolation",
          type: "string"
        },
        {
          tfName: "fill_mode",
          name: "fillMode",
          type: "string"
        }
      ]
    }
  ], Sq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: vq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const $q = [
    {
      tfOpName: "Equal",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "NotEqual",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Greater",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "GreaterEqual",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Less",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "LessEqual",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "LogicalAnd",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "LogicalNot",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "LogicalOr",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Select",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "condition",
          type: "tensor"
        },
        {
          start: 1,
          name: "a",
          type: "tensor"
        },
        {
          start: 2,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "SelectV2",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "condition",
          type: "tensor"
        },
        {
          start: 1,
          name: "a",
          type: "tensor"
        },
        {
          start: 2,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "BitwiseAnd",
      category: "logical",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "y",
          type: "tensor"
        }
      ]
    }
  ], Cq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: $q
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const Iq = [
    {
      tfOpName: "_FusedMatMul",
      category: "matrices",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        },
        {
          start: 2,
          end: 0,
          name: "args",
          type: "tensors"
        }
      ],
      attrs: [
        {
          tfName: "num_args",
          name: "numArgs",
          type: "number"
        },
        {
          tfName: "fused_ops",
          name: "fusedOps",
          type: "string[]",
          defaultValue: []
        },
        {
          tfName: "epsilon",
          name: "epsilon",
          type: "number",
          defaultValue: 1e-4
        },
        {
          tfName: "transpose_a",
          name: "transposeA",
          type: "bool",
          defaultValue: false
        },
        {
          tfName: "transpose_b",
          name: "transposeB",
          type: "bool",
          defaultValue: false
        },
        {
          tfName: "leakyrelu_alpha",
          name: "leakyreluAlpha",
          type: "number",
          defaultValue: 0.2
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "MatMul",
      category: "matrices",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "transpose_a",
          name: "transposeA",
          type: "bool",
          defaultValue: false
        },
        {
          tfName: "transpose_b",
          name: "transposeB",
          type: "bool",
          defaultValue: false
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "BatchMatMul",
      category: "matrices",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "adj_x",
          name: "transposeA",
          type: "bool",
          defaultValue: false
        },
        {
          tfName: "adj_y",
          name: "transposeB",
          type: "bool",
          defaultValue: false
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "BatchMatMulV2",
      category: "matrices",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "b",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "adj_x",
          name: "transposeA",
          type: "bool",
          defaultValue: false
        },
        {
          tfName: "adj_y",
          name: "transposeB",
          type: "bool",
          defaultValue: false
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Transpose",
      category: "matrices",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "perm",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Einsum",
      category: "matrices",
      inputs: [
        {
          start: 0,
          end: 0,
          name: "tensors",
          type: "tensors"
        }
      ],
      attrs: [
        {
          tfName: "equation",
          name: "equation",
          type: "string"
        },
        {
          tfName: "N",
          name: "n",
          type: "number",
          defaultValue: 2
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "MatrixBandPart",
      category: "matrices",
      inputs: [
        {
          start: 0,
          name: "a",
          type: "tensor"
        },
        {
          start: 1,
          name: "numLower",
          type: "tensor"
        },
        {
          start: 1,
          name: "numUpper",
          type: "tensor"
        }
      ]
    }
  ], Nq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: Iq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const kq = [
    {
      tfOpName: "EuclideanNorm",
      category: "normalization",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "keep_dims",
          name: "keepDims",
          type: "bool",
          defaultValue: false
        }
      ]
    },
    {
      tfOpName: "FusedBatchNorm",
      category: "normalization",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "scale",
          type: "tensor"
        },
        {
          start: 2,
          name: "offset",
          type: "tensor"
        },
        {
          start: 3,
          name: "mean",
          type: "tensor"
        },
        {
          start: 4,
          name: "variance",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "epsilon",
          name: "epsilon",
          type: "number",
          defaultValue: 1e-3
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "FusedBatchNormV2",
      category: "normalization",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "scale",
          type: "tensor"
        },
        {
          start: 2,
          name: "offset",
          type: "tensor"
        },
        {
          start: 3,
          name: "mean",
          type: "tensor"
        },
        {
          start: 4,
          name: "variance",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "epsilon",
          name: "epsilon",
          type: "number",
          defaultValue: 1e-3
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "FusedBatchNormV3",
      category: "normalization",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "scale",
          type: "tensor"
        },
        {
          start: 2,
          name: "offset",
          type: "tensor"
        },
        {
          start: 3,
          name: "mean",
          type: "tensor"
        },
        {
          start: 4,
          name: "variance",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "epsilon",
          name: "epsilon",
          type: "number",
          defaultValue: 1e-3
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "LRN",
      category: "normalization",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "depth_radius",
          name: "radius",
          type: "number",
          defaultValue: 5
        },
        {
          tfName: "bias",
          name: "bias",
          type: "number",
          defaultValue: 1
        },
        {
          tfName: "alpha",
          name: "alpha",
          type: "number",
          defaultValue: 1
        },
        {
          tfName: "beta",
          name: "beta",
          type: "number",
          defaultValue: 0.5
        }
      ]
    },
    {
      tfOpName: "Softmax",
      category: "normalization",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "LogSoftmax",
      category: "normalization",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ]
    }
  ], Tq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: kq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const Eq = [
    {
      tfOpName: "Bincount",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "size",
          type: "number"
        },
        {
          start: 2,
          name: "weights",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "DenseBincount",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "size",
          type: "number"
        },
        {
          start: 2,
          name: "weights",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "binary_output",
          name: "binaryOutput",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "Max",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "keep_dims",
          name: "keepDims",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "Mean",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "keep_dims",
          name: "keepDims",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "Min",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "keep_dims",
          name: "keepDims",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "Sum",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "keep_dims",
          name: "keepDims",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "All",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "keep_dims",
          name: "keepDims",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "Any",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "keep_dims",
          name: "keepDims",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "ArgMax",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number"
        }
      ]
    },
    {
      tfOpName: "ArgMin",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number"
        }
      ]
    },
    {
      tfOpName: "Prod",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "keep_dims",
          name: "keepDims",
          type: "bool"
        },
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Cumprod",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "exclusive",
          name: "exclusive",
          type: "bool"
        },
        {
          tfName: "reverse",
          name: "reverse",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "Cumsum",
      category: "reduction",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "exclusive",
          name: "exclusive",
          type: "bool"
        },
        {
          tfName: "reverse",
          name: "reverse",
          type: "bool"
        }
      ]
    }
  ], Rq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: Eq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const Aq = [
    {
      tfOpName: "ConcatV2",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          end: -1,
          name: "tensors",
          type: "tensors"
        },
        {
          start: -1,
          name: "axis",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "N",
          name: "n",
          type: "number",
          defaultValue: 2
        }
      ]
    },
    {
      tfOpName: "Concat",
      category: "slice_join",
      inputs: [
        {
          start: 1,
          end: 0,
          name: "tensors",
          type: "tensors"
        },
        {
          start: 0,
          name: "axis",
          type: "number"
        }
      ],
      attrs: [
        {
          tfName: "N",
          name: "n",
          type: "number",
          defaultValue: 2
        }
      ]
    },
    {
      tfOpName: "GatherV2",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "indices",
          type: "tensor"
        },
        {
          start: 2,
          name: "axis",
          type: "number",
          defaultValue: 0
        }
      ],
      attrs: [
        {
          tfName: "batch_dims",
          name: "batchDims",
          type: "number",
          defaultValue: 0
        }
      ]
    },
    {
      tfOpName: "Gather",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "indices",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "validate_indices",
          name: "validateIndices",
          type: "bool",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Reverse",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "dims",
          type: "bool[]"
        }
      ]
    },
    {
      tfOpName: "ReverseV2",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "Slice",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "begin",
          type: "number[]"
        },
        {
          start: 2,
          name: "size",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "StridedSlice",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "begin",
          type: "number[]"
        },
        {
          start: 2,
          name: "end",
          type: "number[]"
        },
        {
          start: 3,
          name: "strides",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "begin_mask",
          name: "beginMask",
          type: "number",
          defaultValue: 0
        },
        {
          tfName: "end_mask",
          name: "endMask",
          type: "number",
          defaultValue: 0
        },
        {
          tfName: "new_axis_mask",
          name: "newAxisMask",
          type: "number",
          defaultValue: 0
        },
        {
          tfName: "ellipsis_mask",
          name: "ellipsisMask",
          type: "number",
          defaultValue: 0
        },
        {
          tfName: "shrink_axis_mask",
          name: "shrinkAxisMask",
          type: "number",
          defaultValue: 0
        }
      ]
    },
    {
      tfOpName: "Pack",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          end: 0,
          name: "tensors",
          type: "tensors"
        }
      ],
      attrs: [
        {
          tfName: "axis",
          name: "axis",
          type: "number",
          defaultValue: 0
        }
      ]
    },
    {
      tfOpName: "Unpack",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "tensor",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "axis",
          name: "axis",
          type: "number",
          defaultValue: 0
        },
        {
          tfName: "num",
          name: "num",
          type: "number",
          defaultValue: 0,
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "Tile",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "reps",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "Split",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "axis",
          type: "number",
          defaultValue: 0
        },
        {
          start: 1,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "num_split",
          name: "numOrSizeSplits",
          type: "number",
          defaultValue: 1
        }
      ]
    },
    {
      tfOpName: "SplitV",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "numOrSizeSplits",
          type: "number[]"
        },
        {
          start: 2,
          name: "axis",
          type: "number",
          defaultValue: 0
        }
      ]
    },
    {
      tfOpName: "ScatterNd",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "indices",
          type: "tensor"
        },
        {
          start: 1,
          name: "values",
          type: "tensor"
        },
        {
          start: 2,
          name: "shape",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "GatherNd",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "indices",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "SparseToDense",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "sparseIndices",
          type: "tensor"
        },
        {
          start: 1,
          name: "outputShape",
          type: "number[]"
        },
        {
          start: 2,
          name: "sparseValues",
          type: "tensor"
        },
        {
          start: 3,
          name: "defaultValue",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "validate_indices",
          name: "validateIndices",
          type: "bool",
          defaultValue: false,
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "TensorScatterUpdate",
      category: "slice_join",
      inputs: [
        {
          start: 0,
          name: "tensor",
          type: "tensor"
        },
        {
          start: 1,
          name: "indices",
          type: "tensor"
        },
        {
          start: 2,
          name: "values",
          type: "tensor"
        }
      ]
    }
  ], _q = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: Aq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const Dq = [
    {
      tfOpName: "SparseFillEmptyRows",
      category: "sparse",
      inputs: [
        {
          start: 0,
          name: "indices",
          type: "tensor"
        },
        {
          start: 1,
          name: "values",
          type: "tensor"
        },
        {
          start: 2,
          name: "denseShape",
          type: "tensor"
        },
        {
          start: 3,
          name: "defaultValue",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "SparseReshape",
      category: "sparse",
      inputs: [
        {
          start: 0,
          name: "inputIndices",
          type: "tensor"
        },
        {
          start: 1,
          name: "inputShape",
          type: "tensor"
        },
        {
          start: 2,
          name: "newShape",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "T",
          name: "dtype",
          type: "dtype",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "SparseSegmentMean",
      category: "sparse",
      inputs: [
        {
          start: 0,
          name: "data",
          type: "tensor"
        },
        {
          start: 1,
          name: "indices",
          type: "tensor"
        },
        {
          start: 2,
          name: "segmentIds",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "SparseSegmentSum",
      category: "sparse",
      inputs: [
        {
          start: 0,
          name: "data",
          type: "tensor"
        },
        {
          start: 1,
          name: "indices",
          type: "tensor"
        },
        {
          start: 2,
          name: "segmentIds",
          type: "tensor"
        }
      ]
    }
  ], Oq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: Dq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const Fq = [
    {
      tfOpName: "FFT",
      category: "spectral",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "IFFT",
      category: "spectral",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ]
    },
    {
      tfOpName: "RFFT",
      category: "spectral",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "fft_length",
          type: "number",
          notSupported: true
        }
      ]
    },
    {
      tfOpName: "IRFFT",
      category: "spectral",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "fft_length",
          type: "number",
          notSupported: true
        }
      ]
    }
  ], Lq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: Fq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const Pq = [
    {
      tfOpName: "StaticRegexReplace",
      category: "string",
      inputs: [
        {
          start: 0,
          name: "input",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "pattern",
          name: "pattern",
          type: "string"
        },
        {
          tfName: "rewrite",
          name: "rewrite",
          type: "string"
        },
        {
          tfName: "replace_global",
          name: "replaceGlobal",
          type: "bool"
        }
      ]
    },
    {
      tfOpName: "StringNGrams",
      category: "string",
      inputs: [
        {
          start: 0,
          name: "data",
          type: "tensor"
        },
        {
          start: 1,
          name: "dataSplits",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "separator",
          name: "separator",
          type: "string"
        },
        {
          tfName: "ngram_widths",
          name: "nGramWidths",
          type: "number[]"
        },
        {
          tfName: "left_pad",
          name: "leftPad",
          type: "string"
        },
        {
          tfName: "right_pad",
          name: "rightPad",
          type: "string"
        },
        {
          tfName: "pad_width",
          name: "padWidth",
          type: "number"
        },
        {
          tfName: "preserve_short_sequences",
          name: "preserveShortSequences",
          type: "bool"
        }
      ],
      outputs: [
        "ngrams",
        "ngrams_splits"
      ]
    },
    {
      tfOpName: "StringSplit",
      category: "string",
      inputs: [
        {
          start: 0,
          name: "input",
          type: "tensor"
        },
        {
          start: 1,
          name: "delimiter",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "skip_empty",
          name: "skipEmpty",
          type: "bool"
        }
      ],
      outputs: [
        "indices",
        "values",
        "shape"
      ]
    },
    {
      tfOpName: "StringToHashBucketFast",
      category: "string",
      inputs: [
        {
          start: 0,
          name: "input",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "num_buckets",
          name: "numBuckets",
          type: "number"
        }
      ]
    }
  ], zq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: Pq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const Mq = [
    {
      tfOpName: "Cast",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "SrcT",
          name: "sdtype",
          type: "dtype",
          notSupported: true
        },
        {
          tfName: "DstT",
          name: "dtype",
          type: "dtype"
        }
      ]
    },
    {
      tfOpName: "ExpandDims",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "axis",
          type: "number"
        }
      ]
    },
    {
      tfOpName: "MirrorPad",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "padding",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "mode",
          name: "mode",
          type: "string"
        }
      ]
    },
    {
      tfOpName: "Pad",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "padding",
          type: "number[]"
        }
      ],
      attrs: [
        {
          tfName: "constant_value",
          name: "constantValue",
          type: "number",
          defaultValue: 0
        }
      ]
    },
    {
      tfOpName: "PadV2",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "padding",
          type: "number[]"
        },
        {
          start: 2,
          name: "constantValue",
          type: "number",
          defaultValue: 0
        }
      ]
    },
    {
      tfOpName: "Reshape",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "shape",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "EnsureShape",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "shape",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "Squeeze",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "axis",
          tfDeprecatedName: "squeeze_dims",
          name: "axis",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "SpaceToBatchND",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "blockShape",
          type: "number[]"
        },
        {
          start: 2,
          name: "paddings",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "BatchToSpaceND",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "blockShape",
          type: "number[]"
        },
        {
          start: 2,
          name: "crops",
          type: "number[]"
        }
      ]
    },
    {
      tfOpName: "DepthToSpace",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        }
      ],
      attrs: [
        {
          tfName: "block_size",
          name: "blockSize",
          type: "number"
        },
        {
          tfName: "data_format",
          name: "dataFormat",
          type: "string"
        }
      ]
    },
    {
      tfOpName: "BroadcastTo",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "x",
          type: "tensor"
        },
        {
          start: 1,
          name: "shape",
          type: "number[]"
        }
      ],
      attrs: []
    },
    {
      tfOpName: "BroadcastArgs",
      category: "transformation",
      inputs: [
        {
          start: 0,
          name: "s0",
          type: "tensor"
        },
        {
          start: 1,
          name: "s1",
          type: "tensor"
        }
      ],
      attrs: []
    }
  ], Bq = Object.freeze(Object.defineProperty({
    __proto__: null,
    json: Mq
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  class lS {
    static get Instance() {
      return this._instance || (this._instance = new this());
    }
    constructor() {
      const e = [
        rq,
        iq,
        lq,
        uq,
        dq,
        fq,
        gq,
        bq,
        wq,
        Sq,
        Cq,
        Nq,
        Tq,
        Rq,
        _q,
        Oq,
        Lq,
        zq,
        Bq
      ], n = [].concat(...e.map((s) => s.json));
      this.opMappers = n.reduce((s, r) => (s[r.tfOpName] = r, s), {});
    }
    transformGraph(e, n = {}) {
      const s = e.node, r = [], o = [], i = [], a = s.reduce((m, g) => (m[g.name] = this.mapNode(g), g.op.startsWith("Placeholder") ? r.push(m[g.name]) : g.op === "Const" ? o.push(m[g.name]) : (g.input == null || g.input.length === 0) && i.push(m[g.name]), m), {});
      let l = [];
      const c = [];
      let u = {}, h = {};
      n != null && (u = this.mapSignatureEntries(n.inputs), h = this.mapSignatureEntries(n.outputs));
      const d = Object.keys(a);
      d.forEach((m) => {
        const g = a[m];
        g.inputNames.forEach((y, b) => {
          const [w, , x] = gr(y), S = a[w];
          if (S.outputs != null) {
            const I = S.outputs.indexOf(x);
            if (I !== -1) {
              const E = `${w}:${I}`;
              g.inputNames[b] = E;
            }
          }
          g.inputs.push(S), S.children.push(g);
        });
      }), Object.keys(h).length === 0 ? d.forEach((m) => {
        const g = a[m];
        g.children.length === 0 && c.push(g);
      }) : Object.keys(h).forEach((m) => {
        const [g] = gr(m), y = a[g];
        y != null && (y.signatureKey = h[m], c.push(y));
      }), Object.keys(u).length > 0 ? Object.keys(u).forEach((m) => {
        const [g] = gr(m), y = a[g];
        y && (y.signatureKey = u[m], l.push(y));
      }) : l = r;
      let p = {};
      e.library != null && e.library.function != null && (p = e.library.function.reduce((m, g) => (m[g.signature.name] = this.mapFunction(g), m), {}));
      const f = {
        nodes: a,
        inputs: l,
        outputs: c,
        weights: o,
        placeholders: r,
        signature: n,
        functions: p
      };
      return i.length > 0 && (f.initNodes = i), f;
    }
    mapSignatureEntries(e) {
      return Object.keys(e || {}).reduce((n, s) => (n[e[s].name] = s, n), {});
    }
    mapNode(e) {
      const n = CT(e.op) || this.opMappers[e.op] || {};
      e.attr == null && (e.attr = {});
      const s = {
        name: e.name,
        op: e.op,
        category: n.category,
        inputNames: (e.input || []).map((r) => r.startsWith("^") ? r.slice(1) : r),
        inputs: [],
        children: [],
        inputParams: {},
        attrParams: {},
        rawAttrs: e.attr,
        outputs: n.outputs
      };
      return n.inputs != null && (s.inputParams = n.inputs.reduce((r, o) => (r[o.name] = {
        type: o.type,
        inputIndexStart: o.start,
        inputIndexEnd: o.end
      }, r), {})), n.attrs != null && (s.attrParams = n.attrs.reduce((r, o) => {
        const i = o.type;
        let a;
        switch (o.type) {
          case "string":
            a = hy(e.attr, o.tfName, o.defaultValue), a === void 0 && o.tfDeprecatedName && (a = hy(e.attr, o.tfDeprecatedName, o.defaultValue));
            break;
          case "string[]":
            a = by(e.attr, o.tfName, o.defaultValue), a === void 0 && o.tfDeprecatedName && (a = by(e.attr, o.tfDeprecatedName, o.defaultValue));
            break;
          case "number":
            a = py(e.attr, o.tfName, o.defaultValue || 0), a === void 0 && o.tfDeprecatedName && (a = py(e.attr, o.tfDeprecatedName, o.defaultValue));
            break;
          case "number[]":
            a = yy(e.attr, o.tfName, o.defaultValue), a === void 0 && o.tfDeprecatedName && (a = yy(e.attr, o.tfDeprecatedName, o.defaultValue));
            break;
          case "bool":
            a = dy(e.attr, o.tfName, o.defaultValue), a === void 0 && o.tfDeprecatedName && (a = dy(e.attr, o.tfDeprecatedName, o.defaultValue));
            break;
          case "bool[]":
            a = wy(e.attr, o.tfName, o.defaultValue), a === void 0 && o.tfDeprecatedName && (a = wy(e.attr, o.tfDeprecatedName, o.defaultValue));
            break;
          case "shape":
            a = gy(e.attr, o.tfName, o.defaultValue), a === void 0 && o.tfDeprecatedName && (a = gy(e.attr, o.tfDeprecatedName, o.defaultValue));
            break;
          case "shape[]":
            a = xy(e.attr, o.tfName, o.defaultValue), a === void 0 && o.tfDeprecatedName && (a = xy(e.attr, o.tfDeprecatedName, o.defaultValue));
            break;
          case "dtype":
            a = fy(e.attr, o.tfName, o.defaultValue), a === void 0 && o.tfDeprecatedName && (a = fy(e.attr, o.tfDeprecatedName, o.defaultValue));
            break;
          case "dtype[]":
            a = my(e.attr, o.tfName, o.defaultValue), a === void 0 && o.tfDeprecatedName && (a = my(e.attr, o.tfDeprecatedName, o.defaultValue));
            break;
          case "func":
            a = cS(e.attr, o.tfName, o.defaultValue), a === void 0 && o.tfDeprecatedName && (a = cS(e.attr, o.tfDeprecatedName, o.defaultValue));
            break;
          case "tensor":
          case "tensors":
            break;
          default:
            throw new Error(`Unsupported param type: ${o.type} for op: ${e.op}`);
        }
        return r[o.name] = {
          value: a,
          type: i
        }, r;
      }, {})), s;
    }
    mapFunction(e) {
      const n = e.nodeDef, s = [], r = [];
      let o = {};
      n != null && (o = n.reduce((h, d) => (h[d.name] = this.mapNode(d), d.op === "Const" && r.push(h[d.name]), h), {}));
      const i = [], a = [];
      e.signature.inputArg.forEach((h) => {
        const [d] = gr(h.name), p = {
          name: d,
          op: "Placeholder",
          inputs: [],
          inputNames: [],
          category: "graph",
          inputParams: {},
          attrParams: {
            dtype: {
              value: T0(h.type),
              type: "dtype"
            }
          },
          children: []
        };
        p.signatureKey = h.name, i.push(p), o[d] = p;
      }), Object.keys(o).forEach((h) => {
        const d = o[h];
        d.inputNames.forEach((p, f) => {
          const [m, , g] = gr(p), y = o[m];
          if (y.outputs != null) {
            const b = y.outputs.indexOf(g);
            if (b !== -1) {
              const w = `${m}:${b}`;
              d.inputNames[f] = w;
            }
          }
          d.inputs.push(y), y.children.push(d);
        });
      });
      const c = e.ret;
      e.signature.outputArg.forEach((h) => {
        const [d, p] = gr(c[h.name]), f = o[d];
        f != null && (f.defaultOutput = p, a.push(f));
      });
      const u = this.mapArgsToSignature(e);
      return {
        nodes: o,
        inputs: i,
        outputs: a,
        weights: r,
        placeholders: s,
        signature: u
      };
    }
    mapArgsToSignature(e) {
      return {
        methodName: e.signature.name,
        inputs: e.signature.inputArg.reduce((n, s) => (n[s.name] = this.mapArgToTensorInfo(s), n), {}),
        outputs: e.signature.outputArg.reduce((n, s) => (n[s.name] = this.mapArgToTensorInfo(s, e.ret), n), {})
      };
    }
    mapArgToTensorInfo(e, n) {
      let s = e.name;
      return n != null && (s = n[s]), {
        name: s,
        dtype: e.type
      };
    }
  }
  function Vq(t) {
    const e = j().global;
    if (typeof e.atob < "u") return e.atob(t);
    if (typeof Buffer < "u") return new Buffer(t, "base64").toString();
    throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
  }
  function IT(t, e) {
    const n = Array.isArray(t) ? String.fromCharCode.apply(null, t) : Vq(t);
    return e ? n : n.toLowerCase();
  }
  function hy(t, e, n, s = false) {
    const r = t[e];
    return r != null ? IT(r.s, s) : n;
  }
  function dy(t, e, n) {
    const s = t[e];
    return s ? s.b : n;
  }
  function py(t, e, n) {
    const s = t[e] || {}, r = s.i != null ? s.i : s.f != null ? s.f : n;
    return typeof r == "number" ? r : parseInt(r, 10);
  }
  function T0(t) {
    switch (typeof t == "string" && (t = Mn[t]), t) {
      case Mn.DT_FLOAT:
      case Mn.DT_HALF:
        return "float32";
      case Mn.DT_INT32:
      case Mn.DT_INT64:
      case Mn.DT_INT8:
      case Mn.DT_UINT8:
        return "int32";
      case Mn.DT_BOOL:
        return "bool";
      case Mn.DT_DOUBLE:
        return "float32";
      case Mn.DT_STRING:
        return "string";
      case Mn.DT_COMPLEX64:
      case Mn.DT_COMPLEX128:
        return "complex64";
      default:
        return null;
    }
  }
  function cS(t, e, n) {
    const s = t[e];
    return s && s.func ? s.func.name : n;
  }
  function fy(t, e, n) {
    const s = t[e];
    return s && s.type ? T0(s.type) : n;
  }
  function my(t, e, n) {
    const s = t[e];
    return s && s.list && s.list.type ? s.list.type.map((r) => T0(r)) : n;
  }
  function NT(t) {
    if (!t.unknownRank) return t.dim != null ? t.dim.map((e) => typeof e.size == "number" ? e.size : parseInt(e.size, 10)) : [];
  }
  function gy(t, e, n) {
    const s = t[e];
    return s && s.shape ? NT(s.shape) : n;
  }
  function yy(t, e, n) {
    const s = t[e];
    return s ? ((s.list.f && s.list.f.length ? s.list.f : s.list.i) || []).map((r) => typeof r == "number" ? r : parseInt(r, 10)) : n;
  }
  function by(t, e, n, s = false) {
    const r = t[e];
    return r && r.list && r.list.s ? r.list.s.map((o) => IT(o, s)) : n;
  }
  function xy(t, e, n) {
    const s = t[e];
    return s && s.list && s.list.shape ? s.list.shape.map((r) => NT(r)) : n;
  }
  function wy(t, e, n) {
    const s = t[e];
    return s && s.list && s.list.b ? s.list.b : n;
  }
  class Wq {
    constructor(e, n, s) {
      this.node = e, this.tensorMap = n, this.context = s, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map((r) => this.getInput(r)), e.rawAttrs != null && (this.attrs = Object.keys(e.rawAttrs).reduce((r, o) => (r[o] = this.getAttr(o), r), {}));
    }
    getInput(e) {
      return Jt(e, this.tensorMap, this.context);
    }
    getAttr(e, n) {
      const s = this.node.rawAttrs[e];
      if (s.tensor != null) return Jt(e, this.tensorMap, this.context);
      if (s.i != null || s.f != null) return py(this.node.rawAttrs, e, n);
      if (s.s != null) return hy(this.node.rawAttrs, e, n);
      if (s.b != null) return dy(this.node.rawAttrs, e, n);
      if (s.shape != null) return gy(this.node.rawAttrs, e, n);
      if (s.type != null) return fy(this.node.rawAttrs, e, n);
      if (s.list != null) {
        if (s.list.i != null || s.list.f != null) return yy(this.node.rawAttrs, e, n);
        if (s.list.s != null) return by(this.node.rawAttrs, e, n);
        if (s.list.shape != null) return xy(this.node.rawAttrs, e, n);
        if (s.list.b != null) return wy(this.node.rawAttrs, e, n);
        if (s.list.type != null) return my(this.node.rawAttrs, e, n);
      }
      return n;
    }
  }
  const on = Object.freeze(Object.defineProperty({
    __proto__: null,
    OP_SCOPE_SUFFIX: ab,
    abs: kt,
    acos: mb,
    acosh: gb,
    add: ae,
    addN: pI,
    all: Ef,
    any: wc,
    argMax: ni,
    argMin: yb,
    asin: bb,
    asinh: xb,
    atan: wb,
    atan2: vb,
    atanh: Sb,
    avgPool: Wu,
    avgPool3d: Cb,
    basicLSTMCell: fI,
    batchNorm: il,
    batchNorm2d: Ib,
    batchNorm3d: Nb,
    batchNorm4d: kb,
    batchToSpaceND: Uu,
    bincount: Tb,
    bitwiseAnd: mI,
    booleanMaskAsync: QI,
    broadcastArgs: gI,
    broadcastTo: Ko,
    buffer: Me,
    cast: ge,
    ceil: Eb,
    clipByValue: Dn,
    clone: er,
    complex: Nr,
    concat: vt,
    concat1d: Rb,
    concat2d: Ab,
    concat3d: _b,
    concat4d: Db,
    conv1d: Rf,
    conv2d: kr,
    conv2dTranspose: Af,
    conv3d: Fb,
    conv3dTranspose: Lb,
    cos: Gu,
    cosh: _f,
    cosineWindow: tm,
    cumprod: $c,
    cumsum: Df,
    denseBincount: Rd,
    depthToSpace: Pb,
    depthwiseConv2d: al,
    diag: bI,
    dilation2d: zb,
    div: Ne,
    divNoNan: Mb,
    dot: Bb,
    dropout: fx,
    einsum: zo,
    elu: ll,
    enclosingPowerOfTwo: mx,
    ensureShape: xI,
    equal: Gn,
    erf: Of,
    euclideanNorm: Wb,
    exp: On,
    expandDims: Yt,
    expm1: Ub,
    eye: Ff,
    fft: sh,
    fill: wi,
    floor: ul,
    floorDiv: Tf,
    fused: lN,
    gather: hl,
    gatherND: sN,
    greater: wn,
    greaterEqual: Fr,
    ifft: ra,
    imag: Hu,
    image: ps,
    inTopKAsync: rN,
    irfft: Xf,
    isFinite: Gb,
    isInf: Hb,
    isNaN: jb,
    leakyRelu: ju,
    less: ea,
    lessEqual: $o,
    linalg: bx,
    linspace: SI,
    localResponseNormalization: qb,
    log: Hn,
    log1p: qu,
    logSigmoid: Kb,
    logSoftmax: Pf,
    logSumExp: Ku,
    logicalAnd: ys,
    logicalNot: Xu,
    logicalOr: zf,
    logicalXor: Xb,
    losses: mN,
    lowerBound: CI,
    matMul: Be,
    max: ss,
    maxPool: Yu,
    maxPool3d: Yb,
    maxPoolWithArgmax: II,
    maximum: ur,
    mean: mt,
    meshgrid: NI,
    min: Qi,
    minimum: co,
    mirrorPad: Zb,
    mod: Jb,
    moments: Zu,
    movingAverage: eN,
    mul: L,
    multiRNNCell: kI,
    multinomial: TI,
    neg: lt,
    norm: cl,
    notEqual: oi,
    oneHot: ta,
    ones: En,
    onesLike: jn,
    op: O,
    outerProduct: EI,
    pad: Lr,
    pad1d: RI,
    pad2d: AI,
    pad3d: _I,
    pad4d: DI,
    pool: Qb,
    pow: ar,
    prelu: Qu,
    print: fb,
    prod: ex,
    raggedGather: OI,
    raggedRange: FI,
    raggedTensorToTensor: LI,
    rand: PI,
    randomGamma: BI,
    randomNormal: Bf,
    randomStandardNormal: VI,
    randomUniform: Co,
    randomUniformInt: WI,
    range: ii,
    real: na,
    reciprocal: rx,
    relu: zs,
    relu6: Vf,
    reshape: P,
    reverse: rs,
    reverse1d: UI,
    reverse2d: GI,
    reverse3d: HI,
    reverse4d: jI,
    rfft: rh,
    round: Wf,
    rsqrt: Uf,
    scalar: Re,
    scatterND: tN,
    searchSorted: Mf,
    selu: Gf,
    separableConv2d: Hf,
    setdiff1dAsync: qI,
    sigmoid: Ts,
    sign: ox,
    signal: fN,
    sin: jf,
    sinh: qf,
    slice: je,
    slice1d: eh,
    slice2d: Kf,
    slice3d: th,
    slice4d: sa,
    softmax: nh,
    softplus: vi,
    spaceToBatchND: Ju,
    sparse: gN,
    sparseToDense: nN,
    spectral: pN,
    split: Rn,
    sqrt: Gt,
    square: st,
    squaredDifference: Yf,
    squeeze: Io,
    stack: yn,
    step: Si,
    stridedSlice: ix,
    string: yN,
    sub: ve,
    sum: $e,
    tan: ax,
    tanh: lo,
    tensor: Un,
    tensor1d: en,
    tensor2d: eo,
    tensor3d: lx,
    tensor4d: KI,
    tensor5d: XI,
    tensor6d: YI,
    tensorScatterUpdate: ZI,
    tile: Qn,
    topk: ux,
    transpose: He,
    truncatedNormal: Jf,
    unique: hx,
    unsortedSegmentSum: Qf,
    unstack: os,
    upperBound: JI,
    variable: dx,
    where: Wt,
    whereAsync: px,
    zeros: Tt,
    zerosLike: qe
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const Uq = (t, e, n, s = on) => {
    switch (t.op) {
      case "BiasAdd":
      case "AddV2":
      case "Add":
        return [
          s.add(v("a", t, e, n), v("b", t, e, n))
        ];
      case "AddN":
        return [
          s.addN(v("tensors", t, e, n))
        ];
      case "FloorMod":
      case "Mod":
        return [
          s.mod(v("a", t, e, n), v("b", t, e, n))
        ];
      case "Mul":
        return [
          s.mul(v("a", t, e, n), v("b", t, e, n))
        ];
      case "RealDiv":
      case "Div":
        return [
          s.div(v("a", t, e, n), v("b", t, e, n))
        ];
      case "DivNoNan":
        return [
          s.divNoNan(v("a", t, e, n), v("b", t, e, n))
        ];
      case "FloorDiv":
        return [
          s.floorDiv(v("a", t, e, n), v("b", t, e, n))
        ];
      case "Sub":
        return [
          s.sub(v("a", t, e, n), v("b", t, e, n))
        ];
      case "Minimum":
        return [
          s.minimum(v("a", t, e, n), v("b", t, e, n))
        ];
      case "Maximum":
        return [
          s.maximum(v("a", t, e, n), v("b", t, e, n))
        ];
      case "Pow":
        return [
          s.pow(v("a", t, e, n), v("b", t, e, n))
        ];
      case "SquaredDifference":
        return [
          s.squaredDifference(v("a", t, e, n), v("b", t, e, n))
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const Gq = (t, e, n, s = on) => {
    switch (t.op) {
      case "Abs":
      case "ComplexAbs":
        return [
          s.abs(v("x", t, e, n))
        ];
      case "Acos":
        return [
          s.acos(v("x", t, e, n))
        ];
      case "Acosh":
        return [
          s.acosh(v("x", t, e, n))
        ];
      case "Asin":
        return [
          s.asin(v("x", t, e, n))
        ];
      case "Asinh":
        return [
          s.asinh(v("x", t, e, n))
        ];
      case "Atan":
        return [
          s.atan(v("x", t, e, n))
        ];
      case "Atan2":
        return [
          s.atan2(v("x", t, e, n), v("y", t, e, n))
        ];
      case "Atanh":
        return [
          s.atanh(v("x", t, e, n))
        ];
      case "Ceil":
        return [
          s.ceil(v("x", t, e, n))
        ];
      case "Complex":
        return [
          s.complex(v("real", t, e, n), v("imag", t, e, n))
        ];
      case "Cos":
        return [
          s.cos(v("x", t, e, n))
        ];
      case "Cosh":
        return [
          s.cosh(v("x", t, e, n))
        ];
      case "Elu":
        return [
          s.elu(v("x", t, e, n))
        ];
      case "Erf":
        return [
          s.erf(v("x", t, e, n))
        ];
      case "Exp":
        return [
          s.exp(v("x", t, e, n))
        ];
      case "Expm1":
        return [
          s.expm1(v("x", t, e, n))
        ];
      case "Floor":
        return [
          s.floor(v("x", t, e, n))
        ];
      case "Log":
        return [
          s.log(v("x", t, e, n))
        ];
      case "Log1p":
        return [
          s.log1p(v("x", t, e, n))
        ];
      case "Imag":
        return [
          s.imag(v("x", t, e, n))
        ];
      case "Neg":
        return [
          s.neg(v("x", t, e, n))
        ];
      case "Reciprocal":
        return [
          s.reciprocal(v("x", t, e, n))
        ];
      case "Real":
        return [
          s.real(v("x", t, e, n))
        ];
      case "Relu":
        return [
          s.relu(v("x", t, e, n))
        ];
      case "Round":
        return [
          s.round(v("x", t, e, n))
        ];
      case "Selu":
        return [
          s.selu(v("x", t, e, n))
        ];
      case "Sigmoid":
        return [
          s.sigmoid(v("x", t, e, n))
        ];
      case "Sin":
        return [
          s.sin(v("x", t, e, n))
        ];
      case "Sign":
        return [
          s.sign(v("x", t, e, n))
        ];
      case "Sinh":
        return [
          s.sinh(v("x", t, e, n))
        ];
      case "Softplus":
        return [
          s.softplus(v("x", t, e, n))
        ];
      case "Sqrt":
        return [
          s.sqrt(v("x", t, e, n))
        ];
      case "Square":
        return [
          s.square(v("x", t, e, n))
        ];
      case "Tanh":
        return [
          s.tanh(v("x", t, e, n))
        ];
      case "Tan":
        return [
          s.tan(v("x", t, e, n))
        ];
      case "ClipByValue":
        return [
          s.clipByValue(v("x", t, e, n), v("clipValueMin", t, e, n), v("clipValueMax", t, e, n))
        ];
      case "Relu6":
        return [
          s.relu6(v("x", t, e, n))
        ];
      case "Rsqrt":
        return [
          s.rsqrt(Jt(t.inputNames[0], e, n))
        ];
      case "LeakyRelu":
        return [
          s.leakyRelu(v("x", t, e, n), v("alpha", t, e, n))
        ];
      case "Prelu":
        return [
          s.prelu(v("x", t, e, n), v("alpha", t, e, n))
        ];
      case "IsNan":
        return [
          s.isNaN(Jt(t.inputNames[0], e, n))
        ];
      case "IsInf":
        return [
          s.isInf(Jt(t.inputNames[0], e, n))
        ];
      case "IsFinite":
        return [
          s.isFinite(Jt(t.inputNames[0], e, n))
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  function us(t, e, n = "") {
    if (!(typeof t == "number" || typeof e == "number")) {
      C(t.length === e.length, () => n + ` Shapes ${t} and ${e} must match`);
      for (let s = 0; s < t.length; s++) {
        const r = t[s], o = e[s];
        C(r < 0 || o < 0 || r === o, () => n + ` Shapes ${t} and ${e} must match`);
      }
    }
  }
  function uS(t) {
    return !(typeof t == "number" || t.some((e) => e < 0));
  }
  function Fl(t, e, n) {
    let s = vy(t, n);
    const r = !uS(s);
    if (r && e.length === 0) throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);
    if (r && e.forEach((o) => {
      s = vy(o.shape, s);
    }), !uS(s)) throw new Error(`Non-fully-defined elementShape: ${s}`);
    return s;
  }
  function vy(t, e) {
    if (typeof t == "number") return e;
    if (typeof e == "number") return t;
    if (t.length !== e.length) throw new Error(`Incompatible ranks during merge: ${t} vs. ${e}`);
    const n = [];
    for (let s = 0; s < t.length; ++s) {
      const r = t[s], o = e[s];
      if (r >= 0 && o >= 0 && r !== o) throw new Error(`Incompatible shape during merge: ${t} vs. ${e}`);
      n[s] = r >= 0 ? r : o;
    }
    return n;
  }
  class Hq {
    constructor(e, n, s, r, o, i, a) {
      this.name = e, this.dtype = n, this.maxSize = s, this.elementShape = r, this.identicalElementShapes = o, this.dynamicSize = i, this.clearAfterRead = a, this.tensors = [], this.closed_ = false, this.idTensor = Re(0), Dt(this.idTensor);
    }
    get id() {
      return this.idTensor.id;
    }
    get closed() {
      return this.closed_;
    }
    clearAndClose(e) {
      this.tensors.forEach((n) => {
        (e == null || !e.has(n.tensor.id)) && n.tensor.dispose();
      }), this.tensors = [], this.closed_ = true, this.idTensor.dispose();
    }
    size() {
      return this.tensors.length;
    }
    read(e) {
      if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`);
      if (e < 0 || e >= this.size()) throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);
      const n = this.tensors[e];
      if (n.cleared) throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);
      return this.clearAfterRead && (n.cleared = true), n.read = true, n.tensor;
    }
    readMany(e) {
      return e.map((n) => this.read(n));
    }
    write(e, n) {
      if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`);
      if (e < 0 || !this.dynamicSize && e >= this.maxSize) throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);
      const s = this.tensors[e] || {};
      if (n.dtype !== this.dtype) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${n.dtype}, but TensorArray dtype is ${this.dtype}.`);
      if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = n.shape), us(this.elementShape, n.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${e}.`), s.read) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);
      if (s.written) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);
      s.tensor = n, Dt(n), s.written = true, this.tensors[e] = s;
    }
    writeMany(e, n) {
      if (e.length !== n.length) throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${n.length}.`);
      e.forEach((s, r) => this.write(s, n[r]));
    }
    gather(e, n) {
      if (n && n !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${n}`);
      if (e) e = e.slice(0, this.size());
      else {
        e = [];
        for (let r = 0; r < this.size(); r++) e.push(r);
      }
      if (e.length === 0) return Un([], [
        0
      ].concat(this.elementShape));
      const s = this.readMany(e);
      return us(this.elementShape, s[0].shape, "TensorArray shape mismatch: "), yn(s, 0);
    }
    concat(e) {
      if (e && e !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);
      if (this.size() === 0) return Un([], [
        0
      ].concat(this.elementShape));
      const n = [];
      for (let r = 0; r < this.size(); r++) n.push(r);
      const s = this.readMany(n);
      return us(this.elementShape, s[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`), vt(s, 0);
    }
    scatter(e, n) {
      if (n.dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${n.dtype}`);
      if (e.length !== n.shape[0]) throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${n.shape[0]}`);
      const s = Math.max(...e);
      if (!this.dynamicSize && s >= this.maxSize) throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);
      this.writeMany(e, os(n, 0));
    }
    split(e, n) {
      if (n.dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${n.dtype}`);
      let s = 0;
      const r = e.map((l) => (s += l, s));
      if (s !== n.shape[0]) throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${n.shape}`);
      if (!this.dynamicSize && e.length !== this.maxSize) throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);
      const o = s === 0 ? 0 : n.size / s, i = [];
      q(() => {
        n = P(n, [
          1,
          s,
          o
        ]);
        for (let l = 0; l < e.length; ++l) {
          const u = [
            0,
            l === 0 ? 0 : r[l - 1],
            0
          ], h = [
            1,
            e[l],
            o
          ];
          i[l] = P(je(n, u, h), this.elementShape);
        }
        return i;
      });
      const a = [];
      for (let l = 0; l < e.length; l++) a[l] = l;
      this.writeMany(a, i);
    }
  }
  class ui {
    get id() {
      return this.idTensor.id;
    }
    constructor(e, n, s, r = -1) {
      this.tensors = e, this.elementShape = n, this.elementDtype = s, e == null ? void 0 : e.forEach((o) => {
        if (s !== o.dtype) throw new Error(`Invalid data types; op elements ${s}, but list elements ${o.dtype}`);
        us(n, o.shape, "TensorList shape mismatch: "), Dt(o);
      }), this.idTensor = Re(0), this.maxNumElements = r, Dt(this.idTensor);
    }
    copy() {
      return new ui([
        ...this.tensors
      ], this.elementShape, this.elementDtype);
    }
    clearAndClose(e) {
      this.tensors.forEach((n) => {
        (e == null || !e.has(n.id)) && n.dispose();
      }), this.tensors.length = 0, this.idTensor.dispose();
    }
    size() {
      return this.tensors.length;
    }
    stack(e, n, s = -1) {
      if (n !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);
      if (s !== -1 && this.tensors.length !== s) throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);
      us(e, this.elementShape, "TensorList shape mismatch: ");
      const r = Fl(this.elementShape, this.tensors, e);
      return q(() => {
        const o = this.tensors.map((i) => P(i, r));
        return yn(o, 0);
      });
    }
    popBack(e, n) {
      if (n !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);
      if (this.size() === 0) throw new Error("Trying to pop from an empty list.");
      const s = Fl(this.elementShape, this.tensors, e), r = this.tensors.pop();
      return r.kept = false, us(r.shape, e, "TensorList shape mismatch: "), P(r, s);
    }
    pushBack(e) {
      if (e.dtype !== this.elementDtype) throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);
      if (us(e.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size()) throw new Error("Trying to push element into a full list.");
      Dt(e), this.tensors.push(e);
    }
    resize(e) {
      if (e < 0) throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);
      if (this.maxNumElements !== -1 && e > this.maxNumElements) throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);
      const n = new ui([], this.elementShape, this.elementDtype, this.maxNumElements);
      n.tensors.length = e;
      for (let s = 0; s < Math.min(this.tensors.length, e); ++s) n.tensors[s] = this.tensors[s];
      return n;
    }
    getItem(e, n, s) {
      if (s !== this.elementDtype) throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);
      if (e < 0 || e > this.tensors.length) throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);
      if (this.tensors[e] == null) throw new Error(`element at index ${e} is null.`);
      us(this.tensors[e].shape, n, "TensorList shape mismatch: ");
      const r = Fl(this.elementShape, this.tensors, n);
      return P(this.tensors[e], r);
    }
    setItem(e, n) {
      if (n.dtype !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${this.elementDtype}`);
      if (e < 0 || this.maxNumElements !== -1 && e >= this.maxNumElements) throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);
      us(this.elementShape, n.shape, "TensorList shape mismatch: "), Dt(n), this.tensors[e] != null && (this.tensors[e].kept = false), this.tensors[e] = n;
    }
    gather(e, n, s) {
      if (n !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);
      us(this.elementShape, s, "TensorList shape mismatch: "), e = e.slice(0, this.size());
      const r = Fl(this.elementShape, this.tensors, s);
      return e.length === 0 ? Un([], [
        0
      ].concat(r)) : q(() => {
        const o = e.map((i) => P(this.tensors[i], r));
        return yn(o, 0);
      });
    }
    concat(e, n) {
      if (e && e !== this.elementDtype) throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);
      us(this.elementShape, n, "TensorList shape mismatch: ");
      const s = Fl(this.elementShape, this.tensors, n);
      return this.size() === 0 ? Un([], [
        0
      ].concat(s)) : q(() => {
        const r = this.tensors.map((o) => P(o, s));
        return vt(r, 0);
      });
    }
  }
  function jq(t, e, n) {
    const s = t.dtype;
    if (t.shape.length < 1) throw new Error(`Tensor must be at least a vector, but saw shape: ${t.shape}`);
    if (t.dtype !== n) throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);
    const r = t.shape.slice(1);
    us(r, e, "TensorList shape mismatch: ");
    const o = os(t);
    return new ui(o, e, s);
  }
  function qq(t, e, n, s) {
    return new ui([], t, e, s);
  }
  function Kq(t, e, n, s) {
    if (e.length !== t.shape[0]) throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);
    const r = Math.max(...e);
    if (s != null && s !== -1 && r >= s) throw new Error(`Max index must be < array size (${r}  vs. ${s})`);
    const o = new ui([], n, t.dtype, s), i = os(t, 0);
    return e.forEach((a, l) => {
      o.setItem(a, i[l]);
    }), o;
  }
  function Xq(t, e, n) {
    let s = 0;
    const r = e.map((u) => (s += u, s));
    if (s !== t.shape[0]) throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${t.shape}`);
    const o = t.shape.slice(1), i = vy(o, n), a = s === 0 ? 0 : t.size / s, l = q(() => {
      const u = [];
      t = P(t, [
        1,
        s,
        a
      ]);
      for (let h = 0; h < e.length; ++h) {
        const p = [
          0,
          h === 0 ? 0 : r[h - 1],
          0
        ], f = [
          1,
          e[h],
          a
        ];
        u[h] = P(je(t, p, f), i);
      }
      return t.dispose(), u;
    }), c = new ui([], n, t.dtype, e.length);
    for (let u = 0; u < l.length; u++) c.setItem(u, l[u]);
    return c;
  }
  const Yq = async (t, e, n) => {
    switch (t.op) {
      case "If":
      case "StatelessIf": {
        const s = v("thenBranch", t, e, n), r = v("elseBranch", t, e, n), o = v("cond", t, e, n), i = v("args", t, e, n);
        return (await o.data())[0] ? n.functionMap[s].executeFunctionAsync(i, n.tensorArrayMap, n.tensorListMap) : n.functionMap[r].executeFunctionAsync(i, n.tensorArrayMap, n.tensorListMap);
      }
      case "While":
      case "StatelessWhile": {
        const s = v("body", t, e, n), r = v("cond", t, e, n), o = v("args", t, e, n), i = await n.functionMap[r].executeFunctionAsync(o, n.tensorArrayMap, n.tensorListMap), a = o.map((u) => u.id);
        let l = await i[0].data();
        i.forEach((u) => {
          !u.kept && a.indexOf(u.id) === -1 && u.dispose();
        });
        let c = o;
        for (; l[0]; ) {
          const u = c;
          c = await n.functionMap[s].executeFunctionAsync(c, n.tensorArrayMap, n.tensorListMap);
          const h = c.map((p) => p.id);
          u.forEach((p) => {
            !p.kept && a.indexOf(p.id) === -1 && h.indexOf(p.id) === -1 && p.dispose();
          });
          const d = await n.functionMap[r].executeFunctionAsync(c, n.tensorArrayMap, n.tensorListMap);
          l = await d[0].data(), d.forEach((p) => {
            !p.kept && a.indexOf(p.id) === -1 && h.indexOf(p.id) === -1 && p.dispose();
          });
        }
        return c;
      }
      case "LoopCond": {
        const s = v("pred", t, e, n);
        return [
          yr(s)
        ];
      }
      case "Switch": {
        const s = v("pred", t, e, n);
        let r = v("data", t, e, n);
        return r.kept || (r = yr(r)), (await s.data())[0] ? [
          void 0,
          r
        ] : [
          r,
          void 0
        ];
      }
      case "Merge": {
        const s = t.inputNames.find((r) => Jt(r, e, n) !== void 0);
        if (s) {
          const r = Jt(s, e, n);
          return [
            yr(r)
          ];
        }
        return;
      }
      case "Enter": {
        const s = v("frameName", t, e, n), r = v("tensor", t, e, n);
        return n.enterFrame(s), [
          yr(r)
        ];
      }
      case "Exit": {
        const s = v("tensor", t, e, n);
        return n.exitFrame(), [
          yr(s)
        ];
      }
      case "NextIteration": {
        const s = v("tensor", t, e, n);
        return n.nextIteration(), [
          yr(s)
        ];
      }
      case "TensorArrayV3": {
        const s = v("size", t, e, n), r = v("dtype", t, e, n), o = v("elementShape", t, e, n), i = v("dynamicSize", t, e, n), a = v("clearAfterRead", t, e, n), l = v("identicalElementShapes", t, e, n), c = v("name", t, e, n), u = new Hq(c, r, s, o, l, i, a);
        return n.addTensorArray(u), [
          u.idTensor,
          Re(1)
        ];
      }
      case "TensorArrayWriteV3": {
        const s = v("tensorArrayId", t, e, n), r = v("index", t, e, n), o = v("tensor", t, e, n), i = n.getTensorArray(s.id);
        return i.write(r, o), [
          i.idTensor
        ];
      }
      case "TensorArrayReadV3": {
        const s = v("tensorArrayId", t, e, n), r = v("index", t, e, n);
        return [
          n.getTensorArray(s.id).read(r)
        ];
      }
      case "TensorArrayGatherV3": {
        const s = v("tensorArrayId", t, e, n), r = v("indices", t, e, n), o = v("dtype", t, e, n);
        return [
          n.getTensorArray(s.id).gather(r, o)
        ];
      }
      case "TensorArrayScatterV3": {
        const s = v("tensorArrayId", t, e, n), r = v("indices", t, e, n), o = v("tensor", t, e, n), i = n.getTensorArray(s.id);
        return i.scatter(r, o), [
          i.idTensor
        ];
      }
      case "TensorArrayConcatV3": {
        const s = v("tensorArrayId", t, e, n), r = n.getTensorArray(s.id), o = v("dtype", t, e, n);
        return [
          r.concat(o)
        ];
      }
      case "TensorArraySplitV3": {
        const s = v("tensorArrayId", t, e, n), r = v("tensor", t, e, n), o = v("lengths", t, e, n), i = n.getTensorArray(s.id);
        return i.split(o, r), [
          i.idTensor
        ];
      }
      case "TensorArraySizeV3": {
        const s = v("tensorArrayId", t, e, n), r = n.getTensorArray(s.id);
        return [
          Re(r.size(), "int32")
        ];
      }
      case "TensorArrayCloseV3": {
        const s = v("tensorArrayId", t, e, n), r = n.getTensorArray(s.id);
        return r.clearAndClose(), [
          r.idTensor
        ];
      }
      case "TensorListSetItem": {
        const s = v("tensorListId", t, e, n), r = v("index", t, e, n), o = v("tensor", t, e, n), i = n.getTensorList(s.id);
        return i.setItem(r, o), [
          i.idTensor
        ];
      }
      case "TensorListGetItem": {
        const s = v("tensorListId", t, e, n), r = v("index", t, e, n), o = v("elementShape", t, e, n), i = v("elementDType", t, e, n);
        return [
          n.getTensorList(s.id).getItem(r, o, i)
        ];
      }
      case "TensorListScatterV2":
      case "TensorListScatter": {
        const s = v("indices", t, e, n), r = v("tensor", t, e, n), o = v("elementShape", t, e, n), i = v("numElements", t, e, n), a = Kq(r, s, o, i);
        return n.addTensorList(a), [
          a.idTensor
        ];
      }
      case "TensorListReserve":
      case "EmptyTensorList": {
        const s = v("elementShape", t, e, n), r = v("elementDType", t, e, n);
        let o;
        t.op === "TensorListReserve" ? o = "numElements" : o = "maxNumElements";
        const i = v(o, t, e, n), a = t.op === "TensorListReserve" ? -1 : i, l = qq(s, r, i, a);
        return n.addTensorList(l), [
          l.idTensor
        ];
      }
      case "TensorListGather": {
        const s = v("tensorListId", t, e, n), r = v("indices", t, e, n), o = v("elementShape", t, e, n), i = v("elementDType", t, e, n);
        return [
          n.getTensorList(s.id).gather(r, i, o)
        ];
      }
      case "TensorListStack": {
        const s = v("tensorListId", t, e, n), r = v("elementShape", t, e, n), o = v("elementDType", t, e, n), i = v("numElements", t, e, n);
        return [
          n.getTensorList(s.id).stack(r, o, i)
        ];
      }
      case "TensorListFromTensor": {
        const s = v("tensor", t, e, n), r = v("elementShape", t, e, n), o = v("elementDType", t, e, n), i = jq(s, r, o);
        return n.addTensorList(i), [
          i.idTensor
        ];
      }
      case "TensorListConcat":
      case "TensorListConcatV2": {
        const s = v("tensorListId", t, e, n), r = n.getTensorList(s.id), o = v("dtype", t, e, n), i = v("elementShape", t, e, n);
        return [
          r.concat(o, i)
        ];
      }
      case "TensorListPushBack": {
        const s = v("tensorListId", t, e, n), r = v("tensor", t, e, n), o = n.getTensorList(s.id);
        return o.pushBack(r), [
          o.idTensor
        ];
      }
      case "TensorListPopBack": {
        const s = v("tensorListId", t, e, n), r = v("elementShape", t, e, n), o = v("elementDType", t, e, n);
        return [
          n.getTensorList(s.id).popBack(r, o)
        ];
      }
      case "TensorListSplit": {
        const s = v("tensor", t, e, n), r = v("elementShape", t, e, n), o = v("lengths", t, e, n), i = Xq(s, o, r);
        return n.addTensorList(i), [
          i.idTensor
        ];
      }
      case "TensorListLength": {
        const s = v("tensorListId", t, e, n), r = n.getTensorList(s.id);
        return [
          Re(r.size(), "int32")
        ];
      }
      case "TensorListResize": {
        const s = v("tensorListId", t, e, n), r = v("size", t, e, n), i = n.getTensorList(s.id).resize(r);
        return n.addTensorList(i), [
          i.idTensor
        ];
      }
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  function hS(t, e, n) {
    const [s, r] = v("fusedOps", t, e, n), o = s === "biasadd", i = !o, a = r === "prelu", l = s === "fusedbatchnorm", c = v("numArgs", t, e, n);
    if (o) {
      if (a && c !== 2) throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
      if (!a && o && c !== 1) throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
    }
    if (l) throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");
    const u = v("strides", t, e, n), h = rd(t, e, n), d = v("dataFormat", t, e, n).toUpperCase(), p = v("dilations", t, e, n);
    let [f, m] = v("args", t, e, n);
    i && (m = f, f = void 0);
    const g = v("leakyreluAlpha", t, e, n);
    return {
      stride: u,
      pad: h,
      dataFormat: d,
      dilations: p,
      biasArg: f,
      preluArg: m,
      activationFunc: r,
      leakyreluAlpha: g
    };
  }
  const Zq = (t, e, n, s = on) => {
    switch (t.op) {
      case "Conv1D": {
        const r = v("stride", t, e, n), o = v("pad", t, e, n), i = v("dataFormat", t, e, n).toUpperCase(), a = v("dilation", t, e, n);
        return [
          s.conv1d(v("x", t, e, n), v("filter", t, e, n), r, o, i, a)
        ];
      }
      case "Conv2D": {
        const r = v("strides", t, e, n), o = rd(t, e, n), i = v("dataFormat", t, e, n).toUpperCase(), a = v("dilations", t, e, n);
        return [
          s.conv2d(v("x", t, e, n), v("filter", t, e, n), [
            r[1],
            r[2]
          ], o, i, [
            a[1],
            a[2]
          ])
        ];
      }
      case "_FusedConv2D": {
        const { stride: r, pad: o, dataFormat: i, dilations: a, biasArg: l, preluArg: c, activationFunc: u, leakyreluAlpha: h } = hS(t, e, n);
        return [
          s.fused.conv2d({
            x: v("x", t, e, n),
            filter: v("filter", t, e, n),
            strides: [
              r[1],
              r[2]
            ],
            pad: o,
            dataFormat: i,
            dilations: [
              a[1],
              a[2]
            ],
            bias: l,
            activation: u,
            preluActivationWeights: c,
            leakyreluAlpha: h
          })
        ];
      }
      case "FusedDepthwiseConv2dNative": {
        const { stride: r, pad: o, dataFormat: i, dilations: a, biasArg: l, preluArg: c, activationFunc: u, leakyreluAlpha: h } = hS(t, e, n);
        return [
          s.fused.depthwiseConv2d({
            x: v("x", t, e, n),
            filter: v("filter", t, e, n),
            strides: [
              r[1],
              r[2]
            ],
            pad: o,
            dataFormat: i,
            dilations: [
              a[1],
              a[2]
            ],
            bias: l,
            activation: u,
            preluActivationWeights: c,
            leakyreluAlpha: h
          })
        ];
      }
      case "Conv2DBackpropInput":
      case "Conv2dTranspose": {
        const r = v("outputShape", t, e, n), o = v("strides", t, e, n), i = rd(t, e, n);
        return [
          s.conv2dTranspose(v("x", t, e, n), v("filter", t, e, n), r, [
            o[1],
            o[2]
          ], i)
        ];
      }
      case "DepthwiseConv2dNative":
      case "DepthwiseConv2d": {
        const r = v("strides", t, e, n), o = rd(t, e, n), i = v("dilations", t, e, n), a = v("dataFormat", t, e, n).toUpperCase();
        return [
          s.depthwiseConv2d(v("input", t, e, n), v("filter", t, e, n), [
            r[1],
            r[2]
          ], o, a, [
            i[1],
            i[2]
          ])
        ];
      }
      case "Conv3D": {
        const r = v("strides", t, e, n), o = v("pad", t, e, n), i = v("dataFormat", t, e, n).toUpperCase(), a = v("dilations", t, e, n);
        return [
          s.conv3d(v("x", t, e, n), v("filter", t, e, n), [
            r[1],
            r[2],
            r[3]
          ], o, i, [
            a[1],
            a[2],
            a[3]
          ])
        ];
      }
      case "AvgPool": {
        const r = v("strides", t, e, n), o = v("pad", t, e, n), i = v("kernelSize", t, e, n);
        return [
          s.avgPool(v("x", t, e, n), [
            i[1],
            i[2]
          ], [
            r[1],
            r[2]
          ], o)
        ];
      }
      case "MaxPool": {
        const r = v("strides", t, e, n), o = v("pad", t, e, n), i = v("kernelSize", t, e, n);
        return [
          s.maxPool(v("x", t, e, n), [
            i[1],
            i[2]
          ], [
            r[1],
            r[2]
          ], o)
        ];
      }
      case "MaxPoolWithArgmax": {
        const r = v("strides", t, e, n), o = v("pad", t, e, n), i = v("kernelSize", t, e, n), a = v("includeBatchInIndex", t, e, n), { result: l, indexes: c } = s.maxPoolWithArgmax(v("x", t, e, n), [
          i[1],
          i[2]
        ], [
          r[1],
          r[2]
        ], o, a);
        return [
          l,
          c
        ];
      }
      case "AvgPool3D": {
        const r = v("strides", t, e, n), o = v("pad", t, e, n), i = v("kernelSize", t, e, n);
        return [
          s.avgPool3d(v("x", t, e, n), [
            i[1],
            i[2],
            i[3]
          ], [
            r[1],
            r[2],
            r[3]
          ], o)
        ];
      }
      case "MaxPool3D": {
        const r = v("strides", t, e, n), o = v("pad", t, e, n), i = v("kernelSize", t, e, n);
        return [
          s.maxPool3d(v("x", t, e, n), [
            i[1],
            i[2],
            i[3]
          ], [
            r[1],
            r[2],
            r[3]
          ], o)
        ];
      }
      case "Dilation2D": {
        const r = v("strides", t, e, n), o = v("pad", t, e, n), i = v("dilations", t, e, n), a = r[1], l = r[2], c = i[1], u = i[2];
        return [
          s.dilation2d(v("x", t, e, n), v("filter", t, e, n), [
            a,
            l
          ], o, [
            c,
            u
          ], "NHWC")
        ];
      }
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const Jq = (t, e, n, s = on) => {
    switch (t.op) {
      case "Fill": {
        const r = v("shape", t, e, n), o = v("dtype", t, e, n), i = v("value", t, e, n);
        return [
          s.fill(r, i, o)
        ];
      }
      case "LinSpace": {
        const r = v("start", t, e, n), o = v("stop", t, e, n), i = v("num", t, e, n);
        return [
          s.linspace(r, o, i)
        ];
      }
      case "Multinomial": {
        const r = v("logits", t, e, n), o = v("numSamples", t, e, n), i = v("seed", t, e, n);
        return [
          s.multinomial(r, o, i)
        ];
      }
      case "OneHot": {
        const r = v("indices", t, e, n), o = v("depth", t, e, n), i = v("onValue", t, e, n), a = v("offValue", t, e, n), l = v("dtype", t, e, n);
        return [
          s.oneHot(r, o, i, a, l)
        ];
      }
      case "Ones":
        return [
          s.ones(v("shape", t, e, n), v("dtype", t, e, n))
        ];
      case "OnesLike":
        return [
          s.onesLike(v("x", t, e, n))
        ];
      case "RandomStandardNormal":
        return [
          s.randomStandardNormal(v("shape", t, e, n), v("dtype", t, e, n), v("seed", t, e, n))
        ];
      case "RandomUniform":
        return [
          s.randomUniform(v("shape", t, e, n), v("minval", t, e, n), v("maxval", t, e, n), v("dtype", t, e, n))
        ];
      case "RandomUniformInt":
        return [
          s.randomUniformInt(v("shape", t, e, n), v("minval", t, e, n), v("maxval", t, e, n), v("seed", t, e, n))
        ];
      case "Range": {
        const r = v("start", t, e, n), o = v("stop", t, e, n), i = v("step", t, e, n);
        return [
          s.range(r, o, i, v("dtype", t, e, n))
        ];
      }
      case "TruncatedNormal": {
        const r = v("shape", t, e, n), o = v("mean", t, e, n), i = v("stdDev", t, e, n), a = v("seed", t, e, n);
        return [
          s.truncatedNormal(r, o, i, v("dtype", t, e, n), a)
        ];
      }
      case "Zeros":
        return [
          s.zeros(v("shape", t, e, n), v("dtype", t, e, n))
        ];
      case "ZerosLike":
        return [
          s.zerosLike(v("x", t, e, n))
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  function mg(t, e, n) {
    const s = v("boxes", t, e, n), r = v("scores", t, e, n), o = v("maxOutputSize", t, e, n), i = v("iouThreshold", t, e, n), a = v("scoreThreshold", t, e, n), l = v("softNmsSigma", t, e, n);
    return {
      boxes: s,
      scores: r,
      maxOutputSize: o,
      iouThreshold: i,
      scoreThreshold: a,
      softNmsSigma: l
    };
  }
  const Qq = async (t, e, n, s, r = on) => {
    switch (t.op) {
      case "NonMaxSuppressionV5": {
        const { boxes: o, scores: i, maxOutputSize: a, iouThreshold: l, scoreThreshold: c, softNmsSigma: u } = mg(t, e, n), h = await r.image.nonMaxSuppressionWithScoreAsync(o, i, a, l, c, u);
        return [
          h.selectedIndices,
          h.selectedScores
        ];
      }
      case "NonMaxSuppressionV4": {
        const { boxes: o, scores: i, maxOutputSize: a, iouThreshold: l, scoreThreshold: c } = mg(t, e, n), u = v("padToMaxOutputSize", t, e, n), h = await r.image.nonMaxSuppressionPaddedAsync(o, i, a, l, c, u);
        return [
          h.selectedIndices,
          h.validOutputs
        ];
      }
      case "NonMaxSuppressionV3":
      case "NonMaxSuppressionV2": {
        const { boxes: o, scores: i, maxOutputSize: a, iouThreshold: l, scoreThreshold: c } = mg(t, e, n);
        return [
          await r.image.nonMaxSuppressionAsync(o, i, a, l, c)
        ];
      }
      case "Where": {
        const o = r.cast(v("condition", t, e, n), "bool"), i = [
          await r.whereAsync(o)
        ];
        return o.dispose(), i;
      }
      case "ListDiff":
        return r.setdiff1dAsync(v("x", t, e, n), v("y", t, e, n));
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const eK = (t, e, n, s = on) => {
    switch (t.op) {
      case "LowerBound": {
        const r = v("sortedSequence", t, e, n), o = v("values", t, e, n);
        return [
          s.lowerBound(r, o)
        ];
      }
      case "TopKV2": {
        const r = v("x", t, e, n), o = v("k", t, e, n), i = v("sorted", t, e, n), a = s.topk(r, o, i);
        return [
          a.values,
          a.indices
        ];
      }
      case "UpperBound": {
        const r = v("sortedSequence", t, e, n), o = v("values", t, e, n);
        return [
          s.upperBound(r, o)
        ];
      }
      case "Unique": {
        const r = v("x", t, e, n), o = s.unique(r);
        return [
          o.values,
          o.indices
        ];
      }
      case "UniqueV2": {
        const r = v("x", t, e, n), o = v("axis", t, e, n), i = s.unique(r, o);
        return [
          i.values,
          i.indices
        ];
      }
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const tK = (t, e, n, s = on) => {
    switch (t.op) {
      case "Const":
        return e[t.name];
      case "PlaceholderWithDefault":
        const r = v("default", t, e, n);
        return [
          Jt(t.name, e, n) || r
        ];
      case "Placeholder":
        return [
          Jt(t.name, e, n)
        ];
      case "Identity":
      case "StopGradient":
      case "FakeQuantWithMinMaxVars": {
        const u = v("x", t, e, n);
        return [
          yr(u)
        ];
      }
      case "IdentityN":
        return v("x", t, e, n).map((u) => yr(u));
      case "Snapshot":
        const o = v("x", t, e, n);
        return [
          yr(o)
        ];
      case "Shape":
        return [
          s.tensor1d(v("x", t, e, n).shape, "int32")
        ];
      case "ShapeN":
        return v("x", t, e, n).map((u) => s.tensor1d(u.shape));
      case "Size":
        return [
          s.scalar(v("x", t, e, n).size, "int32")
        ];
      case "Rank":
        return [
          s.scalar(v("x", t, e, n).rank, "int32")
        ];
      case "NoOp":
        return [
          s.scalar(1)
        ];
      case "Print":
        const i = v("x", t, e, n), a = v("data", t, e, n), l = v("message", t, e, n), c = v("summarize", t, e, n);
        console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(l);
        for (let u = 0; u < a.length; u++) console.log(Array.prototype.slice.call(a[u].dataSync()).slice(0, c));
        return [
          i
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  class nK {
    get id() {
      return this.handle.id;
    }
    constructor(e, n) {
      this.keyDType = e, this.valueDType = n, this.handle = Re(0), this.tensorMap = /* @__PURE__ */ new Map(), Dt(this.handle);
    }
    clearAndClose() {
      this.tensorMap.forEach((e) => e.dispose()), this.tensorMap.clear(), this.handle.dispose();
    }
    size() {
      return this.tensorMap.size;
    }
    tensorSize() {
      return Re(this.size(), "int32");
    }
    async import(e, n) {
      this.checkKeyAndValueTensor(e, n);
      const s = await e.data();
      return this.tensorMap.forEach((r) => r.dispose()), this.tensorMap.clear(), q(() => {
        const r = os(n), o = s.length, i = r.length;
        C(o === i, () => `The number of elements doesn't match, keys has ${o} elements, the values has ${i} elements.`);
        for (let a = 0; a < o; a++) {
          const l = s[a], c = r[a];
          Dt(c), this.tensorMap.set(l, c);
        }
        return this.handle;
      });
    }
    async find(e, n) {
      this.checkKeyAndValueTensor(e, n);
      const s = await e.data();
      return q(() => {
        const r = [];
        for (let o = 0; o < s.length; o++) {
          const i = s[o], a = this.findWithDefault(i, n);
          r.push(a);
        }
        return yn(r);
      });
    }
    findWithDefault(e, n) {
      const s = this.tensorMap.get(e);
      return s ?? n;
    }
    checkKeyAndValueTensor(e, n) {
      if (e.dtype !== this.keyDType) throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);
      if (n.dtype !== this.valueDType) throw new Error(`Expect value dtype ${this.valueDType}, but got ${n.dtype}`);
    }
  }
  const sK = async (t, e, n, s) => {
    switch (t.op) {
      case "HashTable":
      case "HashTableV2": {
        const r = s.getHashTableHandleByName(t.name);
        if (r != null) return [
          r
        ];
        {
          const o = v("keyDType", t, e, n), i = v("valueDType", t, e, n), a = new nK(o, i);
          return s.addHashTable(t.name, a), [
            a.handle
          ];
        }
      }
      case "InitializeTable":
      case "InitializeTableV2":
      case "LookupTableImport":
      case "LookupTableImportV2": {
        const r = v("tableHandle", t, e, n, s), o = v("keys", t, e, n), i = v("values", t, e, n);
        return [
          await s.getHashTableById(r.id).import(o, i)
        ];
      }
      case "LookupTableFind":
      case "LookupTableFindV2": {
        const r = v("tableHandle", t, e, n, s), o = v("keys", t, e, n), i = v("defaultValue", t, e, n);
        return [
          await s.getHashTableById(r.id).find(o, i)
        ];
      }
      case "LookupTableSize":
      case "LookupTableSizeV2": {
        const r = v("tableHandle", t, e, n, s);
        return [
          s.getHashTableById(r.id).tensorSize()
        ];
      }
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const rK = (t, e, n, s = on) => {
    switch (t.op) {
      case "ResizeBilinear": {
        const r = v("images", t, e, n), o = v("size", t, e, n), i = v("alignCorners", t, e, n), a = v("halfPixelCenters", t, e, n);
        return [
          s.image.resizeBilinear(r, [
            o[0],
            o[1]
          ], i, a)
        ];
      }
      case "ResizeNearestNeighbor": {
        const r = v("images", t, e, n), o = v("size", t, e, n), i = v("alignCorners", t, e, n), a = v("halfPixelCenters", t, e, n);
        return [
          s.image.resizeNearestNeighbor(r, [
            o[0],
            o[1]
          ], i, a)
        ];
      }
      case "CropAndResize": {
        const r = v("image", t, e, n), o = v("boxes", t, e, n), i = v("boxInd", t, e, n), a = v("cropSize", t, e, n), l = v("method", t, e, n), c = v("extrapolationValue", t, e, n);
        return [
          s.image.cropAndResize(r, o, i, a, l, c)
        ];
      }
      case "ImageProjectiveTransformV3": {
        const r = v("images", t, e, n), o = v("transforms", t, e, n), i = v("outputShape", t, e, n), a = v("fillValue", t, e, n), l = v("interpolation", t, e, n), c = v("fillMode", t, e, n);
        return [
          s.image.transform(r, o, l.toLowerCase(), c.toLowerCase(), a, i)
        ];
      }
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const oK = (t, e, n, s = on) => {
    switch (t.op) {
      case "Equal":
        return [
          s.equal(v("a", t, e, n), v("b", t, e, n))
        ];
      case "NotEqual":
        return [
          s.notEqual(v("a", t, e, n), v("b", t, e, n))
        ];
      case "Greater":
        return [
          s.greater(v("a", t, e, n), v("b", t, e, n))
        ];
      case "GreaterEqual":
        return [
          s.greaterEqual(v("a", t, e, n), v("b", t, e, n))
        ];
      case "Less":
        return [
          s.less(v("a", t, e, n), v("b", t, e, n))
        ];
      case "LessEqual":
        return [
          s.lessEqual(v("a", t, e, n), v("b", t, e, n))
        ];
      case "LogicalAnd":
        return [
          s.logicalAnd(v("a", t, e, n), v("b", t, e, n))
        ];
      case "LogicalNot":
        return [
          s.logicalNot(v("a", t, e, n))
        ];
      case "LogicalOr":
        return [
          s.logicalOr(v("a", t, e, n), v("b", t, e, n))
        ];
      case "Select":
      case "SelectV2":
        return [
          s.where(v("condition", t, e, n), v("a", t, e, n), v("b", t, e, n))
        ];
      case "BitwiseAnd":
        return [
          s.bitwiseAnd(v("a", t, e, n), v("b", t, e, n))
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const iK = (t, e, n, s = on) => {
    switch (t.op) {
      case "BatchMatMul":
      case "BatchMatMulV2":
      case "MatMul":
        return [
          s.matMul(v("a", t, e, n), v("b", t, e, n), v("transposeA", t, e, n), v("transposeB", t, e, n))
        ];
      case "Einsum":
        return [
          s.einsum(v("equation", t, e, n), ...v("tensors", t, e, n))
        ];
      case "Transpose":
        return [
          s.transpose(v("x", t, e, n), v("perm", t, e, n))
        ];
      case "_FusedMatMul":
        const [r, o] = v("fusedOps", t, e, n), i = r === "biasadd", a = o === "prelu", l = v("numArgs", t, e, n), c = v("leakyreluAlpha", t, e, n);
        if (i) {
          if (a && l !== 2) throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
          if (!a && l !== 1) throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
        }
        const [u, h] = v("args", t, e, n);
        return [
          s.fused.matMul({
            a: v("a", t, e, n),
            b: v("b", t, e, n),
            transposeA: v("transposeA", t, e, n),
            transposeB: v("transposeB", t, e, n),
            bias: u,
            activation: o,
            preluActivationWeights: h,
            leakyreluAlpha: c
          })
        ];
      case "MatrixBandPart":
        return [
          s.linalg.bandPart(v("a", t, e, n), v("numLower", t, e, n), v("numUpper", t, e, n))
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const aK = (t, e, n, s = on) => {
    switch (t.op) {
      case "EuclideanNorm":
        return [
          s.euclideanNorm(v("x", t, e, n), v("axis", t, e, n), v("keepDims", t, e, n))
        ];
      case "FusedBatchNorm":
      case "FusedBatchNormV2":
        return [
          s.batchNorm(v("x", t, e, n), v("mean", t, e, n), v("variance", t, e, n), v("offset", t, e, n), v("scale", t, e, n), v("epsilon", t, e, n))
        ];
      case "FusedBatchNormV3":
        return [
          s.batchNorm(v("x", t, e, n), v("mean", t, e, n), v("variance", t, e, n), v("offset", t, e, n), v("scale", t, e, n), v("epsilon", t, e, n))
        ];
      case "LRN":
        return [
          s.localResponseNormalization(v("x", t, e, n), v("radius", t, e, n), v("bias", t, e, n), v("alpha", t, e, n), v("beta", t, e, n))
        ];
      case "Softmax":
        return [
          s.softmax(v("x", t, e, n))
        ];
      case "LogSoftmax":
        return [
          s.logSoftmax(v("x", t, e, n))
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const lK = (t, e, n, s = on) => {
    switch (t.op) {
      case "RaggedGather": {
        const { outputNestedSplits: r, outputDenseValues: o } = s.raggedGather(v("paramsNestedSplits", t, e, n), v("paramsDenseValues", t, e, n), v("indices", t, e, n), v("outputRaggedRank", t, e, n));
        return r.concat(o);
      }
      case "RaggedRange": {
        const { rtNestedSplits: r, rtDenseValues: o } = s.raggedRange(v("starts", t, e, n), v("limits", t, e, n), v("splits", t, e, n));
        return [
          r,
          o
        ];
      }
      case "RaggedTensorToTensor":
        return [
          s.raggedTensorToTensor(v("shape", t, e, n), v("values", t, e, n), v("defaultValue", t, e, n), v("rowPartitionTensors", t, e, n), v("rowPartitionTypes", t, e, n))
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const cK = (t, e, n, s = on) => {
    switch (t.op) {
      case "Max": {
        const a = v("axis", t, e, n), l = v("keepDims", t, e, n);
        return [
          s.max(v("x", t, e, n), a, l)
        ];
      }
      case "Mean": {
        const a = v("axis", t, e, n), l = v("keepDims", t, e, n);
        return [
          s.mean(v("x", t, e, n), a, l)
        ];
      }
      case "Min": {
        const a = v("axis", t, e, n), l = v("keepDims", t, e, n);
        return [
          s.min(v("x", t, e, n), a, l)
        ];
      }
      case "Sum": {
        const a = v("axis", t, e, n), l = v("keepDims", t, e, n);
        return [
          s.sum(v("x", t, e, n), a, l)
        ];
      }
      case "All": {
        const a = v("axis", t, e, n), l = v("keepDims", t, e, n);
        return [
          s.all(v("x", t, e, n), a, l)
        ];
      }
      case "Any": {
        const a = v("axis", t, e, n), l = v("keepDims", t, e, n);
        return [
          s.any(v("x", t, e, n), a, l)
        ];
      }
      case "ArgMax": {
        const a = v("axis", t, e, n);
        return [
          s.argMax(v("x", t, e, n), a)
        ];
      }
      case "ArgMin": {
        const a = v("axis", t, e, n);
        return [
          s.argMin(v("x", t, e, n), a)
        ];
      }
      case "Prod": {
        const a = v("axis", t, e, n), l = v("keepDims", t, e, n);
        return [
          s.prod(v("x", t, e, n), a, l)
        ];
      }
      case "Cumprod": {
        const a = v("axis", t, e, n), l = v("exclusive", t, e, n), c = v("reverse", t, e, n);
        return [
          s.cumprod(v("x", t, e, n), a, l, c)
        ];
      }
      case "Cumsum": {
        const a = v("axis", t, e, n), l = v("exclusive", t, e, n), c = v("reverse", t, e, n);
        return [
          s.cumsum(v("x", t, e, n), a, l, c)
        ];
      }
      case "Bincount":
        const r = v("x", t, e, n), o = v("weights", t, e, n), i = v("size", t, e, n);
        return [
          s.bincount(r, o, i)
        ];
      case "DenseBincount": {
        const a = v("x", t, e, n), l = v("weights", t, e, n), c = v("size", t, e, n), u = v("binaryOutput", t, e, n);
        return [
          s.denseBincount(a, l, c, u)
        ];
      }
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const uK = (t, e, n, s = on) => {
    switch (t.op) {
      case "ConcatV2":
      case "Concat": {
        const r = v("n", t, e, n), o = v("axis", t, e, n);
        let i = v("tensors", t, e, n);
        return i = i.slice(0, r), [
          s.concat(i, o)
        ];
      }
      case "Gather": {
        const r = v("x", t, e, n), o = v("indices", t, e, n);
        return [
          s.gather(r, s.cast(o, "int32"), 0)
        ];
      }
      case "GatherV2": {
        const r = v("axis", t, e, n), o = v("batchDims", t, e, n), i = v("x", t, e, n), a = v("indices", t, e, n);
        return [
          s.gather(i, s.cast(a, "int32"), r, o)
        ];
      }
      case "Reverse": {
        const r = v("dims", t, e, n), o = [];
        for (let a = 0; a < r.length; a++) r[a] && o.push(a);
        const i = v("x", t, e, n);
        return [
          s.reverse(i, o)
        ];
      }
      case "ReverseV2": {
        const r = v("axis", t, e, n), o = v("x", t, e, n);
        return [
          s.reverse(o, r)
        ];
      }
      case "Slice": {
        const r = v("begin", t, e, n), o = v("size", t, e, n);
        return [
          s.slice(v("x", t, e, n), r, o)
        ];
      }
      case "StridedSlice": {
        const r = v("begin", t, e, n), o = v("end", t, e, n), i = v("strides", t, e, n), a = v("beginMask", t, e, n), l = v("endMask", t, e, n), c = v("ellipsisMask", t, e, n), u = v("newAxisMask", t, e, n), h = v("shrinkAxisMask", t, e, n), d = v("x", t, e, n);
        return [
          s.stridedSlice(d, r, o, i, a, l, c, u, h)
        ];
      }
      case "Pack":
        return q(() => {
          const r = v("axis", t, e, n), o = v("tensors", t, e, n), i = o[0].shape, a = s.squeeze(o[0]).shape, l = o.map((c) => {
            const u = Ue(c.shape, i);
            if (!u && !Ue(s.squeeze(c).shape, a)) throw new Error("the input tensors shape does not match");
            return u ? c : s.reshape(c, i);
          });
          return [
            s.stack(l, r)
          ];
        });
      case "Unpack": {
        const r = v("axis", t, e, n), o = v("tensor", t, e, n);
        return s.unstack(o, r);
      }
      case "Tile": {
        const r = v("reps", t, e, n);
        return [
          s.tile(v("x", t, e, n), r)
        ];
      }
      case "Split":
      case "SplitV": {
        const r = v("axis", t, e, n), o = v("numOrSizeSplits", t, e, n), i = v("x", t, e, n);
        return s.split(i, o, r);
      }
      case "ScatterNd": {
        const r = v("indices", t, e, n), o = v("values", t, e, n), i = v("shape", t, e, n);
        return [
          s.scatterND(r, o, i)
        ];
      }
      case "GatherNd": {
        const r = v("x", t, e, n), o = v("indices", t, e, n);
        return [
          s.gatherND(r, o)
        ];
      }
      case "SparseToDense": {
        const r = v("sparseIndices", t, e, n), o = v("outputShape", t, e, n), i = v("sparseValues", t, e, n), a = v("defaultValue", t, e, n);
        return [
          s.sparseToDense(r, i, o, i.dtype === a.dtype ? a : s.cast(a, i.dtype))
        ];
      }
      case "TensorScatterUpdate": {
        const r = v("indices", t, e, n), o = v("values", t, e, n), i = v("tensor", t, e, n);
        return [
          s.tensorScatterUpdate(i, r, o)
        ];
      }
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const hK = (t, e, n, s = on) => {
    switch (t.op) {
      case "SparseFillEmptyRows": {
        const { outputIndices: r, outputValues: o, emptyRowIndicator: i, reverseIndexMap: a } = s.sparse.sparseFillEmptyRows(v("indices", t, e, n), v("values", t, e, n), v("denseShape", t, e, n), v("defaultValue", t, e, n));
        return [
          r,
          o,
          i,
          a
        ];
      }
      case "SparseReshape": {
        const { outputIndices: r, outputShape: o } = s.sparse.sparseReshape(v("inputIndices", t, e, n), v("inputShape", t, e, n), v("newShape", t, e, n));
        return [
          r,
          o
        ];
      }
      case "SparseSegmentMean":
        return [
          s.sparse.sparseSegmentMean(v("data", t, e, n), v("indices", t, e, n), v("segmentIds", t, e, n))
        ];
      case "SparseSegmentSum":
        return [
          s.sparse.sparseSegmentSum(v("data", t, e, n), v("indices", t, e, n), v("segmentIds", t, e, n))
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const dK = (t, e, n, s = on) => {
    switch (t.op) {
      case "FFT":
        return [
          s.fft(v("x", t, e, n))
        ];
      case "IFFT":
        return [
          s.ifft(v("x", t, e, n))
        ];
      case "RFFT":
        return [
          s.rfft(v("x", t, e, n))
        ];
      case "IRFFT":
        return [
          s.irfft(v("x", t, e, n))
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const pK = (t, e, n, s = on) => {
    switch (t.op) {
      case "StaticRegexReplace":
        return [
          s.string.staticRegexReplace(v("input", t, e, n), v("pattern", t, e, n), v("rewrite", t, e, n), v("replaceGlobal", t, e, n))
        ];
      case "StringNGrams": {
        const { nGrams: r, nGramsSplits: o } = s.string.stringNGrams(v("data", t, e, n), v("dataSplits", t, e, n), v("separator", t, e, n), v("nGramWidths", t, e, n), v("leftPad", t, e, n), v("rightPad", t, e, n), v("padWidth", t, e, n), v("preserveShortSequences", t, e, n));
        return [
          r,
          o
        ];
      }
      case "StringSplit": {
        const { indices: r, values: o, shape: i } = s.string.stringSplit(v("input", t, e, n), v("delimiter", t, e, n), v("skipEmpty", t, e, n));
        return [
          r,
          o,
          i
        ];
      }
      case "StringToHashBucketFast":
        return [
          s.string.stringToHashBucketFast(v("input", t, e, n), v("numBuckets", t, e, n))
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  const fK = (t, e, n, s = on) => {
    switch (t.op) {
      case "Cast":
        return [
          s.cast(v("x", t, e, n), v("dtype", t, e, n))
        ];
      case "ExpandDims": {
        const r = v("axis", t, e, n);
        return [
          s.expandDims(v("x", t, e, n), r)
        ];
      }
      case "Squeeze": {
        const r = v("axis", t, e, n);
        return [
          s.squeeze(v("x", t, e, n), r)
        ];
      }
      case "Reshape":
        return [
          s.reshape(v("x", t, e, n), v("shape", t, e, n))
        ];
      case "EnsureShape":
        return [
          s.ensureShape(v("x", t, e, n), v("shape", t, e, n))
        ];
      case "MirrorPad":
        return [
          s.mirrorPad(v("x", t, e, n), v("padding", t, e, n), v("mode", t, e, n))
        ];
      case "PadV2":
      case "Pad":
        return [
          s.pad(v("x", t, e, n), v("padding", t, e, n), v("constantValue", t, e, n))
        ];
      case "SpaceToBatchND": {
        const r = v("blockShape", t, e, n), o = v("paddings", t, e, n);
        return [
          s.spaceToBatchND(v("x", t, e, n), r, o)
        ];
      }
      case "BatchToSpaceND": {
        const r = v("blockShape", t, e, n), o = v("crops", t, e, n);
        return [
          s.batchToSpaceND(v("x", t, e, n), r, o)
        ];
      }
      case "DepthToSpace": {
        const r = v("blockSize", t, e, n), o = v("dataFormat", t, e, n).toUpperCase();
        return [
          s.depthToSpace(v("x", t, e, n), r, o)
        ];
      }
      case "BroadcastTo":
        return [
          s.broadcastTo(v("x", t, e, n), v("shape", t, e, n))
        ];
      case "BroadcastArgs":
        return [
          s.broadcastArgs(v("s0", t, e, n), v("s1", t, e, n))
        ];
      default:
        throw TypeError(`Node type ${t.op} is not implemented`);
    }
  };
  function dS(t, e, n, s, r = q) {
    const o = ((i, a, l) => {
      switch (i.category) {
        case "arithmetic":
          return r(() => Uq(i, a, l));
        case "basic_math":
          return r(() => Gq(i, a, l));
        case "control":
          return Yq(i, a, l);
        case "convolution":
          return r(() => Zq(i, a, l));
        case "creation":
          return r(() => Jq(i, a, l));
        case "dynamic":
          return Qq(i, a, l);
        case "evaluation":
          return r(() => eK(i, a, l));
        case "image":
          return r(() => rK(i, a, l));
        case "graph":
          return r(() => tK(i, a, l));
        case "logical":
          return r(() => oK(i, a, l));
        case "matrices":
          return r(() => iK(i, a, l));
        case "normalization":
          return r(() => aK(i, a, l));
        case "ragged":
          return r(() => lK(i, a, l));
        case "reduction":
          return r(() => cK(i, a, l));
        case "slice_join":
          return r(() => uK(i, a, l));
        case "sparse":
          return r(() => hK(i, a, l));
        case "spectral":
          return r(() => dK(i, a, l));
        case "string":
          return r(() => pK(i, a, l));
        case "transformation":
          return r(() => fK(i, a, l));
        case "hash_table":
          return sK(i, a, l, s);
        case "custom":
          const c = CT(i.op);
          if (c && c.customExecutor) return c.customExecutor(new Wq(i, a, l));
          throw TypeError(`Custom op ${i.op} is not registered.`);
        default:
          throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);
      }
    })(t, e, n);
    return $r(o) ? o.then((i) => [].concat(i)) : [].concat(o);
  }
  class pS {
    constructor(e = {}, n = {}, s = {}, r = {}, o) {
      this.weightMap = e, this.tensorArrayMap = n, this.tensorListMap = s, this.functionMap = r, this.parseNodeNameCache = o, this.rootContext = {
        id: 0,
        frameName: "",
        iterationId: 0
      }, this.contexts = [
        this.rootContext
      ], this.lastId = 0, this.generateCurrentContextIds();
    }
    newFrame(e, n) {
      return {
        id: e,
        frameName: n,
        iterationId: 0
      };
    }
    set currentContext(e) {
      this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());
    }
    get currentContext() {
      return this.contexts;
    }
    get currentContextId() {
      return this._currentContextIds[0];
    }
    get currentContextIds() {
      return this._currentContextIds;
    }
    generateCurrentContextIds() {
      const e = [];
      for (let n = 0; n < this.contexts.length - 1; n++) {
        const s = this.contexts.slice(0, this.contexts.length - n);
        e.push(this.contextIdforContexts(s));
      }
      e.push(""), this._currentContextIds = e;
    }
    contextIdforContexts(e) {
      return e ? e.map((n) => n.id === 0 && n.iterationId === 0 ? "" : `${n.frameName}-${n.iterationId}`).join("/") : "";
    }
    enterFrame(e) {
      this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
    }
    exitFrame() {
      if (this.contexts && this.contexts.length > 1) this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
      else throw new Error("Cannot exit frame, the context is empty");
    }
    nextIteration() {
      if (this.contexts && this.contexts.length > 0) {
        this.contexts = this.contexts.slice(), this.lastId++;
        const e = Object.assign({}, this.contexts[this.contexts.length - 1]);
        e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
      } else throw new Error("Cannot increase frame iteration, the context is empty");
    }
    getWeight(e) {
      return this.weightMap[e];
    }
    addTensorArray(e) {
      this.tensorArrayMap[e.id] = e;
    }
    getTensorArray(e) {
      return this.tensorArrayMap[e];
    }
    addTensorList(e) {
      this.tensorListMap[e.id] = e;
    }
    getTensorList(e) {
      return this.tensorListMap[e];
    }
    dispose(e) {
      for (const n in this.tensorArrayMap) this.tensorArrayMap[n].clearAndClose(e);
      for (const n in this.tensorListMap) this.tensorListMap[n].clearAndClose(e);
    }
  }
  function fS(t, e, n, s) {
    const r = /* @__PURE__ */ new Set(), o = [];
    let i = null, a = null;
    const l = /* @__PURE__ */ new Set(), c = new Set(Object.keys(t).map((d) => Vn(d)[0]));
    s = s || [];
    const u = new Set(s.map((d) => Vn(d.name)[0])), h = [
      ...e
    ];
    for (; h.length > 0; ) {
      const d = h.pop();
      if ((Bo(d) || SK(d) || $K(d)) && i == null && (i = d, a = i.children.map((p) => p.name).filter((p) => r.has(p))), r.add(d.name), n[d.name] == null && !c.has(d.name) && !u.has(d.name)) {
        if (d.inputs.length === 0) {
          o.push(d.name);
          continue;
        }
        d.inputs.forEach((p) => {
          l.has(p.name) || (l.add(p.name), h.push(p));
        });
      }
    }
    return {
      inputs: t,
      outputs: e,
      usedNodes: r,
      missingInputs: o,
      dynamicNode: i,
      syncInputs: a
    };
  }
  function mK(t, e) {
    const { usedNodes: n, inputs: s } = e, r = Object.keys(s).map((g) => Vn(g)[0]).map((g) => t.nodes[g]), o = t.initNodes || [], i = (g) => n.has(typeof g == "string" ? g : g.name);
    function a(g) {
      return [
        ...new Map(g.map((y) => [
          y.name,
          y
        ])).values()
      ];
    }
    const l = a([
      ...r,
      ...t.weights,
      ...o
    ]).filter(i), c = a([
      ...l,
      ...Object.values(t.nodes)
    ]).filter(i), u = new Map(c.map((g) => [
      g.name,
      g
    ])), h = {};
    for (const g of c) {
      h[g.name] = h[g.name] || 0;
      for (const y of g.children) i(y) || (h[y.name] = Number.POSITIVE_INFINITY), h[y.name] = (h[y.name] || 0) + 1;
    }
    const d = Object.entries(h).filter(([, g]) => g === 0).map(([g]) => g), p = [
      ...d
    ];
    for (; d.length > 0; ) {
      const g = d.pop(), y = u.get(g);
      for (const b of y.children.filter(i)) --h[b.name] === 0 && (p.push(b.name), d.push(b.name));
    }
    const f = p.map((g) => u.get(g)), m = gK(f, l);
    return yK(m, l), m;
  }
  function gK(t, e) {
    const n = new Map(t.map((i) => [
      i.name,
      i
    ])), s = e.map((i) => i.name), r = new Set(s);
    for (; s.length > 0; ) {
      const i = s.pop(), a = n.get(i);
      for (const l of a.children) !n.has(l.name) || r.has(l.name) || (r.add(l.name), s.push(l.name));
    }
    return t.filter((i) => r.has(i.name));
  }
  class Lh extends Error {
    constructor(e) {
      super(`NodesExecutionOrderError: ${e}`);
    }
  }
  function yK(t, e) {
    const n = new Map(t.map((a, l) => [
      a.name,
      l
    ])), s = new Set(e.map((a) => a.name)), r = (a) => s.has(typeof a == "string" ? a : a.name), o = new Set(t.map((a) => a.name)), i = (a) => o.has(typeof a == "string" ? a : a.name);
    for (const a of t) {
      for (const l of a.children.filter(i)) {
        if (!n.has(l.name)) throw new Lh(`Child ${l.name} of node ${a.name} is unreachable.`);
        if (n.get(a.name) > n.get(l.name)) throw new Lh(`Node ${a.name} is scheduled to run after its child ${l.name}.`);
      }
      if (!r(a)) for (const l of a.inputs) {
        if (!n.has(l.name)) throw new Lh(`Input ${l.name} of node ${a.name} is unreachable.`);
        if (n.get(l.name) > n.get(a.name)) throw new Lh(`Node ${a.name} is scheduled to run before its input ${l.name}.`);
      }
    }
  }
  function bK(t) {
    const e = new Map(t.map((a, l) => [
      a.name,
      l
    ])), n = Number.MAX_SAFE_INTEGER, s = t.map((a, l) => Bo(a) ? n : l), r = (a) => {
      const l = s[e.get(a.name)];
      return l ?? -1;
    }, o = t.map((a, l) => a.children.map(r).reduce((c, u) => Math.max(c, u), s[l])), i = /* @__PURE__ */ new Map();
    for (let a = 0; a < t.length; ++a) {
      const l = o[a];
      if (l === n) continue;
      const c = t[a], u = t[l];
      i.has(u.name) || i.set(u.name, []), i.get(u.name).push(c);
    }
    return i;
  }
  const xK = /* @__PURE__ */ new Set([
    "Switch",
    "Merge",
    "Enter",
    "Exit",
    "NextIteration",
    "StatelessIf",
    "StatelessWhile",
    "if",
    "While"
  ]), wK = /* @__PURE__ */ new Set([
    "NonMaxSuppressionV2",
    "NonMaxSuppressionV3",
    "NonMaxSuppressionV5",
    "Where"
  ]), vK = /* @__PURE__ */ new Set([
    "HashTable",
    "HashTableV2",
    "LookupTableImport",
    "LookupTableImportV2",
    "LookupTableFind",
    "LookupTableFindV2",
    "LookupTableSize",
    "LookupTableSizeV2"
  ]);
  function Bo(t) {
    return xK.has(t.op);
  }
  function SK(t) {
    return wK.has(t.op);
  }
  function $K(t) {
    return vK.has(t.op);
  }
  class Wd {
    get weightIds() {
      return this.parent ? this.parent.weightIds : this._weightIds;
    }
    get functionExecutorMap() {
      return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
    }
    get weightMap() {
      return this.parent ? this.parent.weightMap : this._weightMap;
    }
    set weightMap(e) {
      const n = Object.keys(e).map((s) => e[s].map((r) => r.id));
      this._weightIds = [].concat(...n), this._weightMap = e;
    }
    set resourceManager(e) {
      this._resourceManager = e;
    }
    get inputs() {
      return this._inputs.map((e) => ({
        name: e.name,
        shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,
        dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0
      }));
    }
    get outputs() {
      return this._outputs.map((e) => ({
        name: e.name,
        shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,
        dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0
      }));
    }
    get inputNodes() {
      return this._inputs.map((e) => e.signatureKey || e.name);
    }
    get outputNodes() {
      return this._outputs.map((e) => {
        const n = e.signatureKey || e.name;
        return e.defaultOutput ? `${n}:${e.defaultOutput}` : n;
      });
    }
    get functions() {
      return Object.keys(this._functions).reduce((e, n) => (e[n] = this._functions[n].signature, e), {});
    }
    constructor(e, n) {
      this.graph = e, this.parent = n, this.compiledMap = /* @__PURE__ */ new Map(), this.parseNodeNameCache = /* @__PURE__ */ new Map(), this._weightMap = {}, this.SEPARATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this.keepIntermediateTensors = false, this._outputs = e.outputs, this._inputs = e.inputs, this._initNodes = e.initNodes, this._signature = e.signature, this._functions = e.functions, e.functions != null && Object.keys(e.functions).forEach((s) => {
        this._functionExecutorMap[s] = new Wd(e.functions[s], this);
      });
    }
    getCompilationKey(e, n) {
      const s = e.map((o) => o.name).sort(), r = n.map((o) => o.name).sort();
      return s.join(this.SEPARATOR) + "--" + r.join(this.SEPARATOR);
    }
    compile(e, n) {
      const s = fS(e, n, this.weightMap, this._initNodes), { missingInputs: r, dynamicNode: o, syncInputs: i } = s;
      if (o != null) throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);
      if (r.length > 0) {
        const c = n.map((h) => h.name), u = Object.keys(e);
        throw new Error(`Cannot compute the outputs [${c}] from the provided inputs [${u}]. Missing the following inputs: [${r}]`);
      }
      const a = mK(this.graph, s), l = bK(a);
      return {
        orderedNodes: a,
        nodeLiveUntilMap: l
      };
    }
    cloneAndKeepTensor(e) {
      if (e == null) return null;
      const n = e.clone();
      return Dt(n), n;
    }
    cloneTensorList(e) {
      return e ? e.map((s) => this.cloneAndKeepTensor(s)) : null;
    }
    cloneTensorMap(e) {
      return Object.fromEntries(Object.entries(e).map(([n, s]) => [
        n,
        this.cloneTensorList(s)
      ]));
    }
    execute(e, n) {
      this.disposeIntermediateTensors(), e = this.mapInputs(e);
      const s = Object.keys(e).sort();
      this.checkInputs(e), this.checkInputShapeAndType(e), n = this.mapOutputs(n), this.checkOutputs(n);
      const r = s.map((d) => this.graph.nodes[Vn(d)[0]]), o = n.map((d) => Vn(d)[0]), i = new Set(o);
      let a = o.map((d) => this.graph.nodes[d]);
      a.length === 0 && (a = this._outputs);
      const l = this.getCompilationKey(r, a);
      let c = this.compiledMap.get(l);
      c == null && (c = this.compile(e, a), this.compiledMap.set(l, c));
      try {
        this.keepIntermediateTensors = j().getBool("KEEP_INTERMEDIATE_TENSORS");
      } catch (d) {
        this.keepIntermediateTensors = false, console.warn(d.message);
      }
      const u = {}, h = {};
      return q(() => {
        const d = new pS(this.weightMap, u, h, this.functionExecutorMap, this.parseNodeNameCache), p = Object.assign({}, this.weightMap);
        this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap)), Object.keys(e).forEach((y) => {
          const [b, w] = Vn(y, d), x = [];
          x[w] = e[y], p[b] = x, this.keepIntermediateTensors && (this.clonedTensorsMap[b] = this.cloneTensorList(x));
        });
        const f = this.getFrozenTensorIds(p), { orderedNodes: m, nodeLiveUntilMap: g } = c;
        for (const y of m) {
          if (p[y.name]) continue;
          const b = dS(y, p, d, this._resourceManager);
          if ($r(b)) throw new Error(`The execution of the op '${y.op}' returned a promise. Please use model.executeAsync() instead.`);
          p[y.name] = b, this.keepIntermediateTensors && (this.clonedTensorsMap[y.name] = this.cloneTensorList(b)), this.checkTensorForDisposalWithNodeLiveUntilInfo(y, p, d, f, i, g.get(y.name));
        }
        return this.parent == null && d.dispose(f), n.map((y) => Jt(y, p, d));
      });
    }
    getFrozenTensorIds(e) {
      const n = [].concat.apply([], Object.keys(e).map((s) => e[s]).map((s) => s.map((r) => r.id)));
      return new Set(n);
    }
    checkTensorForDisposal(e, n, s, r, o, i, a) {
      if (!(Bo(n) || i.has(e))) {
        for (const l of s[e]) l != null && (a[l.id] = (a[l.id] || 0) + n.children.length);
        for (const l of n.inputs) {
          if (Bo(l)) continue;
          const c = aS(l.name, s, r);
          if (c != null) for (const u of c) {
            if (!u || u.kept || o.has(u.id)) continue;
            const h = a[u.id];
            h === 1 ? (u.dispose(), delete a[u.id]) : h != null && a[u.id]--;
          }
        }
      }
    }
    checkTensorForDisposalWithNodeLiveUntilInfo(e, n, s, r, o, i) {
      function a(l) {
        return Bo(l) || o.has(l.name);
      }
      if (!(Bo(e) || i == null)) for (const l of i) {
        if (a(l)) continue;
        const c = aS(l.name, n, s);
        for (const u of c) !u || u.kept || r.has(u.id) || u.dispose();
      }
    }
    async executeAsync(e, n) {
      return this._executeAsync(e, n);
    }
    disposeIntermediateTensors() {
      this.clonedTensorsMap && (Object.values(this.clonedTensorsMap).forEach((e) => {
        for (const n of e) n && !n.isDisposed && n.dispose();
      }), this.clonedTensorsMap = null);
    }
    getIntermediateTensors() {
      return this.clonedTensorsMap;
    }
    async _executeAsync(e, n, s = false, r = {}, o = {}) {
      this.disposeIntermediateTensors(), s || (e = this.mapInputs(e), this.checkInputs(e), this.checkInputShapeAndType(e), n = this.mapOutputs(n), this.checkOutputs(n));
      try {
        this.keepIntermediateTensors = j().getBool("KEEP_INTERMEDIATE_TENSORS");
      } catch (d) {
        this.keepIntermediateTensors = false, console.warn(d.message);
      }
      const i = new pS(this.weightMap, r, o, this.functionExecutorMap, this.parseNodeNameCache);
      this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap));
      const a = await this.executeWithControlFlow(e, i, n, s), l = n.map((d) => Jt(d, a, i)), c = l.map((d) => d.id), u = Object.keys(e).map((d) => e[d].id), h = /* @__PURE__ */ new Set([
        ...c,
        ...u,
        ...this.weightIds
      ]);
      return Object.values(a).forEach((d) => {
        d.forEach((p) => {
          p && !p.isDisposed && !h.has(p.id) && p.dispose();
        });
      }), this.parent == null && i.dispose(h), l;
    }
    async executeFunctionAsync(e, n, s) {
      const r = e.reduce((o, i, a) => (o[this.inputs[a].name] = i, o), {});
      return this._executeAsync(r, this.outputNodes, true, n, s);
    }
    async executeWithControlFlow(e, n, s, r) {
      const o = Object.keys(e), i = o.map((x) => this.graph.nodes[Vn(x)[0]]), a = s.map((x) => Vn(x)[0]), l = new Set(a);
      let c = a.map((x) => this.graph.nodes[x]);
      c.length === 0 && (c = this._outputs);
      const { usedNodes: u, missingInputs: h, dynamicNode: d, syncInputs: p } = fS(e, c, this.weightMap, this._initNodes), f = [
        ...i,
        ...this.graph.weights,
        ...this._initNodes || []
      ].map((x) => ({
        node: x,
        contexts: n.currentContext
      })), m = Object.assign({}, this.weightMap);
      Object.keys(e).forEach((x) => {
        const [S, I] = Vn(x), E = [];
        E[I] = e[x], m[S] = E;
      });
      const g = {}, y = this.getFrozenTensorIds(m), b = {};
      for (; f.length > 0; ) {
        const x = this.processStack(i, f, n, m, b, y, l, g, u);
        await Promise.all(x);
      }
      d == null && !r && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");
      const w = c.filter((x) => !Bo(x) && !Jt(x.name, m, n)).map((x) => x.name);
      if (w.length > 0) {
        let x = "";
        throw d != null && (x = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`), new Error(`Cannot compute the outputs [${w}] from the provided inputs [${o}]. Consider providing the following inputs: [${h}]. ${x}`);
      }
      return m;
    }
    processStack(e, n, s, r, o, i, a, l, c) {
      const u = [];
      for (; n.length > 0; ) {
        const h = n.pop();
        s.currentContext = h.contexts;
        let d = "";
        if (h.node.op === "Enter" && v("isConstant", h.node, r, s) && ([d] = gr(h.node.name, s)), r[h.node.name] == null) {
          const p = dS(h.node, r, s, this._resourceManager);
          d || ([d] = gr(h.node.name, s));
          const f = s.currentContext;
          $r(p) ? u.push(p.then((m) => (r[d] = m, this.keepIntermediateTensors && (this.clonedTensorsMap[d] = this.cloneTensorList(m)), s.currentContext = f, this.checkTensorForDisposal(d, h.node, r, s, i, a, l), this.processChildNodes(h.node, n, s, r, o, c), m))) : (r[d] = p, this.keepIntermediateTensors && (this.clonedTensorsMap[d] = this.cloneTensorList(p)), this.checkTensorForDisposal(d, h.node, r, s, i, a, l), this.processChildNodes(h.node, n, s, r, o, c));
        } else this.processChildNodes(h.node, n, s, r, o, c);
      }
      return u;
    }
    processChildNodes(e, n, s, r, o, i) {
      e.children.forEach((a) => {
        const [l] = gr(a.name, s);
        o[l] || !i.has(a.name) || (a.op === "Merge" ? a.inputNames.some((c) => !!Jt(c, r, s)) && (o[l] = true, n.push({
          contexts: s.currentContext,
          node: a
        })) : a.inputNames.every((c) => !!Jt(c, r, s)) && (o[l] = true, n.push({
          contexts: s.currentContext,
          node: a
        })));
      });
    }
    dispose() {
      Object.keys(this.weightMap).forEach((e) => this.weightMap[e].forEach((n) => n.dispose()));
    }
    checkInputShapeAndType(e) {
      Object.keys(e).forEach((n) => {
        const s = e[n], [r] = Vn(n), o = this.graph.nodes[r];
        if (o.attrParams.shape && o.attrParams.shape.value) {
          const i = o.attrParams.shape.value, a = i.length === s.shape.length && s.shape.every((l, c) => i[c] === -1 || i[c] === l);
          C(a, () => `The shape of dict['${o.name}'] provided in model.execute(dict) must be [${i}], but was [${s.shape}]`);
        }
        o.attrParams.dtype && o.attrParams.dtype.value && C(s.dtype === o.attrParams.dtype.value, () => `The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${s.dtype}`);
      });
    }
    mapInputs(e) {
      var n, s;
      const r = {};
      for (const o in e) {
        const i = (s = (n = this._signature) === null || n === void 0 ? void 0 : n.inputs) === null || s === void 0 ? void 0 : s[o];
        i != null ? r[i.name] = e[o] : r[o] = e[o];
      }
      return r;
    }
    checkInputs(e) {
      const n = Object.keys(e).filter((s) => {
        const [r] = Vn(s);
        return this.graph.nodes[r] == null;
      });
      if (n.length > 0) throw new Error(`The dict provided in model.execute(dict) has keys: [${n}] that are not part of graph`);
    }
    mapOutputs(e) {
      return e.map((n) => {
        var s, r;
        const o = (r = (s = this._signature) === null || s === void 0 ? void 0 : s.outputs) === null || r === void 0 ? void 0 : r[n];
        return o != null ? o.name : n;
      }, {});
    }
    checkOutputs(e) {
      e.forEach((n) => {
        const [s] = Vn(n);
        if (!this.graph.nodes[s]) throw new Error(`The output '${n}' is not found in the graph`);
      });
    }
  }
  class CK {
    constructor(e = {}, n = {}) {
      this.hashTableNameToHandle = e, this.hashTableMap = n;
    }
    addHashTable(e, n) {
      this.hashTableNameToHandle[e] = n.handle, this.hashTableMap[n.id] = n;
    }
    getHashTableHandleByName(e) {
      return this.hashTableNameToHandle[e];
    }
    getHashTableById(e) {
      return this.hashTableMap[e];
    }
    dispose() {
      for (const e in this.hashTableMap) this.hashTableMap[e].clearAndClose(), delete this.hashTableMap[e];
      for (const e in this.hashTableNameToHandle) this.hashTableNameToHandle[e].dispose(), delete this.hashTableNameToHandle[e];
    }
  }
  const IK = "?tfjs-format=file", NK = "model.json";
  class E0 {
    get modelVersion() {
      return this.version;
    }
    get inputNodes() {
      return this.executor.inputNodes;
    }
    get outputNodes() {
      return this.executor.outputNodes;
    }
    get inputs() {
      return this.executor.inputs;
    }
    get outputs() {
      return this.executor.outputs;
    }
    get weights() {
      return this.executor.weightMap;
    }
    get metadata() {
      return this.artifacts.userDefinedMetadata;
    }
    get modelSignature() {
      return this.signature;
    }
    get modelStructuredOutputKeys() {
      return this.structuredOutputKeys;
    }
    constructor(e, n = {}, s = kx) {
      this.modelUrl = e, this.loadOptions = n, this.version = "n/a", this.io = s, n == null && (this.loadOptions = {}), this.resourceManager = new CK();
    }
    findIOHandler() {
      const e = this.modelUrl;
      if (e.load != null) this.handler = e;
      else if (this.loadOptions.requestInit != null) this.handler = this.io.browserHTTPRequest(e, this.loadOptions);
      else {
        const n = this.io.getLoadHandlers(e, this.loadOptions);
        if (n.length === 0) n.push(this.io.browserHTTPRequest(e, this.loadOptions));
        else if (n.length > 1) throw new Error(`Found more than one (${n.length}) load handlers for URL '${[
          e
        ]}'`);
        this.handler = n[0];
      }
    }
    load() {
      if (this.findIOHandler(), this.handler.load == null) throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
      const e = this.handler.load();
      return $r(e) ? e.then((n) => n.getWeightStream == null ? this.loadSync(n) : this.loadStreaming(n)) : this.loadSync(e);
    }
    loadSync(e) {
      const n = this.io.decodeWeights(e.weightData, e.weightSpecs);
      return this.loadWithWeightMap(e, n);
    }
    async loadStreaming(e) {
      if (e.getWeightStream == null) throw new Error("Model artifacts missing streamWeights function");
      const n = await tI(e.getWeightStream(), e.weightSpecs);
      return this.loadWithWeightMap(e, n);
    }
    loadWithWeightMap(e, n) {
      this.artifacts = e;
      const s = this.artifacts.modelTopology;
      let r = this.artifacts.signature;
      if (this.artifacts.userDefinedMetadata != null) {
        const o = this.artifacts.userDefinedMetadata;
        o.signature != null && (r = o.signature), o.structuredOutputKeys != null && (this.structuredOutputKeys = o.structuredOutputKeys);
      }
      if (this.signature = r, this.version = `${s.versions.producer}.${s.versions.minConsumer}`, this.executor = new Wd(lS.Instance.transformGraph(s, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(n), this.executor.resourceManager = this.resourceManager, e.modelInitializer != null && e.modelInitializer.node != null) {
        const o = lS.Instance.transformGraph(e.modelInitializer);
        this.initializer = new Wd(o), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializerSignature = e.initializerSignature;
      }
      return true;
    }
    async save(e, n) {
      if (typeof e == "string") {
        const s = this.io.getSaveHandlers(e);
        if (s.length === 0) throw new Error(`Cannot find any save handlers for URL '${e}'`);
        if (s.length > 1) throw new Error(`Found more than one (${s.length}) save handlers for URL '${e}'`);
        e = s[0];
      }
      if (e.save == null) throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
      return e.save(this.artifacts);
    }
    addStructuredOutputNames(e) {
      if (this.structuredOutputKeys) {
        const n = e instanceof Xe ? [
          e
        ] : e, s = {};
        return n.forEach((r, o) => s[this.structuredOutputKeys[o]] = r), s;
      }
      return e;
    }
    predict(e, n) {
      const s = this.execute(e, this.outputNodes);
      return this.addStructuredOutputNames(s);
    }
    async predictAsync(e, n) {
      const s = await this.executeAsync(e, this.outputNodes);
      return this.addStructuredOutputNames(s);
    }
    normalizeInputs(e) {
      var n;
      if (!(e instanceof Xe) && !Array.isArray(e)) {
        const o = (n = this.signature) === null || n === void 0 ? void 0 : n.inputs;
        if (o != null) for (const i in o) {
          const a = o[i];
          a.resourceId != null && (e[i] = this.resourceIdToCapturedInput[a.resourceId]);
        }
        return e;
      }
      e = Array.isArray(e) ? e : [
        e
      ];
      const s = Object.keys(this.resourceIdToCapturedInput).length;
      if (e.length + s !== this.inputNodes.length) throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length - s} non-resource placeholders, while there are ${e.length} input tensors provided.`);
      let r = 0;
      return this.inputNodes.reduce((o, i) => {
        var a, l, c;
        const u = (c = (l = (a = this.signature) === null || a === void 0 ? void 0 : a.inputs) === null || l === void 0 ? void 0 : l[i]) === null || c === void 0 ? void 0 : c.resourceId;
        return u != null ? o[i] = this.resourceIdToCapturedInput[u] : o[i] = e[r++], o;
      }, {});
    }
    normalizeOutputs(e) {
      return e = e || this.outputNodes, Array.isArray(e) ? e : [
        e
      ];
    }
    executeInitializerGraph() {
      return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.execute({}, []) : this.initializer.execute({}, Object.keys(this.initializerSignature.outputs));
    }
    async executeInitializerGraphAsync() {
      return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.executeAsync({}, []) : this.initializer.executeAsync({}, Object.keys(this.initializerSignature.outputs));
    }
    setResourceIdToCapturedInput(e) {
      if (this.resourceIdToCapturedInput = {}, this.initializerSignature) {
        const n = this.initializerSignature.outputs, s = Object.keys(n);
        for (let r = 0; r < s.length; r++) {
          const o = s[r], i = n[o];
          this.resourceIdToCapturedInput[i.resourceId] = e[r];
        }
      }
    }
    execute(e, n) {
      this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(this.executeInitializerGraph()), e = this.normalizeInputs(e), n = this.normalizeOutputs(n);
      const s = this.executor.execute(e, n);
      return s.length > 1 ? s : s[0];
    }
    async executeAsync(e, n) {
      this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()), e = this.normalizeInputs(e), n = this.normalizeOutputs(n);
      const s = await this.executor.executeAsync(e, n);
      return s.length > 1 ? s : s[0];
    }
    getIntermediateTensors() {
      return this.executor.getIntermediateTensors();
    }
    disposeIntermediateTensors() {
      this.executor.disposeIntermediateTensors();
    }
    convertTensorMapToTensorsMap(e) {
      return Object.keys(e).reduce((n, s) => (n[s] = [
        e[s]
      ], n), {});
    }
    dispose() {
      this.executor.dispose(), this.initializer && (this.initializer.dispose(), this.resourceIdToCapturedInput && Oe(this.resourceIdToCapturedInput)), this.resourceManager.dispose();
    }
  }
  async function kK(t, e = {}, n = kx) {
    if (t == null) throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
    e == null && (e = {}), e.fromTFHub && typeof t == "string" && (t = EK(t));
    const s = new E0(t, e, n);
    return await s.load(), s;
  }
  function TK(t) {
    if (t == null) throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");
    let e;
    if (t instanceof Array) {
      const [s, r] = t;
      if (!s) throw new Error("modelJSON must be the first element of the array");
      if (!r || !(r instanceof ArrayBuffer)) throw new Error("An ArrayBuffer of weights must be the second element of the array");
      if (!("modelTopology" in s)) throw new Error("Model JSON is missing 'modelTopology'");
      if (!("weightsManifest" in s)) throw new Error("Model JSON is missing 'weightsManifest'");
      const o = Ed(s.weightsManifest), i = db(s, o, r);
      e = Ad(i);
    } else if ("load" in t) e = t;
    else if ("modelTopology" in t && "weightSpecs" in t && "weightData" in t) e = Ad(t);
    else throw new Error("Unknown model format");
    const n = new E0(e);
    return n.load(), n;
  }
  function EK(t) {
    return t.endsWith("/") || (t = t + "/"), `${t}${NK}${IK}`;
  }
  const kT = "4.19.0";
  function RK(t, e) {
    return Ud(t, e);
  }
  function Ud(t, e, n = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set()) {
    if (t == null) return null;
    if (typeof Blob == "function" && t instanceof Blob) return t.slice();
    if (s.has(t)) throw new Error("Circular references are not supported.");
    if (n.has(t)) return n.get(t);
    const r = e(t);
    if (r.recurse && r.value !== null) throw new Error("A deep map function may not return both a value and recurse=true.");
    if (r.recurse) if (aa(t)) {
      const o = Array.isArray(t) ? [] : {};
      s.add(t);
      for (const i in t) {
        const a = t[i], l = Ud(a, e, n, s);
        o[i] = l;
      }
      return s.delete(t), t.__proto__ && (o.__proto__ = t.__proto__), o;
    } else throw new Error(`Can't recurse into non-iterable type: ${t}`);
    else return n.set(t, r.value), r.value;
  }
  function AK(t, e = ET) {
    return TT(t, e);
  }
  function TT(t, e, n = /* @__PURE__ */ new Set()) {
    const s = t[0];
    if (n.has(s)) throw new Error("Circular references are not supported.");
    const r = e(t);
    if (r.recurse && r.value !== null) throw new Error("A deep zip function may not return both a value and recurse=true.");
    if (r.recurse) if (aa(s)) {
      const o = Array.isArray(s) ? [] : {};
      n.add(s);
      for (const i in s) {
        const a = t.map((c) => c[i]), l = TT(a, e, n);
        o[i] = l;
      }
      return n.delete(s), o;
    } else throw new Error(`Can't recurse into non-iterable type: ${s}`);
    else return r.value;
  }
  function ET(t) {
    return t === null ? null : aa(t[0]) ? {
      value: null,
      recurse: true
    } : {
      value: t,
      recurse: false
    };
  }
  async function RT(t, e) {
    const n = /* @__PURE__ */ new Map();
    Ud(t, e, n);
    for (const r of Array.from(n.keys())) {
      const o = n.get(r);
      if ($r(o)) {
        const i = await o;
        n.set(r, i);
      }
    }
    return Ud(t, e, n);
  }
  function aa(t) {
    let e = false;
    if (j().get("IS_BROWSER")) e = t instanceof TextDecoder;
    else {
      const { StringDecoder: n } = require("string_decoder");
      e = t instanceof n;
    }
    return t != null && !ArrayBuffer.isView(t) && (Array.isArray(t) || typeof t == "object" && !(t instanceof Xe) && !(t instanceof Promise) && !e);
  }
  function _K(t) {
    return t == null || DK(t) || Array.isArray(t) || typeof t == "object" && t instanceof Xe || _t(t);
  }
  function DK(t) {
    return t === null || typeof t != "object" && typeof t != "function";
  }
  function OK(t) {
    return RK(t, FK);
  }
  function FK(t) {
    return t instanceof Xe ? {
      value: t.clone(),
      recurse: false
    } : aa(t) ? {
      value: null,
      recurse: true
    } : {
      value: t,
      recurse: false
    };
  }
  class AT {
    constructor(e) {
      if (this.capacity = e, this.begin = 0, this.end = 0, e == null) throw new RangeError("Can't create a ring buffer of unknown capacity.");
      if (e < 1) throw new RangeError("Can't create ring buffer of capacity < 1.");
      this.data = new Array(e), this.doubledCapacity = 2 * e;
    }
    wrap(e) {
      for (; e < 0; ) e += this.doubledCapacity;
      return e % this.doubledCapacity;
    }
    get(e) {
      if (e < 0) throw new RangeError("Can't get item at a negative index.");
      return this.data[e % this.capacity];
    }
    set(e, n) {
      if (e < 0) throw new RangeError("Can't set item at a negative index.");
      this.data[e % this.capacity] = n;
    }
    length() {
      let e = this.end - this.begin;
      return e < 0 && (e = this.doubledCapacity + e), e;
    }
    isFull() {
      return this.length() === this.capacity;
    }
    isEmpty() {
      return this.length() === 0;
    }
    push(e) {
      if (this.isFull()) throw new RangeError("Ring buffer is full.");
      this.set(this.end, e), this.end = this.wrap(this.end + 1);
    }
    pushAll(e) {
      for (const n of e) this.push(n);
    }
    pop() {
      if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
      this.end = this.wrap(this.end - 1);
      const e = this.get(this.end);
      return this.set(this.end, void 0), e;
    }
    unshift(e) {
      if (this.isFull()) throw new RangeError("Ring buffer is full.");
      this.begin = this.wrap(this.begin - 1), this.set(this.begin, e);
    }
    shift() {
      if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
      const e = this.get(this.begin);
      return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), e;
    }
    shuffleExcise(e) {
      if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
      const n = this.wrap(this.begin + e), s = this.get(n);
      return this.set(n, this.pop()), s;
    }
  }
  class Fm extends AT {
    constructor() {
      super(Fm.INITIAL_CAPACITY);
    }
    isFull() {
      return false;
    }
    push(e) {
      super.isFull() && this.expand(), super.push(e);
    }
    unshift(e) {
      super.isFull() && this.expand(), super.unshift(e);
    }
    expand() {
      const e = this.capacity * 2, n = new Array(e), s = this.length();
      for (let r = 0; r < s; r++) n[r] = this.get(this.wrap(this.begin + r));
      this.data = n, this.capacity = e, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = s;
    }
  }
  Fm.INITIAL_CAPACITY = 32;
  function _T(t) {
    return new zK(t);
  }
  function R0(t) {
    return new MK(t);
  }
  function LK(t, e) {
    return new DT(t, e);
  }
  function PK(t, e = Xr.FAIL) {
    return new KK(t, e);
  }
  class Ht {
    async toArray() {
      const e = [];
      let n = await this.next();
      for (; !n.done; ) e.push(n.value), n = await this.next();
      return e;
    }
    async toArrayForTest() {
      const e = this.prefetch(100), n = [];
      let s = await e.next();
      for (; !s.done; ) n.push(s.value), s = await e.next();
      return n;
    }
    async resolveFully() {
      let e = await this.next();
      for (; !e.done; ) e = await this.next();
    }
    async resolveWhile(e) {
      let n = await this.next(), s = e(n.value);
      for (; !n.done && s; ) n = await this.next(), s = e(n.value);
    }
    handleErrors(e) {
      return new jK(this, e);
    }
    filter(e) {
      return new GK(this, e);
    }
    map(e) {
      return new HK(this, e);
    }
    mapAsync(e) {
      return new mS(this, e);
    }
    serialMapAsync(e) {
      return new mS(this, e).serial();
    }
    flatmap(e) {
      return new qK(this, e);
    }
    async forEachAsync(e) {
      return this.map(e).resolveFully();
    }
    async serialForEach(e) {
      return this.serialMapAsync(e).resolveWhile((n) => n === true);
    }
    rowMajorBatch(e, n = true) {
      return new UK(this, e, n);
    }
    columnMajorBatch(e, n = true, s = ET) {
      return this.rowMajorBatch(e, n).map((o) => AK(o, s));
    }
    concatenate(e, n) {
      return new DT(_T([
        this,
        e
      ]), n);
    }
    take(e) {
      return e < 0 || e == null ? this : new WK(this, e);
    }
    skip(e) {
      return e < 0 || e == null ? this : new VK(this, e);
    }
    prefetch(e) {
      return new OT(this, e);
    }
    shuffle(e, n) {
      return new XK(this, e, n);
    }
    serial() {
      return new BK(this);
    }
  }
  class zK extends Ht {
    constructor(e) {
      super(), this.items = e, this.trav = 0;
    }
    summary() {
      return `Array of ${this.items.length} items`;
    }
    async next() {
      if (this.trav >= this.items.length) return {
        value: null,
        done: true
      };
      const e = this.items[this.trav];
      return this.trav++, {
        value: OK(e),
        done: false
      };
    }
  }
  class MK extends Ht {
    constructor(e) {
      super(), this.nextFn = e;
    }
    summary() {
      return "Function call";
    }
    async next() {
      try {
        return this.nextFn();
      } catch (e) {
        throw e.message = `Error thrown while iterating through a dataset: ${e.message}`, e;
      }
    }
  }
  class BK extends Ht {
    constructor(e) {
      super(), this.upstream = e, this.lastRead = Promise.resolve({
        value: null,
        done: false
      });
    }
    summary() {
      return `${this.upstream.summary()} -> Serial`;
    }
    async next() {
      return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
    }
    async serialNext() {
      return this.upstream.next();
    }
  }
  class VK extends Ht {
    constructor(e, n) {
      super(), this.upstream = e, this.maxCount = n, this.count = 0, this.lastRead = Promise.resolve({
        value: null,
        done: false
      });
    }
    summary() {
      return `${this.upstream.summary()} -> Skip`;
    }
    async next() {
      return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
    }
    async serialNext() {
      for (; this.count++ < this.maxCount; ) {
        const e = await this.upstream.next();
        if (e.done) return e;
        Oe(e.value);
      }
      return this.upstream.next();
    }
  }
  class WK extends Ht {
    constructor(e, n) {
      super(), this.upstream = e, this.maxCount = n, this.count = 0;
    }
    summary() {
      return `${this.upstream.summary()} -> Take`;
    }
    async next() {
      return this.count++ >= this.maxCount ? {
        value: null,
        done: true
      } : this.upstream.next();
    }
  }
  class UK extends Ht {
    constructor(e, n, s = true) {
      super(), this.upstream = e, this.batchSize = n, this.enableSmallLastBatch = s, this.lastRead = Promise.resolve({
        value: null,
        done: false
      });
    }
    summary() {
      return `${this.upstream.summary()} -> RowMajorBatch`;
    }
    async next() {
      return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
    }
    async serialNext() {
      const e = [];
      for (; e.length < this.batchSize; ) {
        const n = await this.upstream.next();
        if (n.done) return this.enableSmallLastBatch && e.length > 0 ? {
          value: e,
          done: false
        } : {
          value: null,
          done: true
        };
        e.push(n.value);
      }
      return {
        value: e,
        done: false
      };
    }
  }
  class GK extends Ht {
    constructor(e, n) {
      super(), this.upstream = e, this.predicate = n, this.lastRead = Promise.resolve({
        value: null,
        done: false
      });
    }
    summary() {
      return `${this.upstream.summary()} -> Filter`;
    }
    async next() {
      return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
    }
    async serialNext() {
      for (; ; ) {
        const e = await this.upstream.next();
        if (e.done || this.predicate(e.value)) return e;
        Oe(e.value);
      }
    }
  }
  class HK extends Ht {
    constructor(e, n) {
      super(), this.upstream = e, this.transform = n;
    }
    summary() {
      return `${this.upstream.summary()} -> Map`;
    }
    async next() {
      const e = await this.upstream.next();
      if (e.done) return {
        value: null,
        done: true
      };
      const n = Ir(e.value), s = this.transform(e.value), r = Ir(s);
      for (const o of n) kf(o, r) || o.dispose();
      return {
        value: s,
        done: false
      };
    }
  }
  class jK extends Ht {
    constructor(e, n) {
      super(), this.upstream = e, this.handler = n, this.count = 0, this.lastRead = Promise.resolve({
        value: null,
        done: false
      });
    }
    summary() {
      return `${this.upstream.summary()} -> handleErrors`;
    }
    async next() {
      return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
    }
    async serialNext() {
      for (; ; ) try {
        return await this.upstream.next();
      } catch (e) {
        if (!this.handler(e)) return {
          value: null,
          done: true
        };
      }
    }
  }
  class mS extends Ht {
    constructor(e, n) {
      super(), this.upstream = e, this.transform = n;
    }
    summary() {
      return `${this.upstream.summary()} -> AsyncMap`;
    }
    async next() {
      const e = await this.upstream.next();
      if (e.done) return {
        value: null,
        done: true
      };
      const n = Ir(e.value), s = await this.transform(e.value), r = Ir(s);
      for (const o of n) kf(o, r) || o.dispose();
      return {
        value: s,
        done: false
      };
    }
  }
  class A0 extends Ht {
    constructor() {
      super(), this.outputQueue = new Fm(), this.lastRead = Promise.resolve({
        value: null,
        done: false
      });
    }
    async next() {
      return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
    }
    async serialNext() {
      for (; this.outputQueue.length() === 0; ) if (!await this.pump()) return {
        value: null,
        done: true
      };
      return {
        value: this.outputQueue.shift(),
        done: false
      };
    }
  }
  class qK extends A0 {
    constructor(e, n) {
      super(), this.upstream = e, this.transform = n;
    }
    summary() {
      return `${this.upstream.summary()} -> Flatmap`;
    }
    async pump() {
      const e = await this.upstream.next();
      if (e.done) return false;
      const n = Ir(e.value), s = this.transform(e.value), r = Ir(s);
      this.outputQueue.pushAll(s);
      for (const o of n) kf(o, r) || o.dispose();
      return true;
    }
  }
  class DT extends Ht {
    constructor(e, n) {
      super(), this.baseErrorHandler = n, this.lastRead = null, this.iterator = null, this.moreIterators = e;
    }
    summary() {
      return "TODO: fill in upstream of chained summaries -> Chained";
    }
    async next() {
      return this.lastRead = this.readFromChain(this.lastRead), this.lastRead;
    }
    async readFromChain(e) {
      if (await e, this.iterator == null) {
        const s = await this.moreIterators.next();
        if (s.done) return {
          value: null,
          done: true
        };
        this.iterator = s.value, this.baseErrorHandler != null && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler));
      }
      const n = await this.iterator.next();
      return n.done ? (this.iterator = null, this.readFromChain(e)) : n;
    }
  }
  var Xr;
  (function(t) {
    t[t.FAIL = 0] = "FAIL", t[t.SHORTEST = 1] = "SHORTEST", t[t.LONGEST = 2] = "LONGEST";
  })(Xr || (Xr = {}));
  class KK extends Ht {
    constructor(e, n = Xr.FAIL) {
      super(), this.iterators = e, this.mismatchMode = n, this.count = 0, this.currentPromise = null;
    }
    summary() {
      return "{TODO: fill in upstream of zip summaries} -> Zip";
    }
    async nextState(e) {
      await e;
      let n = 0, s = 0;
      function r(i) {
        return i instanceof Ht ? {
          value: i.next().then((l) => (n++, l.done && s++, l.value)),
          recurse: false
        } : {
          value: null,
          recurse: true
        };
      }
      const o = await RT(this.iterators, r);
      if (n === s) return {
        value: null,
        done: true
      };
      if (s > 0) switch (this.mismatchMode) {
        case Xr.FAIL:
          throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);
        case Xr.SHORTEST:
          return {
            value: null,
            done: true
          };
        case Xr.LONGEST:
      }
      return this.count++, {
        value: o,
        done: false
      };
    }
    async next() {
      return this.currentPromise = this.nextState(this.currentPromise), this.currentPromise;
    }
  }
  class OT extends Ht {
    constructor(e, n) {
      super(), this.upstream = e, this.bufferSize = n, this.buffer = new AT(n);
    }
    summary() {
      return `${this.upstream.summary()} -> Prefetch`;
    }
    refill() {
      for (; !this.buffer.isFull(); ) {
        const e = this.upstream.next();
        this.buffer.push(e);
      }
    }
    next() {
      return this.refill(), this.buffer.shift();
    }
  }
  class XK extends OT {
    constructor(e, n, s) {
      super(e, n), this.upstream = e, this.windowSize = n, this.upstreamExhausted = false, this.random = dl.alea(s || Xt().toString()), this.lastRead = Promise.resolve({
        value: null,
        done: false
      });
    }
    async next() {
      return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
    }
    randomInt(e) {
      return Math.floor(this.random() * e);
    }
    chooseIndex() {
      return this.randomInt(this.buffer.length());
    }
    async serialNext() {
      for (this.upstreamExhausted || this.refill(); !this.buffer.isEmpty(); ) {
        const e = this.chooseIndex(), n = await this.buffer.shuffleExcise(e);
        if (n.done) this.upstreamExhausted = true;
        else return this.refill(), n;
      }
      return {
        value: null,
        done: true
      };
    }
  }
  class xl {
    constructor() {
      this.size = null;
    }
    batch(e, n = true) {
      const s = this;
      C(e > 0, () => `batchSize needs to be positive, but it is
      ${e}`);
      let r;
      return this.size === 1 / 0 || this.size == null ? r = this.size : n ? r = Math.ceil(this.size / e) : r = Math.floor(this.size / e), Bn(async () => (await s.iterator()).columnMajorBatch(e, n, JK), r);
    }
    concatenate(e) {
      const n = this;
      let s;
      return this.size === 1 / 0 || e.size === 1 / 0 ? s = 1 / 0 : this.size != null && e.size != null ? s = this.size + e.size : s = null, Bn(async () => (await n.iterator()).concatenate(await e.iterator()), s);
    }
    filter(e) {
      const n = this;
      let s;
      return this.size === 1 / 0 ? s = 1 / 0 : s = null, Bn(async () => (await n.iterator()).filter((r) => q(() => e(r))), s);
    }
    async forEachAsync(e) {
      return (await this.iterator()).forEachAsync(e);
    }
    map(e) {
      const n = this;
      return Bn(async () => (await n.iterator()).map((s) => q(() => e(s))), this.size);
    }
    mapAsync(e) {
      const n = this;
      return Bn(async () => (await n.iterator()).mapAsync(e), this.size);
    }
    prefetch(e) {
      if (e == null) throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
      const n = this;
      return Bn(async () => (await n.iterator()).prefetch(e), this.size);
    }
    repeat(e) {
      const n = this;
      let s;
      return this.size != null && e > 0 ? s = this.size * e : e === 0 ? s = 0 : this.size != null && (e === void 0 || e < 0) ? s = 1 / 0 : s = null, Bn(async () => {
        const r = R0(async () => ({
          value: await n.iterator(),
          done: false
        }));
        return LK(r.take(e));
      }, s);
    }
    skip(e) {
      const n = this;
      let s;
      return this.size != null && e >= 0 && this.size >= e ? s = this.size - e : this.size != null && (this.size < e || e === void 0 || e < 0) ? s = 0 : s = null, Bn(async () => (await n.iterator()).skip(e), s);
    }
    shuffle(e, n, s = true) {
      if (e == null || e < 0) throw this.size == null ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);
      const r = this, o = dl.alea(n || Xt().toString());
      return Bn(async () => {
        let i = o.int32();
        return s && (i += o.int32()), (await r.iterator()).shuffle(e, i.toString());
      }, this.size);
    }
    take(e) {
      const n = this;
      let s;
      return this.size != null && this.size > e ? s = e : this.size != null && this.size <= e ? s = this.size : s = null, Bn(async () => (await n.iterator()).take(e), s);
    }
    async toArray() {
      if (this.size === 1 / 0) throw new Error("Can not convert infinite data stream to array.");
      return (await this.iterator()).toArray();
    }
    async toArrayForTest() {
      if (this.size === 1 / 0) throw new Error("Can not convert infinite data stream to array.");
      return (await this.iterator()).toArrayForTest();
    }
  }
  xl.MAX_BUFFER_SIZE = 1e4;
  function Bn(t, e = null) {
    return new class extends xl {
      constructor() {
        super(...arguments), this.size = e;
      }
      async iterator() {
        return t();
      }
    }();
  }
  function YK(t) {
    return Bn(async () => _T(t), t.length);
  }
  function ZK(t) {
    if (!aa(t)) throw new Error("The argument to zip() must be an object or array.");
    let e;
    if (Array.isArray(t)) for (let n = 0; n < t.length; n++) e = e == null ? t[n].size : Math.min(e, t[n].size);
    else if (t instanceof Object) for (const n in t) e = e == null ? t[n].size : Math.min(e, t[n].size);
    return Bn(async () => {
      const n = await RT(t, (s) => {
        if (s instanceof xl) return {
          value: s.iterator(),
          recurse: false
        };
        if (aa(s)) return {
          value: null,
          recurse: true
        };
        throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
      });
      return PK(n, Xr.SHORTEST);
    }, e);
  }
  function JK(t) {
    if (t === null) return null;
    const e = t[0];
    return _K(e) ? {
      value: QK(t),
      recurse: false
    } : {
      value: null,
      recurse: true
    };
  }
  function QK(t) {
    if (t.length === 0) throw new Error("Can't make a batch of zero elements.");
    return t[0] instanceof Xe ? yn(t) : Un(t);
  }
  class FT extends xl {
    constructor(e) {
      super(), this.input = e;
    }
    async iterator() {
      return (await this.input.iterator()).decodeUTF8().split(`
`).map((r) => (r.endsWith("\r") && (r = r.slice(0, -1)), r));
    }
  }
  const Ph = '"', Ll = Symbol("out"), gS = Symbol("field"), zh = Symbol("quote"), gg = Symbol("quoteafterquote"), yS = Symbol("quoteinquote");
  class LT extends xl {
    async columnNames() {
      return this.columnNamesValidated || await this.setColumnNames(), this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;
    }
    async setColumnNames() {
      const e = await this.maybeReadHeaderLine();
      if (!this.fullColumnNames && !e) throw new Error("Column names must be provided if there is no header line.");
      this.fullColumnNames && e && C(e.length === this.fullColumnNames.length, () => "The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + e.length.toString() + ")."), this.fullColumnNames || (this.fullColumnNames = e);
      const n = this.fullColumnNames.reduce((r, o) => (r[o] = r[o] + 1 || 1, r), {}), s = Object.keys(n).filter((r) => n[r] > 1);
      if (C(s.length === 0, () => "Duplicate column names found: " + s.toString()), this.columnConfigs) {
        for (const r of Object.keys(this.columnConfigs)) if (this.fullColumnNames.indexOf(r) === -1) throw new Error('The key "' + r + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").");
      }
      this.columnNamesValidated = true;
    }
    async maybeReadHeaderLine() {
      if (this.hasHeader) {
        const n = await (await this.base.iterator()).next();
        if (n.done) throw new Error("No data was found for CSV parsing.");
        const s = n.value;
        return this.parseRow(s, false);
      } else return null;
    }
    constructor(e, n) {
      super(), this.input = e, this.hasHeader = true, this.fullColumnNames = null, this.columnNamesValidated = false, this.columnConfigs = null, this.configuredColumnsOnly = false, this.delimiter = ",", this.delimWhitespace = false, this.base = new FT(e), n || (n = {}), this.hasHeader = n.hasHeader !== false, this.fullColumnNames = n.columnNames, this.columnConfigs = n.columnConfigs, this.configuredColumnsOnly = n.configuredColumnsOnly, n.delimWhitespace ? (C(n.delimiter == null, () => "Delimiter should not be provided when delimWhitespace is true."), this.delimWhitespace = true, this.delimiter = " ") : this.delimiter = n.delimiter ? n.delimiter : ",";
    }
    async iterator() {
      this.columnNamesValidated || await this.setColumnNames();
      let e = await this.base.iterator();
      return this.hasHeader && (e = e.skip(1)), e.map((n) => this.makeDataElement(n));
    }
    makeDataElement(e) {
      const n = this.parseRow(e), s = {}, r = {};
      for (let o = 0; o < this.fullColumnNames.length; o++) {
        const i = this.fullColumnNames[o], a = this.columnConfigs ? this.columnConfigs[i] : null;
        if (!(this.configuredColumnsOnly && !a)) {
          const l = n[o];
          let c = null;
          if (l === "") if (a && a.default !== void 0) c = a.default;
          else {
            if (a && (a.required || a.isLabel)) throw new Error(`Required column ${i} is empty in this line: ${e}`);
            c = void 0;
          }
          else {
            const u = Number(l);
            if (isNaN(u)) a && a.dtype === "bool" ? c = this.getBoolean(l) : c = l;
            else if (!a || !a.dtype) c = u;
            else switch (a.dtype) {
              case "float32":
                c = u;
                break;
              case "int32":
                c = Math.floor(u);
                break;
              case "bool":
                c = this.getBoolean(l);
                break;
              default:
                c = u;
            }
          }
          a && a.isLabel ? r[i] = c : s[i] = c;
        }
      }
      return Object.keys(r).length === 0 ? s : {
        xs: s,
        ys: r
      };
    }
    getBoolean(e) {
      return e === "1" || e.toLowerCase() === "true" ? 1 : 0;
    }
    parseRow(e, n = true) {
      const s = [];
      let r = 0;
      const o = e.length;
      let i = Ll;
      for (let a = 0; a < o; a++) switch (i) {
        case Ll:
          switch (e.charAt(a)) {
            case Ph:
              r = a + 1, i = zh;
              break;
            case this.delimiter:
              if (r = a + 1, this.delimiter === " " && this.delimWhitespace) break;
              s.push(""), i = Ll;
              break;
            default:
              i = gS, r = a;
              break;
          }
          break;
        case gS:
          switch (e.charAt(a)) {
            case this.delimiter:
              s.push(e.substring(r, a)), i = Ll, r = a + 1;
              break;
          }
          break;
        case zh:
          switch (e.charAt(a)) {
            case Ph:
              i = gg;
              break;
          }
          break;
        case gg:
          switch (e.charAt(a)) {
            case this.delimiter:
              s.push(e.substring(r, a - 1)), i = Ll, r = a + 1;
              break;
            case Ph:
              i = zh;
              break;
            default:
              i = yS;
              break;
          }
          break;
        case yS:
          switch (e.charAt(a)) {
            case Ph:
              i = zh;
              break;
          }
          break;
      }
      if (i === gg ? s.push(e.substring(r, o - 1)) : s.push(e.substring(r)), n && s.length !== this.fullColumnNames.length) throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${s}`);
      return s;
    }
  }
  class _0 extends Ht {
    constructor(e) {
      super(), this.microphoneConfig = e, this.isClosed = false, this.fftSize = e.fftSize || 1024;
      const n = Math.log2(this.fftSize);
      if (this.fftSize < 0 || n < 4 || n > 14 || !Number.isInteger(n)) throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);
      if (this.numFrames = e.numFramesPerSpectrogram || 43, this.sampleRateHz = e.sampleRateHz, this.columnTruncateLength = e.columnTruncateLength || this.fftSize, this.audioTrackConstraints = e.audioTrackConstraints, this.smoothingTimeConstant = e.smoothingTimeConstant || 0, this.includeSpectrogram = e.includeSpectrogram !== false, this.includeWaveform = e.includeWaveform === true, !this.includeSpectrogram && !this.includeWaveform) throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");
    }
    summary() {
      return "microphone";
    }
    static async create(e = {}) {
      if (!j().get("IS_BROWSER")) throw new Error("microphone API is only supported in browser environment.");
      const n = new _0(e);
      return await n.start(), n;
    }
    async start() {
      try {
        this.stream = await navigator.mediaDevices.getUserMedia({
          audio: this.audioTrackConstraints == null ? true : this.audioTrackConstraints,
          video: false
        });
      } catch (s) {
        throw new Error(`Error thrown while initializing video stream: ${s.message}`);
      }
      if (!this.stream) throw new Error("Could not obtain audio from microphone.");
      const e = window.AudioContext || window.webkitAudioContext;
      if (this.audioContext = new e(), !this.sampleRateHz) this.sampleRateHz = this.audioContext.sampleRate;
      else if (this.audioContext.sampleRate !== this.sampleRateHz) throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`);
      const n = this.audioContext.createMediaStreamSource(this.stream);
      this.analyser = this.audioContext.createAnalyser(), this.analyser.fftSize = this.fftSize * 2, this.analyser.smoothingTimeConstant = this.smoothingTimeConstant, n.connect(this.analyser), this.freqData = new Float32Array(this.fftSize), this.timeData = new Float32Array(this.fftSize);
    }
    async next() {
      if (this.isClosed) return {
        value: null,
        done: true
      };
      let e, n;
      const s = await this.getAudioData();
      if (this.includeSpectrogram) {
        const r = this.flattenQueue(s.freqDataQueue);
        e = this.getTensorFromAudioDataArray(r, [
          this.numFrames,
          this.columnTruncateLength,
          1
        ]);
      }
      if (this.includeWaveform) {
        const r = this.flattenQueue(s.timeDataQueue);
        n = this.getTensorFromAudioDataArray(r, [
          this.numFrames * this.fftSize,
          1
        ]);
      }
      return {
        value: {
          spectrogram: e,
          waveform: n
        },
        done: false
      };
    }
    async capture() {
      return (await this.next()).value;
    }
    async getAudioData() {
      const e = [], n = [];
      let s = 0;
      return new Promise((r) => {
        const o = setInterval(() => {
          this.includeSpectrogram && (this.analyser.getFloatFrequencyData(this.freqData), this.freqData[0] === -1 / 0 && r({
            freqDataQueue: e,
            timeDataQueue: n
          }), e.push(this.freqData.slice(0, this.columnTruncateLength))), this.includeWaveform && (this.analyser.getFloatTimeDomainData(this.timeData), n.push(this.timeData.slice())), ++s === this.numFrames && (clearInterval(o), r({
            freqDataQueue: e,
            timeDataQueue: n
          }));
        }, this.fftSize / this.sampleRateHz * 1e3);
      });
    }
    stop() {
      this.isClosed || (this.isClosed = true, this.analyser.disconnect(), this.audioContext.close(), this.stream != null && this.stream.getTracks().length > 0 && this.stream.getTracks()[0].stop());
    }
    toArray() {
      throw new Error("Can not convert infinite audio stream to array.");
    }
    getSampleRate() {
      return this.sampleRateHz;
    }
    flattenQueue(e) {
      const n = e[0].length, s = new Float32Array(e.length * n);
      return e.forEach((r, o) => s.set(r, o * n)), s;
    }
    getTensorFromAudioDataArray(e, n) {
      const s = new Float32Array(X(n));
      return s.set(e, s.length - e.length), Un(s, n);
    }
  }
  class D0 extends Ht {
    constructor(e, n) {
      if (super(), this.webcamVideoElement = e, this.webcamConfig = n, this.isClosed = true, this.resize = false, this.needToResize()) if (this.resize = true, this.cropSize = [
        this.webcamConfig.resizeHeight,
        this.webcamConfig.resizeWidth
      ], this.cropBoxInd = en([
        0
      ], "int32"), this.webcamConfig.centerCrop) {
        const s = this.webcamConfig.resizeWidth * 1 / this.webcamVideoElement.width, r = this.webcamConfig.resizeHeight * 1 / this.webcamVideoElement.height, o = (1 - s) / 2, i = (1 - r) / 2, a = o + s, l = r + i;
        this.cropBox = eo([
          i,
          o,
          l,
          a
        ], [
          1,
          4
        ]);
      } else this.cropBox = eo([
        0,
        0,
        1,
        1
      ], [
        1,
        4
      ]);
    }
    summary() {
      return "webcam";
    }
    static async create(e, n = {}) {
      if (!j().get("IS_BROWSER")) throw new Error("tf.data.webcam is only supported in browser environment.");
      if (!e) {
        if (e = document.createElement("video"), !n.resizeWidth || !n.resizeHeight) throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");
        e.width = n.resizeWidth, e.height = n.resizeHeight;
      }
      const s = new D0(e, n);
      return await s.start(), s;
    }
    async start() {
      this.webcamConfig.facingMode && C(this.webcamConfig.facingMode === "user" || this.webcamConfig.facingMode === "environment", () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);
      try {
        this.stream = await navigator.mediaDevices.getUserMedia({
          video: {
            deviceId: this.webcamConfig.deviceId,
            facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : "user",
            width: this.webcamVideoElement.width,
            height: this.webcamVideoElement.height
          }
        });
      } catch (e) {
        throw e.message = `Error thrown while initializing video stream: ${e.message}`, e;
      }
      if (!this.stream) throw new Error("Could not obtain video from webcam.");
      try {
        this.webcamVideoElement.srcObject = this.stream;
      } catch (e) {
        console.log(e), this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);
      }
      return this.webcamVideoElement.play(), this.isClosed = false, new Promise((e) => {
        this.webcamVideoElement.onloadedmetadata = () => {
          e();
        };
      });
    }
    async next() {
      if (this.isClosed) return {
        value: null,
        done: true
      };
      let e;
      try {
        e = NN(this.webcamVideoElement);
      } catch (n) {
        throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(n)}`);
      }
      if (this.resize) try {
        return {
          value: this.cropAndResizeFrame(e),
          done: false
        };
      } catch (n) {
        throw new Error(`Error thrown cropping the video: ${n.message}`);
      } finally {
        e.dispose();
      }
      else return {
        value: e,
        done: false
      };
    }
    needToResize() {
      return !!(this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight));
    }
    cropAndResizeFrame(e) {
      return q(() => {
        const n = Yt(ge(e, "float32"), 0);
        let s;
        s = ps.cropAndResize(n, this.cropBox, this.cropBoxInd, this.cropSize, "bilinear");
        const r = s.shape;
        return P(s, r.slice(1));
      });
    }
    async capture() {
      return (await this.next()).value;
    }
    stop() {
      this.stream.getTracks().forEach((n) => n.stop());
      try {
        this.webcamVideoElement.srcObject = null;
      } catch (n) {
        console.log(n), this.webcamVideoElement.src = null;
      }
      this.isClosed = true;
    }
    toArray() {
      throw new Error("Can not convert infinite video stream to array.");
    }
  }
  class PT {
  }
  class zT extends Ht {
    split(e) {
      return new e6(this, e);
    }
  }
  class e6 extends zT {
    constructor(e, n) {
      super(), this.upstream = e, this.impl = new t6(e, n);
    }
    summary() {
      return this.impl.summary();
    }
    async next() {
      return this.impl.next();
    }
  }
  class t6 extends A0 {
    constructor(e, n) {
      super(), this.upstream = e, this.separator = n, this.carryover = "";
    }
    summary() {
      return `${this.upstream.summary()} -> Split('${this.separator}')`;
    }
    async pump() {
      const e = await this.upstream.next();
      if (e.done) return this.carryover === "" ? false : (this.outputQueue.push(this.carryover), this.carryover = "", true);
      const n = e.value.split(this.separator);
      n[0] = this.carryover + n[0];
      for (const s of n.slice(0, -1)) this.outputQueue.push(s);
      return this.carryover = n[n.length - 1], true;
    }
  }
  class n6 extends Ht {
    decodeUTF8() {
      return new s6(this);
    }
  }
  class s6 extends zT {
    constructor(e) {
      super(), this.upstream = e, this.impl = new r6(e);
    }
    summary() {
      return this.impl.summary();
    }
    async next() {
      return this.impl.next();
    }
  }
  class r6 extends A0 {
    constructor(e) {
      if (super(), this.upstream = e, j().get("IS_BROWSER")) this.decoder = new TextDecoder("utf-8");
      else {
        const { StringDecoder: n } = require("string_decoder");
        this.decoder = new n("utf8");
      }
    }
    summary() {
      return `${this.upstream.summary()} -> Utf8`;
    }
    async pump() {
      const e = await this.upstream.next();
      let n;
      if (e.done) return false;
      n = e.value;
      let s;
      return j().get("IS_BROWSER") ? s = this.decoder.decode(n, {
        stream: true
      }) : s = this.decoder.write(Buffer.from(n.buffer)), this.outputQueue.push(s), true;
    }
  }
  class MT extends n6 {
    constructor(e, n = {}) {
      super(), this.file = e, this.options = n, C(e instanceof Uint8Array || (j().get("IS_BROWSER") ? e instanceof File || e instanceof Blob : false), () => "FileChunkIterator only supports File, Blob and Uint8Array right now."), this.offset = n.offset || 0, this.chunkSize = n.chunkSize || 1024 * 1024;
    }
    summary() {
      return `FileChunks ${this.file}`;
    }
    async next() {
      return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? {
        value: null,
        done: true
      } : {
        value: await new Promise((n, s) => {
          const r = this.offset + this.chunkSize;
          if (this.file instanceof Uint8Array) n(new Uint8Array(this.file.slice(this.offset, r)));
          else {
            const o = new FileReader();
            o.onload = (a) => {
              let l = o.result;
              if (l instanceof ArrayBuffer && (l = new Uint8Array(l)), !(l instanceof Uint8Array)) return s(new TypeError("FileReader returned unknown type."));
              n(l);
            }, o.onabort = (a) => s(new Error("Aborted")), o.onerror = (a) => s(new Error(a.type));
            const i = this.file.slice(this.offset, r);
            o.readAsArrayBuffer(i);
          }
          this.offset = r;
        }),
        done: false
      };
    }
  }
  async function o6(t, e = {}, n) {
    let s, r;
    typeof t == "string" ? s = t : (s = t.url, r = i6(t));
    const o = await UC(s, r);
    if (o.ok) {
      const i = new Uint8Array(await o.arrayBuffer());
      return new MT(i, e);
    } else throw new Error(o.statusText);
  }
  const i6 = (t) => ({
    method: t.method,
    headers: t.headers,
    body: t.body,
    mode: t.mode,
    credentials: t.credentials,
    cache: t.cache,
    redirect: t.redirect,
    referrer: t.referrer,
    integrity: t.integrity
  });
  function BT(t) {
    return typeof t == "string" && t.slice(0, 7) === "file://";
  }
  class VT extends PT {
    constructor(e, n = {}) {
      super(), this.input = e, this.options = n;
    }
    async iterator() {
      if (BT(this.input) && j().get("IS_NODE")) {
        const e = require("fs");
        this.input = e.readFileSync(this.input.slice(7));
      }
      return new MT(this.input, this.options);
    }
  }
  class WT extends PT {
    constructor(e, n = {}) {
      super(), this.url = e, this.fileOptions = n;
    }
    async iterator() {
      return BT(this.url) ? new VT(this.url, this.fileOptions).iterator() : o6(this.url, this.fileOptions);
    }
  }
  function a6(t, e = {}) {
    return new LT(new WT(t), e);
  }
  function l6(t) {
    const e = R0(t);
    return Bn(async () => e);
  }
  function c6(t) {
    return Bn(async () => {
      const e = await t();
      return R0(() => e.next());
    });
  }
  async function u6(t, e) {
    return D0.create(t, e);
  }
  async function h6(t) {
    return _0.create(t);
  }
  const UT = "4.19.0";
  const d6 = Object.freeze(Object.defineProperty({
    __proto__: null,
    CSVDataset: LT,
    Dataset: xl,
    FileDataSource: VT,
    TextLineDataset: FT,
    URLDataSource: WT,
    array: YK,
    csv: a6,
    func: l6,
    generator: c6,
    microphone: h6,
    version_data: UT,
    webcam: u6,
    zip: ZK
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  function Ce(t, e) {
    Array.isArray(t) || (t = [
      t
    ]), t.forEach((n) => {
      n != null && C(n.dtype !== "complex64", () => `${e} does not support complex64 tensors in the CPU backend.`);
    });
  }
  const p6 = em;
  class yh extends gp {
    nextDataId() {
      return yh.nextDataId++;
    }
    constructor() {
      super(), this.blockSize = 48, this.firstUse = true, this.data = new Zy(this, $s());
    }
    write(e, n, s) {
      this.firstUse && (this.firstUse = false, j().get("IS_NODE") && Yn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
      const r = {
        id: this.nextDataId()
      };
      return this.data.set(r, {
        values: e,
        dtype: s,
        refCount: 1
      }), r;
    }
    makeTensorInfo(e, n, s) {
      let r;
      if (n === "string" && s != null && s.length > 0 && Xs(s[0])) {
        const o = s.map((i) => Qs(i));
        r = this.write(o, e, n);
      } else r = this.write(s, e, n);
      return {
        dataId: r,
        shape: e,
        dtype: n
      };
    }
    refCount(e) {
      return this.data.has(e) ? this.data.get(e).refCount : 0;
    }
    incRef(e) {
      const n = this.data.get(e);
      n.refCount++;
    }
    decRef(e) {
      if (this.data.has(e)) {
        const n = this.data.get(e);
        n.refCount--;
      }
    }
    move(e, n, s, r, o) {
      this.data.set(e, {
        values: n,
        dtype: r,
        refCount: o
      });
    }
    numDataIds() {
      return this.data.numDataIds();
    }
    async read(e) {
      return this.readSync(e);
    }
    readSync(e) {
      const { dtype: n, complexTensorInfos: s } = this.data.get(e);
      if (n === "complex64") {
        const r = this.readSync(s.real.dataId), o = this.readSync(s.imag.dataId);
        return Tr(r, o);
      }
      return AC(this.data.get(e).values, n);
    }
    bufferSync(e) {
      const n = this.readSync(e.dataId);
      if (e.dtype === "string") try {
        const s = n.map((r) => Cr(r));
        return Me(e.shape, e.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
      return Me(e.shape, e.dtype, n);
    }
    makeOutput(e, n, s) {
      return $s().makeTensorFromTensorInfo(this.makeTensorInfo(n, s, e), this);
    }
    disposeData(e, n = false) {
      if (this.data.has(e)) {
        if (this.data.get(e).refCount--, !n && this.data.get(e).refCount > 0) return false;
        const { complexTensorInfos: s } = this.data.get(e);
        s != null && (this.disposeData(s.real.dataId, true), this.disposeData(s.imag.dataId, true)), this.data.delete(e);
      }
      return true;
    }
    disposeIntermediateTensorInfo(e) {
      this.disposeData(e.dataId);
    }
    async time(e) {
      const n = Xt();
      return e(), {
        kernelMs: Xt() - n
      };
    }
    memory() {
      return {
        unreliable: true,
        reasons: [
          "The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."
        ]
      };
    }
    where(e) {
      Ce([
        e
      ], "where");
      const n = this.readSync(e.dataId);
      return p6(e.shape, n);
    }
    dispose() {
    }
    floatPrecision() {
      return 32;
    }
    epsilon() {
      return super.epsilon();
    }
  }
  yh.nextDataId = 0;
  function GT(t) {
    const e = new Float32Array(t.length);
    for (let n = 0; n < t.length; ++n) e[n] = Math.abs(t[n]);
    return e;
  }
  const f6 = (t) => {
    const { x: e } = t.inputs, n = t.backend;
    Ce(e, "abs");
    let s = new Float32Array(X(e.shape));
    const r = n.data.get(e.dataId).values;
    return s = GT(r), n.makeOutput(s, e.shape, e.dtype);
  }, m6 = {
    kernelName: Lc,
    backendName: "cpu",
    kernelFunc: f6
  };
  function Nt(t) {
    return (e, n, s, r, o) => {
      const i = Fe(e, n), a = i.length, l = Ee(i), c = X(i), u = Ut(o, c), h = e.length, d = n.length, p = Ee(e), f = Ee(n), m = ri(e, i), g = ri(n, i);
      if (m.length + g.length === 0) for (let y = 0; y < u.length; ++y) u[y] = t(s[y % s.length], r[y % r.length]);
      else for (let y = 0; y < u.length; ++y) {
        const b = bi(y, a, l), w = b.slice(-h);
        m.forEach((E) => w[E] = 0);
        const x = ks(w, h, p), S = b.slice(-d);
        g.forEach((E) => S[E] = 0);
        const I = ks(S, d, f);
        u[y] = t(s[x], r[I]);
      }
      return [
        u,
        i
      ];
    };
  }
  function Wn(t) {
    const { inputs: e, backend: n } = t, { real: s, imag: r } = e, o = n.data.get(s.dataId).values, i = n.data.get(r.dataId).values, a = n.makeTensorInfo(s.shape, "complex64"), l = n.data.get(a.dataId);
    return l.complexTensorInfos = {
      real: n.makeTensorInfo(s.shape, "float32", o),
      imag: n.makeTensorInfo(r.shape, "float32", i)
    }, a;
  }
  const g6 = {
    kernelName: Ip,
    backendName: "cpu",
    kernelFunc: Wn
  };
  function Gd(t, e, n = "float32") {
    if (n === "complex64") {
      const r = Gd(t, e, "float32"), o = Gd(t, e, "float32");
      return Wn({
        inputs: {
          real: r,
          imag: o
        },
        backend: t
      });
    }
    const s = tn(X(e), n);
    return t.makeTensorInfo(e, n, s);
  }
  function cr(t) {
    const { inputs: e, backend: n } = t, { x: s } = e;
    return n.incRef(s.dataId), {
      dataId: s.dataId,
      shape: s.shape,
      dtype: s.dtype
    };
  }
  const y6 = {
    kernelName: Aa,
    backendName: "cpu",
    kernelFunc: cr
  };
  function hi(t) {
    const { inputs: e, backend: n } = t, { input: s } = e, r = n.data.get(s.dataId).complexTensorInfos.real, o = n.data.get(r.dataId).values;
    return n.makeTensorInfo(r.shape, r.dtype, o);
  }
  const b6 = {
    kernelName: rf,
    backendName: "cpu",
    kernelFunc: hi
  };
  function HT(t, e, n, s) {
    if (s === "int32") {
      const r = Int32Array.from(t);
      return [
        e,
        "int32",
        r
      ];
    }
    if (s === "bool") {
      const r = xo([
        0
      ], n), [o, i] = Nt((a, l) => a !== l ? 1 : 0)(e, [], t, r, "bool");
      return [
        i,
        "bool",
        o
      ];
    }
    throw new Error(`Error in Cast: failed to cast ${n} to ${s}`);
  }
  function mo(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { dtype: o } = s;
    if (o === "complex64") {
      if (r.dtype === "complex64") return cr({
        inputs: {
          x: r
        },
        backend: n
      });
      const u = Gd(n, r.shape, r.dtype), h = mo({
        inputs: {
          x: r
        },
        backend: n,
        attrs: {
          dtype: "float32"
        }
      }), d = Wn({
        inputs: {
          real: h,
          imag: u
        },
        backend: n
      });
      return n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(h), d;
    }
    if (r.dtype === "complex64") {
      const u = hi({
        inputs: {
          input: r
        },
        backend: n
      }), h = mo({
        inputs: {
          x: u
        },
        backend: n,
        attrs: {
          dtype: o
        }
      });
      return n.disposeIntermediateTensorInfo(u), h;
    }
    if (!eb(r.dtype, o)) {
      const u = cr({
        inputs: {
          x: r
        },
        backend: n
      });
      return {
        dataId: u.dataId,
        shape: u.shape,
        dtype: o
      };
    }
    const i = n.data.get(r.dataId).values, [a, l, c] = HT(i, r.shape, r.dtype, o);
    return n.makeTensorInfo(a, l, c);
  }
  const x6 = {
    kernelName: ba,
    backendName: "cpu",
    kernelFunc: mo
  };
  function Pt(t, e, n, s) {
    return n == null ? ({ inputs: r, backend: o }) => {
      const { a: i, b: a } = r, l = o;
      Ce([
        i,
        a
      ], t);
      const c = l.data.get(i.dataId).values, u = l.data.get(a.dataId).values, h = i.dtype === "string" ? Er(c) : c, d = i.dtype === "string" ? Er(u) : u, p = s || i.dtype, [f, m] = e(i.shape, a.shape, h, d, p);
      return l.makeTensorInfo(m, p, f);
    } : ({ inputs: r, backend: o }) => {
      const { a: i, b: a } = r, l = o;
      if (i.dtype === "complex64" || a.dtype === "complex64") {
        const c = mo({
          inputs: {
            x: i
          },
          backend: l,
          attrs: {
            dtype: "complex64"
          }
        }), u = l.data.get(c.dataId), h = u.complexTensorInfos.real, d = u.complexTensorInfos.imag, p = l.data.get(h.dataId).values, f = l.data.get(d.dataId).values, m = mo({
          inputs: {
            x: a
          },
          backend: l,
          attrs: {
            dtype: "complex64"
          }
        }), g = l.data.get(m.dataId), y = g.complexTensorInfos.real, b = g.complexTensorInfos.imag, w = l.data.get(y.dataId).values, x = l.data.get(b.dataId).values, [S, I, E] = n(i.shape, a.shape, p, f, w, x), R = l.makeTensorInfo(E, "float32", S), N = l.makeTensorInfo(E, "float32", I), k = Wn({
          inputs: {
            real: R,
            imag: N
          },
          backend: l
        });
        return l.disposeIntermediateTensorInfo(c), l.disposeIntermediateTensorInfo(m), l.disposeIntermediateTensorInfo(R), l.disposeIntermediateTensorInfo(N), k;
      } else {
        const c = l.data.get(i.dataId).values, u = l.data.get(a.dataId).values, h = s || i.dtype, [d, p] = e(i.shape, a.shape, c, u, h);
        return l.makeTensorInfo(p, h, d);
      }
    };
  }
  function O0(t) {
    return (e, n, s, r, o, i) => {
      const a = Fe(e, n), l = X(a), c = a.length, u = Ee(a), h = Ut("float32", l), d = Ut("float32", l), p = ri(e, a), f = ri(n, a), m = Tr(s, r), g = Tr(o, i), y = e.length, b = Ee(e), w = n.length, x = Ee(n);
      if (p.length + f.length === 0) for (let S = 0; S < h.length; S++) {
        const I = S % m.length, E = S % g.length, R = t(m[I * 2], m[I * 2 + 1], g[E * 2], g[E * 2 + 1]);
        h[S] = R.real, d[S] = R.imag;
      }
      else for (let S = 0; S < h.length; S++) {
        const I = bi(S, c, u), E = I.slice(-y);
        p.forEach((F) => E[F] = 0);
        const R = ks(E, y, b), N = I.slice(-w);
        f.forEach((F) => N[F] = 0);
        const k = ks(N, w, x), $ = t(m[R * 2], m[R * 2 + 1], g[k * 2], g[k * 2 + 1]);
        h[S] = $.real, d[S] = $.imag;
      }
      return [
        h,
        d,
        a
      ];
    };
  }
  const jT = Nt((t, e) => t + e), w6 = O0((t, e, n, s) => ({
    real: t + n,
    imag: e + s
  })), la = Pt(xi, jT, w6), v6 = {
    kernelName: xi,
    backendName: "cpu",
    kernelFunc: la
  };
  function F0(t, e, n, s, r) {
    const o = X(s), i = tn(r, n);
    for (let a = 0; a < t.length; a++) {
      const l = t[a];
      if (l < 0) throw new Error("Input x must be non-negative!");
      l >= r || (o > 0 ? i[l] += e[a] : i[l] += 1);
    }
    return i;
  }
  function qT(t, e, n, s = false) {
    const r = t.shape[0], o = t.shape[1], i = Me([
      r,
      n
    ], e.dtype);
    for (let a = 0; a < r; a++) for (let l = 0; l < o; l++) {
      const c = t.get(a, l);
      if (c < 0) throw new Error("Input x must be non-negative!");
      c >= n || (s ? i.set(1, a, c) : e.size > 0 ? i.set(i.get(a, c) + e.get(a, l), a, c) : i.set(i.get(a, c) + 1, a, c));
    }
    return i;
  }
  const KT = Nt((t, e) => t & e), S6 = Pt(Gc, KT), $6 = {
    kernelName: Gc,
    backendName: "cpu",
    kernelFunc: S6
  };
  function hr(t) {
    return (e, n, s) => {
      const r = xt(n, e.length);
      for (let o = 0; o < e.length; ++o) r[o] = t(e[o], s);
      return r;
    };
  }
  function nt(t, e, n) {
    const s = hr(e);
    return ko(t, s, n);
  }
  function ko(t, e, n) {
    return ({ inputs: s, attrs: r, backend: o }) => {
      const { x: i } = s;
      Ce(i, t);
      const a = o, l = a.data.get(i.dataId).values;
      let c;
      if (i.dtype === "string") {
        if (!Array.isArray(l)) throw new Error("String tensor's value was not an instance of Array");
        c = Er(l);
      } else c = l;
      const u = n || i.dtype, h = e(c, u, r);
      return a.makeTensorInfo(i.shape, u, h);
    };
  }
  const XT = hr((t) => Math.ceil(t)), C6 = ko(xa, XT), I6 = {
    kernelName: xa,
    backendName: "cpu",
    kernelFunc: C6
  };
  YT = function(t, e, n, s) {
    const r = xt(n, X(e));
    if (s && n !== "string") {
      let o = 0;
      t.forEach((i) => {
        const a = X(i.shape);
        r.set(i.vals, o), o += a;
      });
    } else {
      let o = 0;
      t.forEach((i) => {
        const a = n === "string" ? Er(i.vals) : i.vals;
        let l = 0;
        for (let c = 0; c < i.shape[0]; ++c) {
          const u = c * e[1] + o;
          for (let h = 0; h < i.shape[1]; ++h) r[u + h] = a[l++];
        }
        o += i.shape[1];
      });
    }
    return r;
  };
  const ZT = Nt((t, e) => t === e ? 1 : 0), JT = Pt(Qc, ZT, null, "bool"), N6 = {
    kernelName: Qc,
    backendName: "cpu",
    kernelFunc: JT
  };
  const QT = hr((t) => Math.exp(t)), eE = ko(Na, QT, "float32"), k6 = {
    kernelName: Na,
    backendName: "cpu",
    kernelFunc: eE
  };
  const tE = hr((t) => Math.expm1(t)), T6 = ko(ka, tE), E6 = {
    kernelName: ka,
    backendName: "cpu",
    kernelFunc: T6
  };
  const nE = hr((t) => Math.floor(t)), R6 = ko(Ta, nE), A6 = {
    kernelName: Ta,
    backendName: "cpu",
    kernelFunc: R6
  };
  const sE = Nt((t, e) => Math.floor(t / e)), _6 = Pt(Ea, sE, null, "int32"), D6 = {
    kernelName: Ea,
    backendName: "cpu",
    kernelFunc: _6
  };
  function rE(t, e, n, s, r, o, i, a, l) {
    const c = Me([
      s,
      o
    ], n);
    for (let u = 0; u < s; u++) {
      const h = [];
      let d = 0;
      for (let p = 0; p < r; p++) {
        const f = t[u * r + p];
        d += f * i[p], h.push(f);
      }
      if (d < 0 || d >= l / o) throw new Error(`Invalid indices: ${h} does not index into ${a}`);
      for (let p = 0; p < o; p++) c.values[u * o + p] = e.get(...e.indexToLoc(d * o + p));
    }
    return c;
  }
  function oE(t, e, n) {
    const s = Me(n, t.dtype);
    for (let r = 0; r < s.size; ++r) {
      const i = s.indexToLoc(r).slice(), a = i[0], l = i[2], c = e.locToIndex([
        a,
        l
      ]);
      i[2] = e.values[c];
      const u = t.locToIndex(i);
      0 <= u && u < t.values.length && (s.values[r] = t.values[u]);
    }
    return s;
  }
  const iE = Nt((t, e) => t > e ? 1 : 0), O6 = Pt(su, iE, null, "bool"), F6 = {
    kernelName: su,
    backendName: "cpu",
    kernelFunc: O6
  };
  const aE = Nt((t, e) => t >= e ? 1 : 0), L6 = Pt(Ra, aE, null, "bool"), P6 = {
    kernelName: Ra,
    backendName: "cpu",
    kernelFunc: L6
  };
  const lE = Nt((t, e) => t < e ? 1 : 0), z6 = Pt(ou, lE, null, "bool"), M6 = {
    kernelName: ou,
    backendName: "cpu",
    kernelFunc: z6
  };
  const cE = Nt((t, e) => t <= e ? 1 : 0), B6 = Pt(iu, cE, null, "bool"), V6 = {
    kernelName: iu,
    backendName: "cpu",
    kernelFunc: B6
  };
  function uE(t, e, n) {
    const s = (e - t) / (n - 1), r = tn(n, "float32");
    r[0] = t;
    for (let o = 1; o < r.length; o++) r[o] = r[o - 1] + s;
    return r;
  }
  const hE = hr((t) => Math.log(t)), W6 = ko(Fa, hE), U6 = {
    kernelName: Fa,
    backendName: "cpu",
    kernelFunc: W6
  };
  function dE(t, e, n, s) {
    const r = Ut(s, X(n));
    for (let o = 0; o < r.length; ++o) {
      const i = o * e;
      let a = t[i];
      for (let l = 0; l < e; ++l) {
        const c = t[i + l];
        (Number.isNaN(c) || c > a) && (a = c);
      }
      r[o] = a;
    }
    return r;
  }
  const pE = Nt((t, e) => Math.max(t, e)), G6 = Pt(Pa, pE), H6 = {
    kernelName: Pa,
    backendName: "cpu",
    kernelFunc: G6
  };
  const fE = Nt((t, e) => Math.min(t, e)), j6 = Pt(za, fE), q6 = {
    kernelName: za,
    backendName: "cpu",
    kernelFunc: j6
  };
  const L0 = Nt((t, e) => t * e), K6 = O0((t, e, n, s) => ({
    real: t * n - e * s,
    imag: t * s + e * n
  })), Lm = Pt(Ba, L0, K6), X6 = {
    kernelName: Ba,
    backendName: "cpu",
    kernelFunc: Lm
  };
  function mE(t, e, n) {
    const s = _r(-1, n);
    return L0([], e, s, t, n);
  }
  function Y6(t) {
    const { inputs: e, backend: n } = t, { x: s } = e;
    Ce(s, "neg");
    const r = n.data.get(s.dataId).values, [o, i] = mE(r, s.shape, s.dtype);
    return n.makeTensorInfo(i, s.dtype, o);
  }
  const Z6 = {
    kernelName: yu,
    backendName: "cpu",
    kernelFunc: Y6
  };
  const gE = Nt((t, e) => t !== e ? 1 : 0), J6 = Pt(bu, gE, null, "bool"), Q6 = {
    kernelName: bu,
    backendName: "cpu",
    kernelFunc: J6
  };
  function P0(t, e, n, s, r) {
    const o = e.length, i = X(e), a = Ee(e), l = Ee(r), c = Ut(n, X(r));
    for (let u = 0; u < i; ++u) {
      const h = bi(u, o, a), d = new Array(h.length);
      for (let f = 0; f < d.length; f++) d[f] = h[s[f]];
      const p = ks(d, o, l);
      c[p] = t[u];
    }
    return c;
  }
  function Ln(t) {
    const { inputs: e, attrs: n, backend: s } = t, { x: r } = e, { perm: o } = n;
    Ce(r, "transpose");
    const i = r.shape.length, a = new Array(i);
    for (let h = 0; h < a.length; h++) a[h] = r.shape[o[h]];
    const l = s.data.get(r.dataId).values, c = P0(l, r.shape, r.dtype, o, a);
    return {
      dataId: s.write(c, a, r.dtype),
      shape: a,
      dtype: r.dtype
    };
  }
  const eX = {
    kernelName: qo,
    backendName: "cpu",
    kernelFunc: Ln
  };
  function yE(t, e, n, s) {
    const [r, o] = qt(t, s), i = An(e, "int32"), a = tn(X(r), i), l = X(o);
    for (let c = 0; c < a.length; ++c) {
      const u = c * l;
      let h = 1;
      for (let d = 0; d < l; ++d) h *= n[u + d];
      a[c] = h;
    }
    return {
      outVals: a,
      outShape: r,
      outDtype: i
    };
  }
  function tX(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, keepDims: i } = s;
    Ce(r, "prod");
    const a = r.shape.length, l = Ve(o, r.shape), c = bt(l, a);
    let u = l, h = r;
    const d = [];
    c != null && (h = Ln({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: c
      }
    }), d.push(h), u = Ct(u.length, a));
    const p = n.data.get(h.dataId).values, { outVals: f, outShape: m, outDtype: g } = yE(h.shape, h.dtype, p, u);
    let y = m;
    return i && (y = $t(m, l)), d.forEach((b) => n.disposeIntermediateTensorInfo(b)), n.makeTensorInfo(y, g, f);
  }
  const nX = {
    kernelName: Cu,
    backendName: "cpu",
    kernelFunc: tX
  };
  function sX(t, e, n) {
    t.forEach((s, r) => {
      if (s < 0 || s >= n) {
        const o = bi(r, e.length, Ee(e)).join(",");
        throw new Error(`indices[${o}] = ${s} is not in [0, ${n})`);
      }
    });
  }
  function rX(t, e) {
    for (let n = 0; n < t.length; ++n) {
      const s = t[n], r = n === t.length - 1 ? e : t[n + 1].length;
      if (s.length === 0) throw new Error("Ragged splits may not be empty");
      if (s[0] < 0) throw new Error("Ragged splits must be non-negative");
      if (s[s.length - 1] > r) throw new Error("Ragged splits must not point past values");
      for (let o = 1; o < s.length; ++o) if (s[o - 1] > s[o]) throw new Error("Ragged splits must be sorted in ascending order");
    }
  }
  function oX(t, e, n, s) {
    const r = [];
    let o = 0;
    const i = e.length - 1 + n.length, a = new Array(i).fill(null).map(() => [
      0
    ]);
    rX(n, s);
    let l = 1;
    for (let c = 0; c < e.length - 1; ++c) {
      l *= e[c];
      const u = e[c + 1];
      for (let h = 1; h < l + 1; ++h) a[c].push(h * u);
    }
    for (let c = 0; c < t.length; ++c) {
      let u = t[c], h = t[c] + 1;
      for (let d = 0; d < n.length; ++d) {
        const p = n[d], f = d + e.length - 1;
        if (f >= 0) {
          const m = a[f], g = m[m.length - 1] - p[u];
          for (let y = u; y < h; ++y) a[f].push(p[y + 1] + g);
        }
        u = p[u], h = p[h];
      }
      h !== u && (r.push([
        u,
        h
      ]), o += h - u);
    }
    return {
      outSplits: a,
      valueSlices: r,
      numValues: o
    };
  }
  function iX(t) {
    const e = [];
    for (let n = 0; n < t.length; ++n) {
      const s = t[n].length, r = xt("int32", s);
      e.push(r), t[n].forEach((o, i) => r[i] = o);
    }
    return e;
  }
  function bS(t, e) {
    const n = t.slice(0, e);
    for (; n.length < e; ) n.push(1);
    for (let s = e; s < t.length; s++) n[e - 1] *= t[s];
    return n;
  }
  function aX(t, e, n, s, r, o) {
    const i = bS(e, 2)[1], a = bS(o, 2)[1];
    let l = 0;
    for (const c of n) for (let u = c[0]; u < c[1]; ++u) {
      for (let h = 0; h < s; ++h) r[l * a + h] = t[u * i + h];
      ++l;
    }
  }
  function lX(t, e, n, s, r) {
    const o = e.slice();
    o[0] = r;
    const i = xt(n, X(o)), a = t.length, l = a === 0 ? 0 : a / e[0];
    return aX(t, e, s, l, i, o), [
      i,
      o
    ];
  }
  function bE(t, e, n, s, r, o, i, a) {
    if (t.length === 0) throw new Error("paramsNestedSplits must be non empty");
    if (e[0].length === 0) throw new Error("Split tensors must not be scalars");
    const l = e[0][0] - 1;
    if (sX(o, i, l), s.length === 0) throw new Error("params.rank must be nonzero");
    const c = s[0], { outSplits: u, valueSlices: h, numValues: d } = oX(o, i, t, c), p = iX(u), f = lX(n, s, r, h, d);
    return [
      p,
      f[0],
      f[1]
    ];
  }
  const xS = 2147483647;
  function xE(t, e, n, s, r, o, i) {
    if (e.length > 1) throw new Error("starts must be a scalar or vector");
    if (r.length > 1) throw new Error("limits must be a scalar or vector");
    if (i.length > 1) throw new Error("deltas must be a scalar or vector");
    const a = e.length === 0, l = r.length === 0, c = i.length === 0, u = [];
    a || u.push(e[0]), l || u.push(r[0]), c || u.push(i[0]);
    for (let g = 1; g < u.length; ++g) if (u[g] !== u[g - 1]) throw new Error("starts, limits, and deltas must have the same shape");
    const h = u.length === 0 ? 1 : u[0], d = xt("int32", h + 1);
    d[0] = 0;
    for (let g = 0; g < h; ++g) {
      const y = a ? t[0] : t[g], b = l ? s[0] : s[g], w = c ? o[0] : o[g];
      if (w === 0) throw new Error("Requires delta != 0");
      let x;
      if (w > 0 && b < y || w < 0 && b > y) x = 0;
      else if (x = Math.ceil(Math.abs((b - y) / w)), x > xS) throw new Error(`Requires ((limit - start) / delta) <= ${xS}`);
      d[g + 1] = d[g] + x;
    }
    const p = d[h], f = xt(n, p);
    let m = 0;
    for (let g = 0; g < h; ++g) {
      const y = d[g + 1] - d[g];
      let b = a ? t[0] : t[g];
      const w = c ? o[0] : o[g];
      for (let x = 0; x < y; ++x) f[m++] = b, b += w;
    }
    return [
      d,
      f
    ];
  }
  var cs = Is;
  class Hd {
    constructor(e, n, s, r, o, i, a, l, c, u) {
      this.shape = e, this.shapeShape = n, this.values = s, this.valuesShape = r, this.valuesDType = o, this.defaultValue = i, this.defaultValueShape = a, this.rowPartitionValues = l, this.rowPartitionValuesShapes = c, this.rowPartitionTypes = MN(u), this.raggedRank = BN(this.rowPartitionTypes);
    }
    getRowPartitionTypeByDimension(e) {
      return this.rowPartitionTypes[0] === cs.FIRST_DIM_SIZE ? this.rowPartitionTypes[e + 1] : this.rowPartitionTypes[e];
    }
    getRowPartitionTensor(e) {
      return this.rowPartitionTypes[0] === cs.FIRST_DIM_SIZE ? this.rowPartitionValues[e + 1] : this.rowPartitionValues[e];
    }
    getMaxWidth(e) {
      const n = this.getRowPartitionTensor(e - 1);
      switch (this.getRowPartitionTypeByDimension(e - 1)) {
        case cs.VALUE_ROWIDS:
          return Hd.getMaxWidthValueRowID(n);
        case cs.ROW_SPLITS:
          return Hd.getMaxWidthRowSplit(n);
        default:
          throw new Error(`Cannot handle partition type ${cs[this.getRowPartitionTypeByDimension(e - 1)]}`);
      }
    }
    static getMaxWidthRowSplit(e) {
      const n = e.length;
      if (n === 0 || n === 1) return 0;
      let s = 0;
      for (let r = 0; r < n - 1; ++r) {
        const o = e[r + 1] - e[r];
        o > s && (s = o);
      }
      return s;
    }
    static getMaxWidthValueRowID(e) {
      const n = e.length;
      if (n === 0) return 0;
      let s = 0, r = e[0], o = 0;
      for (let i = 1; i < n; ++i) {
        const a = e[i];
        a !== r && (r = a, o = Math.max(i - s, o), s = i);
      }
      return Math.max(n - s, o);
    }
    tensorShapeFromTensor(e, n, s = true) {
      if (n.length === 0) {
        if (e[0] === -1) return [];
        throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
      }
      return vS(e, s);
    }
    calculateOutputSize(e) {
      const n = this.valuesShape, s = this.defaultValueShape;
      VN(s, n);
      const r = this.tensorShapeFromTensor(this.shape, this.shapeShape), i = zN(this.raggedRank, r, n);
      i[0] < 0 && (i[0] = e);
      for (let a = 1; a <= this.raggedRank; ++a) i[a] < 0 && (i[a] = this.getMaxWidth(a));
      return i;
    }
    calculateFirstParentOutputIndex(e, n, s) {
      const r = Math.min(e, s), o = [];
      let i = 0;
      for (let a = 0; a < r; ++a, i += n) o.push(i);
      for (let a = r; a < e; ++a) o.push(-1);
      return C(o.length === e, () => "Final length of result must be equal to firstDimension."), o;
    }
    calculateOutputIndexRowSplit(e, n, s, r) {
      const o = e.length, i = [];
      for (let a = 0; a < o - 1; ++a) {
        const l = e[a + 1] - e[a];
        let c = Math.min(r, l), u = n[a];
        u === -1 && (c = 0);
        for (let h = 0; h < c; ++h) i.push(u), u += s;
        for (let h = 0; h < l - c; ++h) i.push(-1);
      }
      if (o > 0 && i.length !== e[o - 1]) throw new Error("Invalid row split size.");
      return i;
    }
    calculateOutputIndexValueRowID(e, n, s, r) {
      const o = e.length, i = [];
      if (o === 0) return [];
      let a = 0, l = e[0];
      if (l >= n.length) throw new Error(`Got currentValueRowId=${l}, which is not less than ${n.length}`);
      let c = n[l];
      i.push(c);
      for (let u = 1; u < o; ++u) {
        const h = e[u];
        if (h === l) c >= 0 && (++a, a < r ? c += s : c = -1);
        else {
          if (a = 0, l = h, h >= n.length) throw new Error(`Got nextValueRowId=${h} which is not less than ${n.length}`);
          c = n[h];
        }
        i.push(c);
      }
      if (i.length !== e.length) throw new Error("Invalid row ids.");
      return i;
    }
    calculateOutputIndex(e, n, s, r) {
      const o = this.getRowPartitionTensor(e), i = this.getRowPartitionTypeByDimension(e);
      switch (i) {
        case cs.VALUE_ROWIDS:
          return this.calculateOutputIndexValueRowID(o, n, s, r);
        case cs.ROW_SPLITS:
          if (o.length - 1 > n.length) throw new Error(`Row partition size is greater than output size: ${o.length - 1} > ${n.length}`);
          return this.calculateOutputIndexRowSplit(o, n, s, r);
        default:
          throw new Error(`Unsupported partition type: ${cs[i]}`);
      }
    }
    getFirstDimensionSize() {
      const e = this.rowPartitionValues[0];
      if (this.rowPartitionTypes.length === 0) throw new Error("No row_partition_types given.");
      const n = this.rowPartitionTypes[0];
      switch (n) {
        case cs.FIRST_DIM_SIZE:
          return e[0];
        case cs.VALUE_ROWIDS:
          throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
        case cs.ROW_SPLITS:
          return this.rowPartitionValuesShapes[0][0] - 1;
        default:
          throw new Error(`Cannot handle type ${cs[n]}`);
      }
    }
    compute() {
      if (this.rowPartitionValues[0].length <= 0) throw new Error("Invalid first partition input. Tensor requires at least one element.");
      const n = this.getFirstDimensionSize(), s = this.calculateOutputSize(n), r = new Array(this.raggedRank + 1);
      r[r.length - 1] = 1;
      for (let l = r.length - 2; l >= 0; --l) r[l] = r[l + 1] * s[l + 1];
      const o = vS(s, false), i = xt(this.valuesDType, X(o));
      if (r[0] * s[0] > 0) {
        let l = this.calculateFirstParentOutputIndex(n, r[0], s[0]);
        for (let c = 1; c <= this.raggedRank; ++c) l = this.calculateOutputIndex(c - 1, l, r[c], s[c]);
        this.setOutput(this.raggedRank, l, i, o);
      }
      return [
        o,
        i
      ];
    }
    setOutput(e, n, s, r) {
      if (s.length === 0) return;
      const o = this.values, i = s;
      let a = r.slice();
      a = a.slice(e + 1);
      const l = X(a), c = n.length;
      let u = this.defaultValue;
      if (u.length !== l && u.length !== 1) {
        const f = this.defaultValueShape;
        q(() => {
          const m = P(u, f);
          u = Ko(m, a).dataSync();
        });
      }
      let h = 0, d = 0, p = 0;
      for (let f = 0; f <= c; ++f) {
        let m = f < c ? n[f] : -1;
        if (m === p) {
          ++p;
          continue;
        }
        if (d < p) {
          const g = o.subarray(h * l), y = i.subarray(d * l), b = (p - d) * l;
          wS(y, g, b);
        }
        if (f >= c) {
          const g = s.length;
          m = Math.floor(g / l);
        }
        if (m > p) if (this.defaultValue.length === 1) i.subarray(p * l, m * l).fill(this.defaultValue[0]), p = m;
        else for (; m > p; ) {
          const g = i.slice(p * l);
          wS(g, u, l), ++p;
        }
        m < 0 ? (h = f + 1, d = p) : (h = f, d = p, p = d + 1);
      }
    }
  }
  function wS(t, e, n) {
    for (let s = 0; s < n; s++) t[s] = e[s];
  }
  function vS(t, e) {
    const n = [];
    for (let s of t) {
      if (s < 0) {
        if (!e) throw new Error(`Dimension ${s} must be >= 0`);
        if (s < -1) throw new Error(`Dimension ${s} must be >= -1`);
        s = -1;
      }
      n.push(s);
    }
    return n;
  }
  function wE(t, e, n, s, r, o, i, a, l, c) {
    return new Hd(t, e, n, s, r, o, i, a, l, c).compute();
  }
  vE = function(t, e, n, s) {
    const r = t === e, o = t < e && n < 0, i = e < t && n > 1;
    if (r || o || i) return tn(0, s);
    const a = Math.abs(Math.ceil((e - t) / n)), l = tn(a, s);
    e < t && n === 1 && (n = -1), l[0] = t;
    for (let c = 1; c < l.length; c++) l[c] = l[c - 1] + n;
    return l;
  };
  const SE = hr((t) => 1 / Math.sqrt(t)), cX = ko(ja, SE), uX = {
    kernelName: ja,
    backendName: "cpu",
    kernelFunc: cX
  };
  function Uo(t, e, n, s, r, o, i, a, l, c) {
    const u = [
      s / r,
      r
    ], h = t.values, d = e.values;
    if (s === 0) return Me(n, e.dtype);
    const p = l instanceof Rt ? l : Me(u, e.dtype);
    typeof l == "string" || typeof l == "number" ? p.values.fill(l) : typeof l == "boolean" && p.values.fill(+l);
    for (let f = 0; f < o; f++) {
      const m = [];
      let g = 0;
      for (let y = 0; y < i; y++) {
        const b = h[f * i + y];
        m.push(b), g += b * a[y];
      }
      if (g < 0 || g >= s / r) throw new Error(`Invalid indices: ${m} does not index into ${n}`);
      for (let y = 0; y < r; y++) c ? p.values[g * r + y] += d[f * r + y] : p.values[g * r + y] = e.rank === 0 ? d[0] : d[f * r + y];
    }
    return p;
  }
  const hX = hr((t) => 1 / (1 + Math.exp(-t))), $E = nt(Za, (t) => 1 / (1 + Math.exp(-t))), dX = {
    kernelName: Za,
    backendName: "cpu",
    kernelFunc: $E
  };
  CE = function(t, e, n, s, r) {
    const o = Rx(s, e, n), i = X(n), a = Ee(s);
    if (o) {
      const h = Ax(e, a);
      return r === "string" ? t.slice(h, h + i) : t.subarray(h, h + i);
    }
    const l = r === "string" ? Er(t) : t, c = Me(s, r, l), u = Me(n, r);
    for (let h = 0; h < u.size; ++h) {
      const d = u.indexToLoc(h), p = d.map((f, m) => f + e[m]);
      u.set(c.get(...p), ...d);
    }
    return r === "string" ? ak(u.values) : u.values;
  };
  function di(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { begin: o, size: i } = s;
    Ce(r, "slice");
    const [a, l] = hm(r, o, i);
    Tx(r, a, l);
    const c = n.data.get(r.dataId).values, u = CE(c, a, l, r.shape, r.dtype);
    return n.makeTensorInfo(l, r.dtype, u);
  }
  const pX = {
    kernelName: Ru,
    backendName: "cpu",
    kernelFunc: di
  };
  function IE(t, e, n, s, r, o, i) {
    const a = e[0], l = o[0], c = new Array(l), u = new Array(a), h = e[1];
    if (l === 0) {
      if (a !== 0) throw new Error(KN(a));
      const g = xt(n, 0), y = xt(r, 0);
      return [
        g,
        [
          0,
          h
        ],
        y,
        c,
        u
      ];
    }
    let d = true, p = 0;
    const f = new Array(l).fill(0);
    for (let g = 0; g < a; ++g) {
      const y = t[g * h];
      if (y < 0) throw new Error(XN(g, y));
      if (y >= l) throw new Error(YN(g, y, l));
      ++f[y], d = d && y >= p, p = y;
    }
    let m = true;
    for (let g = 0; g < l; ++g) {
      const y = f[g] === 0;
      c[g] = y, m = m && !y, f[g] = Math.max(f[g], 1), g > 0 && (f[g] += f[g - 1]);
    }
    if (m && d) {
      const g = t, y = s;
      for (let b = 0; b < a; ++b) u[b] = b;
      return [
        g,
        [
          a,
          h
        ],
        y,
        c,
        u
      ];
    } else {
      const g = f[l - 1], y = xt(n, g * h), b = xt(r, g), w = new Array(l).fill(0);
      for (let x = 0; x < a; ++x) {
        const S = t[x * h], I = w[S], E = (S === 0 ? 0 : f[S - 1]) + I;
        w[S]++;
        for (let R = 0; R < h; ++R) y[E * h + R] = t[x * h + R];
        b[E] = s[x], u[x] = E;
      }
      for (let x = 0; x < l; ++x) if (w[x] === 0) {
        const I = x === 0 ? 0 : f[x - 1];
        y[I * h + 0] = x;
        for (let E = 1; E < h; ++E) y[I * h + E] = 0;
        b[I] = i;
      }
      return [
        y,
        [
          g,
          h
        ],
        b,
        c,
        u
      ];
    }
  }
  function NE(t, e, n, s, r) {
    const o = X(s), i = e[0], a = r.length, l = [];
    let c = 1, u = -1;
    for (let g = 0; g < a; ++g) {
      const y = r[g];
      if (y === -1) {
        if (u !== -1) throw new Error(ZN(u, g));
        u = g, l.push(1);
      } else {
        if (y < 0) throw new Error(JN(g, y));
        c *= y, l.push(y);
      }
    }
    if (u !== -1) {
      if (c <= 0) throw new Error(QN());
      const g = Math.trunc(o / c);
      if (c * g !== o) throw new Error(ek(s, l));
      l[u] = g;
    }
    if (X(l) !== o) throw new Error(tk(s, l));
    const d = s.length, p = [];
    if (d > 0) {
      p[d - 1] = 1;
      for (let g = d - 2; g >= 0; --g) p[g] = p[g + 1] * s[g + 1];
    }
    const f = [];
    if (a > 0) {
      f[a - 1] = 1;
      for (let g = a - 2; g >= 0; --g) f[g] = f[g + 1] * l[g + 1];
    }
    const m = xt(n, i * a);
    for (let g = 0; g < i; ++g) {
      let y = 0;
      for (let b = 0; b < d; ++b) y += t[g * d + b] * p[b];
      for (let b = 0; b < a; ++b) m[g * a + b] = Math.trunc(y / f[b]), y %= f[b];
    }
    return [
      m,
      [
        i,
        a
      ],
      l
    ];
  }
  function z0(t, e, n, s, r, o = false, i = 0) {
    const a = s.length, l = [
      e[0],
      t.length / e[0]
    ], c = l[1], h = a > 0 ? r[a - 1] + 1 : 0;
    if (h < 0) throw new Error(ty());
    const d = e.slice();
    d[0] = h;
    const p = d.reduce((w, x) => w * x, 1), f = xt(n, p);
    if (a === 0) return h > 0 && f.fill(i), [
      f,
      d
    ];
    if (h <= 0) throw new Error(ty());
    let m = 0, g = 1, y = 0, b = r[m];
    for (; ; ) {
      let w = 0;
      if (g < a) {
        if (w = r[g], b === w) {
          ++g;
          continue;
        }
        if (b >= w) throw new Error(nk());
      }
      if (b < 0 || b >= h) throw new Error(sk(b, h));
      b > y && f.fill(i, y * c, b * c);
      for (let x = m; x < g; ++x) {
        const S = s[x];
        if (S < 0 || S >= l[0]) throw new Error(rk(x, s[x], l[0]));
        for (let I = 0; I < c; I++) f[b * c + I] += t[S * c + I];
      }
      if (o) for (let x = 0; x < c; x++) f[b * c + x] /= g - m;
      if (m = g, ++g, y = b + 1, b = w, g > a) break;
    }
    return y < h && f.fill(i, y * c, h * c), [
      f,
      d
    ];
  }
  const fX = hr((t) => Math.sqrt(t)), mX = nt(Qa, (t) => Math.sqrt(t)), gX = {
    kernelName: Qa,
    backendName: "cpu",
    kernelFunc: mX
  };
  const kE = Nt((t, e) => {
    const n = t - e;
    return n * n;
  }), yX = Pt(el, kE), bX = {
    kernelName: el,
    backendName: "cpu",
    kernelFunc: yX
  };
  const TE = hr((t, e) => {
    const { pattern: n, replaceGlobal: s, rewrite: r } = e;
    return t.replace(new RegExp(n, s ? "g" : ""), r);
  }), xX = ko(Fu, TE), wX = {
    kernelName: Fu,
    backendName: "cpu",
    kernelFunc: xX
  };
  function EE(t, e, n, s) {
    const r = Me(t, e.dtype);
    for (let o = 0; o < r.size; o++) {
      const i = r.indexToLoc(o), a = new Array(i.length);
      for (let l = 0; l < a.length; l++) a[l] = i[l] * n[l] + s[l];
      r.set(e.get(...a), ...i);
    }
    return r;
  }
  class vX {
    constructor(e, n, s, r, o, i) {
      this.separator = Qs(e), this.nGramWidths = n, this.leftPad = Qs(s), this.rightPad = Qs(r), this.padWidth = o, this.preserveShort = i;
    }
    getPadWidth(e) {
      return Math.min(this.padWidth < 0 ? e - 1 : this.padWidth, e - 1);
    }
    getNumNGrams(e, n) {
      const s = this.getPadWidth(n);
      return Math.max(0, e + 2 * s - n + 1);
    }
    createNGrams(e, n, s, r, o, i) {
      for (let a = 0; a < o; ++a) {
        const l = this.getPadWidth(i), c = Math.max(0, l - a), u = Math.max(0, l - (o - (a + 1))), h = i - (c + u), d = n + (c > 0 ? 0 : a - l);
        let p = 0;
        p += c * this.leftPad.length;
        for (let b = 0; b < h; ++b) p += e[d + b].length;
        p += u * this.rightPad.length;
        const f = c + u + h - 1;
        p += f * this.separator.length, s[r + a] = new Uint8Array(p);
        const m = s[r + a];
        let g = 0;
        const y = (b) => b.forEach((w) => m[g++] = w);
        for (let b = 0; b < c; ++b) y(this.leftPad), y(this.separator);
        for (let b = 0; b < h - 1; ++b) y(e[d + b]), y(this.separator);
        if (h > 0) {
          y(e[d + h - 1]);
          for (let b = 0; b < u; ++b) y(this.separator), y(this.rightPad);
        } else {
          for (let b = 0; b < u - 1; ++b) y(this.rightPad), y(this.separator);
          y(this.rightPad);
        }
      }
    }
    compute(e, n) {
      const s = e.length, r = n.length;
      if (r > 0) {
        let l = n[0];
        if (l !== 0) throw new Error(`First split value must be 0, got ${l}`);
        for (let c = 1; c < r; ++c) {
          let u = n[c] >= l;
          if (u = u && n[c] <= s, !u) throw new Error(`Invalid split value ${n[c]}, must be in [${l}, ${s}]`);
          l = n[c];
        }
        if (l !== s) throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`);
      }
      const o = r - 1, i = xt("int32", r);
      if (s === 0 || r === 0) {
        const l = new Array(s);
        for (let c = 0; c <= o; ++c) i[c] = 0;
        return [
          l,
          i
        ];
      }
      i[0] = 0;
      for (let l = 1; l <= o; ++l) {
        const c = n[l] - n[l - 1];
        let u = 0;
        this.nGramWidths.forEach((h) => {
          u += this.getNumNGrams(c, h);
        }), this.preserveShort && c > 0 && u === 0 && (u = 1), i[l] = i[l - 1] + u;
      }
      const a = new Array(i[o]);
      for (let l = 0; l < o; ++l) {
        const c = n[l];
        let u = i[l];
        if (this.nGramWidths.forEach((h) => {
          const d = n[l + 1] - n[l], p = this.getNumNGrams(d, h);
          this.createNGrams(e, c, a, u, p, h), u += p;
        }), this.preserveShort && u === i[l]) {
          const h = n[l + 1] - n[l];
          if (h === 0) continue;
          const d = h + 2 * this.padWidth;
          this.createNGrams(e, c, a, u, 1, d);
        }
      }
      return [
        a,
        i
      ];
    }
  }
  RE = function(t, e, n, s, r, o, i, a) {
    return new vX(n, s, r, o, i, a).compute(t, e);
  };
  function SX(t, e, n, s) {
    if (!t.length) return;
    if (e.length === 0) {
      for (let o = 0; o < t.length; ++o) s.push(t.subarray(o, o + 1));
      return;
    }
    if (e.length === 1) {
      const o = e[0];
      let i = t.indexOf(o);
      for (; i !== -1; ) {
        const a = t.subarray(0, i);
        (!n || a.length !== 0) && s.push(a), t = t.subarray(i + 1), i = t.indexOf(o);
      }
      (!n || t.length !== 0) && s.push(t);
      return;
    }
    let r = 0;
    for (let o = 0; o < t.length + 1; o++) if (o === t.length || e.indexOf(t[o]) !== -1) {
      const i = t.subarray(r, o);
      (!n || i.length !== 0) && s.push(i), r = o + 1;
    }
  }
  AE = function(t, e, n) {
    const s = t.length, r = [];
    let o = 0, i = 0;
    const a = new Array(s);
    for (let d = 0; d < s; ++d) {
      const p = r.length;
      SX(t[d], e, n, r);
      const f = r.length - p;
      a[d] = f, o += f, i = Math.max(i, f);
    }
    const l = xt("int32", o * 2), c = new Array(o), u = [
      s,
      i
    ];
    let h = 0;
    for (let d = 0; d < s; ++d) for (let p = 0; p < a[d]; ++p) l[h * 2] = d, l[h * 2 + 1] = p, c[h] = r[h], ++h;
    return [
      l,
      c,
      u
    ];
  };
  _E = function(t, e) {
    const n = xt("int32", t.length);
    for (let s = 0; s < t.length; ++s) n[s] = WC(t[s]).modulo(e).getLowBitsUnsigned();
    return n;
  };
  const DE = Nt((t, e) => t - e), $X = O0((t, e, n, s) => ({
    real: t - n,
    imag: e - s
  })), M0 = Pt(tl, DE, $X), CX = {
    kernelName: tl,
    backendName: "cpu",
    kernelFunc: M0
  };
  function OE(t, e) {
    const n = new Array(t.rank);
    for (let r = 0; r < n.length; r++) n[r] = t.shape[r] * e[r];
    const s = Me(n, t.dtype);
    for (let r = 0; r < s.values.length; ++r) {
      const o = s.indexToLoc(r), i = new Array(t.rank);
      for (let l = 0; l < i.length; l++) i[l] = o[l] % t.shape[l];
      const a = t.locToIndex(i);
      s.values[r] = t.values[a];
    }
    return s;
  }
  const Vl = (t, e) => {
    const n = e.value - t.value;
    return n === 0 ? t.index - e.index : n;
  };
  function FE(t, e, n = 0, s = t.length - 1) {
    for (; s > n; ) {
      if (s - n > 600) {
        const a = s - n + 1, l = e - n + 1, c = Math.log(a), u = 0.5 * Math.exp(2 * c / 3), h = 0.5 * Math.sqrt(c * u * (a - u) / a) * Math.sign(l - a / 2), d = Math.max(n, Math.floor(e - l * u / a + h)), p = Math.min(s, Math.floor(e + (a - l) * u / a + h));
        FE(t, e, d, p);
      }
      const r = t[e];
      let o = n, i = s;
      for (wr(t, n, e), Vl(t[s], r) > 0 && wr(t, n, s); o < i; ) {
        for (wr(t, o, i), o++, i--; Vl(t[o], r) < 0; ) o = o + 1;
        for (; Vl(t[i], r) > 0; ) i = i - 1;
      }
      Vl(t[n], r) === 0 ? wr(t, n, i) : (i = i + 1, wr(t, i, s)), i <= e && (n = i + 1), e <= i && (s = i - 1);
    }
  }
  function LE(t, e, n, s, r) {
    const o = e[e.length - 1], [i, a] = [
      t.length / o,
      o
    ], l = Ut(n, i * s), c = Ut("int32", i * s);
    for (let h = 0; h < i; h++) {
      const d = h * a, p = t.subarray(d, d + a);
      let f = new Array(p.length);
      p.forEach((b, w) => f[w] = {
        value: b,
        index: w
      }), s < f.length && (FE(f, s), f = f.slice(0, s)), r && f.sort(Vl);
      const m = h * s, g = l.subarray(m, m + s), y = c.subarray(m, m + s);
      for (let b = 0; b < s; b++) g[b] = f[b].value, y[b] = f[b].index;
    }
    const u = e.slice();
    return u[u.length - 1] = s, [
      Me(u, n, l),
      Me(u, "int32", c)
    ];
  }
  PE = function(t, e, n, s) {
    const r = Ve(e, n)[0], o = [
      1,
      n[0],
      1
    ];
    for (let f = 0; f < r; f++) o[0] *= n[f];
    o[1] = n[r];
    for (let f = r + 1; f < n.length; f++) o[2] *= n[f];
    const i = /* @__PURE__ */ new Map(), a = new Int32Array(n[r]), l = new Rt(o, s, t), c = [], u = o[0] === 1 && o[2] === 1;
    for (let f = 0; f < n[r]; f++) {
      let m;
      if (u) m = t[f].toString();
      else {
        const y = [];
        for (let b = 0; b < o[0]; b++) for (let w = 0; w < o[2]; w++) y.push(l.get(b, f, w));
        m = y.join(",");
      }
      const g = i.get(m);
      if (g != null) a[f] = g;
      else {
        const y = i.size;
        i.set(m, y), a[f] = y, c.push(f);
      }
    }
    const h = o.slice();
    h[1] = i.size;
    const d = new Rt(h, s);
    c.forEach((f, m) => {
      for (let g = 0; g < o[0]; g++) for (let y = 0; y < o[2]; y++) d.set(l.get(g, f, y), g, m, y);
    });
    const p = n.slice();
    return p[r] = h[1], {
      outputValues: d.values,
      outputShape: p,
      indices: a
    };
  };
  zE = Object.freeze(Object.defineProperty({
    __proto__: null,
    addImpl: jT,
    bincountImpl: F0,
    bincountReduceImpl: qT,
    bitwiseAndImpl: KT,
    castImpl: HT,
    ceilImpl: XT,
    concatImpl: YT,
    equalImpl: ZT,
    expImpl: QT,
    expm1Impl: tE,
    floorDivImpl: sE,
    floorImpl: nE,
    gatherNdImpl: rE,
    gatherV2Impl: oE,
    greaterEqualImpl: aE,
    greaterImpl: iE,
    lessEqualImpl: cE,
    lessImpl: lE,
    linSpaceImpl: uE,
    logImpl: hE,
    maxImpl: dE,
    maximumImpl: pE,
    minimumImpl: fE,
    multiplyImpl: L0,
    negImpl: mE,
    notEqualImpl: gE,
    prodImpl: yE,
    raggedGatherImpl: bE,
    raggedRangeImpl: xE,
    raggedTensorToTensorImpl: wE,
    rangeImpl: vE,
    rsqrtImpl: SE,
    scatterImpl: Uo,
    sigmoidImpl: hX,
    simpleAbsImpl: GT,
    sliceImpl: CE,
    sparseFillEmptyRowsImpl: IE,
    sparseReshapeImpl: NE,
    sparseSegmentReductionImpl: z0,
    sqrtImpl: fX,
    squaredDifferenceImpl: kE,
    staticRegexReplaceImpl: TE,
    stridedSliceImpl: EE,
    stringNGramsImpl: RE,
    stringSplitImpl: AE,
    stringToHashBucketFastImpl: _E,
    subImpl: DE,
    tileImpl: OE,
    topKImpl: LE,
    transposeImpl: P0,
    uniqueImpl: PE
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const ME = "4.19.0";
  lb("cpu", () => new yh(), 1);
  const BE = nt(Ca, (t) => t >= 0 ? t : Math.exp(t) - 1), IX = {
    kernelName: Ca,
    backendName: "cpu",
    kernelFunc: BE
  };
  function VE(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { alpha: o } = s;
    Ce([
      r
    ], "leakyRelu");
    const i = X(r.shape), a = n.data.get(r.dataId).values, l = Ut("float32", i);
    for (let c = 0; c < a.length; c++) l[c] = a[c] < 0 ? o * a[c] : a[c];
    return n.makeTensorInfo(r.shape, "float32", l);
  }
  const NX = {
    kernelName: ru,
    backendName: "cpu",
    kernelFunc: VE
  };
  const kX = Nt((t, e) => t < 0 ? e * t : t);
  function WE(t) {
    const { inputs: e, backend: n } = t, { x: s, alpha: r } = e;
    Ce([
      s,
      r
    ], "prelu");
    const o = n.data.get(s.dataId).values, i = n.data.get(r.dataId).values, [a, l] = kX(s.shape, r.shape, o, i, "float32");
    return n.makeTensorInfo(l, "float32", a);
  }
  const TX = {
    kernelName: $u,
    backendName: "cpu",
    kernelFunc: WE
  };
  const UE = nt(Ua, (t) => Math.max(0, t)), EX = {
    kernelName: Ua,
    backendName: "cpu",
    kernelFunc: UE
  };
  const GE = nt(Ga, (t) => Math.min(Math.max(0, t), 6)), RX = {
    kernelName: Ga,
    backendName: "cpu",
    kernelFunc: GE
  };
  function jd(t, e, n, s, r) {
    if (n === "linear") return cr({
      inputs: {
        x: e
      },
      backend: t
    });
    if (n === "relu") return UE({
      inputs: {
        x: e
      },
      backend: t
    });
    if (n === "elu") return BE({
      inputs: {
        x: e
      },
      backend: t
    });
    if (n === "relu6") return GE({
      inputs: {
        x: e
      },
      backend: t
    });
    if (n === "prelu") return WE({
      inputs: {
        x: e,
        alpha: s
      },
      backend: t
    });
    if (n === "leakyrelu") return VE({
      inputs: {
        x: e
      },
      backend: t,
      attrs: {
        alpha: r
      }
    });
    if (n === "sigmoid") return $E({
      inputs: {
        x: e
      },
      backend: t
    });
    throw new Error(`Activation ${n} has not been implemented for the CPU backend.`);
  }
  function ut(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { shape: o } = s, i = X(r.shape), a = Qy(o, i), l = X(a);
    C(i === l, () => `The new shape (${a}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`), n.incRef(r.dataId);
    const c = n.data.get(r.dataId);
    if (c.complexTensorInfos != null) {
      const u = c.complexTensorInfos.real, h = c.complexTensorInfos.imag;
      u.shape = a, h.shape = a;
    }
    return {
      dataId: r.dataId,
      shape: a,
      dtype: r.dtype
    };
  }
  const AX = {
    kernelName: Iu,
    backendName: "cpu",
    kernelFunc: ut
  };
  function HE(t) {
    const { inputs: e, backend: n, attrs: s } = t, { a: r, b: o } = e, { transposeA: i, transposeB: a } = s;
    Ce([
      r,
      o
    ], "matMul");
    const l = r.shape.length, c = o.shape.length, u = i ? r.shape[l - 2] : r.shape[l - 1], h = a ? o.shape[c - 1] : o.shape[c - 2], d = i ? r.shape[l - 1] : r.shape[l - 2], p = a ? o.shape[c - 2] : o.shape[c - 1], f = r.shape.slice(0, -2), m = o.shape.slice(0, -2), g = X(f), y = X(m), w = Fe(r.shape.slice(0, -2), o.shape.slice(0, -2)).concat([
      d,
      p
    ]);
    C(u === h, () => `Error in matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${i} and transposeB=${a} must match.`);
    const x = i ? [
      g,
      u,
      d
    ] : [
      g,
      d,
      u
    ], S = a ? [
      y,
      p,
      h
    ] : [
      y,
      h,
      p
    ], I = ut({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: x
      }
    }), E = ut({
      inputs: {
        x: o
      },
      backend: n,
      attrs: {
        shape: S
      }
    }), R = i ? I.shape[1] : I.shape[2], N = i ? I.shape[2] : I.shape[1], k = a ? E.shape[1] : E.shape[2], $ = Math.max(g, y), F = n.data.get(I.dataId).values, M = n.data.get(E.dataId).values, U = Ee(I.shape), W = Ee(E.shape), [V, H, G] = i ? [
      U[0],
      1,
      U[1]
    ] : [
      U[0],
      U[1],
      1
    ], [Y, te, se] = a ? [
      1,
      W[1],
      W[0]
    ] : [
      W[1],
      1,
      W[0]
    ], re = N * k, ie = Me([
      $,
      N,
      k
    ], I.dtype), fe = ie.values, pe = n.blockSize;
    for (let ye = 0; ye < $; ye++) {
      const K = ye % g, oe = ye % y;
      for (let ne = 0; ne < N; ne += pe) {
        const ue = Math.min(ne + pe, N);
        for (let Se = 0; Se < k; Se += pe) {
          const A = Math.min(Se + pe, k);
          for (let _ = 0; _ < R; _ += pe) {
            const B = Math.min(_ + pe, R);
            for (let Z = ne; Z < ue; Z++) for (let Q = Se; Q < A; Q++) {
              let ee = 0;
              for (let he = _; he < B; he++) {
                const me = F[K * V + Z * H + he * G], de = M[he * Y + Q * te + oe * se];
                ee += me * de;
              }
              fe[ye * re + (Z * k + Q)] += ee;
            }
          }
        }
      }
    }
    return n.disposeIntermediateTensorInfo(I), n.disposeIntermediateTensorInfo(E), n.makeTensorInfo(w, ie.dtype, ie.values);
  }
  const _X = {
    kernelName: Wc,
    backendName: "cpu",
    kernelFunc: HE
  };
  function DX(t) {
    const { inputs: e, backend: n, attrs: s } = t, { a: r, b: o, bias: i, preluActivationWeights: a } = e, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
    let d, p, f;
    const m = [];
    d = HE({
      inputs: {
        a: r,
        b: o
      },
      attrs: {
        transposeA: l,
        transposeB: c
      },
      backend: n
    }), i && (p = la({
      inputs: {
        a: d,
        b: i
      },
      backend: n
    }), m.push(d), d = p), u && (f = jd(n, d, u, a, h), m.push(d), d = f);
    for (const y of m) n.disposeIntermediateTensorInfo(y);
    return d;
  }
  const OX = {
    kernelName: pc,
    backendName: "cpu",
    kernelFunc: DX
  };
  const FX = nt(ha, (t) => Math.acos(t)), LX = {
    kernelName: ha,
    backendName: "cpu",
    kernelFunc: FX
  };
  const PX = nt(da, (t) => Math.acosh(t)), zX = {
    kernelName: da,
    backendName: "cpu",
    kernelFunc: PX
  };
  function MX(t) {
    const { inputs: e, backend: n } = t, s = e;
    Ce(e, "addN");
    const r = s.map((a) => n.data.get(a.dataId).values), o = Me(s[0].shape, s[0].dtype), i = o.values;
    for (let a = 0; a < s.length; a++) {
      const l = r[a];
      for (let c = 0; c < i.length; c++) i[c] += l[c];
    }
    return n.makeTensorInfo(o.shape, o.dtype, o.values);
  }
  const BX = {
    kernelName: Pc,
    backendName: "cpu",
    kernelFunc: MX
  };
  function VX(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, keepDims: i } = s;
    Ce(r, "all");
    const a = Ve(o, r.shape);
    let l = a;
    const c = bt(l, r.shape.length);
    let u = r;
    c != null && (u = Ln({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: c
      }
    }), l = Ct(l.length, r.shape.length)), rn("all", l, u.shape.length);
    const [h, d] = qt(u.shape, l), p = X(d), f = tn(X(h), u.dtype), m = n.data.get(u.dataId).values;
    for (let y = 0; y < f.length; ++y) {
      const b = y * p;
      let w = m[b];
      for (let x = 0; x < p; ++x) {
        const S = m[b + x];
        w = w && S;
      }
      f[y] = w;
    }
    c != null && n.disposeIntermediateTensorInfo(u);
    const g = n.makeTensorInfo(h, u.dtype, f);
    if (i) {
      const y = $t(h, a), b = ut({
        inputs: {
          x: g
        },
        backend: n,
        attrs: {
          shape: y
        }
      });
      return n.disposeIntermediateTensorInfo(g), b;
    }
    return g;
  }
  const WX = {
    kernelName: xp,
    backendName: "cpu",
    kernelFunc: VX
  };
  function UX(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, keepDims: i } = s;
    Ce(r, "any");
    const a = Ve(o, r.shape);
    let l = a;
    const c = bt(l, r.shape.length);
    let u = r;
    c != null && (u = Ln({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: c
      }
    }), l = Ct(l.length, r.shape.length)), rn("any", l, u.shape.length);
    const [h, d] = qt(u.shape, l), p = X(d), f = tn(X(h), u.dtype), m = n.data.get(u.dataId).values;
    for (let y = 0; y < f.length; ++y) {
      const b = y * p;
      let w = m[b];
      for (let x = 0; x < p; ++x) {
        const S = m[b + x];
        w = w || S;
      }
      f[y] = w;
    }
    c != null && n.disposeIntermediateTensorInfo(u);
    const g = n.makeTensorInfo(h, u.dtype, f);
    if (i) {
      const y = $t(h, a), b = ut({
        inputs: {
          x: g
        },
        backend: n,
        attrs: {
          shape: y
        }
      });
      return n.disposeIntermediateTensorInfo(g), b;
    }
    return g;
  }
  const GX = {
    kernelName: wp,
    backendName: "cpu",
    kernelFunc: UX
  };
  function HX(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o } = s;
    Ce(r, "argMax");
    let i = Ve(o, r.shape);
    const a = bt(i, r.shape.length);
    let l = r;
    const c = [];
    a != null && (l = Ln({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: a
      }
    }), c.push(l), i = Ct(i.length, l.shape.length)), i = [
      i[0]
    ], rn("argMax", i, l.shape.length);
    const [u, h] = qt(l.shape, i), d = X(u), p = tn(d, "int32"), f = X(h), m = n.data.get(l.dataId).values;
    for (let g = 0; g < p.length; ++g) {
      const y = g * f;
      let b = m[y], w = 0;
      for (let x = 0; x < f; ++x) {
        const S = m[y + x];
        S > b && (b = S, w = x);
      }
      p[g] = w;
    }
    return c.forEach((g) => n.disposeIntermediateTensorInfo(g)), n.makeTensorInfo(u, "int32", p);
  }
  const jX = {
    kernelName: zc,
    backendName: "cpu",
    kernelFunc: HX
  };
  function qX(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o } = s;
    Ce(r, "argMin");
    let i = Ve(o, r.shape);
    const a = bt(i, r.shape.length);
    let l = r;
    const c = [];
    a != null && (l = Ln({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: a
      }
    }), c.push(l), i = Ct(i.length, l.shape.length)), i = [
      i[0]
    ], rn("argMin", i, l.shape.length);
    const [u, h] = qt(l.shape, i), d = X(u), p = tn(d, "int32"), f = X(h), m = n.data.get(l.dataId).values;
    for (let g = 0; g < p.length; ++g) {
      const y = g * f;
      let b = m[y], w = 0;
      for (let x = 0; x < f; ++x) {
        const S = m[y + x];
        S < b && (b = S, w = x);
      }
      p[g] = w;
    }
    return c.forEach((g) => n.disposeIntermediateTensorInfo(g)), n.makeTensorInfo(u, "int32", p);
  }
  const KX = {
    kernelName: Mc,
    backendName: "cpu",
    kernelFunc: qX
  };
  const XX = nt(pa, (t) => Math.asin(t)), YX = {
    kernelName: pa,
    backendName: "cpu",
    kernelFunc: XX
  };
  const ZX = nt(fa, (t) => Math.asinh(t)), JX = {
    kernelName: fa,
    backendName: "cpu",
    kernelFunc: ZX
  };
  const QX = nt(ma, (t) => Math.atan(t)), e5 = {
    kernelName: ma,
    backendName: "cpu",
    kernelFunc: QX
  };
  const t5 = Nt((t, e) => Math.atan2(t, e)), n5 = Pt(ya, t5), s5 = {
    kernelName: ya,
    backendName: "cpu",
    kernelFunc: n5
  };
  const r5 = nt(ga, (t) => Math.atanh(t)), o5 = {
    kernelName: ga,
    backendName: "cpu",
    kernelFunc: r5
  };
  function B0(t, e, n, s, r, o) {
    const i = r.strideHeight, a = r.strideWidth, l = r.dilationHeight, c = r.dilationWidth, u = r.effectiveFilterHeight, h = r.effectiveFilterWidth, d = r.padInfo.top, p = r.padInfo.left, f = o === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, m = Me(r.outShape, n), g = m.values, y = r.outShape[1] * r.outShape[2] * r.outShape[3], b = r.outShape[2] * r.outShape[3], w = r.outShape[3];
    for (let x = 0; x < r.batchSize; ++x) {
      const S = x * y, I = x * s[0];
      for (let E = 0; E < r.inChannels; ++E) for (let R = 0; R < r.outHeight; ++R) {
        const N = R * i - d, k = Math.max(0, N), $ = Math.min(r.inHeight, u + N), F = S + R * b;
        for (let M = 0; M < r.outWidth; ++M) {
          const U = M * a - p, W = Math.max(0, U), V = Math.min(r.inWidth, h + U);
          let H = f, G = 0, Y = 0;
          for (let se = k; se < $; se += l) {
            const re = I + se * s[1];
            for (let ie = W; ie < V; ie += c) {
              const fe = re + ie * s[2], pe = t[fe + E];
              o === "max" && pe > H ? H = pe : o === "avg" && (G += pe, Y++);
            }
            if (isNaN(H)) break;
          }
          const te = F + M * w + E;
          g[te] = o === "avg" ? G / Y : H;
        }
      }
    }
    return m;
  }
  function jE(t, e, n, s, r = false, o = false) {
    const i = Me(s.outShape, "int32"), a = s.strideHeight, l = s.strideWidth, c = s.dilationHeight, u = s.dilationWidth, h = s.effectiveFilterHeight, d = s.effectiveFilterWidth, p = s.padInfo.top, f = s.padInfo.left, m = Me(e, n, t);
    for (let g = 0; g < s.batchSize; ++g) for (let y = 0; y < s.inChannels; ++y) for (let b = 0; b < s.outHeight; ++b) {
      const w = b * a - p;
      let x = w;
      for (; x < 0; ) x += c;
      const S = Math.min(s.inHeight, h + w);
      for (let I = 0; I < s.outWidth; ++I) {
        const E = I * l - f;
        let R = E;
        for (; R < 0; ) R += u;
        const N = Math.min(s.inWidth, d + E);
        let k = Number.NEGATIVE_INFINITY, $ = -1;
        for (let F = x; F < S; F += c) {
          const M = F - w;
          for (let U = R; U < N; U += u) {
            const W = U - E, V = m.get(g, F, U, y);
            V > k && (k = V, r ? $ = o ? ((g * s.inHeight + F) * s.inWidth + U) * s.inChannels + y : (F * s.inWidth + U) * s.inChannels + y : $ = M * d + W);
          }
        }
        i.set($, g, b, I, y);
      }
    }
    return i;
  }
  function qE(t, e, n, s, r, o) {
    const i = r.strideDepth, a = r.strideHeight, l = r.strideWidth, c = r.dilationDepth, u = r.dilationHeight, h = r.dilationWidth, d = r.effectiveFilterDepth, p = r.effectiveFilterHeight, f = r.effectiveFilterWidth, m = r.padInfo.front, g = r.padInfo.top, y = r.padInfo.left, b = o === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, w = Me(r.outShape, n), x = w.values, S = r.outShape[1] * r.outShape[2] * r.outShape[3] * r.outShape[4], I = r.outShape[2] * r.outShape[3] * r.outShape[4], E = r.outShape[3] * r.outShape[4], R = r.outShape[4];
    for (let N = 0; N < r.batchSize; ++N) {
      const k = N * S, $ = N * s[0];
      for (let F = 0; F < r.inChannels; ++F) for (let M = 0; M < r.outDepth; ++M) {
        const U = M * i - m;
        let W = U;
        for (; W < 0; ) W += c;
        const V = Math.min(r.inDepth, d + U), H = k + M * I;
        for (let G = 0; G < r.outHeight; ++G) {
          const Y = G * a - g;
          let te = Y;
          for (; te < 0; ) te += u;
          const se = Math.min(r.inHeight, p + Y), re = H + G * E;
          for (let ie = 0; ie < r.outWidth; ++ie) {
            const fe = ie * l - y;
            let pe = fe;
            for (; pe < 0; ) pe += h;
            const ye = Math.min(r.inWidth, f + fe), K = re + ie * R;
            let oe = b, ne = 0, ue = 0;
            for (let A = W; A < V; A += c) {
              const _ = $ + A * s[1];
              for (let B = te; B < se; B += u) {
                const Z = _ + B * s[2];
                for (let Q = pe; Q < ye; Q += h) {
                  const ee = Z + Q * s[3], he = t[ee + F];
                  if (o === "max" && he > oe ? oe = he : o === "avg" && (ne += he, ue++), isNaN(oe)) break;
                }
                if (isNaN(oe)) break;
              }
              if (isNaN(oe)) break;
            }
            const Se = K + F;
            x[Se] = o === "avg" ? ne / Math.max(ue, 1) : oe;
          }
        }
      }
    }
    return w;
  }
  function i5(t, e) {
    const n = Me(e.outShape, "int32"), s = e.strideDepth, r = e.strideHeight, o = e.strideWidth, i = e.dilationDepth, a = e.dilationHeight, l = e.dilationWidth, c = e.effectiveFilterDepth, u = e.effectiveFilterHeight, h = e.effectiveFilterWidth, d = e.padInfo.front, p = e.padInfo.top, f = e.padInfo.left;
    for (let m = 0; m < e.batchSize; ++m) for (let g = 0; g < e.inChannels; ++g) for (let y = 0; y < e.outDepth; ++y) {
      const b = y * s - d;
      let w = b;
      for (; w < 0; ) w += i;
      const x = Math.min(e.inDepth, c + b);
      for (let S = 0; S < e.outHeight; ++S) {
        const I = S * r - p;
        let E = I;
        for (; E < 0; ) E += a;
        const R = Math.min(e.inHeight, u + I);
        for (let N = 0; N < e.outWidth; ++N) {
          const k = N * o - f;
          let $ = k;
          for (; $ < 0; ) $ += l;
          const F = Math.min(e.inWidth, h + k);
          let M = Number.NEGATIVE_INFINITY, U = -1;
          for (let W = w; W < x; W += i) {
            const V = W - b;
            for (let H = E; H < R; H += a) {
              const G = H - I;
              for (let Y = $; Y < F; Y += l) {
                const te = Y - k, se = t.get(m, W, H, Y, g);
                se >= M && (M = se, U = V * u * h + G * u + te);
              }
            }
          }
          n.set(U, m, y, S, N, g);
        }
      }
    }
    return n;
  }
  function a5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e;
    Ce(r, "avgPool");
    const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
    C(sn(i, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
    const u = bs(r.shape, o, i, c, a, l);
    let h;
    if (u.filterWidth === 1 && u.filterHeight === 1 && Ue(u.inShape, u.outShape)) h = cr({
      inputs: {
        x: r
      },
      backend: n
    });
    else {
      const d = n.data.get(r.dataId).values, p = Ee(r.shape), f = B0(d, r.shape, r.dtype, p, u, "avg");
      h = n.makeTensorInfo(u.outShape, r.dtype, f.values);
    }
    return h;
  }
  const l5 = {
    kernelName: Bc,
    backendName: "cpu",
    kernelFunc: a5
  };
  function c5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { filterSize: o, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s;
    Ce(r, "avgPool3d");
    const u = Dr(r.shape, o, i, 1, a, l, c), h = n.data.get(r.dataId).values, d = qE(h, r.shape, r.dtype, Ee(r.shape), u, "avg");
    return n.makeTensorInfo(d.shape, "float32", d.values);
  }
  const u5 = {
    kernelName: Vc,
    backendName: "cpu",
    kernelFunc: c5
  };
  function h5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, input: o } = e, { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
    Ce([
      r,
      o
    ], "avgPool3DGrad");
    const u = Dr(o.shape, i, a, 1, l, c), h = u.strideDepth, d = u.strideHeight, p = u.strideWidth, f = u.filterDepth, m = u.filterHeight, g = u.filterWidth, y = u.dilationDepth, b = u.dilationHeight, w = u.dilationWidth, x = u.effectiveFilterDepth, S = u.effectiveFilterHeight, I = u.effectiveFilterWidth, E = x - 1 - u.padInfo.front, R = I - 1 - u.padInfo.left, N = S - 1 - u.padInfo.top, k = Me(o.shape, "float32"), $ = 1 / (f * m * g), F = n.bufferSync(r);
    for (let M = 0; M < u.batchSize; ++M) for (let U = 0; U < u.inChannels; ++U) for (let W = 0; W < u.inDepth; ++W) for (let V = 0; V < u.inHeight; ++V) for (let H = 0; H < u.inWidth; ++H) {
      const G = W - E, Y = V - N, te = H - R;
      let se = 0;
      for (let re = 0; re < x; re += y) {
        const ie = (G + re) / h;
        if (!(ie < 0 || ie >= u.outDepth || Math.floor(ie) !== ie)) for (let fe = 0; fe < S; fe += b) {
          const pe = (Y + fe) / d;
          if (!(pe < 0 || pe >= u.outHeight || Math.floor(pe) !== pe)) for (let ye = 0; ye < I; ye += w) {
            const K = (te + ye) / p;
            if (K < 0 || K >= u.outWidth || Math.floor(K) !== K) continue;
            const oe = F.get(M, ie, pe, K, U);
            se += oe;
          }
        }
      }
      k.set(se * $, M, W, V, H, U);
    }
    return n.makeTensorInfo(k.shape, k.dtype, k.values);
  }
  const d5 = {
    kernelName: Sp,
    backendName: "cpu",
    kernelFunc: h5
  };
  function p5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, input: o } = e, i = o;
    Ce([
      r,
      o
    ], "avgPoolGrad");
    const { filterSize: a, strides: l, pad: c } = s, u = bs(i.shape, a, l, 1, c), h = u.strideHeight, d = u.strideWidth, p = u.filterHeight, f = u.filterWidth, m = u.dilationHeight, g = u.dilationWidth, y = u.effectiveFilterHeight, b = u.effectiveFilterWidth, w = b - 1 - u.padInfo.left, x = y - 1 - u.padInfo.top, S = Me(i.shape, "float32"), I = 1 / (p * f), E = n.data.get(r.dataId).values, R = Me(r.shape, "float32", E);
    for (let N = 0; N < u.batchSize; ++N) for (let k = 0; k < u.inChannels; ++k) for (let $ = 0; $ < u.inHeight; ++$) for (let F = 0; F < u.inWidth; ++F) {
      const M = $ - x, U = F - w;
      let W = 0;
      for (let V = 0; V < y; V += m) {
        const H = (M + V) / h;
        if (!(H < 0 || H >= u.outHeight || Math.floor(H) !== H)) for (let G = 0; G < b; G += g) {
          const Y = (U + G) / d;
          if (Y < 0 || Y >= u.outWidth || Math.floor(Y) !== Y) continue;
          const te = R.get(N, H, Y, k);
          W += te;
        }
      }
      S.set(W * I, N, $, F, k);
    }
    return n.makeTensorInfo(S.shape, S.dtype, S.values);
  }
  const f5 = {
    kernelName: vp,
    backendName: "cpu",
    kernelFunc: p5
  };
  function m5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, scale: o, offset: i, mean: a, variance: l } = e;
    C(a.shape.length === l.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), C(i == null || a.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), C(o == null || a.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), Ce([
      r,
      a,
      l,
      o,
      i
    ], "batchNorm");
    let { varianceEpsilon: c } = s;
    c == null && (c = 1e-3);
    const u = n.data.get(r.dataId).values, h = n.data.get(a.dataId).values, d = n.data.get(l.dataId).values, p = o ? n.data.get(o.dataId).values : new Float32Array([
      1
    ]), f = i ? n.data.get(i.dataId).values : new Float32Array([
      0
    ]), m = new Float32Array(u.length), g = f.length, y = p.length, b = d.length, w = h.length;
    let x = 0, S = 0, I = 0, E = 0;
    for (let R = 0; R < u.length; ++R) m[R] = f[x++] + (u[R] - h[S++]) * p[I++] / Math.sqrt(d[E++] + c), x >= g && (x = 0), S >= w && (S = 0), I >= y && (I = 0), E >= b && (E = 0);
    return n.makeTensorInfo(r.shape, r.dtype, m);
  }
  const g5 = {
    kernelName: tu,
    backendName: "cpu",
    kernelFunc: m5
  };
  function y5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { blockShape: o, crops: i } = s;
    Ce([
      r
    ], "batchToSpaceND");
    const a = o.reduce((y, b) => y * b), l = oh(r.shape, o, a), c = ih(l.length, o.length), u = ah(r.shape, o, a), h = Px(i, o.length), d = zx(u, i, o.length), p = ut({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: l
      }
    }), f = Ln({
      inputs: {
        x: p
      },
      backend: n,
      attrs: {
        perm: c
      }
    }), m = ut({
      inputs: {
        x: f
      },
      backend: n,
      attrs: {
        shape: u
      }
    }), g = di({
      inputs: {
        x: m
      },
      backend: n,
      attrs: {
        begin: h,
        size: d
      }
    });
    return n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(m), g;
  }
  const b5 = {
    kernelName: Uc,
    backendName: "cpu",
    kernelFunc: y5
  };
  function x5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, weights: o } = e, { size: i } = s, a = n.data.get(r.dataId).values, l = n.data.get(o.dataId).values, c = F0(a, l, o.dtype, o.shape, i);
    return n.makeTensorInfo([
      i
    ], o.dtype, c);
  }
  const w5 = {
    kernelName: $p,
    backendName: "cpu",
    kernelFunc: x5
  };
  function v5(t) {
    const { inputs: e, backend: n } = t, { s0: s, s1: r } = e, o = n.data.get(s.dataId).values, i = n.data.get(r.dataId).values, a = Fe(Array.from(o), Array.from(i));
    return n.makeTensorInfo([
      a.length
    ], "int32", Int32Array.from(a));
  }
  const S5 = {
    kernelName: Cp,
    backendName: "cpu",
    kernelFunc: v5
  };
  const $5 = nt(wa, (t, e) => {
    const n = e;
    return t > n.clipValueMax ? n.clipValueMax : t < n.clipValueMin ? n.clipValueMin : t;
  }), C5 = {
    kernelName: wa,
    backendName: "cpu",
    kernelFunc: $5
  };
  const I5 = (t) => {
    const { x: e } = t.inputs, n = t.backend, s = new Float32Array(X(e.shape)), r = n.data.get(e.dataId), o = r.complexTensorInfos.real, i = r.complexTensorInfos.imag, a = n.data.get(o.dataId).values, l = n.data.get(i.dataId).values;
    for (let c = 0; c < a.length; c++) {
      const u = a[c], h = l[c];
      s[c] = Math.hypot(u, h);
    }
    return n.makeOutput(s, e.shape, "float32");
  }, N5 = {
    kernelName: Hc,
    backendName: "cpu",
    kernelFunc: I5
  };
  function ca(t) {
    const { inputs: e, backend: n } = t, { input: s } = e, r = n.data.get(s.dataId).complexTensorInfos.imag, o = n.data.get(r.dataId).values;
    return n.makeTensorInfo(r.shape, r.dtype, o);
  }
  const k5 = {
    kernelName: Gp,
    backendName: "cpu",
    kernelFunc: ca
  };
  function ua(t) {
    const { inputs: e, backend: n, attrs: s } = t, { axis: r } = s, o = Ve(r, e[0].shape)[0], i = e.map((m) => m.shape);
    Ox(i, o);
    let a = tr(e.map((m) => m.shape), o);
    if (X(a) === 0) return n.makeTensorInfo(a, e[0].dtype, []);
    const l = e.filter((m) => X(m.shape) > 0);
    if (l.length === 1) return cr({
      inputs: {
        x: l[0]
      },
      backend: n
    });
    if (l[0].dtype === "complex64") {
      const m = l.map((x) => hi({
        inputs: {
          input: x
        },
        backend: n
      })), g = l.map((x) => ca({
        inputs: {
          input: x
        },
        backend: n
      })), y = ua({
        inputs: m,
        backend: n,
        attrs: {
          axis: o
        }
      }), b = ua({
        inputs: g,
        backend: n,
        attrs: {
          axis: o
        }
      }), w = Wn({
        inputs: {
          real: y,
          imag: b
        },
        backend: n
      });
      return m.forEach((x) => n.disposeIntermediateTensorInfo(x)), g.forEach((x) => n.disposeIntermediateTensorInfo(x)), n.disposeIntermediateTensorInfo(y), n.disposeIntermediateTensorInfo(b), w;
    }
    const c = l.map((m) => {
      const y = [
        -1,
        X(m.shape.slice(o))
      ];
      return ut({
        inputs: {
          x: m
        },
        backend: n,
        attrs: {
          shape: y
        }
      });
    }), u = c.map((m) => ({
      vals: n.data.get(m.dataId).values,
      shape: m.shape
    }));
    a = tr(c.map((m) => m.shape), 1);
    const h = c[0].shape[0] === 1, d = YT(u, a, e[0].dtype, h), p = tr(l.map((m) => m.shape), o), f = n.makeTensorInfo(p, e[0].dtype, d);
    return c.forEach((m) => n.disposeIntermediateTensorInfo(m)), f;
  }
  const T5 = {
    kernelName: jc,
    backendName: "cpu",
    kernelFunc: ua
  };
  function KE(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, filter: o } = e, { strides: i, pad: a, dataFormat: l, dilations: c, dimRoundingMode: u } = s;
    Ce([
      r,
      o
    ], "conv2d");
    const h = Or(l), d = jt(r.shape, o.shape, i, c, a, u, false, h), p = d.filterHeight, f = d.filterWidth, m = d.dilationHeight, g = d.dilationWidth, y = d.padInfo.left, b = d.padInfo.top, w = d.dataFormat === "channelsLast", x = new Rt(d.outShape, r.dtype), S = Ee(r.shape), I = Ee(o.shape), E = S[0], R = w ? S[1] : S[2], N = w ? S[2] : 1, k = w ? 1 : S[1], $ = x.strides[0], F = w ? x.strides[1] : x.strides[2], M = w ? x.strides[2] : 1, U = w ? 1 : x.strides[1], W = n.data.get(r.dataId).values, V = n.data.get(o.dataId).values, H = x.values;
    for (let G = 0; G < d.batchSize; ++G) {
      const Y = G * E, te = G * $;
      for (let se = 0; se < d.outHeight; ++se) {
        const re = te + se * F, ie = se * d.strideHeight - b;
        for (let fe = 0; fe < p; ++fe) {
          const pe = ie + fe * m;
          if (pe < 0 || pe >= d.inHeight) continue;
          const ye = fe * I[0], K = Y + pe * R;
          for (let oe = 0; oe < d.outWidth; ++oe) {
            const ne = re + oe * M, ue = oe * d.strideWidth - y;
            for (let Se = 0; Se < f; ++Se) {
              const A = ue + Se * g;
              if (A < 0 || A >= d.inWidth) continue;
              const _ = ye + Se * I[1], B = K + A * N;
              let Z = _;
              for (let Q = 0; Q < d.inChannels; ++Q) {
                const ee = W[B + Q * k];
                for (let he = 0; he < d.outChannels; ++he) H[ne + he * U] += ee * V[Z + he];
                Z += d.outChannels;
              }
            }
          }
        }
      }
    }
    return n.makeTensorInfo(x.shape, x.dtype, H);
  }
  const E5 = {
    kernelName: qc,
    backendName: "cpu",
    kernelFunc: KE
  };
  function R5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, dy: o } = e, { strides: i, pad: a, dataFormat: l, dimRoundingMode: c, filterShape: u } = s;
    Ce([
      r,
      o
    ], "conv2dBackpropFilter");
    const h = Or(l), d = jt(r.shape, u, i, 1, a, c, false, h), { strideHeight: p, strideWidth: f, filterHeight: m, filterWidth: g } = d, y = d.dataFormat === "channelsLast", b = new Rt(d.filterShape, "float32"), w = d.padInfo.left, x = d.padInfo.top, S = n.data.get(r.dataId).values, I = n.data.get(o.dataId).values, E = new Rt(r.shape, r.dtype, S), R = new Rt(o.shape, o.dtype, I);
    for (let N = 0; N < m; ++N) {
      const k = Math.max(0, Math.ceil((x - N) / p)), $ = Math.min(d.outHeight, (d.inHeight + x - N) / p);
      for (let F = 0; F < g; ++F) {
        const M = Math.max(0, Math.ceil((w - F) / f)), U = Math.min(d.outWidth, (d.inWidth + w - F) / f);
        for (let W = 0; W < d.inChannels; ++W) for (let V = 0; V < d.outChannels; ++V) {
          let H = 0;
          for (let G = 0; G < d.batchSize; ++G) for (let Y = k; Y < $; ++Y) {
            const te = N + Y * p - x;
            for (let se = M; se < U; ++se) {
              const re = F + se * f - w;
              y ? H += E.get(G, te, re, W) * R.get(G, Y, se, V) : H += E.get(G, W, te, re) * R.get(G, V, Y, se);
            }
          }
          b.set(H, N, F, W, V);
        }
      }
    }
    return n.makeTensorInfo(b.shape, b.dtype, b.values);
  }
  const A5 = {
    kernelName: Np,
    backendName: "cpu",
    kernelFunc: R5
  };
  function _5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, filter: o } = e, { inputShape: i, strides: a, pad: l, dataFormat: c, dimRoundingMode: u } = s;
    Ce([
      r,
      o
    ], "conv2dBackpropInput");
    const h = Ee(o.shape), d = Ee(r.shape);
    let p = Or(c);
    const f = jt(i, o.shape, a, 1, l, u, false, p), m = new Rt(f.inShape, "float32"), g = m.values, y = n.data.get(r.dataId).values, b = n.data.get(o.dataId).values, [w, x, S] = h, { batchSize: I, filterHeight: E, filterWidth: R, inChannels: N, inHeight: k, inWidth: $, outChannels: F, outHeight: M, outWidth: U, strideHeight: W, strideWidth: V } = f;
    p = f.dataFormat;
    const H = E - 1 - f.padInfo.top, G = R - 1 - f.padInfo.left, Y = p === "channelsLast", te = m.strides[0], se = Y ? m.strides[1] : m.strides[2], re = Y ? m.strides[2] : 1, ie = Y ? 1 : m.strides[1], fe = d[0], pe = Y ? d[1] : d[2], ye = Y ? d[2] : 1, K = Y ? 1 : d[1];
    for (let oe = 0; oe < I; ++oe) for (let ne = 0; ne < N; ++ne) for (let ue = 0; ue < k; ++ue) {
      const Se = ue - H, A = Math.max(0, Math.ceil(Se / W)), _ = Math.min(M, (E + Se) / W);
      for (let B = 0; B < $; ++B) {
        const Z = B - G, Q = Math.max(0, Math.ceil(Z / V)), ee = Math.min(U, (R + Z) / V);
        let he = 0;
        for (let de = A; de < _; ++de) {
          const ce = de * W - Se;
          for (let Te = Q; Te < ee; ++Te) {
            const we = Te * V - Z, Ie = fe * oe + pe * de + ye * Te, Ae = w * (E - 1 - ce) + x * (R - 1 - we) + S * ne;
            for (let Pe = 0; Pe < F; ++Pe) {
              const Ke = y[Ie + K * Pe], Ge = b[Ae + Pe];
              he += Ke * Ge;
            }
          }
        }
        const me = te * oe + se * ue + re * B + ie * ne;
        g[me] = he;
      }
    }
    return n.makeTensorInfo(m.shape, m.dtype, m.values);
  }
  const D5 = {
    kernelName: Kc,
    backendName: "cpu",
    kernelFunc: _5
  };
  function O5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, filter: o } = e, { strides: i, pad: a, dilations: l } = s;
    Ce([
      r,
      o
    ], "conv3d");
    const c = vo(r.shape, o.shape, i, l, a), { filterDepth: u, filterHeight: h, filterWidth: d, dilationDepth: p, dilationHeight: f, dilationWidth: m, padInfo: g } = c, y = g.front, b = g.left, w = g.top, x = new Rt(c.outShape, r.dtype), S = n.data.get(r.dataId).values, I = n.data.get(o.dataId).values, E = x.values, R = Ee(r.shape), N = Ee(o.shape);
    for (let k = 0; k < c.batchSize; ++k) {
      const $ = k * R[0], F = k * x.strides[0];
      for (let M = 0; M < c.outDepth; ++M) {
        const U = F + M * x.strides[1], W = M * c.strideDepth - y;
        for (let V = 0; V < u; ++V) {
          const H = W + V * p;
          if (H < 0 || H >= c.inDepth) continue;
          const G = V * N[0], Y = $ + H * R[1];
          for (let te = 0; te < c.outHeight; ++te) {
            const se = U + te * x.strides[2], re = te * c.strideHeight - w;
            for (let ie = 0; ie < h; ++ie) {
              const fe = re + ie * f;
              if (fe < 0 || fe >= c.inHeight) continue;
              const pe = G + ie * N[1], ye = Y + fe * R[2];
              for (let K = 0; K < c.outWidth; ++K) {
                const oe = se + K * c.outChannels, ne = K * c.strideWidth - b;
                for (let ue = 0; ue < d; ++ue) {
                  const Se = ne + ue * m;
                  if (Se < 0 || Se >= c.inWidth) continue;
                  const A = pe + ue * N[2], _ = ye + Se * c.inChannels;
                  let B = A;
                  for (let Z = 0; Z < c.inChannels; ++Z) {
                    const Q = S[_ + Z];
                    for (let ee = 0; ee < c.outChannels; ++ee) E[oe + ee] += Q * I[B + ee];
                    B += c.outChannels;
                  }
                }
              }
            }
          }
        }
      }
    }
    return n.makeTensorInfo(x.shape, x.dtype, x.values);
  }
  const F5 = {
    kernelName: Xc,
    backendName: "cpu",
    kernelFunc: O5
  };
  function L5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, dy: o } = e, { strides: i, pad: a, filterShape: l } = s;
    Ce([
      r,
      o
    ], "conv3dBackpropFilterV2");
    const c = Ee(r.shape), u = Ee(o.shape), h = vo(r.shape, l, i, 1, a), d = h.strideDepth, p = h.strideHeight, f = h.strideWidth, m = h.filterDepth, g = h.filterHeight, y = h.filterWidth, b = new Rt(h.filterShape, "float32"), w = b.values, [x, S, I, E] = b.strides, R = n.data.get(o.dataId).values, [N, k, $, F] = u, M = n.data.get(r.dataId).values, [U, W, V, H] = c, G = h.padInfo.front, Y = h.padInfo.left, te = h.padInfo.top;
    for (let se = 0; se < m; ++se) {
      const re = Math.max(0, Math.ceil((G - se) / d)), ie = Math.min(h.outDepth, (h.inDepth + G - se) / d), fe = se * x;
      for (let pe = 0; pe < g; ++pe) {
        const ye = Math.max(0, Math.ceil((te - pe) / p)), K = Math.min(h.outHeight, (h.inHeight + te - pe) / p), oe = pe * S + fe;
        for (let ne = 0; ne < y; ++ne) {
          const ue = Math.max(0, Math.ceil((Y - ne) / f)), Se = Math.min(h.outWidth, (h.inWidth + Y - ne) / f), A = ne * I + oe;
          for (let _ = 0; _ < h.inChannels; ++_) {
            const B = _ * E + A;
            for (let Z = 0; Z < h.outChannels; ++Z) {
              let Q = 0;
              for (let ee = 0; ee < h.batchSize; ++ee) {
                const he = ee * U, me = ee * N;
                for (let de = re; de < ie; ++de) {
                  const Te = (se + de * d - G) * W + he, we = de * k + me;
                  for (let Ie = ye; Ie < K; ++Ie) {
                    const Pe = (pe + Ie * p - te) * V + Te, Ke = Ie * $ + we;
                    for (let Ge = ue; Ge < Se; ++Ge) {
                      const Kt = (ne + Ge * f - Y) * H + Pe, Pn = Ge * F + Ke;
                      Q += M[Kt + _] * R[Pn + Z];
                    }
                  }
                }
              }
              w[B + Z] = Q;
            }
          }
        }
      }
    }
    return n.makeTensorInfo(b.shape, b.dtype, b.values);
  }
  const P5 = {
    kernelName: kp,
    backendName: "cpu",
    kernelFunc: L5
  };
  function z5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, filter: o } = e, { pad: i, strides: a, inputShape: l } = s;
    Ce([
      r
    ], "conv3dBackpropInputV2");
    const c = Ee(r.shape), u = Ee(o.shape), h = vo(l, o.shape, a, 1, i), d = new Rt(h.inShape, "float32"), p = d.values, [f, m, g, y] = d.strides, b = n.data.get(r.dataId).values, [w, x, S, I] = c, E = n.data.get(o.dataId).values, [R, N, k, $] = u, { batchSize: F, filterDepth: M, filterHeight: U, filterWidth: W, inChannels: V, inDepth: H, inHeight: G, inWidth: Y, outChannels: te, outDepth: se, outHeight: re, outWidth: ie, strideDepth: fe, strideHeight: pe, strideWidth: ye } = h, K = M - 1 - h.padInfo.front, oe = U - 1 - h.padInfo.top, ne = W - 1 - h.padInfo.left;
    for (let ue = 0; ue < F; ++ue) for (let Se = 0; Se < V; ++Se) for (let A = 0; A < H; ++A) {
      const _ = A - K, B = Math.max(0, Math.ceil(_ / fe)), Z = Math.min(se, (M + _) / fe);
      for (let Q = 0; Q < G; ++Q) {
        const ee = Q - oe, he = Math.max(0, Math.ceil(ee / pe)), me = Math.min(re, (U + ee) / pe);
        for (let de = 0; de < Y; ++de) {
          const ce = de - ne, Te = Math.max(0, Math.ceil(ce / ye)), we = Math.min(ie, (W + ce) / ye);
          let Ie = 0;
          for (let Ae = B; Ae < Z; ++Ae) {
            const Pe = Ae * fe - _;
            for (let Ke = he; Ke < me; ++Ke) {
              const Ge = Ke * pe - ee;
              for (let zt = Te; zt < we; ++zt) {
                const Kt = zt * ye - ce, Pn = w * ue + x * Ae + S * Ke + I * zt, as = R * (M - 1 - Pe) + N * (U - 1 - Ge) + k * (W - 1 - Kt) + $ * Se;
                for (let Vs = 0; Vs < te; ++Vs) {
                  const Ch = b[Pn + Vs], Sn = E[as + Vs];
                  Ie += Ch * Sn;
                }
              }
            }
          }
          p[f * ue + m * A + g * Q + y * de + Se] = Ie;
        }
      }
    }
    return n.makeTensorInfo(d.shape, d.dtype, d.values);
  }
  const M5 = {
    kernelName: Tp,
    backendName: "cpu",
    kernelFunc: z5
  };
  const B5 = nt(va, (t) => Math.cos(t)), V5 = {
    kernelName: va,
    backendName: "cpu",
    kernelFunc: B5
  };
  const W5 = nt(Sa, (t) => Math.cosh(t)), U5 = {
    kernelName: Sa,
    backendName: "cpu",
    kernelFunc: W5
  };
  function G5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { image: r, boxes: o, boxInd: i } = e, { cropSize: a, method: l, extrapolationValue: c } = s, [u, h, d, p] = r.shape, f = o.shape[0], [m, g] = a, y = Me([
      f,
      m,
      g,
      p
    ], "float32"), b = n.data.get(o.dataId).values, w = n.data.get(i.dataId).values, x = n.data.get(r.dataId).values, S = Ee(r.shape), I = Ee(y.shape);
    for (let E = 0; E < f; E++) {
      const R = E * 4, N = b[R], k = b[R + 1], $ = b[R + 2], F = b[R + 3], M = w[E];
      if (M >= u) continue;
      const U = m > 1 ? ($ - N) * (h - 1) / (m - 1) : 0, W = g > 1 ? (F - k) * (d - 1) / (g - 1) : 0;
      for (let V = 0; V < m; V++) {
        const H = m > 1 ? N * (h - 1) + V * U : 0.5 * (N + $) * (h - 1);
        if (H < 0 || H > h - 1) {
          for (let G = 0; G < g; G++) for (let Y = 0; Y < p; Y++) {
            const te = Y + G * I[2] + V * I[1] + E * I[0];
            y.values[te] = c;
          }
          continue;
        }
        if (l === "bilinear") {
          const G = Math.floor(H), Y = Math.ceil(H), te = H - G;
          for (let se = 0; se < g; se++) {
            const re = g > 1 ? k * (d - 1) + se * W : 0.5 * (k + F) * (d - 1);
            if (re < 0 || re > d - 1) {
              for (let ye = 0; ye < p; ye++) {
                const K = ye + se * I[2] + V * I[1] + E * I[0];
                y.values[K] = c;
              }
              continue;
            }
            const ie = Math.floor(re), fe = Math.ceil(re), pe = re - ie;
            for (let ye = 0; ye < p; ye++) {
              let K = ye + ie * S[2] + G * S[1] + M * S[0];
              const oe = x[K];
              K = ye + fe * S[2] + G * S[1] + M * S[0];
              const ne = x[K];
              K = ye + ie * S[2] + Y * S[1] + M * S[0];
              const ue = x[K];
              K = ye + fe * S[2] + Y * S[1] + M * S[0];
              const Se = x[K], A = oe + (ne - oe) * pe, _ = ue + (Se - ue) * pe;
              K = ye + se * I[2] + V * I[1] + E * I[0], y.values[K] = A + (_ - A) * te;
            }
          }
        } else for (let G = 0; G < g; ++G) {
          const Y = g > 1 ? k * (d - 1) + G * W : 0.5 * (k + F) * (d - 1);
          if (Y < 0 || Y > d - 1) {
            for (let re = 0; re < p; re++) {
              const ie = re + G * I[2] + V * I[1] + E * I[0];
              y.values[ie] = c;
            }
            continue;
          }
          const te = Math.round(Y), se = Math.round(H);
          for (let re = 0; re < p; re++) {
            const ie = re + te * S[2] + se * S[1] + M * S[0], fe = re + G * I[2] + V * I[1] + E * I[0];
            y.values[fe] = x[ie];
          }
        }
      }
    }
    return n.makeTensorInfo(y.shape, y.dtype, y.values);
  }
  const H5 = {
    kernelName: Rp,
    backendName: "cpu",
    kernelFunc: G5
  };
  function j5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, exclusive: i, reverse: a } = s;
    Ce(r, "cumprod");
    const l = bt([
      o
    ], r.shape.length);
    let c = r;
    l != null && (c = Ln({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: l
      }
    }));
    const u = Ct(1, r.shape.length)[0];
    if (u !== c.shape.length - 1) throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
    const h = An(c.dtype, "int32"), d = bp(X(c.shape), h), p = n.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = a ? (y, b) => y + f - b - 1 : (y, b) => y + b;
    for (let y = 0; y < p.length; y += f) for (let b = 0; b < f; b++) {
      const w = m(y, b);
      if (b === 0) d[w] = i ? 1 : p[w];
      else {
        const x = m(y, b - 1);
        d[w] = i ? p[x] * d[x] : p[w] * d[x];
      }
    }
    const g = n.makeTensorInfo(c.shape, h, d);
    if (l != null) {
      const y = So(l), b = Ln({
        inputs: {
          x: g
        },
        backend: n,
        attrs: {
          perm: y
        }
      });
      return n.disposeIntermediateTensorInfo(g), n.disposeIntermediateTensorInfo(c), b;
    }
    return g;
  }
  const q5 = {
    kernelName: Ep,
    backendName: "cpu",
    kernelFunc: j5
  };
  function K5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, exclusive: i, reverse: a } = s;
    Ce(r, "cumsum");
    const l = bt([
      o
    ], r.shape.length);
    let c = r;
    l != null && (c = Ln({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: l
      }
    }));
    const u = Ct(1, r.shape.length)[0];
    if (u !== c.shape.length - 1) throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
    const h = An(c.dtype, "int32"), d = tn(X(c.shape), h), p = n.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = a ? (y, b) => y + f - b - 1 : (y, b) => y + b;
    for (let y = 0; y < p.length; y += f) for (let b = 0; b < f; b++) {
      const w = m(y, b);
      if (b === 0) d[w] = i ? 0 : p[w];
      else {
        const x = m(y, b - 1);
        d[w] = i ? p[x] + d[x] : p[w] + d[x];
      }
    }
    const g = n.makeTensorInfo(c.shape, h, d);
    if (l != null) {
      const y = So(l), b = Ln({
        inputs: {
          x: g
        },
        backend: n,
        attrs: {
          perm: y
        }
      });
      return n.disposeIntermediateTensorInfo(g), n.disposeIntermediateTensorInfo(c), b;
    }
    return g;
  }
  const X5 = {
    kernelName: Yc,
    backendName: "cpu",
    kernelFunc: K5
  };
  function Y5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, weights: o } = e, { size: i, binaryOutput: a } = s;
    if (r.shape.length === 1) {
      const l = n.data.get(r.dataId).values, c = n.data.get(o.dataId).values, u = F0(l, c, o.dtype, o.shape, i);
      return n.makeTensorInfo([
        i
      ], o.dtype, u);
    } else if (r.shape.length === 2) {
      const l = n.bufferSync(r), c = n.bufferSync(o), u = qT(l, c, i, a);
      return n.makeTensorInfo(u.shape, o.dtype, u.values);
    }
    throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
  }
  const Z5 = {
    kernelName: Ap,
    backendName: "cpu",
    kernelFunc: Y5
  };
  function J5(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { blockSize: o, dataFormat: i } = s;
    C(i === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);
    const a = r.shape[0], l = r.shape[1], c = r.shape[2], u = r.shape[3], h = l * o, d = c * o, p = u / (o * o), f = n.data.get(r.dataId).values, m = new Float32Array(a * h * d * p);
    let g = 0;
    for (let y = 0; y < a; ++y) for (let b = 0; b < h; ++b) {
      const w = Math.floor(b / o), x = b % o;
      for (let S = 0; S < d; ++S) {
        const I = Math.floor(S / o), E = S % o, R = (x * o + E) * p;
        for (let N = 0; N < p; ++N) {
          const $ = N + R + u * (I + c * (w + l * y));
          m[g++] = f[$];
        }
      }
    }
    return n.makeTensorInfo([
      a,
      h,
      d,
      p
    ], r.dtype, m);
  }
  const Q5 = {
    kernelName: _p,
    backendName: "cpu",
    kernelFunc: J5
  };
  function XE(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, filter: o } = e, { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
    Ce([
      r,
      o
    ], "depthwiseConv2DNative");
    const u = Ee(r.shape), h = Ee(o.shape);
    let d = l;
    d == null && (d = [
      1,
      1
    ]), C(sn(i, d), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`);
    const p = jt(r.shape, o.shape, i, d, a, c, true), { filterHeight: f, filterWidth: m, dilationHeight: g, dilationWidth: y, padInfo: b } = p, w = b.left, x = b.top, S = p.outChannels / p.inChannels, I = new Rt(p.outShape, r.dtype), E = n.data.get(r.dataId).values, R = n.data.get(o.dataId).values, N = I.values;
    for (let k = 0; k < p.batchSize; ++k) {
      const $ = k * u[0], F = k * I.strides[0];
      for (let M = 0; M < p.outHeight; ++M) {
        const U = F + M * I.strides[1], W = M * p.strideHeight - x;
        for (let V = 0; V < f; ++V) {
          const H = W + V * g;
          if (H < 0 || H >= p.inHeight) continue;
          const G = V * h[0], Y = $ + H * u[1];
          for (let te = 0; te < p.outWidth; ++te) {
            const se = U + te * I.strides[2], re = te * p.strideWidth - w;
            for (let ie = 0; ie < m; ++ie) {
              const fe = re + ie * y;
              if (fe < 0 || fe >= p.inWidth) continue;
              const pe = G + ie * h[1], ye = Y + fe * p.inChannels;
              let K = se, oe = pe;
              for (let ne = 0; ne < p.inChannels; ++ne) {
                const ue = E[ye + ne];
                for (let Se = 0; Se < S; ++Se) N[K + Se] += ue * R[oe + Se];
                K += S, oe += S;
              }
            }
          }
        }
      }
    }
    return n.makeTensorInfo(I.shape, I.dtype, I.values);
  }
  const e8 = {
    kernelName: Zc,
    backendName: "cpu",
    kernelFunc: XE
  };
  function t8(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, dy: o } = e, { strides: i, dilations: a, pad: l, dimRoundingMode: c, filterShape: u } = s;
    Ce([
      r,
      o
    ], "depthwiseConv2dNativeBackpropFilter");
    const h = jt(r.shape, u, i, a, l, c, true), { strideHeight: d, strideWidth: p, filterHeight: f, filterWidth: m } = h, g = new Rt(h.filterShape, "float32"), y = h.padInfo.left, b = h.padInfo.top, w = h.outChannels / h.inChannels, x = n.data.get(r.dataId).values, S = new Rt(r.shape, r.dtype, x), I = n.data.get(o.dataId).values, E = new Rt(o.shape, o.dtype, I);
    for (let R = 0; R < f; ++R) {
      const N = Math.max(0, Math.ceil((b - R) / d)), k = Math.min(h.outHeight, (h.inHeight + b - R) / d);
      for (let $ = 0; $ < m; ++$) {
        const F = Math.max(0, Math.ceil((y - $) / p)), M = Math.min(h.outWidth, (h.inWidth + y - $) / p);
        for (let U = 0; U < h.outChannels; ++U) {
          const W = Math.trunc(U / w), V = U % w;
          let H = 0;
          for (let G = 0; G < h.batchSize; ++G) for (let Y = N; Y < k; ++Y) {
            const te = R + Y * d - b;
            for (let se = F; se < M; ++se) {
              const re = $ + se * p - y;
              H += S.get(G, te, re, W) * E.get(G, Y, se, U);
            }
          }
          g.set(H, R, $, W, V);
        }
      }
    }
    return n.makeTensorInfo(g.shape, g.dtype, g.values);
  }
  const n8 = {
    kernelName: Dp,
    backendName: "cpu",
    kernelFunc: t8
  };
  function s8(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, filter: o } = e, { strides: i, dilations: a, pad: l, dimRoundingMode: c, inputShape: u } = s;
    Ce([
      r,
      o
    ], "depthwiseConv2DNativeBackpropInput");
    const h = Ee(r.shape), d = Ee(o.shape), p = jt(u, o.shape, i, a, l, c, true), f = new Rt(p.inShape, "float32"), m = f.values, [g, y, b] = f.strides, w = n.data.get(r.dataId).values, [x, S, I] = h, E = n.data.get(o.dataId).values, [R, N, k] = d, { batchSize: $, filterHeight: F, filterWidth: M, inChannels: U, inHeight: W, inWidth: V, outChannels: H, outHeight: G, outWidth: Y, strideHeight: te, strideWidth: se } = p, re = F - 1 - p.padInfo.top, ie = M - 1 - p.padInfo.left, fe = H / U;
    for (let pe = 0; pe < $; ++pe) for (let ye = 0; ye < U; ++ye) for (let K = 0; K < W; ++K) {
      const oe = K - re, ne = Math.max(0, Math.ceil(oe / te)), ue = Math.min(G, (F + oe) / te);
      for (let Se = 0; Se < V; ++Se) {
        const A = Se - ie, _ = Math.max(0, Math.ceil(A / se)), B = Math.min(Y, (M + A) / se);
        let Z = 0;
        for (let Q = ne; Q < ue; ++Q) {
          const ee = Q * te - oe;
          for (let he = _; he < B; ++he) {
            const me = he * se - A, de = x * pe + S * Q + I * he, ce = R * (F - 1 - ee) + N * (M - 1 - me) + k * ye;
            for (let Te = 0; Te < fe; ++Te) {
              const we = ye * fe + Te, Ie = w[de + we], Ae = E[ce + Te];
              Z += Ie * Ae;
            }
          }
        }
        m[g * pe + y * K + b * Se + ye] = Z;
      }
    }
    return n.makeTensorInfo(f.shape, f.dtype, f.values);
  }
  const r8 = {
    kernelName: Op,
    backendName: "cpu",
    kernelFunc: s8
  };
  function o8(t) {
    const { inputs: e, backend: n } = t, { x: s } = e, r = X(s.shape), o = n.data.get(s.dataId).values, i = Me([
      r,
      r
    ], s.dtype), a = i.values;
    for (let c = 0; c < o.length; c++) a[c * r + c] = o[c];
    const l = [
      ...s.shape,
      ...s.shape
    ];
    return n.makeTensorInfo(l, i.dtype, i.values);
  }
  const i8 = {
    kernelName: Fp,
    backendName: "cpu",
    kernelFunc: o8
  };
  const a8 = {
    kernelName: Jc,
    backendName: "cpu",
    kernelFunc: ({ inputs: t, backend: e, attrs: n }) => {
      const { x: s, filter: r } = t, { strides: o, pad: i, dilations: a } = n, l = e, c = l.data.get(s.dataId).values, u = s.shape.length, h = l.data.get(r.dataId).values, d = r.shape.length, { batchSize: p, inHeight: f, inWidth: m, inChannels: g, outHeight: y, outWidth: b, padInfo: w, strideHeight: x, strideWidth: S, filterHeight: I, filterWidth: E, dilationHeight: R, dilationWidth: N, outShape: k } = Vu(s.shape, r.shape, o, i, "NHWC", a), $ = X(k), F = k.length, M = xt(s.dtype, $);
      for (let W = 0; W < p; ++W) for (let V = 0; V < y; ++V) {
        const H = V * x - w.top;
        for (let G = 0; G < b; ++G) {
          const Y = G * S - w.left;
          for (let te = 0; te < g; ++te) {
            let se = Number.MIN_SAFE_INTEGER;
            for (let ie = 0; ie < I; ++ie) {
              const fe = H + ie * R;
              if (fe >= 0 && fe < f) for (let pe = 0; pe < E; ++pe) {
                const ye = Y + pe * N;
                if (ye >= 0 && ye < m) {
                  const K = ks([
                    W,
                    fe,
                    ye,
                    te
                  ], u, Ee(s.shape)), oe = ks([
                    ie,
                    pe,
                    te
                  ], d, Ee(r.shape)), ne = c[K] + h[oe];
                  ne > se && (se = ne);
                }
              }
            }
            const re = ks([
              W,
              V,
              G,
              te
            ], F, Ee(k));
            M[re] = se;
          }
        }
      }
      return {
        dataId: l.write(xo(M, s.dtype), k, s.dtype),
        shape: k,
        dtype: s.dtype
      };
    }
  };
  const l8 = {
    kernelName: Nd,
    backendName: "cpu",
    kernelFunc: ({ inputs: t, backend: e, attrs: n }) => {
      const { x: s, filter: r, dy: o } = t, { strides: i, pad: a, dilations: l } = n, c = e, u = ns(s.shape, c.data.get(s.dataId).values), h = ns(r.shape, c.data.get(r.dataId).values), { batchSize: d, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: y, padInfo: b, strideHeight: w, strideWidth: x, filterHeight: S, filterWidth: I, dilationHeight: E, dilationWidth: R, outShape: N } = Vu(s.shape, r.shape, i, a, "NHWC", l);
      C(o.rank === N.length, () => `Error in ${Nd}, dy must have the same rank as output ${N.length}, but got ${o.rank}`);
      const k = ns(N, c.data.get(o.dataId).values), $ = tb(r.shape, r.dtype);
      for (let M = 0; M < d; ++M) for (let U = 0; U < g; ++U) {
        const W = U * w - b.top;
        for (let V = 0; V < y; ++V) {
          const H = V * x - b.left;
          for (let G = 0; G < m; ++G) {
            let Y = Number.MIN_SAFE_INTEGER, te = 0, se = 0;
            for (let re = 0; re < S; ++re) {
              const ie = W + re * E;
              if (ie >= 0 && ie < p) for (let fe = 0; fe < I; ++fe) {
                const pe = H + fe * R;
                if (pe >= 0 && pe < f) {
                  const ye = u[M][ie][pe][G] + h[re][fe][G];
                  ye > Y && (Y = ye, te = re, se = fe);
                }
              }
            }
            $[te][se][G] += k[M][U][V][G];
          }
        }
      }
      return {
        dataId: c.write(xo($, s.dtype), r.shape, r.dtype),
        shape: r.shape,
        dtype: r.dtype
      };
    }
  };
  const c8 = {
    kernelName: Id,
    backendName: "cpu",
    kernelFunc: ({ inputs: t, backend: e, attrs: n }) => {
      const { x: s, filter: r, dy: o } = t, { strides: i, pad: a, dilations: l } = n, c = e, u = ns(s.shape, c.data.get(s.dataId).values), h = ns(r.shape, c.data.get(r.dataId).values), { batchSize: d, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: y, padInfo: b, strideHeight: w, strideWidth: x, filterHeight: S, filterWidth: I, dilationHeight: E, dilationWidth: R, outShape: N } = Vu(s.shape, r.shape, i, a, "NHWC", l);
      C(o.rank === N.length, () => `Error in ${Id}, dy must have the same rank as output ${N.length}, but got ${o.rank}`);
      const k = ns(N, c.data.get(o.dataId).values), $ = tb(s.shape, s.dtype);
      for (let M = 0; M < d; ++M) for (let U = 0; U < g; ++U) {
        const W = U * w - b.top;
        for (let V = 0; V < y; ++V) {
          const H = V * x - b.left;
          for (let G = 0; G < m; ++G) {
            let Y = Number.MIN_SAFE_INTEGER, te = W < 0 ? 0 : W, se = H < 0 ? 0 : H;
            for (let re = 0; re < S; ++re) {
              const ie = W + re * E;
              if (ie >= 0 && ie < p) for (let fe = 0; fe < I; ++fe) {
                const pe = H + fe * R;
                if (pe >= 0 && pe < f) {
                  const ye = u[M][ie][pe][G] + h[re][fe][G];
                  ye > Y && (Y = ye, te = ie, se = pe);
                }
              }
            }
            $[M][te][se][G] += k[M][U][V][G];
          }
        }
      }
      return {
        dataId: c.write(xo($, s.dtype), s.shape, s.dtype),
        shape: s.shape,
        dtype: s.dtype
      };
    }
  };
  function u8(t) {
    const { inputs: e, backend: n, attrs: s } = t, { image: r } = e, { canvas: o, options: i } = s, { contextOptions: a, imageOptions: l } = i || {}, c = (l == null ? void 0 : l.alpha) || 1, u = (a == null ? void 0 : a.contextType) || "2d";
    if (u !== "2d") throw new Error(`Context type ${a.contextType} is not supported by the CPU backend.`);
    const h = o.getContext(u, (a == null ? void 0 : a.contextAttributes) || {});
    if (h == null) throw new Error(`Could not get the context with ${u} type.`);
    const [d, p] = r.shape.slice(0, 2), f = r.shape.length === 2 ? 1 : r.shape[2], m = n.data.get(r.dataId).values, g = r.dtype === "float32" ? 255 : 1, y = new Uint8ClampedArray(p * d * 4);
    for (let w = 0; w < d * p; ++w) {
      const x = [
        0,
        0,
        0,
        255 * c
      ];
      for (let I = 0; I < f; I++) {
        const E = m[w * f + I];
        if (r.dtype === "float32") {
          if (E < 0 || E > 1) throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${E}.`);
        } else if (r.dtype === "int32" && (E < 0 || E > 255)) throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${E}.`);
        f === 1 ? (x[0] = E * g, x[1] = E * g, x[2] = E * g) : x[I] = E * g;
      }
      const S = w * 4;
      y[S + 0] = Math.round(x[0]), y[S + 1] = Math.round(x[1]), y[S + 2] = Math.round(x[2]), y[S + 3] = Math.round(x[3]);
    }
    o.width = p, o.height = d;
    const b = new ImageData(y, p, d);
    return h.putImageData(b, 0, 0), r;
  }
  const h8 = {
    kernelName: Lp,
    backendName: "cpu",
    kernelFunc: u8
  };
  function bh(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, keepDims: i } = s;
    Ce(r, "sum");
    let a;
    r.dtype === "bool" ? a = mo({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        dtype: "int32"
      }
    }) : a = cr({
      inputs: {
        x: r
      },
      backend: n
    });
    const l = a.shape.length, c = Ve(o, a.shape), u = bt(c, l);
    let h = c, d = a;
    u != null && (d = Ln({
      inputs: {
        x: a
      },
      backend: n,
      attrs: {
        perm: u
      }
    }), h = Ct(h.length, l)), rn("sum", h, d.shape.length);
    const [p, f] = qt(d.shape, h), m = An(d.dtype, "int32");
    let g = Gd(n, p, m);
    const y = X(f), b = n.data.get(g.dataId).values, w = n.data.get(d.dataId).values;
    for (let x = 0; x < b.length; ++x) {
      const S = x * y;
      let I = 0;
      for (let E = 0; E < y; ++E) I += w[S + E];
      b[x] = I;
    }
    if (i) {
      const x = $t(g.shape, c), S = g;
      g = ut({
        inputs: {
          x: g
        },
        backend: n,
        attrs: {
          shape: x
        }
      }), n.disposeIntermediateTensorInfo(S);
    }
    return n.disposeIntermediateTensorInfo(a), u != null && n.disposeIntermediateTensorInfo(d), g;
  }
  const d8 = {
    kernelName: Au,
    backendName: "cpu",
    kernelFunc: bh
  };
  function p8(t) {
    const { inputs: e, backend: n, attrs: s } = t, { equation: r } = s, o = e, { allDims: i, summedDims: a, idDims: l } = jx(r, o.length);
    Kx(i.length, l, o);
    const { path: c, steps: u } = Xx(a, l), h = u.length;
    let d = null, p = i.length;
    const f = [];
    for (let m = 0; m < h; ++m) {
      for (const g of u[m]) {
        const { permutationIndices: y, expandDims: b } = qx(p, l[g]);
        let w;
        Yx(y) ? w = o[g] : (w = Ln({
          inputs: {
            x: o[g]
          },
          backend: n,
          attrs: {
            perm: y
          }
        }), f.push(w));
        const x = w.shape.slice();
        for (let S = 0; S < b.length; ++S) x.splice(b[S], 0, 1);
        Ue(w.shape, x) || (w = ut({
          inputs: {
            x: w
          },
          backend: n,
          attrs: {
            shape: x
          }
        }), f.push(w)), d === null ? d = w : (d = Lm({
          inputs: {
            a: w,
            b: d
          },
          backend: n
        }), f.push(d));
      }
      m < h - 1 && (c[m] >= 0 && (d = bh({
        inputs: {
          x: d
        },
        backend: n,
        attrs: {
          axis: c[m] - (i.length - p),
          keepDims: false
        }
      }), f.push(d)), p--);
    }
    for (const m of f) m !== d && n.disposeIntermediateTensorInfo(m);
    return d;
  }
  const f8 = {
    kernelName: Pp,
    backendName: "cpu",
    kernelFunc: p8
  };
  function m8(t) {
    const { inputs: e, backend: n } = t, { dy: s, y: r } = e;
    Ce([
      s,
      r
    ], "eluGrad");
    const o = new Float32Array(X(r.shape)), i = n.data.get(r.dataId).values, a = n.data.get(s.dataId).values;
    for (let l = 0; l < i.length; ++l) {
      const c = i[l];
      c >= 0 ? o[l] = a[l] : o[l] = a[l] * (c + 1);
    }
    return n.makeTensorInfo(r.shape, "float32", o);
  }
  const g8 = {
    kernelName: zp,
    backendName: "cpu",
    kernelFunc: m8
  };
  const y8 = Mx, b8 = Bx, x8 = Vx, w8 = Wx, v8 = Ux, S8 = Gx, $8 = nt(Ia, (t) => {
    const e = Math.sign(t), n = Math.abs(t), s = 1 / (1 + y8 * n);
    return e * (1 - ((((S8 * s + v8) * s + w8) * s + x8) * s + b8) * s * Math.exp(-n * n));
  }), C8 = {
    kernelName: Ia,
    backendName: "cpu",
    kernelFunc: $8
  };
  function qd(t) {
    const { inputs: e, backend: n, attrs: s } = t, { input: r } = e, { dim: o } = s, i = r.shape.length, a = r.shape.slice();
    let l = o;
    return o < 0 && (C(-(i + 1) <= o, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + o + 1), a.splice(l, 0, 1), ut({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: a
      }
    });
  }
  const I8 = {
    kernelName: eu,
    backendName: "cpu",
    kernelFunc: qd
  };
  const N8 = Nt((t, e) => t / e), V0 = Pt($a, N8), Sy = {
    kernelName: $a,
    backendName: "cpu",
    kernelFunc: V0
  };
  function YE(t, e, n) {
    const s = t.shape, r = s[0], o = s[1], i = n.data.get(t.dataId), a = i.complexTensorInfos.real, l = i.complexTensorInfos.imag, c = [
      r,
      o
    ], u = X(c), h = Ut("float32", u), d = Ut("float32", u);
    for (let g = 0; g < r; g++) {
      const y = di({
        inputs: {
          x: a
        },
        backend: n,
        attrs: {
          begin: [
            g,
            0
          ],
          size: [
            1,
            o
          ]
        }
      }), b = di({
        inputs: {
          x: l
        },
        backend: n,
        attrs: {
          begin: [
            g,
            0
          ],
          size: [
            1,
            o
          ]
        }
      }), w = Wn({
        inputs: {
          real: y,
          imag: b
        },
        backend: n
      }), { real: x, imag: S } = k8(w, e, n), I = Tr(x, S);
      for (let E = 0; E < o; E++) {
        const R = Hx(I, E);
        h[g * o + E] = R.real, d[g * o + E] = R.imag;
      }
      n.disposeIntermediateTensorInfo(y), n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(w);
    }
    const p = n.makeTensorInfo(c, "float32", h), f = n.makeTensorInfo(c, "float32", d), m = Wn({
      inputs: {
        real: p,
        imag: f
      },
      backend: n
    });
    return n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(f), m;
  }
  function k8(t, e, n) {
    const s = X(t.shape), r = n.data.get(t.dataId), o = n.data.get(r.complexTensorInfos.real.dataId).values, i = n.data.get(r.complexTensorInfos.imag.dataId).values;
    if (T8(s)) {
      const a = $y(o, i, s, e, n), l = [
        t.shape[0],
        t.shape[1]
      ];
      if (e) {
        const c = n.makeTensorInfo(l, "float32", a.real), u = n.makeTensorInfo(l, "float32", a.imag), h = n.makeTensorInfo([], "float32", _r(s, "float32")), d = cr({
          inputs: {
            x: h
          },
          backend: n
        }), p = Sy.kernelFunc({
          inputs: {
            a: c,
            b: h
          },
          backend: n
        }), f = Sy.kernelFunc({
          inputs: {
            a: u,
            b: d
          },
          backend: n
        }), m = n.data.get(p.dataId).values, g = n.data.get(f.dataId).values;
        return n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(f), {
          real: m,
          imag: g
        };
      }
      return a;
    } else {
      const a = Tr(o, i), l = E8(a, s, e);
      return WN(l);
    }
  }
  function T8(t) {
    return (t & t - 1) === 0;
  }
  function $y(t, e, n, s, r) {
    if (n === 1) return {
      real: t,
      imag: e
    };
    const o = Tr(t, e), i = n / 2, a = UN(o), l = a.real, c = a.imag, u = [
      l.length
    ], h = r.makeTensorInfo(u, "float32", l), d = r.makeTensorInfo(u, "float32", c), p = Wn({
      inputs: {
        real: h,
        imag: d
      },
      backend: r
    }), f = GN(o), m = f.real, g = f.imag, y = [
      m.length
    ], b = r.makeTensorInfo(y, "float32", m), w = r.makeTensorInfo(y, "float32", g), x = Wn({
      inputs: {
        real: b,
        imag: w
      },
      backend: r
    }), S = $y(l, c, i, s, r), I = S.real, E = S.imag, R = [
      I.length
    ], N = r.makeTensorInfo(R, "float32", I), k = r.makeTensorInfo(R, "float32", E), $ = Wn({
      inputs: {
        real: N,
        imag: k
      },
      backend: r
    }), F = $y(m, g, i, s, r), M = F.real, U = F.imag, W = [
      M.length
    ], V = r.makeTensorInfo(W, "float32", M), H = r.makeTensorInfo(W, "float32", U), G = Wn({
      inputs: {
        real: V,
        imag: H
      },
      backend: r
    }), Y = jN(n, s), te = [
      Y.real.length
    ], se = r.makeTensorInfo(te, "float32", Y.real), re = r.makeTensorInfo(te, "float32", Y.imag), ie = Wn({
      inputs: {
        real: se,
        imag: re
      },
      backend: r
    }), fe = Lm({
      inputs: {
        a: ie,
        b: G
      },
      backend: r
    }), pe = la({
      inputs: {
        a: $,
        b: fe
      },
      backend: r
    }), ye = M0({
      inputs: {
        a: $,
        b: fe
      },
      backend: r
    }), K = hi({
      inputs: {
        input: pe
      },
      backend: r
    }), oe = hi({
      inputs: {
        input: ye
      },
      backend: r
    }), ne = ca({
      inputs: {
        input: pe
      },
      backend: r
    }), ue = ca({
      inputs: {
        input: ye
      },
      backend: r
    }), Se = ua({
      inputs: [
        K,
        oe
      ],
      backend: r,
      attrs: {
        axis: 0
      }
    }), A = ua({
      inputs: [
        ne,
        ue
      ],
      backend: r,
      attrs: {
        axis: 0
      }
    }), _ = r.data.get(Se.dataId).values, B = r.data.get(A.dataId).values;
    return r.disposeIntermediateTensorInfo(h), r.disposeIntermediateTensorInfo(d), r.disposeIntermediateTensorInfo(p), r.disposeIntermediateTensorInfo(b), r.disposeIntermediateTensorInfo(w), r.disposeIntermediateTensorInfo(x), r.disposeIntermediateTensorInfo(N), r.disposeIntermediateTensorInfo(k), r.disposeIntermediateTensorInfo($), r.disposeIntermediateTensorInfo(V), r.disposeIntermediateTensorInfo(H), r.disposeIntermediateTensorInfo(G), r.disposeIntermediateTensorInfo(se), r.disposeIntermediateTensorInfo(re), r.disposeIntermediateTensorInfo(ie), r.disposeIntermediateTensorInfo(fe), r.disposeIntermediateTensorInfo(pe), r.disposeIntermediateTensorInfo(ye), r.disposeIntermediateTensorInfo(K), r.disposeIntermediateTensorInfo(ne), r.disposeIntermediateTensorInfo(oe), r.disposeIntermediateTensorInfo(ue), r.disposeIntermediateTensorInfo(Se), r.disposeIntermediateTensorInfo(A), {
      real: _,
      imag: B
    };
  }
  function E8(t, e, n) {
    const s = new Float32Array(e * 2);
    for (let r = 0; r < e; r++) {
      let o = 0, i = 0;
      for (let a = 0; a < e; a++) {
        const l = qN(r * a, e, n), c = Hx(t, a);
        o += c.real * l.real - c.imag * l.imag, i += c.real * l.imag + c.imag * l.real;
      }
      n && (o /= e, i /= e), HN(s, o, i, r);
    }
    return s;
  }
  function R8(t) {
    const { inputs: e, backend: n } = t, { input: s } = e, r = X(s.shape), o = s.shape[s.shape.length - 1], i = r / o, a = ut({
      inputs: {
        x: s
      },
      backend: n,
      attrs: {
        shape: [
          i,
          o
        ]
      }
    }), l = YE(a, false, n), c = ut({
      inputs: {
        x: l
      },
      backend: n,
      attrs: {
        shape: s.shape
      }
    });
    return n.disposeIntermediateTensorInfo(a), n.disposeIntermediateTensorInfo(l), c;
  }
  const A8 = {
    kernelName: Mp,
    backendName: "cpu",
    kernelFunc: R8
  };
  function W0(t) {
    const { backend: e, attrs: n } = t, { shape: s, value: r, dtype: o } = n, i = o || yi(r), a = xt(i, X(s));
    return D8(a, r, i), e.makeTensorInfo(s, i, a);
  }
  const _8 = {
    kernelName: Bp,
    backendName: "cpu",
    kernelFunc: W0
  };
  function D8(t, e, n) {
    t.fill(e);
  }
  const O8 = {
    kernelName: Vp,
    backendName: "cpu",
    kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
      const { image: s } = t, r = n, o = Ut(s.dtype, X(s.shape)), [i, a, l, c] = s.shape, u = r.data.get(s.dataId).values;
      for (let d = 0; d < i; d++) {
        const p = d * l * a * c;
        for (let f = 0; f < a; f++) {
          const m = f * (l * c);
          for (let g = 0; g < l; g++) {
            const y = g * c;
            for (let b = 0; b < c; b++) {
              const w = Math.round(l - g - 1), x = p + m + y + b;
              let S = u[x];
              if (w >= 0 && w < l) {
                const I = w * c, E = p + m + I + b;
                S = u[E];
              }
              o[x] = S;
            }
          }
        }
      }
      return {
        dataId: r.write(o, s.shape, s.dtype),
        shape: s.shape,
        dtype: s.dtype
      };
    }
  };
  function F8(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, filter: o, bias: i, preluActivationWeights: a } = e, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s;
    let m = KE({
      inputs: {
        x: r,
        filter: o
      },
      backend: n,
      attrs: {
        strides: l,
        pad: c,
        dataFormat: u,
        dilations: h,
        dimRoundingMode: d
      }
    });
    if (i) {
      const g = m;
      if (u === "NCHW" && i.shape.length === 1 && i.shape[0] !== 1) {
        const y = ut({
          inputs: {
            x: i
          },
          backend: n,
          attrs: {
            shape: [
              i.shape[0],
              1,
              1
            ]
          }
        });
        m = la({
          inputs: {
            a: m,
            b: y
          },
          backend: n
        }), n.disposeIntermediateTensorInfo(y);
      } else m = la({
        inputs: {
          a: m,
          b: i
        },
        backend: n
      });
      n.disposeIntermediateTensorInfo(g);
    }
    if (p) {
      const g = m;
      if (u === "NCHW" && p === "prelu" && a.shape.length === 1 && a.shape[0] !== 1) {
        const y = ut({
          inputs: {
            x: a
          },
          backend: n,
          attrs: {
            shape: [
              a.shape[0],
              1,
              1
            ]
          }
        });
        m = jd(n, m, p, y, f), n.disposeIntermediateTensorInfo(y);
      } else m = jd(n, m, p, a, f);
      n.disposeIntermediateTensorInfo(g);
    }
    return m;
  }
  const L8 = {
    kernelName: fc,
    backendName: "cpu",
    kernelFunc: F8
  };
  function P8(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, filter: o, bias: i, preluActivationWeights: a } = e, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s;
    let m = XE({
      inputs: {
        x: r,
        filter: o
      },
      backend: n,
      attrs: {
        strides: l,
        pad: c,
        dataFormat: u,
        dilations: h,
        dimRoundingMode: d
      }
    });
    if (i) {
      const g = m;
      m = la({
        inputs: {
          a: m,
          b: i
        },
        backend: n
      }), n.disposeIntermediateTensorInfo(g);
    }
    if (p) {
      const g = m;
      m = jd(n, m, p, a, f), n.disposeIntermediateTensorInfo(g);
    }
    return m;
  }
  const z8 = {
    kernelName: mc,
    backendName: "cpu",
    kernelFunc: P8
  };
  function M8(t) {
    const { inputs: e, backend: n } = t, { params: s, indices: r } = e, o = X(s.shape), i = r.shape, a = i[i.length - 1], [l, c, u, h] = um(s, r);
    if (c === 0) return n.makeTensorInfo(l, s.dtype, []);
    const d = n.data.get(r.dataId).values, p = n.bufferSync(s), f = rE(d, p, s.dtype, c, a, u, h, s.shape, o);
    return n.makeTensorInfo(l, s.dtype, f.values);
  }
  const B8 = {
    kernelName: Wp,
    backendName: "cpu",
    kernelFunc: M8
  };
  function V8(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, indices: o } = e, { axis: i, batchDims: a } = s;
    Ce([
      r,
      o
    ], "gatherV2");
    const l = Ve(i, r.shape)[0], c = n.data.get(o.dataId).values, u = r.shape[l];
    for (let x = 0; x < c.length; ++x) {
      const S = c[x];
      C(S <= u - 1 && S >= 0, () => `GatherV2: the index value ${S} is not in [0, ${u - 1}]`);
    }
    let h = a;
    a == null && (h = 0);
    const d = X(o.shape), p = Jx(r, o, l, h), f = ut({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: [
          p.batchSize,
          p.outerSize,
          p.dimSize,
          p.sliceSize
        ]
      }
    }), m = ut({
      inputs: {
        x: o
      },
      backend: n,
      attrs: {
        shape: [
          p.batchSize,
          d / p.batchSize
        ]
      }
    }), g = [
      p.batchSize,
      p.outerSize,
      d / p.batchSize,
      p.sliceSize
    ], y = n.bufferSync(m), b = n.bufferSync(f), w = oE(b, y, g);
    return n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(m), n.makeTensorInfo(p.outputShape, w.dtype, w.values);
  }
  const W8 = {
    kernelName: nu,
    backendName: "cpu",
    kernelFunc: V8
  };
  function U8(t) {
    const { inputs: e, backend: n } = t, { input: s } = e, r = X(s.shape), o = s.shape[s.shape.length - 1], i = r / o, a = ut({
      inputs: {
        x: s
      },
      backend: n,
      attrs: {
        shape: [
          i,
          o
        ]
      }
    }), l = YE(a, true, n), c = ut({
      inputs: {
        x: l
      },
      backend: n,
      attrs: {
        shape: s.shape
      }
    });
    return n.disposeIntermediateTensorInfo(a), n.disposeIntermediateTensorInfo(l), c;
  }
  const G8 = {
    kernelName: Up,
    backendName: "cpu",
    kernelFunc: U8
  };
  const H8 = nt(_a, (t) => Number.isFinite(t) ? 1 : 0, "bool"), j8 = {
    kernelName: _a,
    backendName: "cpu",
    kernelFunc: H8
  };
  const q8 = nt(Da, (t) => Math.abs(t) === 1 / 0 ? 1 : 0, "bool"), K8 = {
    kernelName: Da,
    backendName: "cpu",
    kernelFunc: q8
  };
  const X8 = nt(Oa, (t) => Number.isNaN(t) ? 1 : 0, "bool"), Y8 = {
    kernelName: Oa,
    backendName: "cpu",
    kernelFunc: X8
  };
  function Z8(t) {
    const { backend: e, attrs: n } = t, { start: s, stop: r, num: o } = n, i = uE(s, r, o);
    return e.makeTensorInfo([
      i.length
    ], "float32", i);
  }
  const J8 = {
    kernelName: Hp,
    backendName: "cpu",
    kernelFunc: Z8
  };
  const Q8 = nt(La, (t) => Math.log1p(t)), eY = {
    kernelName: La,
    backendName: "cpu",
    kernelFunc: Q8
  };
  const tY = Nt((t, e) => t && e), nY = Pt(au, tY, null, "bool"), sY = {
    kernelName: au,
    backendName: "cpu",
    kernelFunc: nY
  };
  const rY = nt(lu, (t) => t ? 0 : 1, "bool"), oY = {
    kernelName: lu,
    backendName: "cpu",
    kernelFunc: rY
  };
  const iY = Nt((t, e) => t || e), aY = Pt(cu, iY, null, "bool"), lY = {
    kernelName: cu,
    backendName: "cpu",
    kernelFunc: aY
  };
  function cY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { depthRadius: o, bias: i, alpha: a, beta: l } = s;
    Ce(r, "LRN");
    const c = r.shape[3], u = c - 1, h = n.data.get(r.dataId).values, d = X(r.shape), p = new Float32Array(d);
    function f(m) {
      const g = m % c;
      let y = m - g + Math.max(0, g - o);
      const b = m - g + Math.min(g + o, u);
      let w = 0;
      for (; y <= b; y++) {
        const x = h[y];
        w += x * x;
      }
      return w;
    }
    for (let m = 0; m < d; m++) {
      const g = f(m), y = h[m] * Math.pow(i + a * g, -l);
      p[m] = y;
    }
    return n.makeTensorInfo(r.shape, r.dtype, p);
  }
  const uY = {
    kernelName: uu,
    backendName: "cpu",
    kernelFunc: cY
  };
  function hY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, y: o, dy: i } = e, { depthRadius: a, bias: l, alpha: c, beta: u } = s;
    Ce(i, "LRNGrad");
    const h = X(i.shape), d = i.shape[3], p = n.data.get(i.dataId).values, f = n.data.get(r.dataId).values, m = n.data.get(o.dataId).values, g = new Float32Array(h), y = h;
    for (let b = 0; b < y; b++) {
      const w = b % d, x = b - w + Math.max(0, w - a), S = b - w + Math.min(d, w + a + 1);
      let I = 0;
      for (let E = x; E < S; E++) I += Math.pow(f[E], 2);
      I = c * I + l;
      for (let E = x; E < S; E++) {
        let R = -2 * c * u * f[E] * m[b] / I;
        b === E && (R += Math.pow(I, -u)), R *= p[b], g[E] += R;
      }
    }
    return n.makeTensorInfo(i.shape, r.dtype, g);
  }
  const dY = {
    kernelName: jp,
    backendName: "cpu",
    kernelFunc: hY
  };
  function ZE(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { reductionIndices: o, keepDims: i } = s, a = n;
    let l = r.shape;
    const c = l.length, u = Ve(o, l);
    let h = u;
    const d = bt(h, c);
    let p = a.data.get(r.dataId).values;
    if (d != null) {
      const x = new Array(c);
      for (let S = 0; S < x.length; S++) x[S] = l[d[S]];
      p = P0(p, l, r.dtype, d, x), h = Ct(h.length, c), l = x;
    }
    Ce(r, "max"), rn("max", h, c);
    const [f, m] = qt(l, h), g = X(m), y = dE(p, g, f, r.dtype), b = a.write(y, f, r.dtype);
    let w = f;
    return i && (w = $t(f, u)), {
      dataId: b,
      shape: w,
      dtype: r.dtype
    };
  }
  const pY = {
    kernelName: hu,
    backendName: "cpu",
    kernelFunc: ZE
  };
  function fY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e;
    Ce(r, "maxPool");
    const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
    C(sn(i, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
    const u = bs(r.shape, o, i, c, a, l);
    let h;
    if (u.filterWidth === 1 && u.filterHeight === 1 && Ue(u.inShape, u.outShape)) h = cr({
      inputs: {
        x: r
      },
      backend: n
    });
    else {
      const d = n.data.get(r.dataId).values, p = Ee(r.shape), f = B0(d, r.shape, r.dtype, p, u, "max");
      h = n.makeTensorInfo(u.outShape, r.dtype, f.values);
    }
    return h;
  }
  const mY = {
    kernelName: du,
    backendName: "cpu",
    kernelFunc: fY
  };
  function gY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { filterSize: o, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s;
    Ce(r, "maxPool3d");
    const u = Dr(r.shape, o, i, 1, a, l, c), h = n.data.get(r.dataId).values, d = qE(h, r.shape, r.dtype, Ee(r.shape), u, "max");
    return n.makeTensorInfo(d.shape, "float32", d.values);
  }
  const yY = {
    kernelName: pu,
    backendName: "cpu",
    kernelFunc: gY
  };
  function bY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, input: o } = e, { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
    Ce([
      r,
      o
    ], "maxPool3DGrad");
    const u = Dr(o.shape, i, a, 1, l, c), h = n.bufferSync(o), d = i5(h, u), p = u.strideDepth, f = u.strideHeight, m = u.strideWidth, g = u.dilationDepth, y = u.dilationHeight, b = u.dilationWidth, w = u.effectiveFilterDepth, x = u.effectiveFilterHeight, S = u.effectiveFilterWidth, I = w - 1 - u.padInfo.front, E = S - 1 - u.padInfo.left, R = x - 1 - u.padInfo.top, N = Me(o.shape, "float32"), k = n.bufferSync(r);
    for (let $ = 0; $ < u.batchSize; ++$) for (let F = 0; F < u.inChannels; ++F) for (let M = 0; M < u.inDepth; ++M) for (let U = 0; U < u.inHeight; ++U) for (let W = 0; W < u.inWidth; ++W) {
      const V = M - I, H = U - R, G = W - E;
      let Y = 0;
      for (let te = 0; te < w; te += g) {
        const se = (V + te) / p;
        if (!(se < 0 || se >= u.outDepth || Math.floor(se) !== se)) for (let re = 0; re < x; re += y) {
          const ie = (H + re) / f;
          if (!(ie < 0 || ie >= u.outHeight || Math.floor(ie) !== ie)) for (let fe = 0; fe < S; fe += b) {
            const pe = (G + fe) / m;
            if (pe < 0 || pe >= u.outWidth || Math.floor(pe) !== pe) continue;
            const ye = w * x * S - 1 - d.get($, se, ie, pe, F), K = te * x * S + re * S + fe, oe = ye === K ? 1 : 0;
            if (oe === 0) continue;
            const ne = k.get($, se, ie, pe, F);
            Y += ne * oe;
          }
        }
      }
      N.set(Y, $, M, U, W, F);
    }
    return n.makeTensorInfo(N.shape, N.dtype, N.values);
  }
  const xY = {
    kernelName: Kp,
    backendName: "cpu",
    kernelFunc: bY
  };
  function wY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, input: o, output: i } = e, a = o;
    Ce([
      o,
      i
    ], "maxPoolGrad");
    const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s, d = bs(a.shape, l, c, 1, u, h), p = n.data.get(a.dataId).values, f = Me(d.outShape, a.dtype, jE(p, a.shape, a.dtype, d).values), m = d.strideHeight, g = d.strideWidth, y = d.dilationHeight, b = d.dilationWidth, w = d.effectiveFilterHeight, x = d.effectiveFilterWidth, S = x - 1 - d.padInfo.left, I = w - 1 - d.padInfo.top, E = Me(a.shape, "float32"), R = n.data.get(r.dataId).values, N = Me(r.shape, "float32", R);
    for (let k = 0; k < d.batchSize; ++k) for (let $ = 0; $ < d.inChannels; ++$) for (let F = 0; F < d.inHeight; ++F) for (let M = 0; M < d.inWidth; ++M) {
      const U = F - I, W = M - S;
      let V = 0;
      for (let H = 0; H < w; H += y) {
        const G = (U + H) / m;
        if (!(G < 0 || G >= d.outHeight || Math.floor(G) !== G)) for (let Y = 0; Y < x; Y += b) {
          const te = (W + Y) / g;
          if (te < 0 || te >= d.outWidth || Math.floor(te) !== te) continue;
          const se = w * x - 1 - f.get(k, G, te, $), re = H * x + Y, ie = se === re ? 1 : 0;
          if (ie === 0) continue;
          const fe = N.get(k, G, te, $);
          V += fe * ie;
        }
      }
      E.set(V, k, F, M, $);
    }
    return n.makeTensorInfo(E.shape, E.dtype, E.values);
  }
  const vY = {
    kernelName: qp,
    backendName: "cpu",
    kernelFunc: wY
  };
  function SY(t, e, n, s, r) {
    const o = Ee(e), i = B0(t, e, n, o, r, "max"), a = jE(t, e, n, r, true, s);
    return [
      i.values,
      a.values
    ];
  }
  const $Y = {
    kernelName: Xp,
    backendName: "cpu",
    kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
      const { x: s } = t, { filterSize: r, strides: o, pad: i, includeBatchInIndex: a } = e, l = n;
      Ce(s, "MaxPoolWithArgmax");
      const c = l.data.get(s.dataId).values, u = bs(s.shape, r, o, [
        1,
        1
      ], i), [h, d] = SY(c, s.shape, s.dtype, a, u), p = l.write(h, u.outShape, s.dtype), f = l.write(d, u.outShape, s.dtype);
      return [
        {
          dataId: p,
          shape: u.outShape,
          dtype: s.dtype
        },
        {
          dataId: f,
          shape: u.outShape,
          dtype: "int32"
        }
      ];
    }
  };
  function CY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, keepDims: i } = s, a = Ve(o, r.shape), c = qt(r.shape, a)[1], u = X(c), h = [], d = n.makeTensorInfo([], "float32", new Float32Array([
      u
    ]));
    h.push(d);
    const p = mo({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        dtype: "float32"
      }
    });
    h.push(p);
    const f = V0({
      inputs: {
        a: p,
        b: d
      },
      backend: n
    });
    h.push(f);
    const m = bh({
      inputs: {
        x: f
      },
      backend: n,
      attrs: {
        axis: o,
        keepDims: i
      }
    });
    return h.forEach((g) => n.disposeIntermediateTensorInfo(g)), m;
  }
  const IY = {
    kernelName: fu,
    backendName: "cpu",
    kernelFunc: CY
  };
  function NY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, keepDims: i } = s;
    Ce(r, "min");
    const a = Ve(o, r.shape);
    let l = a;
    const c = bt(l, r.shape.length);
    let u = r;
    c != null && (u = Ln({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: c
      }
    }), l = Ct(l.length, r.shape.length)), rn("min", l, u.shape.length);
    const [h, d] = qt(u.shape, l), p = X(d), f = tn(X(h), u.dtype), m = n.data.get(u.dataId).values;
    for (let y = 0; y < f.length; ++y) {
      const b = y * p;
      let w = m[b];
      for (let x = 0; x < p; ++x) {
        const S = m[b + x];
        (Number.isNaN(S) || S < w) && (w = S);
      }
      f[y] = w;
    }
    c != null && n.disposeIntermediateTensorInfo(u);
    const g = n.makeTensorInfo(h, u.dtype, f);
    if (i) {
      const y = $t(h, a), b = ut({
        inputs: {
          x: g
        },
        backend: n,
        attrs: {
          shape: y
        }
      });
      return n.disposeIntermediateTensorInfo(g), b;
    }
    return g;
  }
  const kY = {
    kernelName: mu,
    backendName: "cpu",
    kernelFunc: NY
  };
  function TY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { paddings: o, mode: i } = s;
    Ce(r, "mirrorPad");
    const a = o.map((w, x) => w[0] + r.shape[x] + w[1]), l = o.map((w) => w[0]), c = o.map((w, x) => w[0] + r.shape[x]), u = i === "reflect" ? 0 : 1, h = n.data.get(r.dataId).values, d = r.shape.length, p = Ee(r.shape), f = X(a), m = a.length, g = Ee(a), y = Ut(r.dtype, f);
    for (let w = 0; w < f; w++) {
      let x = bi(w, m, g);
      for (let I = 0; I < m; I++) x[I] < l[I] ? x[I] = l[I] * 2 - x[I] - u : x[I] >= c[I] && (x[I] = (c[I] - 1) * 2 - x[I] + u);
      x = x.map((I, E) => I - l[E]);
      const S = ks(x, d, p);
      y[w] = h[S];
    }
    return {
      dataId: n.write(y, a, r.dtype),
      shape: a,
      dtype: r.dtype
    };
  }
  const EY = {
    kernelName: gu,
    backendName: "cpu",
    kernelFunc: TY
  };
  const RY = Nt((t, e) => {
    const n = t % e;
    return t < 0 && e < 0 || t >= 0 && e >= 0 ? n : (n + e) % e;
  }), AY = Pt(Ma, RY), _Y = {
    kernelName: Ma,
    backendName: "cpu",
    kernelFunc: AY
  };
  function JE(t) {
    const { inputs: e, backend: n, attrs: s } = t, { logits: r } = e, { dim: o } = s, i = r.shape.length;
    let a = o;
    if (a === -1 && (a = i - 1), a !== i - 1) throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);
    const l = Ve([
      a
    ], r.shape), c = ZE({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        reductionIndices: l,
        keepDims: false
      }
    }), u = $t(c.shape, l), h = ut({
      inputs: {
        x: c
      },
      backend: n,
      attrs: {
        shape: u
      }
    }), d = M0({
      inputs: {
        a: r,
        b: h
      },
      backend: n
    }), p = eE({
      inputs: {
        x: d
      },
      backend: n
    }), f = bh({
      inputs: {
        x: p
      },
      backend: n,
      attrs: {
        axis: l,
        keepDims: false
      }
    }), m = ut({
      inputs: {
        x: f
      },
      backend: n,
      attrs: {
        shape: u
      }
    }), g = V0({
      inputs: {
        a: p,
        b: m
      },
      backend: n
    });
    return n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(m), g;
  }
  const DY = {
    kernelName: Ou,
    backendName: "cpu",
    kernelFunc: JE
  };
  function OY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { logits: r } = e, { numSamples: o, seed: i, normalized: a } = s;
    Ce(r, "multinomial");
    const l = a ? r : JE({
      inputs: {
        logits: r
      },
      backend: n,
      attrs: {
        dim: -1
      }
    }), c = l.shape[0], u = l.shape[1], h = n.data.get(l.dataId).values, d = [
      c,
      o
    ], p = tn(X(d), "int32");
    for (let f = 0; f < c; ++f) {
      const m = f * u, g = new Float32Array(u - 1);
      g[0] = h[m];
      for (let w = 1; w < g.length; ++w) g[w] = g[w - 1] + h[m + w];
      const y = dl.alea(i.toString()), b = f * o;
      for (let w = 0; w < o; ++w) {
        const x = y();
        p[b + w] = g.length;
        for (let S = 0; S < g.length; S++) if (x < g[S]) {
          p[b + w] = S;
          break;
        }
      }
    }
    return a || n.disposeIntermediateTensorInfo(l), n.makeTensorInfo(d, "int32", p);
  }
  const FY = {
    kernelName: Yp,
    backendName: "cpu",
    kernelFunc: OY
  };
  const LY = im;
  function PY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { boxes: r, scores: o } = e, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s;
    Ce(r, "NonMaxSuppression");
    const c = n.data.get(r.dataId).values, u = n.data.get(o.dataId).values, { selectedIndices: h } = LY(c, u, i, a, l);
    return n.makeTensorInfo([
      h.length
    ], "int32", new Int32Array(h));
  }
  const zY = {
    kernelName: Zp,
    backendName: "cpu",
    kernelFunc: PY
  };
  const MY = am;
  function BY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { boxes: r, scores: o } = e, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, padToMaxOutputSize: c } = s;
    Ce(r, "NonMaxSuppressionPadded");
    const u = n.data.get(r.dataId).values, h = n.data.get(o.dataId).values, { selectedIndices: d, validOutputs: p } = MY(u, h, i, a, l, c);
    return [
      n.makeTensorInfo([
        d.length
      ], "int32", new Int32Array(d)),
      n.makeTensorInfo([], "int32", new Int32Array([
        p
      ]))
    ];
  }
  const VY = {
    kernelName: Jp,
    backendName: "cpu",
    kernelFunc: BY
  };
  const WY = lm;
  function UY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { boxes: r, scores: o } = e, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, softNmsSigma: c } = s;
    Ce(r, "NonMaxSuppressionWithScore");
    const u = n.data.get(r.dataId).values, h = n.data.get(o.dataId).values, d = i, p = a, f = l, m = c, { selectedIndices: g, selectedScores: y } = WY(u, h, d, p, f, m);
    return [
      n.makeTensorInfo([
        g.length
      ], "int32", new Int32Array(g)),
      n.makeTensorInfo([
        y.length
      ], "float32", new Float32Array(y))
    ];
  }
  const GY = {
    kernelName: Qp,
    backendName: "cpu",
    kernelFunc: UY
  };
  function HY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { indices: r } = e, { dtype: o, depth: i, onValue: a, offValue: l } = s;
    Ce(r, "oneHot");
    const c = X(r.shape), u = new Float32Array(c * i);
    u.fill(l);
    const h = n.data.get(r.dataId).values;
    for (let d = 0; d < c; ++d) h[d] >= 0 && h[d] < i && (u[d * i + h[d]] = a);
    return n.makeTensorInfo([
      ...r.shape,
      i
    ], o, u);
  }
  const jY = {
    kernelName: wu,
    backendName: "cpu",
    kernelFunc: HY
  };
  function Kd(t) {
    const { inputs: e, backend: n } = t, { x: s } = e;
    if (s.dtype === "string") throw new Error("zerosLike is not supported for string tensors");
    if (s.dtype === "complex64") {
      const r = hi({
        inputs: {
          input: s
        },
        backend: n
      }), o = Kd({
        inputs: {
          x: r
        },
        backend: n
      }), i = ca({
        inputs: {
          input: s
        },
        backend: n
      }), a = Kd({
        inputs: {
          x: i
        },
        backend: n
      }), l = Wn({
        inputs: {
          real: o,
          imag: a
        },
        backend: n
      });
      return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(a), l;
    } else return W0({
      backend: n,
      attrs: {
        shape: s.shape,
        value: 0,
        dtype: s.dtype
      }
    });
  }
  const qY = {
    kernelName: zu,
    backendName: "cpu",
    kernelFunc: Kd
  };
  function QE(t) {
    const { inputs: e, backend: n } = t, { x: s } = e;
    if (s.dtype === "string") throw new Error("onesLike is not supported for string tensors");
    if (s.dtype === "complex64") {
      const r = hi({
        inputs: {
          input: s
        },
        backend: n
      }), o = QE({
        inputs: {
          x: r
        },
        backend: n
      }), i = ca({
        inputs: {
          input: s
        },
        backend: n
      }), a = Kd({
        inputs: {
          x: i
        },
        backend: n
      }), l = Wn({
        inputs: {
          real: o,
          imag: a
        },
        backend: n
      });
      return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(a), l;
    } else return W0({
      backend: n,
      attrs: {
        shape: s.shape,
        value: 1,
        dtype: s.dtype
      }
    });
  }
  const KY = {
    kernelName: xu,
    backendName: "cpu",
    kernelFunc: QE
  };
  function e2(t) {
    const { inputs: e, backend: n, attrs: s } = t, { axis: r } = s;
    if (e.length === 1) return qd({
      inputs: {
        input: e[0]
      },
      backend: n,
      attrs: {
        dim: r
      }
    });
    const o = e[0].shape, i = e[0].dtype;
    e.forEach((u) => {
      nn(o, u.shape, "All tensors passed to stack must have matching shapes"), C(i === u.dtype, () => "All tensors passed to stack must have matching dtypes");
    });
    const a = [], l = e.map((u) => {
      const h = qd({
        inputs: {
          input: u
        },
        backend: n,
        attrs: {
          dim: r
        }
      });
      return a.push(h), h;
    }), c = ua({
      inputs: l,
      backend: n,
      attrs: {
        axis: r
      }
    });
    return a.forEach((u) => n.disposeIntermediateTensorInfo(u)), c;
  }
  const XY = {
    kernelName: vu,
    backendName: "cpu",
    kernelFunc: e2
  };
  function YY(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { paddings: o, constantValue: i } = s;
    Ce(r, "pad");
    const a = o.map((b, w) => b[0] + r.shape[w] + b[1]), l = o.map((b) => b[0]), c = n.data.get(r.dataId).values, u = X(r.shape), h = r.shape.length, d = Ee(r.shape), p = X(a), f = a.length, m = Ee(a), g = Ut(r.dtype, p);
    i !== 0 && g.fill(i);
    for (let b = 0; b < u; b++) {
      const x = bi(b, h, d).map((I, E) => I + l[E]), S = ks(x, f, m);
      g[S] = c[b];
    }
    return {
      dataId: n.write(g, a, r.dtype),
      shape: a,
      dtype: r.dtype
    };
  }
  const t2 = {
    kernelName: Su,
    backendName: "cpu",
    kernelFunc: YY
  };
  const ZY = Nt((t, e) => Math.pow(t, e)), JY = Pt(Va, ZY), QY = {
    kernelName: Va,
    backendName: "cpu",
    kernelFunc: JY
  };
  function e7(t) {
    const { inputs: e, backend: n, attrs: s } = t, { paramsNestedSplits: r, paramsDenseValues: o, indices: i } = e, { outputRaggedRank: a } = s, l = r.map((y) => n.data.get(y.dataId).values), c = r.map((y) => y.shape), u = n.data.get(o.dataId).values, h = n.data.get(i.dataId).values, [d, p, f] = bE(l, c, u, o.shape, o.dtype, h, i.shape), m = d.map((y) => n.makeTensorInfo([
      y.length
    ], "int32", y)), g = n.makeTensorInfo(f, o.dtype, p);
    return m.concat([
      g
    ]);
  }
  const t7 = {
    kernelName: ef,
    backendName: "cpu",
    kernelFunc: e7
  };
  function n7(t) {
    const { inputs: e, backend: n } = t, { starts: s, limits: r, deltas: o } = e, i = n.data.get(s.dataId).values, a = n.data.get(r.dataId).values, l = n.data.get(o.dataId).values, [c, u] = xE(i, s.shape, s.dtype, a, r.shape, l, o.shape), h = n.makeTensorInfo([
      c.length
    ], "int32", c), d = n.makeTensorInfo([
      u.length
    ], s.dtype, u);
    return [
      h,
      d
    ];
  }
  const s7 = {
    kernelName: tf,
    backendName: "cpu",
    kernelFunc: n7
  };
  function r7(t) {
    const { inputs: e, backend: n, attrs: s } = t, { shape: r, values: o, defaultValue: i, rowPartitionTensors: a } = e, { rowPartitionTypes: l } = s, c = n.data.get(r.dataId).values, u = n.data.get(o.dataId).values, h = n.data.get(i.dataId).values, d = a.map((g) => n.data.get(g.dataId).values), p = a.map((g) => g.shape), [f, m] = wE(c, r.shape, u, o.shape, o.dtype, h, i.shape, d, p, l);
    return n.makeTensorInfo(f, o.dtype, m);
  }
  const o7 = {
    kernelName: nf,
    backendName: "cpu",
    kernelFunc: r7
  };
  function i7(t) {
    const { backend: e, attrs: n } = t, { start: s, stop: r, dtype: o, step: i } = n, a = vE(s, r, i, o);
    return e.makeTensorInfo([
      a.length
    ], o, a);
  }
  const a7 = {
    kernelName: sf,
    backendName: "cpu",
    kernelFunc: i7
  };
  const l7 = nt(Wa, (t) => 1 / t), c7 = {
    kernelName: Wa,
    backendName: "cpu",
    kernelFunc: l7
  };
  function u7(t) {
    const { inputs: e, backend: n, attrs: s } = t, { images: r } = e, { alignCorners: o, halfPixelCenters: i, size: a } = s;
    Ce(r, "resizeBilinear");
    const l = Ee(r.shape), [c, u] = a, [h, d, p, f] = r.shape, m = n.data.get(r.dataId).values, g = new Float32Array(X([
      h,
      c,
      u,
      f
    ])), y = [
      o && c > 1 ? d - 1 : d,
      o && u > 1 ? p - 1 : p
    ], b = [
      o && c > 1 ? c - 1 : c,
      o && u > 1 ? u - 1 : u
    ];
    let w = 0;
    const x = y[0] / b[0], S = y[1] / b[1];
    for (let I = 0; I < h; I++) for (let E = 0; E < c; E++) {
      let R;
      i ? R = x * (E + 0.5) - 0.5 : R = x * E;
      const N = Math.max(0, Math.floor(R)), k = R - N, $ = Math.min(d - 1, Math.ceil(R)), F = I * l[0] + N * l[1], M = I * l[0] + $ * l[1];
      for (let U = 0; U < u; U++) {
        let W;
        i ? W = S * (U + 0.5) - 0.5 : W = S * U;
        const V = Math.max(0, Math.floor(W)), H = W - V, G = Math.min(p - 1, Math.ceil(W)), Y = F + V * l[2], te = M + V * l[2], se = F + G * l[2], re = M + G * l[2];
        for (let ie = 0; ie < f; ie++) {
          const fe = m[Y + ie], pe = m[te + ie], ye = m[se + ie], K = m[re + ie], oe = fe + (ye - fe) * H, ne = pe + (K - pe) * H, ue = oe + (ne - oe) * k;
          g[w++] = ue;
        }
      }
    }
    return n.makeTensorInfo([
      h,
      c,
      u,
      f
    ], "float32", g);
  }
  const h7 = {
    kernelName: ku,
    backendName: "cpu",
    kernelFunc: u7
  };
  function d7(t) {
    const { inputs: e, backend: n, attrs: s } = t, { images: r, dy: o } = e, { alignCorners: i } = s;
    Ce([
      o,
      r
    ], "resizeBilinearGrad");
    const a = Ee(r.shape), [l, c, u, h] = r.shape, [, d, p] = o.shape, f = new Float32Array(l * c * u * h), m = [
      i && d > 1 ? c - 1 : c,
      i && p > 1 ? u - 1 : u
    ], g = [
      i && d > 1 ? d - 1 : d,
      i && p > 1 ? p - 1 : p
    ], y = m[0] / g[0], b = m[1] / g[1], w = n.data.get(o.dataId).values;
    let x = 0;
    for (let S = 0; S < l; S++) {
      const I = S * a[0];
      for (let E = 0; E < d; E++) {
        const R = E * y, N = Math.floor(R), k = Math.min(Math.ceil(R), c - 1), $ = I + N * a[1], F = I + k * a[1], M = R - N, U = 1 - M;
        for (let W = 0; W < p; W++) {
          const V = W * b, H = Math.floor(V), G = Math.min(Math.ceil(V), u - 1), Y = V - H, te = 1 - Y, se = $ + H * a[2], re = $ + G * a[2], ie = F + H * a[2], fe = F + G * a[2], pe = U * te, ye = U * Y, K = M * te, oe = M * Y;
          for (let ne = 0; ne < h; ne++) {
            const ue = w[x++];
            f[se + ne] += ue * pe, f[re + ne] += ue * ye, f[ie + ne] += ue * K, f[fe + ne] += ue * oe;
          }
        }
      }
    }
    return n.makeTensorInfo([
      l,
      u,
      c,
      h
    ], "float32", f);
  }
  const p7 = {
    kernelName: af,
    backendName: "cpu",
    kernelFunc: d7
  };
  function f7(t) {
    const { inputs: e, backend: n, attrs: s } = t, { images: r } = e, { alignCorners: o, halfPixelCenters: i, size: a } = s;
    Ce(r, "resizeNearestNeighbor");
    const l = Ee(r.shape), [c, u] = a, [h, d, p, f] = r.shape, m = n.data.get(r.dataId).values, g = new Float32Array(h * c * u * f), y = [
      o && c > 1 ? d - 1 : d,
      o && u > 1 ? p - 1 : p
    ], b = [
      o && c > 1 ? c - 1 : c,
      o && u > 1 ? u - 1 : u
    ], w = y[0] / b[0], x = y[1] / b[1];
    let S = 0;
    for (let I = 0; I < h; I++) {
      const E = I * l[0];
      for (let R = 0; R < c; R++) {
        const N = i ? w * (R + 0.5) : w * R;
        let k = Math.min(d - 1, o ? Math.round(N) : Math.floor(N));
        i && (k = Math.max(0, k));
        const $ = E + k * l[1];
        for (let F = 0; F < u; F++) {
          const M = i ? x * (F + 0.5) : x * F;
          let U = Math.min(p - 1, o ? Math.round(M) : Math.floor(M));
          i && (U = Math.max(0, U));
          const W = $ + U * l[2];
          for (let V = 0; V < f; V++) {
            const H = m[W + V];
            g[S++] = H;
          }
        }
      }
    }
    return n.makeTensorInfo([
      h,
      c,
      u,
      f
    ], r.dtype, g);
  }
  const m7 = {
    kernelName: Nu,
    backendName: "cpu",
    kernelFunc: f7
  };
  function g7(t) {
    const { inputs: e, backend: n, attrs: s } = t, { images: r, dy: o } = e, { alignCorners: i } = s;
    Ce([
      o,
      r
    ], "resizeNearestNeighborGrad");
    const a = Ee(r.shape), l = Ee(o.shape), [c, u, h, d] = r.shape, [, p, f] = o.shape, m = new Float32Array(c * u * h * d), g = n.data.get(o.dataId).values, y = [
      i && p > 1 ? u - 1 : u,
      i && f > 1 ? h - 1 : h
    ], b = [
      i && p > 1 ? p - 1 : p,
      i && f > 1 ? f - 1 : f
    ], w = y[0] / b[0], x = y[1] / b[1], S = 1 / w, I = 1 / x, E = Math.ceil(S) * 2 + 2, R = Math.ceil(I) * 2 + 2;
    for (let N = 0; N < c; N++) {
      const k = N * a[0];
      for (let $ = 0; $ < u; $++) {
        const F = k + $ * a[1], M = Math.floor($ * S), U = Math.floor(M - E / 2);
        for (let W = 0; W < h; W++) {
          const V = F + W * a[2], H = Math.floor(W * I), G = Math.floor(H - R / 2);
          for (let Y = 0; Y < d; Y++) {
            let te = 0;
            for (let se = 0; se < E; se++) {
              const re = se + U;
              if (re < 0 || re >= p) continue;
              const ie = k + re * l[1], fe = re * w, pe = Math.min(u - 1, i ? Math.round(fe) : Math.floor(fe));
              if ($ === pe) for (let ye = 0; ye < R; ye++) {
                const K = ye + G;
                if (K < 0 || K >= f) continue;
                const oe = ie + K * l[2], ne = K * x, ue = Math.min(h - 1, i ? Math.round(ne) : Math.floor(ne));
                W === ue && (te += g[oe + Y]);
              }
            }
            m[V + Y] = te;
          }
        }
      }
    }
    return n.makeTensorInfo(r.shape, r.dtype, m);
  }
  const y7 = {
    kernelName: of,
    backendName: "cpu",
    kernelFunc: g7
  };
  function b7(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { dims: o } = s;
    Ce(r, "reverse");
    const i = r.shape.length, a = Ve(o, r.shape);
    if (i === 0) return cr({
      inputs: {
        x: r
      },
      backend: n
    });
    const l = new Rt(r.shape, r.dtype), c = n.bufferSync(r);
    for (let u = 0; u < l.size; u++) {
      const h = l.indexToLoc(u), d = h.slice();
      a.forEach((p) => d[p] = r.shape[p] - 1 - d[p]), l.set(c.get(...d), ...h);
    }
    return n.makeTensorInfo(l.shape, l.dtype, l.values);
  }
  const x7 = {
    kernelName: Tu,
    backendName: "cpu",
    kernelFunc: b7
  };
  const w7 = {
    kernelName: Cf,
    backendName: "cpu",
    kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
      const { image: s } = t, { radians: r, fillValue: o, center: i } = e, a = n, l = Ut(s.dtype, X(s.shape)), [c, u, h, d] = s.shape, [p, f] = Lx(i, u, h), m = 255, g = Math.sin(r), y = Math.cos(r), b = a.data.get(s.dataId).values;
      for (let x = 0; x < c; x++) {
        const S = x * h * u * d;
        for (let I = 0; I < u; I++) {
          const E = I * (h * d);
          for (let R = 0; R < h; R++) {
            const N = R * d;
            for (let k = 0; k < d; k++) {
              const $ = [
                c,
                I,
                R,
                k
              ], F = $[2], M = $[1];
              let U = (F - p) * y - (M - f) * g, W = (F - p) * g + (M - f) * y;
              U = Math.round(U + p), W = Math.round(W + f);
              let V = o;
              if (typeof o != "number" && (k === 3 ? V = m : V = o[k]), U >= 0 && U < h && W >= 0 && W < u) {
                const G = W * (h * d), Y = U * d, te = S + G + Y + k;
                V = b[te];
              }
              const H = S + E + N + k;
              l[H] = V;
            }
          }
        }
      }
      return {
        dataId: a.write(l, s.shape, s.dtype),
        shape: s.shape,
        dtype: s.dtype
      };
    }
  };
  const v7 = nt(Ha, (t) => {
    const e = Math.floor(t);
    return t - e < 0.5 ? Math.floor(t) : t - e > 0.5 ? Math.ceil(t) : e % 2 === 0 ? e : e + 1;
  }), S7 = {
    kernelName: Ha,
    backendName: "cpu",
    kernelFunc: v7
  };
  function $7(t) {
    const { inputs: e, backend: n, attrs: s } = t, { indices: r, updates: o } = e, { shape: i } = s, { sliceRank: a, numUpdates: l, sliceSize: c, strides: u, outputSize: h } = No(o, r, i), d = true, p = n.bufferSync(r), f = n.bufferSync(o), m = Uo(p, f, i, h, c, l, a, u, 0, d);
    return n.makeTensorInfo(i, m.dtype, m.values);
  }
  const C7 = {
    kernelName: lf,
    backendName: "cpu",
    kernelFunc: $7
  };
  function I7(t, e) {
    let n = 0, s = t.length, r = 0;
    for (; n < s; ) r = Math.floor((n + s) / 2), t[r] < e ? n = r + 1 : s = r;
    return s;
  }
  function N7(t, e) {
    let n = 0, s = t.length, r = 0;
    for (; n < s; ) r = Math.floor((n + s) / 2), t[r] <= e ? n = r + 1 : s = r;
    return s;
  }
  function k7(t, e, n, s, r, o) {
    const i = xt("int32", n * r);
    for (let a = 0; a < n; ++a) {
      const l = t.slice(a * s, (a + 1) * s), c = a * r;
      for (let u = 0; u < r; ++u) i[c + u] = o === "left" ? I7(l, e[u + c]) : N7(l, e[u + c]);
    }
    return i;
  }
  function T7(t) {
    const { inputs: e, backend: n, attrs: s } = t, { sortedSequence: r, values: o } = e, { side: i } = s, a = n.data.get(r.dataId).values, l = n.data.get(o.dataId).values, c = k7(a, l, r.shape[0], r.shape[1], o.shape[1], i);
    return n.makeTensorInfo(o.shape, "int32", c);
  }
  const E7 = {
    kernelName: uf,
    backendName: "cpu",
    kernelFunc: T7
  };
  function R7(t) {
    const { inputs: e, backend: n } = t, { condition: s, t: r, e: o } = e;
    Ce([
      s,
      r,
      o
    ], "select");
    const i = s.shape.length, a = n.data.get(s.dataId).values, l = n.data.get(r.dataId).values, c = n.data.get(o.dataId).values, u = An(r.dtype, o.dtype), h = tn(X(r.shape), u);
    let d = 0;
    const p = i === 0 || i > 1 || r.shape.length === 1 ? 1 : X(r.shape.slice(1));
    for (let f = 0; f < a.length; f++) for (let m = 0; m < p; m++) a[f] === 1 ? h[d++] = l[f] : h[d++] = c[f];
    return n.makeTensorInfo(r.shape, u, h);
  }
  const A7 = {
    kernelName: Eu,
    backendName: "cpu",
    kernelFunc: R7
  };
  const _7 = pm, D7 = fm, O7 = nt(qa, (t) => t >= 0 ? D7 * t : _7 * (Math.exp(t) - 1)), F7 = {
    kernelName: qa,
    backendName: "cpu",
    kernelFunc: O7
  };
  const L7 = nt(Ya, (t) => t < 0 ? -1 : t > 0 ? 1 : 0), P7 = {
    kernelName: Ya,
    backendName: "cpu",
    kernelFunc: L7
  };
  const z7 = nt(Ka, (t) => Math.sin(t)), M7 = {
    kernelName: Ka,
    backendName: "cpu",
    kernelFunc: z7
  };
  const B7 = nt(Xa, (t) => Math.sinh(t)), V7 = {
    kernelName: Xa,
    backendName: "cpu",
    kernelFunc: B7
  };
  const W7 = 11920928955078125e-23, SS = Math.log(W7) + 2, U7 = nt(Ja, (t) => {
    const e = t > -SS, n = t < SS, s = Math.exp(t);
    let r;
    return n ? r = s : e ? r = t : r = Math.log(1 + s), r;
  }), G7 = {
    kernelName: Ja,
    backendName: "cpu",
    kernelFunc: U7
  };
  function H7(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { blockShape: o, paddings: i } = s;
    Ce([
      r
    ], "spaceToBatchND");
    const a = X(o), l = [
      [
        0,
        0
      ]
    ];
    l.push(...i);
    for (let I = 1 + o.length; I < r.shape.length; ++I) l.push([
      0,
      0
    ]);
    const c = t2.kernelFunc({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        paddings: l,
        constantValue: 0
      }
    }), u = oh(c.shape, o, a, false), h = ih(u.length, o.length, false), d = ah(c.shape, o, a, false), m = ut({
      inputs: {
        x: c
      },
      backend: n,
      attrs: {
        shape: u
      }
    }), b = Ln({
      inputs: {
        x: m
      },
      backend: n,
      attrs: {
        perm: h
      }
    }), S = ut({
      inputs: {
        x: b
      },
      backend: n,
      attrs: {
        shape: d
      }
    });
    return n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(b), S;
  }
  const j7 = {
    kernelName: _u,
    backendName: "cpu",
    kernelFunc: H7
  };
  function q7(t) {
    const { inputs: e, backend: n } = t, { indices: s, values: r, denseShape: o, defaultValue: i } = e;
    if (o.shape.length !== 1) throw new Error(`Dense shape must be a vector, saw:
        ${o.shape}`);
    if (s.shape.length !== 2) throw new Error(`Indices must be a matrix, saw:
        ${s.shape}`);
    if (r.shape.length !== 1) throw new Error(`Values must be a vector, saw:
        ${r.shape}`);
    if (i.shape.length !== 0) throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
    const a = n.data.get(s.dataId).values, l = n.data.get(r.dataId).values, c = n.data.get(o.dataId).values, u = n.data.get(i.dataId).values[0], [h, d, p, f, m] = IE(a, s.shape, s.dtype, l, r.dtype, c, u);
    return [
      n.makeTensorInfo(d, s.dtype, h),
      n.makeTensorInfo([
        d[0]
      ], r.dtype, p),
      n.makeTensorInfo([
        f.length
      ], "bool", new Uint8Array(f.map((g) => Number(g)))),
      n.makeTensorInfo([
        m.length
      ], s.dtype, new Int32Array(m))
    ];
  }
  const K7 = {
    kernelName: hf,
    backendName: "cpu",
    kernelFunc: q7
  };
  function X7(t) {
    const { inputs: e, backend: n } = t, { inputIndices: s, inputShape: r, newShape: o } = e;
    if (s.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
    if (r.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`);
    if (o.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${o.shape}`);
    const i = Array.from(n.data.get(r.dataId).values), a = n.data.get(s.dataId).values, l = Array.from(n.data.get(o.dataId).values), [c, u, h] = NE(a, s.shape, s.dtype, i, l);
    return [
      n.makeTensorInfo(u, s.dtype, c),
      n.makeTensorInfo([
        h.length
      ], o.dtype, new Int32Array(h))
    ];
  }
  const Y7 = {
    kernelName: df,
    backendName: "cpu",
    kernelFunc: X7
  };
  function Z7(t) {
    const { inputs: e, backend: n } = t, { data: s, indices: r, segmentIds: o } = e;
    if (s.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
    if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
          ${r.shape}`);
    if (o.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
          ${o.shape}`);
    if (r.shape[0] !== o.shape[0]) throw new Error("segmentIds and indices should have same size.");
    const i = n.data.get(s.dataId).values, a = n.data.get(r.dataId).values, l = n.data.get(o.dataId).values, [c, u] = z0(i, s.shape, s.dtype, a, l, true);
    return n.makeTensorInfo(u, s.dtype, c);
  }
  const J7 = {
    kernelName: pf,
    backendName: "cpu",
    kernelFunc: Z7
  };
  function Q7(t) {
    const { inputs: e, backend: n } = t, { data: s, indices: r, segmentIds: o } = e;
    if (s.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
    if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
         ${r.shape}`);
    if (o.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
         ${o.shape}`);
    if (r.shape[0] !== o.shape[0]) throw new Error("segmentIds and indices should have same size.");
    const i = n.data.get(s.dataId).values, a = n.data.get(r.dataId).values, l = n.data.get(o.dataId).values, [c, u] = z0(i, s.shape, s.dtype, a, l);
    return n.makeTensorInfo(u, s.dtype, c);
  }
  const eZ = {
    kernelName: ff,
    backendName: "cpu",
    kernelFunc: Q7
  };
  function tZ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { sparseIndices: r, sparseValues: o, defaultValue: i } = e, { outputShape: a } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: h, outputSize: d } = No(o, r, a), p = false, f = n.bufferSync(r);
    let m;
    switch (o.dtype) {
      case "bool": {
        const g = n.bufferSync(o), y = !!n.data.get(i.dataId).values[0];
        m = Uo(f, g, a, d, u, c, l, h, y, p);
        break;
      }
      case "float32": {
        const g = n.bufferSync(o), y = n.data.get(i.dataId).values[0];
        m = Uo(f, g, a, d, u, c, l, h, y, p);
        break;
      }
      case "int32": {
        const g = n.bufferSync(o), y = n.data.get(i.dataId).values[0];
        m = Uo(f, g, a, d, u, c, l, h, y, p);
        break;
      }
      case "string": {
        const g = n.bufferSync(o), y = Cr(n.data.get(i.dataId).values[0]);
        m = Uo(f, g, a, d, u, c, l, h, y, p);
        break;
      }
      default:
        throw new Error(`Unsupported type ${o.dtype}`);
    }
    return n.makeTensorInfo(a, m.dtype, m.values);
  }
  const nZ = {
    kernelName: mf,
    backendName: "cpu",
    kernelFunc: tZ
  };
  function sZ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { numOrSizeSplits: o, axis: i } = s, a = Ve(i, r.shape)[0], l = Zx(r, o, a), c = new Array(r.shape.length).fill(0), u = r.shape.slice();
    return l.map((h) => {
      const d = [
        ...u
      ];
      d[a] = h;
      const p = di({
        inputs: {
          x: r
        },
        backend: n,
        attrs: {
          begin: c,
          size: d
        }
      });
      return c[a] += h, p;
    });
  }
  const rZ = {
    kernelName: Du,
    backendName: "cpu",
    kernelFunc: sZ
  };
  const oZ = {
    kernelName: gf,
    backendName: "cpu",
    kernelFunc: ({ inputs: t, backend: e }) => {
      const { x: n } = t, s = e;
      Ce(n, "square");
      const r = s.data.get(n.dataId).values, o = new Float32Array(r.length);
      for (let a = 0; a < r.length; ++a) {
        const l = r[a];
        o[a] = l * l;
      }
      return {
        dataId: s.write(o, n.shape, n.dtype),
        shape: n.shape,
        dtype: n.dtype
      };
    }
  };
  const iZ = nt(ol, (t, e) => {
    const n = e;
    return isNaN(t) ? NaN : t > 0 ? 1 : n.alpha;
  }), aZ = {
    kernelName: ol,
    backendName: "cpu",
    kernelFunc: iZ
  };
  function lZ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { begin: o, end: i, strides: a, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: h, shrinkAxisMask: d } = s;
    Ce(r, "stridedSlice");
    const { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: w, strides: x } = _x(r.shape, o, i, a, l, c, u, h, d);
    let S;
    if (m) S = ut({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: f
      }
    });
    else if (g || y) {
      C(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
      const I = Ex(b, w, x), E = di({
        inputs: {
          x: r
        },
        backend: n,
        attrs: {
          begin: b,
          size: I
        }
      });
      S = ut({
        inputs: {
          x: E
        },
        backend: n,
        attrs: {
          shape: f
        }
      }), n.disposeIntermediateTensorInfo(E);
    } else {
      const I = n.bufferSync(r), E = EE(p, I, x, b);
      S = n.makeTensorInfo(f, E.dtype, E.values);
    }
    return S;
  }
  const cZ = {
    kernelName: yf,
    backendName: "cpu",
    kernelFunc: lZ
  };
  function uZ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { separator: r, nGramWidths: o, leftPad: i, rightPad: a, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: h } = e, d = n.data.get(u.dataId).values, p = n.data.get(h.dataId).values, [f, m] = RE(d, p, r, o, i, a, l, c);
    return [
      n.makeTensorInfo([
        f.length
      ], "string", f),
      n.makeTensorInfo(h.shape, "int32", m)
    ];
  }
  const hZ = {
    kernelName: bf,
    backendName: "cpu",
    kernelFunc: uZ
  };
  function dZ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { skipEmpty: r } = s, { input: o, delimiter: i } = e;
    if (o.dtype !== "string") throw new Error("Input must be of datatype string");
    if (o.shape.length !== 1) throw new Error(`Input must be a vector, got shape: ${o.shape}`);
    if (i.shape.length !== 0) throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
    const a = n.data.get(o.dataId).values, l = n.data.get(i.dataId).values[0], [c, u, h] = AE(a, l, r), d = u.length;
    return [
      n.makeTensorInfo([
        d,
        2
      ], "int32", c),
      n.makeTensorInfo([
        d
      ], "string", u),
      n.makeTensorInfo([
        2
      ], "int32", new Int32Array(h))
    ];
  }
  const pZ = {
    kernelName: xf,
    backendName: "cpu",
    kernelFunc: dZ
  };
  function fZ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { numBuckets: r } = s, { input: o } = e;
    if (o.dtype !== "string") throw new Error("Input must be of datatype string");
    if (r <= 0) throw new Error("Number of buckets must be at least 1");
    const i = n.data.get(o.dataId).values, a = _E(i, r);
    return n.makeTensorInfo(o.shape, "int32", a);
  }
  const mZ = {
    kernelName: wf,
    backendName: "cpu",
    kernelFunc: fZ
  };
  const gZ = nt(nl, (t) => Math.tan(t)), yZ = {
    kernelName: nl,
    backendName: "cpu",
    kernelFunc: gZ
  };
  const bZ = nt(sl, (t) => Math.tanh(t)), xZ = {
    kernelName: sl,
    backendName: "cpu",
    kernelFunc: bZ
  };
  function wZ(t) {
    const { inputs: e, backend: n } = t, { tensor: s, indices: r, updates: o } = e, { sliceRank: i, numUpdates: a, sliceSize: l, strides: c, outputSize: u } = No(o, r, s.shape), h = false, d = n.bufferSync(r), p = n.bufferSync(o), f = n.bufferSync(s), m = Uo(d, p, s.shape, u, l, a, i, c, f, h);
    return n.makeTensorInfo(s.shape, m.dtype, m.values);
  }
  const vZ = {
    kernelName: cf,
    backendName: "cpu",
    kernelFunc: wZ
  };
  function SZ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { reps: o } = s;
    Ce(r, "tile");
    const i = OE(n.bufferSync(r), o);
    return n.makeTensorInfo(i.shape, i.dtype, i.values);
  }
  const $Z = {
    kernelName: rl,
    backendName: "cpu",
    kernelFunc: SZ
  };
  function CZ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { k: o, sorted: i } = s;
    Ce(r, "topk");
    const a = n.data.get(r.dataId).values, [l, c] = LE(a, r.shape, r.dtype, o, i);
    return [
      n.makeTensorInfo(l.shape, l.dtype, l.values),
      n.makeTensorInfo(c.shape, c.dtype, c.values)
    ];
  }
  const IZ = {
    kernelName: vf,
    backendName: "cpu",
    kernelFunc: CZ
  };
  function NZ(t) {
    const { inputs: e, attrs: n, backend: s } = t, { image: r, transforms: o } = e, { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = n, [u, h, d, p] = r.shape, [f, m] = c ?? [
      h,
      d
    ], g = [
      u,
      f,
      m,
      p
    ], y = Ee(r.shape), b = y[0], w = y[1], x = y[2], S = Ee(g), I = S[0], E = S[1], R = S[2], N = Ut(r.dtype, X(g));
    N.fill(l);
    const k = s.data.get(r.dataId).values, $ = s.data.get(o.dataId).values;
    for (let M = 0; M < u; ++M) {
      const U = o.shape[0] === 1 ? $ : $.subarray(M * 8, M * 8 + 8);
      for (let W = 0; W < f; ++W) for (let V = 0; V < m; ++V) for (let H = 0; H < p; ++H) {
        let G;
        const Y = U[6] * V + U[7] * W + 1;
        if (Y === 0) continue;
        const te = (U[0] * V + U[1] * W + U[2]) / Y, se = (U[3] * V + U[4] * W + U[5]) / Y, re = $S(te, d, a), ie = $S(se, h, a);
        switch (i) {
          case "nearest":
            G = _Z(k, h, d, b, w, x, M, ie, re, H, l);
            break;
          case "bilinear":
            G = DZ(k, h, d, b, w, x, M, ie, re, H, l);
            break;
          default:
            throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`);
        }
        const fe = M * I + W * E + V * R + H;
        N[fe] = G;
      }
      return s.makeTensorInfo(g, r.dtype, N);
    }
    return {
      dataId: s.write(N, g, r.dtype),
      shape: r.shape,
      dtype: r.dtype
    };
  }
  const kZ = {
    kernelName: Sf,
    backendName: "cpu",
    kernelFunc: NZ
  };
  function $S(t, e, n) {
    switch (n) {
      case "reflect":
        return TZ(t, e);
      case "wrap":
        return EZ(t, e);
      case "nearest":
        return AZ(t, e);
      case "constant":
      default:
        return RZ(t);
    }
  }
  function TZ(t, e) {
    let n = t;
    if (n < 0) if (e <= 1) n = 0;
    else {
      const s = 2 * e;
      n < s && (n = s * Math.trunc(-n / s) + n), n = n < -e ? n + s : -n - 1;
    }
    else if (n > e - 1) if (e <= 1) n = 0;
    else {
      const s = 2 * e;
      n -= s * Math.trunc(n / s), n >= e && (n = s - n - 1);
    }
    return ro(0, n, e - 1);
  }
  function EZ(t, e) {
    let n = t;
    if (n < 0) if (e <= 1) n = 0;
    else {
      const s = e - 1;
      n += e * (Math.trunc(-n / s) + 1);
    }
    else if (n > e - 1) if (e <= 1) n = 0;
    else {
      const s = e - 1;
      n -= e * Math.trunc(n / s);
    }
    return ro(0, n, e - 1);
  }
  function RZ(t, e) {
    return t;
  }
  function AZ(t, e) {
    return ro(0, t, e - 1);
  }
  function Wl(t, e, n, s, r, o, i, a, l, c, u) {
    const h = i * s + a * r + l * o + c;
    return 0 <= a && a < e && 0 <= l && l < n ? t[h] : u;
  }
  function _Z(t, e, n, s, r, o, i, a, l, c, u) {
    const h = Math.round(a), d = Math.round(l);
    return Wl(t, e, n, s, r, o, i, h, d, c, u);
  }
  function DZ(t, e, n, s, r, o, i, a, l, c, u) {
    const h = Math.floor(a), d = Math.floor(l), p = h + 1, f = d + 1, m = (f - l) * Wl(t, e, n, s, r, o, i, h, d, c, u) + (l - d) * Wl(t, e, n, s, r, o, i, h, f, c, u), g = (f - l) * Wl(t, e, n, s, r, o, i, p, d, c, u) + (l - d) * Wl(t, e, n, s, r, o, i, p, f, c, u);
    return (p - a) * m + (a - h) * g;
  }
  function OZ(t) {
    const { inputs: e, attrs: n, backend: s } = t, { axis: r } = n, { x: o } = e;
    Ce(o, "unique");
    const i = s.data.get(o.dataId).values, { outputValues: a, outputShape: l, indices: c } = PE(i, r, o.shape, o.dtype);
    return [
      s.makeTensorInfo(l, o.dtype, a),
      s.makeTensorInfo([
        c.length
      ], "int32", c)
    ];
  }
  const FZ = {
    kernelName: $f,
    backendName: "cpu",
    kernelFunc: OZ
  };
  function LZ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { value: r } = e;
    let { axis: o } = s;
    o < 0 && (o += r.shape.length);
    const i = r.shape.length, a = r.shape[o], l = new Array(i - 1);
    let c = 0;
    for (let p = 0; p < i; p++) p !== o && (l[c++] = r.shape[p]);
    const u = new Array(i).fill(0), h = r.shape.slice();
    h[o] = 1;
    const d = new Array(a);
    for (let p = 0; p < d.length; p++) {
      u[o] = p;
      const f = di({
        inputs: {
          x: r
        },
        backend: n,
        attrs: {
          begin: u,
          size: h
        }
      });
      d[p] = ut({
        inputs: {
          x: f
        },
        backend: n,
        attrs: {
          shape: l
        }
      }), n.disposeIntermediateTensorInfo(f);
    }
    return d;
  }
  const PZ = {
    kernelName: Lu,
    backendName: "cpu",
    kernelFunc: LZ
  };
  function zZ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, segmentIds: o } = e, { numSegments: i } = s;
    Ce(r, "unsortedSegmentSum");
    const a = r.shape.length, l = o.shape.length, c = [], u = [], h = a - l;
    let d = o;
    for (let f = 0; f < h; ++f) {
      const m = qd({
        inputs: {
          input: d
        },
        backend: n,
        attrs: {
          dim: f + 1
        }
      });
      d = m, u.push(m);
    }
    for (let f = 0; f < i; ++f) {
      const m = _r(f, "int32"), g = n.makeTensorInfo([], "int32", m), y = JT({
        inputs: {
          a: g,
          b: d
        },
        backend: n
      }), b = mo({
        inputs: {
          x: y
        },
        backend: n,
        attrs: {
          dtype: "float32"
        }
      }), w = Lm({
        inputs: {
          a: b,
          b: r
        },
        backend: n
      }), x = bh({
        inputs: {
          x: w
        },
        backend: n,
        attrs: {
          axis: 0,
          keepDims: false
        }
      });
      c.push(x), u.push(g), u.push(y), u.push(b), u.push(w), u.push(x);
    }
    const p = e2({
      inputs: c,
      backend: n,
      attrs: {
        axis: 0
      }
    });
    return u.forEach((f) => n.disposeIntermediateTensorInfo(f)), p;
  }
  const MZ = {
    kernelName: Pu,
    backendName: "cpu",
    kernelFunc: zZ
  };
  const BZ = [
    OX,
    m6,
    LX,
    zX,
    v6,
    BX,
    WX,
    GX,
    jX,
    KX,
    YX,
    JX,
    e5,
    s5,
    o5,
    l5,
    u5,
    d5,
    f5,
    _X,
    g5,
    b5,
    w5,
    $6,
    S5,
    x6,
    I6,
    C5,
    g6,
    N5,
    T5,
    E5,
    A5,
    D5,
    F5,
    P5,
    M5,
    V5,
    U5,
    H5,
    q5,
    X5,
    Z5,
    Q5,
    e8,
    n8,
    r8,
    i8,
    a8,
    l8,
    c8,
    h8,
    f8,
    IX,
    g8,
    N6,
    C8,
    k6,
    I8,
    E6,
    A8,
    _8,
    O8,
    A6,
    D6,
    L8,
    z8,
    B8,
    W8,
    F6,
    P6,
    y6,
    G8,
    k5,
    j8,
    K8,
    Y8,
    NX,
    M6,
    V6,
    J8,
    U6,
    eY,
    sY,
    oY,
    lY,
    uY,
    dY,
    pY,
    H6,
    mY,
    yY,
    xY,
    vY,
    $Y,
    IY,
    kY,
    q6,
    EY,
    _Y,
    FY,
    X6,
    Z6,
    zY,
    VY,
    GY,
    Q6,
    jY,
    KY,
    XY,
    t2,
    QY,
    TX,
    nX,
    t7,
    s7,
    o7,
    a7,
    b6,
    Sy,
    c7,
    EX,
    RX,
    AX,
    h7,
    p7,
    m7,
    y7,
    x7,
    w7,
    S7,
    uX,
    C7,
    E7,
    A7,
    F7,
    dX,
    P7,
    M7,
    V7,
    pX,
    DY,
    G7,
    j7,
    K7,
    Y7,
    J7,
    eZ,
    nZ,
    rZ,
    gX,
    oZ,
    bX,
    wX,
    aZ,
    cZ,
    hZ,
    pZ,
    mZ,
    CX,
    d8,
    yZ,
    xZ,
    vZ,
    $Z,
    IZ,
    kZ,
    eX,
    FZ,
    PZ,
    MZ,
    qY
  ];
  for (const t of BZ) If(t);
  const Vo = {}, Mh = {
    alpha: false,
    antialias: false,
    premultipliedAlpha: false,
    preserveDrawingBuffer: false,
    depth: false,
    stencil: false,
    failIfMajorPerformanceCaveat: true
  };
  function n2(t, e) {
    Vo[t] = e;
  }
  function Ls(t, e) {
    if (!(t in Vo) || e != null) {
      const s = WZ(t, e);
      if (s !== null) Vo[t] = s;
      else return console.log("Could not get context for WebGL version", t), null;
    }
    const n = Vo[t];
    return n == null || n.isContextLost() ? (delete Vo[t], Ls(t)) : (n.disable(n.DEPTH_TEST), n.disable(n.STENCIL_TEST), n.disable(n.BLEND), n.disable(n.DITHER), n.disable(n.POLYGON_OFFSET_FILL), n.disable(n.SAMPLE_COVERAGE), n.enable(n.SCISSOR_TEST), n.enable(n.CULL_FACE), n.cullFace(n.BACK), Vo[t]);
  }
  function VZ(t) {
    if (!j().getBool("IS_SAFARI") && typeof OffscreenCanvas < "u" && t === 2) return new OffscreenCanvas(300, 150);
    if (typeof document < "u") return document.createElement("canvas");
    throw new Error("Cannot create a canvas in this context");
  }
  function WZ(t, e) {
    if (t !== 1 && t !== 2) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
    const n = e ?? VZ(t);
    return n.addEventListener("webglcontextlost", (s) => {
      s.preventDefault(), delete Vo[t];
    }, false), j().getBool("SOFTWARE_WEBGL_ENABLED") && (Mh.failIfMajorPerformanceCaveat = false), t === 1 ? n.getContext("webgl", Mh) || n.getContext("experimental-webgl", Mh) : n.getContext("webgl2", Mh);
  }
  var kc;
  (function(t) {
    t[t.DENSE = 0] = "DENSE", t[t.SHARED_BATCH = 1] = "SHARED_BATCH";
  })(kc || (kc = {}));
  var es;
  (function(t) {
    t[t.RENDER = 0] = "RENDER", t[t.UPLOAD = 1] = "UPLOAD", t[t.PIXELS = 2] = "PIXELS", t[t.DOWNLOAD = 3] = "DOWNLOAD";
  })(es || (es = {}));
  var Qt;
  (function(t) {
    t[t.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", t[t.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", t[t.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", t[t.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", t[t.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
  })(Qt || (Qt = {}));
  function xh(t, e) {
    return [
      e,
      t
    ];
  }
  function UZ(t, e) {
    return t * e;
  }
  function Bh(t) {
    const e = X(t), n = Math.ceil(e / 4);
    return Sd(n);
  }
  function wl(t, e) {
    return [
      Math.max(1, Math.ceil(e / 2)),
      Math.max(1, Math.ceil(t / 2))
    ];
  }
  function GZ(t, e) {
    const [n, s] = wl(t, e);
    return n * s * 4;
  }
  function U0(t, e) {
    const n = t;
    let s, r, o, i, a, l, c, u, h, d;
    return j().getNumber("WEBGL_VERSION") === 2 ? (s = n.R32F, r = n.R16F, o = n.RGBA16F, i = n.RGBA32F, a = n.RED, c = 4, u = 1, h = n.HALF_FLOAT, d = n.FLOAT, l = n.RGBA8) : (s = t.RGBA, r = t.RGBA, o = t.RGBA, i = n.RGBA, a = t.RGBA, c = 4, u = 4, h = e != null ? e.HALF_FLOAT_OES : null, d = t.FLOAT, l = t.RGBA), {
      internalFormatFloat: s,
      internalFormatHalfFloat: r,
      internalFormatPackedHalfFloat: o,
      internalFormatPackedFloat: i,
      textureFormatFloat: a,
      downloadTextureFormat: l,
      downloadUnpackNumChannels: c,
      defaultNumChannels: u,
      textureTypeHalfFloat: h,
      textureTypeFloat: d
    };
  }
  function xe(t, e) {
    const n = e();
    return j().getBool("DEBUG") && HZ(t), n;
  }
  function HZ(t) {
    const e = t.getError();
    if (e !== t.NO_ERROR) throw new Error("WebGL Error: " + r2(t, e));
  }
  const jZ = 596e-10, qZ = 65504;
  function s2(t) {
    return !!(j().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || t === 0 || jZ < Math.abs(t) && Math.abs(t) < qZ);
  }
  function r2(t, e) {
    switch (e) {
      case t.NO_ERROR:
        return "NO_ERROR";
      case t.INVALID_ENUM:
        return "INVALID_ENUM";
      case t.INVALID_VALUE:
        return "INVALID_VALUE";
      case t.INVALID_OPERATION:
        return "INVALID_OPERATION";
      case t.INVALID_FRAMEBUFFER_OPERATION:
        return "INVALID_FRAMEBUFFER_OPERATION";
      case t.OUT_OF_MEMORY:
        return "OUT_OF_MEMORY";
      case t.CONTEXT_LOST_WEBGL:
        return "CONTEXT_LOST_WEBGL";
      default:
        return `Unknown error code ${e}`;
    }
  }
  function Ul(t, e) {
    return Mr(t, () => t.getExtension(e), 'Extension "' + e + '" not supported on this browser.');
  }
  function o2(t, e) {
    const n = Mr(t, () => t.createShader(t.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
    if (xe(t, () => t.shaderSource(n, e)), xe(t, () => t.compileShader(n)), t.getShaderParameter(n, t.COMPILE_STATUS) === false) throw console.log(t.getShaderInfoLog(n)), new Error("Failed to compile vertex shader.");
    return n;
  }
  function i2(t, e) {
    const n = Mr(t, () => t.createShader(t.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
    if (xe(t, () => t.shaderSource(n, e)), xe(t, () => t.compileShader(n)), j().get("ENGINE_COMPILE_ONLY")) return n;
    if (t.getShaderParameter(n, t.COMPILE_STATUS) === false) throw G0(e, t.getShaderInfoLog(n)), new Error("Failed to compile fragment shader.");
    return n;
  }
  const KZ = /ERROR: [0-9]+:([0-9]+):/g;
  function G0(t, e) {
    const n = KZ.exec(e);
    if (n == null) {
      console.log(`Couldn't parse line number in error: ${e}`), console.log(t);
      return;
    }
    const s = +n[1], r = t.split(`
`), o = r.length.toString().length + 2, i = r.map((h, d) => jo((d + 1).toString(), o) + h);
    let a = 0;
    for (let h = 0; h < i.length; h++) a = Math.max(i[h].length, a);
    const l = i.slice(0, s - 1), c = i.slice(s - 1, s), u = i.slice(s);
    console.log(l.join(`
`)), console.log(e.split(`
`)[0]), console.log(`%c ${jo(c[0], a)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(u.join(`
`));
  }
  function a2(t) {
    return Mr(t, () => t.createProgram(), "Unable to create WebGLProgram.");
  }
  function l2(t, e) {
    if (xe(t, () => t.linkProgram(e)), !j().get("ENGINE_COMPILE_ONLY") && t.getProgramParameter(e, t.LINK_STATUS) === false) throw console.log(t.getProgramInfoLog(e)), new Error("Failed to link vertex and fragment shaders.");
  }
  function od(t, e) {
    if (xe(t, () => t.validateProgram(e)), t.getProgramParameter(e, t.VALIDATE_STATUS) === false) throw console.log(t.getProgramInfoLog(e)), new Error("Shader program validation failed.");
  }
  function c2(t, e) {
    const n = Mr(t, () => t.createBuffer(), "Unable to create WebGLBuffer");
    return xe(t, () => t.bindBuffer(t.ARRAY_BUFFER, n)), xe(t, () => t.bufferData(t.ARRAY_BUFFER, e, t.STATIC_DRAW)), n;
  }
  function u2(t, e) {
    const n = Mr(t, () => t.createBuffer(), "Unable to create WebGLBuffer");
    return xe(t, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, n)), xe(t, () => t.bufferData(t.ELEMENT_ARRAY_BUFFER, e, t.STATIC_DRAW)), n;
  }
  function XZ() {
    return j().getNumber("WEBGL_VERSION") === 2 ? 1 : 4;
  }
  function h2(t) {
    return Mr(t, () => t.createTexture(), "Unable to create WebGLTexture.");
  }
  function d2(t, e) {
    const n = j().getNumber("WEBGL_MAX_TEXTURE_SIZE");
    if (t <= 0 || e <= 0) {
      const s = `[${t}x${e}]`;
      throw new Error("Requested texture size " + s + " is invalid.");
    }
    if (t > n || e > n) {
      const s = `[${t}x${e}]`, r = `[${n}x${n}]`;
      throw new Error("Requested texture size " + s + " greater than WebGL maximum on this browser / GPU " + r + ".");
    }
  }
  function p2(t) {
    return Mr(t, () => t.createFramebuffer(), "Unable to create WebGLFramebuffer.");
  }
  function Cy(t, e, n, s, r, o, i) {
    const a = t.getAttribLocation(e, n);
    return a === -1 ? false : (xe(t, () => t.bindBuffer(t.ARRAY_BUFFER, s)), xe(t, () => t.vertexAttribPointer(a, r, t.FLOAT, false, o, i)), xe(t, () => t.enableVertexAttribArray(a)), true);
  }
  function f2(t, e, n) {
    x2(t, n), xe(t, () => t.activeTexture(t.TEXTURE0 + n)), xe(t, () => t.bindTexture(t.TEXTURE_2D, e));
  }
  function YZ(t, e) {
    x2(t, e), xe(t, () => t.activeTexture(t.TEXTURE0 + e)), xe(t, () => t.bindTexture(t.TEXTURE_2D, null));
  }
  function m2(t, e, n) {
    return Mr(t, () => t.getUniformLocation(e, n), 'uniform "' + n + '" not present in program.');
  }
  function g2(t, e, n) {
    return t.getUniformLocation(e, n);
  }
  function y2(t, e, n, s) {
    xe(t, () => f2(t, e, s)), xe(t, () => t.uniform1i(n, s));
  }
  function ZZ(t) {
    xe(t, () => t.bindFramebuffer(t.FRAMEBUFFER, null)), xe(t, () => t.viewport(0, 0, t.canvas.width, t.canvas.height)), xe(t, () => t.scissor(0, 0, t.canvas.width, t.canvas.height));
  }
  function id(t, e, n) {
    xe(t, () => t.bindFramebuffer(t.FRAMEBUFFER, n)), xe(t, () => t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, e, 0));
  }
  function Iy(t, e) {
    xe(t, () => t.bindFramebuffer(t.FRAMEBUFFER, e)), xe(t, () => t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, null, 0));
  }
  function Gl(t) {
    const e = t.checkFramebufferStatus(t.FRAMEBUFFER);
    if (e !== t.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + b2(t, e));
  }
  function b2(t, e) {
    switch (e) {
      case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
        return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
      case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
        return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
      case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
        return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
      case t.FRAMEBUFFER_UNSUPPORTED:
        return "FRAMEBUFFER_UNSUPPORTED";
      default:
        return `unknown error ${e}`;
    }
  }
  function Mr(t, e, n) {
    const s = xe(t, () => e());
    if (s == null) throw new Error(n);
    return s;
  }
  function x2(t, e) {
    const n = t.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, s = e + t.TEXTURE0;
    if (s < t.TEXTURE0 || s > n) {
      const r = `[gl.TEXTURE0, gl.TEXTURE${n}]`;
      throw new Error(`textureUnit must be in ${r}.`);
    }
  }
  function pi(t, e = 2) {
    return X(t.slice(0, t.length - e));
  }
  function fi(t) {
    if (t.length === 0) throw Error("Cannot get rows and columns of an empty shape array.");
    return [
      t.length > 1 ? t[t.length - 2] : 1,
      t[t.length - 1]
    ];
  }
  function Hl(t) {
    let e = [
      1,
      1,
      1
    ];
    return t.length === 0 || t.length === 1 && t[0] === 1 || (e = [
      pi(t),
      ...fi(t)
    ]), e;
  }
  function w2(t, e = false) {
    let n = j().getNumber("WEBGL_MAX_TEXTURE_SIZE"), s = j().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
    s === 1 / 0 && j().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (s = n / 2), e && (n = n * 2, s = s * 2, t = t.map((a, l) => l >= t.length - 2 ? yp(t[l]) : t[l]), t.length === 1 && (t = [
      2,
      t[0]
    ])), t.length !== 2 && (t = Ar(t).newShape);
    let r = X(t), o = null;
    t.length <= 1 && r <= n ? o = [
      1,
      r
    ] : t.length === 2 && t[0] <= n && t[1] <= n ? o = t : t.length === 3 && t[0] * t[1] <= n && t[2] <= n ? o = [
      t[0] * t[1],
      t[2]
    ] : t.length === 3 && t[0] <= n && t[1] * t[2] <= n ? o = [
      t[0],
      t[1] * t[2]
    ] : t.length === 4 && t[0] * t[1] * t[2] <= n && t[3] <= n ? o = [
      t[0] * t[1] * t[2],
      t[3]
    ] : t.length === 4 && t[0] <= n && t[1] * t[2] * t[3] <= n && (o = [
      t[0],
      t[1] * t[2] * t[3]
    ]);
    const i = o != null && Math.max(...o) > s && Math.min(...o) <= (e ? 2 : 1) && Math.min(...o) > 0;
    if (o == null || i) if (e) {
      const a = pi(t);
      let l = 2, c = 2;
      t.length && ([l, c] = fi(t)), r = a * (l / 2) * (c / 2), o = Sd(r).map((u) => u * 2);
    } else o = Sd(r);
    return o;
  }
  function Vh(t) {
    return t % 2 === 0;
  }
  function Tc(t, e) {
    if (t = t.slice(-2), e = e.slice(-2), Ue(t, e) || !t.length || !e.length || t[0] === 0 || t[1] === 0 || e[0] === 0 || e[1] === 0) return true;
    if (t.length !== e.length) {
      const n = t[t.length - 1], s = e[e.length - 1];
      if (n === s || Vh(n) && Vh(s) && (t[0] === 1 || e[0] === 1)) return true;
    }
    return t[1] === e[1] && Vh(t[0]) && Vh(e[0]);
  }
  let ad, ld;
  function v2(t) {
    if (ad == null) {
      const e = Ls(t);
      ad = e.getParameter(e.MAX_TEXTURE_SIZE);
    }
    return ad;
  }
  function JZ() {
    ad = null;
  }
  function QZ() {
    ld = null;
  }
  function S2(t) {
    if (ld == null) {
      const e = Ls(t);
      ld = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);
    }
    return Math.min(16, ld);
  }
  function $2(t) {
    if (t === 0) return 0;
    let e;
    const n = Ls(t);
    return ts(n, "EXT_disjoint_timer_query_webgl2") && t === 2 ? e = 2 : ts(n, "EXT_disjoint_timer_query") ? e = 1 : e = 0, e;
  }
  function ts(t, e) {
    return t.getExtension(e) != null;
  }
  function Ny(t) {
    try {
      if (Ls(t) != null) return true;
    } catch (e) {
      return console.log("Error when getting WebGL context: ", e), false;
    }
    return false;
  }
  function C2(t) {
    if (t === 0) return false;
    const e = Ls(t);
    if (t === 1) {
      if (!ts(e, "OES_texture_float")) return false;
    } else if (!ts(e, "EXT_color_buffer_float")) return false;
    return ky(e);
  }
  function I2(t) {
    if (t === 0) return false;
    const e = Ls(t);
    if (t === 1) {
      if (!ts(e, "OES_texture_float") || !ts(e, "WEBGL_color_buffer_float")) return false;
    } else {
      if (ts(e, "EXT_color_buffer_float")) return ky(e);
      const s = "EXT_color_buffer_half_float";
      if (ts(e, s)) {
        const r = e.getExtension(s);
        return eJ(e, r);
      }
      return false;
    }
    return ky(e);
  }
  function ky(t) {
    const e = U0(t), n = t.createTexture();
    t.bindTexture(t.TEXTURE_2D, n), t.texImage2D(t.TEXTURE_2D, 0, e.internalFormatFloat, 1, 1, 0, e.textureFormatFloat, e.textureTypeFloat, null);
    const o = t.createFramebuffer();
    t.bindFramebuffer(t.FRAMEBUFFER, o), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, n, 0);
    const i = t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;
    return t.bindTexture(t.TEXTURE_2D, null), t.bindFramebuffer(t.FRAMEBUFFER, null), t.deleteTexture(n), t.deleteFramebuffer(o), i;
  }
  function eJ(t, e) {
    const n = U0(t, e), s = t.createTexture();
    t.bindTexture(t.TEXTURE_2D, s), t.texImage2D(t.TEXTURE_2D, 0, n.internalFormatHalfFloat, 1, 1, 0, n.textureFormatFloat, n.textureTypeHalfFloat, null);
    const i = t.createFramebuffer();
    t.bindFramebuffer(t.FRAMEBUFFER, i), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, s, 0);
    const a = t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;
    return t.bindTexture(t.TEXTURE_2D, null), t.bindFramebuffer(t.FRAMEBUFFER, null), t.deleteTexture(s), t.deleteFramebuffer(i), a;
  }
  function N2(t) {
    return t !== 2 ? false : Ls(t).fenceSync != null;
  }
  function vl(t, e) {
    Array.isArray(t) || (t = [
      t
    ]), t.forEach((n) => {
      n != null && C(n.dtype !== "complex64", () => `${e} does not support complex64 tensors in the WebGL backend.`);
    });
  }
  const tJ = Object.freeze(Object.defineProperty({
    __proto__: null,
    assertNotComplex: vl,
    bindCanvasToFramebuffer: ZZ,
    bindColorTextureToFramebuffer: id,
    bindTextureToProgramUniformSampler: y2,
    bindTextureUnit: f2,
    bindVertexBufferToProgramAttribute: Cy,
    callAndCheck: xe,
    canBeRepresented: s2,
    createFragmentShader: i2,
    createFramebuffer: p2,
    createProgram: a2,
    createStaticIndexBuffer: u2,
    createStaticVertexBuffer: c2,
    createTexture: h2,
    createVertexShader: o2,
    getBatchDim: pi,
    getExtensionOrThrow: Ul,
    getFramebufferErrorMessage: b2,
    getMaxTexturesInShader: S2,
    getNumChannels: XZ,
    getProgramUniformLocation: g2,
    getProgramUniformLocationOrThrow: m2,
    getRowsCols: fi,
    getShapeAs3D: Hl,
    getTextureShapeFromLogicalShape: w2,
    getWebGLDisjointQueryTimerVersion: $2,
    getWebGLErrorMessage: r2,
    getWebGLMaxTextureSize: v2,
    hasExtension: ts,
    isCapableOfRenderingToFloatTexture: C2,
    isDownloadFloatTextureEnabled: I2,
    isReshapeFree: Tc,
    isWebGLFenceEnabled: N2,
    isWebGLVersionEnabled: Ny,
    linkProgram: l2,
    logShaderSourceAndInfoLog: G0,
    resetMaxTextureSize: JZ,
    resetMaxTexturesInShader: QZ,
    unbindColorTextureFromFramebuffer: Iy,
    unbindTextureUnit: YZ,
    validateFramebuffer: Gl,
    validateProgram: od,
    validateTextureSize: d2
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const ke = j();
  ke.registerFlag("HAS_WEBGL", () => ke.getNumber("WEBGL_VERSION") > 0);
  ke.registerFlag("WEBGL_VERSION", () => Ny(2) ? 2 : Ny(1) ? 1 : 0);
  ke.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => false);
  ke.registerFlag("WEBGL_BUFFER_SUPPORTED", () => ke.get("WEBGL_VERSION") === 2);
  ke.registerFlag("WEBGL_CPU_FORWARD", () => true);
  ke.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => false);
  ke.registerFlag("WEBGL_PACK", () => ke.getBool("HAS_WEBGL"));
  ke.registerFlag("WEBGL_PACK_NORMALIZATION", () => ke.getBool("WEBGL_PACK"));
  ke.registerFlag("WEBGL_PACK_CLIP", () => ke.getBool("WEBGL_PACK"));
  ke.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => ke.getBool("WEBGL_PACK"));
  ke.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => ke.getBool("WEBGL_PACK"));
  ke.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => ke.getBool("WEBGL_PACK"));
  ke.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => ke.getBool("WEBGL_PACK"));
  ke.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => ke.getBool("WEBGL_PACK"));
  ke.registerFlag("WEBGL_PACK_REDUCE", () => ke.getBool("WEBGL_PACK"));
  ke.registerFlag("WEBGL_LAZILY_UNPACK", () => ke.getBool("WEBGL_PACK"));
  ke.registerFlag("WEBGL_CONV_IM2COL", () => ke.getBool("WEBGL_PACK"));
  ke.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE", () => ke.getBool("WEBGL_PACK"));
  ke.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => v2(ke.getNumber("WEBGL_VERSION")));
  ke.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => S2(ke.getNumber("WEBGL_VERSION")));
  ke.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
    const t = ke.getNumber("WEBGL_VERSION");
    return t === 0 ? 0 : $2(t);
  });
  ke.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => ke.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !ob());
  ke.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => C2(ke.getNumber("WEBGL_VERSION")));
  ke.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => ke.getBool("WEBGL_FORCE_F16_TEXTURES") ? false : ke.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
  ke.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => I2(ke.getNumber("WEBGL_VERSION")));
  ke.registerFlag("WEBGL_FENCE_API_ENABLED", () => N2(ke.getNumber("WEBGL_VERSION")));
  ke.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => ke.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
  ke.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (t) => {
    if (typeof t != "number") throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${t}.`);
    if (t < 0 && t !== -1) throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`);
  });
  ke.registerFlag("WEBGL_FLUSH_THRESHOLD", () => ob() ? 1 : -1, (t) => {
    if (typeof t != "number") throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${t}.`);
    if (t < 0 && t !== -1) throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${t}.`);
  });
  ke.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
  ke.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => false);
  ke.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
  ke.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
  ke.registerFlag("WEBGL_EXP_CONV", () => false);
  ke.registerFlag("SOFTWARE_WEBGL_ENABLED", () => ke.getBool("IS_TEST"));
  ke.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
  ke.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => false);
  ke.registerFlag("WEBGL2_ISNAN_CUSTOM", () => false);
  ke.registerFlag("ENGINE_COMPILE_ONLY", () => false);
  function vn() {
    let t, e, n, s, r, o, i, a, l, c;
    return j().getNumber("WEBGL_VERSION") === 2 ? (t = "#version 300 es", e = "in", n = "out", s = "in", r = "texture", o = "outputColor", i = "out vec4 outputColor;", a = j().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", l = "", c = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (t = "", e = "attribute", n = "varying", s = "varying", r = "texture2D", o = "gl_FragColor", i = "", a = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, c = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), {
      version: t,
      attribute: e,
      varyingVs: n,
      varyingFs: s,
      texture2D: r,
      output: o,
      defineOutput: i,
      defineSpecialNaN: a,
      defineSpecialInf: l,
      defineRound: c
    };
  }
  function ki(t, e, n = "index") {
    const s = Ee(e);
    return s.map((r, o) => {
      const i = `int ${t[o]} = ${n} / ${r}`, a = o === s.length - 1 ? `int ${t[o + 1]} = ${n} - ${t[o]} * ${r}` : `index -= ${t[o]} * ${r}`;
      return `${i}; ${a};`;
    }).join("");
  }
  function Pm(t, e, n = "index") {
    const s = Ee(e);
    return s.map((r, o) => {
      const i = `int ${t[o]} = ${n} / outShapeStrides[${o}]`, a = o === s.length - 1 ? `int ${t[o + 1]} = ${n} - ${t[o]} * outShapeStrides[${o}]` : `index -= ${t[o]} * outShapeStrides[${o}]`;
      return `${i}; ${a};`;
    }).join("");
  }
  function nJ(t, e) {
    const n = t.length, s = t.map((o) => `${e}[${o}]`), r = new Array(n - 1);
    r[n - 2] = s[n - 1];
    for (let o = n - 3; o >= 0; --o) r[o] = `(${r[o + 1]} * ${s[o + 1]})`;
    return r;
  }
  function sJ(t, e, n = "index") {
    const s = t.map((o, i) => i), r = nJ(s, e);
    return r.map((o, i) => {
      const a = `int ${t[i]} = ${n} / ${r[i]}`, l = i === r.length - 1 ? `int ${t[i + 1]} = ${n} - ${t[i]} * ${r[i]}` : `index -= ${t[i]} * ${r[i]}`;
      return `${a}; ${l};`;
    }).join("");
  }
  function H0(t) {
    const e = Ee(t).map((n) => n.toString());
    return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`;
  }
  function j0() {
    return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
  }
  const k2 = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
  const { getBroadcastDims: T2 } = lk;
  function rJ(t, e, n) {
    const s = [];
    if (t.forEach((p) => {
      const f = X(p.shapeInfo.logicalShape);
      if (p.shapeInfo.isUniform ? s.push(`uniform float ${p.name}${f > 1 ? `[${f}]` : ""};`) : (s.push(`uniform sampler2D ${p.name};`), s.push(`uniform int offset${p.name};`)), n.enableShapeUniforms) {
        const { uniformShape: m } = q0(n.packedInputs, p.shapeInfo.logicalShape, p.shapeInfo.texShape);
        switch (m.length) {
          case 1:
            s.push(`uniform int ${p.name}Shape;`);
            break;
          case 2:
            s.push(`uniform ivec2 ${p.name}Shape;`);
            break;
          case 3:
            s.push(`uniform ivec3 ${p.name}Shape;`);
            break;
          case 4:
            s.push(`uniform ivec4 ${p.name}Shape;`);
            break;
        }
        s.push(`uniform ivec2 ${p.name}TexShape;`);
      }
    }), n.enableShapeUniforms) {
      switch (e.logicalShape.length) {
        case 1:
          s.push("uniform int outShape;");
          break;
        case 2:
          s.push("uniform ivec2 outShape;"), s.push("uniform int outShapeStrides;");
          break;
        case 3:
          s.push("uniform ivec3 outShape;"), s.push("uniform ivec2 outShapeStrides;");
          break;
        case 4:
          s.push("uniform ivec4 outShape;"), s.push("uniform ivec3 outShapeStrides;");
          break;
      }
      s.push("uniform ivec2 outTexShape;");
    }
    n.customUniforms && n.customUniforms.forEach((p) => {
      s.push(`uniform ${p.type} ${p.name}${p.arrayIndex ? `[${p.arrayIndex}]` : ""};`);
    });
    const r = s.join(`
`), o = t.map((p) => oJ(p, e, n.packedInputs, n.enableShapeUniforms)).join(`
`), i = e.texShape, a = vn(), l = lJ(a);
    let c, u, h = hJ(a);
    return e.isPacked ? (c = iJ(e.logicalShape, i, n.enableShapeUniforms), u = uJ(a)) : (c = aJ(e.logicalShape, i, n.enableShapeUniforms), u = cJ(a)), n.packedInputs && (h += mJ), [
      h,
      l,
      u,
      r,
      c,
      o,
      n.userCode
    ].join(`
`);
  }
  function Sl(t, e = false) {
    const n = t.shapeInfo.logicalShape;
    switch (n.length) {
      case 0:
        return kJ(t, e);
      case 1:
        return EJ(t, e);
      case 2:
        return AJ(t, e);
      case 3:
        return DJ(t, e);
      case 4:
        return FJ(t, e);
      case 5:
        return LJ(t);
      case 6:
        return PJ(t);
      default:
        throw new Error(`${n.length}-D input sampling is not yet supported`);
    }
  }
  function E2(t, e) {
    switch (t.shapeInfo.logicalShape.length) {
      case 0:
        return NJ(t);
      case 1:
        return TJ(t, e);
      case 2:
        return RJ(t, e);
      case 3:
        return _J(t, e);
      default:
        return OJ(t, e);
    }
  }
  function oJ(t, e, n = false, s) {
    let r = "";
    n ? r += E2(t, s) : r += Sl(t, s);
    const o = t.shapeInfo.logicalShape, i = e.logicalShape;
    return o.length <= i.length && (n ? r += zJ(t, e) : r += MJ(t, e)), r;
  }
  function iJ(t, e, n) {
    switch (t.length) {
      case 0:
        return R2();
      case 1:
        return gJ(t, e, n);
      case 2:
        return CJ(t, e, n);
      case 3:
        return bJ(t, e, n);
      default:
        return wJ(t, e, n);
    }
  }
  function aJ(t, e, n) {
    switch (t.length) {
      case 0:
        return R2();
      case 1:
        return yJ(t, e, n);
      case 2:
        return IJ(t, e, n);
      case 3:
        return xJ(t, e, n);
      case 4:
        return vJ(t, e, n);
      case 5:
        return SJ(t, e);
      case 6:
        return $J(t, e);
      default:
        throw new Error(`${t.length}-D output sampling is not yet supported`);
    }
  }
  function lJ(t) {
    return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${t.texture2D}(textureSampler, uv).r;
    }
  `;
  }
  function cJ(t) {
    return `
    void setOutput(float val) {
      ${t.output} = vec4(val, 0, 0, 0);
    }
  `;
  }
  function uJ(t) {
    return `
    void setOutput(vec4 val) {
      ${t.output} = val;
    }
  `;
  }
  function hJ(t) {
    return `${t.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${t.varyingFs} vec2 resultUV;
    ${t.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${t.defineSpecialNaN}
    ${t.defineSpecialInf}
    ${t.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${dJ}
    ${pJ}
    ${fJ}
  `;
  }
  const dJ = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, pJ = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, fJ = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, mJ = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
  function R2() {
    return `
    int getOutputCoords() {
      return 0;
    }
  `;
  }
  function gJ(t, e, n) {
    const s = [
      Math.ceil(e[0] / 2),
      Math.ceil(e[1] / 2)
    ];
    return s[0] === 1 ? n ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    ` : s[1] === 1 ? n ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    ` : n ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `;
  }
  function yJ(t, e, n) {
    return e[0] === 1 ? n ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${e[1]}.0);
      }
    ` : e[1] === 1 ? n ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${e[0]}.0);
      }
    ` : n ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      return resTexRC.x * ${e[1]} + resTexRC.y;
    }
  `;
  }
  function bJ(t, e, n) {
    if (n) return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
    const s = [
      Math.ceil(e[0] / 2),
      Math.ceil(e[1] / 2)
    ], r = Math.ceil(t[2] / 2), o = r * Math.ceil(t[1] / 2);
    return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      int b = index / ${o};
      index -= b * ${o};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec3(b, r, c);
    }
  `;
  }
  function xJ(t, e, n) {
    if (n) return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Pm([
      "r",
      "c",
      "d"
    ], t)}
    return ivec3(r, c, d);
  }
`;
    const s = ki([
      "r",
      "c",
      "d"
    ], t);
    return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${s}
      return ivec3(r, c, d);
    }
  `;
  }
  function wJ(t, e, n) {
    if (n) return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
    const s = [
      Math.ceil(e[0] / 2),
      Math.ceil(e[1] / 2)
    ], r = Math.ceil(t[t.length - 1] / 2), o = r * Math.ceil(t[t.length - 2] / 2);
    let i = o, a = "", l = "b, r, c";
    for (let c = 2; c < t.length - 1; c++) i *= t[t.length - c - 1], a = `
      int b${c} = index / ${i};
      index -= b${c} * ${i};
    ` + a, l = `b${c}, ` + l;
    return `
    ivec${t.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      ${a}

      int b = index / ${o};
      index -= b * ${o};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec${t.length}(${l});
    }
  `;
  }
  function vJ(t, e, n) {
    if (n) return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Pm([
      "r",
      "c",
      "d",
      "d2"
    ], t)}
      return ivec4(r, c, d, d2);
    }
  `;
    const s = ki([
      "r",
      "c",
      "d",
      "d2"
    ], t);
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${s}
      return ivec4(r, c, d, d2);
    }
  `;
  }
  function SJ(t, e) {
    const n = ki([
      "r",
      "c",
      "d",
      "d2",
      "d3"
    ], t);
    return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},
                             ${e[1]}));

      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${n}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
  }
  function $J(t, e) {
    const n = ki([
      "r",
      "c",
      "d",
      "d2",
      "d3",
      "d4"
    ], t);
    return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${n}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
  }
  function CJ(t, e, n) {
    const s = [
      Math.ceil(e[0] / 2),
      Math.ceil(e[1] / 2)
    ];
    if (Ue(t, e)) return n ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `;
    const r = Math.ceil(t[1] / 2);
    return n ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));

      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec2(r, c);
    }
  `;
  }
  function IJ(t, e, n) {
    return Ue(t, e) ? n ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));
      }
    ` : t[1] === 1 ? n ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : t[0] === 1 ? n ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : n ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      int r = index / ${t[1]};
      int c = index - r * ${t[1]};
      return ivec2(r, c);
    }
  `;
  }
  function Ti(t) {
    return `offset${t}`;
  }
  function NJ(t) {
    const e = t.name, n = "get" + e.charAt(0).toUpperCase() + e.slice(1), s = vn();
    return `
    vec4 ${n}() {
      return ${s.texture2D}(${e}, halfCR);
    }
  `;
  }
  function kJ(t, e) {
    const n = t.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1);
    if (t.shapeInfo.isUniform) return `float ${s}() {return ${n};}`;
    const [r, o] = t.shapeInfo.texShape;
    if (r === 1 && o === 1) return `
      float ${s}() {
        return sampleTexture(${n}, halfCR);
      }
    `;
    const i = Ti(n);
    if (e) return `
    float ${s}() {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});
      return sampleTexture(${n}, uv);
    }
  `;
    const [a, l] = t.shapeInfo.texShape;
    return `
    float ${s}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${n}, uv);
    }
  `;
  }
  function TJ(t, e) {
    const n = t.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = t.shapeInfo.texShape, o = vn();
    if (e) return `
    vec4 ${s}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${o.texture2D}(${n}, uv);
    }
  `;
    const i = [
      Math.ceil(r[0] / 2),
      Math.ceil(r[1] / 2)
    ];
    return `
    vec4 ${s}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${o.texture2D}(${n}, uv);
    }
  `;
  }
  function EJ(t, e) {
    const n = t.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1);
    if (t.shapeInfo.isUniform) return `
      float ${s}(int index) {
        ${$l(t)}
      }
    `;
    const r = t.shapeInfo.texShape, o = r[0], i = r[1];
    if (i === 1 && o === 1) return `
      float ${s}(int index) {
        return sampleTexture(${n}, halfCR);
      }
    `;
    const a = Ti(n);
    return i === 1 ? e ? `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${n}TexShape[0]));
        return sampleTexture(${n}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${o}.0);
        return sampleTexture(${n}, uv);
      }
    ` : o === 1 ? e ? `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${n}TexShape[1]), 0.5);
        return sampleTexture(${n}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${n}, uv);
      }
    ` : e ? `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${a});
      return sampleTexture(${n}, uv);
    }
  ` : `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${o}, ${i}, index + ${a});
      return sampleTexture(${n}, uv);
    }
  `;
  }
  function RJ(t, e) {
    const n = t.shapeInfo.logicalShape, s = t.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = t.shapeInfo.texShape, i = o[0], a = o[1], l = vn();
    if (o != null && Ue(n, o)) return e ? `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);

        return ${l.texture2D}(${s}, uv);
      }
    ` : `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${s}, uv);
      }
    `;
    if (e) return `
    vec4 ${r}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
    const c = [
      Math.ceil(o[0] / 2),
      Math.ceil(o[1] / 2)
    ], u = Math.ceil(n[1] / 2);
    return `
    vec4 ${r}(int row, int col) {
      vec2 uv = packedUVfrom2D(${u}, ${c[0]}, ${c[1]}, row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
  }
  function AJ(t, e) {
    const n = t.shapeInfo.logicalShape, s = t.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = t.shapeInfo.texShape;
    if (o != null && Ue(n, o)) {
      if (e) return `
      float ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `;
      const d = o[0], p = o[1];
      return `
    float ${r}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${p}.0, ${d}.0);
      return sampleTexture(${s}, uv);
    }
  `;
    }
    const { newShape: i, keptDims: a } = Ar(n), l = i;
    if (l.length < n.length) {
      const d = Cl(t, l), p = [
        "row",
        "col"
      ];
      return `
      ${Sl(d, e)}
      float ${r}(int row, int col) {
        return ${r}(${Il(p, a)});
      }
    `;
    }
    if (t.shapeInfo.isUniform) return `
      float ${r}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));
        ${$l(t)}
      }
    `;
    const c = o[0], u = o[1], h = Ti(s);
    return u === 1 ? e ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);
      return sampleTexture(${s}, uv);
    }
  ` : c === 1 ? e ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);
      return sampleTexture(${s}, uv);
    }
  ` : e ? `
      float ${r}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s}Shape[1] + col + ${h};
        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
        return sampleTexture(${s}, uv);
      }
    ` : `
  float ${r}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${n[1]} + col + ${h};
    vec2 uv = uvFromFlat(${c}, ${u}, index);
    return sampleTexture(${s}, uv);
  }
`;
  }
  function _J(t, e) {
    const n = t.shapeInfo.logicalShape, s = t.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = t.shapeInfo.texShape, i = [
      Math.ceil(o[0] / 2),
      Math.ceil(o[1] / 2)
    ];
    if (n[0] === 1) {
      const d = n.slice(1), p = [
        1,
        2
      ], f = Cl(t, d), m = [
        "b",
        "row",
        "col"
      ];
      return `
        ${E2(f, e)}
        vec4 ${r}(int b, int row, int col) {
          return ${r}(${Il(m, p)});
        }
      `;
    }
    const a = vn();
    if (e) return `
    vec4 ${r}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
    const l = i[0], c = i[1], u = Math.ceil(n[2] / 2), h = u * Math.ceil(n[1] / 2);
    return `
    vec4 ${r}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${c}, ${h}, ${u}, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
  }
  function DJ(t, e) {
    const n = t.shapeInfo.logicalShape, s = t.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = n[1] * n[2], i = n[2], { newShape: a, keptDims: l } = Ar(n), c = a;
    if (c.length < n.length) {
      const m = Cl(t, c), g = [
        "row",
        "col",
        "depth"
      ];
      return `
        ${Sl(m, e)}
        float ${r}(int row, int col, int depth) {
          return ${r}(${Il(g, l)});
        }
      `;
    }
    if (t.shapeInfo.isUniform) return `
      float ${r}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${o}, ${i}, 1)));
        ${$l(t)}
      }
    `;
    const u = t.shapeInfo.texShape, h = u[0], d = u[1], p = t.shapeInfo.flatOffset;
    if (d === o && p == null) return e ? `
      float ${r}(int row, int col, int depth) {
        int stride1 = ${s}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
        float ${r}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${h}.0);
          return sampleTexture(${s}, uv);
        }
      `;
    if (d === i && p == null) return e ? `
      float ${r}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);
      return sampleTexture(${s}, uv);
    }
  `;
    const f = Ti(s);
    return e ? `
    float ${r}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${s}Shape[1] * ${s}Shape[2];
      int stride1 = ${s}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
      return sampleTexture(${s}, uv);
    }
    ` : `
      float ${r}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o} + col * ${i} + depth + ${f};
        vec2 uv = uvFromFlat(${h}, ${d}, index);
        return sampleTexture(${s}, uv);
      }
  `;
  }
  function OJ(t, e) {
    const n = t.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = vn();
    if (e) return `
    vec4 ${s}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${n}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);
    }
  `;
    const o = t.shapeInfo.logicalShape, i = o.length, a = t.shapeInfo.texShape, l = [
      Math.ceil(a[0] / 2),
      Math.ceil(a[1] / 2)
    ], c = l[0], u = l[1], h = Math.ceil(o[i - 1] / 2);
    let d = h * Math.ceil(o[i - 2] / 2), p = "int b, int row, int col", f = `b * ${d} + (row / 2) * ${h} + (col / 2)`;
    for (let m = 2; m < i - 1; m++) p = `int b${m}, ` + p, d *= o[i - m - 1], f = `b${m} * ${d} + ` + f;
    return `
    vec4 ${s}(${p}) {
      int index = ${f};
      int texR = index / ${u};
      int texC = index - texR * ${u};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${c});
      return ${r.texture2D}(${n}, uv);
    }
  `;
  }
  function FJ(t, e) {
    const n = t.shapeInfo.logicalShape, s = t.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = n[3], i = n[2] * o, a = n[1] * i, { newShape: l, keptDims: c } = Ar(n);
    if (l.length < n.length) {
      const b = Cl(t, l), w = [
        "row",
        "col",
        "depth",
        "depth2"
      ];
      return `
      ${Sl(b, e)}
      float ${r}(int row, int col, int depth, int depth2) {
        return ${r}(${Il(w, c)});
      }
    `;
    }
    if (t.shapeInfo.isUniform) return `
      float ${r}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${o}, 1)));
        ${$l(t)}
      }
    `;
    const u = t.shapeInfo.flatOffset, h = t.shapeInfo.texShape, d = h[0], p = h[1], f = `int stride2 = ${s}Shape[3];`, m = `int stride1 = ${s}Shape[2] * stride2;`, g = `int stride0 = ${s}Shape[1] * stride1;`;
    if (p === a && u == null) return e ? `
      float ${r}(int row, int col, int depth, int depth2) {
        ${f}
        ${m}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${o}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
    if (p === o && u == null) return e ? `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${n[1] * n[2]}, ${n[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
    const y = Ti(s);
    return e ? `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${m}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});
      return sampleTexture(${s}, uv);
    }
  ` : `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${o} + depth2;
      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});
      return sampleTexture(${s}, uv);
    }
  `;
  }
  function LJ(t) {
    const e = t.shapeInfo.logicalShape, n = t.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = e[4], o = e[3] * r, i = e[2] * o, a = e[1] * i, { newShape: l, keptDims: c } = Ar(e);
    if (l.length < e.length) {
      const m = Cl(t, l), g = [
        "row",
        "col",
        "depth",
        "depth2",
        "depth3"
      ];
      return `
      ${Sl(m)}
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        return ${s}(${Il(g, c)});
      }
    `;
    }
    if (t.shapeInfo.isUniform) return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${o}, ${r})) +
          depth3;
        ${$l(t)}
      }
    `;
    const u = t.shapeInfo.flatOffset, h = t.shapeInfo.texShape, d = h[0], p = h[1];
    if (p === a && u == null) return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${o}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${n}, uv);
      }
    `;
    if (p === r && u == null) return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3]},
               ${e[2] * e[3]}, ${e[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${n}, uv);
      }
    `;
    const f = Ti(n);
    return `
    float ${s}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${o} +
          depth2 * ${r} + depth3 + ${f};
      vec2 uv = uvFromFlat(${d}, ${p}, index);
      return sampleTexture(${n}, uv);
    }
  `;
  }
  function PJ(t) {
    const e = t.shapeInfo.logicalShape, n = t.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), { newShape: r, keptDims: o } = Ar(e);
    if (r.length < e.length) {
      const g = Cl(t, r), y = [
        "row",
        "col",
        "depth",
        "depth2",
        "depth3",
        "depth4"
      ];
      return `
      ${Sl(g)}
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${s}(${Il(y, o)});
      }
    `;
    }
    const i = e[5], a = e[4] * i, l = e[3] * a, c = e[2] * l, u = e[1] * c;
    if (t.shapeInfo.isUniform) return `
      float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${u}, ${c}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${$l(t)}
      }
    `;
    const h = t.shapeInfo.flatOffset, d = t.shapeInfo.texShape, p = d[0], f = d[1];
    if (f === u && h == null) return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${c}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${p}.0);
        return sampleTexture(${n}, uv);
      }
    `;
    if (f === i && h == null) return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3] * e[4]},
               ${e[2] * e[3] * e[4]},
               ${e[3] * e[4]},
               ${e[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${p}.0);
        return sampleTexture(${n}, uv);
      }
    `;
    const m = Ti(n);
    return `
    float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${c} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${m};
      vec2 uv = uvFromFlat(${p}, ${f}, index);
      return sampleTexture(${n}, uv);
    }
  `;
  }
  function $l(t) {
    const e = t.name, n = X(t.shapeInfo.logicalShape);
    return n < 2 ? `return ${e};` : `
    for (int i = 0; i < ${n}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `;
  }
  function zJ(t, e) {
    const n = t.name, s = n.charAt(0).toUpperCase() + n.slice(1), r = "get" + s + "AtOutCoords", o = t.shapeInfo.logicalShape.length, i = e.logicalShape.length, a = T2(t.shapeInfo.logicalShape, e.logicalShape), l = rt(i), c = i - o;
    let u;
    const h = [
      "x",
      "y",
      "z",
      "w",
      "u",
      "v"
    ];
    o === 0 ? u = "" : i < 2 && a.length >= 1 ? u = "coords = 0;" : u = a.map((b) => `coords.${h[b + c]} = 0;`).join(`
`);
    let d = "";
    i < 2 && o > 0 ? d = "coords" : d = t.shapeInfo.logicalShape.map((b, w) => `coords.${h[w + c]}`).join(", ");
    let p = "return outputValue;";
    const m = X(t.shapeInfo.logicalShape) === 1, y = X(e.logicalShape) === 1;
    if (o === 1 && !m && !y) p = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
    else if (m && !y) i === 1 ? p = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : p = `
        return vec4(outputValue.x);
      `;
    else if (a.length) {
      const b = o - 2, w = o - 1;
      a.indexOf(b) > -1 && a.indexOf(w) > -1 ? p = "return vec4(outputValue.x);" : a.indexOf(b) > -1 ? p = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : a.indexOf(w) > -1 && (p = "return vec4(outputValue.xx, outputValue.zz);");
    }
    return `
    vec4 ${r}() {
      ${l} coords = getOutputCoords();
      ${u}
      vec4 outputValue = get${s}(${d});
      ${p}
    }
  `;
  }
  function MJ(t, e) {
    const n = t.name, s = n.charAt(0).toUpperCase() + n.slice(1), r = "get" + s + "AtOutCoords", o = e.texShape, i = t.shapeInfo.texShape, a = t.shapeInfo.logicalShape.length, l = e.logicalShape.length;
    if (!t.shapeInfo.isUniform && a === l && t.shapeInfo.flatOffset == null && Ue(i, o)) return `
      float ${r}() {
        return sampleTexture(${n}, resultUV);
      }
    `;
    const c = rt(l), u = T2(t.shapeInfo.logicalShape, e.logicalShape), h = l - a;
    let d;
    const p = [
      "x",
      "y",
      "z",
      "w",
      "u",
      "v"
    ];
    a === 0 ? d = "" : l < 2 && u.length >= 1 ? d = "coords = 0;" : d = u.map((m) => `coords.${p[m + h]} = 0;`).join(`
`);
    let f = "";
    return l < 2 && a > 0 ? f = "coords" : f = t.shapeInfo.logicalShape.map((m, g) => `coords.${p[g + h]}`).join(", "), `
    float ${r}() {
      ${c} coords = getOutputCoords();
      ${d}
      return get${s}(${f});
    }
  `;
  }
  function rt(t) {
    if (t <= 1) return "int";
    if (t === 2) return "ivec2";
    if (t === 3) return "ivec3";
    if (t === 4) return "ivec4";
    if (t === 5) return "ivec5";
    if (t === 6) return "ivec6";
    throw Error(`GPU for rank ${t} is not yet supported`);
  }
  function q0(t, e, n) {
    const { newShape: s, keptDims: r } = Ar(e), o = e.length, i = t && o === 3 && e[0] === 1, a = i ? e.slice(1) : s, l = !t && o > 1 && !Ue(e, n) && s.length < o || i;
    return {
      useSqueezeShape: l,
      uniformShape: l ? a : e,
      keptDims: r
    };
  }
  function Cl(t, e) {
    const n = JSON.parse(JSON.stringify(t));
    return n.shapeInfo.logicalShape = e, n;
  }
  function Il(t, e) {
    return e.map((n) => t[n]).join(", ");
  }
  function BJ(t, e, n, s) {
    const r = n.map((u, h) => {
      const d = {
        logicalShape: u.shape,
        texShape: u.isUniform ? null : u.texData.texShape,
        isUniform: u.isUniform,
        isPacked: u.isUniform ? false : u.texData.isPacked,
        flatOffset: null
      };
      return u.texData != null && u.texData.slice != null && u.texData.slice.flatOffset > 0 && (d.flatOffset = u.texData.slice.flatOffset), {
        name: e.variableNames[h],
        shapeInfo: d
      };
    }), o = r.map((u) => u.shapeInfo), i = {
      logicalShape: s.shape,
      texShape: s.texData.texShape,
      isUniform: false,
      isPacked: s.texData.isPacked,
      flatOffset: null
    }, a = rJ(r, i, e), l = i2(t.gl, a), c = t.createProgram(l);
    return j().get("ENGINE_COMPILE_ONLY") ? {
      program: e,
      fragmentShader: l,
      source: a,
      webGLProgram: c,
      inShapeInfos: o,
      outShapeInfo: i,
      variablesLocations: null,
      customUniformLocations: null,
      infLoc: null,
      nanLoc: null,
      outShapeLocation: null,
      outShapeStridesLocation: null,
      outTexShapeLocation: null
    } : (t.buildVao(c), Object.assign({
      program: e,
      fragmentShader: l,
      source: a,
      webGLProgram: c,
      inShapeInfos: o,
      outShapeInfo: i
    }, A2(t, e, c)));
  }
  function A2(t, e, n) {
    const s = [], r = [];
    let o, i, a, l = null, c = null;
    c = t.getUniformLocation(n, "NAN", false), j().getNumber("WEBGL_VERSION") === 1 && (l = t.getUniformLocation(n, "INFINITY", false));
    const u = false;
    for (const h of e.variableNames) {
      const d = {
        name: h,
        uniform: t.getUniformLocation(n, h, u),
        offset: t.getUniformLocation(n, `offset${h}`, u)
      };
      e.enableShapeUniforms && (d.shape = t.getUniformLocation(n, `${h}Shape`, u), d.texShape = t.getUniformLocation(n, `${h}TexShape`, u)), s.push(d);
    }
    if (e.enableShapeUniforms && (o = t.getUniformLocation(n, "outShape", u), a = t.getUniformLocation(n, "outShapeStrides", u), i = t.getUniformLocation(n, "outTexShape", u)), e.customUniforms) for (const h of e.customUniforms) r.push(t.getUniformLocation(n, h.name, u));
    return {
      variablesLocations: s,
      customUniformLocations: r,
      infLoc: l,
      nanLoc: c,
      outShapeLocation: o,
      outShapeStridesLocation: a,
      outTexShapeLocation: i
    };
  }
  function CS(t, e) {
    if (t.length !== e.length) throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);
    t.forEach((n, s) => {
      const r = n.logicalShape, o = e[s], i = o.shape;
      if (!Ue(r, i)) throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);
      if (n.isUniform && o.isUniform) return;
      const a = n.texShape, l = o.isUniform ? null : o.texData.texShape;
      if (!Ue(a, l)) throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`);
    });
  }
  function VJ(t, e, n, s, r) {
    e.program.enableShapeUniforms || (CS(e.inShapeInfos, n), CS([
      e.outShapeInfo
    ], [
      s
    ]));
    const o = s.texData.texture, i = s.texData.texShape;
    s.texData.isPacked ? t.setOutputPackedMatrixTexture(o.texture, i[0], i[1]) : t.setOutputMatrixTexture(o.texture, i[0], i[1]), t.setProgram(e.webGLProgram), t.bindVertexArray(e.webGLProgram.vao), j().getNumber("WEBGL_VERSION") === 1 && e.infLoc !== null && t.gl.uniform1f(e.infLoc, 1 / 0), e.nanLoc !== null && t.gl.uniform1f(e.nanLoc, NaN);
    for (let l = 0; l < n.length; ++l) {
      const c = n[l], { uniform: u, offset: h, shape: d, texShape: p } = e.variablesLocations[l];
      if (d) {
        const { uniformShape: f } = q0(e.program.packedInputs, c.shape, c.texData.texShape);
        switch (f.length) {
          case 1:
            t.gl.uniform1iv(d, new Int32Array(f));
            break;
          case 2:
            t.gl.uniform2iv(d, new Int32Array(f));
            break;
          case 3:
            t.gl.uniform3iv(d, new Int32Array(f));
            break;
          case 4:
            t.gl.uniform4iv(d, new Int32Array(f));
            break;
        }
      }
      if (p && t.gl.uniform2i(p, c.texData.texShape[0], c.texData.texShape[1]), u != null) {
        if (c.isUniform) {
          if (X(c.shape) < 2) t.gl.uniform1f(u, c.uniformValues[0]);
          else {
            let f = c.uniformValues;
            f instanceof Float32Array || (f = new Float32Array(f)), t.gl.uniform1fv(u, f);
          }
          continue;
        }
        c.texData.slice != null && h != null && t.gl.uniform1i(h, c.texData.slice.flatOffset), t.setInputMatrixTexture(c.texData.texture.texture, u, l);
      }
    }
    const a = e.outShapeLocation;
    if (a) switch (s.shape.length) {
      case 1:
        t.gl.uniform1iv(a, new Int32Array(s.shape));
        break;
      case 2:
        t.gl.uniform2iv(a, new Int32Array(s.shape));
        break;
      case 3:
        t.gl.uniform3iv(a, new Int32Array(s.shape));
        break;
      case 4:
        t.gl.uniform4iv(a, new Int32Array(s.shape));
        break;
    }
    if (e.outShapeStridesLocation) {
      const l = Ee(s.shape);
      switch (s.shape.length) {
        case 2:
          t.gl.uniform1iv(e.outShapeStridesLocation, new Int32Array(l));
          break;
        case 3:
          t.gl.uniform2iv(e.outShapeStridesLocation, new Int32Array(l));
          break;
        case 4:
          t.gl.uniform3iv(e.outShapeStridesLocation, new Int32Array(l));
          break;
      }
    }
    if (e.outTexShapeLocation && t.gl.uniform2i(e.outTexShapeLocation, s.texData.texShape[0], s.texData.texShape[1]), e.program.customUniforms && r) for (let l = 0; l < e.program.customUniforms.length; ++l) {
      const c = e.program.customUniforms[l], u = e.customUniformLocations[l], h = r[l];
      if (c.type === "float") t.gl.uniform1fv(u, h);
      else if (c.type === "vec2") t.gl.uniform2fv(u, h);
      else if (c.type === "vec3") t.gl.uniform3fv(u, h);
      else if (c.type === "vec4") t.gl.uniform4fv(u, h);
      else if (c.type === "int") t.gl.uniform1iv(u, h);
      else if (c.type === "ivec2") t.gl.uniform2iv(u, h);
      else if (c.type === "ivec3") t.gl.uniform3iv(u, h);
      else if (c.type === "ivec4") t.gl.uniform4iv(u, h);
      else throw Error(`uniform type ${c.type} is not supported yet.`);
    }
    t.executeProgram();
  }
  function WJ(t, e, n) {
    let s = "";
    e.concat(n).forEach((i) => {
      const a = i.texData != null && i.texData.slice != null && i.texData.slice.flatOffset > 0;
      if (t.enableShapeUniforms && !i.isUniform) {
        const l = i.texData.texShape, { useSqueezeShape: c, uniformShape: u, keptDims: h } = q0(t.packedInputs, i.shape, l);
        let d = "", p = "", f = "";
        if (u.length === 1 && t.packedInputs) {
          const S = [
            Math.ceil(l[0] / 2),
            Math.ceil(l[1] / 2)
          ];
          d = `${S[0] > 1}_${S[1] > 1}`;
        } else if (u.length === 2 && !t.packedInputs) p = `${u[0] > 1}_${u[1] > 1}`;
        else if (u.length > 2 && !t.packedInputs) {
          const S = Ee(u);
          f = `${S[0] === l[1]}_${S[S.length - 1] === l[1]}`;
        }
        const m = i.shape.length, g = u.length === 2 && Ue(i.shape, l), y = X(i.shape) === 1, b = ri(i.shape, n.shape), w = !t.packedInputs && m === n.shape.length && Ue(l, n.texData.texShape), x = t.packedInputs || u.length > 2 ? "" : `${l[0] > 1}_${l[1] > 1}`;
        s += `${m}_${w}_${c ? h : ""}_${u.length}_${y}_${b}_${g}_${d}_${p}_${f}_${x}_${a}`;
      } else {
        const l = i.isUniform ? "uniform" : i.texData.texShape;
        s += `${i.shape}_${l}_${a}`;
      }
    });
    const r = t.userCode;
    let o = t.constructor.name;
    return o += "_" + s + "_" + r + `${j().getNumber("WEBGL_VERSION")}`, o;
  }
  function cn(t) {
    return j().getBool("WEBGL_USE_SHAPES_UNIFORMS") && t <= 4;
  }
  class UJ {
    constructor(e) {
      this.variableNames = [
        "A"
      ], this.packedInputs = false, this.packedOutput = true, this.outPackingScheme = kc.DENSE, this.customUniforms = [
        {
          name: "texShape",
          type: "ivec2"
        }
      ];
      const n = vn();
      this.outputShape = e, this.enableShapeUniforms = cn(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Pm([
        "r",
        "c",
        "d"
      ], e) : ki([
        "r",
        "c",
        "d"
      ], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${n.output} = result;
      }
    `;
    }
  }
  class GJ {
    constructor(e) {
      this.variableNames = [
        "A"
      ], this.packedInputs = true, this.packedOutput = true, this.outPackingScheme = kc.DENSE, this.customUniforms = [
        {
          name: "texShape",
          type: "ivec2"
        }
      ];
      const n = vn();
      this.outputShape = e, this.enableShapeUniforms = cn(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Pm([
        "r",
        "c",
        "d"
      ], e) : ki([
        "r",
        "c",
        "d"
      ], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${n.output} = result;
      }
    `;
    }
  }
  class HJ {
    constructor(e) {
      this.variableNames = [
        "A"
      ], this.outTexUsage = es.DOWNLOAD;
      const n = vn();
      this.outputShape = e, this.userCode = `
      ${k2}

      void main() {
        float x = getAAtOutCoords();
        ${n.output} = encode_float(x);
      }
    `;
    }
  }
  class jJ {
    constructor(e) {
      this.variableNames = [
        "A"
      ], this.packedInputs = true, this.packedOutput = false, this.outTexUsage = es.DOWNLOAD;
      const n = vn();
      this.outputShape = e, this.userCode = `
      ${k2}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${n.output} = encode_float(x);
      }
    `;
    }
  }
  const qJ = {
    R: 0,
    G: 1,
    B: 2,
    A: 3
  };
  class IS {
    constructor(e, n = false, s = "RGBA") {
      this.variableNames = [
        "A"
      ], this.customUniforms = [
        {
          name: "texShape",
          type: "ivec2"
        }
      ];
      const r = vn();
      this.outputShape = e, this.enableShapeUniforms = cn(this.outputShape.length);
      let o = "result";
      n && (o = "floor(result * 255. + 0.5)");
      let i = "";
      for (let a = 0; a < s.length; a++) {
        const l = s[a];
        i += `
          if(offset == ${a}) {
            result = values[${qJ[l]}];
          }`;
      }
      this.userCode = `
      ${this.enableShapeUniforms ? j0() : H0(e)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${s.length});

        flatIndex = idiv(flatIndex, ${s.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${r.texture2D}(A, uv);
          ${i}
        }
        ${r.output} = vec4(${o}, 0., 0., 0.);
      }
    `;
    }
  }
  class KJ {
    constructor(e, n = false) {
      this.variableNames = [
        "A"
      ], this.packedInputs = false, this.packedOutput = true, this.customUniforms = [
        {
          name: "texShape",
          type: "ivec2"
        }
      ];
      const s = vn();
      this.outputShape = e, this.enableShapeUniforms = cn(this.outputShape.length);
      let r = "", o = "result";
      n && (o = "floor(result * 255. + 0.5)");
      for (let i = 0; i <= 1; i++) for (let a = 0; a <= 1; a++) {
        const l = i * 2 + a;
        r += `
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms ? "outShape[2]" : `${e[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms ? "outShape[1]" : `${e[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${s.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `;
      }
      this.userCode = `
        ${this.enableShapeUniforms ? j0() : H0(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${r}

          ${s.output} = ${o};
        }
    `;
    }
  }
  function _2(t) {
    const e = vn(), n = `${e.version}
    precision highp float;
    ${e.attribute} vec3 clipSpacePos;
    ${e.attribute} vec2 uv;
    ${e.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
    return o2(t, n);
  }
  function D2(t) {
    const e = new Float32Array([
      -1,
      1,
      0,
      0,
      1,
      -1,
      -1,
      0,
      0,
      0,
      1,
      1,
      0,
      1,
      1,
      1,
      -1,
      0,
      1,
      0
    ]);
    return c2(t, e);
  }
  function O2(t) {
    const e = new Uint16Array([
      0,
      1,
      2,
      2,
      1,
      3
    ]);
    return u2(t, e);
  }
  function wh(t, e, n, s, r, o) {
    d2(e, n);
    const i = h2(t), a = t.TEXTURE_2D;
    return xe(t, () => t.bindTexture(a, i)), xe(t, () => t.texParameteri(a, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE)), xe(t, () => t.texParameteri(a, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE)), xe(t, () => t.texParameteri(a, t.TEXTURE_MIN_FILTER, t.NEAREST)), xe(t, () => t.texParameteri(a, t.TEXTURE_MAG_FILTER, t.NEAREST)), j().getNumber("WEBGL_VERSION") === 1 ? xe(t, () => t.texImage2D(a, 0, s, e, n, 0, r, o, null)) : xe(t, () => t.texStorage2D(a, 1, s, e, n)), xe(t, () => t.bindTexture(t.TEXTURE_2D, null)), {
      texture: i,
      texShape: [
        n,
        e
      ]
    };
  }
  function K0(t) {
    return t.internalFormatFloat;
  }
  function F2(t, e, n, s) {
    const [r, o] = xh(e, n);
    return wh(t, r, o, K0(s), s.textureFormatFloat, t.FLOAT);
  }
  function X0(t) {
    return t.internalFormatHalfFloat;
  }
  function L2(t, e, n, s) {
    const [r, o] = xh(e, n);
    return wh(t, r, o, X0(s), s.textureFormatFloat, s.textureTypeHalfFloat);
  }
  function Y0(t) {
    return t.downloadTextureFormat;
  }
  function P2(t, e, n, s) {
    const [r, o] = xh(e, n);
    return wh(t, r, o, Y0(s), t.RGBA, t.UNSIGNED_BYTE);
  }
  function Z0(t) {
    return t.internalFormatPackedFloat;
  }
  function z2(t, e, n, s) {
    const [r, o] = wl(e, n);
    return wh(t, r, o, Z0(s), t.RGBA, t.FLOAT);
  }
  function J0(t) {
    return t.internalFormatPackedHalfFloat;
  }
  function M2(t, e, n, s) {
    const [r, o] = wl(e, n);
    return wh(t, r, o, J0(s), t.RGBA, s.textureTypeHalfFloat);
  }
  function B2(t, e, n) {
    return xe(t, () => t.bindBuffer(t.ARRAY_BUFFER, n)), Cy(t, e, "clipSpacePos", n, 3, 20, 0) && Cy(t, e, "uv", n, 2, 20, 12);
  }
  function V2(t, e, n, s, r, o) {
    xe(t, () => t.bindTexture(t.TEXTURE_2D, e));
    let i, a, l;
    r instanceof Uint8Array ? (i = new Uint8Array(n * s * 4), a = t.UNSIGNED_BYTE, l = t.RGBA) : (i = new Float32Array(n * s * 4), a = t.FLOAT, l = o.internalFormatPackedFloat), i.set(r), j().getNumber("WEBGL_VERSION") === 2 ? xe(t, () => t.texSubImage2D(t.TEXTURE_2D, 0, 0, 0, n, s, t.RGBA, a, i)) : xe(t, () => t.texImage2D(t.TEXTURE_2D, 0, l, n, s, 0, t.RGBA, a, i)), xe(t, () => t.bindTexture(t.TEXTURE_2D, null));
  }
  function W2(t, e, n) {
    xe(t, () => t.bindTexture(t.TEXTURE_2D, e)), n.data instanceof Uint8Array ? j().getNumber("WEBGL_VERSION") === 2 ? xe(t, () => t.texSubImage2D(t.TEXTURE_2D, 0, 0, 0, n.width, n.height, t.RGBA, t.UNSIGNED_BYTE, n.data)) : xe(t, () => t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, n.width, n.height, 0, t.RGBA, t.UNSIGNED_BYTE, n.data)) : j().getNumber("WEBGL_VERSION") === 2 ? xe(t, () => t.texSubImage2D(t.TEXTURE_2D, 0, 0, 0, t.RGBA, t.UNSIGNED_BYTE, n)) : xe(t, () => t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, t.RGBA, t.UNSIGNED_BYTE, n)), xe(t, () => t.bindTexture(t.TEXTURE_2D, null));
  }
  function U2(t, e, n, s) {
    const r = t.createBuffer();
    xe(t, () => t.bindBuffer(t.PIXEL_PACK_BUFFER, r));
    const a = 4 * 4 * e * n;
    return xe(t, () => t.bufferData(t.PIXEL_PACK_BUFFER, a, t.STREAM_READ)), xe(t, () => t.readPixels(0, 0, n, e, t.RGBA, t.FLOAT, 0)), xe(t, () => t.bindBuffer(t.PIXEL_PACK_BUFFER, null)), r;
  }
  function G2(t, e, n) {
    const s = t, r = new Float32Array(n);
    return s.bindBuffer(s.PIXEL_PACK_BUFFER, e), s.getBufferSubData(s.PIXEL_PACK_BUFFER, 0, r), s.bindBuffer(s.PIXEL_PACK_BUFFER, null), r;
  }
  function H2(t, e, n, s) {
    const [r, o] = xh(e, n), i = 4, a = new Uint8Array(UZ(e * n, i));
    return xe(t, () => t.readPixels(0, 0, r, o, s.downloadTextureFormat, t.UNSIGNED_BYTE, a)), new Float32Array(a.buffer);
  }
  function j2(t, e, n, s, r, o, i, a) {
    const l = t, c = new Float32Array(GZ(o, i));
    return l.bindBuffer(l.PIXEL_PACK_BUFFER, e), l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, c), l.bindBuffer(l.PIXEL_PACK_BUFFER, null), c;
  }
  function q2(t, e, n) {
    const s = new Float32Array(e * n * 4);
    return xe(t, () => t.readPixels(0, 0, n, e, t.RGBA, t.FLOAT, s)), s;
  }
  const XJ = Object.freeze(Object.defineProperty({
    __proto__: null,
    bindVertexProgramAttributeStreams: B2,
    createBufferFromOutputTexture: U2,
    createFloat16MatrixTexture: L2,
    createFloat16PackedMatrixTexture: M2,
    createFloat32MatrixTexture: F2,
    createIndexBuffer: O2,
    createPackedMatrixTexture: z2,
    createUnsignedBytesMatrixTexture: P2,
    createVertexBuffer: D2,
    createVertexShader: _2,
    downloadByteEncodedFloatMatrixFromOutputTexture: H2,
    downloadFloat32MatrixFromBuffer: G2,
    downloadMatrixFromPackedOutputTexture: q2,
    downloadPackedMatrixFromBuffer: j2,
    getInternalFormatForFloat16MatrixTexture: X0,
    getInternalFormatForFloat16PackedMatrixTexture: J0,
    getInternalFormatForFloat32MatrixTexture: K0,
    getInternalFormatForPackedMatrixTexture: Z0,
    getInternalFormatForUnsignedBytesMatrixTexture: Y0,
    uploadDenseMatrixToTexture: V2,
    uploadPixelDataToTexture: W2
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  class cd {
    constructor(e) {
      this.outputTexture = null, this.program = null, this.disposed = false, this.itemsToPoll = [];
      const n = j().getNumber("WEBGL_VERSION");
      if (e != null ? (this.gl = e, n2(n, e)) : this.gl = Ls(n), e = this.gl, j().getNumber("WEBGL_VERSION") === 2) {
        const o = e;
        this.createVertexArray = () => xe(o, () => o.createVertexArray()), this.bindVertexArray = (i) => xe(o, () => o.bindVertexArray(i)), this.deleteVertexArray = (i) => xe(o, () => o.deleteVertexArray(i)), this.getVertexArray = () => xe(o, () => o.getParameter(o.VERTEX_ARRAY_BINDING));
      } else if (e != null) {
        const o = e.getExtension("OES_vertex_array_object");
        if (o == null) throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");
        this.createVertexArray = () => xe(e, () => o.createVertexArrayOES()), this.bindVertexArray = (i) => xe(e, () => o.bindVertexArrayOES(i)), this.deleteVertexArray = (i) => xe(e, () => o.deleteVertexArrayOES(i)), this.getVertexArray = () => xe(e, () => e.getParameter(o.VERTEX_ARRAY_BINDING_OES));
      }
      let s = "WEBGL_color_buffer_float";
      const r = "EXT_color_buffer_half_float";
      if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), j().getNumber("WEBGL_VERSION") === 1) {
        const o = "OES_texture_float", i = "OES_texture_half_float";
        if (this.textureFloatExtension = Ul(this.gl, o), ts(this.gl, i)) this.textureHalfFloatExtension = Ul(this.gl, i);
        else if (j().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
        if (this.colorBufferFloatExtension = this.gl.getExtension(s), ts(this.gl, r)) this.colorBufferHalfFloatExtension = Ul(this.gl, r);
        else if (j().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      } else if (s = "EXT_color_buffer_float", ts(this.gl, s)) this.colorBufferFloatExtension = this.gl.getExtension(s);
      else if (ts(this.gl, r)) this.colorBufferHalfFloatExtension = this.gl.getExtension(r);
      else throw new Error("GL context does not support color renderable floats");
      this.vertexBuffer = D2(this.gl), this.indexBuffer = O2(this.gl), this.framebuffer = p2(this.gl), this.textureConfig = U0(this.gl, this.textureHalfFloatExtension);
    }
    get debug() {
      return j().getBool("DEBUG");
    }
    dispose() {
      if (this.disposed) return;
      this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
      const e = this.gl;
      xe(e, () => e.finish()), xe(e, () => e.bindFramebuffer(e.FRAMEBUFFER, null)), xe(e, () => e.deleteFramebuffer(this.framebuffer)), xe(e, () => e.bindBuffer(e.ARRAY_BUFFER, null)), xe(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null)), xe(e, () => e.deleteBuffer(this.indexBuffer)), this.disposed = true;
    }
    createFloat32MatrixTexture(e, n) {
      return this.throwIfDisposed(), F2(this.gl, e, n, this.textureConfig);
    }
    createFloat16MatrixTexture(e, n) {
      return this.throwIfDisposed(), L2(this.gl, e, n, this.textureConfig);
    }
    createUnsignedBytesMatrixTexture(e, n) {
      return this.throwIfDisposed(), P2(this.gl, e, n, this.textureConfig);
    }
    uploadPixelDataToTexture(e, n) {
      this.throwIfDisposed(), W2(this.gl, e, n);
    }
    uploadDenseMatrixToTexture(e, n, s, r) {
      this.throwIfDisposed(), V2(this.gl, e, n, s, r, this.textureConfig);
    }
    createFloat16PackedMatrixTexture(e, n) {
      return this.throwIfDisposed(), M2(this.gl, e, n, this.textureConfig);
    }
    createPackedMatrixTexture(e, n) {
      return this.throwIfDisposed(), z2(this.gl, e, n, this.textureConfig);
    }
    deleteMatrixTexture(e) {
      this.throwIfDisposed(), this.outputTexture === e && (Iy(this.gl, this.framebuffer), this.outputTexture = null), xe(this.gl, () => this.gl.deleteTexture(e));
    }
    downloadByteEncodedFloatMatrixFromOutputTexture(e, n, s) {
      return this.downloadMatrixDriver(e, () => H2(this.gl, n, s, this.textureConfig));
    }
    downloadPackedMatrixFromBuffer(e, n, s, r, o, i) {
      return j2(this.gl, e, n, s, r, o, i, this.textureConfig);
    }
    downloadFloat32MatrixFromBuffer(e, n) {
      return G2(this.gl, e, n);
    }
    createBufferFromTexture(e, n, s) {
      this.bindTextureToFrameBuffer(e);
      const r = U2(this.gl, n, s, this.textureConfig);
      return this.unbindTextureToFrameBuffer(), r;
    }
    createAndWaitForFence() {
      const e = this.createFence(this.gl);
      return this.pollFence(e);
    }
    createFence(e) {
      let n, s;
      if (j().getBool("WEBGL_FENCE_API_ENABLED")) {
        const r = e, o = r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE, 0);
        e.flush(), s = () => {
          const i = r.clientWaitSync(o, 0, 0);
          return i === r.ALREADY_SIGNALED || i === r.CONDITION_SATISFIED;
        }, n = o;
      } else j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (n = this.beginQuery(), this.endQuery(), s = () => this.isQueryAvailable(n, j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : s = () => true;
      return {
        query: n,
        isFencePassed: s
      };
    }
    downloadMatrixFromPackedTexture(e, n, s) {
      return this.downloadMatrixDriver(e, () => q2(this.gl, n, s));
    }
    createProgram(e) {
      this.throwIfDisposed();
      const n = this.gl;
      this.vertexShader == null && (this.vertexShader = _2(n));
      const s = a2(n);
      xe(n, () => n.attachShader(s, this.vertexShader)), xe(n, () => n.attachShader(s, e)), l2(n, s);
      const r = Object.assign(s, {
        vao: this.createVertexArray()
      });
      return this.debug && od(n, r), r;
    }
    buildVao(e) {
      this.setProgram(e), this.bindVertexArray(e.vao);
      const n = this.gl;
      xe(n, () => n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, this.indexBuffer)), B2(n, e, this.vertexBuffer);
    }
    deleteProgram(e) {
      this.throwIfDisposed(), e === this.program && (this.program = null), e != null && (xe(this.gl, () => this.gl.deleteProgram(e)), this.deleteVertexArray(e.vao));
    }
    setProgram(e) {
      this.throwIfDisposed(), this.program = e, this.program != null && this.debug && od(this.gl, this.program), xe(this.gl, () => this.gl.useProgram(e));
    }
    getUniformLocation(e, n, s = true) {
      return this.throwIfDisposed(), s ? m2(this.gl, e, n) : g2(this.gl, e, n);
    }
    getAttributeLocation(e, n) {
      return this.throwIfDisposed(), xe(this.gl, () => this.gl.getAttribLocation(e, n));
    }
    getUniformLocationNoThrow(e, n) {
      return this.throwIfDisposed(), this.gl.getUniformLocation(e, n);
    }
    setInputMatrixTexture(e, n, s) {
      this.throwIfDisposed(), this.throwIfNoProgram(), y2(this.gl, e, n, s);
    }
    setOutputMatrixTexture(e, n, s) {
      this.setOutputMatrixTextureDriver(e, s, n);
    }
    setOutputPackedMatrixTexture(e, n, s) {
      this.throwIfDisposed();
      const [r, o] = wl(n, s);
      this.setOutputMatrixTextureDriver(e, r, o);
    }
    setOutputMatrixWriteRegion(e, n, s, r) {
      this.setOutputMatrixWriteRegionDriver(s, e, r, n);
    }
    setOutputPackedMatrixWriteRegion(e, n, s, r) {
      throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
    }
    debugValidate() {
      this.program != null && od(this.gl, this.program), Gl(this.gl);
    }
    executeProgram() {
      this.throwIfDisposed(), this.throwIfNoProgram();
      const e = this.gl;
      if (this.debug) {
        const n = this.getVertexArray();
        console.assert(n === this.program.vao, "VAO changed between setProgram and executeProgram!"), this.debugValidate();
      }
      xe(e, () => e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0));
    }
    blockUntilAllProgramsCompleted() {
      this.throwIfDisposed(), xe(this.gl, () => this.gl.finish());
    }
    getQueryTimerExtension() {
      return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = Ul(this.gl, j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
    }
    getQueryTimerExtensionWebGL2() {
      return this.getQueryTimerExtension();
    }
    getQueryTimerExtensionWebGL1() {
      return this.getQueryTimerExtension();
    }
    beginQuery() {
      if (j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
        const s = this.gl, r = this.getQueryTimerExtensionWebGL2(), o = s.createQuery();
        return s.beginQuery(r.TIME_ELAPSED_EXT, o), o;
      }
      const e = this.getQueryTimerExtensionWebGL1(), n = e.createQueryEXT();
      return e.beginQueryEXT(e.TIME_ELAPSED_EXT, n), n;
    }
    endQuery() {
      if (j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
        const n = this.gl, s = this.getQueryTimerExtensionWebGL2();
        n.endQuery(s.TIME_ELAPSED_EXT);
        return;
      }
      const e = this.getQueryTimerExtensionWebGL1();
      e.endQueryEXT(e.TIME_ELAPSED_EXT);
    }
    async waitForQueryAndGetTime(e) {
      return await Fg(() => this.disposed || this.isQueryAvailable(e, j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(e, j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
    }
    getQueryTime(e, n) {
      if (n === 0) return null;
      if (n === 2) {
        const s = this.gl;
        return s.getQueryParameter(e, s.QUERY_RESULT) / 1e6;
      } else {
        const s = this.getQueryTimerExtensionWebGL1();
        return s.getQueryObjectEXT(e, s.QUERY_RESULT_EXT) / 1e6;
      }
    }
    isQueryAvailable(e, n) {
      if (n === 0) return true;
      if (n === 2) {
        const s = this.gl, r = this.getQueryTimerExtensionWebGL2(), o = s.getQueryParameter(e, s.QUERY_RESULT_AVAILABLE);
        return this.disjoint == null && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint;
      } else {
        const s = this.getQueryTimerExtensionWebGL1(), r = s.getQueryObjectEXT(e, s.QUERY_RESULT_AVAILABLE_EXT);
        return this.disjoint == null && (this.disjoint = this.gl.getParameter(s.GPU_DISJOINT_EXT)), r && !this.disjoint;
      }
    }
    pollFence(e) {
      return new Promise((n) => {
        this.addItemToPoll(() => e.isFencePassed(), () => n());
      });
    }
    pollItems() {
      const e = YJ(this.itemsToPoll.map((n) => n.isDoneFn));
      for (let n = 0; n <= e; ++n) {
        const { resolveFn: s } = this.itemsToPoll[n];
        s();
      }
      this.itemsToPoll = this.itemsToPoll.slice(e + 1);
    }
    addItemToPoll(e, n) {
      if (this.itemsToPoll.push({
        isDoneFn: e,
        resolveFn: n
      }), this.itemsToPoll.length > 1) return;
      let s;
      "setTimeoutCustom" in j().platform && (s = j().platform.setTimeoutCustom.bind(j().platform)), Fg(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, s);
    }
    bindTextureToFrameBuffer(e) {
      this.throwIfDisposed(), id(this.gl, e, this.framebuffer), this.debug && Gl(this.gl);
    }
    unbindTextureToFrameBuffer() {
      this.outputTexture != null ? (id(this.gl, this.outputTexture, this.framebuffer), this.debug && Gl(this.gl)) : Iy(this.gl, this.framebuffer);
    }
    downloadMatrixDriver(e, n) {
      this.bindTextureToFrameBuffer(e);
      const s = n();
      return this.unbindTextureToFrameBuffer(), s;
    }
    setOutputMatrixTextureDriver(e, n, s) {
      this.throwIfDisposed();
      const r = this.gl;
      id(r, e, this.framebuffer), this.debug && Gl(r), this.outputTexture = e, xe(r, () => r.viewport(0, 0, n, s)), xe(r, () => r.scissor(0, 0, n, s));
    }
    setOutputMatrixWriteRegionDriver(e, n, s, r) {
      this.throwIfDisposed(), xe(this.gl, () => this.gl.scissor(e, n, s, r));
    }
    throwIfDisposed() {
      if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
    }
    throwIfNoProgram() {
      if (this.program == null) throw new Error("No GPU program is currently set.");
    }
  }
  function YJ(t) {
    let e = 0;
    for (; e < t.length && t[e](); ++e) ;
    return e - 1;
  }
  const { addImpl: ZJ, bincountImpl: K2, bincountReduceImpl: JJ, bitwiseAndImpl: QJ, castImpl: e9, ceilImpl: t9, concatImpl: n9, equalImpl: s9, expImpl: r9, expm1Impl: o9, floorImpl: i9, gatherNdImpl: a9, gatherV2Impl: l9, greaterImpl: c9, greaterEqualImpl: u9, lessImpl: h9, lessEqualImpl: d9, linSpaceImpl: p9, logImpl: f9, maxImpl: m9, maximumImpl: g9, minimumImpl: y9, multiplyImpl: b9, negImpl: x9, notEqualImpl: w9, prodImpl: v9, raggedGatherImpl: S9, raggedRangeImpl: $9, raggedTensorToTensorImpl: C9, rangeImpl: I9, rsqrtImpl: N9, scatterImpl: k9, sigmoidImpl: T9, simpleAbsImpl: X2, sliceImpl: E9, sparseFillEmptyRowsImpl: R9, sparseReshapeImpl: A9, sparseSegmentReductionImpl: Y2, sqrtImpl: _9, staticRegexReplaceImpl: D9, stridedSliceImpl: O9, stringNGramsImpl: F9, stringSplitImpl: L9, stringToHashBucketFastImpl: P9, subImpl: z9, tileImpl: M9, topKImpl: B9, transposeImpl: Q0, uniqueImpl: V9 } = zE;
  function Z2(t, e) {
    return [
      "x",
      "y",
      "z",
      "w",
      "u",
      "v"
    ].slice(0, e).map((n) => `${t}.${n}`);
  }
  function mn(t, e) {
    return e === 1 ? [
      t
    ] : Z2(t, e);
  }
  function W9(t, e) {
    if (t === 1) return "rc";
    let n = "";
    for (let s = 0; s < t; s++) n += e[s], s < t - 1 && (n += ",");
    return n;
  }
  class U9 {
    constructor(e) {
      if (this.variableNames = [
        "A"
      ], this.packedInputs = false, this.packedOutput = true, this.outputShape = e, this.rank = e.length, this.enableShapeUniforms = cn(this.outputShape.length), this.rank === 0) this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
      else {
        const n = mn("rc", this.rank), s = rt(this.rank), r = this.getOutOfBoundsCondition(n), o = this.getSetup(n), i = this.getOutput(n);
        this.userCode = `
        void main() {
          ${s} rc = getOutputCoords();

          if(${r}) {
            setOutput(vec4(0));
          } else {
            ${o}

            setOutput(vec4(${i}));
          }
        }
      `;
      }
    }
    getSourceCoordsArr(e) {
      const n = [];
      for (let s = 0; s <= 1; s++) for (let r = 0; r <= 1; r++) {
        let o = `${s === 0 ? "r" : "rp1"}, ${r === 0 ? "c" : "cp1"}`;
        for (let i = 2; i < this.rank; i++) o = `${e[e.length - 1 - i]},` + o;
        n.push(o);
      }
      return n;
    }
    getOutOfBoundsCondition(e) {
      if (this.rank === 1) return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
      let n = "";
      for (let s = this.rank - 2; s < this.rank; s++) n += `${e[s]} >= ${this.enableShapeUniforms ? `outShape[${s}]` : this.outputShape[s]}`, s < this.rank - 1 && (n += "||");
      return n;
    }
    getSetup(e) {
      if (this.rank === 1) return "";
      const n = e.slice(-2), s = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], r = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
      return `
      int r = ${n[0]};
      int c = ${n[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${s};
      bool rEdge = rp1 >= ${r};
    `;
    }
    getOutput(e) {
      const n = this.getSourceCoordsArr(e);
      return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${n[0]}),
            cEdge ? 0. : getA(${n[1]}),
            rEdge ? 0. : getA(${n[2]}),
            rEdge || cEdge ? 0. : getA(${n[3]})`;
    }
  }
  class J2 {
    constructor(e, n) {
      this.variableNames = [
        "A"
      ], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [
        {
          name: "inputShape",
          type: "ivec3"
        }
      ], this.outputShape = e, this.enableShapeUniforms = cn(this.outputShape.length);
      let s = "";
      for (let r = 0; r < 4; r++) {
        let o = "thisRC = rc;";
        r % 2 === 1 && (o += "thisRC.z += 1;"), r > 1 && (o += "thisRC.y += 1;"), s += `
        ${o}
        ${r > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${r}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${r > 0 ? "}" : ""}
      `;
      }
      this.userCode = `
      ${G9(n, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? j0() : H0(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : e[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : e[2]};

        ${s}

        setOutput(result);
      }
    `;
    }
  }
  function G9(t, e) {
    return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e ? sJ([
      "r",
      "c",
      "d"
    ], "inputShape") : ki([
      "r",
      "c",
      "d"
    ], t)}
      return ivec3(r, c, d);
    }
  `;
  }
  class H9 {
    constructor(e) {
      this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.usedTextures = {}, this.logEnabled = false;
    }
    acquireTexture(e, n, s) {
      const r = kS(n, s), o = TS(e, r, s);
      o in this.freeTextures || (this.freeTextures[o] = []), o in this.usedTextures || (this.usedTextures[o] = []);
      const i = NS(e, r, this.gpgpu.gl, this.gpgpu.textureConfig, s);
      if (this.freeTextures[o].length > 0) {
        this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= i, this.log();
        const l = this.freeTextures[o].pop();
        return this.usedTextures[o].push(l), l;
      }
      let a;
      return r === Qt.PACKED_2X2_FLOAT32 ? a = this.gpgpu.createPackedMatrixTexture(e[0], e[1]) : r === Qt.PACKED_2X2_FLOAT16 ? a = this.gpgpu.createFloat16PackedMatrixTexture(e[0], e[1]) : r === Qt.UNPACKED_FLOAT32 ? a = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]) : r === Qt.UNPACKED_FLOAT16 ? a = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]) : r === Qt.PACKED_4X1_UNSIGNED_BYTE && (a = this.gpgpu.createUnsignedBytesMatrixTexture(e[0], e[1])), this.usedTextures[o].push(a), this.numUsedTextures++, this._numBytesAllocated += i, this.log(), a;
    }
    releaseTexture(e, n, s, r) {
      if (this.freeTextures == null) return;
      const o = kS(s, r), i = TS(n, o, r);
      i in this.freeTextures || (this.freeTextures[i] = []);
      const a = NS(n, o, this.gpgpu.gl, this.gpgpu.textureConfig, r), l = j().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");
      l !== -1 && this._numBytesAllocated > l ? (this.gpgpu.deleteMatrixTexture(e.texture), this._numBytesAllocated -= a) : (this.freeTextures[i].push(e), this.numFreeTextures++, this._numBytesFree += a), this.numUsedTextures--;
      const c = this.usedTextures[i], u = c && c.indexOf(e);
      if (u == null || u < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");
      c[u] = c[c.length - 1], c.pop(), this.log();
    }
    log() {
      if (!this.logEnabled) return;
      const e = this.numFreeTextures + this.numUsedTextures;
      console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${e})`);
      const n = this._numBytesFree / this._numBytesAllocated;
      console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * n)}%)`);
    }
    get numBytesAllocated() {
      return this._numBytesAllocated;
    }
    get numBytesFree() {
      return this._numBytesFree;
    }
    getNumUsedTextures() {
      return this.numUsedTextures;
    }
    getNumFreeTextures() {
      return this.numFreeTextures;
    }
    dispose() {
      if (this.freeTextures != null) {
        for (const e in this.freeTextures) this.freeTextures[e].forEach((n) => {
          this.gpgpu.deleteMatrixTexture(n.texture);
        });
        for (const e in this.usedTextures) this.usedTextures[e].forEach((n) => {
          this.gpgpu.deleteMatrixTexture(n.texture);
        });
        this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
      }
    }
  }
  function j9(t, e) {
    const n = t;
    if (e === n.R32F) return 4;
    if (e === n.R16F) return 2;
    if (e === n.RGBA32F) return 16;
    if (e === t.RGBA) return 16;
    if (e === n.RGBA16F) return 8;
    if (e === n.RGBA8) return 4;
    throw new Error(`Unknown internal format ${e}`);
  }
  function NS(t, e, n, s, r) {
    const o = q9(e, s);
    let i;
    if (r) {
      const [l, c] = wl(t[0], t[1]);
      i = l * c;
    } else {
      const [l, c] = xh(t[0], t[1]);
      i = l * c;
    }
    const a = j9(n, o);
    return i * a;
  }
  function q9(t, e) {
    switch (t) {
      case Qt.PACKED_2X2_FLOAT32:
        return Z0(e);
      case Qt.PACKED_2X2_FLOAT16:
        return J0(e);
      case Qt.UNPACKED_FLOAT32:
        return K0(e);
      case Qt.UNPACKED_FLOAT16:
        return X0(e);
      case Qt.PACKED_4X1_UNSIGNED_BYTE:
        return Y0(e);
      default:
        throw new Error(`Unknown physical texture type ${t}`);
    }
  }
  function K9(t) {
    return j().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? t ? Qt.PACKED_2X2_FLOAT32 : Qt.UNPACKED_FLOAT32 : t ? Qt.PACKED_2X2_FLOAT16 : Qt.UNPACKED_FLOAT16;
  }
  function kS(t, e) {
    if (t === es.UPLOAD) return Qt.PACKED_2X2_FLOAT32;
    if (t === es.RENDER || t == null) return K9(e);
    if (t === es.DOWNLOAD || t === es.PIXELS) return Qt.PACKED_4X1_UNSIGNED_BYTE;
    throw new Error(`Unknown logical texture type ${t}`);
  }
  function TS(t, e, n) {
    return `${t[0]}_${t[1]}_${e}_${n}`;
  }
  class Ys {
    constructor(e, n) {
      this.variableNames = [
        "A"
      ], this.outputShape = e, this.enableShapeUniforms = cn(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${n}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
    }
  }
  const ws = "if (isnan(x)) return x;", X9 = "return x;", ES = "return abs(x);", Y9 = "return (x >= 0.0) ? x : (exp(x) - 1.0);", Z9 = ws + `
  return (x < 0.0) ? 0.0 : x;
`, J9 = ws + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, jr = "return x;", Q9 = "return 1.0 / (1.0 + exp(-1.0 * x));";
  const eQ = "return x;", tQ = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, nQ = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, sQ = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, rQ = "return 1.0 / (1.0 + exp(-1.0 * x));";
  class Yr {
    constructor(e, n) {
      this.variableNames = [
        "A"
      ], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.enableShapeUniforms = cn(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${n}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
    }
  }
  class oQ {
    constructor(e) {
      this.variableNames = [
        "A"
      ], this.packedInputs = true, this.packedOutput = false, this.outputShape = e, this.enableShapeUniforms = cn(this.outputShape.length);
      const n = e.length, s = mn("rc", n), r = rt(n), o = W9(n, s), i = s.slice(-2), a = n <= 1 ? "rc" : `vec2(${i.join(",")})`;
      this.userCode = `
      void main() {
        ${r} rc = getOutputCoords();
        vec4 packedInput = getA(${o});

        setOutput(getChannel(packedInput, ${a}));
      }
    `;
    }
  }
  const iQ = em, aQ = 1e-7, lQ = 1e-4, Wh = {};
  function cQ(t) {
    return t in Wh || (Wh[t] = {}), Wh[t];
  }
  const uQ = j().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"), hQ = 600;
  function dQ() {
    return j().global.screen == null ? 1024 : j().global.screen.height * j().global.screen.width * window.devicePixelRatio * hQ / 1024 / 1024;
  }
  class vh extends gp {
    nextDataId() {
      return vh.nextDataId++;
    }
    constructor(e) {
      if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = false, this.pendingDeletes = 0, this.disposed = false, !j().getBool("HAS_WEBGL")) throw new Error("WebGL is not supported on this device");
      let n;
      if (e != null) {
        if (e instanceof cd) n = e;
        else {
          const s = Ls(j().getNumber("WEBGL_VERSION"), e);
          n = new cd(s);
        }
        this.binaryCache = {}, this.gpgpuCreatedLocally = false;
      } else {
        const s = Ls(j().getNumber("WEBGL_VERSION"));
        n = new cd(s), this.binaryCache = cQ(j().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = true;
      }
      this.gpgpu = n, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new H9(this.gpgpu), this.numMBBeforeWarning = dQ(), this.texData = new Zy(this, $s());
    }
    numDataIds() {
      return this.texData.numDataIds() - this.pendingDeletes;
    }
    writeTexture(e, n, s, r, o, i) {
      const a = this.makeTensorInfo(n, s), l = this.texData.get(a.dataId);
      l.isPacked = false, l.texture = {
        texture: e,
        texShape: [
          r,
          o
        ]
      }, l.texShape = [
        r,
        o
      ];
      const c = Hl(n), u = new IS(c, false, i), h = this.runWebGLProgram(u, [
        a
      ], s, [
        [
          r,
          o
        ]
      ]);
      return h.shape = n, l.texture = null, this.disposeIntermediateTensorInfo(a), h.dataId;
    }
    write(e, n, s) {
      if ((j().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || j().getBool("DEBUG")) && this.checkNumericalProblems(e), s === "complex64" && e != null) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
      const r = {
        id: this.nextDataId()
      };
      return this.texData.set(r, {
        shape: n,
        dtype: s,
        values: e,
        usage: es.UPLOAD,
        refCount: 1
      }), r;
    }
    refCount(e) {
      return this.texData.has(e) ? this.texData.get(e).refCount : 0;
    }
    incRef(e) {
      const n = this.texData.get(e);
      n.refCount++;
    }
    decRef(e) {
      if (this.texData.has(e)) {
        const n = this.texData.get(e);
        n.refCount--;
      }
    }
    move(e, n, s, r, o) {
      if (j().getBool("DEBUG") && this.checkNumericalProblems(n), r === "complex64") throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
      this.texData.set(e, {
        shape: s,
        dtype: r,
        values: n,
        usage: es.UPLOAD,
        refCount: o
      });
    }
    disposeIntermediateTensorInfo(e) {
      this.disposeData(e.dataId);
    }
    readSync(e) {
      const n = this.texData.get(e), { values: s, dtype: r, complexTensorInfos: o, slice: i, shape: a, isPacked: l } = n;
      if (i != null) {
        let d;
        l ? d = new Yr(a, jr) : d = new Ys(a, jr);
        const p = this.runWebGLProgram(d, [
          {
            dataId: e,
            shape: a,
            dtype: r
          }
        ], r), f = this.readSync(p.dataId);
        return this.disposeIntermediateTensorInfo(p), f;
      }
      if (s != null) return this.convertAndCacheOnCPU(e);
      if (r === "string") return s;
      const c = this.activeTimers != null;
      let u;
      c && (u = Xt());
      let h;
      if (r === "complex64") {
        const d = this.readSync(o.real.dataId), p = this.readSync(o.imag.dataId);
        h = Tr(d, p);
      } else h = this.getValuesFromTexture(e);
      return c && (this.downloadWaitMs += Xt() - u), this.convertAndCacheOnCPU(e, h);
    }
    async read(e) {
      if (this.pendingRead.has(e)) {
        const f = this.pendingRead.get(e);
        return new Promise((m) => f.push(m));
      }
      const n = this.texData.get(e), { values: s, shape: r, slice: o, dtype: i, complexTensorInfos: a, isPacked: l } = n;
      if (o != null) {
        let f;
        l ? f = new Yr(r, jr) : f = new Ys(r, jr);
        const m = this.runWebGLProgram(f, [
          {
            dataId: e,
            shape: r,
            dtype: i
          }
        ], i), g = this.read(m.dataId);
        return this.disposeIntermediateTensorInfo(m), g;
      }
      if (s != null) return this.convertAndCacheOnCPU(e);
      if (j().getBool("DEBUG") && !j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && j().getNumber("WEBGL_VERSION") === 2) throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
      let c = null, u;
      if (i !== "complex64" && j().get("WEBGL_BUFFER_SUPPORTED")) {
        u = this.decode(e);
        const f = this.texData.get(u.dataId);
        c = this.gpgpu.createBufferFromTexture(f.texture.texture, ...Bh(r));
      }
      this.pendingRead.set(e, []), i !== "complex64" && await this.gpgpu.createAndWaitForFence();
      let h;
      if (i === "complex64") {
        const f = await Promise.all([
          this.read(a.real.dataId),
          this.read(a.imag.dataId)
        ]), m = f[0], g = f[1];
        h = Tr(m, g);
      } else if (c == null) h = this.getValuesFromTexture(e);
      else {
        const f = X(r);
        h = this.gpgpu.downloadFloat32MatrixFromBuffer(c, f);
      }
      if (u != null && this.disposeIntermediateTensorInfo(u), c != null) {
        const f = this.gpgpu.gl;
        xe(f, () => f.deleteBuffer(c));
      }
      const d = this.convertAndCacheOnCPU(e, h), p = this.pendingRead.get(e);
      return this.pendingRead.delete(e), p.forEach((f) => f(d)), this.pendingDisposal.has(e) && (this.pendingDisposal.delete(e), this.disposeData(e) && $s().removeDataId(e, this), this.pendingDeletes--), d;
    }
    readToGPU(e, n = {}) {
      const s = this.texData.get(e), { values: r, shape: o, slice: i, dtype: a, isPacked: l, texture: c } = s;
      if (a === "complex64") throw new Error("Does not support reading texture for complex64 dtype.");
      if (i != null) {
        let p;
        l ? p = new Yr(o, jr) : p = new Ys(o, jr);
        const f = this.runWebGLProgram(p, [
          {
            dataId: e,
            shape: o,
            dtype: a
          }
        ], a), m = this.readToGPU(f, n);
        return this.disposeIntermediateTensorInfo(f), m;
      }
      if (c == null) throw r != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
      const u = this.decode(e, n.customTexShape), h = $s().makeTensorFromTensorInfo(u), d = this.texData.get(u.dataId);
      return Object.assign({
        tensorRef: h
      }, d.texture);
    }
    bufferSync(e) {
      const n = this.readSync(e.dataId);
      if (e.dtype === "string") try {
        const s = n.map((r) => Cr(r));
        return Me(e.shape, e.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
      return Me(e.shape, e.dtype, n);
    }
    checkNumericalProblems(e) {
      if (e != null) for (let n = 0; n < e.length; n++) {
        const s = e[n];
        if (!s2(s)) throw j().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${s} cannot be represented on this device.`);
      }
    }
    getValuesFromTexture(e) {
      const { shape: n, dtype: s, isPacked: r } = this.texData.get(e), o = X(n);
      if (j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
        const d = this.decode(e), p = this.texData.get(d.dataId), f = this.gpgpu.downloadMatrixFromPackedTexture(p.texture.texture, ...Bh(n)).subarray(0, o);
        return this.disposeIntermediateTensorInfo(d), f;
      }
      const i = j().getBool("WEBGL_PACK") && r === true, a = i ? Hl(n) : n, l = i ? new jJ(a) : new HJ(a), c = this.runWebGLProgram(l, [
        {
          shape: a,
          dtype: s,
          dataId: e
        }
      ], "float32"), u = this.texData.get(c.dataId), h = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture, u.texShape[0], u.texShape[1]).subarray(0, o);
      return this.disposeIntermediateTensorInfo(c), h;
    }
    timerAvailable() {
      return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
    }
    time(e) {
      const n = this.activeTimers, s = [];
      let r = false;
      this.programTimersStack == null ? (this.programTimersStack = s, r = true) : this.activeTimers.push(s), this.activeTimers = s, e();
      const o = or(this.activeTimers.map((l) => l.query)).filter((l) => l != null), i = or(this.activeTimers.map((l) => l.name)).filter((l) => l != null);
      this.activeTimers = n, r && (this.programTimersStack = null);
      const a = {
        uploadWaitMs: this.uploadWaitMs,
        downloadWaitMs: this.downloadWaitMs,
        kernelMs: null,
        wallMs: null
      };
      return (async () => {
        if (j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
          const l = await Promise.all(o);
          a.kernelMs = CC(l), a.getExtraProfileInfo = () => l.map((c, u) => ({
            name: i[u],
            ms: c
          })).map((c) => `${c.name}: ${c.ms}`).join(", ");
        } else a.kernelMs = {
          error: "WebGL query timers are not supported in this environment."
        };
        return this.uploadWaitMs = 0, this.downloadWaitMs = 0, a;
      })();
    }
    memory() {
      return {
        unreliable: false,
        numBytesInGPU: this.numBytesInGPU,
        numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
        numBytesInGPUFree: this.textureManager.numBytesFree
      };
    }
    startTimer() {
      return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : {
        startMs: Xt(),
        endMs: null
      };
    }
    endTimer(e) {
      return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), e) : (e.endMs = Xt(), e);
    }
    async getQueryTime(e) {
      if (j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) return this.gpgpu.waitForQueryAndGetTime(e);
      const n = e;
      return n.endMs - n.startMs;
    }
    disposeData(e, n = false) {
      if (this.pendingDisposal.has(e)) return false;
      if (!this.texData.has(e)) return true;
      if (n ? this.texData.get(e).refCount = 0 : this.texData.get(e).refCount--, !n && this.texData.get(e).refCount > 0) return false;
      if (this.pendingRead.has(e)) return this.pendingDisposal.add(e), this.pendingDeletes++, false;
      this.releaseGPUData(e);
      const { complexTensorInfos: s } = this.texData.get(e);
      return s != null && (this.disposeData(s.real.dataId, n), this.disposeData(s.imag.dataId, n)), this.texData.delete(e), true;
    }
    releaseGPUData(e) {
      const { texture: n, dtype: s, texShape: r, usage: o, isPacked: i, slice: a } = this.texData.get(e), l = a && a.origDataId || e, c = this.dataRefCount.get(l);
      c > 1 ? this.dataRefCount.set(l, c - 1) : (this.dataRefCount.delete(l), n != null && (this.numBytesInGPU -= this.computeBytes(r, s), this.textureManager.releaseTexture(n, r, o, i)));
      const u = this.texData.get(e);
      u.texture = null, u.texShape = null, u.isPacked = false, u.slice = null;
    }
    getTexture(e) {
      return this.uploadToGPU(e), this.texData.get(e).texture.texture;
    }
    getDataInfo(e) {
      return this.texData.get(e);
    }
    shouldExecuteOnCPU(e, n = uQ) {
      return j().getBool("WEBGL_CPU_FORWARD") && e.every((s) => this.texData.get(s.dataId).texture == null && X(s.shape) < n);
    }
    getGPGPUContext() {
      return this.gpgpu;
    }
    where(e) {
      Yn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
      const n = e.dataSync();
      return iQ(e.shape, n);
    }
    packedUnaryOp(e, n, s) {
      const r = new Yr(e.shape, n), o = this.compileAndRun(r, [
        e
      ], s);
      return $s().makeTensorFromTensorInfo(o);
    }
    abs(e) {
      if (this.shouldExecuteOnCPU([
        e
      ]) && e.dtype !== "complex64") {
        const r = X2(this.texData.get(e.dataId).values);
        return this.makeOutput(e.shape, e.dtype, r);
      }
      if (j().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(e, ES, e.dtype);
      const n = new Ys(e.shape, ES), s = this.compileAndRun(n, [
        e
      ]);
      return $s().makeTensorFromTensorInfo(s);
    }
    makeTensorInfo(e, n, s) {
      let r;
      if (n === "string" && s != null && s.length > 0 && Xs(s[0])) {
        const o = s.map((i) => Qs(i));
        r = this.write(o, e, n);
      } else r = this.write(s, e, n);
      return this.texData.get(r).usage = null, {
        dataId: r,
        shape: e,
        dtype: n
      };
    }
    makeOutput(e, n, s) {
      return $s().makeTensorFromTensorInfo(this.makeTensorInfo(e, n, s), this);
    }
    unpackTensor(e) {
      const n = new oQ(e.shape);
      return this.runWebGLProgram(n, [
        e
      ], e.dtype);
    }
    packTensor(e) {
      const n = new U9(e.shape);
      return this.runWebGLProgram(n, [
        e
      ], e.dtype, null, true);
    }
    packedReshape(e, n) {
      const s = [
        pi(e.shape),
        ...fi(e.shape)
      ], r = {
        dtype: e.dtype,
        shape: s,
        dataId: e.dataId
      }, o = [
        pi(n),
        ...fi(n)
      ], i = new J2(o, s), a = true, l = [
        s
      ], c = this.runWebGLProgram(i, [
        r
      ], e.dtype, l, a);
      return {
        dataId: c.dataId,
        shape: n,
        dtype: c.dtype
      };
    }
    decode(e, n) {
      const s = this.texData.get(e), { isPacked: r, shape: o, dtype: i } = s;
      if (n != null) {
        const d = X(o), p = n[0] * n[1] * 4;
        C(d <= p, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
      }
      const a = Hl(o);
      let l;
      r ? l = new GJ(a) : l = new UJ(a);
      const c = true, u = [
        n ?? Bh(a)
      ], h = this.runWebGLProgram(l, [
        {
          shape: a,
          dtype: i,
          dataId: e
        }
      ], i, u, c, n);
      return {
        dtype: i,
        shape: o,
        dataId: h.dataId
      };
    }
    runWebGLProgram(e, n, s, r, o = false, i) {
      const a = this.makeTensorInfo(e.outputShape, s), l = this.texData.get(a.dataId);
      if (e.packedOutput && (l.isPacked = true), e.outPackingScheme === kc.DENSE) {
        const y = i ?? Bh(e.outputShape);
        l.texShape = y.map((b) => b * 2);
      }
      if (e.outTexUsage != null && (l.usage = e.outTexUsage), X(a.shape) === 0) return l.values = Ut(a.dtype, 0), a;
      const c = [], u = n.map((y) => {
        if (y.dtype === "complex64") throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
        let b = this.texData.get(y.dataId);
        if (b.texture == null) {
          if (!e.packedInputs && X(y.shape) <= j().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")) return {
            shape: y.shape,
            texData: null,
            isUniform: true,
            uniformValues: b.values
          };
          e.packedInputs && (b.isPacked = true, b.shape = y.shape);
        }
        if (this.uploadToGPU(y.dataId), !!b.isPacked != !!e.packedInputs) y = b.isPacked ? this.unpackTensor(y) : this.packTensor(y), c.push(y), b = this.texData.get(y.dataId);
        else if (b.isPacked && !Tc(b.shape, y.shape)) {
          const w = y, x = y.shape;
          y.shape = b.shape, y = this.packedReshape(y, x), c.push(y), b = this.texData.get(y.dataId), w.shape = x;
        }
        return {
          shape: y.shape,
          texData: b,
          isUniform: false
        };
      });
      this.uploadToGPU(a.dataId);
      const h = {
        shape: a.shape,
        texData: l,
        isUniform: false
      }, d = WJ(e, u, h), p = this.getAndSaveBinary(d, () => BJ(this.gpgpu, e, u, h)), f = this.activeTimers != null;
      let m;
      f && (m = this.startTimer()), j().get("ENGINE_COMPILE_ONLY") || VJ(this.gpgpu, p, u, h, r), c.forEach((y) => this.disposeIntermediateTensorInfo(y)), f && (m = this.endTimer(m), this.activeTimers.push({
        name: e.constructor.name,
        query: this.getQueryTime(m)
      }));
      const g = j().getNumber("WEBGL_FLUSH_THRESHOLD");
      if (g > 0) {
        const y = Xt();
        y - this.lastGlFlushTime > g && (this.gpgpu.gl.flush(), this.lastGlFlushTime = y);
      }
      if (!j().getBool("WEBGL_LAZILY_UNPACK") && l.isPacked && o === false) {
        const y = this.unpackTensor(a);
        return this.disposeIntermediateTensorInfo(a), y;
      }
      return a;
    }
    compileAndRun(e, n, s, r, o = false) {
      return s = s || n[0].dtype, this.runWebGLProgram(e, n, s, r, o);
    }
    getAndSaveBinary(e, n) {
      return e in this.binaryCache || (this.binaryCache[e] = n()), this.binaryCache[e];
    }
    getTextureManager() {
      return this.textureManager;
    }
    dispose() {
      this.disposed || (j().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((n) => {
        this.gpgpu.deleteProgram(this.binaryCache[n].webGLProgram), delete this.binaryCache[n];
      }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement < "u" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = true);
    }
    floatPrecision() {
      return this.floatPrecisionValue == null && (this.floatPrecisionValue = q(() => {
        if (!j().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
          const e = j().getBool("DEBUG");
          j().set("DEBUG", false);
          const n = this.abs(Re(1e-8)).dataSync()[0];
          if (j().set("DEBUG", e), n > 0) return 32;
        }
        return 16;
      })), this.floatPrecisionValue;
    }
    epsilon() {
      return this.floatPrecision() === 32 ? aQ : lQ;
    }
    uploadToGPU(e) {
      const n = this.texData.get(e), { shape: s, dtype: r, values: o, texture: i, usage: a, isPacked: l } = n;
      if (i != null) return;
      const c = this.activeTimers != null;
      let u;
      c && (u = Xt());
      let h = n.texShape;
      if (h == null && (h = w2(s, l), n.texShape = h), o != null) {
        const d = Hl(s);
        let p, f = h[1], m = h[0];
        const g = o instanceof Uint8Array || o instanceof Uint8ClampedArray;
        (l || !g) && ([f, m] = wl(h[0], h[1])), l ? p = new KJ(d, g) : p = new IS(d, g);
        const y = g ? [
          m,
          f
        ] : h, b = this.makeTensorInfo(y, r), w = this.texData.get(b.dataId);
        g ? w.usage = es.PIXELS : w.usage = es.UPLOAD, w.texShape = y, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId), f, m, o);
        const x = [
          [
            m,
            f
          ]
        ], I = this.runWebGLProgram(p, [
          b
        ], r, x, true), E = this.texData.get(I.dataId);
        n.texShape = E.texShape, n.isPacked = E.isPacked, n.usage = E.usage, j().get("ENGINE_COMPILE_ONLY") ? this.disposeData(I.dataId) : (n.texture = E.texture, n.values = null, this.texData.delete(I.dataId)), this.disposeIntermediateTensorInfo(b), c && (this.uploadWaitMs += Xt() - u);
      } else {
        const d = this.acquireTexture(h, a, r, l);
        n.texture = d;
      }
    }
    convertAndCacheOnCPU(e, n) {
      const s = this.texData.get(e), { dtype: r } = s;
      return n != null && (s.values = pQ(n, r)), s.values;
    }
    acquireTexture(e, n, s, r) {
      if (this.numBytesInGPU += this.computeBytes(e, s), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
        const o = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
        this.warnedAboutMemory = true, console.warn(`High memory usage in GPU: ${o} MB, most likely due to a memory leak`);
      }
      return this.textureManager.acquireTexture(e, n, r);
    }
    computeBytes(e, n) {
      return e[0] * e[1] * dc(n);
    }
    checkCompileCompletion() {
      for (const [, e] of Object.entries(this.binaryCache)) this.checkCompletion_(e);
    }
    async checkCompileCompletionAsync() {
      const e = [];
      if (this.gpgpu.parallelCompilationExtension) {
        for (const [, n] of Object.entries(this.binaryCache)) e.push(this.checkCompletionAsync_(n));
        return Promise.all(e);
      } else {
        for (const [, n] of Object.entries(this.binaryCache)) {
          const s = new Promise((r) => {
            try {
              this.checkCompletion_(n), r(true);
            } catch (o) {
              throw o;
            }
          });
          e.push(s);
        }
        return Promise.all(e);
      }
    }
    async checkCompletionAsync_(e) {
      return this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(e) : (await Dx(), this.checkCompletionAsync_(e));
    }
    checkCompletion_(e) {
      if (this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)), this.gpgpu.gl.getShaderParameter(e.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false ? (G0(e.source, this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
      return true;
    }
    getUniformLocations() {
      for (const e of Object.values(this.binaryCache)) {
        this.gpgpu.buildVao(e.webGLProgram);
        const { variablesLocations: n, customUniformLocations: s, infLoc: r, nanLoc: o, outShapeLocation: i, outShapeStridesLocation: a, outTexShapeLocation: l } = A2(this.gpgpu, e.program, e.webGLProgram);
        e.variablesLocations = n, e.customUniformLocations = s, e.infLoc = r, e.nanLoc = o, e.outShapeLocation = i, e.outShapeStridesLocation = a, e.outTexShapeLocation = l;
      }
    }
    createTensorFromGPUData(e, n, s) {
      e.channels = e.channels || "RGBA";
      const { texture: r, height: o, width: i, channels: a } = e, l = $s().backend;
      if (!l.gpgpu.gl.isTexture(r)) throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");
      const c = l.writeTexture(r, n, s, o, i, a);
      return $s().makeTensorFromDataId(c, n, s, l);
    }
  }
  vh.nextDataId = 0;
  function pQ(t, e) {
    if (e === "float32" || e === "complex64") return t;
    if (e === "int32" || e === "bool") {
      const n = e === "int32" ? new Int32Array(t.length) : new Uint8Array(t.length);
      for (let s = 0; s < n.length; ++s) n[s] = Math.round(t[s]);
      return n;
    } else throw new Error(`Unknown dtype ${e}`);
  }
  const Q2 = "4.19.0";
  function eR() {
    j().set("WEBGL_FORCE_F16_TEXTURES", true);
  }
  ib() && lb("webgl", () => new vh(), 2);
  const fQ = {
    forceHalfFloat: eR
  };
  const e1 = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
  class mi {
    constructor(e, n, s) {
      this.variableNames = [
        "A",
        "B"
      ], this.outputShape = Fe(n, s), this.enableShapeUniforms = cn(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
    }
  }
  const Ei = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
  class Nl {
    constructor(e, n, s, r = false) {
      this.variableNames = [
        "A",
        "B"
      ], this.supportsBroadcasting = true, this.packedInputs = true, this.packedOutput = true, this.outputShape = Fe(n, s);
      const o = this.outputShape.length;
      this.enableShapeUniforms = cn(o);
      let i = "";
      if (r) if (o === 0 || X(this.outputShape) === 1) i = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (i = `
          ${rt(o)} coords = getOutputCoords();
        `, o === 1) this.enableShapeUniforms ? i += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : i += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        const l = mn("coords", o);
        this.enableShapeUniforms ? i += `
            bool nextRowOutOfBounds =
              (${l[o - 2]} + 1) >= outShape[${o} - 2];
            bool nextColOutOfBounds =
              (${l[o - 1]} + 1) >= outShape[${o} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : i += `
            bool nextRowOutOfBounds =
              (${l[o - 2]} + 1) >= ${this.outputShape[o - 2]};
            bool nextColOutOfBounds =
              (${l[o - 1]} + 1) >= ${this.outputShape[o - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
      this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `;
    }
  }
  function qn(t) {
    const { inputs: e, backend: n } = t, { x: s } = e;
    return n.incRef(s.dataId), {
      dataId: s.dataId,
      shape: s.shape,
      dtype: s.dtype
    };
  }
  const mQ = {
    kernelName: Aa,
    backendName: "webgl",
    kernelFunc: qn
  };
  function To(t) {
    const { inputs: e, backend: n } = t, { real: s, imag: r } = e, o = n.makeTensorInfo(s.shape, "complex64"), i = n.texData.get(o.dataId), a = qn({
      inputs: {
        x: s
      },
      backend: n
    }), l = qn({
      inputs: {
        x: r
      },
      backend: n
    });
    return i.complexTensorInfos = {
      real: a,
      imag: l
    }, o;
  }
  const gQ = {
    kernelName: Ip,
    backendName: "webgl",
    kernelFunc: To
  };
  const tR = "return (a < 0.) ? b * a : a;", nR = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
  function yQ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { alpha: o } = s, i = n.makeTensorInfo([], "float32", _r(o, "float32")), a = j().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Nl(nR, r.shape, i.shape) : new mi(tR, r.shape, i.shape), l = n.runWebGLProgram(a, [
      r,
      i
    ], "float32");
    return n.disposeIntermediateTensorInfo(i), l;
  }
  const bQ = {
    kernelName: ru,
    backendName: "webgl",
    kernelFunc: yQ
  };
  const sR = "return (a < 0.) ? b * a : a;", rR = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
  function xQ(t) {
    const { inputs: e, backend: n } = t, { x: s, alpha: r } = e, o = j().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Nl(rR, s.shape, r.shape) : new mi(sR, s.shape, r.shape);
    return n.runWebGLProgram(o, [
      s,
      r
    ], "float32");
  }
  const wQ = {
    kernelName: $u,
    backendName: "webgl",
    kernelFunc: xQ
  };
  const kl = "if (isnan(x)) return x;";
  function Ye({ opSnippet: t, packedOpSnippet: e, cpuKernelImpl: n, dtype: s }) {
    return ({ inputs: r, backend: o }) => {
      const { x: i } = r, a = o, l = s || i.dtype;
      if (a.shouldExecuteOnCPU([
        i
      ]) && n != null) {
        const h = a.texData.get(i.dataId), d = n(h.values, l);
        return a.makeTensorInfo(i.shape, l, d);
      }
      const c = j().getBool("WEBGL_PACK_UNARY_OPERATIONS") && e != null;
      let u;
      return c ? u = new Yr(i.shape, e) : u = new Ys(i.shape, t), a.runWebGLProgram(u, [
        i
      ], l);
    };
  }
  function an({ opSnippet: t, packedOpSnippet: e, checkOutOfBounds: n = false, supportsComplex: s = false, cpuKernelImpl: r, dtype: o }) {
    return ({ inputs: i, backend: a }) => {
      const { a: l, b: c } = i, u = a;
      if (s && l.dtype === "complex64") {
        const f = u.texData.get(l.dataId), m = u.texData.get(c.dataId), [g, y] = [
          [
            f.complexTensorInfos.real,
            m.complexTensorInfos.real
          ],
          [
            f.complexTensorInfos.imag,
            m.complexTensorInfos.imag
          ]
        ].map((w) => {
          const [x, S] = w, I = {
            dataId: x.dataId,
            dtype: x.dtype,
            shape: l.shape
          }, E = {
            dataId: S.dataId,
            dtype: S.dtype,
            shape: c.shape
          }, R = new mi(t, l.shape, c.shape);
          return u.runWebGLProgram(R, [
            I,
            E
          ], An(x.dtype, S.dtype));
        }), b = To({
          inputs: {
            real: g,
            imag: y
          },
          backend: u
        });
        return u.disposeIntermediateTensorInfo(g), u.disposeIntermediateTensorInfo(y), b;
      }
      const h = o || An(l.dtype, c.dtype);
      if ((l.dtype === "string" || c.dtype === "string" || u.shouldExecuteOnCPU([
        l,
        c
      ])) && r != null) {
        const f = u.texData.get(l.dataId).values, m = u.texData.get(c.dataId).values, g = l.dtype === "string" ? Er(f) : f, y = l.dtype === "string" ? Er(m) : m, [b, w] = r(l.shape, c.shape, g, y, h), x = u.makeTensorInfo(w, h), S = u.texData.get(x.dataId);
        return S.values = b, x;
      }
      const d = j().getBool("WEBGL_PACK_BINARY_OPERATIONS") && e != null;
      let p;
      return d ? p = new Nl(e, l.shape, c.shape, n) : p = new mi(t, l.shape, c.shape), u.runWebGLProgram(p, [
        l,
        c
      ], h);
    };
  }
  function Ec(t, e = false) {
    if (t === "linear") return e ? eQ : X9;
    if (t === "relu") return e ? nQ : Z9;
    if (t === "elu") return e ? tQ : Y9;
    if (t === "relu6") return e ? sQ : J9;
    if (t === "prelu") return e ? rR : sR;
    if (t === "leakyrelu") return e ? nR : tR;
    if (t === "sigmoid") return e ? rQ : Q9;
    throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`);
  }
  class oR {
    constructor(e, n, s, r = false, o = false, i = false, a = null, l = false, c = false) {
      this.variableNames = [
        "matrixA",
        "matrixB"
      ], this.packedInputs = true, this.packedOutput = true, this.outputShape = s, this.enableShapeUniforms = cn(this.outputShape.length);
      const u = r ? e[1] : e[2], h = Math.ceil(u / 2), d = r ? "i * 2, rc.y" : "rc.y, i * 2", p = o ? "rc.z, i * 2" : "i * 2, rc.z", f = r ? [
        "a.xxyy",
        "a.zzww"
      ] : [
        "a.xxzz",
        "a.yyww"
      ], m = o ? [
        "b.xzxz",
        "b.ywyw"
      ] : [
        "b.xyxy",
        "b.zwzw"
      ];
      let g = "", y = "";
      a && (l ? g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }` : c ? g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }` : g = `vec4 activation(vec4 x) {
          ${a}
        }`, y = "result = activation(result);");
      const b = i ? "result += getBiasAtOutCoords();" : "";
      i && this.variableNames.push("bias"), l && this.variableNames.push("preluActivationWeights"), c && this.variableNames.push("leakyreluAlpha");
      let w = "rc.x", x = "rc.x";
      e[0] < n[0] ? w = `imod(rc.x, ${e[0]})` : n[0] < e[0] && (x = `imod(rc.x, ${n[0]})`), this.userCode = `
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${h}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${w};
        int batchB = ${x};
        for (int i = 0; i < ${h}; i++) {
          vec4 a = getMatrixA(batchA, ${d});
          vec4 b = getMatrixB(batchB, ${p});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${m[0]});
          result += (${f[1]} * ${m[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${y}

        setOutput(result);
      }
    `;
    }
  }
  const RS = {
    REAL: "return areal * breal - aimag * bimag;",
    IMAG: "return areal * bimag + aimag * breal;"
  };
  class AS {
    constructor(e, n, s) {
      this.variableNames = [
        "AReal",
        "AImag",
        "BReal",
        "BImag"
      ], this.outputShape = Fe(n, s), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
    }
  }
  const _S = "return a * b;";
  function t1(t) {
    const { inputs: e, backend: n } = t, { a: s, b: r } = e, o = An(s.dtype, r.dtype);
    if (s.dtype === "complex64") {
      const a = n.texData.get(s.dataId), l = n.texData.get(r.dataId), c = new AS(RS.REAL, s.shape, r.shape), u = new AS(RS.IMAG, s.shape, r.shape), h = [
        {
          dataId: a.complexTensorInfos.real.dataId,
          dtype: a.complexTensorInfos.real.dtype,
          shape: s.shape
        },
        {
          dataId: a.complexTensorInfos.imag.dataId,
          dtype: a.complexTensorInfos.imag.dtype,
          shape: s.shape
        },
        {
          dataId: l.complexTensorInfos.real.dataId,
          dtype: l.complexTensorInfos.real.dtype,
          shape: r.shape
        },
        {
          dataId: l.complexTensorInfos.imag.dataId,
          dtype: l.complexTensorInfos.imag.dtype,
          shape: r.shape
        }
      ], d = n.runWebGLProgram(c, h, "float32"), p = n.runWebGLProgram(u, h, "float32"), f = To({
        inputs: {
          real: d,
          imag: p
        },
        backend: n
      });
      return n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(p), f;
    }
    if (n.shouldExecuteOnCPU([
      s,
      r
    ])) {
      const a = n.texData.get(s.dataId), l = n.texData.get(r.dataId), [c, u] = b9(s.shape, r.shape, a.values, l.values, o), h = n.makeTensorInfo(u, o), d = n.texData.get(h.dataId);
      return d.values = c, h;
    }
    let i;
    return j().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? i = new Nl(_S, s.shape, r.shape) : i = new mi(_S, s.shape, r.shape), n.runWebGLProgram(i, [
      s,
      r
    ], o);
  }
  const vQ = {
    kernelName: Ba,
    backendName: "webgl",
    kernelFunc: t1
  };
  function SQ(t, e, n) {
    const s = [
      pi(t.shape),
      ...fi(t.shape)
    ], r = {
      dtype: t.dtype,
      shape: s,
      dataId: t.dataId
    }, o = [
      pi(e),
      ...fi(e)
    ], i = new J2(o, s), a = true, l = [
      s
    ], c = n.runWebGLProgram(i, [
      r
    ], t.dtype, l, a);
    return {
      dataId: c.dataId,
      shape: e,
      dtype: c.dtype
    };
  }
  function be(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { shape: o } = s, i = n, a = X(r.shape), l = Qy(o, a), c = X(l);
    C(a === c, () => `The new shape (${l}) has ${c} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);
    const u = i.texData.get(r.dataId);
    return u.isPacked && !Tc(r.shape, l) && !(u.texture !== null && Tc(u.shape, l)) ? SQ(r, l, i) : (i.incRef(r.dataId), {
      dataId: r.dataId,
      shape: l,
      dtype: r.dtype
    });
  }
  const $Q = {
    kernelName: Iu,
    backendName: "webgl",
    kernelFunc: be
  };
  class DS {
    constructor(e, n) {
      this.variableNames = [
        "x"
      ];
      const { windowSize: s, batchSize: r, inSize: o, outSize: i } = e;
      this.outputShape = [
        r,
        i
      ];
      const a = Math.floor(s / 4) * 4, l = s % 4;
      let c = "sumValue += dot(values, ones);";
      if (n != null) {
        const h = 1 / n;
        c = `sumValue += dot(values * ${Jo(h) ? h.toPrecision(2) : h}, ones);`;
      }
      let u = "";
      o % s > 0 && (u = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${c}
        }

        int inIdx = inOffset + ${a};
        if (${l === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${c}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${c}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${c}
        }
        setOutput(sumValue);
      }
    `;
    }
  }
  class CQ {
    constructor(e, n) {
      this.variableNames = [
        "x"
      ];
      const { windowSize: s, batchSize: r, inSize: o, outSize: i } = e;
      this.outputShape = [
        r,
        i
      ];
      let a = "0.0", l = "";
      n === "prod" ? a = "1.0" : n === "min" ? (a = "1.0 / 1e-20", l = "min") : n === "max" && (a = "-1.0 / 1e-20", l = "max");
      let c = `${n}(${n}(${n}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
      n === "sum" ? c = "sumValue" : n === "prod" ? c = "prodValue" : n === "all" ? c = "allValue" : n === "any" && (c = "anyValue");
      const u = Math.floor(s / 4) * 4, h = s % 4;
      let d = `
      if (${n === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${n === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${n === "min"} || ${n === "max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, p = "vec4";
      n === "all" ? (a = "1.0", d = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, p = "bvec4") : n === "any" && (a = "0.0", d = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, p = "bvec4");
      let f = "";
      o % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 2}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 3}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${d}
        }
        setOutput(${c});
      }
    `;
    }
  }
  function IQ(t) {
    const e = [];
    for (; e.length === 0 || e[e.length - 1].outSize !== 1; ) {
      const n = e.length ? e[e.length - 1].outSize : t[1], s = dm(n);
      e.push({
        inSize: n,
        windowSize: s,
        outSize: Math.ceil(n / s)
      });
    }
    return e;
  }
  function Ri(t, e, n, s) {
    const r = IQ(t.shape);
    let o = t;
    for (let i = 0; i < r.length; i++) {
      const { inSize: a, windowSize: l, outSize: c } = r[i];
      let u, h;
      n === "mean" ? u = i === 0 ? new DS({
        windowSize: l,
        inSize: a,
        batchSize: t.shape[0],
        outSize: c
      }, a) : new DS({
        windowSize: l,
        inSize: a,
        batchSize: t.shape[0],
        outSize: c
      }) : u = new CQ({
        windowSize: l,
        inSize: a,
        batchSize: t.shape[0],
        outSize: c
      }, n), h = o, o = s.runWebGLProgram(u, [
        o
      ], e), h.dataId !== t.dataId && s.disposeIntermediateTensorInfo(h);
    }
    return o;
  }
  class NQ {
    constructor(e, n) {
      this.variableNames = [
        "A"
      ];
      const s = new Array(e.length);
      for (let i = 0; i < s.length; i++) s[i] = e[n[i]];
      this.outputShape = s, this.rank = s.length;
      const r = rt(this.rank), o = kQ(n);
      this.userCode = `
    void main() {
      ${r} resRC = getOutputCoords();
      setOutput(getA(${o}));
    }
    `;
    }
  }
  function kQ(t) {
    const e = t.length;
    if (e > 6) throw Error(`Transpose for rank ${e} is not yet supported`);
    const n = [
      "resRC.x",
      "resRC.y",
      "resRC.z",
      "resRC.w",
      "resRC.u",
      "resRC.v"
    ], s = new Array(e);
    for (let r = 0; r < t.length; r++) s[t[r]] = n[r];
    return s.join();
  }
  class TQ {
    constructor(e, n) {
      this.variableNames = [
        "A"
      ], this.packedInputs = true, this.packedOutput = true;
      const s = new Array(e.length);
      for (let u = 0; u < s.length; u++) s[u] = e[n[u]];
      if (this.outputShape = s, this.rank = s.length, this.rank > 6) throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
      const r = rt(this.rank), o = Z2("rc", this.rank), i = new Array(this.rank);
      for (let u = 0; u < n.length; u++) i[n[u]] = o[u];
      const a = `vec2(${i.slice(-2).join()})`, l = `++${o[this.rank - 1]} < ${s[this.rank - 1]}`, c = `getChannel(getA(${i.join()}), ${a})`;
      this.userCode = `
    void main() {
      ${r} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${c};
      if(${l}) {
        result[1] = ${c};
      }
      --${o[this.rank - 1]};
      if(++${o[this.rank - 2]} < ${s[this.rank - 2]}) {
        result[2] = ${c};
        if(${l}) {
          result[3] = ${c};
        }
      }
      setOutput(result);
    }
    `;
    }
  }
  function zm(t, e, n) {
    const s = j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new TQ(t.shape, e) : new NQ(t.shape, e);
    return n.runWebGLProgram(s, [
      t
    ], t.dtype);
  }
  function EQ(t, e, n, s) {
    const r = e, o = t.shape.length, i = Ve(r, t.shape);
    let a = i;
    const l = bt(a, o), c = l != null;
    let u = t;
    c && (u = zm(t, l, s), a = Ct(a.length, o)), rn("sum", a, o);
    const [h, d] = qt(u.shape, a);
    let p = h;
    n && (p = $t(h, i));
    const f = X(d), g = X(t.shape) / f, y = be({
      inputs: {
        x: u
      },
      attrs: {
        shape: [
          g,
          f
        ]
      },
      backend: s
    }), b = Nf(t.dtype), w = Ri(y, b, "sum", s), x = be({
      inputs: {
        x: w
      },
      attrs: {
        shape: p
      },
      backend: s
    });
    return s.disposeIntermediateTensorInfo(y), s.disposeIntermediateTensorInfo(w), c && s.disposeIntermediateTensorInfo(u), x;
  }
  function Mm(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, keepDims: i } = s;
    return EQ(r, o, i, n);
  }
  const RQ = {
    kernelName: Au,
    backendName: "webgl",
    kernelFunc: Mm
  };
  function bn(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { perm: o } = s, i = n, a = r.shape.length, l = new Array(a);
    for (let u = 0; u < l.length; u++) l[u] = r.shape[o[u]];
    let c;
    if (i.shouldExecuteOnCPU([
      r
    ])) {
      const h = i.texData.get(r.dataId).values, d = Q0(h, r.shape, r.dtype, o, l);
      c = i.makeTensorInfo(l, r.dtype);
      const p = i.texData.get(c.dataId);
      p.values = d;
    } else c = zm(r, o, i);
    return c;
  }
  const AQ = {
    kernelName: qo,
    backendName: "webgl",
    kernelFunc: bn
  };
  const iR = 1e3;
  function Xd({ a: t, b: e, transposeA: n, transposeB: s, backend: r, bias: o = null, preluActivationWeights: i = null, leakyreluAlpha: a = 0, activation: l = null }) {
    const c = t.shape.length, u = e.shape.length, h = n ? t.shape[c - 2] : t.shape[c - 1], d = s ? e.shape[u - 1] : e.shape[u - 2], p = n ? t.shape[c - 1] : t.shape[c - 2], f = s ? e.shape[u - 2] : e.shape[u - 1], m = t.shape.slice(0, -2), g = e.shape.slice(0, -2), y = X(m), b = X(g), x = Fe(t.shape.slice(0, -2), e.shape.slice(0, -2)).concat([
      p,
      f
    ]);
    C(h === d, () => `Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${t.shape} and ${e.shape} and transposeA=${n} and transposeB=${s} must match.`);
    const S = n ? [
      y,
      h,
      p
    ] : [
      y,
      p,
      h
    ], I = s ? [
      b,
      f,
      d
    ] : [
      b,
      d,
      f
    ], E = be({
      inputs: {
        x: t
      },
      backend: r,
      attrs: {
        shape: S
      }
    }), R = be({
      inputs: {
        x: e
      },
      backend: r,
      attrs: {
        shape: I
      }
    }), N = [
      E,
      R
    ], k = Math.max(y, b), $ = n ? E.shape[1] : E.shape[2], F = o != null, M = i != null, U = l === "leakyrelu", W = l != null ? Ec(l, true) : null, V = F || M || U || W != null;
    let H;
    if ((p === 1 || f === 1) && $ > iR && V === false) {
      let Y = E, te = R;
      n && (Y = bn({
        inputs: {
          x: E
        },
        backend: r,
        attrs: {
          perm: [
            0,
            2,
            1
          ]
        }
      }), N.push(Y)), s && (te = bn({
        inputs: {
          x: R
        },
        backend: r,
        attrs: {
          perm: [
            0,
            2,
            1
          ]
        }
      }), N.push(te));
      const se = f !== 1, re = f === 1;
      let ie = Y;
      se && (ie = be({
        inputs: {
          x: Y
        },
        backend: r,
        attrs: {
          shape: [
            k,
            $,
            1
          ]
        }
      }), N.push(ie));
      const fe = f === 1 ? 2 : 1;
      let pe = te;
      re && (pe = be({
        inputs: {
          x: te
        },
        backend: r,
        attrs: {
          shape: [
            k,
            1,
            $
          ]
        }
      }), N.push(pe));
      const ye = t1({
        inputs: {
          a: ie,
          b: pe
        },
        backend: r
      });
      H = Mm({
        inputs: {
          x: ye
        },
        backend: r,
        attrs: {
          axis: fe,
          keepDims: true
        }
      }), N.push(ye);
    } else {
      const Y = An(t.dtype, e.dtype), te = new oR(S, I, [
        k,
        p,
        f
      ], n, s, F, W, M, U), se = [
        E,
        R
      ];
      if (o != null && se.push(o), M && se.push(i), U) {
        const re = r.makeTensorInfo([], "float32", _r(a, "float32"));
        se.push(re), N.push(re);
      }
      H = r.runWebGLProgram(te, se, Y);
    }
    const G = be({
      inputs: {
        x: H
      },
      backend: r,
      attrs: {
        shape: x
      }
    });
    N.push(H);
    for (const Y of N) r.disposeIntermediateTensorInfo(Y);
    return G;
  }
  function _Q(t) {
    const { inputs: e, backend: n, attrs: s } = t, { a: r, b: o, bias: i, preluActivationWeights: a } = e, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
    return Xd({
      a: r,
      b: o,
      transposeA: l,
      transposeB: c,
      backend: n,
      bias: i,
      preluActivationWeights: a,
      leakyreluAlpha: h,
      activation: u
    });
  }
  const DQ = {
    kernelName: pc,
    backendName: "webgl",
    kernelFunc: _Q
  };
  const OS = "return abs(x);";
  function OQ(t) {
    const { inputs: e, backend: n } = t, { x: s } = e;
    if (n.shouldExecuteOnCPU([
      s
    ]) && s.dtype !== "complex64") {
      const o = n.texData.get(s.dataId), i = X2(o.values);
      return n.makeTensorInfo(s.shape, s.dtype, i);
    }
    let r;
    return j().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new Yr(s.shape, OS) : r = new Ys(s.shape, OS), n.runWebGLProgram(r, [
      s
    ], s.dtype);
  }
  const FQ = {
    kernelName: Lc,
    backendName: "webgl",
    kernelFunc: OQ
  };
  const LQ = ws + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`, PQ = Ye({
    opSnippet: LQ
  }), zQ = {
    kernelName: ha,
    backendName: "webgl",
    kernelFunc: PQ
  };
  const MQ = ws + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`, BQ = Ye({
    opSnippet: MQ
  }), VQ = {
    kernelName: da,
    backendName: "webgl",
    kernelFunc: BQ
  };
  const FS = "return a + b;", WQ = an({
    opSnippet: FS,
    packedOpSnippet: FS,
    supportsComplex: true,
    cpuKernelImpl: ZJ
  }), UQ = {
    kernelName: xi,
    backendName: "webgl",
    kernelFunc: WQ
  };
  class GQ {
    constructor(e, n) {
      this.outputShape = [], this.outputShape = e, this.variableNames = n.map((o, i) => `T${i}`);
      const s = [];
      this.variableNames.forEach((o) => {
        s.push(`float v${o} = get${o}AtOutCoords();`);
      });
      const r = this.variableNames.map((o) => `v${o}`).join(" + ");
      this.userCode = `
      void main() {
        ${s.join(`
        `)}

        float result = ${r};
        setOutput(result);
      }
    `;
    }
  }
  class HQ {
    constructor(e, n) {
      this.outputShape = [], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.variableNames = n.map((o, i) => `T${i}`);
      const s = [];
      this.variableNames.forEach((o) => {
        s.push(`vec4 v${o} = get${o}AtOutCoords();`);
      });
      const r = this.variableNames.map((o) => `v${o}`).join(" + ");
      this.userCode = `
      void main() {
        ${s.join(`
        `)}

        vec4 result = ${r};
        setOutput(result);
      }
    `;
    }
  }
  function ud(t) {
    const { inputs: e, backend: n } = t, s = e;
    if (s.length === 1) return qn({
      inputs: {
        x: s[0]
      },
      backend: n
    });
    if (s.length > j().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
      const l = Math.floor(s.length / 2), c = ud({
        inputs: s.slice(0, l),
        backend: n
      }), u = ud({
        inputs: s.slice(l),
        backend: n
      });
      return ud({
        inputs: [
          c,
          u
        ],
        backend: n
      });
    }
    const r = s.map((l) => l.dtype).reduce((l, c) => An(l, c)), o = s.map((l) => l.shape), a = j().getBool("WEBGL_PACK") ? new HQ(s[0].shape, o) : new GQ(s[0].shape, o);
    return n.runWebGLProgram(a, s, r);
  }
  const jQ = {
    kernelName: Pc,
    backendName: "webgl",
    kernelFunc: ud
  };
  function qQ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, keepDims: i } = s, a = r.shape.length, l = Ve(o, r.shape);
    let c = l;
    const u = bt(c, a);
    let h = r;
    u != null && (h = bn({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: u
      }
    }), c = Ct(c.length, a)), rn("all", c, a);
    const [d, p] = qt(h.shape, c), f = X(p), m = be({
      inputs: {
        x: h
      },
      backend: n,
      attrs: {
        shape: [
          -1,
          f
        ]
      }
    }), g = Ri(m, m.dtype, "all", n);
    let y;
    if (i) {
      const b = $t(d, l);
      y = be({
        inputs: {
          x: g
        },
        backend: n,
        attrs: {
          shape: b
        }
      });
    } else y = be({
      inputs: {
        x: g
      },
      backend: n,
      attrs: {
        shape: d
      }
    });
    return n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(g), u != null && n.disposeIntermediateTensorInfo(h), y;
  }
  const KQ = {
    kernelName: xp,
    backendName: "webgl",
    kernelFunc: qQ
  };
  function XQ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, keepDims: i } = s, a = r.shape.length, l = Ve(o, r.shape);
    let c = l;
    const u = bt(c, a);
    let h = r;
    u != null && (h = bn({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: u
      }
    }), c = Ct(c.length, a)), rn("any", c, a);
    const [d, p] = qt(h.shape, c), f = X(p), m = be({
      inputs: {
        x: h
      },
      backend: n,
      attrs: {
        shape: [
          -1,
          f
        ]
      }
    }), g = Ri(m, m.dtype, "any", n);
    let y;
    if (i) {
      const b = $t(d, l);
      y = be({
        inputs: {
          x: g
        },
        backend: n,
        attrs: {
          shape: b
        }
      });
    } else y = be({
      inputs: {
        x: g
      },
      backend: n,
      attrs: {
        shape: d
      }
    });
    return n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(g), u != null && n.disposeIntermediateTensorInfo(h), y;
  }
  const YQ = {
    kernelName: wp,
    backendName: "webgl",
    kernelFunc: XQ
  };
  class ZQ {
    constructor(e, n, s) {
      this.variableNames = [
        "A"
      ];
      const { windowSize: r, batchSize: o, outSize: i } = e;
      s || this.variableNames.push("bestIndicesA"), this.outputShape = [
        o,
        i
      ];
      const a = n === "max" ? ">" : "<", l = s ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
      this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${r}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
    }
  }
  class JQ {
    constructor(e, n, s, r) {
      this.variableNames = [
        "A"
      ], this.packedInputs = true, this.packedOutput = true, C(e.length > 2, () => `Packed arg${s.charAt(0).toUpperCase() + s.slice(1)} supports only inputs with rank above 2.`);
      const o = e[e.length - 1], i = Math.ceil(o / n);
      this.outputShape = e.slice(0, -1), i > 1 && this.outputShape.push(i), r || this.variableNames.push("bestIndicesA");
      const a = this.outputShape, l = a.length, c = rt(l), u = mn("coords", l);
      let h, d;
      if (i === 1) {
        d = l + 1;
        const R = rt(d);
        h = `
        ${R} sourceLocR = ${R}(${u.join()}, 0);
        ++${u[l - 1]};
        ${R} sourceLocG = ${R}(${u.join()}, 0);
        ++${u[l - 2]};
        ${R} sourceLocA = ${R}(${u.join()}, 0);
        --${u[l - 1]};
        ${R} sourceLocB = ${R}(${u.join()}, 0);
        --${u[l - 2]};`;
      } else d = l, h = `
        ${c} sourceLocR = coords;
        ++${u[l - 1]};
        ${c} sourceLocG = coords;
        ++${u[l - 2]};
        ${c} sourceLocA = coords;
        --${u[l - 1]};
        ${c} sourceLocB = coords;
        --${u[l - 2]};`;
      const p = [
        "x",
        "y",
        "z",
        "w",
        "u",
        "v"
      ].slice(0, d), f = "." + p[d - 1], m = p.map((R) => "int " + R), g = mn("sourceLocR", d - 1).concat("inIdx.r"), y = mn("sourceLocG", d - 1).concat("inIdx.g"), b = mn("sourceLocB", d - 1).concat("inIdx.b"), w = mn("sourceLocA", d - 1).concat("inIdx.a"), x = s === "max" ? "greaterThan" : "lessThan", S = r ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${w.join()})));`, I = `vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${y.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`, E = r ? "" : `
      float getBestIndicesAChannel(${m.join()}) {
        return getChannel(getBestIndicesA(${p.join()}),
                                          vec2(${p.slice(-2).join()}));
      }`;
      this.userCode = `
      float getAChannel(${m.join()}) {
        return getChannel(getA(${p.join()}),
                               vec2(${p.slice(-2).join()}));
      }
      ${E}
      void main() {
        ${c} coords = getOutputCoords();
        bool hasNextCol = ${u[l - 1]} < ${a[l - 1] - 1};
        bool hasNextRow = ${u[l - 2]} < ${a[l - 2] - 1};
        ${h}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${n};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${I};

        for (int i = 0; i < ${n}; i++) {
          inIdx = srcIdx;
          ${S}
          vec4 candidate = ${I};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
    }
  }
  function aR(t, e, n, s = null) {
    let r = e.shape[0], o = e.shape[1];
    s != null && (r = s.shape[0], o = s.shape[1]);
    const i = dm(o), a = {
      windowSize: i,
      inSize: o,
      batchSize: r,
      outSize: Math.ceil(o / i)
    }, l = new ZQ(a, n, s == null), c = [
      e
    ];
    s != null && c.push(s);
    const u = t.runWebGLProgram(l, c, "int32");
    if (u.shape[1] === 1) return u;
    const h = aR(t, e, n, u);
    return t.disposeIntermediateTensorInfo(u), h;
  }
  function lR(t, e, n, s = null) {
    const r = s != null ? s.shape : e.shape, o = r[r.length - 1], i = dm(o), a = new JQ(r, i, n, s == null), l = s == null ? [
      e
    ] : [
      e,
      s
    ], c = t.runWebGLProgram(a, l, "int32");
    if (c.shape.length === e.shape.length) {
      const u = lR(t, e, n, c);
      return t.disposeIntermediateTensorInfo(c), u;
    }
    return c;
  }
  function cR(t, e, n, s) {
    const r = [
      n
    ];
    if (rn("arg" + s.charAt(0).toUpperCase() + s.slice(1), r, e.shape.length), !j().getBool("WEBGL_PACK_REDUCE") || e.shape.length <= 2) {
      const o = [], i = t.texData.get(e.dataId), a = i !== null && i.isPacked;
      let l = e;
      a && (l = t.unpackTensor(e), o.push(l));
      const [c, u] = qt(l.shape, r), h = X(u), d = be({
        inputs: {
          x: l
        },
        backend: t,
        attrs: {
          shape: [
            -1,
            h
          ]
        }
      });
      o.push(d);
      const p = aR(t, d, s);
      o.push(p);
      const f = be({
        inputs: {
          x: p
        },
        backend: t,
        attrs: {
          shape: c
        }
      });
      return o.forEach((m) => t.disposeIntermediateTensorInfo(m)), f;
    }
    return lR(t, e, s);
  }
  function QQ(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o } = s;
    let i = Ve(o, r.shape);
    const a = bt(i, r.shape.length);
    let l = r;
    const c = [];
    a != null && (l = bn({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: a
      }
    }), c.push(l), i = Ct(i.length, l.shape.length)), rn("argMax", [
      i[0]
    ], l.shape.length);
    const u = cR(n, l, i[0], "max");
    return c.forEach((h) => n.disposeIntermediateTensorInfo(h)), u;
  }
  const eee = {
    kernelName: zc,
    backendName: "webgl",
    kernelFunc: QQ
  };
  function tee(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o } = s;
    let i = Ve(o, r.shape);
    const a = bt(i, r.shape.length);
    let l = r;
    const c = [];
    a != null && (l = bn({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: a
      }
    }), c.push(l), i = Ct(i.length, l.shape.length)), rn("argMin", [
      i[0]
    ], l.shape.length);
    const u = cR(n, l, i[0], "min");
    return c.forEach((h) => n.disposeIntermediateTensorInfo(h)), u;
  }
  const nee = {
    kernelName: Mc,
    backendName: "webgl",
    kernelFunc: tee
  };
  const see = ws + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`, ree = Ye({
    opSnippet: see
  }), oee = {
    kernelName: pa,
    backendName: "webgl",
    kernelFunc: ree
  };
  const iee = ws + "return log(x + sqrt(x * x + 1.0));", aee = Ye({
    opSnippet: iee
  }), lee = {
    kernelName: fa,
    backendName: "webgl",
    kernelFunc: aee
  };
  const cee = ws + `
  return atan(x);
`, uee = Ye({
    opSnippet: cee
  }), hee = {
    kernelName: ma,
    backendName: "webgl",
    kernelFunc: uee
  };
  const dee = e1 + `
  return atan(a, b);
`, pee = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Ei + `
  return result;
`, fee = an({
    opSnippet: dee,
    packedOpSnippet: pee
  }), mee = {
    kernelName: ya,
    backendName: "webgl",
    kernelFunc: fee
  };
  const gee = ws + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`, yee = Ye({
    opSnippet: gee
  }), bee = {
    kernelName: ga,
    backendName: "webgl",
    kernelFunc: yee
  };
  class Rc {
    constructor(e, n, s, r = false, o = false) {
      if (this.variableNames = [
        "x"
      ], n === "avg" && s) throw new Error("Cannot compute positions for average pool.");
      const i = e.filterWidth, a = e.strideHeight, l = e.strideWidth, c = e.dilationHeight, u = e.dilationWidth, h = e.effectiveFilterHeight, d = e.effectiveFilterWidth, p = e.padInfo.top, f = e.padInfo.left;
      this.outputShape = e.outShape;
      const m = n === "avg", g = `((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`, y = `(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;
      let b = "0.0";
      if (m || (b = "-1.0 / 1e-20"), s) {
        const R = ">=";
        this.userCode = `
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${p}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${h};
              wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${R} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${r ? o ? g : y : `wR * ${d} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
        return;
      }
      const w = "max";
      let x = `${n}(${n}(${n}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
      n === "avg" && (x = "avgValue / max(count, 1.0)");
      const S = Math.floor(i / 4) * 4, I = i % 4, E = `
      if (${m}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;
      this.userCode = `
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${p}, ${f});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${h};
            wR += ${c}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${S}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${E}
          }

          int xC = xCCorner + ${S};
          if (${I === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${E}
          } else if (${I === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${E}
          } else if (${I === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${E}
          }
        }
        setOutput(${x});
      }
    `;
    }
  }
  class n1 {
    constructor(e, n, s, r = false, o = false) {
      if (this.variableNames = [
        "x"
      ], n === "avg" && s) throw new Error("Cannot compute positions for average pool.");
      const i = e.filterWidth, a = e.strideDepth, l = e.strideHeight, c = e.strideWidth, u = e.dilationDepth, h = e.dilationHeight, d = e.dilationWidth, p = e.effectiveFilterDepth, f = e.effectiveFilterHeight, m = e.effectiveFilterWidth, g = e.padInfo.front, y = e.padInfo.top, b = e.padInfo.left;
      this.outputShape = e.outShape;
      const w = n === "avg";
      let x = "0.0";
      if (w || (x = "-1.0 / 1e-20"), s) {
        const k = ">=";
        this.userCode = `
        const ivec3 strides =
            ivec3(${a}, ${l}, ${c});
        const ivec3 pads = ivec3(${g}, ${y}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${p};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${h}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${m};
                  wC += ${d}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${k} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${r ? o ? `(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `wD * ${f} * ${m} +
                      wR * ${m} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
        return;
      }
      const S = "max";
      let I = `${n}(${n}(${n}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
      n === "avg" && (I = "avgValue / max(count, 1.0)");
      const E = Math.floor(i / 4) * 4, R = i % 4, N = `
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${S}(values, minMaxValue);
      }
    `;
      this.userCode = `
      const ivec3 strides =
        ivec3(${a}, ${l}, ${c});
      const ivec3 pads = ivec3(${g}, ${y}, ${b});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${E}; wC += 4) {
              int xC = xCCorner + wC * ${d};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                getValue(batch, xD, xR, xC + 3 * ${d}, ch)
              );

              ${N}
            }

            int xC = xCCorner + ${E};
            if (${R === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${N}
            } else if (${R === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                initializationValue,
                initializationValue
              );

              ${N}
            } else if (${R === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                initializationValue
              );

              ${N}
            }
          }
        }
        setOutput(${I});
      }
    `;
    }
  }
  function xee(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e;
    vl(r, "avgPool");
    const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
    C(sn(i, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
    const u = bs(r.shape, o, i, c, a, l);
    if (u.filterWidth === 1 && u.filterHeight === 1 && Ue(u.inShape, u.outShape)) return qn({
      inputs: {
        x: r
      },
      backend: n
    });
    const h = new Rc(u, "avg", false);
    return n.runWebGLProgram(h, [
      r
    ], "float32");
  }
  const wee = {
    kernelName: Bc,
    backendName: "webgl",
    kernelFunc: xee
  };
  function vee(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { filterSize: o, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s, u = [
      1,
      1,
      1
    ], h = Dr(r.shape, o, i, u, a, l, c), d = new n1(h, "avg", false);
    return n.runWebGLProgram(d, [
      r
    ], "float32");
  }
  const See = {
    kernelName: Vc,
    backendName: "webgl",
    kernelFunc: vee
  };
  class $ee {
    constructor(e) {
      this.variableNames = [
        "dy"
      ], this.outputShape = e.inShape;
      const n = e.filterHeight, s = e.filterWidth, r = e.strideHeight, o = e.strideWidth, i = e.dilationHeight, a = e.dilationWidth, l = e.effectiveFilterHeight, c = e.effectiveFilterWidth, u = l - 1 - e.padInfo.top, h = c - 1 - e.padInfo.left, d = 1 / (n * s);
      this.userCode = `
      const ivec2 pads = ivec2(${u}, ${h});
      const float avgMultiplier = float(${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${c};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
    }
  }
  class Cee {
    constructor(e) {
      this.variableNames = [
        "dy"
      ], this.outputShape = e.inShape;
      const n = e.filterDepth, s = e.filterHeight, r = e.filterWidth, o = e.strideDepth, i = e.strideHeight, a = e.strideWidth, l = e.dilationDepth, c = e.dilationHeight, u = e.dilationWidth, h = e.effectiveFilterDepth, d = e.effectiveFilterHeight, p = e.effectiveFilterWidth, f = h - 1 - e.padInfo.front, m = d - 1 - e.padInfo.top, g = p - 1 - e.padInfo.left, y = 1 / (n * s * r);
      this.userCode = `
      const ivec3 pads = ivec3(${f}, ${m}, ${g});
      const float avgMultiplier = float(${y});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${h};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${o}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${d};
              wR += ${c}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
  }
  function Iee(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, input: o } = e, i = o, { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s, h = [
      1,
      1,
      1
    ], d = Dr(i.shape, a, l, h, c, u), p = new Cee(d);
    return n.runWebGLProgram(p, [
      r
    ], i.dtype);
  }
  const Nee = {
    kernelName: Sp,
    backendName: "webgl",
    kernelFunc: Iee
  };
  function kee(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, input: o } = e, i = o;
    vl([
      r,
      o
    ], "avgPoolGrad");
    const { filterSize: a, strides: l, pad: c } = s, u = bs(i.shape, a, l, 1, c), h = new $ee(u);
    return n.runWebGLProgram(h, [
      r
    ], i.dtype);
  }
  const Tee = {
    kernelName: vp,
    backendName: "webgl",
    kernelFunc: kee
  };
  function Eee(t) {
    const { inputs: e, backend: n, attrs: s } = t, { a: r, b: o } = e, { transposeA: i, transposeB: a } = s;
    return Xd({
      a: r,
      b: o,
      transposeA: i,
      transposeB: a,
      backend: n
    });
  }
  const Ree = {
    kernelName: Wc,
    backendName: "webgl",
    kernelFunc: Eee
  };
  class Aee {
    constructor(e, n, s, r, o, i) {
      this.outputShape = [], this.variableNames = [
        "x",
        "mean",
        "variance"
      ], Fe(e, n), Fe(e, s);
      let a = "0.0";
      r != null && (Fe(e, r), this.variableNames.push("offset"), a = "getOffsetAtOutCoords()");
      let l = "1.0";
      o != null && (Fe(e, o), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
    }
  }
  class _ee {
    constructor(e, n, s, r, o, i) {
      this.packedInputs = true, this.packedOutput = true, this.variableNames = [
        "x",
        "mean",
        "variance"
      ], Fe(e, n), Fe(e, s);
      let a = "vec4(0.0)";
      r != null && (Fe(e, r), this.variableNames.push("offset"), a = "getOffsetAtOutCoords()");
      let l = "vec4(1.0)";
      o != null && (Fe(e, o), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `;
    }
  }
  const Dee = ({ inputs: t, backend: e, attrs: n }) => {
    const { x: s, mean: r, variance: o, offset: i, scale: a } = t;
    C(r.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), C(i == null || r.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), C(a == null || r.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
    let { varianceEpsilon: l } = n;
    l == null && (l = 1e-3);
    const c = [
      s,
      r,
      o
    ];
    let u = null;
    i != null && (u = i.shape, c.push(i));
    let h = null;
    a != null && (h = a.shape, c.push(a));
    const d = j().getBool("WEBGL_PACK_NORMALIZATION") ? new _ee(s.shape, r.shape, o.shape, u, h, l) : new Aee(s.shape, r.shape, o.shape, u, h, l);
    return e.runWebGLProgram(d, c, c[0].dtype);
  }, Oee = {
    kernelName: tu,
    backendName: "webgl",
    kernelFunc: Dee
  };
  class Fee {
    constructor(e) {
      this.variableNames = [
        "source"
      ], this.outputShape = e, this.rank = e.length;
      const n = rt(this.rank);
      this.customUniforms = [
        {
          name: "start",
          arrayIndex: this.rank,
          type: "int"
        }
      ];
      const s = Lee(this.rank);
      let r;
      const o = e.map((i, a) => `sourceLoc.${Ty[a]} = start[${a}] + coords.${Ty[a]};`);
      r = `
        ${n} sourceLoc;
        ${n} coords = getOutputCoords();
        ${o.join(`
`)}
      `, this.userCode = `
      void main() {
        ${r}
        setOutput(getSource(${s}));
      }
    `;
    }
  }
  const Ty = [
    "x",
    "y",
    "z",
    "w",
    "u",
    "v"
  ];
  function Lee(t) {
    if (t === 1) return "sourceLoc";
    if (t <= 6) return Ty.slice(0, t).map((e) => "sourceLoc." + e).join(",");
    throw Error(`Slicing for rank ${t} is not yet supported`);
  }
  class Pee {
    constructor(e) {
      this.variableNames = [
        "source"
      ], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.rank = e.length, this.customUniforms = [
        {
          name: "start",
          arrayIndex: this.rank,
          type: "int"
        }
      ];
      const n = rt(this.rank), s = mn("coords", this.rank), r = mn("sourceLoc", this.rank), o = this.rank === 1 ? "sourceLoc" : `vec2(${r.slice(-2).join()})`, i = `getChannel(getSource(${r.join()}), ${o})`, a = `
      result.x = ${i};
      if (++${s[this.rank - 1]} < ${e[this.rank - 1]}) {
        ++${r[this.rank - 1]};
        result.y = ${i};
        --${r[this.rank - 1]};
      }
    `, l = this.rank === 1 ? "" : `
      --${s[this.rank - 1]};
      if (++${s[this.rank - 2]} < ${e[this.rank - 2]}) {
        ++${r[this.rank - 2]};
        result.z = ${i};
        if (++${s[this.rank - 1]} < ${e[this.rank - 1]}) {
          ++${r[this.rank - 1]};
          result.w = ${i};
        }
      }
    `, c = this.rank <= 4 ? `sourceLoc = coords +
            ${n}(${e.map((u, h) => `start[${h}]`).join()});` : e.map((u, h) => `${r[h]} = ${s[h]} + start[${h}];`).join(`
`);
      this.userCode = `
      void main() {
        ${n} coords = getOutputCoords();
        ${n} sourceLoc;
        ${c}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `;
    }
  }
  function zee(t, e, n, s) {
    const r = s.texData.get(t.dataId), o = s.makeTensorInfo(n, t.dtype), i = s.texData.get(o.dataId);
    Object.assign(i, r), i.refCount = 1, i.shape = n, i.dtype = t.dtype;
    let a = Ax(e, Ee(t.shape));
    r.slice && (a += r.slice.flatOffset), i.slice = {
      flatOffset: a,
      origDataId: r.slice && r.slice.origDataId || t.dataId
    };
    const l = s.dataRefCount.get(i.slice.origDataId) || 1;
    return s.dataRefCount.set(i.slice.origDataId, l + 1), o;
  }
  function Tl(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { begin: o, size: i } = s, [a, l] = hm(r, o, i);
    if (Tx(r, a, l), X(l) === 0) return n.makeTensorInfo(l, r.dtype, []);
    if (n.shouldExecuteOnCPU([
      r
    ]) || r.dtype === "string") {
      const h = n.texData.get(r.dataId), d = E9(h.values, a, l, r.shape, r.dtype);
      return n.makeTensorInfo(l, r.dtype, d);
    }
    const { isPacked: c } = n.texData.get(r.dataId), u = Rx(r.shape, a, l);
    if (c || !u) {
      const h = j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Pee(l) : new Fee(l), d = [
        a
      ];
      return n.runWebGLProgram(h, [
        r
      ], r.dtype, d);
    }
    return n.uploadToGPU(r.dataId), zee(r, a, l, n);
  }
  const Mee = {
    kernelName: Ru,
    backendName: "webgl",
    kernelFunc: Tl
  };
  const Bee = (t) => {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { blockShape: o, crops: i } = s;
    C(r.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
    const a = o.reduce((b, w) => b * w), l = oh(r.shape, o, a), c = ih(l.length, o.length), u = ah(r.shape, o, a), h = Px(i, o.length), d = zx(u, i, o.length), p = [], f = be({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: l
      }
    }), m = bn({
      inputs: {
        x: f
      },
      backend: n,
      attrs: {
        perm: c
      }
    }), g = be({
      inputs: {
        x: m
      },
      backend: n,
      attrs: {
        shape: u
      }
    }), y = Tl({
      inputs: {
        x: g
      },
      backend: n,
      attrs: {
        begin: h,
        size: d
      }
    });
    return p.push(f), p.push(m), p.push(g), p.forEach((b) => n.disposeIntermediateTensorInfo(b)), y;
  }, Vee = {
    kernelName: Uc,
    backendName: "webgl",
    kernelFunc: Bee
  };
  function Wee(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, weights: o } = e, { size: i } = s, a = n.readSync(r.dataId), l = n.readSync(o.dataId), c = K2(a, l, o.dtype, o.shape, i);
    return n.makeTensorInfo([
      i
    ], o.dtype, c);
  }
  const Uee = {
    kernelName: $p,
    backendName: "webgl",
    kernelFunc: Wee
  };
  const Gee = `
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`, Hee = `
  return float(int(a.r) & int(b.r));
`;
  function jee(t) {
    const { inputs: e, backend: n } = t, { a: s, b: r } = e, o = j().getBool("WEBGL_PACK_BINARY_OPERATIONS"), i = j().getNumber("WEBGL_VERSION");
    if (n.shouldExecuteOnCPU([
      s,
      r
    ]) || i === 1) {
      const l = n.texData.get(s.dataId).values, c = n.texData.get(r.dataId).values, [u, h] = QJ(s.shape, r.shape, l, c, s.dtype), d = n.makeTensorInfo(h, s.dtype), p = n.texData.get(d.dataId);
      return p.values = u, d;
    }
    let a;
    return o ? a = new Nl(Gee, s.shape, r.shape, false) : a = new mi(Hee, s.shape, r.shape), n.runWebGLProgram(a, [
      s,
      r
    ], s.dtype);
  }
  const qee = {
    kernelName: Gc,
    backendName: "webgl",
    kernelFunc: jee
  };
  function Kee(t) {
    const { inputs: e, backend: n } = t, { s0: s, s1: r } = e, o = n.readSync(s.dataId), i = n.readSync(r.dataId), a = Fe(Array.from(o), Array.from(i));
    return n.makeTensorInfo([
      a.length
    ], "int32", Int32Array.from(a));
  }
  const Xee = {
    kernelName: Cp,
    backendName: "webgl",
    kernelFunc: Kee
  };
  const Yee = "return float(a != b);", uR = an({
    opSnippet: Yee,
    cpuKernelImpl: w9,
    dtype: "bool"
  }), Zee = {
    kernelName: bu,
    backendName: "webgl",
    kernelFunc: uR
  };
  function Sh(t) {
    const { inputs: e, backend: n } = t, { input: s } = e, r = n.texData.get(s.dataId);
    return qn({
      inputs: {
        x: r.complexTensorInfos.real
      },
      backend: n
    });
  }
  const Jee = {
    kernelName: rf,
    backendName: "webgl",
    kernelFunc: Sh
  };
  const Qee = "return float(int(x));";
  function ete(t, e) {
    const n = new Ys(t.shape, Qee), s = e.runWebGLProgram(n, [
      t
    ], "int32");
    return {
      dataId: s.dataId,
      shape: s.shape,
      dtype: s.dtype
    };
  }
  function Ey(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { dtype: o } = s;
    if (o === "complex64") {
      if (r.dtype === "complex64") return qn({
        inputs: {
          x: r
        },
        backend: n
      });
      const i = Tt(r.shape), a = Ey({
        inputs: {
          x: r
        },
        backend: n,
        attrs: {
          dtype: "float32"
        }
      }), l = To({
        inputs: {
          real: a,
          imag: i
        },
        backend: n
      });
      return i.dispose(), n.disposeIntermediateTensorInfo(a), l;
    }
    if (r.dtype === "complex64") {
      const i = Sh({
        inputs: {
          input: r
        },
        backend: n
      }), a = Ey({
        inputs: {
          x: i
        },
        backend: n,
        attrs: {
          dtype: o
        }
      });
      return n.disposeIntermediateTensorInfo(i), a;
    }
    if (!eb(r.dtype, o)) {
      const i = qn({
        inputs: {
          x: r
        },
        backend: n
      });
      return {
        dataId: i.dataId,
        shape: i.shape,
        dtype: o
      };
    }
    if (n.shouldExecuteOnCPU([
      r
    ])) {
      const i = n.texData.get(r.dataId).values, [a, l, c] = e9(i, r.shape, r.dtype, o);
      return n.makeTensorInfo(a, l, c);
    }
    if (o === "int32") return ete(r, n);
    if (o === "bool") {
      const i = n.makeTensorInfo([], "bool", Ut("bool", 1)), l = uR({
        inputs: {
          a: r,
          b: i
        },
        backend: n
      });
      return n.disposeIntermediateTensorInfo(i), l;
    }
    throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`);
  }
  const tte = {
    kernelName: ba,
    backendName: "webgl",
    kernelFunc: Ey
  };
  const LS = "return ceil(x);", nte = Ye({
    opSnippet: LS,
    packedOpSnippet: LS,
    cpuKernelImpl: t9
  }), ste = {
    kernelName: xa,
    backendName: "webgl",
    kernelFunc: nte
  };
  class rte {
    constructor(e) {
      this.variableNames = [
        "A"
      ], this.customUniforms = [
        {
          name: "minVal",
          type: "float"
        },
        {
          name: "maxVal",
          type: "float"
        }
      ], this.outputShape = e, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
    }
  }
  class ote {
    constructor(e) {
      this.variableNames = [
        "A"
      ], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [
        {
          name: "minVal",
          type: "float"
        },
        {
          name: "maxVal",
          type: "float"
        }
      ], this.outputShape = e, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
    }
  }
  function ite(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { clipValueMin: o, clipValueMax: i } = s;
    let a;
    j().getBool("WEBGL_PACK_CLIP") ? a = new ote(r.shape) : a = new rte(r.shape);
    const l = [
      [
        o
      ],
      [
        i
      ]
    ];
    return n.runWebGLProgram(a, [
      r
    ], r.dtype, l);
  }
  const ate = {
    kernelName: wa,
    backendName: "webgl",
    kernelFunc: ite
  };
  class lte {
    constructor(e) {
      this.variableNames = [
        "real",
        "imag"
      ], this.outputShape = e, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
    }
  }
  function PS(t, e) {
    return {
      dataId: e.dataId,
      dtype: e.dtype,
      shape: t.shape
    };
  }
  function cte(t) {
    const { inputs: e, backend: n } = t, { x: s } = e, r = n.texData.get(s.dataId), o = new lte(s.shape), i = [
      PS(s, r.complexTensorInfos.real),
      PS(s, r.complexTensorInfos.imag)
    ];
    return n.runWebGLProgram(o, i, i[0].dtype);
  }
  const ute = {
    kernelName: Hc,
    backendName: "webgl",
    kernelFunc: cte
  };
  class hte {
    constructor(e) {
      this.outputShape = [], this.outputShape = tr(e, 1), this.variableNames = e.map((i, a) => `T${a}`);
      const n = new Array(e.length - 1);
      n[0] = e[0][1];
      for (let i = 1; i < n.length; i++) n[i] = n[i - 1] + e[i][1];
      const s = [
        `if (yC < ${n[0]}) setOutput(getT0(yR, yC));`
      ];
      for (let i = 1; i < n.length; i++) {
        const a = n[i - 1];
        s.push(`else if (yC < ${n[i]}) setOutput(getT${i}(yR, yC-${a}));`);
      }
      const r = n.length, o = n[n.length - 1];
      s.push(`else setOutput(getT${r}(yR, yC-${o}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${s.join(`
        `)}
      }
    `;
    }
  }
  class dte {
    constructor(e, n) {
      this.packedInputs = true, this.packedOutput = true, this.outputShape = [], this.outputShape = tr(e, n);
      const s = this.outputShape, r = s.length, o = rt(r), i = mn("coords", r), a = [
        "x",
        "y",
        "z",
        "w",
        "u",
        "v"
      ].slice(0, r);
      this.variableNames = e.map((m, g) => `T${g}`);
      const l = new Array(e.length - 1);
      l[0] = e[0][n];
      for (let m = 1; m < l.length; m++) l[m] = l[m - 1] + e[m][n];
      const c = a[n], u = a.slice(-2), h = a.join();
      let d = `if (${c} < ${l[0]}) {
        return getChannel(
            getT0(${h}), vec2(${u.join()}));
        }`;
      for (let m = 1; m < l.length; m++) {
        const g = l[m - 1];
        d += `
        if (${c} < ${l[m]}  && ${c} >= ${l[m - 1]}) {
          return getChannel(
            getT${m}(${Uh(a, c, g)}),
            vec2(${Uh(u, c, g)}));
        }`;
      }
      const p = l.length, f = l[l.length - 1];
      d += `
        return getChannel(
          getT${p}(${Uh(a, c, f)}),
          vec2(${Uh(u, c, f)}));`, this.userCode = `
      float getValue(${a.map((m) => "int " + m)}) {
        ${d}
      }

      void main() {
        ${o} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[r - 1]} = ${i[r - 1]} + 1;
        if (${i[r - 1]} < ${s[r - 1]}) {
          result.g = getValue(${i});
        }

        ${i[r - 2]} = ${i[r - 2]} + 1;
        if (${i[r - 2]} < ${s[r - 2]}) {
          result.a = getValue(${i});
        }

        ${i[r - 1]} = ${i[r - 1]} - 1;
        if (${i[r - 2]} < ${s[r - 2]} &&
            ${i[r - 1]} < ${s[r - 1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `;
    }
  }
  function Uh(t, e, n) {
    const s = t.indexOf(e);
    return t.map((o, i) => i === s ? `${o} - ${n}` : o).join();
  }
  function Bm(t) {
    const { inputs: e, backend: n } = t, { input: s } = e, r = n.texData.get(s.dataId);
    return qn({
      inputs: {
        x: r.complexTensorInfos.imag
      },
      backend: n
    });
  }
  const pte = {
    kernelName: Gp,
    backendName: "webgl",
    kernelFunc: Bm
  };
  function jl(t, e, n) {
    const s = t[0].dtype;
    if (s === "complex64") {
      const p = t.map((b) => Sh({
        inputs: {
          input: b
        },
        backend: n
      })), f = t.map((b) => Bm({
        inputs: {
          input: b
        },
        backend: n
      })), m = jl(p, e, n), g = jl(f, e, n), y = To({
        inputs: {
          real: m,
          imag: g
        },
        backend: n
      });
      return p.forEach((b) => n.disposeIntermediateTensorInfo(b)), f.forEach((b) => n.disposeIntermediateTensorInfo(b)), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(g), y;
    }
    let r = n.shouldExecuteOnCPU(t);
    if (s === "string" && (r = true), r) {
      const p = t.map((x) => {
        const I = [
          -1,
          X(x.shape.slice(e))
        ];
        return be({
          inputs: {
            x
          },
          backend: n,
          attrs: {
            shape: I
          }
        });
      }), f = p.map((x) => ({
        vals: n.readSync(x.dataId),
        shape: x.shape
      })), m = tr(p.map((x) => x.shape), 1), g = p[0].shape[0] === 1, y = n9(f, m, s, g), b = tr(t.map((x) => x.shape), e), w = n.makeTensorInfo(b, s, y);
      return p.forEach((x) => n.disposeIntermediateTensorInfo(x)), w;
    }
    const o = t.filter((p) => X(p.shape) > 0), i = j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && o[0].shape.length > 1;
    if (o.length === 1) {
      const p = i ? new Ys(t[0].shape, jr) : new Yr(t[0].shape, jr);
      return n.runWebGLProgram(p, t, s);
    }
    const a = j().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
    if (o.length > a) {
      const p = [];
      for (let m = 0; m < o.length; m += a) {
        const g = o.slice(m, m + a);
        p.push(jl(g, e, n));
      }
      const f = jl(p, e, n);
      for (const m of p) n.disposeIntermediateTensorInfo(m);
      return f;
    }
    if (i) {
      const p = new dte(o.map((f) => f.shape), e);
      return n.runWebGLProgram(p, o, s);
    }
    const { tensors2D: l, outShape: c } = fte(o, e, n), u = new hte(l.map((p) => p.shape)), h = n.runWebGLProgram(u, l, s);
    l.forEach((p) => n.disposeIntermediateTensorInfo(p));
    const d = be({
      inputs: {
        x: h
      },
      attrs: {
        shape: c
      },
      backend: n
    });
    return n.disposeIntermediateTensorInfo(h), d;
  }
  function fte(t, e, n) {
    const s = tr(t.map((o) => o.shape), e);
    return {
      tensors2D: t.map((o) => be({
        inputs: {
          x: o
        },
        attrs: {
          shape: [
            -1,
            X(o.shape.slice(e))
          ]
        },
        backend: n
      })),
      outShape: s
    };
  }
  function hR(t) {
    const { inputs: e, backend: n, attrs: s } = t, { axis: r } = s, o = Ve(r, e[0].shape)[0], i = e.map((c) => c.shape);
    Ox(i, o);
    const a = tr(e.map((c) => c.shape), o);
    if (X(a) === 0) return n.makeTensorInfo(a, e[0].dtype, []);
    const l = e.filter((c) => X(c.shape) > 0);
    return l.length === 1 ? qn({
      inputs: {
        x: l[0]
      },
      backend: n
    }) : jl(l, o, n);
  }
  const mte = {
    kernelName: jc,
    backendName: "webgl",
    kernelFunc: hR
  };
  class dR {
    constructor(e, n = false, s = null, r = false, o = false) {
      this.variableNames = [
        "x",
        "W"
      ], this.outputShape = e.outShape;
      const i = e.padInfo.top, a = e.padInfo.left, l = e.strideHeight, c = e.strideWidth, u = e.dilationHeight, h = e.dilationWidth, d = e.filterHeight, p = e.filterWidth, f = Math.floor(e.inChannels / 4) * 4, m = e.inChannels % 4, g = e.dataFormat === "channelsLast", y = g ? 1 : 2, b = g ? 2 : 3, w = g ? 3 : 1;
      let x = "", S = "";
      s && (r ? x = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? x = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : x = `
          float activation(float x) {
            ${s}
          }
        `, S = "result = activation(result);");
      const I = n ? "result += getBiasAtOutCoords();" : "";
      n && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${x}

      const ivec2 strides = ivec2(${l}, ${c});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${y}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${d}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${p}; wC++) {
            int xC = xCCorner + wC * ${h};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${m === 1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${m === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${m === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${I}
        ${S}
        setOutput(result);
      }
    `;
    }
  }
  class gte {
    constructor(e) {
      this.variableNames = [
        "x",
        "W"
      ], this.outputShape = e.outShape;
      const n = e.padInfo.front, s = e.padInfo.top, r = e.padInfo.left, o = e.strideDepth, i = e.strideHeight, a = e.strideWidth, l = e.dilationDepth, c = e.dilationHeight, u = e.dilationWidth, h = e.filterDepth, d = e.filterHeight, p = e.filterWidth, f = Math.floor(e.inChannels / 4) * 4, m = e.inChannels % 4;
      this.userCode = `
      const ivec3 strides = ivec3(${o}, ${i}, ${a});
      const ivec3 pads = ivec3(${n}, ${s}, ${r});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${h}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d}; wR++) {
            int xR = xRCorner + wR * ${c};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${m === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${m === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${m === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
  }
  class pR {
    constructor(e, n = false, s = null, r = false, o = false) {
      this.variableNames = [
        "x",
        "W"
      ], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [
        {
          name: "pads",
          type: "ivec2"
        },
        {
          name: "strides",
          type: "ivec2"
        },
        {
          name: "dilations",
          type: "ivec2"
        },
        {
          name: "inDims",
          type: "ivec2"
        }
      ], this.outputShape = e.outShape, this.enableShapeUniforms = cn(this.outputShape.length);
      const i = e.padInfo.left, a = e.strideWidth, l = e.dilationWidth, c = e.filterHeight, u = e.filterWidth, h = u;
      let d = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
      for (let g = 0; g < u; g++) d += `
           vec4 xTexelC${g * 2};
           int xTexelC${g * 2}Ready;
           vec4 xTexelC${g * 2 + 1};
           int xTexelC${g * 2 + 1}Ready;
           vec4 xC${g};`;
      d += `
     for (int r = 0; r < ${c}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;
      for (let g = 0; g < u; g++) d += `
           xTexelC${g * 2} = vec4(0.0);
           xTexelC${g * 2}Ready = 0;
           xTexelC${g * 2 + 1} = vec4(0.0);
           xTexelC${g * 2 + 1}Ready = 0;
           xC${g} = vec4(0.0);`;
      d += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
      for (let g = 0; g < (h + 1) / 2; g++) {
        const y = g * 2;
        if (d += `
           xC = xCCorner + ${y * l};
           `, a === 1) {
          if (y < u && (i % 2 === 1 ? (d += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }
               `, l === 1 && y > 0 ? d += `
                 xC${y} = vec4(xTexelC${y - 2}.zw, xTexelC${y}.xy);
                 ` : d += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);
                   } else {
                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);
                   }
                   `) : d += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xC${y} = xTexelC${y};
                 `, y + 1 < u)) {
            const b = i % 2 === 0 ? yp(l) : l;
            l % 2 === 0 && i % 2 === 1 || l % 2 !== 0 && i % 2 !== 1 ? (d += `
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                     xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${y + 1}.zw = vec2(0.0);
                     }
                     xTexelC${y + 1}Ready = 1;
                   }
                   `, l > 1 ? d += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${y + 1} = vec4(previous.zw, xTexelC${y + 1}.xy);
                     } else {
                      xC${y + 1} = vec4(0.0, 0.0, xTexelC${y + 1}.xy);
                     }
                     ` : d += `
                     xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.xy);
                     `) : b === 1 ? d += `
                     xC${y + 1} = xTexelC${y};
                     ` : d += `
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                       xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${y + 1}.zw = vec2(0.0);
                       }
                       xTexelC${y + 1}Ready = 1;
                     }

                     xC${y + 1} = xTexelC${y + 1};
                     `;
          }
        } else y < u && (i % 2 === 1 ? (d += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y + 1}Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.0);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
               `, y + 1 < u && (d += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${y + 1} = vec4(xTexelC${y + 1}.xy, final.xy);
                 `)) : (d += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(
                   xTexelC${y}.xy, xTexelC${y + 1}.xy);
               `, y + 1 < u && (d += `
                   xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
                 `)));
        y < u && (d += `
             wTexel = getW(r, ${y}, d1, d2);
             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, y + 1 < u && (d += `
               wTexel = getW(r, ${y + 1}, d1, d2);
               dotProd += xC${y + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${y + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
      }
      d += `
     }
   `, d += `
     }
   `, d += `
     }
   `;
      let p = "", f = "";
      s && (r ? p = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${s}
         }` : o ? p = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${s}
         }` : p = `vec4 activation(vec4 x) {
           ${s}
         }`, f = "result = activation(result);");
      const m = n ? "result += getBiasAtOutCoords();" : "";
      n && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${m}
         ${f}
         setOutput(result);
       }
     `;
    }
  }
  class yte {
    constructor(e, n) {
      this.variableNames = [
        "A"
      ], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [
        {
          name: "inputShape",
          type: "ivec4"
        },
        {
          name: "pad",
          type: "ivec2"
        },
        {
          name: "stride",
          type: "ivec2"
        },
        {
          name: "dilation",
          type: "ivec2"
        },
        {
          name: "inChannels",
          type: "int"
        },
        {
          name: "itemsPerBlockRow",
          type: "int"
        },
        {
          name: "outWidth",
          type: "int"
        }
      ], this.outputShape = e, this.enableShapeUniforms = cn(this.outputShape.length);
      const { dataFormat: s } = n, r = vn(), o = s === "channelsLast", i = o ? 1 : 2, a = o ? 2 : 3, l = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;
      let c = "";
      for (let u = 0; u <= 1; u++) for (let h = 0; h <= 1; h++) c += `
          blockIndex = rc.z + ${h};
          pos = rc.y + ${u};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${o}) {
                  innerDims = vec2(d1, ch);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
      this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${c}

        ${r.output} = result;
      }
    `;
    }
  }
  function Yd(t, e) {
    const n = t.length;
    return n >= 3 ? e ? [
      ...t.slice(0, -3),
      t[n - 3] * t[n - 2],
      t[n - 1]
    ] : [
      ...t.slice(0, -3),
      t[n - 3],
      t[n - 2] * t[n - 1]
    ] : !e && n === 1 && t[0] > 1 ? [
      t[0],
      1
    ] : null;
  }
  function fR({ x: t, filter: e, convInfo: n, backend: s, bias: r = null, preluActivationWeights: o = null, leakyreluAlpha: i = 0, activation: a = null }) {
    const l = t.shape, c = s.texData.get(t.dataId), u = n.inChannels, h = l[0] * l[1] * l[2], d = n.outChannels, p = n.dataFormat === "channelsLast", f = false, m = false;
    let g;
    const y = [];
    if (o != null) {
      const x = Yd(o.shape, p);
      x != null && (o = be({
        inputs: {
          x: o
        },
        backend: s,
        attrs: {
          shape: x
        }
      }), y.push(o));
    }
    if (r != null) {
      const x = Yd(r.shape, p);
      x != null && (r = be({
        inputs: {
          x: r
        },
        backend: s,
        attrs: {
          shape: x
        }
      }), y.push(r));
    }
    if (!((h === 1 || d === 1) && u > iR) && c.isPacked && p && c.texture != null && l[2] % 2 !== 0 && Ue(c.shape.slice(-3), l.slice(-3))) {
      const x = l[0] * l[1] * (l[2] + 1), S = {
        dataId: t.dataId,
        shape: [
          1,
          x,
          n.inChannels
        ],
        dtype: t.dtype
      }, I = c.shape;
      c.shape = c.shape.slice(), c.shape[c.shape.length - 2]++, C(Tc(c.shape, S.shape), () => `packed reshape ${c.shape} to ${S.shape} isn't free`);
      const E = be({
        inputs: {
          x: e
        },
        backend: s,
        attrs: {
          shape: [
            1,
            n.inChannels,
            n.outChannels
          ]
        }
      });
      y.push(E);
      const R = Xd({
        a: S,
        b: E,
        backend: s,
        transposeA: f,
        transposeB: m,
        bias: r,
        activation: a,
        preluActivationWeights: o,
        leakyreluAlpha: i
      }), N = s.texData.get(R.dataId);
      C(N.isPacked, () => "batchMatMul result is expected to be packed"), c.shape = I, N.shape = n.outShape, g = qn({
        inputs: {
          x: R
        },
        backend: s
      }), g.shape = n.outShape, y.push(R);
    } else {
      const x = n.outHeight * n.outWidth, S = be({
        inputs: {
          x: t
        },
        backend: s,
        attrs: {
          shape: p ? [
            n.batchSize,
            x,
            n.inChannels
          ] : [
            n.batchSize,
            n.inChannels,
            x
          ]
        }
      }), I = be({
        inputs: {
          x: e
        },
        backend: s,
        attrs: {
          shape: [
            1,
            n.inChannels,
            n.outChannels
          ]
        }
      }), E = Xd({
        a: p ? S : I,
        b: p ? I : S,
        transposeA: !p,
        transposeB: m,
        backend: s,
        bias: r,
        activation: a,
        preluActivationWeights: o,
        leakyreluAlpha: i
      });
      g = be({
        inputs: {
          x: E
        },
        backend: s,
        attrs: {
          shape: n.outShape
        }
      }), y.push(S), y.push(I), y.push(E);
    }
    for (const x of y) s.disposeIntermediateTensorInfo(x);
    return g;
  }
  function mR({ x: t, filter: e, convInfo: n, backend: s, bias: r = null, preluActivationWeights: o = null, leakyreluAlpha: i = 0, activation: a = null }) {
    const { filterWidth: l, filterHeight: c, inChannels: u, outWidth: h, outHeight: d, dataFormat: p } = n, f = p === "channelsLast", m = l * c * u, g = d * h, y = [
      n.batchSize,
      m,
      g
    ], b = true, w = false, x = [];
    if (o != null) {
      const G = Yd(o.shape, f);
      G != null && (o = be({
        inputs: {
          x: o
        },
        backend: s,
        attrs: {
          shape: G
        }
      }), x.push(o));
    }
    if (r != null) {
      const G = Yd(r.shape, f);
      G != null && (r = be({
        inputs: {
          x: r
        },
        backend: s,
        attrs: {
          shape: G
        }
      }), x.push(r));
    }
    const S = be({
      inputs: {
        x: e
      },
      backend: s,
      attrs: {
        shape: [
          1,
          m,
          X(e.shape) / m
        ]
      }
    });
    x.push(S);
    const I = new yte(y, n), E = [
      t.shape,
      [
        n.padInfo.top,
        n.padInfo.left
      ],
      [
        n.strideHeight,
        n.strideWidth
      ],
      [
        n.dilationHeight,
        n.dilationWidth
      ],
      [
        n.inChannels
      ],
      [
        n.filterWidth * n.inChannels
      ],
      [
        n.outWidth
      ]
    ], R = s.runWebGLProgram(I, [
      t
    ], "float32", E), N = be({
      inputs: {
        x: R
      },
      backend: s,
      attrs: {
        shape: y
      }
    });
    x.push(R), x.push(N);
    const k = r != null, $ = o != null, F = a === "leakyrelu", M = a ? Ec(a, true) : null, U = new oR(f ? N.shape : S.shape, f ? S.shape : N.shape, f ? [
      n.batchSize,
      g,
      n.outChannels
    ] : [
      n.batchSize,
      n.outChannels,
      g
    ], b, w, k, M, $, F), W = f ? [
      N,
      S
    ] : [
      S,
      N
    ];
    if (r && W.push(r), $ && W.push(o), F) {
      const G = s.makeTensorInfo([], "float32", _r(i, "float32"));
      W.push(G), x.push(G);
    }
    const V = s.runWebGLProgram(U, W, "float32"), H = be({
      inputs: {
        x: V
      },
      backend: s,
      attrs: {
        shape: n.outShape
      }
    });
    x.push(V);
    for (const G of x) s.disposeIntermediateTensorInfo(G);
    return H;
  }
  function bte(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, filter: o } = e, { strides: i, pad: a, dataFormat: l, dilations: c, dimRoundingMode: u } = s, h = Or(l), d = jt(r.shape, o.shape, i, c, a, u, false, h);
    let p;
    if (d.filterHeight === 1 && d.filterWidth === 1 && d.dilationHeight === 1 && d.dilationWidth === 1 && d.strideHeight === 1 && d.strideWidth === 1 && (d.padInfo.type === "SAME" || d.padInfo.type === "VALID")) p = fR({
      x: r,
      filter: o,
      convInfo: d,
      backend: n
    });
    else if (d.strideWidth <= 2 && h === "channelsLast" && j().getBool("WEBGL_EXP_CONV")) {
      const m = new pR(d), g = [
        [
          d.padInfo.top,
          d.padInfo.left
        ],
        [
          d.strideHeight,
          d.strideWidth
        ],
        [
          d.dilationHeight,
          d.dilationWidth
        ],
        [
          d.inHeight,
          d.inWidth
        ]
      ];
      p = n.runWebGLProgram(m, [
        r,
        o
      ], "float32", g);
    } else if (j().getBool("WEBGL_CONV_IM2COL")) p = mR({
      x: r,
      filter: o,
      convInfo: d,
      backend: n
    });
    else {
      const m = new dR(d);
      p = n.runWebGLProgram(m, [
        r,
        o
      ], "float32");
    }
    const f = be({
      inputs: {
        x: p
      },
      backend: n,
      attrs: {
        shape: d.outShape
      }
    });
    return n.disposeIntermediateTensorInfo(p), f;
  }
  const xte = {
    kernelName: qc,
    backendName: "webgl",
    kernelFunc: bte
  };
  class wte {
    constructor(e) {
      this.variableNames = [
        "x",
        "dy"
      ], this.outputShape = e.filterShape;
      const n = e.strideHeight, s = e.strideWidth, r = e.padInfo.top, o = e.padInfo.left, i = e.dataFormat === "channelsLast";
      this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${n} - ${r};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${o};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              ${i ? `float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);` : `float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
  }
  class vte {
    constructor(e) {
      this.variableNames = [
        "dy",
        "W"
      ], this.outputShape = e.inShape;
      const n = e.filterHeight, s = e.filterWidth, r = e.strideHeight, o = e.strideWidth, i = e.dataFormat === "channelsLast", a = n - 1 - e.padInfo.top, l = s - 1 - e.padInfo.left, c = i ? 1 : 2, u = i ? 2 : 3, h = i ? 3 : 1;
      this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${h}];

        ivec2 dyCorner = ivec2(coords[${c}], coords[${u}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${n}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${n} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
  }
  class Ste {
    constructor(e) {
      this.variableNames = [
        "x",
        "dy"
      ], this.outputShape = e.filterShape;
      const n = e.strideDepth, s = e.strideHeight, r = e.strideWidth, o = e.padInfo.front, i = e.padInfo.top, a = e.padInfo.left;
      this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${n} - ${o};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${s} - ${i};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${r} - ${a};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
  }
  class $te {
    constructor(e) {
      this.variableNames = [
        "dy",
        "W"
      ], this.outputShape = e.inShape;
      const n = e.filterDepth, s = e.filterHeight, r = e.filterWidth, o = e.strideDepth, i = e.strideHeight, a = e.strideWidth, l = n - 1 - e.padInfo.front, c = s - 1 - e.padInfo.top, u = r - 1 - e.padInfo.left;
      this.userCode = `
      const ivec3 pads = ivec3(${l}, ${c}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${n}; wF++) {
          float dyF = float(dyFCorner + wF) / ${o}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${n} - 1 - wF;

          for (int wR = 0; wR < ${s}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${s} - 1 - wR;

            for (int wC = 0; wC < ${r}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${r} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
  }
  function Cte(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, dy: o } = e, { strides: i, pad: a, dataFormat: l, dimRoundingMode: c, filterShape: u } = s, h = Or(l), d = jt(r.shape, u, i, 1, a, c, false, h), p = new wte(d);
    return n.runWebGLProgram(p, [
      r,
      o
    ], "float32");
  }
  const Ite = {
    kernelName: Np,
    backendName: "webgl",
    kernelFunc: Cte
  };
  class Nte {
    constructor(e) {
      this.variableNames = [
        "dy",
        "W"
      ], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [
        {
          name: "strides",
          type: "vec2"
        }
      ], this.outputShape = e.inShape, this.enableShapeUniforms = cn(this.outputShape.length);
      const n = e.filterHeight, s = e.filterWidth, r = n - 1 - e.padInfo.top, o = s - 1 - e.padInfo.left;
      this.userCode = `
      const ivec2 pads = ivec2(${r}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${n}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${n} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            int wCPerm = ${s} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `;
    }
  }
  function kte(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, filter: o } = e, { inputShape: i, strides: a, pad: l, dataFormat: c, dimRoundingMode: u } = s, h = Or(c), d = jt(i, o.shape, a, 1, l, u, false, h);
    if (j().getBool("WEBGL_PACK_CONV2DTRANSPOSE") && h === "channelsLast") {
      const p = [
        [
          d.strideHeight,
          d.strideWidth
        ]
      ], f = new Nte(d);
      return n.runWebGLProgram(f, [
        r,
        o
      ], "float32", p);
    } else {
      const p = new vte(d);
      return n.runWebGLProgram(p, [
        r,
        o
      ], "float32");
    }
  }
  const Tte = {
    kernelName: Kc,
    backendName: "webgl",
    kernelFunc: kte
  };
  function Ete(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, filter: o } = e, { strides: i, pad: a, dilations: l } = s, c = vo(r.shape, o.shape, i, l, a), u = new gte(c);
    return n.runWebGLProgram(u, [
      r,
      o
    ], "float32");
  }
  const Rte = {
    kernelName: Xc,
    backendName: "webgl",
    kernelFunc: Ete
  };
  function Ate(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, dy: o } = e, { strides: i, pad: a, filterShape: l } = s, c = vo(r.shape, l, i, 1, a), u = new Ste(c);
    return n.runWebGLProgram(u, [
      r,
      o
    ], "float32");
  }
  const _te = {
    kernelName: kp,
    backendName: "webgl",
    kernelFunc: Ate
  };
  function Dte(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, filter: o } = e, { pad: i, strides: a, inputShape: l } = s, c = vo(l, o.shape, a, 1, i), u = new $te(c);
    return n.runWebGLProgram(u, [
      r,
      o
    ], "float32");
  }
  const Ote = {
    kernelName: Tp,
    backendName: "webgl",
    kernelFunc: Dte
  };
  const Fte = kl + `
  return cos(x);
`, Lte = `
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${Ei}
  return result;
`, Pte = Ye({
    opSnippet: Fte,
    packedOpSnippet: Lte
  }), zte = {
    kernelName: va,
    backendName: "webgl",
    kernelFunc: Pte
  };
  const Mte = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`, Bte = Ye({
    opSnippet: Mte
  }), Vte = {
    kernelName: Sa,
    backendName: "webgl",
    kernelFunc: Bte
  };
  class Wte {
    constructor(e, n, s, r, o) {
      this.variableNames = [
        "Image",
        "Boxes",
        "BoxInd"
      ], this.outputShape = [];
      const [i, a, l, c] = e, [u] = n, [h, d] = s;
      this.outputShape = [
        u,
        h,
        d,
        c
      ];
      const p = r === "bilinear" ? 1 : 0, [f, m] = [
        `${a - 1}.0`,
        `${l - 1}.0`
      ], [g, y, b] = h > 1 ? [
        `${(a - 1) / (h - 1)}`,
        "(y2-y1) * height_ratio",
        `y1*${f} + float(y)*(height_scale)`
      ] : [
        "0.0",
        "0.0",
        `0.5 * (y1+y2) * ${f}`
      ], [w, x, S] = d > 1 ? [
        `${(l - 1) / (d - 1)}`,
        "(x2-x1) * width_ratio",
        `x1*${m} + float(x)*(width_scale)`
      ] : [
        "0.0",
        "0.0",
        `0.5 * (x1+x2) * ${m}`
      ];
      this.userCode = `
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${y};
        float width_scale = ${x};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${o}));
          return;
        }
        float in_x = ${S};
        if( in_x < 0.0 || in_x > ${m} ) {
          setOutput(float(${o}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${p} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
    }
  }
  const Ute = (t) => {
    const { inputs: e, backend: n, attrs: s } = t, { image: r, boxes: o, boxInd: i } = e, { cropSize: a, method: l, extrapolationValue: c } = s, u = new Wte(r.shape, o.shape, a, l, c);
    return n.runWebGLProgram(u, [
      r,
      o,
      i
    ], "float32");
  }, Gte = {
    kernelName: Rp,
    backendName: "webgl",
    kernelFunc: Ute
  };
  var Ac;
  (function(t) {
    t.Prod = "*", t.Sum = "+";
  })(Ac || (Ac = {}));
  class zS {
    constructor(e, n, s, r) {
      this.op = e, this.outputShape = n, this.variableNames = [
        "x"
      ], this.customUniforms = [
        {
          name: "index",
          type: "float"
        }
      ];
      const o = this.outputShape.length, i = this.op === Ac.Prod ? "1.0" : "0.0", a = s ? i : `getX(${MS(o, "coords", this.op)})`, l = this.outputShape[this.outputShape.length - 1];
      let c = "", u = "";
      s ? (c = r ? `end != ${l - 1}` : "end != 0", u = r ? "end + 1" : "end - 1") : (c = r ? `end + pow2 < ${l}` : "end >= pow2", u = r ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${rt(o)} coords = getOutputCoords();
        int end = ${BS(o, "coords", this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${c}) {
          int idx = ${u};
          ${BS(o, "coords", this.op)} = idx;
          val ${this.op}= getX(${MS(o, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
    }
  }
  function MS(t, e, n) {
    if (t === 1) return `${e}`;
    if (t === 2) return `${e}.x, ${e}.y`;
    if (t === 3) return `${e}.x, ${e}.y, ${e}.z`;
    if (t === 4) return `${e}.x, ${e}.y, ${e}.z, ${e}.w`;
    throw new Error(`Cumulative ${n} for rank ${t} is not yet supported`);
  }
  function BS(t, e, n) {
    if (t === 1) return `${e}`;
    if (t === 2) return `${e}.y`;
    if (t === 3) return `${e}.z`;
    if (t === 4) return `${e}.w`;
    throw new Error(`Cumulative ${n} for rank ${t} is not yet supported`);
  }
  function gR(t, e, n, s, r, o) {
    const i = e.shape.length, a = bt([
      s
    ], i);
    let l = e;
    a != null && (l = bn({
      inputs: {
        x: e
      },
      backend: n,
      attrs: {
        perm: a
      }
    }));
    const c = Ct(1, i)[0];
    if (c !== i - 1) throw new Error(`WebGL cumprod shader expects an inner-most axis=${e.shape.length - 1} but got axis=${s}`);
    const u = l.shape[c];
    let h = qn({
      inputs: {
        x: l
      },
      backend: n
    });
    for (let d = 0; d <= Math.ceil(Math.log2(u)) - 1; d++) {
      const p = new zS(t, l.shape, false, o), f = [
        [
          d
        ]
      ], m = h;
      h = n.runWebGLProgram(p, [
        h
      ], h.dtype, f), n.disposeIntermediateTensorInfo(m);
    }
    if (r) {
      const d = new zS(t, l.shape, r, o), p = h;
      h = n.runWebGLProgram(d, [
        h
      ], h.dtype), n.disposeIntermediateTensorInfo(p);
    }
    if (a != null) {
      const d = So(a), p = bn({
        inputs: {
          x: h
        },
        backend: n,
        attrs: {
          perm: d
        }
      });
      return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(l), p;
    }
    return h;
  }
  function Hte(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, exclusive: i, reverse: a } = s;
    return gR(Ac.Prod, r, n, o, i, a);
  }
  const jte = {
    kernelName: Ep,
    backendName: "webgl",
    kernelFunc: Hte
  };
  function qte(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, exclusive: i, reverse: a } = s;
    return gR(Ac.Sum, r, n, o, i, a);
  }
  const Kte = {
    kernelName: Yc,
    backendName: "webgl",
    kernelFunc: qte
  };
  function Xte(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, weights: o } = e, { size: i, binaryOutput: a } = s;
    if (r.shape.length === 1) {
      const l = n.readSync(r.dataId), c = n.readSync(o.dataId), u = K2(l, c, o.dtype, o.shape, i);
      return n.makeTensorInfo([
        i
      ], o.dtype, u);
    } else if (r.shape.length === 2) {
      const l = n.bufferSync(r), c = n.bufferSync(o), u = JJ(l, c, i, a);
      return n.makeTensorInfo(u.shape, o.dtype, u.values);
    }
    throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
  }
  const Yte = {
    kernelName: Ap,
    backendName: "webgl",
    kernelFunc: Xte
  };
  class Zte {
    constructor(e, n, s) {
      this.variableNames = [
        "x"
      ], this.outputShape = [], this.outputShape = e, this.blockSize = n, this.dataFormat = s, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${n};
      int offset_h = imod(h, ${n});
      int in_w = w / ${n};
      int offset_w = imod(w, ${n});
      int offset_d = (offset_h * ${n} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
    }
    getHeightCoordString() {
      return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
    }
    getWidthCoordString() {
      return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
    }
    getDepthCoordString() {
      return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
    }
    getOutputDepthSize() {
      return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
    }
    getInputSamplingString() {
      return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
    }
  }
  function Jte(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { blockSize: o, dataFormat: i } = s, a = r.shape[0], l = i === "NHWC" ? r.shape[1] : r.shape[2], c = i === "NHWC" ? r.shape[2] : r.shape[3], u = i === "NHWC" ? r.shape[3] : r.shape[1], h = l * o, d = c * o, p = u / (o * o), f = i === "NHWC" ? [
      a,
      h,
      d,
      p
    ] : [
      a,
      p,
      h,
      d
    ], m = new Zte(f, o, i);
    return n.runWebGLProgram(m, [
      r
    ], r.dtype);
  }
  const Qte = {
    kernelName: _p,
    backendName: "webgl",
    kernelFunc: Jte
  };
  class yR {
    constructor(e, n = false, s = null, r = false, o = false) {
      this.variableNames = [
        "x",
        "W"
      ], this.customUniforms = [
        {
          name: "pads",
          type: "ivec2"
        },
        {
          name: "strides",
          type: "ivec2"
        },
        {
          name: "dilations",
          type: "ivec2"
        },
        {
          name: "inDims",
          type: "ivec2"
        }
      ], this.outputShape = e.outShape, this.enableShapeUniforms = cn(this.outputShape.length);
      const i = e.filterHeight, a = e.filterWidth, l = e.outChannels / e.inChannels;
      let c = "", u = "";
      s && (r ? c = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? c = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : c = `
          float activation(float x) {
            ${s}
          }
        `, u = "result = activation(result);");
      const h = n ? "result += getBiasAtOutCoords();" : "";
      n && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${c}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${h}
        ${u}
        setOutput(result);
      }
    `;
    }
  }
  class bR {
    constructor(e, n = false, s = null, r = false, o = false) {
      this.variableNames = [
        "x",
        "W"
      ], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [
        {
          name: "pads",
          type: "ivec2"
        },
        {
          name: "strides",
          type: "ivec2"
        },
        {
          name: "dilations",
          type: "ivec2"
        },
        {
          name: "inDims",
          type: "ivec2"
        }
      ], this.outputShape = e.outShape, this.enableShapeUniforms = cn(this.outputShape.length);
      const i = e.outChannels / e.inChannels, a = e.padInfo.left, l = e.strideWidth, c = e.dilationWidth, u = e.filterHeight, h = e.filterWidth, d = h;
      let p = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
      for (let y = 0; y < h; y++) p += `
          vec4 xTexelC${y * 2};
          int xTexelC${y * 2}Ready;
          vec4 xTexelC${y * 2 + 1};
          int xTexelC${y * 2 + 1}Ready;
          vec4 xC${y};`;
      p += `
    for (int r = 0; r < ${u}; r++) {
      `;
      for (let y = 0; y < h; y++) p += `
          xTexelC${y * 2} = vec4(0.0);
          xTexelC${y * 2}Ready = 0;
          xTexelC${y * 2 + 1} = vec4(0.0);
          xTexelC${y * 2 + 1}Ready = 0;
          xC${y} = vec4(0.0);`;
      p += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
      for (let y = 0; y < (d + 1) / 2; y++) {
        const b = y * 2;
        if (p += `
          xC = xCCorner + ${b * c};
          `, l === 1) {
          if (b < h && (a % 2 === 1 ? (p += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `, c === 1 && b > 0 ? p += `
                xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                ` : p += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `) : p += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `, b + 1 < h)) {
            const w = a % 2 === 0 ? yp(c) : c;
            c % 2 === 0 && a % 2 === 1 || c % 2 !== 0 && a % 2 !== 1 ? (p += `
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                    xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b + 1}.zw = vec2(0.0);
                    }
                    xTexelC${b + 1}Ready = 1;
                  }
                  `, c > 1 ? p += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                    } else {
                     xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                    }
                    ` : p += `
                    xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                    `) : w === 1 ? p += `
                    xC${b + 1} = xTexelC${b};
                    ` : p += `
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                      xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b + 1}.zw = vec2(0.0);
                      }
                      xTexelC${b + 1}Ready = 1;
                    }

                    xC${b + 1} = xTexelC${b + 1};
                    `;
          }
        } else b < h && (a % 2 === 1 ? (p += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.0);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
              `, b + 1 < h && (p += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                `)) : (p += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b + 1}.xy);
              `, b + 1 < h && (p += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                `)));
        b < h && (p += `
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `, b + 1 < h && (p += `
              wTexel = getW(r, ${b + 1}, d1, q);
              dotProd += xC${b + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
      }
      p += `
    }
  `, p += `
      }
    `;
      let f = "", m = "";
      s && (r ? f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : f = `vec4 activation(vec4 x) {
          ${s}
        }`, m = "result = activation(result);");
      const g = n ? "result += getBiasAtOutCoords();" : "";
      n && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${m}
        setOutput(result);
      }
    `;
    }
  }
  function ene(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, filter: o } = e, { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
    let u = l;
    u == null && (u = [
      1,
      1
    ]), C(sn(i, u), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);
    const h = jt(r.shape, o.shape, i, u, a, c, true);
    let d;
    j().getBool("WEBGL_PACK_DEPTHWISECONV") && h.strideWidth <= 2 && h.outChannels / h.inChannels === 1 ? d = new bR(h) : d = new yR(h);
    const p = [
      [
        h.padInfo.top,
        h.padInfo.left
      ],
      [
        h.strideHeight,
        h.strideWidth
      ],
      [
        h.dilationHeight,
        h.dilationWidth
      ],
      [
        h.inHeight,
        h.inWidth
      ]
    ];
    return n.runWebGLProgram(d, [
      r,
      o
    ], "float32", p);
  }
  const tne = {
    kernelName: Zc,
    backendName: "webgl",
    kernelFunc: ene
  };
  class nne {
    constructor(e) {
      this.variableNames = [
        "x",
        "dy"
      ], this.outputShape = e.filterShape;
      const n = e.strideHeight, s = e.strideWidth, r = e.padInfo.top, o = e.padInfo.left, i = e.outChannels / e.inChannels;
      this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${n} - ${r};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${o};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
  }
  class sne {
    constructor(e) {
      this.variableNames = [
        "dy",
        "W"
      ], this.outputShape = e.inShape;
      const n = e.filterHeight, s = e.filterWidth, r = e.strideHeight, o = e.strideWidth, i = n - 1 - e.padInfo.top, a = s - 1 - e.padInfo.left, l = e.outChannels / e.inChannels;
      this.userCode = `
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${n}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${n} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
  }
  function rne(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, dy: o } = e, { strides: i, dilations: a, pad: l, dimRoundingMode: c, filterShape: u } = s, h = jt(r.shape, u, i, a, l, c, true), d = new nne(h);
    return n.runWebGLProgram(d, [
      r,
      o
    ], "float32");
  }
  const one = {
    kernelName: Dp,
    backendName: "webgl",
    kernelFunc: rne
  };
  function ine(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, filter: o } = e, { strides: i, dilations: a, pad: l, dimRoundingMode: c, inputShape: u } = s, h = jt(u, o.shape, i, a, l, c, true), d = new sne(h);
    return n.runWebGLProgram(d, [
      r,
      o
    ], "float32");
  }
  const ane = {
    kernelName: Op,
    backendName: "webgl",
    kernelFunc: ine
  };
  class lne {
    constructor(e) {
      this.variableNames = [
        "X"
      ], this.outputShape = [
        e,
        e
      ], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
    }
  }
  function cne(t) {
    const { inputs: e, backend: n } = t, { x: s } = e, r = [
      ...s.shape,
      ...s.shape
    ], o = X(s.shape), i = be({
      inputs: {
        x: s
      },
      backend: n,
      attrs: {
        shape: [
          o
        ]
      }
    }), a = new lne(o), l = n.runWebGLProgram(a, [
      i
    ], i.dtype), c = be({
      inputs: {
        x: l
      },
      backend: n,
      attrs: {
        shape: r
      }
    });
    return n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(l), c;
  }
  const une = {
    kernelName: Fp,
    backendName: "webgl",
    kernelFunc: cne
  };
  class hne {
    constructor(e) {
      this.variableNames = [
        "x",
        "W"
      ], this.outputShape = e.outShape;
      const { inHeight: n, inWidth: s, padInfo: r, strideHeight: o, strideWidth: i, filterHeight: a, filterWidth: l, dilationHeight: c, dilationWidth: u } = e, { top: h, left: d } = r;
      this.userCode = `
      const ivec2 strides = ivec2(${o}, ${i});
      const ivec2 pads = ivec2(${h}, ${d});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${c};

          if (hIn >= 0 && hIn < ${n}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${s}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
    }
  }
  function dne(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, filter: o } = e, { strides: i, pad: a, dilations: l } = s, c = Vu(r.shape, o.shape, i, a, "NHWC", l);
    let u;
    const h = new hne(c);
    u = n.runWebGLProgram(h, [
      r,
      o
    ], "float32");
    const d = be({
      inputs: {
        x: u
      },
      backend: n,
      attrs: {
        shape: c.outShape
      }
    });
    return n.disposeIntermediateTensorInfo(u), d;
  }
  const pne = {
    kernelName: Jc,
    backendName: "webgl",
    kernelFunc: dne
  };
  function fne(t) {
    const { inputs: e, backend: n, attrs: s } = t, { equation: r } = s, o = e, { allDims: i, summedDims: a, idDims: l } = jx(r, o.length);
    Kx(i.length, l, o);
    const { path: c, steps: u } = Xx(a, l), h = u.length;
    let d = null, p = i.length;
    const f = [];
    for (let m = 0; m < h; ++m) {
      for (const g of u[m]) {
        const { permutationIndices: y, expandDims: b } = qx(p, l[g]);
        let w;
        Yx(y) ? w = o[g] : (w = bn({
          inputs: {
            x: o[g]
          },
          backend: n,
          attrs: {
            perm: y
          }
        }), f.push(w));
        const x = w.shape.slice();
        for (let S = 0; S < b.length; ++S) x.splice(b[S], 0, 1);
        Ue(w.shape, x) || (w = be({
          inputs: {
            x: w
          },
          backend: n,
          attrs: {
            shape: x
          }
        }), f.push(w)), d === null ? d = w : (d = t1({
          inputs: {
            a: w,
            b: d
          },
          backend: n
        }), f.push(d));
      }
      m < h - 1 && (c[m] >= 0 && (d = Mm({
        inputs: {
          x: d
        },
        backend: n,
        attrs: {
          axis: c[m] - (i.length - p),
          keepDims: false
        }
      }), f.push(d)), p--);
    }
    for (const m of f) m !== d && n.disposeIntermediateTensorInfo(m);
    return d;
  }
  const mne = {
    kernelName: Pp,
    backendName: "webgl",
    kernelFunc: fne
  };
  const gne = "return (x >= 0.0) ? x : (exp(x) - 1.0);", yne = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, bne = Ye({
    opSnippet: gne,
    packedOpSnippet: yne
  }), xne = {
    kernelName: Ca,
    backendName: "webgl",
    kernelFunc: bne
  };
  const wne = "return (b >= 0.0) ? a : a * (b + 1.0);", vne = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`, Sne = (t) => {
    const { inputs: e, backend: n } = t, { dy: s, y: r } = e, o = j().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Nl(vne, s.shape, r.shape) : new mi(wne, s.shape, r.shape);
    return n.runWebGLProgram(o, [
      s,
      r
    ], s.dtype);
  }, $ne = {
    kernelName: zp,
    backendName: "webgl",
    kernelFunc: Sne
  };
  const Cne = `
  return vec4(equal(a, b));
`, Ine = "return float(a == b);", Nne = an({
    opSnippet: Ine,
    packedOpSnippet: Cne,
    dtype: "bool",
    cpuKernelImpl: s9
  }), kne = {
    kernelName: Qc,
    backendName: "webgl",
    kernelFunc: Nne
  };
  const Tne = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${Mx};
  float a1 = ${Bx};
  float a2 = ${Vx};
  float a3 = ${Wx};
  float a4 = ${Ux};
  float a5 = ${Gx};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`, Ene = Ye({
    opSnippet: Tne
  }), Rne = {
    kernelName: Ia,
    backendName: "webgl",
    kernelFunc: Ene
  };
  const Ane = kl + `
  return exp(x);
`, _ne = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, xR = Ye({
    opSnippet: Ane,
    packedOpSnippet: _ne,
    cpuKernelImpl: r9,
    dtype: "float32"
  }), Dne = {
    kernelName: Na,
    backendName: "webgl",
    kernelFunc: xR
  };
  function Ry(t) {
    const { inputs: e, attrs: n, backend: s } = t, { dim: r } = n, { input: o } = e, i = o.shape.length, a = o.shape.slice();
    let l = r;
    return r < 0 && (C(-(i + 1) <= r, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + r + 1), a.splice(l, 0, 1), be({
      inputs: {
        x: o
      },
      backend: s,
      attrs: {
        shape: a
      }
    });
  }
  const One = {
    kernelName: eu,
    backendName: "webgl",
    kernelFunc: Ry
  };
  const VS = "return exp(x) - 1.0;", Fne = Ye({
    opSnippet: VS,
    packedOpSnippet: VS,
    cpuKernelImpl: o9
  }), Lne = {
    kernelName: ka,
    backendName: "webgl",
    kernelFunc: Fne
  };
  class WS {
    constructor(e, n, s) {
      this.variableNames = [
        "real",
        "imag"
      ];
      const r = n[1];
      this.outputShape = n;
      const o = s ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, i = s ? `${r}.0` : "1.0";
      let a;
      if (e === "real") a = "return real * expR - imag * expI;";
      else if (e === "imag") a = "return real * expI + imag * expR;";
      else throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);
      this.userCode = `
      const float exponentMultiplier = ${o};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${r});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${r}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
    }
  }
  function wR(t, e, n) {
    const s = n.texData.get(t.dataId), r = X(t.shape), o = t.shape[t.shape.length - 1], i = r / o, a = be({
      inputs: {
        x: t
      },
      backend: n,
      attrs: {
        shape: [
          i,
          o
        ]
      }
    }), l = a.shape, c = new WS("real", l, e), u = new WS("imag", l, e), h = [
      {
        dataId: s.complexTensorInfos.real.dataId,
        dtype: s.complexTensorInfos.real.dtype,
        shape: l
      },
      {
        dataId: s.complexTensorInfos.imag.dataId,
        dtype: s.complexTensorInfos.imag.dtype,
        shape: l
      }
    ], d = n.runWebGLProgram(c, h, "float32"), p = n.runWebGLProgram(u, h, "float32"), f = To({
      inputs: {
        real: d,
        imag: p
      },
      backend: n
    });
    n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(p);
    const m = be({
      inputs: {
        x: f
      },
      backend: n,
      attrs: {
        shape: t.shape
      }
    });
    return n.disposeIntermediateTensorInfo(a), n.disposeIntermediateTensorInfo(f), m;
  }
  function Pne(t) {
    const { inputs: e, backend: n } = t, { input: s } = e;
    return wR(s, false, n);
  }
  const zne = {
    kernelName: Mp,
    backendName: "webgl",
    kernelFunc: Pne
  };
  class Mne {
    constructor(e, n) {
      this.outputShape = [], this.customUniforms = [
        {
          name: "value",
          type: "float"
        }
      ], this.variableNames = [
        "x"
      ], this.outputShape = e, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
    }
  }
  function $h(t) {
    const { backend: e, attrs: n } = t, { shape: s, value: r } = n;
    let { dtype: o } = n;
    if (o = o || yi(r), o === "string") {
      const i = xt(o, X(s));
      return i.fill(r), e.makeTensorInfo(s, o, i);
    } else {
      const i = new Mne(s, r), a = [
        [
          r
        ]
      ];
      return e.runWebGLProgram(i, [], o, a);
    }
  }
  const Bne = {
    kernelName: Bp,
    backendName: "webgl",
    kernelFunc: $h
  };
  class Vne {
    constructor(e) {
      this.variableNames = [
        "Image"
      ], this.outputShape = [];
      const n = e[2];
      this.outputShape = e, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${n} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${n}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
    }
  }
  const Wne = {
    kernelName: Vp,
    backendName: "webgl",
    kernelFunc: ({ inputs: t, backend: e }) => {
      const { image: n } = t, s = e, r = new Vne(n.shape);
      return s.runWebGLProgram(r, [
        n
      ], n.dtype);
    }
  };
  const US = "return floor(x);", Une = Ye({
    opSnippet: US,
    packedOpSnippet: US,
    cpuKernelImpl: i9
  }), Gne = {
    kernelName: Ta,
    backendName: "webgl",
    kernelFunc: Une
  };
  const Hne = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`, jne = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`, qne = an({
    opSnippet: Hne,
    packedOpSnippet: jne,
    dtype: "int32"
  }), Kne = {
    kernelName: Ea,
    backendName: "webgl",
    kernelFunc: qne
  };
  class Xne {
    constructor(e) {
      this.variableNames = [
        "A"
      ];
      const n = vn(), [s, r] = e;
      this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);

        vec4 values = ${n.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
    }
  }
  class Yne {
    constructor(e) {
      this.variableNames = [
        "A"
      ], this.packedInputs = false, this.packedOutput = true;
      const n = vn(), [s, r] = e;
      this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${r}.0, ${s}.0);
            vec4 values = ${n.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${n.output} = result;
      }
    `;
    }
  }
  const Zne = {
    kernelName: kd,
    backendName: "webgl",
    kernelFunc: Jne
  };
  let Oi, yg = j().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
  function Jne(t) {
    const { inputs: e, backend: n, attrs: s } = t;
    let { pixels: r } = e;
    const { numChannels: o } = s, i = typeof HTMLVideoElement < "u" && r instanceof HTMLVideoElement, a = typeof HTMLImageElement < "u" && r instanceof HTMLImageElement, [l, c] = i ? [
      r.videoWidth,
      r.videoHeight
    ] : [
      r.width,
      r.height
    ], u = [
      c,
      l
    ], h = [
      c,
      l,
      o
    ];
    if (a || i) {
      const m = j().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
      (Oi == null || m !== yg) && (yg = m, Oi = document.createElement("canvas").getContext("2d", {
        willReadFrequently: yg
      })), Oi.canvas.width = l, Oi.canvas.height = c, Oi.drawImage(r, 0, 0, l, c), r = Oi.canvas;
    }
    const d = n.makeTensorInfo(u, "int32");
    n.texData.get(d.dataId).usage = es.PIXELS, n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId), r);
    const p = j().getBool("WEBGL_PACK") ? new Yne(h) : new Xne(h), f = n.runWebGLProgram(p, [
      d
    ], "int32");
    return n.disposeData(d.dataId), f;
  }
  function Qne(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, filter: o, bias: i, preluActivationWeights: a } = e, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s, m = Or(u), g = jt(r.shape, o.shape, l, h, c, d, false, m);
    let y;
    const b = [], w = i != null, x = a != null, S = p === "leakyrelu", I = () => {
      const R = [
        r,
        o
      ], N = (k, $) => {
        if ($ === "NCHW" && k.shape.length === 1 && k.shape[0] !== 1) {
          const F = be({
            inputs: {
              x: k
            },
            backend: n,
            attrs: {
              shape: [
                k.shape[0],
                1,
                1
              ]
            }
          });
          return b.push(F), F;
        }
        return k;
      };
      if (w && R.push(N(i, u)), x && R.push(N(a, u)), S) {
        const k = n.makeTensorInfo([], "float32", _r(f, "float32"));
        R.push(k), b.push(k);
      }
      return R;
    };
    if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID")) y = fR({
      x: r,
      filter: o,
      convInfo: g,
      backend: n,
      bias: i,
      activation: p,
      preluActivationWeights: a,
      leakyreluAlpha: f
    });
    else if (g.strideWidth <= 2 && m === "channelsLast" && j().getBool("WEBGL_EXP_CONV")) {
      const R = p ? Ec(p, true) : null, N = new pR(g, w, R, x, S), k = [
        [
          g.padInfo.top,
          g.padInfo.left
        ],
        [
          g.strideHeight,
          g.strideWidth
        ],
        [
          g.dilationHeight,
          g.dilationWidth
        ],
        [
          g.inHeight,
          g.inWidth
        ]
      ], $ = I();
      y = n.runWebGLProgram(N, $, "float32", k);
    } else if (j().getBool("WEBGL_CONV_IM2COL")) y = mR({
      x: r,
      filter: o,
      convInfo: g,
      backend: n,
      bias: i,
      activation: p,
      preluActivationWeights: a,
      leakyreluAlpha: f
    });
    else {
      const R = p ? Ec(p, false) : null, N = new dR(g, w, R, x, S), k = I();
      y = n.runWebGLProgram(N, k, "float32");
    }
    const E = be({
      inputs: {
        x: y
      },
      backend: n,
      attrs: {
        shape: g.outShape
      }
    });
    return b.push(y), b.forEach((R) => n.disposeIntermediateTensorInfo(R)), E;
  }
  const ese = {
    kernelName: fc,
    backendName: "webgl",
    kernelFunc: Qne
  };
  function tse(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, filter: o, bias: i, preluActivationWeights: a } = e, { strides: l, pad: c, dilations: u, dimRoundingMode: h, activation: d, leakyreluAlpha: p } = s, f = [];
    let m = u;
    m == null && (m = [
      1,
      1
    ]), C(sn(l, m), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`);
    const g = jt(r.shape, o.shape, l, m, c, h, true), y = j().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels === 1, b = d ? Ec(d, y) : null, w = [
      r,
      o
    ], x = i != null, S = a != null, I = d === "leakyrelu";
    if (x && w.push(i), S && w.push(a), I) {
      const k = n.makeTensorInfo([], "float32", _r(p, "float32"));
      w.push(k), f.push(k);
    }
    let E;
    y ? E = new bR(g, x, b, S, I) : E = new yR(g, x, b, S, I);
    const R = [
      [
        g.padInfo.top,
        g.padInfo.left
      ],
      [
        g.strideHeight,
        g.strideWidth
      ],
      [
        g.dilationHeight,
        g.dilationWidth
      ],
      [
        g.inHeight,
        g.inWidth
      ]
    ], N = n.runWebGLProgram(E, w, "float32", R);
    return f.forEach((k) => n.disposeIntermediateTensorInfo(k)), N;
  }
  const nse = {
    kernelName: mc,
    backendName: "webgl",
    kernelFunc: tse
  };
  class sse {
    constructor(e, n, s, r) {
      this.sliceDim = e, this.strides = n, this.paramsShape = r, this.variableNames = [
        "x",
        "indices"
      ], this.outputShape = s;
      const o = rt(s.length);
      let i = `
    int index;`;
      for (let a = 0; a < this.sliceDim; a++) i += `
          index = round(getIndices(coords[0], ${a}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[a]};
          flattenIndex += index * ${this.strides[a]};`;
      this.userCode = `
         void main() {
          ${o} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${i}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
    }
  }
  function rse(t) {
    const { inputs: e, backend: n } = t, { params: s, indices: r } = e, o = r.shape, i = o[o.length - 1], a = X(s.shape), [l, c, u, h] = um(s, r), d = be({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: [
          c,
          i
        ]
      }
    }), p = be({
      inputs: {
        x: s
      },
      backend: n,
      attrs: {
        shape: [
          X(s.shape) / u,
          u
        ]
      }
    });
    if (n.shouldExecuteOnCPU([
      s,
      r
    ]) || s.dtype === "string") {
      const y = n.readSync(r.dataId), b = n.bufferSync(s), w = a9(y, b, s.dtype, c, i, u, h, s.shape, a);
      return n.makeTensorInfo(l, s.dtype, w.values);
    }
    const f = new sse(i, h, [
      c,
      u
    ], s.shape), m = n.runWebGLProgram(f, [
      p,
      d
    ], p.dtype), g = be({
      inputs: {
        x: m
      },
      backend: n,
      attrs: {
        shape: l
      }
    });
    return n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(m), g;
  }
  const ose = {
    kernelName: Wp,
    backendName: "webgl",
    kernelFunc: rse
  };
  class ise {
    constructor(e, n) {
      this.variableNames = [
        "A",
        "indices"
      ], this.outputShape = n, this.rank = n.length;
      const s = rt(this.rank), r = ase(e);
      this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${r}));
      }
    `;
    }
  }
  function ase(t, e) {
    const n = [
      "resRC.x",
      "resRC.y",
      "resRC.z",
      "resRC.w"
    ], s = [];
    for (let r = 0; r < t.length; r++) r === 2 ? s.push("index") : s.push(`${n[r]}`);
    return s.join();
  }
  function vR(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, indices: o } = e, { axis: i, batchDims: a } = s, l = Ve(i, r.shape)[0];
    if (j().get("DEBUG")) {
      const b = n.readSync(o.dataId), w = r.shape[l];
      for (let x = 0; x < b.length; ++x) {
        const S = b[x];
        C(S <= w - 1 && S >= 0, () => `GatherV2: the index value ${S} is not in [0, ${w - 1}]`);
      }
    }
    const c = Jx(r, o, l, a), u = X(o.shape), h = [], d = be({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: [
          c.batchSize,
          c.outerSize,
          c.dimSize,
          c.sliceSize
        ]
      }
    }), p = be({
      inputs: {
        x: o
      },
      backend: n,
      attrs: {
        shape: [
          c.batchSize,
          u / c.batchSize
        ]
      }
    });
    h.push(d), h.push(p);
    const f = [
      c.batchSize,
      c.outerSize,
      u / c.batchSize,
      c.sliceSize
    ];
    if (n.shouldExecuteOnCPU([
      r,
      o
    ]) || r.dtype === "string") {
      const b = n.bufferSync(p), w = n.bufferSync(d), x = l9(w, b, f);
      return h.forEach((S) => n.disposeIntermediateTensorInfo(S)), n.makeTensorInfo(c.outputShape, x.dtype, x.values);
    }
    const m = new ise(d.shape, f), g = n.runWebGLProgram(m, [
      d,
      p
    ], d.dtype);
    h.push(g);
    const y = be({
      inputs: {
        x: g
      },
      backend: n,
      attrs: {
        shape: c.outputShape
      }
    });
    return h.forEach((b) => n.disposeIntermediateTensorInfo(b)), y;
  }
  const lse = {
    kernelName: nu,
    backendName: "webgl",
    kernelFunc: vR
  };
  const cse = "return float(a > b);", use = `
  return vec4(greaterThan(a, b));
`, hse = an({
    opSnippet: cse,
    packedOpSnippet: use,
    cpuKernelImpl: c9,
    dtype: "bool"
  }), dse = {
    kernelName: su,
    backendName: "webgl",
    kernelFunc: hse
  };
  const pse = "return float(a >= b);", fse = `
  return vec4(greaterThanEqual(a, b));
`, mse = an({
    opSnippet: pse,
    packedOpSnippet: fse,
    dtype: "bool",
    cpuKernelImpl: u9
  }), gse = {
    kernelName: Ra,
    backendName: "webgl",
    kernelFunc: mse
  };
  function yse(t) {
    const { inputs: e, backend: n } = t, { input: s } = e;
    return wR(s, true, n);
  }
  const bse = {
    kernelName: Up,
    backendName: "webgl",
    kernelFunc: yse
  };
  const xse = "return float(!isnan(x) && !isinf(x));", wse = Ye({
    opSnippet: xse,
    dtype: "bool"
  }), vse = {
    kernelName: _a,
    backendName: "webgl",
    kernelFunc: wse
  };
  const Sse = "return float(isinf(x));", $se = Ye({
    opSnippet: Sse,
    dtype: "bool"
  }), Cse = {
    kernelName: Da,
    backendName: "webgl",
    kernelFunc: $se
  };
  const Ise = "return float(isnan(x));", Nse = Ye({
    opSnippet: Ise,
    dtype: "bool"
  }), kse = {
    kernelName: Oa,
    backendName: "webgl",
    kernelFunc: Nse
  };
  const Tse = "return float(a < b);", Ese = `
  return vec4(lessThan(a, b));
`, Rse = an({
    opSnippet: Tse,
    packedOpSnippet: Ese,
    cpuKernelImpl: h9,
    dtype: "bool"
  }), Ase = {
    kernelName: ou,
    backendName: "webgl",
    kernelFunc: Rse
  };
  const _se = "return float(a <= b);", Dse = `
  return vec4(lessThanEqual(a, b));
`, Ose = an({
    opSnippet: _se,
    packedOpSnippet: Dse,
    cpuKernelImpl: d9,
    dtype: "bool"
  }), Fse = {
    kernelName: iu,
    backendName: "webgl",
    kernelFunc: Ose
  };
  function Lse(t) {
    const { backend: e, attrs: n } = t, { start: s, stop: r, num: o } = n, i = p9(s, r, o);
    return e.makeTensorInfo([
      i.length
    ], "float32", i);
  }
  const Pse = {
    kernelName: Hp,
    backendName: "webgl",
    kernelFunc: Lse
  };
  const zse = kl + `
  return x < 0.0 ? 0./0. : log(x);
`, Mse = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`, Bse = Ye({
    opSnippet: zse,
    packedOpSnippet: Mse,
    cpuKernelImpl: f9
  }), Vse = {
    kernelName: Fa,
    backendName: "webgl",
    kernelFunc: Bse
  };
  const Wse = kl + `
  return log(1.0 + x);
`, Use = Ye({
    opSnippet: Wse
  }), Gse = {
    kernelName: La,
    backendName: "webgl",
    kernelFunc: Use
  };
  const Hse = "return float(a >= 1.0 && b >= 1.0);", jse = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`, qse = an({
    opSnippet: Hse,
    packedOpSnippet: jse,
    dtype: "bool"
  }), Kse = {
    kernelName: au,
    backendName: "webgl",
    kernelFunc: qse
  };
  const Xse = "return float(!(x >= 1.0));", Yse = Ye({
    opSnippet: Xse
  }), Zse = {
    kernelName: lu,
    backendName: "webgl",
    kernelFunc: Yse
  };
  const Jse = "return float(a >= 1.0 || b >= 1.0);", Qse = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`, ere = an({
    opSnippet: Jse,
    packedOpSnippet: Qse,
    dtype: "bool"
  }), tre = {
    kernelName: cu,
    backendName: "webgl",
    kernelFunc: ere
  };
  class nre {
    constructor(e, n, s, r, o) {
      this.variableNames = [
        "x"
      ], this.outputShape = [];
      const i = n, a = e[3] - 1;
      this.outputShape = e;
      let l;
      const c = `float(${s}) + float(${r}) * sum`;
      o === 0.5 ? l = `inversesqrt(${c})` : o === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${o}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `;
    }
  }
  class sre {
    constructor(e, n, s, r, o) {
      this.variableNames = [
        "x"
      ], this.outputShape = [], this.packedInputs = true, this.packedOutput = true;
      const i = n, a = e[3] - 1;
      this.outputShape = e;
      let l;
      const c = `float(${s}) + float(${r}) * sum`;
      o === 0.5 ? l = `inversesqrt(${c})` : o === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${o}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `;
    }
  }
  const rre = (t) => {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { depthRadius: o, bias: i, alpha: a, beta: l } = s, c = j().getBool("WEBGL_PACK_NORMALIZATION") ? new sre(r.shape, o, i, a, l) : new nre(r.shape, o, i, a, l);
    return n.runWebGLProgram(c, [
      r
    ], r.dtype);
  }, ore = {
    kernelName: uu,
    backendName: "webgl",
    kernelFunc: rre
  };
  class ire {
    constructor(e, n, s, r, o) {
      this.variableNames = [
        "inputImage",
        "outputImage",
        "dy"
      ], this.outputShape = [], this.outputShape = e, this.depth = e[3], this.depthRadius = n, this.bias = s, this.alpha = r, this.beta = o, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${n})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${n} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${r}) * norm + float(${s});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${r})
                * float(${o})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${o});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
    }
  }
  const are = (t) => {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, y: o, dy: i } = e, { depthRadius: a, bias: l, alpha: c, beta: u } = s, h = new ire(r.shape, a, l, c, u);
    return n.runWebGLProgram(h, [
      r,
      o,
      i
    ], r.dtype);
  }, lre = {
    kernelName: jp,
    backendName: "webgl",
    kernelFunc: are
  };
  function cre(t, e, n, s) {
    const r = X(e), i = X(t.shape) / r, a = be({
      inputs: {
        x: t
      },
      attrs: {
        shape: [
          i,
          r
        ]
      },
      backend: s
    }), l = Ri(a, t.dtype, "max", s), c = be({
      inputs: {
        x: l
      },
      attrs: {
        shape: n
      },
      backend: s
    });
    return s.disposeIntermediateTensorInfo(a), s.disposeIntermediateTensorInfo(l), c;
  }
  function SR(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { reductionIndices: o, keepDims: i } = s, a = r.shape.length, l = Ve(o, r.shape);
    let c = l;
    const u = bt(c, a), h = u != null, d = n.shouldExecuteOnCPU([
      r
    ]);
    let p = r;
    if (h) {
      if (d) {
        const w = n.texData.get(p.dataId).values, x = new Array(a);
        for (let E = 0; E < x.length; E++) x[E] = r.shape[u[E]];
        const S = Q0(w, r.shape, r.dtype, u, x);
        p = n.makeTensorInfo(x, r.dtype);
        const I = n.texData.get(p.dataId);
        I.values = S;
      } else p = zm(r, u, n);
      c = Ct(c.length, a);
    }
    rn("max", c, a);
    const [f, m] = qt(p.shape, c);
    let g = f;
    i && (g = $t(f, l));
    let y;
    if (d) {
      const w = n.texData.get(p.dataId).values, x = m9(w, X(m), g, r.dtype);
      y = n.makeTensorInfo(g, r.dtype);
      const S = n.texData.get(y.dataId);
      S.values = x;
    } else y = cre(p, m, g, n);
    return h && n.disposeIntermediateTensorInfo(p), y;
  }
  const ure = {
    kernelName: hu,
    backendName: "webgl",
    kernelFunc: SR
  };
  const hre = e1 + `
  return max(a, b);
`, dre = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Ei + `
  return result;
`, pre = an({
    opSnippet: hre,
    packedOpSnippet: dre,
    cpuKernelImpl: g9
  }), fre = {
    kernelName: Pa,
    backendName: "webgl",
    kernelFunc: pre
  };
  function mre(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e;
    vl(r, "maxPool");
    const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
    C(sn(i, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
    const u = bs(r.shape, o, i, c, a, l);
    if (u.filterWidth === 1 && u.filterHeight === 1 && Ue(u.inShape, u.outShape)) return qn({
      inputs: {
        x: r
      },
      backend: n
    });
    const h = new Rc(u, "max", false);
    return n.runWebGLProgram(h, [
      r
    ], r.dtype);
  }
  const gre = {
    kernelName: du,
    backendName: "webgl",
    kernelFunc: mre
  };
  function yre(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { filterSize: o, strides: i, pad: a, dataFormat: l, dimRoundingMode: c } = s, u = [
      1,
      1,
      1
    ], h = Dr(r.shape, o, i, u, a, c, l), d = new n1(h, "max", false);
    return n.runWebGLProgram(d, [
      r
    ], r.dtype);
  }
  const bre = {
    kernelName: pu,
    backendName: "webgl",
    kernelFunc: yre
  };
  class xre {
    constructor(e) {
      this.variableNames = [
        "dy",
        "maxPos"
      ], this.outputShape = e.inShape;
      const n = e.strideHeight, s = e.strideWidth, r = e.dilationHeight, o = e.effectiveFilterHeight, i = e.effectiveFilterWidth, a = o - 1 - e.padInfo.top, l = i - 1 - e.padInfo.left, c = o * i - 1;
      this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
          wR += ${r}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${c} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
    }
  }
  class wre {
    constructor(e) {
      this.variableNames = [
        "dy",
        "maxPos"
      ], this.outputShape = e.inShape;
      const n = e.strideDepth, s = e.strideHeight, r = e.strideWidth, o = e.dilationDepth, i = e.dilationHeight, a = e.dilationWidth, l = e.effectiveFilterDepth, c = e.effectiveFilterHeight, u = e.effectiveFilterWidth, h = l - 1 - e.padInfo.front, d = c - 1 - e.padInfo.top, p = u - 1 - e.padInfo.left, f = l * c * u - 1;
      this.userCode = `
      const ivec3 pads = ivec3(${h}, ${d}, ${p});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${n}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${c};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${r}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${c} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
  }
  function vre(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, input: o } = e, i = o, { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s, h = [
      1,
      1,
      1
    ], d = Dr(i.shape, a, l, h, c, u), p = new n1(d, "max", true), f = n.runWebGLProgram(p, [
      i
    ], i.dtype), m = new wre(d), g = n.runWebGLProgram(m, [
      r,
      f
    ], i.dtype);
    return n.disposeIntermediateTensorInfo(f), g;
  }
  const Sre = {
    kernelName: Kp,
    backendName: "webgl",
    kernelFunc: vre
  };
  function $re(t) {
    const { inputs: e, backend: n, attrs: s } = t, { dy: r, input: o, output: i } = e, a = o;
    vl([
      o,
      i
    ], "maxPoolGrad");
    const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s, d = bs(a.shape, l, c, 1, u, h), p = true, f = new Rc(d, "max", p), m = n.runWebGLProgram(f, [
      a
    ], a.dtype), g = new xre(d), y = n.runWebGLProgram(g, [
      r,
      m
    ], a.dtype);
    return n.disposeIntermediateTensorInfo(m), y;
  }
  const Cre = {
    kernelName: qp,
    backendName: "webgl",
    kernelFunc: $re
  };
  function Ire(t, e, n, s) {
    let r = new Rc(n, "max", false);
    const o = s.runWebGLProgram(r, [
      t
    ], "float32");
    r = new Rc(n, "max", true, true, e);
    const i = s.runWebGLProgram(r, [
      t
    ], "float32");
    return [
      o,
      i
    ];
  }
  const Nre = {
    kernelName: Xp,
    backendName: "webgl",
    kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
      const { x: s } = t, { filterSize: r, strides: o, pad: i, includeBatchInIndex: a } = e, l = n;
      C(s.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);
      const c = [
        1,
        1
      ];
      C(sn(o, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);
      const u = bs(s.shape, r, o, c, i), [h, d] = Ire(s, a, u, l);
      return [
        h,
        d
      ];
    }
  };
  function kre(t, e, n, s) {
    const r = X(e), i = X(t.shape) / r, a = be({
      inputs: {
        x: t
      },
      attrs: {
        shape: [
          i,
          r
        ]
      },
      backend: s
    }), l = Ri(a, "float32", "mean", s), c = be({
      inputs: {
        x: l
      },
      attrs: {
        shape: n
      },
      backend: s
    });
    return s.disposeIntermediateTensorInfo(a), s.disposeIntermediateTensorInfo(l), c;
  }
  const Tre = {
    kernelName: fu,
    backendName: "webgl",
    kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
      const { x: s } = t, { keepDims: r, axis: o } = e, i = n, a = s.shape.length, l = Ve(o, s.shape);
      let c = l;
      const u = bt(c, a), h = u != null, d = i.shouldExecuteOnCPU([
        s
      ]), p = [];
      let f = s;
      if (h) {
        if (d) {
          const x = i.texData.get(f.dataId).values, S = new Array(a);
          for (let R = 0; R < S.length; R++) S[R] = s.shape[u[R]];
          const I = Q0(x, s.shape, s.dtype, u, S);
          f = i.makeTensorInfo(S, s.dtype);
          const E = i.texData.get(f.dataId);
          E.values = I;
        } else f = zm(s, u, i);
        p.push(f), c = Ct(c.length, a);
      }
      rn("sum", c, a);
      const [m, g] = qt(f.shape, c);
      let y = m;
      r && (y = $t(m, l));
      const b = kre(f, g, y, i);
      for (const w of p) i.disposeIntermediateTensorInfo(w);
      return b;
    }
  };
  function Ere(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, keepDims: i } = s, a = r.shape.length, l = Ve(o, r.shape);
    let c = l;
    const u = bt(c, a);
    let h = r;
    u != null && (h = bn({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: u
      }
    }), c = Ct(c.length, r.shape.length)), rn("min", c, a);
    const [d, p] = qt(h.shape, c), f = X(p), m = be({
      inputs: {
        x: h
      },
      backend: n,
      attrs: {
        shape: [
          -1,
          f
        ]
      }
    }), g = Ri(m, m.dtype, "min", n);
    let y;
    if (i) {
      const b = $t(d, l);
      y = be({
        inputs: {
          x: g
        },
        backend: n,
        attrs: {
          shape: b
        }
      });
    } else y = be({
      inputs: {
        x: g
      },
      backend: n,
      attrs: {
        shape: d
      }
    });
    return n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(g), u != null && n.disposeIntermediateTensorInfo(h), y;
  }
  const Rre = {
    kernelName: mu,
    backendName: "webgl",
    kernelFunc: Ere
  };
  const Are = e1 + `
  return min(a, b);
`, _re = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Ei + `
  return result;
`, Dre = an({
    opSnippet: Are,
    packedOpSnippet: _re,
    cpuKernelImpl: y9
  }), Ore = {
    kernelName: za,
    backendName: "webgl",
    kernelFunc: Dre
  };
  class Fre {
    constructor(e, n, s) {
      this.variableNames = [
        "x"
      ], this.outputShape = n.map((u, h) => u[0] + e[h] + u[1]);
      const r = e.length, o = rt(r), i = n.map((u) => u[0]).join(","), a = n.map((u, h) => u[0] + e[h]).join(","), l = [
        "coords[0]",
        "coords[1]",
        "coords[2]",
        "coords[3]"
      ].slice(0, r), c = s === "reflect" ? 0 : 1;
      if (r === 1) {
        this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${c};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${c};
          }
          setOutput(getX(outC - start));
        }
      `;
        return;
      }
      this.userCode = `
      ${o} start = ${o}(${i});
      ${o} end = ${o}(${a});

      void main() {
        ${o} outC = getOutputCoords();
        for (int i = 0; i < ${r}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${c};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${c};
          }
        }
        ${o} coords = outC - start;
        setOutput(getX(${l}));
      }
    `;
    }
  }
  class Lre {
    constructor(e, n, s) {
      this.variableNames = [
        "x"
      ], this.packedInputs = true, this.packedOutput = true, this.outputShape = n.map((f, m) => f[0] + e[m] + f[1]);
      const r = e.length, o = rt(r), i = n.map((f) => f[0]).join(","), a = n.map((f, m) => f[0] + e[m]).join(","), l = mn("rc", r), c = mn("source", r), u = `${l[r - 1]} < ${this.outputShape[r - 1]}`, h = r === 1 ? "source" : `vec2(${c.slice(-2).join()})`, d = s === "reflect" ? 0 : 1;
      let p = "";
      if (r === 1) {
        const f = `
        ${o} source = rc;
        if (source < start) {
          source = start * 2 - source - ${d};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${d};
        }
        source -= start;
      `;
        p = `
        ${o} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[r - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
      `;
      } else {
        const f = `
        ${o} source = rc;
        ${o} lt = ${o}(lessThan(source, start));
        ${o} gte = ${o}(greaterThanEqual(source, end));
        ${o} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${d}) +
                gte * ((end - 1) * 2 - source + ${d});
        source -= start;
      `;
        p = `
        ${o} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[r - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
        rc = outputLoc;
        ${l[r - 2]} += 1;
        if(${l[r - 2]} < ${this.outputShape[r - 2]}) {
          ${f}
          result[2] = getChannel(getX(${c.join()}), ${h});
          ${l[r - 1]} += 1;
          if(${u}) {
            ${f}
            result[3] = getChannel(getX(${c.join()}), ${h});
          }
        }
      `;
      }
      this.userCode = `
      const ${o} start = ${o}(${i});
      const ${o} end = ${o}(${a});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${p}
        setOutput(result);
      }
    `;
    }
  }
  const Pre = ({ inputs: t, backend: e, attrs: n }) => {
    const { x: s } = t, { paddings: r, mode: o } = n, i = j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Lre(s.shape, r, o) : new Fre(s.shape, r, o);
    return e.runWebGLProgram(i, [
      s
    ], s.dtype);
  }, zre = {
    kernelName: gu,
    backendName: "webgl",
    kernelFunc: Pre
  };
  const Mre = `if (b == 0.0) return NAN;
  return mod(a, b);`, Bre = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + Ei + `
  return result;
`, Vre = an({
    opSnippet: Mre,
    packedOpSnippet: Bre
  }), Wre = {
    kernelName: Ma,
    backendName: "webgl",
    kernelFunc: Vre
  };
  class Ure {
    constructor(e, n, s) {
      this.variableNames = [
        "probs"
      ], this.customUniforms = [
        {
          name: "seed",
          type: "float"
        }
      ], this.outputShape = [
        e,
        s
      ], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${n - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${n - 1}));
      }
    `;
    }
  }
  const Gre = `
if (a == b) {
  return 1.0;
};
return a / b;`, Hre = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`, $R = an({
    opSnippet: Gre,
    packedOpSnippet: Hre,
    checkOutOfBounds: true
  }), jre = {
    kernelName: $a,
    backendName: "webgl",
    kernelFunc: $R
  };
  const GS = "return a - b;", CR = an({
    opSnippet: GS,
    packedOpSnippet: GS,
    supportsComplex: true,
    cpuKernelImpl: z9
  }), qre = {
    kernelName: tl,
    backendName: "webgl",
    kernelFunc: CR
  };
  function IR(t) {
    const { inputs: e, backend: n, attrs: s } = t, { logits: r } = e, { dim: o } = s, i = Ve([
      o
    ], r.shape), a = SR({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        reductionIndices: i,
        keepDims: false
      }
    }), l = $t(a.shape, i), c = be({
      inputs: {
        x: a
      },
      backend: n,
      attrs: {
        shape: l
      }
    }), u = CR({
      inputs: {
        a: r,
        b: c
      },
      backend: n
    }), h = xR({
      inputs: {
        x: u
      },
      backend: n
    }), d = Mm({
      inputs: {
        x: h
      },
      backend: n,
      attrs: {
        axis: i,
        keepDims: false
      }
    }), p = be({
      inputs: {
        x: d
      },
      backend: n,
      attrs: {
        shape: l
      }
    }), f = $R({
      inputs: {
        a: h,
        b: p
      },
      backend: n
    });
    return n.disposeIntermediateTensorInfo(a), n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(p), f;
  }
  const Kre = {
    kernelName: Ou,
    backendName: "webgl",
    kernelFunc: IR
  };
  function Xre(t) {
    const { inputs: e, backend: n, attrs: s } = t, { logits: r } = e, { numSamples: o, seed: i, normalized: a } = s, l = a ? r : IR({
      inputs: {
        logits: r
      },
      backend: n,
      attrs: {
        dim: r.shape.length - 1
      }
    }), c = l.shape[0], u = l.shape[1], h = new Ure(c, u, o), d = [
      [
        i
      ]
    ], p = n.runWebGLProgram(h, [
      l
    ], "int32", d);
    return a || n.disposeIntermediateTensorInfo(l), p;
  }
  const Yre = {
    kernelName: Yp,
    backendName: "webgl",
    kernelFunc: Xre
  };
  const Zre = ws + `
  return -x;
`, Jre = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
  function Qre(t) {
    const { inputs: e, backend: n } = t, { x: s } = e;
    if (n.shouldExecuteOnCPU([
      s
    ])) {
      const o = n.texData.get(s.dataId), [i, a] = x9(o.values, s.shape, s.dtype);
      return n.makeTensorInfo(a, s.dtype, i);
    }
    let r;
    return j().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new Yr(s.shape, Jre) : r = new Ys(s.shape, Zre), n.runWebGLProgram(r, [
      s
    ], s.dtype);
  }
  const eoe = {
    kernelName: yu,
    backendName: "webgl",
    kernelFunc: Qre
  };
  const toe = im;
  function noe(t) {
    Yn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
    const { inputs: e, backend: n, attrs: s } = t, { boxes: r, scores: o } = e, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s, c = n.readSync(r.dataId), u = n.readSync(o.dataId), { selectedIndices: h } = toe(c, u, i, a, l);
    return n.makeTensorInfo([
      h.length
    ], "int32", new Int32Array(h));
  }
  const soe = {
    kernelName: Zp,
    backendName: "webgl",
    kernelFunc: noe
  };
  const roe = am;
  function ooe(t) {
    Yn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
    const { inputs: e, backend: n, attrs: s } = t, { boxes: r, scores: o } = e, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, padToMaxOutputSize: c } = s, u = n.readSync(r.dataId), h = n.readSync(o.dataId), { selectedIndices: d, validOutputs: p } = roe(u, h, i, a, l, c);
    return [
      n.makeTensorInfo([
        d.length
      ], "int32", new Int32Array(d)),
      n.makeTensorInfo([], "int32", new Int32Array([
        p
      ]))
    ];
  }
  const ioe = {
    kernelName: Jp,
    backendName: "webgl",
    kernelFunc: ooe
  };
  const aoe = lm;
  function loe(t) {
    Yn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
    const { inputs: e, backend: n, attrs: s } = t, { boxes: r, scores: o } = e, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, softNmsSigma: c } = s, u = n.readSync(r.dataId), h = n.readSync(o.dataId), d = i, p = a, f = l, m = c, { selectedIndices: g, selectedScores: y } = aoe(u, h, d, p, f, m);
    return [
      n.makeTensorInfo([
        g.length
      ], "int32", new Int32Array(g)),
      n.makeTensorInfo([
        y.length
      ], "float32", new Float32Array(y))
    ];
  }
  const coe = {
    kernelName: Qp,
    backendName: "webgl",
    kernelFunc: loe
  };
  class uoe {
    constructor(e, n, s, r) {
      this.variableNames = [
        "indices"
      ], this.outputShape = [
        e,
        n
      ], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${r}), float(${s}),
                      float(index == coords.y)));
      }
    `;
    }
  }
  const hoe = (t) => {
    const { inputs: e, backend: n, attrs: s } = t, { indices: r } = e, { dtype: o, depth: i, onValue: a, offValue: l } = s, c = X(r.shape), u = new uoe(c, i, a, l), h = be({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: [
          c
        ]
      }
    }), d = n.runWebGLProgram(u, [
      h
    ], o);
    n.disposeIntermediateTensorInfo(h);
    const p = [
      ...r.shape,
      i
    ], f = be({
      inputs: {
        x: d
      },
      backend: n,
      attrs: {
        shape: p
      }
    });
    return n.disposeIntermediateTensorInfo(d), f;
  }, doe = {
    kernelName: wu,
    backendName: "webgl",
    kernelFunc: hoe
  };
  function Zd(t) {
    const { inputs: e, backend: n } = t, { x: s } = e;
    if (s.dtype === "complex64") {
      const r = Sh({
        inputs: {
          input: s
        },
        backend: n
      }), o = Zd({
        inputs: {
          x: r
        },
        backend: n
      }), i = Bm({
        inputs: {
          input: s
        },
        backend: n
      }), a = Zd({
        inputs: {
          x: i
        },
        backend: n
      }), l = To({
        inputs: {
          real: o,
          imag: a
        },
        backend: n
      });
      return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(a), l;
    } else return $h({
      attrs: {
        shape: s.shape,
        dtype: s.dtype,
        value: s.dtype === "string" ? "" : 0
      },
      backend: n
    });
  }
  const poe = {
    kernelName: zu,
    backendName: "webgl",
    kernelFunc: Zd
  };
  function NR(t) {
    const { inputs: e, backend: n } = t, { x: s } = e;
    if (s.dtype === "string") throw new Error("onesLike is not supported under string dtype");
    if (s.dtype === "complex64") {
      const r = Sh({
        inputs: {
          input: s
        },
        backend: n
      }), o = NR({
        inputs: {
          x: r
        },
        backend: n
      }), i = Bm({
        inputs: {
          input: s
        },
        backend: n
      }), a = Zd({
        inputs: {
          x: i
        },
        backend: n
      }), l = To({
        inputs: {
          real: o,
          imag: a
        },
        backend: n
      });
      return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(a), l;
    } else return $h({
      attrs: {
        shape: s.shape,
        dtype: s.dtype,
        value: 1
      },
      backend: n
    });
  }
  const foe = {
    kernelName: xu,
    backendName: "webgl",
    kernelFunc: NR
  };
  function moe(t) {
    const { inputs: e, backend: n, attrs: s } = t, { axis: r } = s;
    if (e.length === 1) return Ry({
      inputs: {
        input: e[0]
      },
      backend: n,
      attrs: {
        dim: r
      }
    });
    const o = e[0].shape, i = e[0].dtype;
    e.forEach((u) => {
      nn(o, u.shape, "All tensors passed to stack must have matching shapes"), C(i === u.dtype, () => "All tensors passed to stack must have matching dtypes");
    });
    const a = [], l = e.map((u) => {
      const h = Ry({
        inputs: {
          input: u
        },
        backend: n,
        attrs: {
          dim: r
        }
      });
      return a.push(h), h;
    }), c = hR({
      inputs: l,
      backend: n,
      attrs: {
        axis: r
      }
    });
    return a.forEach((u) => n.disposeIntermediateTensorInfo(u)), c;
  }
  const goe = {
    kernelName: vu,
    backendName: "webgl",
    kernelFunc: moe
  };
  class yoe {
    constructor(e, n, s) {
      this.variableNames = [
        "x"
      ], this.customUniforms = [
        {
          name: "value",
          type: "float"
        }
      ], this.outputShape = n.map((c, u) => c[0] + e[u] + c[1]);
      const r = e.length, o = rt(r), i = n.map((c) => c[0]).join(","), a = n.map((c, u) => c[0] + e[u]).join(","), l = [
        "coords[0]",
        "coords[1]",
        "coords[2]",
        "coords[3]"
      ].slice(0, r);
      if (r === 1) {
        this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
        return;
      }
      this.userCode = `
      ${o} start = ${o}(${i});
      ${o} end = ${o}(${a});

      void main() {
        ${o} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${o} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `;
    }
  }
  class boe {
    constructor(e, n, s) {
      this.variableNames = [
        "x"
      ], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [
        {
          name: "value",
          type: "float"
        }
      ], this.outputShape = n.map((m, g) => m[0] + e[g] + m[1]);
      const r = e.length, o = rt(r), i = n.map((m) => m[0]).join(","), a = n.map((m, g) => m[0] + e[g]).join(","), l = mn("rc", r), c = mn("source", r), u = `${l[r - 1]} < ${this.outputShape[r - 1]}`, h = r === 1 ? "source" : `vec2(${c.slice(-2).join()})`, d = [
        `${o} rc = outputLoc;`,
        `${l[r - 1]} += 1;
       if(${u}) {
      `,
        r === 1 ? "" : `}
       rc = outputLoc;
       ${l[r - 2]} += 1;
       if(${l[r - 2]} < ${this.outputShape[r - 2]}) {`,
        r === 1 ? "" : `  ${l[r - 1]} += 1;
         if(${u}) {`
      ], p = r === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
      let f = "";
      for (let m = 0, g = r === 1 ? 2 : 4; m < g; m++) f += `
        ${d[m]}
        if (${p}) {
          result[${m}] = float(value);
        } else {
          ${o} source = rc - start;
          result[${m}] = getChannel(getX(${c.join()}), ${h});
        }
      `;
      f += r === 1 ? "} " : "}}", this.userCode = `
      const ${o} start = ${o}(${i});
      const ${o} end = ${o}(${a});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `;
    }
  }
  const kR = (t) => {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { paddings: o, constantValue: i } = s;
    if (X(r.shape) === 0) {
      const c = o.map((u, h) => u[0] + r.shape[h] + u[1]);
      return $h({
        backend: n,
        attrs: {
          shape: c,
          value: i,
          dtype: r.dtype
        }
      });
    }
    const a = j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new boe(r.shape, o, i) : new yoe(r.shape, o, i), l = [
      [
        i
      ]
    ];
    return n.runWebGLProgram(a, [
      r
    ], r.dtype, l);
  }, xoe = {
    kernelName: Su,
    backendName: "webgl",
    kernelFunc: kR
  };
  const woe = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`, voe = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + Ei + `
  return result;
`, Soe = an({
    opSnippet: woe,
    packedOpSnippet: voe
  }), $oe = {
    kernelName: Va,
    backendName: "webgl",
    kernelFunc: Soe
  };
  function Coe(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { axis: o, keepDims: i } = s, a = r.shape.length, l = [], c = Ve(o, r.shape);
    let u = c;
    const h = bt(u, a);
    let d = r;
    h != null && (d = bn({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: h
      }
    }), u = Ct(u.length, a), l.push(d)), rn("prod", u, a);
    let p;
    if (n.shouldExecuteOnCPU([
      d
    ])) {
      const f = n.texData.get(d.dataId).values, { outVals: m, outShape: g, outDtype: y } = v9(d.shape, d.dtype, f, u);
      p = n.makeTensorInfo(g, y, m);
    } else {
      const [f, m] = qt(d.shape, u), g = X(m), y = be({
        inputs: {
          x: d
        },
        backend: n,
        attrs: {
          shape: [
            -1,
            g
          ]
        }
      }), b = Nf(r.dtype), w = Ri(y, b, "prod", n);
      p = be({
        inputs: {
          x: w
        },
        backend: n,
        attrs: {
          shape: f
        }
      }), l.push(y), l.push(w);
    }
    if (i) {
      l.push(p);
      const f = $t(p.shape, c);
      p = be({
        inputs: {
          x: p
        },
        backend: n,
        attrs: {
          shape: f
        }
      });
    }
    return l.forEach((f) => n.disposeIntermediateTensorInfo(f)), p;
  }
  const Ioe = {
    kernelName: Cu,
    backendName: "webgl",
    kernelFunc: Coe
  };
  function Noe(t) {
    const { inputs: e, backend: n, attrs: s } = t, { paramsNestedSplits: r, paramsDenseValues: o, indices: i } = e, { outputRaggedRank: a } = s, l = r.map((y) => n.readSync(y.dataId)), c = r.map((y) => y.shape), u = n.readSync(o.dataId), h = n.readSync(i.dataId), [d, p, f] = S9(l, c, u, o.shape, o.dtype, h, i.shape, a), m = d.map((y) => n.makeTensorInfo([
      y.length
    ], "int32", y)), g = n.makeTensorInfo(f, o.dtype, p);
    return m.concat([
      g
    ]);
  }
  const koe = {
    kernelName: ef,
    backendName: "webgl",
    kernelFunc: Noe
  };
  function Toe(t) {
    const { inputs: e, backend: n } = t, { starts: s, limits: r, deltas: o } = e, i = n.readSync(s.dataId), a = n.readSync(r.dataId), l = n.readSync(o.dataId), [c, u] = $9(i, s.shape, s.dtype, a, r.shape, l, o.shape), h = n.makeTensorInfo([
      c.length
    ], "int32", c), d = n.makeTensorInfo([
      u.length
    ], s.dtype, u);
    return [
      h,
      d
    ];
  }
  const Eoe = {
    kernelName: tf,
    backendName: "webgl",
    kernelFunc: Toe
  };
  function Roe(t) {
    const { inputs: e, backend: n, attrs: s } = t, { shape: r, values: o, defaultValue: i, rowPartitionTensors: a } = e, { rowPartitionTypes: l } = s, c = n.readSync(r.dataId), u = n.readSync(o.dataId), h = n.readSync(i.dataId), d = a.map((g) => n.readSync(g.dataId)), p = a.map((g) => g.shape), [f, m] = C9(c, r.shape, u, o.shape, o.dtype, h, i.shape, d, p, l);
    return n.makeTensorInfo(f, o.dtype, m);
  }
  const Aoe = {
    kernelName: nf,
    backendName: "webgl",
    kernelFunc: Roe
  };
  const TR = (t) => {
    const { backend: e, attrs: n } = t, { start: s, stop: r, step: o, dtype: i } = n, a = I9(s, r, o, i);
    return e.makeTensorInfo([
      a.length
    ], i, a);
  }, _oe = {
    kernelName: sf,
    backendName: "webgl",
    kernelFunc: TR
  };
  const Doe = "return 1.0 / x;", Ooe = Ye({
    opSnippet: Doe
  }), Foe = {
    kernelName: Wa,
    backendName: "webgl",
    kernelFunc: Ooe
  };
  const Loe = ws + `
  return (x < 0.0) ? 0.0 : x;
`, Poe = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, zoe = Ye({
    opSnippet: Loe,
    packedOpSnippet: Poe
  }), Moe = {
    kernelName: Ua,
    backendName: "webgl",
    kernelFunc: zoe
  };
  const Boe = ws + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, Voe = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, Woe = Ye({
    opSnippet: Boe,
    packedOpSnippet: Voe
  }), Uoe = {
    kernelName: Ga,
    backendName: "webgl",
    kernelFunc: Woe
  };
  class Goe {
    constructor(e, n, s, r, o) {
      this.variableNames = [
        "A"
      ], this.outputShape = [];
      const [i, a, l, c] = e;
      this.outputShape = [
        i,
        n,
        s,
        c
      ];
      const u = [
        r && n > 1 ? a - 1 : a,
        r && s > 1 ? l - 1 : l
      ], h = [
        r && n > 1 ? n - 1 : n,
        r && s > 1 ? s - 1 : s
      ];
      let d;
      o ? d = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : d = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
    }
  }
  class Hoe {
    constructor(e, n, s, r, o) {
      this.variableNames = [
        "A"
      ], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
      const [i, a, l, c] = e;
      this.outputShape = [
        i,
        n,
        s,
        c
      ];
      const u = [
        r && n > 1 ? a - 1 : a,
        r && s > 1 ? l - 1 : l
      ], h = [
        r && n > 1 ? n - 1 : n,
        r && s > 1 ? s - 1 : s
      ];
      let d;
      o ? d = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : d = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
    }
  }
  function joe(t) {
    const { inputs: e, backend: n, attrs: s } = t, { images: r } = e, { alignCorners: o, halfPixelCenters: i, size: a } = s, [l, c] = a, u = j().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new Hoe(r.shape, l, c, o, i) : new Goe(r.shape, l, c, o, i);
    return n.runWebGLProgram(u, [
      r
    ], "float32");
  }
  const qoe = {
    kernelName: ku,
    backendName: "webgl",
    kernelFunc: joe
  };
  class Koe {
    constructor(e, n, s) {
      this.variableNames = [
        "dy"
      ], this.outputShape = [], this.outputShape = n;
      const [, r, o] = n, [, i, a] = e, l = [
        s && i > 1 ? r - 1 : r,
        s && a > 1 ? o - 1 : o
      ], c = [
        s && i > 1 ? i - 1 : i,
        s && a > 1 ? a - 1 : a
      ], u = l[0] / c[0], h = l[1] / c[1], d = 1 / u, p = 1 / h, f = Math.ceil(d) * 2 + 2, m = Math.ceil(p) * 2 + 2;
      this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${r - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${o - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
    }
  }
  function Xoe(t) {
    const { inputs: e, backend: n, attrs: s } = t, { images: r, dy: o } = e, { alignCorners: i } = s, a = new Koe(o.shape, r.shape, i);
    return n.runWebGLProgram(a, [
      o
    ], o.dtype);
  }
  const Yoe = {
    kernelName: af,
    backendName: "webgl",
    kernelFunc: Xoe
  };
  class Zoe {
    constructor(e, n, s, r, o) {
      this.variableNames = [
        "A"
      ], this.outputShape = [];
      const [i, a, l, c] = e;
      this.outputShape = [
        i,
        n,
        s,
        c
      ];
      const u = [
        r && n > 1 ? a - 1 : a,
        r && s > 1 ? l - 1 : l
      ], h = [
        r && n > 1 ? n - 1 : n,
        r && s > 1 ? s - 1 : s
      ], d = r ? "0.5" : "0.0";
      let p;
      o ? p = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : p = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
    }
  }
  class Joe {
    constructor(e, n, s, r, o) {
      this.variableNames = [
        "A"
      ], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
      const [i, a, l, c] = e;
      this.outputShape = [
        i,
        n,
        s,
        c
      ];
      const u = [
        r && n > 1 ? a - 1 : a,
        r && s > 1 ? l - 1 : l
      ], h = [
        r && n > 1 ? n - 1 : n,
        r && s > 1 ? s - 1 : s
      ], d = r ? "0.5" : "0.0";
      let p;
      o ? p = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : p = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
    }
  }
  function Qoe(t) {
    const { inputs: e, backend: n, attrs: s } = t, { images: r } = e, { alignCorners: o, halfPixelCenters: i, size: a } = s, [l, c] = a, u = j().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new Joe(r.shape, l, c, o, i) : new Zoe(r.shape, l, c, o, i);
    return n.runWebGLProgram(u, [
      r
    ], r.dtype);
  }
  const eie = {
    kernelName: Nu,
    backendName: "webgl",
    kernelFunc: Qoe
  };
  class tie {
    constructor(e, n, s) {
      this.variableNames = [
        "dy"
      ], this.outputShape = [], this.outputShape = n;
      const [, r, o] = n, [, i, a] = e, l = [
        s && i > 1 ? r - 1 : r,
        s && a > 1 ? o - 1 : o
      ], c = [
        s && i > 1 ? i - 1 : i,
        s && a > 1 ? a - 1 : a
      ], u = l[0] / c[0], h = l[1] / c[1], d = 1 / u, p = 1 / h, f = Math.ceil(d) * 2 + 2, m = Math.ceil(p) * 2 + 2;
      this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${c[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${c[1]}));

            int sourceNearestRow = int(min(
                float(int(${r}) - 1),
                ${s} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${o}) - 1),
                ${s} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
    }
  }
  function nie(t) {
    const { inputs: e, backend: n, attrs: s } = t, { images: r, dy: o } = e, { alignCorners: i } = s, a = new tie(o.shape, r.shape, i);
    return n.runWebGLProgram(a, [
      o
    ], o.dtype);
  }
  const sie = {
    kernelName: of,
    backendName: "webgl",
    kernelFunc: nie
  };
  class rie {
    constructor(e, n) {
      this.variableNames = [
        "x"
      ];
      const s = e.length;
      if (s > 4) throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
      if (this.outputShape = e, s === 1) {
        this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;
        return;
      }
      const r = (a) => n.indexOf(a) !== -1 && e[a] !== 1 ? `${e[a]} - coords[${a}] - 1` : `coords[${a}]`, o = e.map((a, l) => r(l)).join(","), i = rt(s);
      this.userCode = `
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${o}));
      }
    `;
    }
  }
  class oie {
    constructor(e, n) {
      this.variableNames = [
        "x"
      ], this.packedInputs = true, this.packedOutput = true;
      const s = e.length;
      if (s > 4) throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
      this.outputShape = e;
      const r = mn("rc", s), o = `${r[s - 1]} + 1 < ${this.outputShape[s - 1]}`, i = `${r[s - 2]} + 1 < ${this.outputShape[s - 2]}`, a = rt(s);
      s === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${o}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(r.slice())};
          if(${o}){
            result.g = ${c(r.slice())};
          }
          if(${i}) {
            result.b = ${u(r.slice())};
            if(${o}) {
              result.a = ${h(r.slice())};
            }
          }
          setOutput(result);
        }
    `;
      function l(f) {
        return d(f);
      }
      function c(f) {
        return f[s - 1] = "(" + f[s - 1] + " + 1)", d(f);
      }
      function u(f) {
        return f[s - 2] = "(" + f[s - 2] + " + 1)", d(f);
      }
      function h(f) {
        return f[s - 1] = "(" + f[s - 1] + " + 1)", f[s - 2] = "(" + f[s - 2] + " + 1)", d(f);
      }
      function d(f) {
        const m = e.map((b, w) => p(w, f)), g = m.join(","), y = m.slice(-2).join(",");
        return `getChannel(getX(${g}), vec2(${y}))`;
      }
      function p(f, m) {
        return n.indexOf(f) !== -1 && e[f] !== 1 ? `${e[f]} - ${m[f]} - 1` : `${m[f]}`;
      }
    }
  }
  function iie(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { dims: o } = s, i = r.shape.length, a = Ve(o, r.shape);
    if (i === 0) return qn({
      inputs: {
        x: r
      },
      backend: n
    });
    const l = j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new oie(r.shape, a) : new rie(r.shape, a);
    return n.runWebGLProgram(l, [
      r
    ], r.dtype);
  }
  const aie = {
    kernelName: Tu,
    backendName: "webgl",
    kernelFunc: iie
  };
  class lie {
    constructor(e, n) {
      this.variableNames = [
        "Image"
      ], this.outputShape = [], this.customUniforms = [
        {
          name: "params",
          type: "vec4"
        }
      ];
      const s = e[1], r = e[2];
      this.outputShape = e;
      let o = "";
      typeof n == "number" ? o = `float outputValue = ${n.toFixed(2)};` : o = `
        vec3 fill = vec3(${n.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${o}
          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
    }
  }
  const cie = {
    kernelName: Cf,
    backendName: "webgl",
    kernelFunc: ({ inputs: t, attrs: e, backend: n }) => {
      const { image: s } = t, { radians: r, fillValue: o, center: i } = e, a = n, l = new lie(s.shape, o), [c, u] = Lx(i, s.shape[1], s.shape[2]), h = [
        [
          c,
          u,
          Math.sin(r),
          Math.cos(r)
        ]
      ];
      return a.runWebGLProgram(l, [
        s
      ], s.dtype, h);
    }
  };
  const uie = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`, hie = Ye({
    opSnippet: uie
  }), die = {
    kernelName: Ha,
    backendName: "webgl",
    kernelFunc: hie
  };
  const pie = "return inversesqrt(x);", fie = Ye({
    opSnippet: pie,
    cpuKernelImpl: N9
  }), mie = {
    kernelName: ja,
    backendName: "webgl",
    kernelFunc: fie
  };
  class s1 {
    constructor(e, n, s, r, o, i, a = true, l = false) {
      this.variableNames = [
        "updates",
        "indices",
        "defaultValue"
      ], this.outputShape = i;
      const c = rt(o.length), u = rt(i.length);
      let h = "";
      s === 1 ? h = "i" : s === 2 && (h = "i, j");
      const d = `getIndices(${h})`;
      let p = "";
      r === 1 ? p = "i" : r === 2 && (p = "i, coords[1]");
      const f = `getUpdates(${p})`;
      let m = "";
      l && (m = "coords[0], coords[1]");
      const g = `getDefaultValue(${m})`, y = n > 1 ? "strides[j]" : "strides";
      this.userCode = `
        ${c} strides = ${c}(${o});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${n}; j++) {
              int index = round(${d});
              flattenedIndex += index * ${y};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(${g}, sum, float(found)));
        }
      `;
    }
  }
  class gie {
    constructor(e, n, s, r, o, i, a = true, l = false) {
      this.variableNames = [
        "updates",
        "indices",
        "defaultValue"
      ], this.packedInputs = true, this.packedOutput = true, this.outputShape = i;
      const c = rt(o.length), u = rt(i.length);
      let h = "";
      s === 1 ? h = "i" : s === 2 && (h = "i, j");
      const d = `getIndices(${h})`;
      let p = "";
      r === 1 ? p = "i" : r === 2 && (p = "i, coords[1]");
      const f = `getUpdates(${p})`;
      let m = "";
      l && (m = "coords[0], coords[1]");
      const g = `getDefaultValue(${m})`, y = n > 1 ? "strides[j]" : "strides", b = n > 1 ? "strides[j + 1]" : "strides";
      this.userCode = `
        ${c} strides = ${c}(${o});

        void main() {
          ${u} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${e}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${n}; j+=2) {
              ivec4 index = round(${d});
              flattenedIndex += index.xz * ${y};
              if (j + 1 < ${n}) {
                flattenedIndex += index.yw * ${b};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${f};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${g}, sum, found));
        }
      `;
    }
  }
  function yie(t) {
    const { inputs: e, backend: n, attrs: s } = t, { indices: r, updates: o } = e, { shape: i } = s, { sliceRank: a, numUpdates: l, sliceSize: c, strides: u, outputSize: h } = No(o, r, i), d = [
      h / c,
      c
    ];
    if (h === 0) return n.makeTensorInfo(i, r.dtype);
    const p = be({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: [
          l,
          a
        ]
      }
    }), f = be({
      inputs: {
        x: o
      },
      backend: n,
      attrs: {
        shape: [
          l,
          c
        ]
      }
    }), m = n.makeTensorInfo([], "float32", new Float32Array([
      0
    ]));
    let g;
    j().getBool("WEBGL_PACK") ? g = new gie(l, a, p.shape.length, f.shape.length, u, d) : g = new s1(l, a, p.shape.length, f.shape.length, u, d);
    const y = n.runWebGLProgram(g, [
      f,
      p,
      m
    ], f.dtype), b = be({
      inputs: {
        x: y
      },
      backend: n,
      attrs: {
        shape: i
      }
    });
    return n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(y), n.disposeIntermediateTensorInfo(m), b;
  }
  const bie = {
    kernelName: lf,
    backendName: "webgl",
    kernelFunc: yie
  };
  class xie {
    constructor(e, n, s, r) {
      this.variableNames = [
        "sortedSequence",
        "values"
      ], this.customUniforms = [
        {
          name: "numInputs",
          type: "int"
        }
      ], this.outputShape = [
        e,
        s
      ];
      const o = "while (left < right) {", i = `for (int i = 0; i < ${Math.ceil(Math.log2(n + 1))}; ++i) { if (left >= right) break;`, a = j().getNumber("WEBGL_VERSION") === 2 ? o : i, l = r === "left" ? "<" : "<=";
      this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
    }
  }
  function wie(t) {
    const { inputs: e, backend: n, attrs: s } = t, { sortedSequence: r, values: o } = e, { side: i } = s, a = new xie(r.shape[0], r.shape[1], o.shape[1], i), l = [
      [
        r.shape[1]
      ]
    ];
    return n.runWebGLProgram(a, [
      r,
      o
    ], "int32", l);
  }
  const vie = {
    kernelName: uf,
    backendName: "webgl",
    kernelFunc: wie
  };
  class Sie {
    constructor(e, n, s) {
      this.variableNames = [
        "c",
        "a",
        "b"
      ], this.outputShape = n;
      let r, o;
      if (s > 4) throw Error(`Where for rank ${s} is not yet supported`);
      if (s === 1) o = "resRC", r = "resRC";
      else {
        const a = [
          "resRC.x",
          "resRC.y",
          "resRC.z",
          "resRC.w"
        ], l = [], c = [];
        for (let u = 0; u < n.length; u++) c.push(`${a[u]}`), u < e && l.push(`${a[u]}`);
        r = l.join(), o = c.join();
      }
      const i = rt(s);
      this.userCode = `
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${r});
        if (cVal >= 1.0) {
          setOutput(getA(${o}));
        } else {
          setOutput(getB(${o}));
        }
      }
    `;
    }
  }
  function $ie(t) {
    const { inputs: e, backend: n } = t, { condition: s, t: r, e: o } = e, i = new Sie(s.shape.length, r.shape, r.shape.length);
    return n.runWebGLProgram(i, [
      s,
      r,
      o
    ], An(r.dtype, o.dtype));
  }
  const Cie = {
    kernelName: Eu,
    backendName: "webgl",
    kernelFunc: $ie
  };
  const Iie = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${pm};
  float scale = ${fm};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`, Nie = Ye({
    opSnippet: Iie
  }), kie = {
    kernelName: qa,
    backendName: "webgl",
    kernelFunc: Nie
  };
  const Tie = kl + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`, Eie = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, Rie = Ye({
    opSnippet: Tie,
    packedOpSnippet: Eie,
    cpuKernelImpl: T9
  }), Aie = {
    kernelName: Za,
    backendName: "webgl",
    kernelFunc: Rie
  };
  const _ie = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`, Die = Ye({
    opSnippet: _ie
  }), Oie = {
    kernelName: Ya,
    backendName: "webgl",
    kernelFunc: Die
  };
  const Fie = kl + `
  return sin(x);
`, Lie = `
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${Ei}
  return result;
`, Pie = Ye({
    opSnippet: Fie,
    packedOpSnippet: Lie
  }), zie = {
    kernelName: Ka,
    backendName: "webgl",
    kernelFunc: Pie
  };
  const Mie = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`, Bie = Ye({
    opSnippet: Mie
  }), Vie = {
    kernelName: Xa,
    backendName: "webgl",
    kernelFunc: Bie
  };
  const Wie = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`, Uie = Ye({
    opSnippet: Wie
  }), Gie = {
    kernelName: Ja,
    backendName: "webgl",
    kernelFunc: Uie
  };
  const Hie = (t) => {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { blockShape: o, paddings: i } = s;
    C(r.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
    const a = o.reduce((y, b) => y * b), l = [
      [
        0,
        0
      ]
    ];
    l.push(...i);
    for (let y = 1 + o.length; y < r.shape.length; ++y) l.push([
      0,
      0
    ]);
    const c = [], u = kR({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        paddings: l,
        constantValue: 0
      }
    }), h = oh(u.shape, o, a, false), d = ih(h.length, o.length, false), p = ah(u.shape, o, a, false), f = be({
      inputs: {
        x: u
      },
      backend: n,
      attrs: {
        shape: h
      }
    }), m = bn({
      inputs: {
        x: f
      },
      backend: n,
      attrs: {
        perm: d
      }
    }), g = be({
      inputs: {
        x: m
      },
      backend: n,
      attrs: {
        shape: p
      }
    });
    return c.push(u), c.push(f), c.push(m), c.forEach((y) => n.disposeIntermediateTensorInfo(y)), g;
  }, jie = {
    kernelName: _u,
    backendName: "webgl",
    kernelFunc: Hie
  };
  function qie(t) {
    const { inputs: e, backend: n } = t, { indices: s, values: r, denseShape: o, defaultValue: i } = e;
    if (o.shape.length !== 1) throw new Error(`Dense shape must be a vector, saw:
         ${o.shape}`);
    if (s.shape.length !== 2) throw new Error(`Indices must be a matrix, saw:
         ${s.shape}`);
    if (r.shape.length !== 1) throw new Error(`Values must be a vector, saw:
         ${r.shape}`);
    if (i.shape.length !== 0) throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
    const a = n.readSync(s.dataId), l = n.readSync(r.dataId), c = n.readSync(o.dataId), u = n.readSync(i.dataId)[0], [h, d, p, f, m] = R9(a, s.shape, s.dtype, l, r.dtype, c, u);
    return [
      n.makeTensorInfo(d, s.dtype, h),
      n.makeTensorInfo([
        d[0]
      ], r.dtype, p),
      n.makeTensorInfo([
        f.length
      ], "bool", new Uint8Array(f.map((g) => Number(g)))),
      n.makeTensorInfo([
        m.length
      ], s.dtype, new Int32Array(m))
    ];
  }
  const Kie = {
    kernelName: hf,
    backendName: "webgl",
    kernelFunc: qie
  };
  function Xie(t) {
    const { inputs: e, backend: n } = t, { inputIndices: s, inputShape: r, newShape: o } = e;
    if (s.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);
    if (r.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape ${r.shape}`);
    if (o.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${o.shape}`);
    const i = Array.from(n.readSync(r.dataId)), a = n.readSync(s.dataId), l = Array.from(n.readSync(o.dataId)), [c, u, h] = A9(a, s.shape, s.dtype, i, l);
    return [
      n.makeTensorInfo(u, s.dtype, c),
      n.makeTensorInfo([
        h.length
      ], o.dtype, new Int32Array(h))
    ];
  }
  const Yie = {
    kernelName: df,
    backendName: "webgl",
    kernelFunc: Xie
  };
  function Zie(t) {
    const { inputs: e, backend: n } = t, { data: s, indices: r, segmentIds: o } = e;
    if (s.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
    if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
              ${r.shape}`);
    if (o.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
              ${o.shape}`);
    const i = n.readSync(s.dataId), a = n.readSync(r.dataId), l = n.readSync(o.dataId), [c, u] = Y2(i, s.shape, s.dtype, a, l, true);
    return n.makeTensorInfo(u, s.dtype, c);
  }
  const Jie = {
    kernelName: pf,
    backendName: "webgl",
    kernelFunc: Zie
  };
  function Qie(t) {
    const { inputs: e, backend: n } = t, { data: s, indices: r, segmentIds: o } = e;
    if (s.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar");
    if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
             ${r.shape}`);
    if (o.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
             ${o.shape}`);
    const i = n.readSync(s.dataId), a = n.readSync(r.dataId), l = n.readSync(o.dataId), [c, u] = Y2(i, s.shape, s.dtype, a, l);
    return n.makeTensorInfo(u, s.dtype, c);
  }
  const eae = {
    kernelName: ff,
    backendName: "webgl",
    kernelFunc: Qie
  };
  function tae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { sparseIndices: r, sparseValues: o, defaultValue: i } = e, { outputShape: a } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: h, outputSize: d } = No(o, r, a), p = false;
    if (o.dtype === "string") {
      const y = n.bufferSync(r), b = n.bufferSync(o), w = Cr(n.readSync(i.dataId)[0]), x = k9(y, b, a, d, u, c, l, h, w, p);
      return n.makeTensorInfo(a, x.dtype, x.values);
    }
    const f = new s1(c, l, r.shape.length, o.shape.length, h, [
      d,
      1
    ], p), m = n.runWebGLProgram(f, [
      o,
      r,
      i
    ], o.dtype), g = be({
      inputs: {
        x: m
      },
      backend: n,
      attrs: {
        shape: a
      }
    });
    return n.disposeIntermediateTensorInfo(m), g;
  }
  const nae = {
    kernelName: mf,
    backendName: "webgl",
    kernelFunc: tae
  };
  function sae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { numOrSizeSplits: o, axis: i } = s, a = Ve(i, r.shape)[0], l = Zx(r, o, a), c = r.shape.length, u = new Array(c).fill(0), h = r.shape.slice();
    return l.map((d) => {
      const p = [
        ...h
      ];
      p[a] = d;
      const f = Tl({
        inputs: {
          x: r
        },
        backend: n,
        attrs: {
          begin: u,
          size: p
        }
      });
      return u[a] += d, f;
    });
  }
  const rae = {
    kernelName: Du,
    backendName: "webgl",
    kernelFunc: sae
  };
  const HS = "return sqrt(x);", oae = Ye({
    opSnippet: HS,
    packedOpSnippet: HS,
    cpuKernelImpl: _9
  }), iae = {
    kernelName: Qa,
    backendName: "webgl",
    kernelFunc: oae
  };
  const aae = "return x * x;", lae = Ye({
    opSnippet: aae
  }), cae = {
    kernelName: gf,
    backendName: "webgl",
    kernelFunc: lae
  };
  const jS = "return (a - b) * (a - b);", uae = an({
    opSnippet: jS,
    packedOpSnippet: jS
  }), hae = {
    kernelName: el,
    backendName: "webgl",
    kernelFunc: uae
  };
  function dae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e;
    if (r.dtype !== "string") throw new Error("Input must be of datatype string");
    const o = n.readSync(r.dataId), i = Er(o), a = D9(i, "string", s);
    return n.makeTensorInfo(r.shape, "string", a);
  }
  const pae = {
    kernelName: Fu,
    backendName: "webgl",
    kernelFunc: dae
  };
  function fae({ inputs: t, attrs: e, backend: n }) {
    const { x: s } = t, r = ws + `
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `, o = new Ys(s.shape, r);
    return n.runWebGLProgram(o, [
      s
    ], s.dtype);
  }
  const mae = {
    kernelName: ol,
    backendName: "webgl",
    kernelFunc: fae
  };
  class gae {
    constructor(e, n, s) {
      this.variableNames = [
        "x"
      ], this.outputShape = s;
      const r = s.length, o = rt(s.length), i = rt(s.length);
      let a = "";
      if (r === 1) a = "coords * strides + begin";
      else {
        let l = 0;
        a = s.map((c, u) => (l++, s.length === 1 ? `coords * strides[${u}] + begin[${u}]` : `coords[${l - 1}] * strides[${u}] + begin[${u}]`)).join(",");
      }
      this.userCode = `
      ${o} begin = ${o}(${e});
      ${o} strides = ${o}(${n});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `;
    }
  }
  function yae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { begin: o, end: i, strides: a, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: h, shrinkAxisMask: d } = s, { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: w, strides: x } = _x(r.shape, o, i, a, l, c, u, h, d);
    let S;
    if (m) S = be({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: f
      }
    });
    else if (g || y) {
      C(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
      const E = Ex(b, w, x), R = Tl({
        inputs: {
          x: r
        },
        backend: n,
        attrs: {
          begin: b,
          size: E
        }
      });
      S = be({
        inputs: {
          x: R
        },
        backend: n,
        attrs: {
          shape: f
        }
      }), n.disposeIntermediateTensorInfo(R);
    } else if (n.shouldExecuteOnCPU([
      r
    ])) {
      const R = n.readSync(r.dataId), N = Me(r.shape, r.dtype, R), k = O9(p, N, x, b);
      S = n.makeTensorInfo(f, r.dtype, k.values);
    } else {
      const R = new gae(b, x, p);
      S = n.runWebGLProgram(R, [
        r
      ], r.dtype);
    }
    const I = be({
      inputs: {
        x: S
      },
      backend: n,
      attrs: {
        shape: f
      }
    });
    return n.disposeIntermediateTensorInfo(S), I;
  }
  const bae = {
    kernelName: yf,
    backendName: "webgl",
    kernelFunc: yae
  };
  function xae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { separator: r, nGramWidths: o, leftPad: i, rightPad: a, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: h } = e, d = n.readSync(u.dataId), p = n.readSync(h.dataId), [f, m] = F9(d, p, r, o, i, a, l, c);
    return [
      n.makeTensorInfo([
        f.length
      ], "string", f),
      n.makeTensorInfo(h.shape, "int32", m)
    ];
  }
  const wae = {
    kernelName: bf,
    backendName: "webgl",
    kernelFunc: xae
  };
  function vae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { skipEmpty: r } = s, { input: o, delimiter: i } = e;
    if (o.dtype !== "string") throw new Error("Input must be of datatype string");
    if (o.shape.length !== 1) throw new Error(`Input must be a vector, got shape: ${o.shape}`);
    if (i.shape.length !== 0) throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
    const a = n.readSync(o.dataId), l = n.readSync(i.dataId)[0], [c, u, h] = L9(a, l, r), d = u.length;
    return [
      n.makeTensorInfo([
        d,
        2
      ], "int32", c),
      n.makeTensorInfo([
        d
      ], "string", u),
      n.makeTensorInfo([
        2
      ], "int32", new Int32Array(h))
    ];
  }
  const Sae = {
    kernelName: xf,
    backendName: "webgl",
    kernelFunc: vae
  };
  function $ae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { numBuckets: r } = s, { input: o } = e;
    if (o.dtype !== "string") throw new Error("Input must be of datatype string");
    if (r <= 0) throw new Error("Number of buckets must be at least 1");
    const i = n.readSync(o.dataId), a = P9(i, r);
    return n.makeTensorInfo(o.shape, "int32", a);
  }
  const Cae = {
    kernelName: wf,
    backendName: "webgl",
    kernelFunc: $ae
  };
  const Iae = "return tan(x);", Nae = Ye({
    opSnippet: Iae
  }), kae = {
    kernelName: nl,
    backendName: "webgl",
    kernelFunc: Nae
  };
  const Tae = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`, Eae = Ye({
    opSnippet: Tae
  }), Rae = {
    kernelName: sl,
    backendName: "webgl",
    kernelFunc: Eae
  };
  function Aae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { tensor: r, indices: o, updates: i } = e, { sliceRank: a, numUpdates: l, sliceSize: c, strides: u, outputSize: h } = No(i, o, r.shape), d = [
      h / c,
      c
    ];
    if (h === 0) return n.makeTensorInfo(r.shape, o.dtype);
    const p = be({
      inputs: {
        x: o
      },
      backend: n,
      attrs: {
        shape: [
          l,
          a
        ]
      }
    }), f = be({
      inputs: {
        x: i
      },
      backend: n,
      attrs: {
        shape: [
          l,
          c
        ]
      }
    }), m = be({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        shape: d
      }
    }), g = new s1(l, a, p.shape.length, f.shape.length, u, d, false, true), y = n.runWebGLProgram(g, [
      f,
      p,
      m
    ], m.dtype), b = be({
      inputs: {
        x: y
      },
      backend: n,
      attrs: {
        shape: r.shape
      }
    });
    return n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(y), b;
  }
  const _ae = {
    kernelName: cf,
    backendName: "webgl",
    kernelFunc: Aae
  };
  class Dae {
    constructor(e, n) {
      this.variableNames = [
        "A"
      ];
      const s = new Array(e.length);
      for (let i = 0; i < s.length; i++) s[i] = e[i] * n[i];
      this.outputShape = s, this.rank = s.length;
      const r = rt(this.rank), o = Oae(e);
      this.userCode = `
      void main() {
        ${r} resRC = getOutputCoords();
        setOutput(getA(${o}));
      }
    `;
    }
  }
  function Oae(t) {
    const e = t.length;
    if (e > 5) throw Error(`Tile for rank ${e} is not yet supported`);
    if (e === 1) return `imod(resRC, ${t[0]})`;
    const n = [
      "resRC.x",
      "resRC.y",
      "resRC.z",
      "resRC.w",
      "resRC.u"
    ], s = [];
    for (let r = 0; r < t.length; r++) s.push(`imod(${n[r]}, ${t[r]})`);
    return s.join();
  }
  function ER(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { reps: o } = s;
    if (r.dtype === "string" || r.shape.length > 5) {
      const l = n.readSync(r.dataId), c = r.dtype === "string" ? l.map((d) => Cr(d)) : l, u = Me(r.shape, r.dtype, c), h = M9(u, o);
      return n.makeTensorInfo(h.shape, h.dtype, h.values);
    }
    const i = new Dae(r.shape, o);
    return n.runWebGLProgram(i, [
      r
    ], r.dtype);
  }
  const Fae = {
    kernelName: rl,
    backendName: "webgl",
    kernelFunc: ER
  };
  class Lae {
    constructor(e) {
      this.variableNames = [
        "x",
        "indices"
      ], this.customUniforms = [
        {
          name: "n",
          type: "int"
        },
        {
          name: "firstPass",
          type: "int"
        },
        {
          name: "negativeInf",
          type: "float"
        },
        {
          name: "dir",
          type: "int"
        },
        {
          name: "inc",
          type: "int"
        }
      ], this.outputShape = e, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
    }
  }
  class Pae {
    constructor(e) {
      this.variableNames = [
        "x",
        "indices"
      ], this.customUniforms = [
        {
          name: "n",
          type: "int"
        },
        {
          name: "firstPass",
          type: "int"
        },
        {
          name: "k",
          type: "int"
        }
      ], this.outputShape = e, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
    }
  }
  function _o(t, e) {
    e !== null && t.disposeIntermediateTensorInfo(e);
  }
  function qS(t) {
    let e = 1;
    for (; e < t; ) e *= 2;
    return e;
  }
  function zae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r } = e, { k: o, sorted: i } = s, a = j().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), l = j().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), c = r.shape, u = c[c.length - 1];
    if (n.shouldExecuteOnCPU([
      r
    ]) || u < a || o > l) {
      const k = n.readSync(r.dataId), [$, F] = B9(k, c, r.dtype, o, i);
      return [
        n.makeTensorInfo($.shape, $.dtype, $.values),
        n.makeTensorInfo(F.shape, F.dtype, F.values)
      ];
    }
    if (o === 0) return c[c.length - 1] = 0, [
      n.makeTensorInfo(c, r.dtype, []),
      n.makeTensorInfo(c, "int32", [])
    ];
    if (u === 1) return [
      r,
      $h({
        attrs: {
          shape: c,
          dtype: "int32",
          value: 0
        },
        backend: n
      })
    ];
    const h = n.texData.get(r.dataId), d = h !== null && h.isPacked, p = d ? n.unpackTensor(r) : r, m = X(c) / u, g = be({
      inputs: {
        x: p
      },
      attrs: {
        shape: [
          m,
          u
        ]
      },
      backend: n
    });
    d && _o(n, p);
    const y = qS(o), b = qS(u);
    let w = null;
    const x = () => w === null ? [
      g,
      g
    ] : [
      g,
      w
    ], S = (k, $, F) => {
      const M = x(), U = new Lae(F), V = [
        [
          u
        ],
        [
          w === null ? 1 : 0
        ],
        [
          Number.NEGATIVE_INFINITY
        ],
        [
          k
        ],
        [
          $
        ]
      ], H = w;
      w = n.runWebGLProgram(U, M, "int32", V), _o(n, H);
    };
    for (let k = 1; k < y; k *= 2) {
      const $ = k * 2;
      for (let F = k; F >= 1; F /= 2) S($, F, [
        m,
        b
      ]);
    }
    for (let k = b; k > y; k /= 2) {
      const $ = x(), F = new Pae([
        m,
        k / 2
      ]), U = [
        [
          u
        ],
        [
          w === null ? 1 : 0
        ],
        [
          y
        ]
      ], W = w;
      w = n.runWebGLProgram(F, $, "int32", U), _o(n, W);
      const V = y / 2, H = V * 2;
      for (let G = V; G >= 1; G /= 2) S(H, G, w.shape);
    }
    let I = w;
    w = Tl({
      inputs: {
        x: w
      },
      backend: n,
      attrs: {
        begin: 0,
        size: [
          m,
          o
        ]
      }
    }), _o(n, I);
    let E = vR({
      inputs: {
        x: g,
        indices: w
      },
      backend: n,
      attrs: {
        axis: 1,
        batchDims: 1
      }
    });
    _o(n, g);
    const R = c.slice(0, -1);
    R.push(o), I = w, w = be({
      inputs: {
        x: w
      },
      attrs: {
        shape: R
      },
      backend: n
    }), _o(n, I);
    const N = E;
    return E = be({
      inputs: {
        x: E
      },
      attrs: {
        shape: R
      },
      backend: n
    }), _o(n, N), [
      E,
      w
    ];
  }
  const Mae = {
    kernelName: vf,
    backendName: "webgl",
    kernelFunc: zae
  };
  class Bae {
    constructor(e, n, s, r, o, i) {
      this.variableNames = [
        "Image",
        "Transforms"
      ], this.outputShape = i;
      const a = s === "nearest" ? 1 : 2;
      let l;
      switch (r) {
        case "constant":
          l = 1;
          break;
        case "reflect":
          l = 2;
          break;
        case "wrap":
          l = 3;
          break;
        case "nearest":
          l = 4;
          break;
        default:
          l = 1;
          break;
      }
      this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${n}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${o});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${o});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${n}));
                float mapY = mapCoord(inY, float(${e}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
    }
  }
  function Vae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { image: r, transforms: o } = e, { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = s, [u, h, d, p] = r.shape, [f, m] = c ?? [
      h,
      d
    ], g = [
      u,
      f,
      m,
      p
    ], y = new Bae(h, d, i, a, l, g);
    return n.runWebGLProgram(y, [
      r,
      o
    ], "float32");
  }
  const Wae = {
    kernelName: Sf,
    backendName: "webgl",
    kernelFunc: Vae
  };
  function Uae(t) {
    const { inputs: e, attrs: n, backend: s } = t, { axis: r } = n, { x: o } = e;
    vl(o, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
    const i = s.readSync(o.dataId), { outputValues: a, outputShape: l, indices: c } = V9(i, r, o.shape, o.dtype);
    return [
      s.makeTensorInfo(l, o.dtype, a),
      s.makeTensorInfo([
        c.length
      ], "int32", c)
    ];
  }
  const Gae = {
    kernelName: $f,
    backendName: "webgl",
    kernelFunc: Uae
  };
  function Hae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { value: r } = e;
    let { axis: o } = s;
    o < 0 && (o += r.shape.length);
    const i = r, a = i.shape.length, l = r.shape[o], c = new Array(a - 1);
    let u = 0;
    for (let m = 0; m < a; m++) m !== o && (c[u++] = i.shape[m]);
    const h = [], d = new Array(a).fill(0), p = i.shape.slice();
    p[o] = 1;
    const f = new Array(l);
    for (let m = 0; m < f.length; m++) {
      d[o] = m;
      const g = Tl({
        inputs: {
          x: i
        },
        backend: n,
        attrs: {
          begin: d,
          size: p
        }
      }), y = be({
        inputs: {
          x: g
        },
        backend: n,
        attrs: {
          shape: c
        }
      });
      f[m] = y, h.push(g);
    }
    return h.forEach((m) => n.disposeIntermediateTensorInfo(m)), f;
  }
  const jae = {
    kernelName: Lu,
    backendName: "webgl",
    kernelFunc: Hae
  };
  class qae {
    constructor(e, n) {
      this.variableNames = [
        "x",
        "segmentIds"
      ];
      const s = e.windowSize, r = e.batchSize, o = e.inSize, i = e.numSegments, a = i * Math.ceil(o / s);
      this.outputShape = [
        r,
        a
      ];
      const l = "0.0", c = "sumValue", u = Math.floor(s / 4) * 4, h = s % 4, d = `
        sumValue += dot(values, segFilter);
    `;
      let p = "";
      o % s > 0 && (p = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return initializationValue;
        }
      `);
      let f = "";
      o % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${p}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${s}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${d}
        } else if (${h === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${d}
        } else if (${h === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${d}
        }
        setOutput(${c});
      }
    `;
    }
  }
  function Kae(t) {
    const { inputs: e, backend: n, attrs: s } = t, { x: r, segmentIds: o } = e, { numSegments: i } = s, a = r.shape.length, l = [];
    let c = 0;
    const u = bt([
      c
    ], a);
    let h = r;
    u != null && (h = bn({
      inputs: {
        x: r
      },
      backend: n,
      attrs: {
        perm: u
      }
    }), l.push(h), c = Ct(1, a)[0]);
    const d = ik(h.shape, c, i), p = X([
      h.shape[c]
    ]), f = be({
      inputs: {
        x: h
      },
      backend: n,
      attrs: {
        shape: [
          -1,
          p
        ]
      }
    });
    l.push(f);
    const m = Nf(r.dtype), g = (x, S, I, E, R) => {
      const N = x.shape[0], k = x.shape[1], $ = ok(k, R), F = {
        windowSize: $,
        inSize: k,
        batchSize: N,
        numSegments: R
      }, M = new qae(F, S), U = n.compileAndRun(M, [
        x,
        I
      ], E);
      if (l.push(U), U.shape[1] === R) return U;
      const W = TR({
        backend: n,
        attrs: {
          start: 0,
          stop: R,
          step: 1,
          dtype: "float32"
        }
      }), V = ER({
        inputs: {
          x: W
        },
        backend: n,
        attrs: {
          reps: [
            k / $
          ]
        }
      });
      return l.push(W), l.push(V), g(U, S, V, E, R);
    }, y = g(f, "unsortedSegmentSum", o, m, i), b = be({
      inputs: {
        x: y
      },
      backend: n,
      attrs: {
        shape: d
      }
    });
    let w = b;
    if (u != null) {
      l.push(b);
      const x = So(u);
      w = bn({
        inputs: {
          x: w
        },
        backend: n,
        attrs: {
          perm: x
        }
      });
    }
    return l.forEach((x) => n.disposeIntermediateTensorInfo(x)), w;
  }
  const Xae = {
    kernelName: Pu,
    backendName: "webgl",
    kernelFunc: Kae
  };
  const Yae = [
    DQ,
    FQ,
    zQ,
    VQ,
    UQ,
    jQ,
    KQ,
    YQ,
    eee,
    nee,
    oee,
    lee,
    hee,
    mee,
    bee,
    wee,
    See,
    Nee,
    Tee,
    Ree,
    Oee,
    Vee,
    Uee,
    qee,
    Xee,
    tte,
    ste,
    ate,
    gQ,
    ute,
    mte,
    xte,
    Ite,
    Tte,
    Rte,
    _te,
    Ote,
    zte,
    Vte,
    Gte,
    jte,
    Kte,
    Yte,
    Qte,
    tne,
    one,
    ane,
    une,
    pne,
    mne,
    xne,
    $ne,
    kne,
    Rne,
    Dne,
    One,
    Lne,
    zne,
    Bne,
    Wne,
    Gne,
    Kne,
    Zne,
    ese,
    nse,
    ose,
    lse,
    dse,
    gse,
    mQ,
    bse,
    pte,
    vse,
    Cse,
    kse,
    bQ,
    Ase,
    Fse,
    Pse,
    Vse,
    Gse,
    Kse,
    Zse,
    tre,
    ore,
    lre,
    ure,
    fre,
    gre,
    bre,
    Sre,
    Cre,
    Nre,
    Tre,
    Rre,
    Ore,
    zre,
    Wre,
    Yre,
    vQ,
    eoe,
    soe,
    ioe,
    coe,
    Zee,
    doe,
    foe,
    goe,
    xoe,
    $oe,
    wQ,
    Ioe,
    koe,
    Eoe,
    Aoe,
    _oe,
    Jee,
    jre,
    Foe,
    Moe,
    Uoe,
    $Q,
    qoe,
    Yoe,
    eie,
    sie,
    aie,
    cie,
    die,
    mie,
    bie,
    vie,
    Cie,
    kie,
    Aie,
    Oie,
    zie,
    Vie,
    Mee,
    Kre,
    Gie,
    jie,
    Kie,
    Yie,
    Jie,
    eae,
    nae,
    rae,
    iae,
    cae,
    hae,
    pae,
    mae,
    bae,
    wae,
    Sae,
    Cae,
    qre,
    RQ,
    kae,
    Rae,
    _ae,
    Fae,
    Mae,
    Wae,
    AQ,
    Gae,
    jae,
    Xae,
    poe
  ];
  for (const t of Yae) If(t);
  const Zae = "4.19.0";
  const Jae = {
    "tfjs-core": LN,
    "tfjs-backend-cpu": ME,
    "tfjs-backend-webgl": Q2,
    "tfjs-data": UT,
    "tfjs-layers": km,
    "tfjs-converter": kT,
    tfjs: Zae
  }, Qae = Object.freeze(Object.defineProperty({
    __proto__: null,
    Abs: Lc,
    Acos: ha,
    Acosh: da,
    AdadeltaOptimizer: xx,
    AdagradOptimizer: wx,
    AdamOptimizer: vx,
    AdamaxOptimizer: Sx,
    Add: xi,
    AddN: Pc,
    All: xp,
    Any: wp,
    ArgMax: zc,
    ArgMin: Mc,
    Asin: pa,
    Asinh: fa,
    Atan: ma,
    Atan2: ya,
    Atanh: ga,
    AvgPool: Bc,
    AvgPool3D: Vc,
    AvgPool3DGrad: Sp,
    AvgPoolGrad: vp,
    BatchMatMul: Wc,
    BatchToSpaceND: Uc,
    Bincount: $p,
    BitwiseAnd: Gc,
    BroadcastArgs: Cp,
    BroadcastTo: OC,
    Callback: ST,
    CallbackList: Ik,
    Cast: ba,
    Ceil: xa,
    ClipByValue: wa,
    Complex: Ip,
    ComplexAbs: Hc,
    Concat: jc,
    Conv2D: qc,
    Conv2DBackpropFilter: Np,
    Conv2DBackpropInput: Kc,
    Conv3D: Xc,
    Conv3DBackpropFilterV2: kp,
    Conv3DBackpropInputV2: Tp,
    Cos: va,
    Cosh: Sa,
    CropAndResize: Rp,
    Cumprod: Ep,
    Cumsum: Yc,
    CustomCallback: kk,
    DataStorage: Zy,
    DenseBincount: Ap,
    DepthToSpace: _p,
    DepthwiseConv2dNative: Zc,
    DepthwiseConv2dNativeBackpropFilter: Dp,
    DepthwiseConv2dNativeBackpropInput: Op,
    Diag: Fp,
    Dilation2D: Jc,
    Dilation2DBackpropFilter: Nd,
    Dilation2DBackpropInput: Id,
    Draw: Lp,
    get ENV() {
      return nb;
    },
    EarlyStopping: $T,
    Einsum: Pp,
    Elu: Ca,
    EluGrad: zp,
    Environment: _C,
    Equal: Qc,
    Erf: Ia,
    Exp: Na,
    ExpandDims: eu,
    Expm1: ka,
    FFT: Mp,
    Fill: Bp,
    FlipLeftRight: Vp,
    Floor: Ta,
    FloorDiv: Ea,
    FromPixels: kd,
    FusedBatchNorm: tu,
    FusedConv2D: fc,
    FusedDepthwiseConv2D: mc,
    GPGPUContext: cd,
    GatherNd: Wp,
    GatherV2: nu,
    GraphModel: E0,
    Greater: su,
    GreaterEqual: Ra,
    History: Nk,
    IFFT: Up,
    Identity: Aa,
    Imag: Gp,
    InputSpec: Et,
    IsFinite: _a,
    IsInf: Da,
    IsNan: Oa,
    KernelBackend: gp,
    LRN: uu,
    LRNGrad: jp,
    LayerVariable: vk,
    LayersModel: Sr,
    LeakyRelu: ru,
    Less: ou,
    LessEqual: iu,
    LinSpace: Hp,
    Log: Fa,
    Log1p: La,
    LogSoftmax: FC,
    LogicalAnd: au,
    LogicalNot: lu,
    LogicalOr: cu,
    LogicalXor: MO,
    LowerBound: BO,
    MathBackendCPU: yh,
    MathBackendWebGL: vh,
    MatrixBandPart: VO,
    Max: hu,
    MaxPool: du,
    MaxPool3D: pu,
    MaxPool3DGrad: Kp,
    MaxPoolGrad: qp,
    MaxPoolWithArgmax: Xp,
    Maximum: Pa,
    Mean: fu,
    Min: mu,
    Minimum: za,
    MirrorPad: gu,
    Mod: Ma,
    MomentumOptimizer: $x,
    Multinomial: Yp,
    Multiply: Ba,
    Neg: yu,
    NonMaxSuppressionV3: Zp,
    NonMaxSuppressionV4: Jp,
    NonMaxSuppressionV5: Qp,
    NotEqual: bu,
    OP_SCOPE_SUFFIX: ab,
    OneHot: wu,
    OnesLike: xu,
    Optimizer: zr,
    OptimizerConstructors: PN,
    Pack: vu,
    PadV2: Su,
    Pool: WO,
    Pow: Va,
    Prelu: $u,
    Prod: Cu,
    RMSPropOptimizer: Cx,
    RNN: Bs,
    RaggedGather: ef,
    RaggedRange: tf,
    RaggedTensorToTensor: nf,
    Range: sf,
    get Rank() {
      return zg;
    },
    Real: rf,
    RealDiv: $a,
    Reciprocal: Wa,
    get Reduction() {
      return fn;
    },
    Relu: Ua,
    Relu6: Ga,
    Reshape: Iu,
    ResizeBilinear: ku,
    ResizeBilinearGrad: af,
    ResizeNearestNeighbor: Nu,
    ResizeNearestNeighborGrad: of,
    Reverse: Tu,
    RotateWithOffset: Cf,
    Round: Ha,
    Rsqrt: ja,
    SGDOptimizer: cm,
    ScatterNd: lf,
    SearchSorted: uf,
    Select: Eu,
    Selu: qa,
    Sequential: ci,
    Sigmoid: Za,
    Sign: Ya,
    Sin: Ka,
    Sinh: Xa,
    Slice: Ru,
    Softmax: Ou,
    Softplus: Ja,
    SpaceToBatchND: _u,
    SparseFillEmptyRows: hf,
    SparseReshape: df,
    SparseSegmentMean: pf,
    SparseSegmentSum: ff,
    SparseToDense: mf,
    SplitV: Du,
    Sqrt: Qa,
    Square: gf,
    SquaredDifference: el,
    StaticRegexReplace: Fu,
    Step: ol,
    StridedSlice: yf,
    StringNGrams: bf,
    StringSplit: xf,
    StringToHashBucketFast: wf,
    Sub: tl,
    Sum: Au,
    SymbolicTensor: Fs,
    Tan: nl,
    Tanh: sl,
    Tensor: Xe,
    TensorBuffer: Rt,
    TensorScatterUpdate: cf,
    Tile: rl,
    TopK: vf,
    Transform: Sf,
    Transpose: qo,
    Unique: $f,
    Unpack: Lu,
    UnsortedSegmentSum: Pu,
    UpperBound: UO,
    Variable: bc,
    ZerosLike: zu,
    _FusedMatMul: pc,
    abs: kt,
    acos: mb,
    acosh: gb,
    add: ae,
    addN: pI,
    all: Ef,
    any: wc,
    argMax: ni,
    argMin: yb,
    asin: bb,
    asinh: xb,
    atan: wb,
    atan2: vb,
    atanh: Sb,
    avgPool: Wu,
    avgPool3d: Cb,
    backend: cb,
    backend_util: lk,
    basicLSTMCell: fI,
    batchNorm: il,
    batchNorm2d: Ib,
    batchNorm3d: Nb,
    batchNorm4d: kb,
    batchToSpaceND: Uu,
    bincount: Tb,
    bitwiseAnd: mI,
    booleanMaskAsync: QI,
    broadcastArgs: gI,
    broadcastTo: Ko,
    broadcast_util: wP,
    browser: zV,
    buffer: Me,
    callbacks: Qj,
    cast: ge,
    ceil: Eb,
    clipByValue: Dn,
    clone: er,
    complex: Nr,
    concat: vt,
    concat1d: Rb,
    concat2d: Ab,
    concat3d: _b,
    concat4d: Db,
    constraints: BU,
    conv1d: Rf,
    conv2d: kr,
    conv2dTranspose: Af,
    conv3d: Fb,
    conv3dTranspose: Lb,
    copyRegisteredKernels: qO,
    cos: Gu,
    cosh: _f,
    cosineWindow: tm,
    cumprod: $c,
    cumsum: Df,
    customGrad: lr,
    data: d6,
    denseBincount: Rd,
    deprecationWarn: NF,
    depthToSpace: Pb,
    depthwiseConv2d: al,
    deregisterOp: nq,
    device_util: wF,
    diag: bI,
    dilation2d: zb,
    disableDeprecationWarnings: IF,
    dispose: Oe,
    disposeVariables: kF,
    div: Ne,
    divNoNan: Mb,
    dot: Bb,
    dropout: fx,
    einsum: zo,
    elu: ll,
    enableDebugMode: CF,
    enableProdMode: $F,
    enclosingPowerOfTwo: mx,
    engine: $s,
    ensureShape: xI,
    env: j,
    equal: Gn,
    erf: Of,
    euclideanNorm: Wb,
    exp: On,
    expandDims: Yt,
    expm1: Ub,
    eye: Ff,
    fft: sh,
    fill: wi,
    findBackend: AF,
    findBackendFactory: _F,
    floor: ul,
    floorDiv: Tf,
    forceHalfFloat: eR,
    fused: lN,
    gather: hl,
    gatherND: sN,
    gather_util: MV,
    getBackend: QC,
    getGradient: Lg,
    getKernel: yc,
    getKernelsForBackend: Td,
    gpgpu_util: XJ,
    grad: s3,
    grads: r3,
    greater: wn,
    greaterEqual: Fr,
    ifft: ra,
    imag: Hu,
    image: ps,
    inTopKAsync: rN,
    initializers: nG,
    input: Vk,
    io: kx,
    irfft: Xf,
    isFinite: Gb,
    isInf: Hb,
    isNaN: jb,
    keep: Dt,
    kernel_impls: KV,
    layers: Rj,
    leakyRelu: ju,
    less: ea,
    lessEqual: $o,
    linalg: bx,
    linspace: SI,
    loadGraphModel: kK,
    loadGraphModelSync: TK,
    loadLayersModel: HG,
    localResponseNormalization: qb,
    log: Hn,
    log1p: qu,
    logSigmoid: Kb,
    logSoftmax: Pf,
    logSumExp: Ku,
    logicalAnd: ys,
    logicalNot: Xu,
    logicalOr: zf,
    logicalXor: Xb,
    losses: mN,
    lowerBound: CI,
    matMul: Be,
    math: EV,
    max: ss,
    maxPool: Yu,
    maxPool3d: Yb,
    maxPoolWithArgmax: II,
    maximum: ur,
    mean: mt,
    memory: Gg,
    meshgrid: NI,
    metrics: jj,
    min: Qi,
    minimum: co,
    mirrorPad: Zb,
    mod: Jb,
    model: KG,
    models: qj,
    moments: Zu,
    movingAverage: eN,
    mul: L,
    multiRNNCell: kI,
    multinomial: TI,
    neg: lt,
    nextFrame: Dx,
    norm: cl,
    notEqual: oi,
    oneHot: ta,
    ones: En,
    onesLike: jn,
    op: O,
    outerProduct: EI,
    pad: Lr,
    pad1d: RI,
    pad2d: AI,
    pad3d: _I,
    pad4d: DI,
    pool: Qb,
    pow: ar,
    prelu: Qu,
    print: fb,
    prod: ex,
    profile: TF,
    raggedGather: OI,
    raggedRange: FI,
    raggedTensorToTensor: LI,
    rand: PI,
    randomGamma: BI,
    randomNormal: Bf,
    randomStandardNormal: VI,
    randomUniform: Co,
    randomUniformInt: WI,
    range: ii,
    ready: JC,
    real: na,
    reciprocal: rx,
    registerBackend: lb,
    registerCallbackConstructor: YG,
    registerGradient: LC,
    registerKernel: If,
    registerOp: tq,
    regularizers: Zj,
    relu: zs,
    relu6: Vf,
    removeBackend: RF,
    reshape: P,
    reverse: rs,
    reverse1d: UI,
    reverse2d: GI,
    reverse3d: HI,
    reverse4d: jI,
    rfft: rh,
    round: Wf,
    rsqrt: Uf,
    scalar: Re,
    scatterND: tN,
    scatter_util: lM,
    searchSorted: Mf,
    selu: Gf,
    separableConv2d: Hf,
    sequential: XG,
    serialization: cV,
    setBackend: ZC,
    setPlatform: DF,
    setWebGLContext: n2,
    setdiff1dAsync: qI,
    shared: zE,
    sigmoid: Ts,
    sign: ox,
    signal: fN,
    sin: jf,
    sinh: qf,
    slice: je,
    slice1d: eh,
    slice2d: Kf,
    slice3d: th,
    slice4d: sa,
    slice_util: FN,
    softmax: nh,
    softplus: vi,
    spaceToBatchND: Ju,
    sparse: gN,
    sparseToDense: nN,
    spectral: pN,
    split: Rn,
    sqrt: Gt,
    square: st,
    squaredDifference: Yf,
    squeeze: Io,
    stack: yn,
    step: Si,
    stridedSlice: ix,
    string: yN,
    sub: ve,
    sum: $e,
    sumOutType: Nf,
    tan: ax,
    tanh: lo,
    tensor: Un,
    tensor1d: en,
    tensor2d: eo,
    tensor3d: lx,
    tensor4d: KI,
    tensor5d: XI,
    tensor6d: YI,
    tensorScatterUpdate: ZI,
    tensor_util: mF,
    test_util: vz,
    tidy: q,
    tile: Qn,
    time: EF,
    topk: ux,
    train: Fo,
    transpose: He,
    truncatedNormal: Jf,
    unique: hx,
    unregisterGradient: jO,
    unregisterKernel: HO,
    unsortedSegmentSum: Qf,
    unstack: os,
    upcastType: An,
    upperBound: JI,
    util: sF,
    valueAndGrad: o3,
    valueAndGrads: i3,
    variable: dx,
    variableGrads: $I,
    version: Jae,
    version_converter: kT,
    version_core: LN,
    version_cpu: ME,
    version_layers: km,
    version_webgl: Q2,
    webgl: fQ,
    webgl_util: tJ,
    where: Wt,
    whereAsync: px,
    zeros: Tt,
    zerosLike: qe
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  async function ele() {
    return (await uC(() => import("./index-BSeBy09o.js").then(async (m) => {
      await m.__tla;
      return m;
    }), __vite__mapDeps([3,1]))).setWasmPaths("/"), j().set("WEBGL_CPU_FORWARD", false), j().set("WEBGL_DELETE_TEXTURE_THRESHOLD", -1), j().set("WASM_HAS_SIMD_SUPPORT", true), await ZC("wasm"), await JC(), Qae;
  }
  await ele();
  const r1 = iD(xD);
  r1.use(cD());
  r1.use(IO);
  r1.mount("#app");
})();
export {
  wa as $,
  Lc as A,
  Sp as B,
  vp as C,
  Qy as D,
  C as E,
  Wc as F,
  hm as G,
  Rx as H,
  Aa as I,
  Ee as J,
  Ax as K,
  CE as L,
  Uc as M,
  oh as N,
  ih as O,
  ah as P,
  Px as Q,
  Iu as R,
  Ru as S,
  qo as T,
  zx as U,
  $p as V,
  Gc as W,
  Cp as X,
  ba as Y,
  xa as Z,
  pc as _,
  __tla,
  Fe as a,
  hu as a$,
  jc as a0,
  Ox as a1,
  tr as a2,
  YT as a3,
  ak as a4,
  qc as a5,
  Or as a6,
  jt as a7,
  Kc as a8,
  Xc as a9,
  Vp as aA,
  Ta as aB,
  Ea as aC,
  tu as aD,
  fc as aE,
  mc as aF,
  Wp as aG,
  um as aH,
  nu as aI,
  Jx as aJ,
  su as aK,
  Ra as aL,
  _a as aM,
  Da as aN,
  Oa as aO,
  ru as aP,
  ou as aQ,
  iu as aR,
  Hp as aS,
  Fa as aT,
  La as aU,
  au as aV,
  lu as aW,
  cu as aX,
  MO as aY,
  uu as aZ,
  jp as a_,
  vo as aa,
  kp as ab,
  Tp as ac,
  va as ad,
  Sa as ae,
  Rp as af,
  Ep as ag,
  So as ah,
  Yc as ai,
  Ap as aj,
  _p as ak,
  Zc as al,
  Fp as am,
  Jc as an,
  Vu as ao,
  Nd as ap,
  Id as aq,
  Ca as ar,
  zp as as,
  Qc as at,
  Ia as au,
  Na as av,
  eu as aw,
  ka as ax,
  Bp as ay,
  yi as az,
  ha as b,
  QN as b$,
  Pa as b0,
  du as b1,
  pu as b2,
  Kp as b3,
  qp as b4,
  Xp as b5,
  sn as b6,
  fu as b7,
  mu as b8,
  za as b9,
  Nu as bA,
  of as bB,
  Tu as bC,
  Cf as bD,
  Lx as bE,
  Ha as bF,
  ja as bG,
  lf as bH,
  No as bI,
  uf as bJ,
  Eu as bK,
  qa as bL,
  Za as bM,
  Ya as bN,
  Ka as bO,
  Xa as bP,
  Ja as bQ,
  _u as bR,
  hf as bS,
  YN as bT,
  XN as bU,
  KN as bV,
  df as bW,
  tk as bX,
  ek as bY,
  JN as bZ,
  ZN as b_,
  gu as ba,
  Ou as bb,
  Yp as bc,
  Ma as bd,
  Ba as be,
  yu as bf,
  Zp as bg,
  Jp as bh,
  Qp as bi,
  bu as bj,
  wu as bk,
  xu as bl,
  vu as bm,
  nn as bn,
  Su as bo,
  Va as bp,
  $u as bq,
  Cu as br,
  sf as bs,
  vE as bt,
  $a as bu,
  Wa as bv,
  Ua as bw,
  Ga as bx,
  ku as by,
  af as bz,
  da as c,
  Bx as c$,
  ty as c0,
  rk as c1,
  sk as c2,
  nk as c3,
  pf as c4,
  ff as c5,
  mf as c6,
  Du as c7,
  Zx as c8,
  Qa as c9,
  lz as cA,
  mle as cB,
  KO as cC,
  gp as cD,
  Zy as cE,
  $s as cF,
  Xt as cG,
  dc as cH,
  NF as cI,
  UC as cJ,
  lb as cK,
  rC as cL,
  cD as cM,
  ri as cN,
  Ue as cO,
  AC as cP,
  Tr as cQ,
  Cr as cR,
  Me as cS,
  or as cT,
  CC as cU,
  Xs as cV,
  Qs as cW,
  Ut as cX,
  fm as cY,
  pm as cZ,
  Mx as c_,
  gf as ca,
  el as cb,
  ol as cc,
  yf as cd,
  _x as ce,
  Ex as cf,
  bf as cg,
  RE as ch,
  xf as ci,
  AE as cj,
  wf as ck,
  _E as cl,
  tl as cm,
  Au as cn,
  nl as co,
  sl as cp,
  cf as cq,
  rl as cr,
  vf as cs,
  Sf as ct,
  $f as cu,
  PE as cv,
  Lu as cw,
  zu as cx,
  If as cy,
  j as cz,
  xi as d,
  Vm as d$,
  Vx as d0,
  Wx as d1,
  Ux as d2,
  Gx as d3,
  xt as d4,
  AO as d5,
  Ip as d6,
  An as d7,
  Er as d8,
  zE as d9,
  uC as dA,
  QC as dB,
  ZC as dC,
  JC as dD,
  fle as dE,
  n$ as dF,
  ap as dG,
  hA as dH,
  ds as dI,
  Jl as dJ,
  wt as dK,
  A$ as dL,
  k_ as dM,
  hs as dN,
  Js as dO,
  AA as dP,
  F$ as dQ,
  Tn as dR,
  dp as dS,
  cp as dT,
  Vi as dU,
  fA as dV,
  kg as dW,
  CA as dX,
  ale as dY,
  nle as dZ,
  gs as d_,
  Nf as da,
  Tx as db,
  rf as dc,
  Tt as dd,
  eb as de,
  Hc as df,
  Gp as dg,
  Np as dh,
  Dp as di,
  Op as dj,
  Lp as dk,
  Pp as dl,
  jx as dm,
  Kx as dn,
  Xx as dp,
  qx as dq,
  Yx as dr,
  Mp as ds,
  kd as dt,
  Up as du,
  im as dv,
  lm as dw,
  tn as dx,
  Pu as dy,
  ik as dz,
  Pc as e,
  ole as e0,
  so as e1,
  $_ as e2,
  Ki as e3,
  Dc as e4,
  bd as e5,
  ple as e6,
  dle as e7,
  sp as e8,
  cle as e9,
  tle as ea,
  v_ as eb,
  rle as ec,
  lle as ed,
  OA as ee,
  s$ as ef,
  HR as eg,
  Wy as eh,
  jh as ei,
  rp as ej,
  x_ as ek,
  tC as el,
  sle as em,
  ule as en,
  GR as eo,
  S_ as ep,
  ile as eq,
  hle as er,
  mD as es,
  Ct as f,
  bt as g,
  xp as h,
  rn as i,
  qt as j,
  $t as k,
  wp as l,
  zc as m,
  Mc as n,
  pa as o,
  Ve as p,
  fa as q,
  ma as r,
  X as s,
  Un as t,
  ya as u,
  ga as v,
  Bc as w,
  bs as x,
  Vc as y,
  Dr as z
};
